
WELDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000932c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800951c  0800951c  0001951c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009604  08009604  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009604  08009604  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009604  08009604  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009608  08009608  00019608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800960c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ec8  20000010  0800961c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20003ed8  0800961c  00023ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdfb  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d5d  00000000  00000000  0003be34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003fb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  00041168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8e0  00000000  00000000  00042590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a15  00000000  00000000  0005de70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2741  00000000  00000000  00076885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118fc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae0  00000000  00000000  0011901c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08009504 	.word	0x08009504

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08009504 	.word	0x08009504

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <MicrostepDriver_Ini>:
#include  "MicrostepDriver.h"


void MicrostepDriver_Ini(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
    htim3.Init.Prescaler = 7199; // Предделитель таймера 3
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a12:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000a16:	605a      	str	r2, [r3, #4]
    htim3.Init.Period = 10000; // Период ШИМа
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a1e:	60da      	str	r2, [r3, #12]
    TIM3->CCR1 = 5000; // Длительность импульса
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <MicrostepDriver_Ini+0x2c>)
 8000a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a26:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_Base_Init(&htim3);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a2a:	f005 f97f 	bl	8005d2c <HAL_TIM_Base_Init>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20003dd4 	.word	0x20003dd4
 8000a38:	40000400 	.word	0x40000400

08000a3c <MicrostepDriver_Run>:


void MicrostepDriver_Run (uint16_t freq, uint8_t dir, GPIO_TypeDef *EN1_Port, uint16_t EN1_Pin, GPIO_TypeDef *DIR1_Port, uint16_t DIR1_Pin, uint32_t PWM_Channel)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60ba      	str	r2, [r7, #8]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4603      	mov	r3, r0
 8000a48:	81fb      	strh	r3, [r7, #14]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	737b      	strb	r3, [r7, #13]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	80fb      	strh	r3, [r7, #6]
	if (freq != 0)
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d024      	beq.n	8000aa2 <MicrostepDriver_Run+0x66>
	{

	htim3.Init.Period = (htim3.Init.Prescaler /  freq) / MICRO_STEP_DEV; // Расчет периода следования импульсов
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a66:	60d3      	str	r3, [r2, #12]
	TIM3->CCR1 = htim3.Init.Period / 2; // Расчет коэффицента заполнения
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MicrostepDriver_Run+0x7c>)
 8000a6e:	085b      	lsrs	r3, r3, #1
 8000a70:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_TIM_Base_Init(&htim3);
 8000a72:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a74:	f005 f95a 	bl	8005d2c <HAL_TIM_Base_Init>

	if (dir == 0) // Направление вращения
 8000a78:	7b7b      	ldrb	r3, [r7, #13]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d106      	bne.n	8000a8c <MicrostepDriver_Run+0x50>
	{
		HAL_GPIO_WritePin(DIR1_Port, DIR1_Pin, GPIO_PIN_RESET);
 8000a7e:	8bbb      	ldrh	r3, [r7, #28]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	69b8      	ldr	r0, [r7, #24]
 8000a86:	f003 fec8 	bl	800481a <HAL_GPIO_WritePin>
 8000a8a:	e005      	b.n	8000a98 <MicrostepDriver_Run+0x5c>

	}
	else
	{
		HAL_GPIO_WritePin(DIR1_Port, DIR1_Pin, GPIO_PIN_SET);
 8000a8c:	8bbb      	ldrh	r3, [r7, #28]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4619      	mov	r1, r3
 8000a92:	69b8      	ldr	r0, [r7, #24]
 8000a94:	f003 fec1 	bl	800481a <HAL_GPIO_WritePin>
	}


	HAL_TIM_PWM_Start(&htim3, PWM_Channel); // Начало генерации ШИМ сигнала
 8000a98:	6a39      	ldr	r1, [r7, #32]
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a9c:	f005 f9ee 	bl	8005e7c <HAL_TIM_PWM_Start>
	else // Если частота задана как 0, то останов ШД
	{
		HAL_TIM_PWM_Stop(&htim3, PWM_Channel);
	}

}
 8000aa0:	e003      	b.n	8000aaa <MicrostepDriver_Run+0x6e>
		HAL_TIM_PWM_Stop(&htim3, PWM_Channel);
 8000aa2:	6a39      	ldr	r1, [r7, #32]
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000aa6:	f005 faa3 	bl	8005ff0 <HAL_TIM_PWM_Stop>
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20003dd4 	.word	0x20003dd4
 8000ab8:	40000400 	.word	0x40000400

08000abc <IndicatorPanel_Ini>:
#include "PCB_WELDER.h"

void IndicatorPanel_Ini (void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	STLED316S_Ini(oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); // Индикатор "ВЛЕВО"
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <IndicatorPanel_Ini+0x28>)
 8000ac4:	f000 fc6e 	bl	80013a4 <STLED316S_Ini>
	STLED316S_Ini(oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin); // Индикатор "ВПРАВО"
 8000ac8:	2120      	movs	r1, #32
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <IndicatorPanel_Ini+0x28>)
 8000acc:	f000 fc6a 	bl	80013a4 <STLED316S_Ini>
	STLED316S_Ini(oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin); // Индикаторы "СКОРОСТЬ" (ст. 3 разряда) и "ПРОГРАММА" (мл. 3 разряда)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <IndicatorPanel_Ini+0x2c>)
 8000ad4:	f000 fc66 	bl	80013a4 <STLED316S_Ini>
  //STLED316S_Ini(oSTLED316S_STB4_GPIO_Port, oSTLED316S_STB4_Pin); // Микросхема не установлена, резерв
	STLED316S_Ini(oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin); // Индикаторы "ЗАДЕРЖКА" (слева, ст. 2 разряда) "ЗАДЕРЖКА" (справа, 2 и 3  разряды драйвера)
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <IndicatorPanel_Ini+0x30>)
 8000adc:	f000 fc62 	bl	80013a4 <STLED316S_Ini>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	40010800 	.word	0x40010800

08000af0 <IndicatorPanel_SetValue>:

void IndicatorPanel_SetValue (IndicatorValues *IndicatorPanel0)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]
	uint8_t num;

	uint8_t LEDsOut;

	LEDsOut = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	737b      	strb	r3, [r7, #13]

	for(uint8_t i = 0; i < 6; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e006      	b.n	8000b10 <IndicatorPanel_SetValue+0x20>
	{
	    STLED_digVal[i] = 0;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	4a5b      	ldr	r2, [pc, #364]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 6; i++)
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b05      	cmp	r3, #5
 8000b14:	d9f5      	bls.n	8000b02 <IndicatorPanel_SetValue+0x12>
	}

	//uint8_t gg = 11;

	// Индикатор "ВЛЕВО"
	num = separate(IndicatorPanel0->Xs,  &STLED_digVal[0]);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	4956      	ldr	r1, [pc, #344]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f8e9 	bl	8000cf4 <separate>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_4dig(num, STLED_digVal);
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	4952      	ldr	r1, [pc, #328]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f926 	bl	8000d7c <IndicatorPanel_offset_4dig>
	STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin);
 8000b30:	2310      	movs	r3, #16
 8000b32:	4a51      	ldr	r2, [pc, #324]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000b34:	2104      	movs	r1, #4
 8000b36:	484f      	ldr	r0, [pc, #316]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b38:	f000 fc68 	bl	800140c <STLED316S_OutData>

	// Индикатор "ВПРАВО"
	num = separate(IndicatorPanel0->Xf,  &STLED_digVal[0]);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	885b      	ldrh	r3, [r3, #2]
 8000b40:	494c      	ldr	r1, [pc, #304]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f8d6 	bl	8000cf4 <separate>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_4dig(num, STLED_digVal);
 8000b4c:	7bbb      	ldrb	r3, [r7, #14]
 8000b4e:	4949      	ldr	r1, [pc, #292]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f913 	bl	8000d7c <IndicatorPanel_offset_4dig>
	STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin);
 8000b56:	2320      	movs	r3, #32
 8000b58:	4a47      	ldr	r2, [pc, #284]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	4845      	ldr	r0, [pc, #276]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b5e:	f000 fc55 	bl	800140c <STLED316S_OutData>

	// Вывод пред и пост задержки
	num = separate(IndicatorPanel0->Delay_s, &STLED_digVal[0]);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	791b      	ldrb	r3, [r3, #4]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4942      	ldr	r1, [pc, #264]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f8c2 	bl	8000cf4 <separate>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73bb      	strb	r3, [r7, #14]
	//IndicatorPanel_offset_2dig(num, &STLED_digVal[0]);
	num = separate(IndicatorPanel0->Delay_f, &STLED_digVal[2]);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4940      	ldr	r1, [pc, #256]	; (8000c7c <IndicatorPanel_SetValue+0x18c>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f8b9 	bl	8000cf4 <separate>
 8000b82:	4603      	mov	r3, r0
 8000b84:	73bb      	strb	r3, [r7, #14]
	//IndicatorPanel_offset_2dig(num, &STLED_digVal[2]);
	//STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);

	STLED316S_Single_Out(&STLED_digVal[0], 6, 1, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2106      	movs	r1, #6
 8000b90:	4838      	ldr	r0, [pc, #224]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b92:	f000 fc99 	bl	80014c8 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[1], 5, 0, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000b96:	2340      	movs	r3, #64	; 0x40
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2105      	movs	r1, #5
 8000ba0:	4838      	ldr	r0, [pc, #224]	; (8000c84 <IndicatorPanel_SetValue+0x194>)
 8000ba2:	f000 fc91 	bl	80014c8 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[2], 4, 1, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000ba6:	2340      	movs	r3, #64	; 0x40
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4832      	ldr	r0, [pc, #200]	; (8000c7c <IndicatorPanel_SetValue+0x18c>)
 8000bb2:	f000 fc89 	bl	80014c8 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[3], 3, 0, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2103      	movs	r1, #3
 8000bc0:	4831      	ldr	r0, [pc, #196]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000bc2:	f000 fc81 	bl	80014c8 <STLED316S_Single_Out>


	// Индикаторы "СКОРОСТЬ" (ст. 3 разряда) и "ПРОГРАММА" (мл. 3 разряда)
	num = separate(IndicatorPanel0->Speed, &STLED_digVal[0]);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	88db      	ldrh	r3, [r3, #6]
 8000bca:	492a      	ldr	r1, [pc, #168]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f891 	bl	8000cf4 <separate>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_3dig(num, &STLED_digVal[0]);
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	4926      	ldr	r1, [pc, #152]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f920 	bl	8000e20 <IndicatorPanel_offset_3dig>

	num = separate(IndicatorPanel0->Program, &STLED_digVal[3]);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	891b      	ldrh	r3, [r3, #8]
 8000be4:	4928      	ldr	r1, [pc, #160]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f884 	bl	8000cf4 <separate>
 8000bec:	4603      	mov	r3, r0
 8000bee:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_3dig(num, &STLED_digVal[3]);
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	4925      	ldr	r1, [pc, #148]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f913 	bl	8000e20 <IndicatorPanel_offset_3dig>
	STLED316S_OutData(STLED_digVal, 6, oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <IndicatorPanel_SetValue+0x19c>)
 8000bfe:	2106      	movs	r1, #6
 8000c00:	481c      	ldr	r0, [pc, #112]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000c02:	f000 fc03 	bl	800140c <STLED316S_OutData>


	if((IndicatorPanel0->LEDsState & LED_AUTO) == LED_AUTO)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7bdb      	ldrb	r3, [r3, #15]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <IndicatorPanel_SetValue+0x12c>
	{
		LEDsOut |= 0x10;
 8000c12:	7b7b      	ldrb	r3, [r7, #13]
 8000c14:	f043 0310 	orr.w	r3, r3, #16
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_PARKING) == LED_PARKING)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7bdb      	ldrb	r3, [r3, #15]
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <IndicatorPanel_SetValue+0x142>
	{
		LEDsOut |= 0x20;
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	f043 0320 	orr.w	r3, r3, #32
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_DOWN) == LED_DOWN)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7bdb      	ldrb	r3, [r3, #15]
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d004      	beq.n	8000c48 <IndicatorPanel_SetValue+0x158>
	{
		LEDsOut |= 0x40;
 8000c3e:	7b7b      	ldrb	r3, [r7, #13]
 8000c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_UP) == LED_UP)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7bdb      	ldrb	r3, [r3, #15]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d004      	beq.n	8000c5e <IndicatorPanel_SetValue+0x16e>
	{
		LEDsOut |= 0x80;
 8000c54:	7b7b      	ldrb	r3, [r7, #13]
 8000c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	737b      	strb	r3, [r7, #13]
	}

	// Вывод состояния светодиодов
	STLED316S_Direct_Single_Out(&LEDsOut, 2, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора
 8000c5e:	f107 000d 	add.w	r0, r7, #13
 8000c62:	2310      	movs	r3, #16
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000c66:	2102      	movs	r1, #2
 8000c68:	f000 fc90 	bl	800158c <STLED316S_Direct_Single_Out>
}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20003dc8 	.word	0x20003dc8
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	20003dca 	.word	0x20003dca
 8000c80:	40010800 	.word	0x40010800
 8000c84:	20003dc9 	.word	0x20003dc9
 8000c88:	20003dcb 	.word	0x20003dcb
 8000c8c:	40010c00 	.word	0x40010c00

08000c90 <IndicatorPanel_SetBrightness>:
	STLED316S_Direct_Single_Out(&LEDsOut, 2, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора

}

void IndicatorPanel_SetBrightness (IndicatorValues *IndicatorPanel0)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if (IndicatorPanel0->Brightness > 7)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7a9b      	ldrb	r3, [r3, #10]
 8000c9c:	2b07      	cmp	r3, #7
 8000c9e:	d902      	bls.n	8000ca6 <IndicatorPanel_SetBrightness+0x16>
	{
		IndicatorPanel0->Brightness = 7;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	729a      	strb	r2, [r3, #10]
	}
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7a9b      	ldrb	r3, [r3, #10]
 8000caa:	2210      	movs	r2, #16
 8000cac:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <IndicatorPanel_SetBrightness+0x58>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fcbc 	bl	800162c <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7a9b      	ldrb	r3, [r3, #10]
 8000cb8:	2220      	movs	r2, #32
 8000cba:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <IndicatorPanel_SetBrightness+0x58>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fcb5 	bl	800162c <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7a9b      	ldrb	r3, [r3, #10]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4908      	ldr	r1, [pc, #32]	; (8000cec <IndicatorPanel_SetBrightness+0x5c>)
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fcae 	bl	800162c <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7a9b      	ldrb	r3, [r3, #10]
 8000cd4:	2240      	movs	r2, #64	; 0x40
 8000cd6:	4906      	ldr	r1, [pc, #24]	; (8000cf0 <IndicatorPanel_SetBrightness+0x60>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fca7 	bl	800162c <STLED316S_SetBrightness>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <separate>:

int32_t separate (uint16_t in_data, uint8_t *out_data)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	80fb      	strh	r3, [r7, #6]
    int32_t k,i,m;
    k = in_data;
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	617b      	str	r3, [r7, #20]
    m = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]

    while(k != 0)       //цикл чтобы найти количество цифр в числе
 8000d08:	e00a      	b.n	8000d20 <separate+0x2c>
    {
        k = k / 10;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <separate+0x80>)
 8000d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d12:	1092      	asrs	r2, r2, #2
 8000d14:	17db      	asrs	r3, r3, #31
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
        m++;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
    while(k != 0)       //цикл чтобы найти количество цифр в числе
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f1      	bne.n	8000d0a <separate+0x16>
    }

    for(i=m-1;i>=0;i--)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	e018      	b.n	8000d60 <separate+0x6c>
    {
    	out_data[i] = in_data%10;      //берем последнюю цифру с числа
 8000d2e:	88fa      	ldrh	r2, [r7, #6]
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <separate+0x84>)
 8000d32:	fba3 1302 	umull	r1, r3, r3, r2
 8000d36:	08d9      	lsrs	r1, r3, #3
 8000d38:	460b      	mov	r3, r1
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	b299      	uxth	r1, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
    	in_data = in_data / 10;         //забираем эту цифру с числа
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <separate+0x84>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	80fb      	strh	r3, [r7, #6]
    for(i=m-1;i>=0;i--)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	dae3      	bge.n	8000d2e <separate+0x3a>
    }

    return m;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	66666667 	.word	0x66666667
 8000d78:	cccccccd 	.word	0xcccccccd

08000d7c <IndicatorPanel_offset_4dig>:

void IndicatorPanel_offset_4dig (uint8_t num, uint8_t *dataArray)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d841      	bhi.n	8000e14 <IndicatorPanel_offset_4dig+0x98>
 8000d90:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <IndicatorPanel_offset_4dig+0x1c>)
 8000d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d96:	bf00      	nop
 8000d98:	08000da9 	.word	0x08000da9
 8000d9c:	08000dcb 	.word	0x08000dcb
 8000da0:	08000def 	.word	0x08000def
 8000da4:	08000e15 	.word	0x08000e15
	{

	case 1:
	{
		dataArray[3] = dataArray[0];
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	3303      	adds	r3, #3
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	701a      	strb	r2, [r3, #0]
		dataArray[2] = 0;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	3302      	adds	r3, #2
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
		break;
 8000dc8:	e025      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
	}

	case 2:
	{
		dataArray[3] = dataArray[1];
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3303      	adds	r3, #3
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	7852      	ldrb	r2, [r2, #1]
 8000dd2:	701a      	strb	r2, [r3, #0]
		dataArray[2] = dataArray[0];
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	7812      	ldrb	r2, [r2, #0]
 8000ddc:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
		break;
 8000dec:	e013      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
	}

	case 3:
	{
		dataArray[3] = dataArray[2];
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	3303      	adds	r3, #3
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	7892      	ldrb	r2, [r2, #2]
 8000df6:	701a      	strb	r2, [r3, #0]
		dataArray[2] = dataArray[1];
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	7852      	ldrb	r2, [r2, #1]
 8000e00:	701a      	strb	r2, [r3, #0]
		dataArray[1] = dataArray[0];
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]

		break;
 8000e12:	e000      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
		break;
	}

default:
{
	break;
 8000e14:	bf00      	nop
}

	}

}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <IndicatorPanel_offset_3dig>:

}


void IndicatorPanel_offset_3dig (uint8_t num, uint8_t *dataArray)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d021      	beq.n	8000e76 <IndicatorPanel_offset_3dig+0x56>
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	dc21      	bgt.n	8000e7a <IndicatorPanel_offset_3dig+0x5a>
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d002      	beq.n	8000e40 <IndicatorPanel_offset_3dig+0x20>
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d00d      	beq.n	8000e5a <IndicatorPanel_offset_3dig+0x3a>
		break;
	}

default:
{
	break;
 8000e3e:	e01c      	b.n	8000e7a <IndicatorPanel_offset_3dig+0x5a>
		dataArray[2] = dataArray[0];
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3302      	adds	r3, #2
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
		break;
 8000e58:	e010      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
		dataArray[2] = dataArray[1];
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	7852      	ldrb	r2, [r2, #1]
 8000e62:	701a      	strb	r2, [r3, #0]
		dataArray[1] = dataArray[0];
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	7812      	ldrb	r2, [r2, #0]
 8000e6c:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
		break;
 8000e74:	e002      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
		break;
 8000e76:	bf00      	nop
 8000e78:	e000      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
	break;
 8000e7a:	bf00      	nop
}

	}

}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
	...

08000e88 <Carriage_Move>:

void Carriage_Move (uint16_t Speed, uint8_t Dir, uint8_t NumSM)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
 8000e92:	460b      	mov	r3, r1
 8000e94:	717b      	strb	r3, [r7, #5]
 8000e96:	4613      	mov	r3, r2
 8000e98:	713b      	strb	r3, [r7, #4]

uint16_t freq_pwm;

	freq_pwm = ((Speed / (60/10)) * STEPS_PER_ROTATE) / DISTANCE_PER_ROTATE; // Вычисление частоты ШИМ для скорости в см/мин
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <Carriage_Move+0x7c>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fb14 	bl	80004d4 <__aeabi_i2d>
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <Carriage_Move+0x80>)
 8000eb2:	f7ff fb79 	bl	80005a8 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <Carriage_Move+0x84>)
 8000ec4:	f7ff fc9a 	bl	80007fc <__aeabi_ddiv>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fd7c 	bl	80009cc <__aeabi_d2uiz>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	81fb      	strh	r3, [r7, #14]

	if (NumSM == 1)
 8000ed8:	793b      	ldrb	r3, [r7, #4]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10d      	bne.n	8000efa <Carriage_Move+0x72>
	{
		MicrostepDriver_Run (freq_pwm, Dir, oSMD_EN1_GPIO_Port, oSMD_EN1_Pin, oDIR1_GPIO_Port,  oDIR1_Pin, TIM_CHANNEL_1);
 8000ede:	7979      	ldrb	r1, [r7, #5]
 8000ee0:	89f8      	ldrh	r0, [r7, #14]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <Carriage_Move+0x88>)
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <Carriage_Move+0x8c>)
 8000ef6:	f7ff fda1 	bl	8000a3c <MicrostepDriver_Run>
	}
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	aaaaaaab 	.word	0xaaaaaaab
 8000f08:	40690000 	.word	0x40690000
 8000f0c:	404e0000 	.word	0x404e0000
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40010800 	.word	0x40010800

08000f18 <PCB_KeyScan>:

void PCB_KeyScan (void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	STLED316S_ReciveData(&WelderUnit.IndicatorPanel.KeyState[0], oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	4905      	ldr	r1, [pc, #20]	; (8000f34 <PCB_KeyScan+0x1c>)
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <PCB_KeyScan+0x20>)
 8000f22:	f000 fbdd 	bl	80016e0 <STLED316S_ReciveData>
	STLED316S_ReciveData(&WelderUnit.IndicatorPanel.KeyState[2], oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000f26:	2201      	movs	r2, #1
 8000f28:	4904      	ldr	r1, [pc, #16]	; (8000f3c <PCB_KeyScan+0x24>)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <PCB_KeyScan+0x28>)
 8000f2c:	f000 fbd8 	bl	80016e0 <STLED316S_ReciveData>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40010800 	.word	0x40010800
 8000f38:	20003559 	.word	0x20003559
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	2000355b 	.word	0x2000355b

08000f44 <PCB_InputsScan>:

void PCB_InputsScan (void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(iPedal_L_GPIO_Port, iPedal_L_Pin)) // Если Нажата педаль для зажима левой части заготовки, то установить бит, иначе сбросить
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4824      	ldr	r0, [pc, #144]	; (8000fdc <PCB_InputsScan+0x98>)
 8000f4c:	f003 fc4e 	bl	80047ec <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <PCB_InputsScan+0x22>
	{
		WelderUnit.HolderState |= WELDER_STATE_PEDAL_L;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f58:	7c5b      	ldrb	r3, [r3, #17]
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f62:	745a      	strb	r2, [r3, #17]
 8000f64:	e006      	b.n	8000f74 <PCB_InputsScan+0x30>
	}
	else
	{
		WelderUnit.HolderState &= ~WELDER_STATE_PEDAL_L;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f68:	7c5b      	ldrb	r3, [r3, #17]
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f72:	745a      	strb	r2, [r3, #17]
	}

	if (HAL_GPIO_ReadPin(iPedal_R_GPIO_Port, iPedal_R_Pin)) // Если Нажата педаль для зажима правой части заготовки, то установить бит, иначе сбросить
 8000f74:	2108      	movs	r1, #8
 8000f76:	4819      	ldr	r0, [pc, #100]	; (8000fdc <PCB_InputsScan+0x98>)
 8000f78:	f003 fc38 	bl	80047ec <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <PCB_InputsScan+0x4e>
	{
		WelderUnit.HolderState |= WELDER_STATE_PEDAL_R;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f8e:	745a      	strb	r2, [r3, #17]
 8000f90:	e006      	b.n	8000fa0 <PCB_InputsScan+0x5c>
	}
	else
	{
		WelderUnit.HolderState &= ~WELDER_STATE_PEDAL_R;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f94:	7c5b      	ldrb	r3, [r3, #17]
 8000f96:	f023 0302 	bic.w	r3, r3, #2
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f9e:	745a      	strb	r2, [r3, #17]
	}

	if (HAL_GPIO_ReadPin(iBackDoor_GPIO_Port, iBackDoor_Pin)) // Если задняя дверца закрыта, то установить бит, иначе сбросить
 8000fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa4:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <PCB_InputsScan+0xa0>)
 8000fa6:	f003 fc21 	bl	80047ec <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00c      	beq.n	8000fca <PCB_InputsScan+0x86>
	{
		WelderUnit.State |= WELDER_STATE_BACK_DOOR_CLOSE;
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fb2:	7c1b      	ldrb	r3, [r3, #16]
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fbc:	741a      	strb	r2, [r3, #16]
		WELDER_HEAD_UP
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2106      	movs	r1, #6
 8000fc2:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <PCB_InputsScan+0xa4>)
 8000fc4:	f003 fc29 	bl	800481a <HAL_GPIO_WritePin>
	}
	else
	{
		WelderUnit.State &= ~WELDER_STATE_BACK_DOOR_CLOSE;
	}
}
 8000fc8:	e006      	b.n	8000fd8 <PCB_InputsScan+0x94>
		WelderUnit.State &= ~WELDER_STATE_BACK_DOOR_CLOSE;
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fcc:	7c1b      	ldrb	r3, [r3, #16]
 8000fce:	f023 0310 	bic.w	r3, r3, #16
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b02      	ldr	r3, [pc, #8]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fd6:	741a      	strb	r2, [r3, #16]
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	2000353c 	.word	0x2000353c
 8000fe4:	40010c00 	.word	0x40010c00
 8000fe8:	40011000 	.word	0x40011000

08000fec <PCB_OutputControl>:

void PCB_OutputControl(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	static uint8_t StateOld = 0;

	PCB_InputsScan(); // Опрос входов платы
 8000ff0:	f7ff ffa8 	bl	8000f44 <PCB_InputsScan>


	if ((WelderUnit.HolderState & WELDER_STATE_PEDAL_L) != (StateOld & WELDER_STATE_PEDAL_L)) // Если произошли изменения на входе отвечающим за девую педаль
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <PCB_OutputControl+0xb4>)
 8000ff6:	7c5a      	ldrb	r2, [r3, #17]
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <PCB_OutputControl+0xb8>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4053      	eors	r3, r2
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00c      	beq.n	8001022 <PCB_OutputControl+0x36>
	{
		if(WelderUnit.HolderState & WELDER_STATE_PEDAL_L) // Если педаль была нажата (фронт импульса)
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <PCB_OutputControl+0xb4>)
 800100a:	7c5b      	ldrb	r3, [r3, #17]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <PCB_OutputControl+0x36>
		{
			WelderUnit.HolderState = WelderUnit.HolderState ^ WELDER_STATE_HOLDER_L; // Инвертировать состояние бита держателя затовки
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001016:	7c5b      	ldrb	r3, [r3, #17]
 8001018:	f083 0304 	eor.w	r3, r3, #4
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001020:	745a      	strb	r2, [r3, #17]
		}

	}

	if ((WelderUnit.HolderState & WELDER_STATE_PEDAL_R) != (StateOld & WELDER_STATE_PEDAL_R)) // Если произошли изменения на входе отвечающим за девую педаль
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001024:	7c5a      	ldrb	r2, [r3, #17]
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <PCB_OutputControl+0xb8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4053      	eors	r3, r2
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00c      	beq.n	8001050 <PCB_OutputControl+0x64>
	{
		if(WelderUnit.HolderState & WELDER_STATE_PEDAL_R) // Если педаль была нажата (фронт импульса)
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001038:	7c5b      	ldrb	r3, [r3, #17]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <PCB_OutputControl+0x64>
		{
			WelderUnit.HolderState = WelderUnit.HolderState ^ WELDER_STATE_HOLDER_R; // Инвертировать состояние бита держателя затовки
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001044:	7c5b      	ldrb	r3, [r3, #17]
 8001046:	f083 0308 	eor.w	r3, r3, #8
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <PCB_OutputControl+0xb4>)
 800104e:	745a      	strb	r2, [r3, #17]
		}

	}

	if(WelderUnit.HolderState & WELDER_STATE_HOLDER_L) // Если бит установлен, то зажать зажать заготвку, иначе отпустить
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001052:	7c5b      	ldrb	r3, [r3, #17]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <PCB_OutputControl+0x7c>
	{
		Valve_L_CLOSE
 800105c:	2201      	movs	r2, #1
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	4811      	ldr	r0, [pc, #68]	; (80010a8 <PCB_OutputControl+0xbc>)
 8001062:	f003 fbda 	bl	800481a <HAL_GPIO_WritePin>
 8001066:	e004      	b.n	8001072 <PCB_OutputControl+0x86>
	}
	else
	{
		Valve_L_OPEN
 8001068:	2200      	movs	r2, #0
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	480e      	ldr	r0, [pc, #56]	; (80010a8 <PCB_OutputControl+0xbc>)
 800106e:	f003 fbd4 	bl	800481a <HAL_GPIO_WritePin>
	}

	if(WelderUnit.HolderState & WELDER_STATE_HOLDER_R) // Если бит установлен, то зажать зажать заготвку, иначе отпустить
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001074:	7c5b      	ldrb	r3, [r3, #17]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <PCB_OutputControl+0x9e>
	{
		Valve_R_CLOSE
 800107e:	2201      	movs	r2, #1
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <PCB_OutputControl+0xbc>)
 8001084:	f003 fbc9 	bl	800481a <HAL_GPIO_WritePin>
 8001088:	e004      	b.n	8001094 <PCB_OutputControl+0xa8>
	}
	else
	{
		Valve_R_OPEN
 800108a:	2200      	movs	r2, #0
 800108c:	2140      	movs	r1, #64	; 0x40
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <PCB_OutputControl+0xbc>)
 8001090:	f003 fbc3 	bl	800481a <HAL_GPIO_WritePin>
	}

	StateOld = WelderUnit.HolderState; // Сохранить текущее состояние
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001096:	7c5a      	ldrb	r2, [r3, #17]
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <PCB_OutputControl+0xb8>)
 800109a:	701a      	strb	r2, [r3, #0]

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000353c 	.word	0x2000353c
 80010a4:	2000002c 	.word	0x2000002c
 80010a8:	40010c00 	.word	0x40010c00

080010ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(iSTLED316S_IRQN5_GPIO_Port, iSTLED316S_IRQN5_Pin) == GPIO_PIN_RESET)
 80010b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ba:	4822      	ldr	r0, [pc, #136]	; (8001144 <HAL_GPIO_EXTI_Callback+0x98>)
 80010bc:	f003 fb96 	bl	80047ec <HAL_GPIO_ReadPin>

	}



	if (HAL_GPIO_ReadPin(iFB_STEP1_GPIO_Port, iFB_STEP1_Pin) == GPIO_PIN_SET)
 80010c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c4:	4820      	ldr	r0, [pc, #128]	; (8001148 <HAL_GPIO_EXTI_Callback+0x9c>)
 80010c6:	f003 fb91 	bl	80047ec <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10e      	bne.n	80010ee <HAL_GPIO_EXTI_Callback+0x42>
		//#define configASSERT( x ) if ((x) == 0) {taskDISABLE_INTERRUPTS(); for( ;; );}
		// Без этого не работают семафоры


		static portBASE_TYPE xHigherPriorityTaskWoken;
		  xHigherPriorityTaskWoken = pdFALSE; // Не переключать контекст
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <HAL_GPIO_EXTI_Callback+0xa0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

		  //WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / STEPS_PER_ROTATE; // Вычисление текущей позиции каретки, мм

			  xSemaphoreGiveFromISR(xSemaphore_StepCount,&xHigherPriorityTaskWoken);
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <HAL_GPIO_EXTI_Callback+0xa4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	491c      	ldr	r1, [pc, #112]	; (800114c <HAL_GPIO_EXTI_Callback+0xa0>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 f9b1 	bl	8007444 <xQueueGiveFromISR>


		if( xHigherPriorityTaskWoken == pdTRUE )
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_GPIO_EXTI_Callback+0xa0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_EXTI_Callback+0x42>
				вместе с портом FreeRTOS. */
			 //portSWITCH_CONTEXT();
			//vTaskSwitchContext();
			//portYIELD_FROM_ISR(NULL);

			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 80010ea:	f007 f9f5 	bl	80084d8 <vTaskMissedYield>

		  }
	}

	if (HAL_GPIO_ReadPin(iCarriageStop_GPIO_Port, iCarriageStop_Pin) == GPIO_PIN_SET)
 80010ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f2:	4814      	ldr	r0, [pc, #80]	; (8001144 <HAL_GPIO_EXTI_Callback+0x98>)
 80010f4:	f003 fb7a 	bl	80047ec <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d116      	bne.n	800112c <HAL_GPIO_EXTI_Callback+0x80>
		// В файле FreeRTOSConfig.h закомментировать
		//#define configASSERT( x ) if ((x) == 0) {taskDISABLE_INTERRUPTS(); for( ;; );}
		// Без этого не работают семафоры

		static portBASE_TYPE xHigherPriorityTaskWoken2;
		  xHigherPriorityTaskWoken2 = pdFALSE; // Не переключать контекст
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

		  //WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / STEPS_PER_ROTATE; // Вычисление текущей позиции каретки, мм

			  xSemaphoreGiveFromISR(xSemaphore_Calibration, &xHigherPriorityTaskWoken2);
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_GPIO_EXTI_Callback+0xac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4912      	ldr	r1, [pc, #72]	; (8001154 <HAL_GPIO_EXTI_Callback+0xa8>)
 800110a:	4618      	mov	r0, r3
 800110c:	f006 f99a 	bl	8007444 <xQueueGiveFromISR>

			  WelderUnit.State |= 1<<3; // 3 бит - Состояние вывода iCarriageStop, 1 - коневик нажат кареткой
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001112:	7c1b      	ldrb	r3, [r3, #16]
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <HAL_GPIO_EXTI_Callback+0xb0>)
 800111c:	741a      	strb	r2, [r3, #16]


		if( xHigherPriorityTaskWoken2 == pdTRUE )
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d109      	bne.n	800113a <HAL_GPIO_EXTI_Callback+0x8e>
		  {
			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 8001126:	f007 f9d7 	bl	80084d8 <vTaskMissedYield>
	{
		WelderUnit.State &= ~0x08; //// 3 бит - Состояние вывода iCarriageStop 0 - коневик отжат.

	}

}
 800112a:	e006      	b.n	800113a <HAL_GPIO_EXTI_Callback+0x8e>
		WelderUnit.State &= ~0x08; //// 3 бит - Состояние вывода iCarriageStop 0 - коневик отжат.
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_GPIO_EXTI_Callback+0xb0>)
 800112e:	7c1b      	ldrb	r3, [r3, #16]
 8001130:	f023 0308 	bic.w	r3, r3, #8
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001138:	741a      	strb	r2, [r3, #16]
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40010c00 	.word	0x40010c00
 8001148:	40011000 	.word	0x40011000
 800114c:	20000030 	.word	0x20000030
 8001150:	20003560 	.word	0x20003560
 8001154:	20000034 	.word	0x20000034
 8001158:	20003dc4 	.word	0x20003dc4
 800115c:	2000353c 	.word	0x2000353c

08001160 <SaveProgramToFlash2>:

void SaveProgramToFlash2()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	uint32_t *p; // Указатель на считваемые из flash памяти данные

	uint16_t offset = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	80bb      	strh	r3, [r7, #4]

	p = (uint32_t*)PAGE; // p содержит начальный адрес записи параметров программы
 800116a:	4b3c      	ldr	r3, [pc, #240]	; (800125c <SaveProgramToFlash2+0xfc>)
 800116c:	603b      	str	r3, [r7, #0]

	for(uint16_t i = 0; i < 256; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	e010      	b.n	8001196 <SaveProgramToFlash2+0x36>
	{
		ReadFlashPage[i] = *(p + i);
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	4413      	add	r3, r2
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	88f9      	ldrh	r1, [r7, #6]
 8001180:	461a      	mov	r2, r3
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	4836      	ldr	r0, [pc, #216]	; (8001260 <SaveProgramToFlash2+0x100>)
 8001188:	00c9      	lsls	r1, r1, #3
 800118a:	4401      	add	r1, r0
 800118c:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i = 0; i < 256; i++)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	3301      	adds	r3, #1
 8001194:	80fb      	strh	r3, [r7, #6]
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	2bff      	cmp	r3, #255	; 0xff
 800119a:	d9eb      	bls.n	8001174 <SaveProgramToFlash2+0x14>
	}

	offset = WelderUnit.Program * 6;
 800119c:	4b31      	ldr	r3, [pc, #196]	; (8001264 <SaveProgramToFlash2+0x104>)
 800119e:	899b      	ldrh	r3, [r3, #12]
 80011a0:	461a      	mov	r2, r3
 80011a2:	0052      	lsls	r2, r2, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	80bb      	strh	r3, [r7, #4]

	ReadFlashPage[offset] = WelderUnit.Program;
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <SaveProgramToFlash2+0x104>)
 80011ac:	899b      	ldrh	r3, [r3, #12]
 80011ae:	88b9      	ldrh	r1, [r7, #4]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	482a      	ldr	r0, [pc, #168]	; (8001260 <SaveProgramToFlash2+0x100>)
 80011b8:	00c9      	lsls	r1, r1, #3
 80011ba:	4401      	add	r1, r0
 80011bc:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 1] = WelderUnit.Xs;
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <SaveProgramToFlash2+0x104>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	88ba      	ldrh	r2, [r7, #4]
 80011c6:	1c51      	adds	r1, r2, #1
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	4824      	ldr	r0, [pc, #144]	; (8001260 <SaveProgramToFlash2+0x100>)
 80011d0:	00c9      	lsls	r1, r1, #3
 80011d2:	4401      	add	r1, r0
 80011d4:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 2] = WelderUnit.Xf;
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <SaveProgramToFlash2+0x104>)
 80011da:	885b      	ldrh	r3, [r3, #2]
 80011dc:	88ba      	ldrh	r2, [r7, #4]
 80011de:	1c91      	adds	r1, r2, #2
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	481e      	ldr	r0, [pc, #120]	; (8001260 <SaveProgramToFlash2+0x100>)
 80011e8:	00c9      	lsls	r1, r1, #3
 80011ea:	4401      	add	r1, r0
 80011ec:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 3] = WelderUnit.Speed;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <SaveProgramToFlash2+0x104>)
 80011f2:	88db      	ldrh	r3, [r3, #6]
 80011f4:	88ba      	ldrh	r2, [r7, #4]
 80011f6:	1cd1      	adds	r1, r2, #3
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	4818      	ldr	r0, [pc, #96]	; (8001260 <SaveProgramToFlash2+0x100>)
 8001200:	00c9      	lsls	r1, r1, #3
 8001202:	4401      	add	r1, r0
 8001204:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 4] = WelderUnit.Delay_s;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <SaveProgramToFlash2+0x104>)
 800120a:	7a9b      	ldrb	r3, [r3, #10]
 800120c:	88ba      	ldrh	r2, [r7, #4]
 800120e:	1d11      	adds	r1, r2, #4
 8001210:	b2da      	uxtb	r2, r3
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	4812      	ldr	r0, [pc, #72]	; (8001260 <SaveProgramToFlash2+0x100>)
 8001218:	00c9      	lsls	r1, r1, #3
 800121a:	4401      	add	r1, r0
 800121c:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 5] = WelderUnit.Delay_f;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <SaveProgramToFlash2+0x104>)
 8001222:	7adb      	ldrb	r3, [r3, #11]
 8001224:	88ba      	ldrh	r2, [r7, #4]
 8001226:	1d51      	adds	r1, r2, #5
 8001228:	b2da      	uxtb	r2, r3
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <SaveProgramToFlash2+0x100>)
 8001230:	00c9      	lsls	r1, r1, #3
 8001232:	4401      	add	r1, r0
 8001234:	e9c1 2300 	strd	r2, r3, [r1]

	STM32_WriteToFlash3(ReadFlashPage, 64);
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4809      	ldr	r0, [pc, #36]	; (8001260 <SaveProgramToFlash2+0x100>)
 800123c:	f000 face 	bl	80017dc <STM32_WriteToFlash3>

	p = (uint32_t*)PAGE + offset/4; // p содержит начальный адрес записи параметров программы
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	b29b      	uxth	r3, r3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800124c:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 8001250:	603b      	str	r3, [r7, #0]

}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	0803f800 	.word	0x0803f800
 8001260:	20003570 	.word	0x20003570
 8001264:	2000353c 	.word	0x2000353c

08001268 <ReadProgramFromFlash2>:

void ReadProgramFromFlash2()
{
 8001268:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
	uint32_t *p; // Указатель на считваемые из flash памяти данные

	uint16_t offset = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	80bb      	strh	r3, [r7, #4]

	p = (uint32_t*)PAGE; // p содержит начальный адрес записи параметров программы
 8001274:	4b48      	ldr	r3, [pc, #288]	; (8001398 <ReadProgramFromFlash2+0x130>)
 8001276:	603b      	str	r3, [r7, #0]

	for(uint16_t i = 0; i < 256; i++)
 8001278:	2300      	movs	r3, #0
 800127a:	80fb      	strh	r3, [r7, #6]
 800127c:	e010      	b.n	80012a0 <ReadProgramFromFlash2+0x38>
	{
		ReadFlashPage[i] = *(p + i);
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	4413      	add	r3, r2
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	88f9      	ldrh	r1, [r7, #6]
 800128a:	461a      	mov	r2, r3
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	4842      	ldr	r0, [pc, #264]	; (800139c <ReadProgramFromFlash2+0x134>)
 8001292:	00c9      	lsls	r1, r1, #3
 8001294:	4401      	add	r1, r0
 8001296:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i = 0; i < 256; i++)
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	3301      	adds	r3, #1
 800129e:	80fb      	strh	r3, [r7, #6]
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	2bff      	cmp	r3, #255	; 0xff
 80012a4:	d9eb      	bls.n	800127e <ReadProgramFromFlash2+0x16>
	}

	offset = WelderUnit.Program * 6;
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 80012a8:	899b      	ldrh	r3, [r3, #12]
 80012aa:	461a      	mov	r2, r3
 80012ac:	0052      	lsls	r2, r2, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	80bb      	strh	r3, [r7, #4]

	if (WelderUnit.Program - ReadFlashPage[offset] <= 1 || ReadFlashPage[offset] - WelderUnit.Program <= 1)
 80012b4:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 80012b6:	899b      	ldrh	r3, [r3, #12]
 80012b8:	b298      	uxth	r0, r3
 80012ba:	f04f 0100 	mov.w	r1, #0
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	4a36      	ldr	r2, [pc, #216]	; (800139c <ReadProgramFromFlash2+0x134>)
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	ebb0 0802 	subs.w	r8, r0, r2
 80012ce:	eb61 0903 	sbc.w	r9, r1, r3
 80012d2:	f1b9 0f00 	cmp.w	r9, #0
 80012d6:	bf08      	it	eq
 80012d8:	f1b8 0f02 	cmpeq.w	r8, #2
 80012dc:	d311      	bcc.n	8001302 <ReadProgramFromFlash2+0x9a>
 80012de:	88bb      	ldrh	r3, [r7, #4]
 80012e0:	4a2e      	ldr	r2, [pc, #184]	; (800139c <ReadProgramFromFlash2+0x134>)
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 80012ec:	899b      	ldrh	r3, [r3, #12]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	1a84      	subs	r4, r0, r2
 80012f6:	eb61 0503 	sbc.w	r5, r1, r3
 80012fa:	2d00      	cmp	r5, #0
 80012fc:	bf08      	it	eq
 80012fe:	2c02      	cmpeq	r4, #2
 8001300:	d244      	bcs.n	800138c <ReadProgramFromFlash2+0x124>
	{
		if (ReadFlashPage[offset] <= PROGRAM_MAX)
 8001302:	88bb      	ldrh	r3, [r7, #4]
 8001304:	4a25      	ldr	r2, [pc, #148]	; (800139c <ReadProgramFromFlash2+0x134>)
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4413      	add	r3, r2
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf08      	it	eq
 8001312:	2a47      	cmpeq	r2, #71	; 0x47
 8001314:	d23a      	bcs.n	800138c <ReadProgramFromFlash2+0x124>
		{
			WelderUnit.Program = ReadFlashPage[offset];
 8001316:	88bb      	ldrh	r3, [r7, #4]
 8001318:	4a20      	ldr	r2, [pc, #128]	; (800139c <ReadProgramFromFlash2+0x134>)
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4413      	add	r3, r2
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	b292      	uxth	r2, r2
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 8001326:	819a      	strh	r2, [r3, #12]
			WelderUnit.Xs = ReadFlashPage[offset + 1];
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <ReadProgramFromFlash2+0x134>)
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4413      	add	r3, r2
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	b292      	uxth	r2, r2
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 800133a:	801a      	strh	r2, [r3, #0]
			WelderUnit.Xf = ReadFlashPage[offset + 2];
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	3302      	adds	r3, #2
 8001340:	4a16      	ldr	r2, [pc, #88]	; (800139c <ReadProgramFromFlash2+0x134>)
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4413      	add	r3, r2
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	b292      	uxth	r2, r2
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 800134e:	805a      	strh	r2, [r3, #2]
			WelderUnit.Speed = ReadFlashPage[offset + 3];
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	3303      	adds	r3, #3
 8001354:	4a11      	ldr	r2, [pc, #68]	; (800139c <ReadProgramFromFlash2+0x134>)
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4413      	add	r3, r2
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	b292      	uxth	r2, r2
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 8001362:	80da      	strh	r2, [r3, #6]
			WelderUnit.Delay_s = ReadFlashPage[offset + 4];
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	3304      	adds	r3, #4
 8001368:	4a0c      	ldr	r2, [pc, #48]	; (800139c <ReadProgramFromFlash2+0x134>)
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 8001376:	729a      	strb	r2, [r3, #10]
			WelderUnit.Delay_f = ReadFlashPage[offset + 5];
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	3305      	adds	r3, #5
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <ReadProgramFromFlash2+0x134>)
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 800138a:	72da      	strb	r2, [r3, #11]

//	STM32_WriteToFlash3(ReadFlashPage, 64);
//
//	p = (uint32_t*)PAGE + offset/4; // p содержит начальный адрес записи параметров программы

}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001396:	4770      	bx	lr
 8001398:	0803f800 	.word	0x0803f800
 800139c:	20003570 	.word	0x20003570
 80013a0:	2000353c 	.word	0x2000353c

080013a4 <STLED316S_Ini>:
};



void STLED316S_Ini (GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]

	STLED316S_SetBrightness(7, STLED_PORT_STB, STLED_PIN_STB);
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	461a      	mov	r2, r3
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	2007      	movs	r0, #7
 80013b8:	f000 f938 	bl	800162c <STLED316S_SetBrightness>


	STLED_TxData[0] = 0x0D; // Включить дисплей
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <STLED316S_Ini+0x60>)
 80013be:	220d      	movs	r2, #13
 80013c0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f003 fa26 	bl	800481a <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80013ce:	2005      	movs	r0, #5
 80013d0:	f000 f9e6 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, STLED_TxData, 1, 10000);
 80013d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80013d8:	2201      	movs	r2, #1
 80013da:	490a      	ldr	r1, [pc, #40]	; (8001404 <STLED316S_Ini+0x60>)
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <STLED316S_Ini+0x64>)
 80013de:	f003 feb9 	bl	8005154 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 80013e2:	2005      	movs	r0, #5
 80013e4:	f000 f9dc 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4619      	mov	r1, r3
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f003 fa13 	bl	800481a <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80013f4:	2005      	movs	r0, #5
 80013f6:	f000 f9d3 	bl	80017a0 <DelayMicro>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20003d98 	.word	0x20003d98
 8001408:	20003e1c 	.word	0x20003e1c

0800140c <STLED316S_OutData>:


void STLED316S_OutData (uint8_t *data, uint8_t num, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	461a      	mov	r2, r3
 8001418:	460b      	mov	r3, r1
 800141a:	72fb      	strb	r3, [r7, #11]
 800141c:	4613      	mov	r3, r2
 800141e:	813b      	strh	r3, [r7, #8]
	STLED_TxData[0] = 0x00; // Вывод с автоикрементом адреса
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <STLED316S_OutData+0xb0>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]

	STLED_TxData[1] = 0x00;
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <STLED316S_OutData+0xb0>)
 8001428:	2200      	movs	r2, #0
 800142a:	705a      	strb	r2, [r3, #1]
	STLED_TxData[2] = 0x00;
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <STLED316S_OutData+0xb0>)
 800142e:	2200      	movs	r2, #0
 8001430:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = 0x00;
 8001432:	4b22      	ldr	r3, [pc, #136]	; (80014bc <STLED316S_OutData+0xb0>)
 8001434:	2200      	movs	r2, #0
 8001436:	70da      	strb	r2, [r3, #3]
	STLED_TxData[4] = 0x00;
 8001438:	4b20      	ldr	r3, [pc, #128]	; (80014bc <STLED316S_OutData+0xb0>)
 800143a:	2200      	movs	r2, #0
 800143c:	711a      	strb	r2, [r3, #4]
	STLED_TxData[5] = 0x00;
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <STLED316S_OutData+0xb0>)
 8001440:	2200      	movs	r2, #0
 8001442:	715a      	strb	r2, [r3, #5]
	STLED_TxData[6] = 0x00;
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <STLED316S_OutData+0xb0>)
 8001446:	2200      	movs	r2, #0
 8001448:	719a      	strb	r2, [r3, #6]

	for(uint8_t i = 0; i < num; i++)
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
 800144e:	e00d      	b.n	800146c <STLED316S_OutData+0x60>
	{
		STLED_TxData[i + 1] = code_digit[data[i]];
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	3301      	adds	r3, #1
 800145e:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <STLED316S_OutData+0xb4>)
 8001460:	5c51      	ldrb	r1, [r2, r1]
 8001462:	4a16      	ldr	r2, [pc, #88]	; (80014bc <STLED316S_OutData+0xb0>)
 8001464:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < num; i++)
 8001466:	7dfb      	ldrb	r3, [r7, #23]
 8001468:	3301      	adds	r3, #1
 800146a:	75fb      	strb	r3, [r7, #23]
 800146c:	7dfa      	ldrb	r2, [r7, #23]
 800146e:	7afb      	ldrb	r3, [r7, #11]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3ed      	bcc.n	8001450 <STLED316S_OutData+0x44>
	}

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 8001474:	893b      	ldrh	r3, [r7, #8]
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f003 f9cd 	bl	800481a <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001480:	2005      	movs	r0, #5
 8001482:	f000 f98d 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], num + 1, 10000);
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	b29a      	uxth	r2, r3
 800148e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001492:	490a      	ldr	r1, [pc, #40]	; (80014bc <STLED316S_OutData+0xb0>)
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <STLED316S_OutData+0xb8>)
 8001496:	f003 fe5d 	bl	8005154 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 800149a:	2005      	movs	r0, #5
 800149c:	f000 f980 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 80014a0:	893b      	ldrh	r3, [r7, #8]
 80014a2:	2201      	movs	r2, #1
 80014a4:	4619      	mov	r1, r3
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f003 f9b7 	bl	800481a <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80014ac:	2005      	movs	r0, #5
 80014ae:	f000 f977 	bl	80017a0 <DelayMicro>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20003d98 	.word	0x20003d98
 80014c0:	080095b8 	.word	0x080095b8
 80014c4:	20003e1c 	.word	0x20003e1c

080014c8 <STLED316S_Single_Out>:

void STLED316S_Single_Out (uint8_t *data, uint8_t num, uint8_t DP, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	72fb      	strb	r3, [r7, #11]
 80014d6:	4613      	mov	r3, r2
 80014d8:	72bb      	strb	r3, [r7, #10]
	STLED_TxData[0] = 0x00;
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0x00;
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	705a      	strb	r2, [r3, #1]

	STLED_TxData[0] |= 0x20; // Вывод значения без автоинкремента, в заданный разряд
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f043 0320 	orr.w	r3, r3, #32
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014f2:	701a      	strb	r2, [r3, #0]
	STLED_TxData[0] |= ((6-num) & 0x07); // В какой разряд выводить
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	f1c3 0306 	rsb	r3, r3, #6
 8001500:	b2db      	uxtb	r3, r3
 8001502:	b25b      	sxtb	r3, r3
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	b25b      	sxtb	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b25b      	sxtb	r3, r3
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <STLED316S_Single_Out+0xb8>)
 8001512:	701a      	strb	r2, [r3, #0]

	STLED_TxData[1] = *data; // Выводимое значение
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <STLED316S_Single_Out+0xb8>)
 800151a:	705a      	strb	r2, [r3, #1]


	STLED_TxData[1] = code_digit[data[0]];
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <STLED316S_Single_Out+0xbc>)
 8001524:	5c9a      	ldrb	r2, [r3, r2]
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <STLED316S_Single_Out+0xb8>)
 8001528:	705a      	strb	r2, [r3, #1]

	if(DP) // Вывод точки
 800152a:	7abb      	ldrb	r3, [r7, #10]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <STLED316S_Single_Out+0x76>
	{
		STLED_TxData[1] |= 0x80;
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <STLED316S_Single_Out+0xb8>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <STLED316S_Single_Out+0xb8>)
 800153c:	705a      	strb	r2, [r3, #1]
	}

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 800153e:	8b3b      	ldrh	r3, [r7, #24]
 8001540:	2200      	movs	r2, #0
 8001542:	4619      	mov	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f003 f968 	bl	800481a <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 800154a:	2005      	movs	r0, #5
 800154c:	f000 f928 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], 2, 10000);
 8001550:	f242 7310 	movw	r3, #10000	; 0x2710
 8001554:	2202      	movs	r2, #2
 8001556:	490a      	ldr	r1, [pc, #40]	; (8001580 <STLED316S_Single_Out+0xb8>)
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <STLED316S_Single_Out+0xc0>)
 800155a:	f003 fdfb 	bl	8005154 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 800155e:	2005      	movs	r0, #5
 8001560:	f000 f91e 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 8001564:	8b3b      	ldrh	r3, [r7, #24]
 8001566:	2201      	movs	r2, #1
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f003 f955 	bl	800481a <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US + 100); // Без доп задержки 100 мкС зависает (Hard Fault)
 8001570:	2069      	movs	r0, #105	; 0x69
 8001572:	f000 f915 	bl	80017a0 <DelayMicro>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20003d98 	.word	0x20003d98
 8001584:	080095b8 	.word	0x080095b8
 8001588:	20003e1c 	.word	0x20003e1c

0800158c <STLED316S_Direct_Single_Out>:

void STLED316S_Direct_Single_Out (uint8_t *data, uint8_t num, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	461a      	mov	r2, r3
 8001598:	460b      	mov	r3, r1
 800159a:	72fb      	strb	r3, [r7, #11]
 800159c:	4613      	mov	r3, r2
 800159e:	813b      	strh	r3, [r7, #8]
	STLED_TxData[0] = 0x00;
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0x00;
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	705a      	strb	r2, [r3, #1]

	STLED_TxData[0] |= 0x20; // Вывод значения без автоинкремента, в заданный разряд
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	f043 0320 	orr.w	r3, r3, #32
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015b8:	701a      	strb	r2, [r3, #0]
	STLED_TxData[0] |= ((6-num) & 0x07); // В какой разряд выводить
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b25a      	sxtb	r2, r3
 80015c0:	7afb      	ldrb	r3, [r7, #11]
 80015c2:	f1c3 0306 	rsb	r3, r3, #6
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015d8:	701a      	strb	r2, [r3, #0]

	STLED_TxData[1] = *data; // Выводимое значение
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015e0:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 80015e2:	893b      	ldrh	r3, [r7, #8]
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f003 f916 	bl	800481a <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80015ee:	2005      	movs	r0, #5
 80015f0:	f000 f8d6 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], 2, 10000);
 80015f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80015f8:	2202      	movs	r2, #2
 80015fa:	490a      	ldr	r1, [pc, #40]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015fc:	480a      	ldr	r0, [pc, #40]	; (8001628 <STLED316S_Direct_Single_Out+0x9c>)
 80015fe:	f003 fda9 	bl	8005154 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 8001602:	2005      	movs	r0, #5
 8001604:	f000 f8cc 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 8001608:	893b      	ldrh	r3, [r7, #8]
 800160a:	2201      	movs	r2, #1
 800160c:	4619      	mov	r1, r3
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f003 f903 	bl	800481a <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001614:	2005      	movs	r0, #5
 8001616:	f000 f8c3 	bl	80017a0 <DelayMicro>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20003d98 	.word	0x20003d98
 8001628:	20003e1c 	.word	0x20003e1c

0800162c <STLED316S_SetBrightness>:

void STLED316S_SetBrightness (uint8_t Bright, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	4613      	mov	r3, r2
 800163a:	80bb      	strh	r3, [r7, #4]
	STLED_TxData[0] = 0x10;
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 800163e:	2210      	movs	r2, #16
 8001640:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0xE5; // E5 - LSB2:0 - кол разряд (0b101 = 6 разрадам), LSB4:3 - режим яркости, LSB7:5 - яркость
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001644:	22e5      	movs	r2, #229	; 0xe5
 8001646:	705a      	strb	r2, [r3, #1]

	STLED_TxData[2] = 0x00;
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 800164a:	2200      	movs	r2, #0
 800164c:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = 0x00;
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001650:	2200      	movs	r2, #0
 8001652:	70da      	strb	r2, [r3, #3]
	STLED_TxData[4] = 0x00;
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001656:	2200      	movs	r2, #0
 8001658:	711a      	strb	r2, [r3, #4]

	STLED_TxData[2] = (Bright<<4) | (Bright);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	b25a      	sxtb	r2, r3
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4313      	orrs	r3, r2
 8001666:	b25b      	sxtb	r3, r3
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 800166c:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = (Bright<<4) | (Bright);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	b25a      	sxtb	r2, r3
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4313      	orrs	r3, r2
 800167a:	b25b      	sxtb	r3, r3
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001680:	70da      	strb	r2, [r3, #3]
	STLED_TxData[4] = (Bright<<4) | (Bright);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	b25a      	sxtb	r2, r3
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	4313      	orrs	r3, r2
 800168e:	b25b      	sxtb	r3, r3
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001694:	711a      	strb	r2, [r3, #4]


	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	4619      	mov	r1, r3
 800169c:	6838      	ldr	r0, [r7, #0]
 800169e:	f003 f8bc 	bl	800481a <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80016a2:	2005      	movs	r0, #5
 80016a4:	f000 f87c 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], 5, 10000);
 80016a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80016ac:	2205      	movs	r2, #5
 80016ae:	490a      	ldr	r1, [pc, #40]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <STLED316S_SetBrightness+0xb0>)
 80016b2:	f003 fd4f 	bl	8005154 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 80016b6:	2005      	movs	r0, #5
 80016b8:	f000 f872 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	4619      	mov	r1, r3
 80016c2:	6838      	ldr	r0, [r7, #0]
 80016c4:	f003 f8a9 	bl	800481a <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80016c8:	2005      	movs	r0, #5
 80016ca:	f000 f869 	bl	80017a0 <DelayMicro>

}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20003d98 	.word	0x20003d98
 80016dc:	20003e1c 	.word	0x20003e1c

080016e0 <STLED316S_ReciveData>:
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
	DelayMicro(DELAY_US);
}

void STLED316S_ReciveData (uint8_t *data, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	4613      	mov	r3, r2
 80016ec:	80fb      	strh	r3, [r7, #6]
	STLED_TxData[0] = 0x49;
 80016ee:	4b29      	ldr	r3, [pc, #164]	; (8001794 <STLED316S_ReciveData+0xb4>)
 80016f0:	2249      	movs	r2, #73	; 0x49
 80016f2:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0x00;
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <STLED316S_ReciveData+0xb4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	705a      	strb	r2, [r3, #1]
	STLED_TxData[2] = 0x00;
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <STLED316S_ReciveData+0xb4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = 0x00;
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <STLED316S_ReciveData+0xb4>)
 8001702:	2200      	movs	r2, #0
 8001704:	70da      	strb	r2, [r3, #3]

	STLED_Rx[0] = 0x49;
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001708:	2249      	movs	r2, #73	; 0x49
 800170a:	701a      	strb	r2, [r3, #0]
	STLED_Rx[1] = 0x02;
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <STLED316S_ReciveData+0xb8>)
 800170e:	2202      	movs	r2, #2
 8001710:	705a      	strb	r2, [r3, #1]
	STLED_Rx[2] = 0x02;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001714:	2202      	movs	r2, #2
 8001716:	709a      	strb	r2, [r3, #2]
	STLED_Rx[3] = 0x02;
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <STLED316S_ReciveData+0xb8>)
 800171a:	2202      	movs	r2, #2
 800171c:	70da      	strb	r2, [r3, #3]

	for(uint8_t i = 0; i < 8; i++)
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]
 8001722:	e006      	b.n	8001732 <STLED316S_ReciveData+0x52>
	{
		STLED_Rx[i] = 0;
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001728:	2100      	movs	r1, #0
 800172a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 8; i++)
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	3301      	adds	r3, #1
 8001730:	75fb      	strb	r3, [r7, #23]
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b07      	cmp	r3, #7
 8001736:	d9f5      	bls.n	8001724 <STLED316S_ReciveData+0x44>
	}

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	2200      	movs	r2, #0
 800173c:	4619      	mov	r1, r3
 800173e:	68b8      	ldr	r0, [r7, #8]
 8001740:	f003 f86b 	bl	800481a <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001744:	2005      	movs	r0, #5
 8001746:	f000 f82b 	bl	80017a0 <DelayMicro>
	//SPI1->CR1 |= SPI_CR1_BIDIOE; // Перевод SPI в режим передачи
	HAL_SPI_Transmit(&hspi1, STLED_TxData, 1, 1000);
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	2201      	movs	r2, #1
 8001750:	4910      	ldr	r1, [pc, #64]	; (8001794 <STLED316S_ReciveData+0xb4>)
 8001752:	4812      	ldr	r0, [pc, #72]	; (800179c <STLED316S_ReciveData+0xbc>)
 8001754:	f003 fcfe 	bl	8005154 <HAL_SPI_Transmit>
	//SPI1->CR1 &= ~SPI_CR1_BIDIOE; // // Перевод SPI в режим приема
	//HAL_SPI_TransmitReceive(&hspi1, STLED_TxData, STLED_Rx, 1, 1000);
	HAL_SPI_Receive(&hspi1, STLED_Rx, 2, 1000);
 8001758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175c:	2202      	movs	r2, #2
 800175e:	490e      	ldr	r1, [pc, #56]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001760:	480e      	ldr	r0, [pc, #56]	; (800179c <STLED316S_ReciveData+0xbc>)
 8001762:	f003 fe33 	bl	80053cc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	2201      	movs	r2, #1
 800176a:	4619      	mov	r1, r3
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f003 f854 	bl	800481a <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001772:	2005      	movs	r0, #5
 8001774:	f000 f814 	bl	80017a0 <DelayMicro>

	data[0] = STLED_Rx[0];
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <STLED316S_ReciveData+0xb8>)
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	701a      	strb	r2, [r3, #0]
	data[1]= STLED_Rx[1];
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001786:	7852      	ldrb	r2, [r2, #1]
 8001788:	701a      	strb	r2, [r3, #0]

}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20003d98 	.word	0x20003d98
 8001798:	20003564 	.word	0x20003564
 800179c:	20003e1c 	.word	0x20003e1c

080017a0 <DelayMicro>:

 void DelayMicro(uint32_t __IO micros)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  micros *=(SystemCoreClock/1000000)/5;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <DelayMicro+0x34>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <DelayMicro+0x38>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0d5b      	lsrs	r3, r3, #21
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	607b      	str	r3, [r7, #4]
  while(micros--);
 80017bc:	bf00      	nop
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	1e5a      	subs	r2, r3, #1
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1fa      	bne.n	80017be <DelayMicro+0x1e>
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	20000000 	.word	0x20000000
 80017d8:	6b5fca6b 	.word	0x6b5fca6b

080017dc <STM32_WriteToFlash3>:

		 HAL_FLASH_Lock();
}

void STM32_WriteToFlash3 (uint64_t *Data, uint32_t Len)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	   HAL_FLASH_Unlock();
 80017e6:	f002 fcdd 	bl	80041a4 <HAL_FLASH_Unlock>

		FLASH_EraseInitTypeDef EraseInitStruct;
	   uint32_t PAGEError = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;  // Тип стирания. FLASH_TYPEERASE_PAGES стирание одиночной страницы
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
	   EraseInitStruct.PageAddress = PAGE; // Адрес первой стираемой ячейки в странице
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <STM32_WriteToFlash3+0x70>)
 80017f4:	617b      	str	r3, [r7, #20]
	   EraseInitStruct.NbPages     = 1;       // Количесвто стираемых страниц
 80017f6:	2301      	movs	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
	   HAL_FLASHEx_Erase(&EraseInitStruct,&PAGEError);
 80017fa:	f107 0208 	add.w	r2, r7, #8
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fdb5 	bl	8004374 <HAL_FLASHEx_Erase>

	   //Запись начиная с адреса 0x803F800
		 for(uint16_t i = 0; i < Len; i++)
 800180a:	2300      	movs	r3, #0
 800180c:	83fb      	strh	r3, [r7, #30]
 800180e:	e012      	b.n	8001836 <STM32_WriteToFlash3+0x5a>
		 {
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, PAGE + (i*4), Data[i]);  // FLASH_TYPEPROGRAM_WORD - запись 32 битного числа, адрес записи, данные
 8001810:	8bfb      	ldrh	r3, [r7, #30]
 8001812:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001816:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4619      	mov	r1, r3
 800181e:	8bfb      	ldrh	r3, [r7, #30]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	2002      	movs	r0, #2
 800182c:	f002 fc4a 	bl	80040c4 <HAL_FLASH_Program>
		 for(uint16_t i = 0; i < Len; i++)
 8001830:	8bfb      	ldrh	r3, [r7, #30]
 8001832:	3301      	adds	r3, #1
 8001834:	83fb      	strh	r3, [r7, #30]
 8001836:	8bfb      	ldrh	r3, [r7, #30]
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d8e8      	bhi.n	8001810 <STM32_WriteToFlash3+0x34>
		 }

		 HAL_FLASH_Lock();
 800183e:	f002 fcd7 	bl	80041f0 <HAL_FLASH_Lock>
}
 8001842:	bf00      	nop
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	0803f800 	.word	0x0803f800

08001850 <freeRTOS_Tasks_Ini>:
	uint8_t STLED_Rx[8];



void freeRTOS_Tasks_Ini (void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af02      	add	r7, sp, #8
	xSemaphore_StepCount = xQueueCreateCountingSemaphore(4, 0);
 8001856:	2100      	movs	r1, #0
 8001858:	2004      	movs	r0, #4
 800185a:	f005 fcd9 	bl	8007210 <xQueueCreateCountingSemaphore>
 800185e:	4603      	mov	r3, r0
 8001860:	4a48      	ldr	r2, [pc, #288]	; (8001984 <freeRTOS_Tasks_Ini+0x134>)
 8001862:	6013      	str	r3, [r2, #0]

	//xSemaphore_Calibration = xQueueCreateCountingSemaphore(1, 0); // Первый аргмент - это максимальное количество счета, второй - начальное значение счетчика

	vSemaphoreCreateBinary(xSemaphore_Calibration); // Создание двоичного семафора
 8001864:	2203      	movs	r2, #3
 8001866:	2100      	movs	r1, #0
 8001868:	2001      	movs	r0, #1
 800186a:	f005 fc7e 	bl	800716a <xQueueGenericCreate>
 800186e:	4603      	mov	r3, r0
 8001870:	4a45      	ldr	r2, [pc, #276]	; (8001988 <freeRTOS_Tasks_Ini+0x138>)
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b44      	ldr	r3, [pc, #272]	; (8001988 <freeRTOS_Tasks_Ini+0x138>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <freeRTOS_Tasks_Ini+0x3a>
 800187c:	4b42      	ldr	r3, [pc, #264]	; (8001988 <freeRTOS_Tasks_Ini+0x138>)
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	2300      	movs	r3, #0
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	f005 fcd9 	bl	800723c <xQueueGenericSend>

	qBeepMode = xQueueCreate(1, sizeof( uint8_t )); // Очередь для передачи режима работы бипера
 800188a:	2200      	movs	r2, #0
 800188c:	2101      	movs	r1, #1
 800188e:	2001      	movs	r0, #1
 8001890:	f005 fc6b 	bl	800716a <xQueueGenericCreate>
 8001894:	4603      	mov	r3, r0
 8001896:	4a3d      	ldr	r2, [pc, #244]	; (800198c <freeRTOS_Tasks_Ini+0x13c>)
 8001898:	6013      	str	r3, [r2, #0]

	qWelderCmd = xQueueCreate(1, sizeof( uint8_t )); // Очередь для передачи команд управления кареткой
 800189a:	2200      	movs	r2, #0
 800189c:	2101      	movs	r1, #1
 800189e:	2001      	movs	r0, #1
 80018a0:	f005 fc63 	bl	800716a <xQueueGenericCreate>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a3a      	ldr	r2, [pc, #232]	; (8001990 <freeRTOS_Tasks_Ini+0x140>)
 80018a8:	6013      	str	r3, [r2, #0]

	qGoToResponse = xQueueCreate(1, sizeof( uint8_t )); // Требуемая позиция занята
 80018aa:	2200      	movs	r2, #0
 80018ac:	2101      	movs	r1, #1
 80018ae:	2001      	movs	r0, #1
 80018b0:	f005 fc5b 	bl	800716a <xQueueGenericCreate>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a37      	ldr	r2, [pc, #220]	; (8001994 <freeRTOS_Tasks_Ini+0x144>)
 80018b8:	6013      	str	r3, [r2, #0]

	//vSemaphoreCreateBinary(qDebug);

	qWelderRun = xQueueCreate(1, sizeof( uint8_t )); // Начать процесс варки
 80018ba:	2200      	movs	r2, #0
 80018bc:	2101      	movs	r1, #1
 80018be:	2001      	movs	r0, #1
 80018c0:	f005 fc53 	bl	800716a <xQueueGenericCreate>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a34      	ldr	r2, [pc, #208]	; (8001998 <freeRTOS_Tasks_Ini+0x148>)
 80018c8:	6013      	str	r3, [r2, #0]

	qWelderCalibrated = xQueueCreate(1, sizeof( uint8_t )); // Начать калибровку
 80018ca:	2200      	movs	r2, #0
 80018cc:	2101      	movs	r1, #1
 80018ce:	2001      	movs	r0, #1
 80018d0:	f005 fc4b 	bl	800716a <xQueueGenericCreate>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a31      	ldr	r2, [pc, #196]	; (800199c <freeRTOS_Tasks_Ini+0x14c>)
 80018d8:	6013      	str	r3, [r2, #0]

	qKeyPress = xQueueCreate(1, sizeof( uint8_t )); // Предача события о нажатии кнопки
 80018da:	2200      	movs	r2, #0
 80018dc:	2101      	movs	r1, #1
 80018de:	2001      	movs	r0, #1
 80018e0:	f005 fc43 	bl	800716a <xQueueGenericCreate>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a2e      	ldr	r2, [pc, #184]	; (80019a0 <freeRTOS_Tasks_Ini+0x150>)
 80018e8:	6013      	str	r3, [r2, #0]

	MicrostepDriver_Ini();
 80018ea:	f7ff f88f 	bl	8000a0c <MicrostepDriver_Ini>

//	WELDER_Preset();

	xTaskCreate(vIndicatorPanel_Out, "IndicatorPanel_Out", 250, NULL, 2, NULL); // З-а вывода значений на панель
 80018ee:	2300      	movs	r3, #0
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	2302      	movs	r3, #2
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	22fa      	movs	r2, #250	; 0xfa
 80018fa:	492a      	ldr	r1, [pc, #168]	; (80019a4 <freeRTOS_Tasks_Ini+0x154>)
 80018fc:	482a      	ldr	r0, [pc, #168]	; (80019a8 <freeRTOS_Tasks_Ini+0x158>)
 80018fe:	f006 f9b7 	bl	8007c70 <xTaskCreate>

	xTaskCreate(vKeyScan, "KeyScan", 200, NULL, 2, NULL); // З-а опроса кнопок
 8001902:	2300      	movs	r3, #0
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2302      	movs	r3, #2
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2300      	movs	r3, #0
 800190c:	22c8      	movs	r2, #200	; 0xc8
 800190e:	4927      	ldr	r1, [pc, #156]	; (80019ac <freeRTOS_Tasks_Ini+0x15c>)
 8001910:	4827      	ldr	r0, [pc, #156]	; (80019b0 <freeRTOS_Tasks_Ini+0x160>)
 8001912:	f006 f9ad 	bl	8007c70 <xTaskCreate>

	xTaskCreate(vBuzzer_beep, "Buzzer_beep", 200, NULL, 1, NULL); // З-а опроса кнопок
 8001916:	2300      	movs	r3, #0
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	2301      	movs	r3, #1
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2300      	movs	r3, #0
 8001920:	22c8      	movs	r2, #200	; 0xc8
 8001922:	4924      	ldr	r1, [pc, #144]	; (80019b4 <freeRTOS_Tasks_Ini+0x164>)
 8001924:	4824      	ldr	r0, [pc, #144]	; (80019b8 <freeRTOS_Tasks_Ini+0x168>)
 8001926:	f006 f9a3 	bl	8007c70 <xTaskCreate>

	xTaskCreate(vWelder_Run, "Weleder_Run", 200, NULL, 2, NULL);
 800192a:	2300      	movs	r3, #0
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	2302      	movs	r3, #2
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2300      	movs	r3, #0
 8001934:	22c8      	movs	r2, #200	; 0xc8
 8001936:	4921      	ldr	r1, [pc, #132]	; (80019bc <freeRTOS_Tasks_Ini+0x16c>)
 8001938:	4821      	ldr	r0, [pc, #132]	; (80019c0 <freeRTOS_Tasks_Ini+0x170>)
 800193a:	f006 f999 	bl	8007c70 <xTaskCreate>

	xTaskCreate(vCarriage_GoTo, "Carriage_GoTo", 200, NULL, 3, NULL); // З-а перемещения каретки в заданную точку
 800193e:	2300      	movs	r3, #0
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	2303      	movs	r3, #3
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	22c8      	movs	r2, #200	; 0xc8
 800194a:	491e      	ldr	r1, [pc, #120]	; (80019c4 <freeRTOS_Tasks_Ini+0x174>)
 800194c:	481e      	ldr	r0, [pc, #120]	; (80019c8 <freeRTOS_Tasks_Ini+0x178>)
 800194e:	f006 f98f 	bl	8007c70 <xTaskCreate>

	xTaskCreate(vCarriage_Calibration, "Carriage_Calibration", 200, NULL, 2, NULL); // З-а перемещения каретки в заданную точку
 8001952:	2300      	movs	r3, #0
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	2302      	movs	r3, #2
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2300      	movs	r3, #0
 800195c:	22c8      	movs	r2, #200	; 0xc8
 800195e:	491b      	ldr	r1, [pc, #108]	; (80019cc <freeRTOS_Tasks_Ini+0x17c>)
 8001960:	481b      	ldr	r0, [pc, #108]	; (80019d0 <freeRTOS_Tasks_Ini+0x180>)
 8001962:	f006 f985 	bl	8007c70 <xTaskCreate>

	xTaskCreate(vKey_Action, "Key_Action", 200, NULL, 2, NULL); // З-а выполняет дейсвия в зависимости от нажатой кнопки и режима работы устройсво
 8001966:	2300      	movs	r3, #0
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	2302      	movs	r3, #2
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2300      	movs	r3, #0
 8001970:	22c8      	movs	r2, #200	; 0xc8
 8001972:	4918      	ldr	r1, [pc, #96]	; (80019d4 <freeRTOS_Tasks_Ini+0x184>)
 8001974:	4818      	ldr	r0, [pc, #96]	; (80019d8 <freeRTOS_Tasks_Ini+0x188>)
 8001976:	f006 f97b 	bl	8007c70 <xTaskCreate>

	vTaskStartScheduler();
 800197a:	f006 fac9 	bl	8007f10 <vTaskStartScheduler>

}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20003560 	.word	0x20003560
 8001988:	20003dc4 	.word	0x20003dc4
 800198c:	20003538 	.word	0x20003538
 8001990:	20003d94 	.word	0x20003d94
 8001994:	20003d80 	.word	0x20003d80
 8001998:	20003d88 	.word	0x20003d88
 800199c:	20003d8c 	.word	0x20003d8c
 80019a0:	20003d90 	.word	0x20003d90
 80019a4:	0800951c 	.word	0x0800951c
 80019a8:	08003225 	.word	0x08003225
 80019ac:	08009530 	.word	0x08009530
 80019b0:	080027f9 	.word	0x080027f9
 80019b4:	08009538 	.word	0x08009538
 80019b8:	080032e9 	.word	0x080032e9
 80019bc:	08009544 	.word	0x08009544
 80019c0:	0800231d 	.word	0x0800231d
 80019c4:	08009550 	.word	0x08009550
 80019c8:	08002629 	.word	0x08002629
 80019cc:	08009560 	.word	0x08009560
 80019d0:	08002521 	.word	0x08002521
 80019d4:	08009578 	.word	0x08009578
 80019d8:	080019dd 	.word	0x080019dd

080019dc <vKey_Action>:

void vKey_Action(void *pvParameters)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed; // Номер нажатой кнопки или комбинации кнопок
	uint8_t beep_mode_send = beep_click; // Режим работы бипера
 80019e4:	2301      	movs	r3, #1
 80019e6:	73bb      	strb	r3, [r7, #14]
	uint8_t Cal = Calibrated; // Передача команды калибровка
 80019e8:	2304      	movs	r3, #4
 80019ea:	737b      	strb	r3, [r7, #13]
	uint8_t Run; // Переменная для передачи команды начало варки
	uint8_t Carriage_cmd = Cmd_CarriageGoTo; //Передача команды для начала движения каретки в заданную точку
 80019ec:	2301      	movs	r3, #1
 80019ee:	72fb      	strb	r3, [r7, #11]


	for(;;)
	{
		xQueueReceive(qKeyPress, &KeyPressed, portMAX_DELAY ); // Ждать нажатия кнопки
 80019f0:	4ba6      	ldr	r3, [pc, #664]	; (8001c8c <vKey_Action+0x2b0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f107 010f 	add.w	r1, r7, #15
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	4618      	mov	r0, r3
 80019fe:	f005 fd75 	bl	80074ec <xQueueReceive>

		switch(KeyPressed)
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	2b24      	cmp	r3, #36	; 0x24
 8001a06:	d8f3      	bhi.n	80019f0 <vKey_Action+0x14>
 8001a08:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <vKey_Action+0x34>)
 8001a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0e:	bf00      	nop
 8001a10:	080019f1 	.word	0x080019f1
 8001a14:	08001aa5 	.word	0x08001aa5
 8001a18:	08001b03 	.word	0x08001b03
 8001a1c:	08001b2b 	.word	0x08001b2b
 8001a20:	08001b99 	.word	0x08001b99
 8001a24:	08001bd7 	.word	0x08001bd7
 8001a28:	08001c4b 	.word	0x08001c4b
 8001a2c:	08001c9d 	.word	0x08001c9d
 8001a30:	08001d07 	.word	0x08001d07
 8001a34:	08001d3b 	.word	0x08001d3b
 8001a38:	08001d63 	.word	0x08001d63
 8001a3c:	08001d8b 	.word	0x08001d8b
 8001a40:	08001db3 	.word	0x08001db3
 8001a44:	08001ddb 	.word	0x08001ddb
 8001a48:	08001e03 	.word	0x08001e03
 8001a4c:	08001e2b 	.word	0x08001e2b
 8001a50:	08001e57 	.word	0x08001e57
 8001a54:	08001e83 	.word	0x08001e83
 8001a58:	08001eab 	.word	0x08001eab
 8001a5c:	08001ed3 	.word	0x08001ed3
 8001a60:	08001efb 	.word	0x08001efb
 8001a64:	08001f23 	.word	0x08001f23
 8001a68:	08001f5d 	.word	0x08001f5d
 8001a6c:	08001f85 	.word	0x08001f85
 8001a70:	08001fb1 	.word	0x08001fb1
 8001a74:	080020cb 	.word	0x080020cb
 8001a78:	080020f7 	.word	0x080020f7
 8001a7c:	08002115 	.word	0x08002115
 8001a80:	08002175 	.word	0x08002175
 8001a84:	08002193 	.word	0x08002193
 8001a88:	0800222b 	.word	0x0800222b
 8001a8c:	0800224d 	.word	0x0800224d
 8001a90:	080019f1 	.word	0x080019f1
 8001a94:	08001fd9 	.word	0x08001fd9
 8001a98:	08002033 	.word	0x08002033
 8001a9c:	08002045 	.word	0x08002045
 8001aa0:	0800209f 	.word	0x0800209f
			break;
		}

		case press_short_Xs_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001aa4:	4b7a      	ldr	r3, [pc, #488]	; (8001c90 <vKey_Action+0x2b4>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	f107 010e 	add.w	r1, r7, #14
 8001aac:	2300      	movs	r3, #0
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f005 fbc4 	bl	800723c <xQueueGenericSend>

			if (WelderUnit.Xs > XS_MIN) // Проверка на попадание в допустимый диапазон значений
 8001ab4:	4b77      	ldr	r3, [pc, #476]	; (8001c94 <vKey_Action+0x2b8>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	2b0a      	cmp	r3, #10
 8001aba:	f240 83d6 	bls.w	800226a <vKey_Action+0x88e>
			{
				WelderUnit.Xs--; // Исполнить
 8001abe:	4b75      	ldr	r3, [pc, #468]	; (8001c94 <vKey_Action+0x2b8>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <vKey_Action+0x2b8>)
 8001ac8:	801a      	strh	r2, [r3, #0]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001aca:	4b72      	ldr	r3, [pc, #456]	; (8001c94 <vKey_Action+0x2b8>)
 8001acc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	f040 83ca 	bne.w	800226a <vKey_Action+0x88e>
 8001ad6:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <vKey_Action+0x2b8>)
 8001ad8:	7c1b      	ldrb	r3, [r3, #16]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 83c3 	beq.w	800226a <vKey_Action+0x88e>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xs;
 8001ae8:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <vKey_Action+0x2b8>)
 8001aea:	881a      	ldrh	r2, [r3, #0]
 8001aec:	4b69      	ldr	r3, [pc, #420]	; (8001c94 <vKey_Action+0x2b8>)
 8001aee:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001af0:	4b69      	ldr	r3, [pc, #420]	; (8001c98 <vKey_Action+0x2bc>)
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	f107 010b 	add.w	r1, r7, #11
 8001af8:	2300      	movs	r3, #0
 8001afa:	2200      	movs	r2, #0
 8001afc:	f005 fb9e 	bl	800723c <xQueueGenericSend>

				}
			}
			break;
 8001b00:	e3b3      	b.n	800226a <vKey_Action+0x88e>
		}

		case press_long_Xs_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <vKey_Action+0x2b4>)
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	f107 010e 	add.w	r1, r7, #14
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f005 fb95 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Xs > XS_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001b12:	4b60      	ldr	r3, [pc, #384]	; (8001c94 <vKey_Action+0x2b8>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	2b1e      	cmp	r3, #30
 8001b18:	f240 83aa 	bls.w	8002270 <vKey_Action+0x894>
			{
				WelderUnit.Xs -= 20; // Дейсвия при длинном нажатии
 8001b1c:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <vKey_Action+0x2b8>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	3b14      	subs	r3, #20
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <vKey_Action+0x2b8>)
 8001b26:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001b28:	e3a2      	b.n	8002270 <vKey_Action+0x894>
		}

		case press_short_Xs_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b2a:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <vKey_Action+0x2b4>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	f107 010e 	add.w	r1, r7, #14
 8001b32:	2300      	movs	r3, #0
 8001b34:	2200      	movs	r2, #0
 8001b36:	f005 fb81 	bl	800723c <xQueueGenericSend>
			if ((WelderUnit.Xs < XS_MAX) && (WelderUnit.Xs < WelderUnit.Xf)) // Проверка на попадание в допустимый диапазон значений  и что бы Xs была меньше Xf
 8001b3a:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <vKey_Action+0x2b8>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001b42:	f080 8398 	bcs.w	8002276 <vKey_Action+0x89a>
 8001b46:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <vKey_Action+0x2b8>)
 8001b48:	881a      	ldrh	r2, [r3, #0]
 8001b4a:	4b52      	ldr	r3, [pc, #328]	; (8001c94 <vKey_Action+0x2b8>)
 8001b4c:	885b      	ldrh	r3, [r3, #2]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	f080 8391 	bcs.w	8002276 <vKey_Action+0x89a>
			{

			WelderUnit.Xs++; // Исполнить
 8001b54:	4b4f      	ldr	r3, [pc, #316]	; (8001c94 <vKey_Action+0x2b8>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	4b4d      	ldr	r3, [pc, #308]	; (8001c94 <vKey_Action+0x2b8>)
 8001b5e:	801a      	strh	r2, [r3, #0]

			// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
			if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001b60:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <vKey_Action+0x2b8>)
 8001b62:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	f040 8385 	bne.w	8002276 <vKey_Action+0x89a>
 8001b6c:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <vKey_Action+0x2b8>)
 8001b6e:	7c1b      	ldrb	r3, [r3, #16]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 837e 	beq.w	8002276 <vKey_Action+0x89a>
			{
				Carriage_cmd = Cmd_CarriageGoTo;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	72fb      	strb	r3, [r7, #11]
				WelderUnit.GoTo = WelderUnit.Xs;
 8001b7e:	4b45      	ldr	r3, [pc, #276]	; (8001c94 <vKey_Action+0x2b8>)
 8001b80:	881a      	ldrh	r2, [r3, #0]
 8001b82:	4b44      	ldr	r3, [pc, #272]	; (8001c94 <vKey_Action+0x2b8>)
 8001b84:	811a      	strh	r2, [r3, #8]
				xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001b86:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <vKey_Action+0x2bc>)
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	f107 010b 	add.w	r1, r7, #11
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2200      	movs	r2, #0
 8001b92:	f005 fb53 	bl	800723c <xQueueGenericSend>
			}

			}
			break;
 8001b96:	e36e      	b.n	8002276 <vKey_Action+0x89a>
		}

		case press_long_Xs_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b98:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <vKey_Action+0x2b4>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	f107 010e 	add.w	r1, r7, #14
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f005 fb4a 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Xs < XS_MAX - 20 && WelderUnit.Xs < WelderUnit.Xf - 20) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
 8001ba8:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <vKey_Action+0x2b8>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f240 622b 	movw	r2, #1579	; 0x62b
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f200 8363 	bhi.w	800227c <vKey_Action+0x8a0>
 8001bb6:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <vKey_Action+0x2b8>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <vKey_Action+0x2b8>)
 8001bbe:	885b      	ldrh	r3, [r3, #2]
 8001bc0:	3b14      	subs	r3, #20
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	f280 835a 	bge.w	800227c <vKey_Action+0x8a0>
			{
				WelderUnit.Xs += 20; // Дейсвия при длинном нажатии
 8001bc8:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <vKey_Action+0x2b8>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	3314      	adds	r3, #20
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <vKey_Action+0x2b8>)
 8001bd2:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001bd4:	e352      	b.n	800227c <vKey_Action+0x8a0>
		}

		case press_short_Xf_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <vKey_Action+0x2b4>)
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	f107 010e 	add.w	r1, r7, #14
 8001bde:	2300      	movs	r3, #0
 8001be0:	2200      	movs	r2, #0
 8001be2:	f005 fb2b 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN && WelderUnit.Xf > WelderUnit.Xs) // Проверка на попадание в допустимый диапазон значений
 8001be6:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <vKey_Action+0x2b8>)
 8001be8:	885b      	ldrh	r3, [r3, #2]
 8001bea:	2b14      	cmp	r3, #20
 8001bec:	f240 8349 	bls.w	8002282 <vKey_Action+0x8a6>
 8001bf0:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <vKey_Action+0x2b8>)
 8001bf2:	885a      	ldrh	r2, [r3, #2]
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <vKey_Action+0x2b8>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f240 8342 	bls.w	8002282 <vKey_Action+0x8a6>
			{
				WelderUnit.Xf--; // Исполнить
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <vKey_Action+0x2b8>)
 8001c00:	885b      	ldrh	r3, [r3, #2]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <vKey_Action+0x2b8>)
 8001c08:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <vKey_Action+0x2b8>)
 8001c0c:	885a      	ldrh	r2, [r3, #2]
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <vKey_Action+0x2b8>)
 8001c10:	811a      	strh	r2, [r3, #8]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <vKey_Action+0x2b8>)
 8001c14:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	f040 8332 	bne.w	8002282 <vKey_Action+0x8a6>
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <vKey_Action+0x2b8>)
 8001c20:	7c1b      	ldrb	r3, [r3, #16]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 832b 	beq.w	8002282 <vKey_Action+0x8a6>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xf;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <vKey_Action+0x2b8>)
 8001c32:	885a      	ldrh	r2, [r3, #2]
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <vKey_Action+0x2b8>)
 8001c36:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <vKey_Action+0x2bc>)
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	f107 010b 	add.w	r1, r7, #11
 8001c40:	2300      	movs	r3, #0
 8001c42:	2200      	movs	r2, #0
 8001c44:	f005 fafa 	bl	800723c <xQueueGenericSend>

				}
			}
			break;
 8001c48:	e31b      	b.n	8002282 <vKey_Action+0x8a6>
		}

		case press_long_Xf_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <vKey_Action+0x2b4>)
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	f107 010e 	add.w	r1, r7, #14
 8001c52:	2300      	movs	r3, #0
 8001c54:	2200      	movs	r2, #0
 8001c56:	f005 faf1 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN + 20 && WelderUnit.Xf > WelderUnit.Xs + 20 ) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <vKey_Action+0x2b8>)
 8001c5c:	885b      	ldrh	r3, [r3, #2]
 8001c5e:	2b28      	cmp	r3, #40	; 0x28
 8001c60:	f240 8312 	bls.w	8002288 <vKey_Action+0x8ac>
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <vKey_Action+0x2b8>)
 8001c66:	885b      	ldrh	r3, [r3, #2]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <vKey_Action+0x2b8>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	3314      	adds	r3, #20
 8001c70:	429a      	cmp	r2, r3
 8001c72:	f340 8309 	ble.w	8002288 <vKey_Action+0x8ac>
			{
				WelderUnit.Xf -= 20; // Дейсвия при длинном нажатии
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <vKey_Action+0x2b8>)
 8001c78:	885b      	ldrh	r3, [r3, #2]
 8001c7a:	3b14      	subs	r3, #20
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <vKey_Action+0x2b8>)
 8001c80:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <vKey_Action+0x2b8>)
 8001c84:	885a      	ldrh	r2, [r3, #2]
 8001c86:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <vKey_Action+0x2b8>)
 8001c88:	811a      	strh	r2, [r3, #8]
			}
			break;
 8001c8a:	e2fd      	b.n	8002288 <vKey_Action+0x8ac>
 8001c8c:	20003d90 	.word	0x20003d90
 8001c90:	20003538 	.word	0x20003538
 8001c94:	2000353c 	.word	0x2000353c
 8001c98:	20003d94 	.word	0x20003d94
		}

		case press_short_Xf_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001c9c:	4bac      	ldr	r3, [pc, #688]	; (8001f50 <vKey_Action+0x574>)
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	f107 010e 	add.w	r1, r7, #14
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f005 fac8 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001cac:	4ba9      	ldr	r3, [pc, #676]	; (8001f54 <vKey_Action+0x578>)
 8001cae:	885b      	ldrh	r3, [r3, #2]
 8001cb0:	f240 6271 	movw	r2, #1649	; 0x671
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	f200 82ea 	bhi.w	800228e <vKey_Action+0x8b2>
			{
				WelderUnit.Xf++; // Исполнить
 8001cba:	4ba6      	ldr	r3, [pc, #664]	; (8001f54 <vKey_Action+0x578>)
 8001cbc:	885b      	ldrh	r3, [r3, #2]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4ba4      	ldr	r3, [pc, #656]	; (8001f54 <vKey_Action+0x578>)
 8001cc4:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001cc6:	4ba3      	ldr	r3, [pc, #652]	; (8001f54 <vKey_Action+0x578>)
 8001cc8:	885a      	ldrh	r2, [r3, #2]
 8001cca:	4ba2      	ldr	r3, [pc, #648]	; (8001f54 <vKey_Action+0x578>)
 8001ccc:	811a      	strh	r2, [r3, #8]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001cce:	4ba1      	ldr	r3, [pc, #644]	; (8001f54 <vKey_Action+0x578>)
 8001cd0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	f040 82da 	bne.w	800228e <vKey_Action+0x8b2>
 8001cda:	4b9e      	ldr	r3, [pc, #632]	; (8001f54 <vKey_Action+0x578>)
 8001cdc:	7c1b      	ldrb	r3, [r3, #16]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 82d3 	beq.w	800228e <vKey_Action+0x8b2>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xf;
 8001cec:	4b99      	ldr	r3, [pc, #612]	; (8001f54 <vKey_Action+0x578>)
 8001cee:	885a      	ldrh	r2, [r3, #2]
 8001cf0:	4b98      	ldr	r3, [pc, #608]	; (8001f54 <vKey_Action+0x578>)
 8001cf2:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001cf4:	4b98      	ldr	r3, [pc, #608]	; (8001f58 <vKey_Action+0x57c>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	f107 010b 	add.w	r1, r7, #11
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f005 fa9c 	bl	800723c <xQueueGenericSend>

				}
			}
			break;
 8001d04:	e2c3      	b.n	800228e <vKey_Action+0x8b2>
		}

		case press_long_Xf_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d06:	4b92      	ldr	r3, [pc, #584]	; (8001f50 <vKey_Action+0x574>)
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	f107 010e 	add.w	r1, r7, #14
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2200      	movs	r2, #0
 8001d12:	f005 fa93 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX - 20 ) // Проверка на попадание в допустимый диапазон значений
 8001d16:	4b8f      	ldr	r3, [pc, #572]	; (8001f54 <vKey_Action+0x578>)
 8001d18:	885b      	ldrh	r3, [r3, #2]
 8001d1a:	f240 625d 	movw	r2, #1629	; 0x65d
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	f200 82b8 	bhi.w	8002294 <vKey_Action+0x8b8>
			{
				WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 8001d24:	4b8b      	ldr	r3, [pc, #556]	; (8001f54 <vKey_Action+0x578>)
 8001d26:	885b      	ldrh	r3, [r3, #2]
 8001d28:	3314      	adds	r3, #20
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <vKey_Action+0x578>)
 8001d2e:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001d30:	4b88      	ldr	r3, [pc, #544]	; (8001f54 <vKey_Action+0x578>)
 8001d32:	885a      	ldrh	r2, [r3, #2]
 8001d34:	4b87      	ldr	r3, [pc, #540]	; (8001f54 <vKey_Action+0x578>)
 8001d36:	811a      	strh	r2, [r3, #8]
			}
			break;
 8001d38:	e2ac      	b.n	8002294 <vKey_Action+0x8b8>

		}

		case press_short_Delay_s_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d3a:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <vKey_Action+0x574>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	f107 010e 	add.w	r1, r7, #14
 8001d42:	2300      	movs	r3, #0
 8001d44:	2200      	movs	r2, #0
 8001d46:	f005 fa79 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN) // Проверка на попадание в допустимый диапазон значений
 8001d4a:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <vKey_Action+0x578>)
 8001d4c:	7a9b      	ldrb	r3, [r3, #10]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	f240 82a3 	bls.w	800229a <vKey_Action+0x8be>
			{
				WelderUnit.Delay_s--; // Исполнить
 8001d54:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <vKey_Action+0x578>)
 8001d56:	7a9b      	ldrb	r3, [r3, #10]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b7d      	ldr	r3, [pc, #500]	; (8001f54 <vKey_Action+0x578>)
 8001d5e:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001d60:	e29b      	b.n	800229a <vKey_Action+0x8be>
		}

		case press_long_Delay_s_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d62:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <vKey_Action+0x574>)
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	f107 010e 	add.w	r1, r7, #14
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f005 fa65 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN + 10) // Проверка на попадание в допустимый диапазон значений
 8001d72:	4b78      	ldr	r3, [pc, #480]	; (8001f54 <vKey_Action+0x578>)
 8001d74:	7a9b      	ldrb	r3, [r3, #10]
 8001d76:	2b0b      	cmp	r3, #11
 8001d78:	f240 8292 	bls.w	80022a0 <vKey_Action+0x8c4>
			{
				WelderUnit.Delay_s -= 10; // Дейсвия при длинном нажатии
 8001d7c:	4b75      	ldr	r3, [pc, #468]	; (8001f54 <vKey_Action+0x578>)
 8001d7e:	7a9b      	ldrb	r3, [r3, #10]
 8001d80:	3b0a      	subs	r3, #10
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <vKey_Action+0x578>)
 8001d86:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001d88:	e28a      	b.n	80022a0 <vKey_Action+0x8c4>
		}

		case press_short_Delay_s_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d8a:	4b71      	ldr	r3, [pc, #452]	; (8001f50 <vKey_Action+0x574>)
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	f107 010e 	add.w	r1, r7, #14
 8001d92:	2300      	movs	r3, #0
 8001d94:	2200      	movs	r2, #0
 8001d96:	f005 fa51 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001d9a:	4b6e      	ldr	r3, [pc, #440]	; (8001f54 <vKey_Action+0x578>)
 8001d9c:	7a9b      	ldrb	r3, [r3, #10]
 8001d9e:	2b31      	cmp	r3, #49	; 0x31
 8001da0:	f200 8281 	bhi.w	80022a6 <vKey_Action+0x8ca>
			{
				WelderUnit.Delay_s++; // Исполнить
 8001da4:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <vKey_Action+0x578>)
 8001da6:	7a9b      	ldrb	r3, [r3, #10]
 8001da8:	3301      	adds	r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b69      	ldr	r3, [pc, #420]	; (8001f54 <vKey_Action+0x578>)
 8001dae:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001db0:	e279      	b.n	80022a6 <vKey_Action+0x8ca>
		}

		case press_long_Delay_s_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001db2:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <vKey_Action+0x574>)
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	f107 010e 	add.w	r1, r7, #14
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f005 fa3d 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
 8001dc2:	4b64      	ldr	r3, [pc, #400]	; (8001f54 <vKey_Action+0x578>)
 8001dc4:	7a9b      	ldrb	r3, [r3, #10]
 8001dc6:	2b27      	cmp	r3, #39	; 0x27
 8001dc8:	f200 8270 	bhi.w	80022ac <vKey_Action+0x8d0>
			{
				WelderUnit.Delay_s += 10; // Дейсвия при длинном нажатии
 8001dcc:	4b61      	ldr	r3, [pc, #388]	; (8001f54 <vKey_Action+0x578>)
 8001dce:	7a9b      	ldrb	r3, [r3, #10]
 8001dd0:	330a      	adds	r3, #10
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <vKey_Action+0x578>)
 8001dd6:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001dd8:	e268      	b.n	80022ac <vKey_Action+0x8d0>
		}

		case press_short_Speed_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001dda:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <vKey_Action+0x574>)
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	f107 010e 	add.w	r1, r7, #14
 8001de2:	2300      	movs	r3, #0
 8001de4:	2200      	movs	r2, #0
 8001de6:	f005 fa29 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN) // Проверка на попадание в допустимый диапазон значений
 8001dea:	4b5a      	ldr	r3, [pc, #360]	; (8001f54 <vKey_Action+0x578>)
 8001dec:	88db      	ldrh	r3, [r3, #6]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	f240 825f 	bls.w	80022b2 <vKey_Action+0x8d6>
			{
				WelderUnit.Speed--; // Исполнить
 8001df4:	4b57      	ldr	r3, [pc, #348]	; (8001f54 <vKey_Action+0x578>)
 8001df6:	88db      	ldrh	r3, [r3, #6]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b55      	ldr	r3, [pc, #340]	; (8001f54 <vKey_Action+0x578>)
 8001dfe:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e00:	e257      	b.n	80022b2 <vKey_Action+0x8d6>
		}

		case press_long_Speed_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e02:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <vKey_Action+0x574>)
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	f107 010e 	add.w	r1, r7, #14
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f005 fa15 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001e12:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <vKey_Action+0x578>)
 8001e14:	88db      	ldrh	r3, [r3, #6]
 8001e16:	2b15      	cmp	r3, #21
 8001e18:	f240 824e 	bls.w	80022b8 <vKey_Action+0x8dc>
			{
				WelderUnit.Speed -= 20; // Дейсвия при длинном нажатии
 8001e1c:	4b4d      	ldr	r3, [pc, #308]	; (8001f54 <vKey_Action+0x578>)
 8001e1e:	88db      	ldrh	r3, [r3, #6]
 8001e20:	3b14      	subs	r3, #20
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <vKey_Action+0x578>)
 8001e26:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e28:	e246      	b.n	80022b8 <vKey_Action+0x8dc>
		}

		case press_short_Speed_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <vKey_Action+0x574>)
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	f107 010e 	add.w	r1, r7, #14
 8001e32:	2300      	movs	r3, #0
 8001e34:	2200      	movs	r2, #0
 8001e36:	f005 fa01 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001e3a:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <vKey_Action+0x578>)
 8001e3c:	88db      	ldrh	r3, [r3, #6]
 8001e3e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001e42:	4293      	cmp	r3, r2
 8001e44:	f200 823b 	bhi.w	80022be <vKey_Action+0x8e2>
			{
				WelderUnit.Speed++; // Исполнить
 8001e48:	4b42      	ldr	r3, [pc, #264]	; (8001f54 <vKey_Action+0x578>)
 8001e4a:	88db      	ldrh	r3, [r3, #6]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	4b40      	ldr	r3, [pc, #256]	; (8001f54 <vKey_Action+0x578>)
 8001e52:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e54:	e233      	b.n	80022be <vKey_Action+0x8e2>
		}

		case press_long_Speed_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <vKey_Action+0x574>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	f107 010e 	add.w	r1, r7, #14
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2200      	movs	r2, #0
 8001e62:	f005 f9eb 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8001e66:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <vKey_Action+0x578>)
 8001e68:	88db      	ldrh	r3, [r3, #6]
 8001e6a:	f240 32d2 	movw	r2, #978	; 0x3d2
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	f200 8228 	bhi.w	80022c4 <vKey_Action+0x8e8>
			{
				WelderUnit.Speed += 20; // Дейсвия при длинном нажатии
 8001e74:	4b37      	ldr	r3, [pc, #220]	; (8001f54 <vKey_Action+0x578>)
 8001e76:	88db      	ldrh	r3, [r3, #6]
 8001e78:	3314      	adds	r3, #20
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b35      	ldr	r3, [pc, #212]	; (8001f54 <vKey_Action+0x578>)
 8001e7e:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e80:	e220      	b.n	80022c4 <vKey_Action+0x8e8>
		}

		case press_short_Delay_f_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e82:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <vKey_Action+0x574>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	f107 010e 	add.w	r1, r7, #14
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f005 f9d5 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN) // Проверка на попадание в допустимый диапазон значений
 8001e92:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <vKey_Action+0x578>)
 8001e94:	7adb      	ldrb	r3, [r3, #11]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	f240 8217 	bls.w	80022ca <vKey_Action+0x8ee>
			{
				WelderUnit.Delay_f--; // Исполнить
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <vKey_Action+0x578>)
 8001e9e:	7adb      	ldrb	r3, [r3, #11]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <vKey_Action+0x578>)
 8001ea6:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001ea8:	e20f      	b.n	80022ca <vKey_Action+0x8ee>
		}

		case press_long_Delay_f_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001eaa:	4b29      	ldr	r3, [pc, #164]	; (8001f50 <vKey_Action+0x574>)
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	f107 010e 	add.w	r1, r7, #14
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f005 f9c1 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN + 10) // Проверка на попадание в допустимый диапазон значений
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <vKey_Action+0x578>)
 8001ebc:	7adb      	ldrb	r3, [r3, #11]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	f240 8206 	bls.w	80022d0 <vKey_Action+0x8f4>
			{
				WelderUnit.Delay_f -= 10; // Дейсвия при длинном нажатии
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <vKey_Action+0x578>)
 8001ec6:	7adb      	ldrb	r3, [r3, #11]
 8001ec8:	3b0a      	subs	r3, #10
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <vKey_Action+0x578>)
 8001ece:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001ed0:	e1fe      	b.n	80022d0 <vKey_Action+0x8f4>
		}

		case press_short_Delay_f_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <vKey_Action+0x574>)
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	f107 010e 	add.w	r1, r7, #14
 8001eda:	2300      	movs	r3, #0
 8001edc:	2200      	movs	r2, #0
 8001ede:	f005 f9ad 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX) // Проверка на попадание в допустимый диапазон значений
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <vKey_Action+0x578>)
 8001ee4:	7adb      	ldrb	r3, [r3, #11]
 8001ee6:	2b45      	cmp	r3, #69	; 0x45
 8001ee8:	f200 81f5 	bhi.w	80022d6 <vKey_Action+0x8fa>
			{
				WelderUnit.Delay_f++; // Исполнить
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <vKey_Action+0x578>)
 8001eee:	7adb      	ldrb	r3, [r3, #11]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <vKey_Action+0x578>)
 8001ef6:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001ef8:	e1ed      	b.n	80022d6 <vKey_Action+0x8fa>
		}

		case press_long_Delay_f_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <vKey_Action+0x574>)
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	f107 010e 	add.w	r1, r7, #14
 8001f02:	2300      	movs	r3, #0
 8001f04:	2200      	movs	r2, #0
 8001f06:	f005 f999 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <vKey_Action+0x578>)
 8001f0c:	7adb      	ldrb	r3, [r3, #11]
 8001f0e:	2b3b      	cmp	r3, #59	; 0x3b
 8001f10:	f200 81e4 	bhi.w	80022dc <vKey_Action+0x900>
			{
				WelderUnit.Delay_f += 10; // Дейсвия при длинном нажатии
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <vKey_Action+0x578>)
 8001f16:	7adb      	ldrb	r3, [r3, #11]
 8001f18:	330a      	adds	r3, #10
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <vKey_Action+0x578>)
 8001f1e:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001f20:	e1dc      	b.n	80022dc <vKey_Action+0x900>
		}

		case press_short_Program_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <vKey_Action+0x574>)
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	f107 010e 	add.w	r1, r7, #14
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f005 f985 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN) // Проверка на попадание в допустимый диапазон значений
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <vKey_Action+0x578>)
 8001f34:	899b      	ldrh	r3, [r3, #12]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	f240 81d3 	bls.w	80022e2 <vKey_Action+0x906>
			{
				WelderUnit.Program--; // Исполнить
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <vKey_Action+0x578>)
 8001f3e:	899b      	ldrh	r3, [r3, #12]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <vKey_Action+0x578>)
 8001f46:	819a      	strh	r2, [r3, #12]
				ReadProgramFromFlash2();
 8001f48:	f7ff f98e 	bl	8001268 <ReadProgramFromFlash2>
			}
			break;
 8001f4c:	e1c9      	b.n	80022e2 <vKey_Action+0x906>
 8001f4e:	bf00      	nop
 8001f50:	20003538 	.word	0x20003538
 8001f54:	2000353c 	.word	0x2000353c
 8001f58:	20003d94 	.word	0x20003d94
		}

		case press_long_Program_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f5c:	4bb6      	ldr	r3, [pc, #728]	; (8002238 <vKey_Action+0x85c>)
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	f107 010e 	add.w	r1, r7, #14
 8001f64:	2300      	movs	r3, #0
 8001f66:	2200      	movs	r2, #0
 8001f68:	f005 f968 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001f6c:	4bb3      	ldr	r3, [pc, #716]	; (800223c <vKey_Action+0x860>)
 8001f6e:	899b      	ldrh	r3, [r3, #12]
 8001f70:	2b15      	cmp	r3, #21
 8001f72:	f240 81b9 	bls.w	80022e8 <vKey_Action+0x90c>
			{
				WelderUnit.Program -= 20; // Дейсвия при длинном нажатии
 8001f76:	4bb1      	ldr	r3, [pc, #708]	; (800223c <vKey_Action+0x860>)
 8001f78:	899b      	ldrh	r3, [r3, #12]
 8001f7a:	3b14      	subs	r3, #20
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4baf      	ldr	r3, [pc, #700]	; (800223c <vKey_Action+0x860>)
 8001f80:	819a      	strh	r2, [r3, #12]
			}
			break;
 8001f82:	e1b1      	b.n	80022e8 <vKey_Action+0x90c>
		}

		case press_short_Program_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 );
 8001f84:	4bac      	ldr	r3, [pc, #688]	; (8002238 <vKey_Action+0x85c>)
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	f107 010e 	add.w	r1, r7, #14
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f005 f954 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX) // Проверка на попадание в допустимый диапазон значений
 8001f94:	4ba9      	ldr	r3, [pc, #676]	; (800223c <vKey_Action+0x860>)
 8001f96:	899b      	ldrh	r3, [r3, #12]
 8001f98:	2b45      	cmp	r3, #69	; 0x45
 8001f9a:	f200 81a8 	bhi.w	80022ee <vKey_Action+0x912>
			{
				WelderUnit.Program++; // Исполнить
 8001f9e:	4ba7      	ldr	r3, [pc, #668]	; (800223c <vKey_Action+0x860>)
 8001fa0:	899b      	ldrh	r3, [r3, #12]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	4ba5      	ldr	r3, [pc, #660]	; (800223c <vKey_Action+0x860>)
 8001fa8:	819a      	strh	r2, [r3, #12]
				ReadProgramFromFlash2(); //
 8001faa:	f7ff f95d 	bl	8001268 <ReadProgramFromFlash2>
				//SaveProgramToFlash2();
			}
			break;
 8001fae:	e19e      	b.n	80022ee <vKey_Action+0x912>
		}

		case press_long_Program_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001fb0:	4ba1      	ldr	r3, [pc, #644]	; (8002238 <vKey_Action+0x85c>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	f107 010e 	add.w	r1, r7, #14
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f005 f93e 	bl	800723c <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8001fc0:	4b9e      	ldr	r3, [pc, #632]	; (800223c <vKey_Action+0x860>)
 8001fc2:	899b      	ldrh	r3, [r3, #12]
 8001fc4:	2b31      	cmp	r3, #49	; 0x31
 8001fc6:	f200 8195 	bhi.w	80022f4 <vKey_Action+0x918>
			{
				WelderUnit.Program += 20; // Дейсвия при длинном нажатии
 8001fca:	4b9c      	ldr	r3, [pc, #624]	; (800223c <vKey_Action+0x860>)
 8001fcc:	899b      	ldrh	r3, [r3, #12]
 8001fce:	3314      	adds	r3, #20
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b9a      	ldr	r3, [pc, #616]	; (800223c <vKey_Action+0x860>)
 8001fd4:	819a      	strh	r2, [r3, #12]
			}
			break;
 8001fd6:	e18d      	b.n	80022f4 <vKey_Action+0x918>
		}


		case press_short_Down:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001fd8:	4b97      	ldr	r3, [pc, #604]	; (8002238 <vKey_Action+0x85c>)
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	f107 010e 	add.w	r1, r7, #14
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f005 f92a 	bl	800723c <xQueueGenericSend>
					if ((WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) && WelderUnit.Mode == WELDER_MODE_MANUAL) // Если задняя дверца закрыта и режим работы аппарата ручной, то разрешить опускание головки.
 8001fe8:	4b94      	ldr	r3, [pc, #592]	; (800223c <vKey_Action+0x860>)
 8001fea:	7c1b      	ldrb	r3, [r3, #16]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8182 	beq.w	80022fa <vKey_Action+0x91e>
 8001ff6:	4b91      	ldr	r3, [pc, #580]	; (800223c <vKey_Action+0x860>)
 8001ff8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	f040 817c 	bne.w	80022fa <vKey_Action+0x91e>
					{
						WELDER_HEAD_DOWN // Опустить сварочную головку
 8002002:	2200      	movs	r2, #0
 8002004:	2106      	movs	r1, #6
 8002006:	488e      	ldr	r0, [pc, #568]	; (8002240 <vKey_Action+0x864>)
 8002008:	f002 fc07 	bl	800481a <HAL_GPIO_WritePin>
						WelderUnit.IndicatorPanel.LEDsState |= LED_DOWN; // Индикация что головка опущена
 800200c:	4b8b      	ldr	r3, [pc, #556]	; (800223c <vKey_Action+0x860>)
 800200e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	b2da      	uxtb	r2, r3
 8002018:	4b88      	ldr	r3, [pc, #544]	; (800223c <vKey_Action+0x860>)
 800201a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						WelderUnit.IndicatorPanel.LEDsState &= ~LED_UP; // Индикация что головка опущена
 800201e:	4b87      	ldr	r3, [pc, #540]	; (800223c <vKey_Action+0x860>)
 8002020:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002024:	f023 0308 	bic.w	r3, r3, #8
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b84      	ldr	r3, [pc, #528]	; (800223c <vKey_Action+0x860>)
 800202c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					}

					break;
 8002030:	e163      	b.n	80022fa <vKey_Action+0x91e>
				}

				case press_long_Down:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002032:	4b81      	ldr	r3, [pc, #516]	; (8002238 <vKey_Action+0x85c>)
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	f107 010e 	add.w	r1, r7, #14
 800203a:	2300      	movs	r3, #0
 800203c:	2200      	movs	r2, #0
 800203e:	f005 f8fd 	bl	800723c <xQueueGenericSend>
//					if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
//					{
//						WelderUnit.Speed -= 20; // Дейсвия при длинном нажатии
//					}
					break;
 8002042:	e167      	b.n	8002314 <vKey_Action+0x938>
				}

				case press_short_Up:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002044:	4b7c      	ldr	r3, [pc, #496]	; (8002238 <vKey_Action+0x85c>)
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	f107 010e 	add.w	r1, r7, #14
 800204c:	2300      	movs	r3, #0
 800204e:	2200      	movs	r2, #0
 8002050:	f005 f8f4 	bl	800723c <xQueueGenericSend>
					if ((WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) && WelderUnit.Mode == WELDER_MODE_MANUAL) // Если задняя дверца закрыта и режим работы аппарата ручной, то разрешить подъем головки
 8002054:	4b79      	ldr	r3, [pc, #484]	; (800223c <vKey_Action+0x860>)
 8002056:	7c1b      	ldrb	r3, [r3, #16]
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 814f 	beq.w	8002300 <vKey_Action+0x924>
 8002062:	4b76      	ldr	r3, [pc, #472]	; (800223c <vKey_Action+0x860>)
 8002064:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002068:	2b02      	cmp	r3, #2
 800206a:	f040 8149 	bne.w	8002300 <vKey_Action+0x924>
					{
					WELDER_HEAD_UP // Поднять сварочную головку
 800206e:	2201      	movs	r2, #1
 8002070:	2106      	movs	r1, #6
 8002072:	4873      	ldr	r0, [pc, #460]	; (8002240 <vKey_Action+0x864>)
 8002074:	f002 fbd1 	bl	800481a <HAL_GPIO_WritePin>
					WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация что головка поднята
 8002078:	4b70      	ldr	r3, [pc, #448]	; (800223c <vKey_Action+0x860>)
 800207a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800207e:	f043 0308 	orr.w	r3, r3, #8
 8002082:	b2da      	uxtb	r2, r3
 8002084:	4b6d      	ldr	r3, [pc, #436]	; (800223c <vKey_Action+0x860>)
 8002086:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN; // Индикация что головка поднята
 800208a:	4b6c      	ldr	r3, [pc, #432]	; (800223c <vKey_Action+0x860>)
 800208c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4b69      	ldr	r3, [pc, #420]	; (800223c <vKey_Action+0x860>)
 8002098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					}
					break;
 800209c:	e130      	b.n	8002300 <vKey_Action+0x924>
				}

				case press_long_Up:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 800209e:	4b66      	ldr	r3, [pc, #408]	; (8002238 <vKey_Action+0x85c>)
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	f107 010e 	add.w	r1, r7, #14
 80020a6:	2300      	movs	r3, #0
 80020a8:	2200      	movs	r2, #0
 80020aa:	f005 f8c7 	bl	800723c <xQueueGenericSend>
					if (WelderUnit.Speed < SPEED_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <vKey_Action+0x860>)
 80020b0:	88db      	ldrh	r3, [r3, #6]
 80020b2:	f240 32d2 	movw	r2, #978	; 0x3d2
 80020b6:	4293      	cmp	r3, r2
 80020b8:	f200 8125 	bhi.w	8002306 <vKey_Action+0x92a>
					{
						WelderUnit.Speed += 20; // Дейсвия при длинном нажатии
 80020bc:	4b5f      	ldr	r3, [pc, #380]	; (800223c <vKey_Action+0x860>)
 80020be:	88db      	ldrh	r3, [r3, #6]
 80020c0:	3314      	adds	r3, #20
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	4b5d      	ldr	r3, [pc, #372]	; (800223c <vKey_Action+0x860>)
 80020c6:	80da      	strh	r2, [r3, #6]
					}
					break;
 80020c8:	e11d      	b.n	8002306 <vKey_Action+0x92a>



		case press_short_Parking:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80020ca:	4b5b      	ldr	r3, [pc, #364]	; (8002238 <vKey_Action+0x85c>)
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	f107 010e 	add.w	r1, r7, #14
 80020d2:	2300      	movs	r3, #0
 80020d4:	2200      	movs	r2, #0
 80020d6:	f005 f8b1 	bl	800723c <xQueueGenericSend>

			WelderUnit.Mode = WELDER_MODE_CALIBRATION; //Задать режим работы аппарата - калибровка
 80020da:	4b58      	ldr	r3, [pc, #352]	; (800223c <vKey_Action+0x860>)
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

			//WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отключении индикации режима АВТО
			WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING; // Отображение что выбран режим калибровки
 80020e2:	4b56      	ldr	r3, [pc, #344]	; (800223c <vKey_Action+0x860>)
 80020e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4b53      	ldr	r3, [pc, #332]	; (800223c <vKey_Action+0x860>)
 80020f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



			break;
 80020f4:	e10e      	b.n	8002314 <vKey_Action+0x938>
		}

		case press_long_Parking:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80020f6:	4b50      	ldr	r3, [pc, #320]	; (8002238 <vKey_Action+0x85c>)
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	f107 010e 	add.w	r1, r7, #14
 80020fe:	2300      	movs	r3, #0
 8002100:	2200      	movs	r2, #0
 8002102:	f005 f89b 	bl	800723c <xQueueGenericSend>
			WelderUnit.Xf -= 20; // Дейсвия при длинном нажатии
 8002106:	4b4d      	ldr	r3, [pc, #308]	; (800223c <vKey_Action+0x860>)
 8002108:	885b      	ldrh	r3, [r3, #2]
 800210a:	3b14      	subs	r3, #20
 800210c:	b29a      	uxth	r2, r3
 800210e:	4b4b      	ldr	r3, [pc, #300]	; (800223c <vKey_Action+0x860>)
 8002110:	805a      	strh	r2, [r3, #2]

			break;
 8002112:	e0ff      	b.n	8002314 <vKey_Action+0x938>
		}

		case press_short_Auto:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 );
 8002114:	4b48      	ldr	r3, [pc, #288]	; (8002238 <vKey_Action+0x85c>)
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	f107 010e 	add.w	r1, r7, #14
 800211c:	2300      	movs	r3, #0
 800211e:	2200      	movs	r2, #0
 8002120:	f005 f88c 	bl	800723c <xQueueGenericSend>


			if (WelderUnit.State & WELDER_STATE_CALIBRATED) // Если аппарат откалиброван, то разрешить включение режима АВТО
 8002124:	4b45      	ldr	r3, [pc, #276]	; (800223c <vKey_Action+0x860>)
 8002126:	7c1b      	ldrb	r3, [r3, #16]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80ed 	beq.w	800230c <vKey_Action+0x930>
			{
				if (WelderUnit.Mode != WELDER_MODE_AUTO) // Если уже не выбран режим АВТО, то включить его, иначе включить Ручной режим
 8002132:	4b42      	ldr	r3, [pc, #264]	; (800223c <vKey_Action+0x860>)
 8002134:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002138:	2b03      	cmp	r3, #3
 800213a:	d00d      	beq.n	8002158 <vKey_Action+0x77c>
				{
					WelderUnit.Mode = WELDER_MODE_AUTO;
 800213c:	4b3f      	ldr	r3, [pc, #252]	; (800223c <vKey_Action+0x860>)
 800213e:	2203      	movs	r2, #3
 8002140:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					WelderUnit.IndicatorPanel.LEDsState |= LED_AUTO; // Отображение что выбран режим калибровки
 8002144:	4b3d      	ldr	r3, [pc, #244]	; (800223c <vKey_Action+0x860>)
 8002146:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b3a      	ldr	r3, [pc, #232]	; (800223c <vKey_Action+0x860>)
 8002152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отображение что выбран режим калибровки
				}

			}

			break;
 8002156:	e0d9      	b.n	800230c <vKey_Action+0x930>
					WelderUnit.Mode = WELDER_MODE_MANUAL;
 8002158:	4b38      	ldr	r3, [pc, #224]	; (800223c <vKey_Action+0x860>)
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отображение что выбран режим калибровки
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <vKey_Action+0x860>)
 8002162:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b33      	ldr	r3, [pc, #204]	; (800223c <vKey_Action+0x860>)
 800216e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			break;
 8002172:	e0cb      	b.n	800230c <vKey_Action+0x930>
		}

		case press_long_Auto:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002174:	4b30      	ldr	r3, [pc, #192]	; (8002238 <vKey_Action+0x85c>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	f107 010e 	add.w	r1, r7, #14
 800217c:	2300      	movs	r3, #0
 800217e:	2200      	movs	r2, #0
 8002180:	f005 f85c 	bl	800723c <xQueueGenericSend>
			WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <vKey_Action+0x860>)
 8002186:	885b      	ldrh	r3, [r3, #2]
 8002188:	3314      	adds	r3, #20
 800218a:	b29a      	uxth	r2, r3
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <vKey_Action+0x860>)
 800218e:	805a      	strh	r2, [r3, #2]
			break;
 8002190:	e0c0      	b.n	8002314 <vKey_Action+0x938>
		}

		case press_short_StartStop:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002192:	4b29      	ldr	r3, [pc, #164]	; (8002238 <vKey_Action+0x85c>)
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	f107 010e 	add.w	r1, r7, #14
 800219a:	2300      	movs	r3, #0
 800219c:	2200      	movs	r2, #0
 800219e:	f005 f84d 	bl	800723c <xQueueGenericSend>

			// Дейсвия при нажатии на кнопку СТАРТ/СТОП в зависимости от установленного режима работы аппарата
			switch(WelderUnit.Mode)
 80021a2:	4b26      	ldr	r3, [pc, #152]	; (800223c <vKey_Action+0x860>)
 80021a4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d01b      	beq.n	80021e4 <vKey_Action+0x808>
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	f300 80b0 	bgt.w	8002312 <vKey_Action+0x936>
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d002      	beq.n	80021bc <vKey_Action+0x7e0>
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d009      	beq.n	80021ce <vKey_Action+0x7f2>


//			Carriage_cmd = Cmd_CarriageGoTo;
//			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к

			break;
 80021ba:	e0aa      	b.n	8002312 <vKey_Action+0x936>
				xQueueSendToBack( qWelderCalibrated, &Cal, 0 ); // Начать калибровку
 80021bc:	4b21      	ldr	r3, [pc, #132]	; (8002244 <vKey_Action+0x868>)
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	f107 010d 	add.w	r1, r7, #13
 80021c4:	2300      	movs	r3, #0
 80021c6:	2200      	movs	r2, #0
 80021c8:	f005 f838 	bl	800723c <xQueueGenericSend>
				break;
 80021cc:	e02c      	b.n	8002228 <vKey_Action+0x84c>
				Run = Welder_Run;
 80021ce:	2303      	movs	r3, #3
 80021d0:	733b      	strb	r3, [r7, #12]
				xQueueSendToBack(qWelderRun, &Run, 0 ); // Начать варку в ручном режиме
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <vKey_Action+0x86c>)
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	f107 010c 	add.w	r1, r7, #12
 80021da:	2300      	movs	r3, #0
 80021dc:	2200      	movs	r2, #0
 80021de:	f005 f82d 	bl	800723c <xQueueGenericSend>
				break;
 80021e2:	e021      	b.n	8002228 <vKey_Action+0x84c>
				Run = Welder_Run;
 80021e4:	2303      	movs	r3, #3
 80021e6:	733b      	strb	r3, [r7, #12]
				if (WelderUnit.State & 0x01) // Если каретка уже движеся, то остановать её
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <vKey_Action+0x860>)
 80021ea:	7c1b      	ldrb	r3, [r3, #16]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d007      	beq.n	8002204 <vKey_Action+0x828>
					WelderUnit.State &= ~WELDER_MOVE_ENABLE; // Заппретить движение каретки
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <vKey_Action+0x860>)
 80021f6:	7c1b      	ldrb	r3, [r3, #16]
 80021f8:	f023 0320 	bic.w	r3, r3, #32
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <vKey_Action+0x860>)
 8002200:	741a      	strb	r2, [r3, #16]
				break;
 8002202:	e010      	b.n	8002226 <vKey_Action+0x84a>
					Run = Welder_Run;
 8002204:	2303      	movs	r3, #3
 8002206:	733b      	strb	r3, [r7, #12]
					WelderUnit.State |= WELDER_MOVE_ENABLE; // Разрешить движение каретки
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <vKey_Action+0x860>)
 800220a:	7c1b      	ldrb	r3, [r3, #16]
 800220c:	f043 0320 	orr.w	r3, r3, #32
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <vKey_Action+0x860>)
 8002214:	741a      	strb	r2, [r3, #16]
					xQueueSendToBack(qWelderRun, &Run, 0 ); // Начать варку в автоматическом режиме
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <vKey_Action+0x86c>)
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	f107 010c 	add.w	r1, r7, #12
 800221e:	2300      	movs	r3, #0
 8002220:	2200      	movs	r2, #0
 8002222:	f005 f80b 	bl	800723c <xQueueGenericSend>
				break;
 8002226:	bf00      	nop
			break;
 8002228:	e073      	b.n	8002312 <vKey_Action+0x936>
		}

		case press_long_StartStop:
		{
			WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <vKey_Action+0x860>)
 800222c:	885b      	ldrh	r3, [r3, #2]
 800222e:	3314      	adds	r3, #20
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b02      	ldr	r3, [pc, #8]	; (800223c <vKey_Action+0x860>)
 8002234:	805a      	strh	r2, [r3, #2]
//			Key.StartStop_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
//			Key.StartStop_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
			break;
 8002236:	e06d      	b.n	8002314 <vKey_Action+0x938>
 8002238:	20003538 	.word	0x20003538
 800223c:	2000353c 	.word	0x2000353c
 8002240:	40011000 	.word	0x40011000
 8002244:	20003d8c 	.word	0x20003d8c
 8002248:	20003d88 	.word	0x20003d88

		// *********************************************************Комбинации клавишь*********************************************************

		case press_short_Program_L_and_R:
		{
			beep_mode_send = beep_long;
 800224c:	2305      	movs	r3, #5
 800224e:	73bb      	strb	r3, [r7, #14]
			xQueueSendToBack( qBeepMode, &beep_mode_send , 0 ); // Звук нажатия
 8002250:	4b31      	ldr	r3, [pc, #196]	; (8002318 <vKey_Action+0x93c>)
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	f107 010e 	add.w	r1, r7, #14
 8002258:	2300      	movs	r3, #0
 800225a:	2200      	movs	r2, #0
 800225c:	f004 ffee 	bl	800723c <xQueueGenericSend>
			SaveProgramToFlash2();
 8002260:	f7fe ff7e 	bl	8001160 <SaveProgramToFlash2>
			beep_mode_send = beep_click;
 8002264:	2301      	movs	r3, #1
 8002266:	73bb      	strb	r3, [r7, #14]
			break;
 8002268:	e054      	b.n	8002314 <vKey_Action+0x938>
			break;
 800226a:	bf00      	nop
 800226c:	f7ff bbc0 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002270:	bf00      	nop
 8002272:	f7ff bbbd 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002276:	bf00      	nop
 8002278:	f7ff bbba 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800227c:	bf00      	nop
 800227e:	f7ff bbb7 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002282:	bf00      	nop
 8002284:	f7ff bbb4 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002288:	bf00      	nop
 800228a:	f7ff bbb1 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800228e:	bf00      	nop
 8002290:	f7ff bbae 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002294:	bf00      	nop
 8002296:	f7ff bbab 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800229a:	bf00      	nop
 800229c:	f7ff bba8 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022a0:	bf00      	nop
 80022a2:	f7ff bba5 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022a6:	bf00      	nop
 80022a8:	f7ff bba2 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022ac:	bf00      	nop
 80022ae:	f7ff bb9f 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022b2:	bf00      	nop
 80022b4:	f7ff bb9c 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022b8:	bf00      	nop
 80022ba:	f7ff bb99 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022be:	bf00      	nop
 80022c0:	f7ff bb96 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022c4:	bf00      	nop
 80022c6:	f7ff bb93 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022ca:	bf00      	nop
 80022cc:	f7ff bb90 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022d0:	bf00      	nop
 80022d2:	f7ff bb8d 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022d6:	bf00      	nop
 80022d8:	f7ff bb8a 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022dc:	bf00      	nop
 80022de:	f7ff bb87 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022e2:	bf00      	nop
 80022e4:	f7ff bb84 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022e8:	bf00      	nop
 80022ea:	f7ff bb81 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022ee:	bf00      	nop
 80022f0:	f7ff bb7e 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022f4:	bf00      	nop
 80022f6:	f7ff bb7b 	b.w	80019f0 <vKey_Action+0x14>
					break;
 80022fa:	bf00      	nop
 80022fc:	f7ff bb78 	b.w	80019f0 <vKey_Action+0x14>
					break;
 8002300:	bf00      	nop
 8002302:	f7ff bb75 	b.w	80019f0 <vKey_Action+0x14>
					break;
 8002306:	bf00      	nop
 8002308:	f7ff bb72 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800230c:	bf00      	nop
 800230e:	f7ff bb6f 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002312:	bf00      	nop
		xQueueReceive(qKeyPress, &KeyPressed, portMAX_DELAY ); // Ждать нажатия кнопки
 8002314:	f7ff bb6c 	b.w	80019f0 <vKey_Action+0x14>
 8002318:	20003538 	.word	0x20003538

0800231c <vWelder_Run>:
	vTaskDelete(NULL);

}

void vWelder_Run(void *pvParameters)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

	uint8_t beep;

	for(;;)
	{
		xQueueReceive(qWelderRun, &lReceivedValue, portMAX_DELAY ); // Ожидание команды на начало варки
 8002324:	4b77      	ldr	r3, [pc, #476]	; (8002504 <vWelder_Run+0x1e8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f107 010e 	add.w	r1, r7, #14
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	4618      	mov	r0, r3
 8002332:	f005 f8db 	bl	80074ec <xQueueReceive>

		if (lReceivedValue == Welder_Run && ((WelderUnit.State & 0x02) == 0x02) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) ) // Если пришла команда на начло варки и каретка откалибрована и задняя дверца закрыта
 8002336:	7bbb      	ldrb	r3, [r7, #14]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d1f3      	bne.n	8002324 <vWelder_Run+0x8>
 800233c:	4b72      	ldr	r3, [pc, #456]	; (8002508 <vWelder_Run+0x1ec>)
 800233e:	7c1b      	ldrb	r3, [r3, #16]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ed      	beq.n	8002324 <vWelder_Run+0x8>
 8002348:	4b6f      	ldr	r3, [pc, #444]	; (8002508 <vWelder_Run+0x1ec>)
 800234a:	7c1b      	ldrb	r3, [r3, #16]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0e7      	beq.n	8002324 <vWelder_Run+0x8>
		{
			beep = beep_1short;
 8002354:	2302      	movs	r3, #2
 8002356:	737b      	strb	r3, [r7, #13]
			xQueueSendToBack( qBeepMode, &beep, 0 ); // Звук нажатия
 8002358:	4b6c      	ldr	r3, [pc, #432]	; (800250c <vWelder_Run+0x1f0>)
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	f107 010d 	add.w	r1, r7, #13
 8002360:	2300      	movs	r3, #0
 8002362:	2200      	movs	r2, #0
 8002364:	f004 ff6a 	bl	800723c <xQueueGenericSend>

		if (WelderUnit.Position != WelderUnit.Xs) // Если текущая позиция каретки не равна стартовой позиции, то занять её
 8002368:	4b67      	ldr	r3, [pc, #412]	; (8002508 <vWelder_Run+0x1ec>)
 800236a:	889a      	ldrh	r2, [r3, #4]
 800236c:	4b66      	ldr	r3, [pc, #408]	; (8002508 <vWelder_Run+0x1ec>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d01e      	beq.n	80023b2 <vWelder_Run+0x96>
		{
			Carriage_cmd = Cmd_CarriageGoTo;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
			WelderUnit.GoTo = WelderUnit.Xs;
 8002378:	4b63      	ldr	r3, [pc, #396]	; (8002508 <vWelder_Run+0x1ec>)
 800237a:	881a      	ldrh	r2, [r3, #0]
 800237c:	4b62      	ldr	r3, [pc, #392]	; (8002508 <vWelder_Run+0x1ec>)
 800237e:	811a      	strh	r2, [r3, #8]
			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идти к
 8002380:	4b63      	ldr	r3, [pc, #396]	; (8002510 <vWelder_Run+0x1f4>)
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	f107 010f 	add.w	r1, r7, #15
 8002388:	2300      	movs	r3, #0
 800238a:	2200      	movs	r2, #0
 800238c:	f004 ff56 	bl	800723c <xQueueGenericSend>

			xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Без этого не работает. В очереди откуда то берутся данные
 8002390:	4b60      	ldr	r3, [pc, #384]	; (8002514 <vWelder_Run+0x1f8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f107 010e 	add.w	r1, r7, #14
 8002398:	2200      	movs	r2, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f005 f8a6 	bl	80074ec <xQueueReceive>
			xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 80023a0:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <vWelder_Run+0x1f8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f107 010e 	add.w	r1, r7, #14
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	4618      	mov	r0, r3
 80023ae:	f005 f89d 	bl	80074ec <xQueueReceive>
		}

		if ((WelderUnit.Position == WelderUnit.Xs) && (WelderUnit.State & WELDER_MOVE_ENABLE)) // Если каретка на заданной позиции и движение каретки разрешено
 80023b2:	4b55      	ldr	r3, [pc, #340]	; (8002508 <vWelder_Run+0x1ec>)
 80023b4:	889a      	ldrh	r2, [r3, #4]
 80023b6:	4b54      	ldr	r3, [pc, #336]	; (8002508 <vWelder_Run+0x1ec>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d1b2      	bne.n	8002324 <vWelder_Run+0x8>
 80023be:	4b52      	ldr	r3, [pc, #328]	; (8002508 <vWelder_Run+0x1ec>)
 80023c0:	7c1b      	ldrb	r3, [r3, #16]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0ac      	beq.n	8002324 <vWelder_Run+0x8>
		{

		WELDER_HEAD_DOWN // Опустить головку
 80023ca:	2200      	movs	r2, #0
 80023cc:	2106      	movs	r1, #6
 80023ce:	4852      	ldr	r0, [pc, #328]	; (8002518 <vWelder_Run+0x1fc>)
 80023d0:	f002 fa23 	bl	800481a <HAL_GPIO_WritePin>
		WelderUnit.IndicatorPanel.LEDsState |= LED_DOWN; // Индикация опущенной сварочной головки
 80023d4:	4b4c      	ldr	r3, [pc, #304]	; (8002508 <vWelder_Run+0x1ec>)
 80023d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b49      	ldr	r3, [pc, #292]	; (8002508 <vWelder_Run+0x1ec>)
 80023e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		WelderUnit.IndicatorPanel.LEDsState &= ~LED_UP;
 80023e6:	4b48      	ldr	r3, [pc, #288]	; (8002508 <vWelder_Run+0x1ec>)
 80023e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023ec:	f023 0308 	bic.w	r3, r3, #8
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b45      	ldr	r3, [pc, #276]	; (8002508 <vWelder_Run+0x1ec>)
 80023f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		vTaskDelay(100 / portTICK_RATE_MS); // Ожидание опускания головки
 80023f8:	2064      	movs	r0, #100	; 0x64
 80023fa:	f005 fd65 	bl	8007ec8 <vTaskDelay>
		SYNC_ARC_ON // Подача дуги
 80023fe:	2201      	movs	r2, #1
 8002400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002404:	4845      	ldr	r0, [pc, #276]	; (800251c <vWelder_Run+0x200>)
 8002406:	f002 fa08 	bl	800481a <HAL_GPIO_WritePin>

		vTaskDelay(WelderUnit.Delay_s * 100 / portTICK_RATE_MS); // Выдержка времени для заполнения точки начала сварки аргоном.
 800240a:	4b3f      	ldr	r3, [pc, #252]	; (8002508 <vWelder_Run+0x1ec>)
 800240c:	7a9b      	ldrb	r3, [r3, #10]
 800240e:	461a      	mov	r2, r3
 8002410:	2364      	movs	r3, #100	; 0x64
 8002412:	fb03 f302 	mul.w	r3, r3, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f005 fd56 	bl	8007ec8 <vTaskDelay>

		WelderUnit.GoTo = WelderUnit.Xf; // Указание точки осановки головки
 800241c:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <vWelder_Run+0x1ec>)
 800241e:	885a      	ldrh	r2, [r3, #2]
 8002420:	4b39      	ldr	r3, [pc, #228]	; (8002508 <vWelder_Run+0x1ec>)
 8002422:	811a      	strh	r2, [r3, #8]
		Carriage_cmd = Cmd_CarriageGoTo; // Команда на начала движение каретки
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
		xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идти к
 8002428:	4b39      	ldr	r3, [pc, #228]	; (8002510 <vWelder_Run+0x1f4>)
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	f107 010f 	add.w	r1, r7, #15
 8002430:	2300      	movs	r3, #0
 8002432:	2200      	movs	r2, #0
 8002434:	f004 ff02 	bl	800723c <xQueueGenericSend>


		xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Без этого не работает. В очереди откуда то берутся данные
 8002438:	4b36      	ldr	r3, [pc, #216]	; (8002514 <vWelder_Run+0x1f8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f107 010e 	add.w	r1, r7, #14
 8002440:	2200      	movs	r2, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f005 f852 	bl	80074ec <xQueueReceive>
		xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 8002448:	4b32      	ldr	r3, [pc, #200]	; (8002514 <vWelder_Run+0x1f8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f107 010e 	add.w	r1, r7, #14
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	4618      	mov	r0, r3
 8002456:	f005 f849 	bl	80074ec <xQueueReceive>


		SYNC_ARC_OFF // Прекращение подачи дуги
 800245a:	2200      	movs	r2, #0
 800245c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002460:	482e      	ldr	r0, [pc, #184]	; (800251c <vWelder_Run+0x200>)
 8002462:	f002 f9da 	bl	800481a <HAL_GPIO_WritePin>

		vTaskDelay(WelderUnit.Delay_f * 100 / portTICK_RATE_MS); // Выдержка времени для заполнения точки останова сварки аргоном.
 8002466:	4b28      	ldr	r3, [pc, #160]	; (8002508 <vWelder_Run+0x1ec>)
 8002468:	7adb      	ldrb	r3, [r3, #11]
 800246a:	461a      	mov	r2, r3
 800246c:	2364      	movs	r3, #100	; 0x64
 800246e:	fb03 f302 	mul.w	r3, r3, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f005 fd28 	bl	8007ec8 <vTaskDelay>

		beep = beep_3short;
 8002478:	2304      	movs	r3, #4
 800247a:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack( qBeepMode, &beep, 0 ); // Звук окончания варки
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <vWelder_Run+0x1f0>)
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	f107 010d 	add.w	r1, r7, #13
 8002484:	2300      	movs	r3, #0
 8002486:	2200      	movs	r2, #0
 8002488:	f004 fed8 	bl	800723c <xQueueGenericSend>

		WELDER_HEAD_UP // Поднять головку
 800248c:	2201      	movs	r2, #1
 800248e:	2106      	movs	r1, #6
 8002490:	4821      	ldr	r0, [pc, #132]	; (8002518 <vWelder_Run+0x1fc>)
 8002492:	f002 f9c2 	bl	800481a <HAL_GPIO_WritePin>
		vTaskDelay(100 / portTICK_RATE_MS); // Ожидание подъема головки
 8002496:	2064      	movs	r0, #100	; 0x64
 8002498:	f005 fd16 	bl	8007ec8 <vTaskDelay>

		WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <vWelder_Run+0x1ec>)
 800249e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <vWelder_Run+0x1ec>)
 80024aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <vWelder_Run+0x1ec>)
 80024b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024b4:	f023 0304 	bic.w	r3, r3, #4
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <vWelder_Run+0x1ec>)
 80024bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		// Откат каретки

			if (WelderUnit.Position > KICKBACK)
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <vWelder_Run+0x1ec>)
 80024c2:	889b      	ldrh	r3, [r3, #4]
 80024c4:	2bc8      	cmp	r3, #200	; 0xc8
 80024c6:	d906      	bls.n	80024d6 <vWelder_Run+0x1ba>
			{
				WelderUnit.GoTo = WelderUnit.Position -	KICKBACK;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <vWelder_Run+0x1ec>)
 80024ca:	889b      	ldrh	r3, [r3, #4]
 80024cc:	3bc8      	subs	r3, #200	; 0xc8
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <vWelder_Run+0x1ec>)
 80024d2:	811a      	strh	r2, [r3, #8]
 80024d4:	e002      	b.n	80024dc <vWelder_Run+0x1c0>
			}
			else
			{
				WelderUnit.GoTo = 0;
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <vWelder_Run+0x1ec>)
 80024d8:	2200      	movs	r2, #0
 80024da:	811a      	strh	r2, [r3, #8]
			}

			Carriage_cmd = Cmd_CarriageGoTo;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <vWelder_Run+0x1f4>)
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	f107 010f 	add.w	r1, r7, #15
 80024e8:	2300      	movs	r3, #0
 80024ea:	2200      	movs	r2, #0
 80024ec:	f004 fea6 	bl	800723c <xQueueGenericSend>
			xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <vWelder_Run+0x1f8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f107 010e 	add.w	r1, r7, #14
 80024f8:	f04f 32ff 	mov.w	r2, #4294967295
 80024fc:	4618      	mov	r0, r3
 80024fe:	f004 fff5 	bl	80074ec <xQueueReceive>
		xQueueReceive(qWelderRun, &lReceivedValue, portMAX_DELAY ); // Ожидание команды на начало варки
 8002502:	e70f      	b.n	8002324 <vWelder_Run+0x8>
 8002504:	20003d88 	.word	0x20003d88
 8002508:	2000353c 	.word	0x2000353c
 800250c:	20003538 	.word	0x20003538
 8002510:	20003d94 	.word	0x20003d94
 8002514:	20003d80 	.word	0x20003d80
 8002518:	40011000 	.word	0x40011000
 800251c:	40010800 	.word	0x40010800

08002520 <vCarriage_Calibration>:
}



void vCarriage_Calibration(void *pvParameters)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	uint8_t lReceivedValue;


	for(;;)
	{
		xQueueReceive(qWelderCalibrated, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 8002528:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <vCarriage_Calibration+0xf8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f107 010f 	add.w	r1, r7, #15
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	4618      	mov	r0, r3
 8002536:	f004 ffd9 	bl	80074ec <xQueueReceive>

		if (lReceivedValue == Calibrated)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d1f3      	bne.n	8002528 <vCarriage_Calibration+0x8>
		{
			WELDER_HEAD_UP // Поднять головку
 8002540:	2201      	movs	r2, #1
 8002542:	2106      	movs	r1, #6
 8002544:	4835      	ldr	r0, [pc, #212]	; (800261c <vCarriage_Calibration+0xfc>)
 8002546:	f002 f968 	bl	800481a <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS); // Ожидание подъема головки
 800254a:	2064      	movs	r0, #100	; 0x64
 800254c:	f005 fcbc 	bl	8007ec8 <vTaskDelay>

			WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 8002550:	4b33      	ldr	r3, [pc, #204]	; (8002620 <vCarriage_Calibration+0x100>)
 8002552:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b30      	ldr	r3, [pc, #192]	; (8002620 <vCarriage_Calibration+0x100>)
 800255e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 8002562:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <vCarriage_Calibration+0x100>)
 8002564:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <vCarriage_Calibration+0x100>)
 8002570:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

			Carriage_Move(CALIBRATION_PHASE_SPEED_1, 0, 1); // Начать перемещение каретки в сторону концевика
 8002574:	2201      	movs	r2, #1
 8002576:	2100      	movs	r1, #0
 8002578:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800257c:	f7fe fc84 	bl	8000e88 <Carriage_Move>

			// Когда концевик замкнулся выдается семофор, что коретка дошла до самого начала

			// По какой-то причине при первой попытке взять 2-й семафор он берется (даже если не выдан). Потому семафор берется дважды
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY ); // Попытка взять семафор.
 8002580:	4b28      	ldr	r3, [pc, #160]	; (8002624 <vCarriage_Calibration+0x104>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f04f 31ff 	mov.w	r1, #4294967295
 8002588:	4618      	mov	r0, r3
 800258a:	f005 f851 	bl	8007630 <xQueueSemaphoreTake>
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <vCarriage_Calibration+0x104>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f04f 31ff 	mov.w	r1, #4294967295
 8002596:	4618      	mov	r0, r3
 8002598:	f005 f84a 	bl	8007630 <xQueueSemaphoreTake>

			Carriage_Move(0, 0, 1); // Стоп
 800259c:	2201      	movs	r2, #1
 800259e:	2100      	movs	r1, #0
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7fe fc71 	bl	8000e88 <Carriage_Move>

			Carriage_Move(CALIBRATION_PHASE_SPEED_2, 1, 1); // Отъехать немного назад
 80025a6:	2201      	movs	r2, #1
 80025a8:	2101      	movs	r1, #1
 80025aa:	20c8      	movs	r0, #200	; 0xc8
 80025ac:	f7fe fc6c 	bl	8000e88 <Carriage_Move>
			vTaskDelay(1000 / portTICK_RATE_MS);
 80025b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025b4:	f005 fc88 	bl	8007ec8 <vTaskDelay>

			Carriage_Move(0, 0, 1); // Стоп
 80025b8:	2201      	movs	r2, #1
 80025ba:	2100      	movs	r1, #0
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe fc63 	bl	8000e88 <Carriage_Move>

			vTaskDelay(100/ portTICK_RATE_MS);
 80025c2:	2064      	movs	r0, #100	; 0x64
 80025c4:	f005 fc80 	bl	8007ec8 <vTaskDelay>

			Carriage_Move(CALIBRATION_PHASE_SPEED_3, 0, 1); // Начать перемещение каретки в сторону концевика
 80025c8:	2201      	movs	r2, #1
 80025ca:	2100      	movs	r1, #0
 80025cc:	2018      	movs	r0, #24
 80025ce:	f7fe fc5b 	bl	8000e88 <Carriage_Move>

			// По какой-то причине при первой попытке взять 2-й семафор он берется (даже если не выдан). Потому семафор берется дважды
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY ); // Попытка взять семафор по прерыванию срабатывания концевика
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <vCarriage_Calibration+0x104>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f04f 31ff 	mov.w	r1, #4294967295
 80025da:	4618      	mov	r0, r3
 80025dc:	f005 f828 	bl	8007630 <xQueueSemaphoreTake>
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <vCarriage_Calibration+0x104>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	4618      	mov	r0, r3
 80025ea:	f005 f821 	bl	8007630 <xQueueSemaphoreTake>

			Carriage_Move(0, 0, 1); // Стоп
 80025ee:	2201      	movs	r2, #1
 80025f0:	2100      	movs	r1, #0
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7fe fc48 	bl	8000e88 <Carriage_Move>

			WelderUnit.State |= 1<<1; //1 бит - Откалибровано
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <vCarriage_Calibration+0x100>)
 80025fa:	7c1b      	ldrb	r3, [r3, #16]
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <vCarriage_Calibration+0x100>)
 8002604:	741a      	strb	r2, [r3, #16]

			WelderUnit.Position = 0; // Позиция каретки
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <vCarriage_Calibration+0x100>)
 8002608:	2200      	movs	r2, #0
 800260a:	809a      	strh	r2, [r3, #4]

			WelderUnit.Mode = WELDER_MODE_MANUAL; // После калибровки режим работы аппарата - ручной.
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <vCarriage_Calibration+0x100>)
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		xQueueReceive(qWelderCalibrated, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 8002614:	e788      	b.n	8002528 <vCarriage_Calibration+0x8>
 8002616:	bf00      	nop
 8002618:	20003d8c 	.word	0x20003d8c
 800261c:	40011000 	.word	0x40011000
 8002620:	2000353c 	.word	0x2000353c
 8002624:	20003dc4 	.word	0x20003dc4

08002628 <vCarriage_GoTo>:
	vTaskDelete(NULL);
}


void vCarriage_GoTo(void *pvParameters)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		//Попытка получить команду для передвижения каретки в нужную позицию.
		// Данные из очереди при этом не удаляются
		xQueuePeek(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 8002630:	4b6c      	ldr	r3, [pc, #432]	; (80027e4 <vCarriage_GoTo+0x1bc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f107 010b 	add.w	r1, r7, #11
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	4618      	mov	r0, r3
 800263e:	f005 f8bf 	bl	80077c0 <xQueuePeek>
//			WelderUnit.State &= ~0x01;
//			xQueueReceive(qWelderCmd, &lReceivedValue, portMAX_DELAY );
//			//WelderUnit.GoTo = WelderUnit.Position;
//		}

		if ((lReceivedValue == Cmd_CarriageGoTo) ) // Если пришла команда на начло движения
 8002642:	7afb      	ldrb	r3, [r7, #11]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d1f3      	bne.n	8002630 <vCarriage_GoTo+0x8>
		{

		WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / (STEPS_PER_ROTATE * MICRO_STEP_DEV); // Вычисление текущей позиции каретки, мм
 8002648:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 800264a:	89db      	ldrh	r3, [r3, #14]
 800264c:	461a      	mov	r2, r3
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd ff3c 	bl	80004d4 <__aeabi_i2d>
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	4b62      	ldr	r3, [pc, #392]	; (80027ec <vCarriage_GoTo+0x1c4>)
 8002662:	f7fe f8cb 	bl	80007fc <__aeabi_ddiv>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f7fe f9ad 	bl	80009cc <__aeabi_d2uiz>
 8002672:	4603      	mov	r3, r0
 8002674:	b29a      	uxth	r2, r3
 8002676:	4b5c      	ldr	r3, [pc, #368]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002678:	809a      	strh	r2, [r3, #4]

		dX = WelderUnit.GoTo - WelderUnit.Position; // Определение сколько и в какую сторону нужно сдвинуть каретку
 800267a:	4b5b      	ldr	r3, [pc, #364]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 800267c:	891b      	ldrh	r3, [r3, #8]
 800267e:	461a      	mov	r2, r3
 8002680:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002682:	889b      	ldrh	r3, [r3, #4]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	60fb      	str	r3, [r7, #12]

		// Если каретка на нужном месте, то остановить движение каретки, очищаем очередь и снова взврат к xQueuePeek, для ожидания след команды
		if (dX == 0)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d11e      	bne.n	80026cc <vCarriage_GoTo+0xa4>
		{
			Carriage_Move(0, 1, 1); // стоп
 800268e:	2201      	movs	r2, #1
 8002690:	2101      	movs	r1, #1
 8002692:	2000      	movs	r0, #0
 8002694:	f7fe fbf8 	bl	8000e88 <Carriage_Move>
			WelderUnit.State &= ~0x01;
 8002698:	4b53      	ldr	r3, [pc, #332]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 800269a:	7c1b      	ldrb	r3, [r3, #16]
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b51      	ldr	r3, [pc, #324]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 80026a4:	741a      	strb	r2, [r3, #16]
			SendVal = Carriage_Done;
 80026a6:	2302      	movs	r3, #2
 80026a8:	72bb      	strb	r3, [r7, #10]
			xQueueSendToBack( qGoToResponse, &SendVal, 0 );
 80026aa:	4b51      	ldr	r3, [pc, #324]	; (80027f0 <vCarriage_GoTo+0x1c8>)
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	f107 010a 	add.w	r1, r7, #10
 80026b2:	2300      	movs	r3, #0
 80026b4:	2200      	movs	r2, #0
 80026b6:	f004 fdc1 	bl	800723c <xQueueGenericSend>

			//xQueueSendToBack( qDebug, &SendVal, 0 );

			xQueueReceive(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 80026ba:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <vCarriage_GoTo+0x1bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f107 010b 	add.w	r1, r7, #11
 80026c2:	f04f 32ff 	mov.w	r2, #4294967295
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 ff10 	bl	80074ec <xQueueReceive>

		}

		if (dX > 0 && (WelderUnit.State & WELDER_MOVE_ENABLE)) // Если двигать в сторону концевика
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	dd26      	ble.n	8002720 <vCarriage_GoTo+0xf8>
 80026d2:	4b45      	ldr	r3, [pc, #276]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 80026d4:	7c1b      	ldrb	r3, [r3, #16]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d020      	beq.n	8002720 <vCarriage_GoTo+0xf8>
		{

			if (WelderUnit.Position <= WelderUnit.GoTo && !(WelderUnit.State & 0x01)) // Если позиция не достигнута и каретка находится не в движении, то начать перемещение
 80026de:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 80026e0:	889a      	ldrh	r2, [r3, #4]
 80026e2:	4b41      	ldr	r3, [pc, #260]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 80026e4:	891b      	ldrh	r3, [r3, #8]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d81a      	bhi.n	8002720 <vCarriage_GoTo+0xf8>
 80026ea:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 80026ec:	7c1b      	ldrb	r3, [r3, #16]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d114      	bne.n	8002720 <vCarriage_GoTo+0xf8>
			{
				Carriage_Move(WelderUnit.Speed, 1, 1); // Начать перемещение
 80026f6:	4b3c      	ldr	r3, [pc, #240]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 80026f8:	88db      	ldrh	r3, [r3, #6]
 80026fa:	2201      	movs	r2, #1
 80026fc:	2101      	movs	r1, #1
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fbc2 	bl	8000e88 <Carriage_Move>
				WelderUnit.State |= 0x01; // Статус - каретка в движении
 8002704:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002706:	7c1b      	ldrb	r3, [r3, #16]
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002710:	741a      	strb	r2, [r3, #16]
				WelderUnit.State &= ~0x04; // Статус картека движется на встречу концевику
 8002712:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002714:	7c1b      	ldrb	r3, [r3, #16]
 8002716:	f023 0304 	bic.w	r3, r3, #4
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 800271e:	741a      	strb	r2, [r3, #16]
			}
		}

		if (dX < 0 && (WelderUnit.State & WELDER_MOVE_ENABLE)) // Если нужно двигать от концевика
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	da26      	bge.n	8002774 <vCarriage_GoTo+0x14c>
 8002726:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002728:	7c1b      	ldrb	r3, [r3, #16]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d020      	beq.n	8002774 <vCarriage_GoTo+0x14c>
		{
			if (WelderUnit.Position >= WelderUnit.GoTo && !(WelderUnit.State & 0x01)) // Если позиция не достигнута и каретка находится не в движении, то начать перемещение
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002734:	889a      	ldrh	r2, [r3, #4]
 8002736:	4b2c      	ldr	r3, [pc, #176]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002738:	891b      	ldrh	r3, [r3, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	d31a      	bcc.n	8002774 <vCarriage_GoTo+0x14c>
 800273e:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002740:	7c1b      	ldrb	r3, [r3, #16]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d114      	bne.n	8002774 <vCarriage_GoTo+0x14c>
			{
				Carriage_Move(WelderUnit.Speed, 0, 1); // Начать перемещение
 800274a:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 800274c:	88db      	ldrh	r3, [r3, #6]
 800274e:	2201      	movs	r2, #1
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fb98 	bl	8000e88 <Carriage_Move>
				WelderUnit.State |= 0x01; // Статус - каретка в движении
 8002758:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 800275a:	7c1b      	ldrb	r3, [r3, #16]
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002764:	741a      	strb	r2, [r3, #16]
				WelderUnit.State |= 0x04; // Статус картека движется от концевика
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002768:	7c1b      	ldrb	r3, [r3, #16]
 800276a:	f043 0304 	orr.w	r3, r3, #4
 800276e:	b2da      	uxtb	r2, r3
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002772:	741a      	strb	r2, [r3, #16]
			}
		}

		if(!(WelderUnit.State & WELDER_MOVE_ENABLE))
 8002774:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002776:	7c1b      	ldrb	r3, [r3, #16]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <vCarriage_GoTo+0x170>
		{
			Carriage_Move(0, 1, 1); // стоп
 8002780:	2201      	movs	r2, #1
 8002782:	2101      	movs	r1, #1
 8002784:	2000      	movs	r0, #0
 8002786:	f7fe fb7f 	bl	8000e88 <Carriage_Move>
			WelderUnit.State &= ~0x01;
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 800278c:	7c1b      	ldrb	r3, [r3, #16]
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 8002796:	741a      	strb	r2, [r3, #16]
		}

		if (xSemaphoreTake(xSemaphore_StepCount, (500 / portTICK_RATE_MS)) == pdTRUE) // Если через 100 мС семафор так и не получен, то считать что двигатель осановлен
 8002798:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <vCarriage_GoTo+0x1cc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027a0:	4618      	mov	r0, r3
 80027a2:	f004 ff45 	bl	8007630 <xQueueSemaphoreTake>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	f47f af41 	bne.w	8002630 <vCarriage_GoTo+0x8>
		//xSemaphoreTake(xSemaphore_StepCount, portMAX_DELAY );
		{
			if (!(WelderUnit.State & 0x04)) // Если каретка движется на встречу концевику, то инкрментирование Steps на каждый шаг ШД
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 80027b0:	7c1b      	ldrb	r3, [r3, #16]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d105      	bne.n	80027c6 <vCarriage_GoTo+0x19e>
				{
					WelderUnit.Steps++;
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 80027bc:	89db      	ldrh	r3, [r3, #14]
 80027be:	3301      	adds	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 80027c4:	81da      	strh	r2, [r3, #14]
				}

				if (WelderUnit.State & 0x04) // Если каретка движется от концевика, то декрементирование Steps на каждый шаг ШД
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 80027c8:	7c1b      	ldrb	r3, [r3, #16]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f43f af2e 	beq.w	8002630 <vCarriage_GoTo+0x8>
				{
						WelderUnit.Steps--;
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 80027d6:	89db      	ldrh	r3, [r3, #14]
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b02      	ldr	r3, [pc, #8]	; (80027e8 <vCarriage_GoTo+0x1c0>)
 80027de:	81da      	strh	r2, [r3, #14]
		xQueuePeek(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 80027e0:	e726      	b.n	8002630 <vCarriage_GoTo+0x8>
 80027e2:	bf00      	nop
 80027e4:	20003d94 	.word	0x20003d94
 80027e8:	2000353c 	.word	0x2000353c
 80027ec:	40890000 	.word	0x40890000
 80027f0:	20003d80 	.word	0x20003d80
 80027f4:	20003560 	.word	0x20003560

080027f8 <vKeyScan>:
	}
	vTaskDelete(NULL);
}

void vKeyScan(void *pvParameters)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]


	uint8_t nKeyPressed; // Передача команды о том какая кнопка или комбинация кнопок нажаты
	//portBASE_TYPE xStatus;

	vTaskDelay(100 / portTICK_RATE_MS);
 8002800:	2064      	movs	r0, #100	; 0x64
 8002802:	f005 fb61 	bl	8007ec8 <vTaskDelay>

	for(;;)
	{
		PCB_KeyScan();
 8002806:	f7fe fb87 	bl	8000f18 <PCB_KeyScan>
		PCB_OutputControl();
 800280a:	f7fe fbef 	bl	8000fec <PCB_OutputControl>
		//PCB_InputsScan();

		if (WelderUnit.IndicatorPanel.KeyState[0] == 128) // ВЛЕВО: [0], "-" - 128, "+" - 64, , STLED №5;
 800280e:	4ba9      	ldr	r3, [pc, #676]	; (8002ab4 <vKeyScan+0x2bc>)
 8002810:	7f5b      	ldrb	r3, [r3, #29]
 8002812:	2b80      	cmp	r3, #128	; 0x80
 8002814:	d12f      	bne.n	8002876 <vKeyScan+0x7e>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xs_ShortPress_L > CNT_KEY_SHORT && Key.Xs_ShortPress_L != CNT_KEY_SHORT + 2)
 8002816:	4ba8      	ldr	r3, [pc, #672]	; (8002ab8 <vKeyScan+0x2c0>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b04      	cmp	r3, #4
 800281c:	d906      	bls.n	800282c <vKeyScan+0x34>
 800281e:	4ba6      	ldr	r3, [pc, #664]	; (8002ab8 <vKeyScan+0x2c0>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b06      	cmp	r3, #6
 8002824:	d002      	beq.n	800282c <vKeyScan+0x34>
			{
//				nKeyPressed = press_short_Xs_L;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Xs_ShortPress_L = CNT_KEY_SHORT + 3; // Для ожидания отпускания клавиши
 8002826:	4ba4      	ldr	r3, [pc, #656]	; (8002ab8 <vKeyScan+0x2c0>)
 8002828:	2207      	movs	r2, #7
 800282a:	701a      	strb	r2, [r3, #0]
			}

			if (Key.Xs_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 800282c:	4ba2      	ldr	r3, [pc, #648]	; (8002ab8 <vKeyScan+0x2c0>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b06      	cmp	r3, #6
 8002832:	d005      	beq.n	8002840 <vKeyScan+0x48>
			{
				Key.Xs_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002834:	4ba0      	ldr	r3, [pc, #640]	; (8002ab8 <vKeyScan+0x2c0>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b9e      	ldr	r3, [pc, #632]	; (8002ab8 <vKeyScan+0x2c0>)
 800283e:	701a      	strb	r2, [r3, #0]
			}


			Key.Xs_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002840:	4b9d      	ldr	r3, [pc, #628]	; (8002ab8 <vKeyScan+0x2c0>)
 8002842:	789b      	ldrb	r3, [r3, #2]
 8002844:	3301      	adds	r3, #1
 8002846:	b2da      	uxtb	r2, r3
 8002848:	4b9b      	ldr	r3, [pc, #620]	; (8002ab8 <vKeyScan+0x2c0>)
 800284a:	709a      	strb	r2, [r3, #2]
			if (Key.Xs_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 800284c:	4b9a      	ldr	r3, [pc, #616]	; (8002ab8 <vKeyScan+0x2c0>)
 800284e:	789b      	ldrb	r3, [r3, #2]
 8002850:	2b32      	cmp	r3, #50	; 0x32
 8002852:	d924      	bls.n	800289e <vKeyScan+0xa6>
			{
				nKeyPressed = press_long_Xs_L;
 8002854:	2302      	movs	r3, #2
 8002856:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002858:	4b98      	ldr	r3, [pc, #608]	; (8002abc <vKeyScan+0x2c4>)
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	f107 010f 	add.w	r1, r7, #15
 8002860:	2300      	movs	r3, #0
 8002862:	2200      	movs	r2, #0
 8002864:	f004 fcea 	bl	800723c <xQueueGenericSend>


				Key.Xs_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002868:	4b93      	ldr	r3, [pc, #588]	; (8002ab8 <vKeyScan+0x2c0>)
 800286a:	2206      	movs	r2, #6
 800286c:	701a      	strb	r2, [r3, #0]
				Key.Xs_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 800286e:	4b92      	ldr	r3, [pc, #584]	; (8002ab8 <vKeyScan+0x2c0>)
 8002870:	2225      	movs	r2, #37	; 0x25
 8002872:	709a      	strb	r2, [r3, #2]
 8002874:	e013      	b.n	800289e <vKeyScan+0xa6>
		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{


			if (Key.Xs_ShortPress_L >= CNT_KEY_SHORT + 3)
 8002876:	4b90      	ldr	r3, [pc, #576]	; (8002ab8 <vKeyScan+0x2c0>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b06      	cmp	r3, #6
 800287c:	d909      	bls.n	8002892 <vKeyScan+0x9a>
			{
				nKeyPressed = press_short_Xs_L;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002882:	4b8e      	ldr	r3, [pc, #568]	; (8002abc <vKeyScan+0x2c4>)
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	f107 010f 	add.w	r1, r7, #15
 800288a:	2300      	movs	r3, #0
 800288c:	2200      	movs	r2, #0
 800288e:	f004 fcd5 	bl	800723c <xQueueGenericSend>
			}

			Key.Xs_ShortPress_L = 0;
 8002892:	4b89      	ldr	r3, [pc, #548]	; (8002ab8 <vKeyScan+0x2c0>)
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
			Key.Xs_LongPress_L = 0;
 8002898:	4b87      	ldr	r3, [pc, #540]	; (8002ab8 <vKeyScan+0x2c0>)
 800289a:	2200      	movs	r2, #0
 800289c:	709a      	strb	r2, [r3, #2]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 64) // Если есть факт нажатия кнопки
 800289e:	4b85      	ldr	r3, [pc, #532]	; (8002ab4 <vKeyScan+0x2bc>)
 80028a0:	7f5b      	ldrb	r3, [r3, #29]
 80028a2:	2b40      	cmp	r3, #64	; 0x40
 80028a4:	d139      	bne.n	800291a <vKeyScan+0x122>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xs_ShortPress_R > CNT_KEY_SHORT && Key.Xs_ShortPress_R != CNT_KEY_SHORT + 2)
 80028a6:	4b84      	ldr	r3, [pc, #528]	; (8002ab8 <vKeyScan+0x2c0>)
 80028a8:	785b      	ldrb	r3, [r3, #1]
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d910      	bls.n	80028d0 <vKeyScan+0xd8>
 80028ae:	4b82      	ldr	r3, [pc, #520]	; (8002ab8 <vKeyScan+0x2c0>)
 80028b0:	785b      	ldrb	r3, [r3, #1]
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d00c      	beq.n	80028d0 <vKeyScan+0xd8>
			{

				nKeyPressed = press_short_Xs_R;
 80028b6:	2303      	movs	r3, #3
 80028b8:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80028ba:	4b80      	ldr	r3, [pc, #512]	; (8002abc <vKeyScan+0x2c4>)
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	f107 010f 	add.w	r1, r7, #15
 80028c2:	2300      	movs	r3, #0
 80028c4:	2200      	movs	r2, #0
 80028c6:	f004 fcb9 	bl	800723c <xQueueGenericSend>

				Key.Xs_ShortPress_R = 0; // Сброс счетика выдержки
 80028ca:	4b7b      	ldr	r3, [pc, #492]	; (8002ab8 <vKeyScan+0x2c0>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	705a      	strb	r2, [r3, #1]
			}

			if (Key.Xs_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80028d0:	4b79      	ldr	r3, [pc, #484]	; (8002ab8 <vKeyScan+0x2c0>)
 80028d2:	785b      	ldrb	r3, [r3, #1]
 80028d4:	2b06      	cmp	r3, #6
 80028d6:	d005      	beq.n	80028e4 <vKeyScan+0xec>
			{
				Key.Xs_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 80028d8:	4b77      	ldr	r3, [pc, #476]	; (8002ab8 <vKeyScan+0x2c0>)
 80028da:	785b      	ldrb	r3, [r3, #1]
 80028dc:	3301      	adds	r3, #1
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	4b75      	ldr	r3, [pc, #468]	; (8002ab8 <vKeyScan+0x2c0>)
 80028e2:	705a      	strb	r2, [r3, #1]
			}


			Key.Xs_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 80028e4:	4b74      	ldr	r3, [pc, #464]	; (8002ab8 <vKeyScan+0x2c0>)
 80028e6:	78db      	ldrb	r3, [r3, #3]
 80028e8:	3301      	adds	r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	4b72      	ldr	r3, [pc, #456]	; (8002ab8 <vKeyScan+0x2c0>)
 80028ee:	70da      	strb	r2, [r3, #3]
			if (Key.Xs_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80028f0:	4b71      	ldr	r3, [pc, #452]	; (8002ab8 <vKeyScan+0x2c0>)
 80028f2:	78db      	ldrb	r3, [r3, #3]
 80028f4:	2b32      	cmp	r3, #50	; 0x32
 80028f6:	d916      	bls.n	8002926 <vKeyScan+0x12e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xs_R;
 80028f8:	2304      	movs	r3, #4
 80028fa:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80028fc:	4b6f      	ldr	r3, [pc, #444]	; (8002abc <vKeyScan+0x2c4>)
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	f107 010f 	add.w	r1, r7, #15
 8002904:	2300      	movs	r3, #0
 8002906:	2200      	movs	r2, #0
 8002908:	f004 fc98 	bl	800723c <xQueueGenericSend>

				Key.Xs_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800290c:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <vKeyScan+0x2c0>)
 800290e:	2206      	movs	r2, #6
 8002910:	705a      	strb	r2, [r3, #1]
				Key.Xs_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002912:	4b69      	ldr	r3, [pc, #420]	; (8002ab8 <vKeyScan+0x2c0>)
 8002914:	2225      	movs	r2, #37	; 0x25
 8002916:	70da      	strb	r2, [r3, #3]
 8002918:	e005      	b.n	8002926 <vKeyScan+0x12e>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xs_ShortPress_R = 0;
 800291a:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <vKeyScan+0x2c0>)
 800291c:	2200      	movs	r2, #0
 800291e:	705a      	strb	r2, [r3, #1]
			Key.Xs_LongPress_R = 0;
 8002920:	4b65      	ldr	r3, [pc, #404]	; (8002ab8 <vKeyScan+0x2c0>)
 8002922:	2200      	movs	r2, #0
 8002924:	70da      	strb	r2, [r3, #3]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 16) // ВПРАВО: [0], "-" - 16, "+" - 32, , STLED №5;
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <vKeyScan+0x2bc>)
 8002928:	7f5b      	ldrb	r3, [r3, #29]
 800292a:	2b10      	cmp	r3, #16
 800292c:	d139      	bne.n	80029a2 <vKeyScan+0x1aa>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xf_ShortPress_L > CNT_KEY_SHORT && Key.Xf_ShortPress_L != CNT_KEY_SHORT + 2)
 800292e:	4b62      	ldr	r3, [pc, #392]	; (8002ab8 <vKeyScan+0x2c0>)
 8002930:	791b      	ldrb	r3, [r3, #4]
 8002932:	2b04      	cmp	r3, #4
 8002934:	d910      	bls.n	8002958 <vKeyScan+0x160>
 8002936:	4b60      	ldr	r3, [pc, #384]	; (8002ab8 <vKeyScan+0x2c0>)
 8002938:	791b      	ldrb	r3, [r3, #4]
 800293a:	2b06      	cmp	r3, #6
 800293c:	d00c      	beq.n	8002958 <vKeyScan+0x160>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Xf_L;
 800293e:	2305      	movs	r3, #5
 8002940:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002942:	4b5e      	ldr	r3, [pc, #376]	; (8002abc <vKeyScan+0x2c4>)
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	f107 010f 	add.w	r1, r7, #15
 800294a:	2300      	movs	r3, #0
 800294c:	2200      	movs	r2, #0
 800294e:	f004 fc75 	bl	800723c <xQueueGenericSend>


				Key.Xf_ShortPress_L = 0; // Сброс счетика выдержки
 8002952:	4b59      	ldr	r3, [pc, #356]	; (8002ab8 <vKeyScan+0x2c0>)
 8002954:	2200      	movs	r2, #0
 8002956:	711a      	strb	r2, [r3, #4]
			}

			if (Key.Xf_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002958:	4b57      	ldr	r3, [pc, #348]	; (8002ab8 <vKeyScan+0x2c0>)
 800295a:	791b      	ldrb	r3, [r3, #4]
 800295c:	2b06      	cmp	r3, #6
 800295e:	d005      	beq.n	800296c <vKeyScan+0x174>
			{
				Key.Xf_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002960:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <vKeyScan+0x2c0>)
 8002962:	791b      	ldrb	r3, [r3, #4]
 8002964:	3301      	adds	r3, #1
 8002966:	b2da      	uxtb	r2, r3
 8002968:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <vKeyScan+0x2c0>)
 800296a:	711a      	strb	r2, [r3, #4]
			}


			Key.Xf_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 800296c:	4b52      	ldr	r3, [pc, #328]	; (8002ab8 <vKeyScan+0x2c0>)
 800296e:	799b      	ldrb	r3, [r3, #6]
 8002970:	3301      	adds	r3, #1
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <vKeyScan+0x2c0>)
 8002976:	719a      	strb	r2, [r3, #6]
			if (Key.Xf_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002978:	4b4f      	ldr	r3, [pc, #316]	; (8002ab8 <vKeyScan+0x2c0>)
 800297a:	799b      	ldrb	r3, [r3, #6]
 800297c:	2b32      	cmp	r3, #50	; 0x32
 800297e:	d916      	bls.n	80029ae <vKeyScan+0x1b6>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xf_L;
 8002980:	2306      	movs	r3, #6
 8002982:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002984:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <vKeyScan+0x2c4>)
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	f107 010f 	add.w	r1, r7, #15
 800298c:	2300      	movs	r3, #0
 800298e:	2200      	movs	r2, #0
 8002990:	f004 fc54 	bl	800723c <xQueueGenericSend>


				Key.Xf_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002994:	4b48      	ldr	r3, [pc, #288]	; (8002ab8 <vKeyScan+0x2c0>)
 8002996:	2206      	movs	r2, #6
 8002998:	711a      	strb	r2, [r3, #4]
				Key.Xf_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <vKeyScan+0x2c0>)
 800299c:	2225      	movs	r2, #37	; 0x25
 800299e:	719a      	strb	r2, [r3, #6]
 80029a0:	e005      	b.n	80029ae <vKeyScan+0x1b6>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xf_ShortPress_L = 0;
 80029a2:	4b45      	ldr	r3, [pc, #276]	; (8002ab8 <vKeyScan+0x2c0>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	711a      	strb	r2, [r3, #4]
			Key.Xf_LongPress_L = 0;
 80029a8:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <vKeyScan+0x2c0>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	719a      	strb	r2, [r3, #6]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 32)
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <vKeyScan+0x2bc>)
 80029b0:	7f5b      	ldrb	r3, [r3, #29]
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d139      	bne.n	8002a2a <vKeyScan+0x232>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xf_ShortPress_R > CNT_KEY_SHORT && Key.Xf_ShortPress_R != CNT_KEY_SHORT + 2)
 80029b6:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <vKeyScan+0x2c0>)
 80029b8:	795b      	ldrb	r3, [r3, #5]
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d910      	bls.n	80029e0 <vKeyScan+0x1e8>
 80029be:	4b3e      	ldr	r3, [pc, #248]	; (8002ab8 <vKeyScan+0x2c0>)
 80029c0:	795b      	ldrb	r3, [r3, #5]
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d00c      	beq.n	80029e0 <vKeyScan+0x1e8>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Xf_R;
 80029c6:	2307      	movs	r3, #7
 80029c8:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80029ca:	4b3c      	ldr	r3, [pc, #240]	; (8002abc <vKeyScan+0x2c4>)
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	f107 010f 	add.w	r1, r7, #15
 80029d2:	2300      	movs	r3, #0
 80029d4:	2200      	movs	r2, #0
 80029d6:	f004 fc31 	bl	800723c <xQueueGenericSend>


				Key.Xf_ShortPress_R = 0; // Сброс счетика выдержки
 80029da:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <vKeyScan+0x2c0>)
 80029dc:	2200      	movs	r2, #0
 80029de:	715a      	strb	r2, [r3, #5]
			}

			if (Key.Xf_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80029e0:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <vKeyScan+0x2c0>)
 80029e2:	795b      	ldrb	r3, [r3, #5]
 80029e4:	2b06      	cmp	r3, #6
 80029e6:	d005      	beq.n	80029f4 <vKeyScan+0x1fc>
			{
				Key.Xf_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 80029e8:	4b33      	ldr	r3, [pc, #204]	; (8002ab8 <vKeyScan+0x2c0>)
 80029ea:	795b      	ldrb	r3, [r3, #5]
 80029ec:	3301      	adds	r3, #1
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <vKeyScan+0x2c0>)
 80029f2:	715a      	strb	r2, [r3, #5]
			}


			Key.Xf_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 80029f4:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <vKeyScan+0x2c0>)
 80029f6:	79db      	ldrb	r3, [r3, #7]
 80029f8:	3301      	adds	r3, #1
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <vKeyScan+0x2c0>)
 80029fe:	71da      	strb	r2, [r3, #7]
			if (Key.Xf_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002a00:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a02:	79db      	ldrb	r3, [r3, #7]
 8002a04:	2b32      	cmp	r3, #50	; 0x32
 8002a06:	d916      	bls.n	8002a36 <vKeyScan+0x23e>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xf_R;
 8002a08:	2308      	movs	r3, #8
 8002a0a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <vKeyScan+0x2c4>)
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	f107 010f 	add.w	r1, r7, #15
 8002a14:	2300      	movs	r3, #0
 8002a16:	2200      	movs	r2, #0
 8002a18:	f004 fc10 	bl	800723c <xQueueGenericSend>

				Key.Xf_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002a1c:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a1e:	2206      	movs	r2, #6
 8002a20:	715a      	strb	r2, [r3, #5]
				Key.Xf_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002a22:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a24:	2225      	movs	r2, #37	; 0x25
 8002a26:	71da      	strb	r2, [r3, #7]
 8002a28:	e005      	b.n	8002a36 <vKeyScan+0x23e>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xf_ShortPress_R = 0;
 8002a2a:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	715a      	strb	r2, [r3, #5]
			Key.Xf_LongPress_R = 0;
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	71da      	strb	r2, [r3, #7]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 8) //ЗАДЕРЖКА (Delay_s): [0], "-" - 8, "+" - 4, , STLED №5;
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <vKeyScan+0x2bc>)
 8002a38:	7f5b      	ldrb	r3, [r3, #29]
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d140      	bne.n	8002ac0 <vKeyScan+0x2c8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_s_ShortPress_L > CNT_KEY_SHORT && Key.Delay_s_ShortPress_L != CNT_KEY_SHORT + 2)
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a40:	7a1b      	ldrb	r3, [r3, #8]
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d910      	bls.n	8002a68 <vKeyScan+0x270>
 8002a46:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a48:	7a1b      	ldrb	r3, [r3, #8]
 8002a4a:	2b06      	cmp	r3, #6
 8002a4c:	d00c      	beq.n	8002a68 <vKeyScan+0x270>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_s_L;
 8002a4e:	2309      	movs	r3, #9
 8002a50:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <vKeyScan+0x2c4>)
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	f107 010f 	add.w	r1, r7, #15
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f004 fbed 	bl	800723c <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = 0; // Сброс счетика выдержки
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	721a      	strb	r2, [r3, #8]
			}

			if (Key.Delay_s_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a6a:	7a1b      	ldrb	r3, [r3, #8]
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d005      	beq.n	8002a7c <vKeyScan+0x284>
			{
				Key.Delay_s_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a72:	7a1b      	ldrb	r3, [r3, #8]
 8002a74:	3301      	adds	r3, #1
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a7a:	721a      	strb	r2, [r3, #8]
			}


			Key.Delay_s_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a7e:	7a9b      	ldrb	r3, [r3, #10]
 8002a80:	3301      	adds	r3, #1
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a86:	729a      	strb	r2, [r3, #10]
			if (Key.Delay_s_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <vKeyScan+0x2c0>)
 8002a8a:	7a9b      	ldrb	r3, [r3, #10]
 8002a8c:	2b32      	cmp	r3, #50	; 0x32
 8002a8e:	d91d      	bls.n	8002acc <vKeyScan+0x2d4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_s_L;
 8002a90:	230a      	movs	r3, #10
 8002a92:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <vKeyScan+0x2c4>)
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	f107 010f 	add.w	r1, r7, #15
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f004 fbcc 	bl	800723c <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <vKeyScan+0x2c0>)
 8002aa6:	2206      	movs	r2, #6
 8002aa8:	721a      	strb	r2, [r3, #8]
				Key.Delay_s_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002aaa:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <vKeyScan+0x2c0>)
 8002aac:	2225      	movs	r2, #37	; 0x25
 8002aae:	729a      	strb	r2, [r3, #10]
 8002ab0:	e00c      	b.n	8002acc <vKeyScan+0x2d4>
 8002ab2:	bf00      	nop
 8002ab4:	2000353c 	.word	0x2000353c
 8002ab8:	20003da0 	.word	0x20003da0
 8002abc:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_s_ShortPress_L = 0;
 8002ac0:	4ba9      	ldr	r3, [pc, #676]	; (8002d68 <vKeyScan+0x570>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	721a      	strb	r2, [r3, #8]
			Key.Delay_s_LongPress_L = 0;
 8002ac6:	4ba8      	ldr	r3, [pc, #672]	; (8002d68 <vKeyScan+0x570>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	729a      	strb	r2, [r3, #10]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 4)
 8002acc:	4ba7      	ldr	r3, [pc, #668]	; (8002d6c <vKeyScan+0x574>)
 8002ace:	7f5b      	ldrb	r3, [r3, #29]
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d139      	bne.n	8002b48 <vKeyScan+0x350>
			{
				// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
				if (Key.Delay_s_ShortPress_R > CNT_KEY_SHORT && Key.Delay_s_ShortPress_R != CNT_KEY_SHORT + 2)
 8002ad4:	4ba4      	ldr	r3, [pc, #656]	; (8002d68 <vKeyScan+0x570>)
 8002ad6:	7a5b      	ldrb	r3, [r3, #9]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d910      	bls.n	8002afe <vKeyScan+0x306>
 8002adc:	4ba2      	ldr	r3, [pc, #648]	; (8002d68 <vKeyScan+0x570>)
 8002ade:	7a5b      	ldrb	r3, [r3, #9]
 8002ae0:	2b06      	cmp	r3, #6
 8002ae2:	d00c      	beq.n	8002afe <vKeyScan+0x306>
				{
					// Дейсвие при нажатии на клавишу
					nKeyPressed = press_short_Delay_s_R;
 8002ae4:	230b      	movs	r3, #11
 8002ae6:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002ae8:	4ba1      	ldr	r3, [pc, #644]	; (8002d70 <vKeyScan+0x578>)
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	f107 010f 	add.w	r1, r7, #15
 8002af0:	2300      	movs	r3, #0
 8002af2:	2200      	movs	r2, #0
 8002af4:	f004 fba2 	bl	800723c <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = 0; // Сброс счетика выдержки
 8002af8:	4b9b      	ldr	r3, [pc, #620]	; (8002d68 <vKeyScan+0x570>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	725a      	strb	r2, [r3, #9]
				}

				if (Key.Delay_s_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002afe:	4b9a      	ldr	r3, [pc, #616]	; (8002d68 <vKeyScan+0x570>)
 8002b00:	7a5b      	ldrb	r3, [r3, #9]
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d005      	beq.n	8002b12 <vKeyScan+0x31a>
				{
					Key.Delay_s_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002b06:	4b98      	ldr	r3, [pc, #608]	; (8002d68 <vKeyScan+0x570>)
 8002b08:	7a5b      	ldrb	r3, [r3, #9]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4b96      	ldr	r3, [pc, #600]	; (8002d68 <vKeyScan+0x570>)
 8002b10:	725a      	strb	r2, [r3, #9]
				}


				Key.Delay_s_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002b12:	4b95      	ldr	r3, [pc, #596]	; (8002d68 <vKeyScan+0x570>)
 8002b14:	7adb      	ldrb	r3, [r3, #11]
 8002b16:	3301      	adds	r3, #1
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4b93      	ldr	r3, [pc, #588]	; (8002d68 <vKeyScan+0x570>)
 8002b1c:	72da      	strb	r2, [r3, #11]
				if (Key.Delay_s_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002b1e:	4b92      	ldr	r3, [pc, #584]	; (8002d68 <vKeyScan+0x570>)
 8002b20:	7adb      	ldrb	r3, [r3, #11]
 8002b22:	2b32      	cmp	r3, #50	; 0x32
 8002b24:	d916      	bls.n	8002b54 <vKeyScan+0x35c>
				{
					// Дейсвие при нажатии на клавишу
					nKeyPressed = press_long_Delay_s_R;
 8002b26:	230c      	movs	r3, #12
 8002b28:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002b2a:	4b91      	ldr	r3, [pc, #580]	; (8002d70 <vKeyScan+0x578>)
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	f107 010f 	add.w	r1, r7, #15
 8002b32:	2300      	movs	r3, #0
 8002b34:	2200      	movs	r2, #0
 8002b36:	f004 fb81 	bl	800723c <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002b3a:	4b8b      	ldr	r3, [pc, #556]	; (8002d68 <vKeyScan+0x570>)
 8002b3c:	2206      	movs	r2, #6
 8002b3e:	725a      	strb	r2, [r3, #9]
					Key.Delay_s_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002b40:	4b89      	ldr	r3, [pc, #548]	; (8002d68 <vKeyScan+0x570>)
 8002b42:	2225      	movs	r2, #37	; 0x25
 8002b44:	72da      	strb	r2, [r3, #11]
 8002b46:	e005      	b.n	8002b54 <vKeyScan+0x35c>


			}
			else // Если кнопка была отпущена то сбросить все счетчики выдержки
			{
				Key.Delay_s_ShortPress_R = 0;
 8002b48:	4b87      	ldr	r3, [pc, #540]	; (8002d68 <vKeyScan+0x570>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	725a      	strb	r2, [r3, #9]
				Key.Delay_s_LongPress_R = 0;
 8002b4e:	4b86      	ldr	r3, [pc, #536]	; (8002d68 <vKeyScan+0x570>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	72da      	strb	r2, [r3, #11]
			}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 2) // СКОРОСТЬ: [0], "-" - 2, "+" - 1, , STLED №5;
 8002b54:	4b85      	ldr	r3, [pc, #532]	; (8002d6c <vKeyScan+0x574>)
 8002b56:	7f5b      	ldrb	r3, [r3, #29]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d139      	bne.n	8002bd0 <vKeyScan+0x3d8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Speed_ShortPress_L > CNT_KEY_SHORT && Key.Speed_ShortPress_L != CNT_KEY_SHORT + 2)
 8002b5c:	4b82      	ldr	r3, [pc, #520]	; (8002d68 <vKeyScan+0x570>)
 8002b5e:	7b1b      	ldrb	r3, [r3, #12]
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d910      	bls.n	8002b86 <vKeyScan+0x38e>
 8002b64:	4b80      	ldr	r3, [pc, #512]	; (8002d68 <vKeyScan+0x570>)
 8002b66:	7b1b      	ldrb	r3, [r3, #12]
 8002b68:	2b06      	cmp	r3, #6
 8002b6a:	d00c      	beq.n	8002b86 <vKeyScan+0x38e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Speed_L;
 8002b6c:	230d      	movs	r3, #13
 8002b6e:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002b70:	4b7f      	ldr	r3, [pc, #508]	; (8002d70 <vKeyScan+0x578>)
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	f107 010f 	add.w	r1, r7, #15
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f004 fb5e 	bl	800723c <xQueueGenericSend>

				Key.Speed_ShortPress_L = 0; // Сброс счетика выдержки
 8002b80:	4b79      	ldr	r3, [pc, #484]	; (8002d68 <vKeyScan+0x570>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	731a      	strb	r2, [r3, #12]
			}

			if (Key.Speed_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002b86:	4b78      	ldr	r3, [pc, #480]	; (8002d68 <vKeyScan+0x570>)
 8002b88:	7b1b      	ldrb	r3, [r3, #12]
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d005      	beq.n	8002b9a <vKeyScan+0x3a2>
			{
				Key.Speed_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002b8e:	4b76      	ldr	r3, [pc, #472]	; (8002d68 <vKeyScan+0x570>)
 8002b90:	7b1b      	ldrb	r3, [r3, #12]
 8002b92:	3301      	adds	r3, #1
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4b74      	ldr	r3, [pc, #464]	; (8002d68 <vKeyScan+0x570>)
 8002b98:	731a      	strb	r2, [r3, #12]
			}


			Key.Speed_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002b9a:	4b73      	ldr	r3, [pc, #460]	; (8002d68 <vKeyScan+0x570>)
 8002b9c:	7b9b      	ldrb	r3, [r3, #14]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b71      	ldr	r3, [pc, #452]	; (8002d68 <vKeyScan+0x570>)
 8002ba4:	739a      	strb	r2, [r3, #14]
			if (Key.Speed_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002ba6:	4b70      	ldr	r3, [pc, #448]	; (8002d68 <vKeyScan+0x570>)
 8002ba8:	7b9b      	ldrb	r3, [r3, #14]
 8002baa:	2b32      	cmp	r3, #50	; 0x32
 8002bac:	d916      	bls.n	8002bdc <vKeyScan+0x3e4>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Speed_L;
 8002bae:	230e      	movs	r3, #14
 8002bb0:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002bb2:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <vKeyScan+0x578>)
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	f107 010f 	add.w	r1, r7, #15
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f004 fb3d 	bl	800723c <xQueueGenericSend>

				Key.Speed_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002bc2:	4b69      	ldr	r3, [pc, #420]	; (8002d68 <vKeyScan+0x570>)
 8002bc4:	2206      	movs	r2, #6
 8002bc6:	731a      	strb	r2, [r3, #12]
				Key.Speed_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002bc8:	4b67      	ldr	r3, [pc, #412]	; (8002d68 <vKeyScan+0x570>)
 8002bca:	2225      	movs	r2, #37	; 0x25
 8002bcc:	739a      	strb	r2, [r3, #14]
 8002bce:	e005      	b.n	8002bdc <vKeyScan+0x3e4>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Speed_ShortPress_L = 0;
 8002bd0:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <vKeyScan+0x570>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	731a      	strb	r2, [r3, #12]
			Key.Speed_LongPress_L = 0;
 8002bd6:	4b64      	ldr	r3, [pc, #400]	; (8002d68 <vKeyScan+0x570>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	739a      	strb	r2, [r3, #14]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 1)
 8002bdc:	4b63      	ldr	r3, [pc, #396]	; (8002d6c <vKeyScan+0x574>)
 8002bde:	7f5b      	ldrb	r3, [r3, #29]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d139      	bne.n	8002c58 <vKeyScan+0x460>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Speed_ShortPress_R > CNT_KEY_SHORT && Key.Speed_ShortPress_R != CNT_KEY_SHORT + 2)
 8002be4:	4b60      	ldr	r3, [pc, #384]	; (8002d68 <vKeyScan+0x570>)
 8002be6:	7b5b      	ldrb	r3, [r3, #13]
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d910      	bls.n	8002c0e <vKeyScan+0x416>
 8002bec:	4b5e      	ldr	r3, [pc, #376]	; (8002d68 <vKeyScan+0x570>)
 8002bee:	7b5b      	ldrb	r3, [r3, #13]
 8002bf0:	2b06      	cmp	r3, #6
 8002bf2:	d00c      	beq.n	8002c0e <vKeyScan+0x416>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Speed_R;
 8002bf4:	230f      	movs	r3, #15
 8002bf6:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002bf8:	4b5d      	ldr	r3, [pc, #372]	; (8002d70 <vKeyScan+0x578>)
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	f107 010f 	add.w	r1, r7, #15
 8002c00:	2300      	movs	r3, #0
 8002c02:	2200      	movs	r2, #0
 8002c04:	f004 fb1a 	bl	800723c <xQueueGenericSend>

				Key.Speed_ShortPress_R = 0; // Сброс счетика выдержки
 8002c08:	4b57      	ldr	r3, [pc, #348]	; (8002d68 <vKeyScan+0x570>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	735a      	strb	r2, [r3, #13]
			}

			if (Key.Speed_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002c0e:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <vKeyScan+0x570>)
 8002c10:	7b5b      	ldrb	r3, [r3, #13]
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d005      	beq.n	8002c22 <vKeyScan+0x42a>
			{
				Key.Speed_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002c16:	4b54      	ldr	r3, [pc, #336]	; (8002d68 <vKeyScan+0x570>)
 8002c18:	7b5b      	ldrb	r3, [r3, #13]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b52      	ldr	r3, [pc, #328]	; (8002d68 <vKeyScan+0x570>)
 8002c20:	735a      	strb	r2, [r3, #13]
			}


			Key.Speed_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002c22:	4b51      	ldr	r3, [pc, #324]	; (8002d68 <vKeyScan+0x570>)
 8002c24:	7bdb      	ldrb	r3, [r3, #15]
 8002c26:	3301      	adds	r3, #1
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4b4f      	ldr	r3, [pc, #316]	; (8002d68 <vKeyScan+0x570>)
 8002c2c:	73da      	strb	r2, [r3, #15]
			if (Key.Speed_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002c2e:	4b4e      	ldr	r3, [pc, #312]	; (8002d68 <vKeyScan+0x570>)
 8002c30:	7bdb      	ldrb	r3, [r3, #15]
 8002c32:	2b32      	cmp	r3, #50	; 0x32
 8002c34:	d916      	bls.n	8002c64 <vKeyScan+0x46c>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Speed_R;
 8002c36:	2310      	movs	r3, #16
 8002c38:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002c3a:	4b4d      	ldr	r3, [pc, #308]	; (8002d70 <vKeyScan+0x578>)
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	f107 010f 	add.w	r1, r7, #15
 8002c42:	2300      	movs	r3, #0
 8002c44:	2200      	movs	r2, #0
 8002c46:	f004 faf9 	bl	800723c <xQueueGenericSend>

				Key.Speed_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <vKeyScan+0x570>)
 8002c4c:	2206      	movs	r2, #6
 8002c4e:	735a      	strb	r2, [r3, #13]
				Key.Speed_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002c50:	4b45      	ldr	r3, [pc, #276]	; (8002d68 <vKeyScan+0x570>)
 8002c52:	2225      	movs	r2, #37	; 0x25
 8002c54:	73da      	strb	r2, [r3, #15]
 8002c56:	e005      	b.n	8002c64 <vKeyScan+0x46c>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Speed_ShortPress_R = 0;
 8002c58:	4b43      	ldr	r3, [pc, #268]	; (8002d68 <vKeyScan+0x570>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	735a      	strb	r2, [r3, #13]
			Key.Speed_LongPress_R = 0;
 8002c5e:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <vKeyScan+0x570>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	73da      	strb	r2, [r3, #15]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 1) // ЗАДЕРЖКА (Delay_f): [1], "-" - 1, "+" - 4, , STLED №5;
 8002c64:	4b41      	ldr	r3, [pc, #260]	; (8002d6c <vKeyScan+0x574>)
 8002c66:	7f9b      	ldrb	r3, [r3, #30]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d139      	bne.n	8002ce0 <vKeyScan+0x4e8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_f_ShortPress_L > CNT_KEY_SHORT && Key.Delay_f_ShortPress_L != CNT_KEY_SHORT + 2)
 8002c6c:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <vKeyScan+0x570>)
 8002c6e:	7c1b      	ldrb	r3, [r3, #16]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d910      	bls.n	8002c96 <vKeyScan+0x49e>
 8002c74:	4b3c      	ldr	r3, [pc, #240]	; (8002d68 <vKeyScan+0x570>)
 8002c76:	7c1b      	ldrb	r3, [r3, #16]
 8002c78:	2b06      	cmp	r3, #6
 8002c7a:	d00c      	beq.n	8002c96 <vKeyScan+0x49e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_f_L;
 8002c7c:	2311      	movs	r3, #17
 8002c7e:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002c80:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <vKeyScan+0x578>)
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	f107 010f 	add.w	r1, r7, #15
 8002c88:	2300      	movs	r3, #0
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f004 fad6 	bl	800723c <xQueueGenericSend>

				Key.Delay_f_ShortPress_L = 0; // Сброс счетика выдержки
 8002c90:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <vKeyScan+0x570>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	741a      	strb	r2, [r3, #16]
			}

			if (Key.Delay_f_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002c96:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <vKeyScan+0x570>)
 8002c98:	7c1b      	ldrb	r3, [r3, #16]
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d005      	beq.n	8002caa <vKeyScan+0x4b2>
			{
				Key.Delay_f_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <vKeyScan+0x570>)
 8002ca0:	7c1b      	ldrb	r3, [r3, #16]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <vKeyScan+0x570>)
 8002ca8:	741a      	strb	r2, [r3, #16]
			}


			Key.Delay_f_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002caa:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <vKeyScan+0x570>)
 8002cac:	7c9b      	ldrb	r3, [r3, #18]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <vKeyScan+0x570>)
 8002cb4:	749a      	strb	r2, [r3, #18]
			if (Key.Delay_f_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <vKeyScan+0x570>)
 8002cb8:	7c9b      	ldrb	r3, [r3, #18]
 8002cba:	2b32      	cmp	r3, #50	; 0x32
 8002cbc:	d916      	bls.n	8002cec <vKeyScan+0x4f4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_f_L;
 8002cbe:	2312      	movs	r3, #18
 8002cc0:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002cc2:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <vKeyScan+0x578>)
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	f107 010f 	add.w	r1, r7, #15
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f004 fab5 	bl	800723c <xQueueGenericSend>


				Key.Delay_f_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002cd2:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <vKeyScan+0x570>)
 8002cd4:	2206      	movs	r2, #6
 8002cd6:	741a      	strb	r2, [r3, #16]
				Key.Delay_f_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002cd8:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <vKeyScan+0x570>)
 8002cda:	2225      	movs	r2, #37	; 0x25
 8002cdc:	749a      	strb	r2, [r3, #18]
 8002cde:	e005      	b.n	8002cec <vKeyScan+0x4f4>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_f_ShortPress_L = 0;
 8002ce0:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <vKeyScan+0x570>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	741a      	strb	r2, [r3, #16]
			Key.Delay_f_LongPress_L = 0;
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <vKeyScan+0x570>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	749a      	strb	r2, [r3, #18]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 4)
 8002cec:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <vKeyScan+0x574>)
 8002cee:	7f9b      	ldrb	r3, [r3, #30]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d13f      	bne.n	8002d74 <vKeyScan+0x57c>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_f_ShortPress_R > CNT_KEY_SHORT && Key.Delay_f_ShortPress_R != CNT_KEY_SHORT + 2)
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <vKeyScan+0x570>)
 8002cf6:	7c5b      	ldrb	r3, [r3, #17]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d910      	bls.n	8002d1e <vKeyScan+0x526>
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <vKeyScan+0x570>)
 8002cfe:	7c5b      	ldrb	r3, [r3, #17]
 8002d00:	2b06      	cmp	r3, #6
 8002d02:	d00c      	beq.n	8002d1e <vKeyScan+0x526>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_f_R;
 8002d04:	2313      	movs	r3, #19
 8002d06:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <vKeyScan+0x578>)
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	f107 010f 	add.w	r1, r7, #15
 8002d10:	2300      	movs	r3, #0
 8002d12:	2200      	movs	r2, #0
 8002d14:	f004 fa92 	bl	800723c <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = 0; // Сброс счетика выдержки
 8002d18:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <vKeyScan+0x570>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	745a      	strb	r2, [r3, #17]
			}

			if (Key.Delay_f_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <vKeyScan+0x570>)
 8002d20:	7c5b      	ldrb	r3, [r3, #17]
 8002d22:	2b06      	cmp	r3, #6
 8002d24:	d005      	beq.n	8002d32 <vKeyScan+0x53a>
			{
				Key.Delay_f_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <vKeyScan+0x570>)
 8002d28:	7c5b      	ldrb	r3, [r3, #17]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <vKeyScan+0x570>)
 8002d30:	745a      	strb	r2, [r3, #17]
			}


			Key.Delay_f_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <vKeyScan+0x570>)
 8002d34:	7cdb      	ldrb	r3, [r3, #19]
 8002d36:	3301      	adds	r3, #1
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <vKeyScan+0x570>)
 8002d3c:	74da      	strb	r2, [r3, #19]
			if (Key.Delay_f_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <vKeyScan+0x570>)
 8002d40:	7cdb      	ldrb	r3, [r3, #19]
 8002d42:	2b32      	cmp	r3, #50	; 0x32
 8002d44:	d91c      	bls.n	8002d80 <vKeyScan+0x588>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_f_R;
 8002d46:	2314      	movs	r3, #20
 8002d48:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <vKeyScan+0x578>)
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	f107 010f 	add.w	r1, r7, #15
 8002d52:	2300      	movs	r3, #0
 8002d54:	2200      	movs	r2, #0
 8002d56:	f004 fa71 	bl	800723c <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002d5a:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <vKeyScan+0x570>)
 8002d5c:	2206      	movs	r2, #6
 8002d5e:	745a      	strb	r2, [r3, #17]
				Key.Delay_f_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002d60:	4b01      	ldr	r3, [pc, #4]	; (8002d68 <vKeyScan+0x570>)
 8002d62:	2225      	movs	r2, #37	; 0x25
 8002d64:	74da      	strb	r2, [r3, #19]
 8002d66:	e00b      	b.n	8002d80 <vKeyScan+0x588>
 8002d68:	20003da0 	.word	0x20003da0
 8002d6c:	2000353c 	.word	0x2000353c
 8002d70:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_f_ShortPress_R = 0;
 8002d74:	4b90      	ldr	r3, [pc, #576]	; (8002fb8 <vKeyScan+0x7c0>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	745a      	strb	r2, [r3, #17]
			Key.Delay_f_LongPress_R = 0;
 8002d7a:	4b8f      	ldr	r3, [pc, #572]	; (8002fb8 <vKeyScan+0x7c0>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	74da      	strb	r2, [r3, #19]
		}

		if (WelderUnit.IndicatorPanel.KeyState[3] == 1 && !(WelderUnit.IndicatorPanel.KeyState[1] == 2)) // ВЛЕВО: [0], "-" - 128, "+" - 64, , STLED №5; ПРОГРАММА: [1], "-" - ..., "+" - 2, , STLED №5;
 8002d80:	4b8e      	ldr	r3, [pc, #568]	; (8002fbc <vKeyScan+0x7c4>)
 8002d82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d133      	bne.n	8002df2 <vKeyScan+0x5fa>
 8002d8a:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <vKeyScan+0x7c4>)
 8002d8c:	7f9b      	ldrb	r3, [r3, #30]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d02f      	beq.n	8002df2 <vKeyScan+0x5fa>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_L > CNT_KEY_SHORT && Key.Program_ShortPress_L != CNT_KEY_SHORT + 2)
 8002d92:	4b89      	ldr	r3, [pc, #548]	; (8002fb8 <vKeyScan+0x7c0>)
 8002d94:	7d1b      	ldrb	r3, [r3, #20]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d906      	bls.n	8002da8 <vKeyScan+0x5b0>
 8002d9a:	4b87      	ldr	r3, [pc, #540]	; (8002fb8 <vKeyScan+0x7c0>)
 8002d9c:	7d1b      	ldrb	r3, [r3, #20]
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d002      	beq.n	8002da8 <vKeyScan+0x5b0>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_Program_L;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_L = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 8002da2:	4b85      	ldr	r3, [pc, #532]	; (8002fb8 <vKeyScan+0x7c0>)
 8002da4:	2207      	movs	r2, #7
 8002da6:	751a      	strb	r2, [r3, #20]
			}

			if (Key.Program_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002da8:	4b83      	ldr	r3, [pc, #524]	; (8002fb8 <vKeyScan+0x7c0>)
 8002daa:	7d1b      	ldrb	r3, [r3, #20]
 8002dac:	2b06      	cmp	r3, #6
 8002dae:	d005      	beq.n	8002dbc <vKeyScan+0x5c4>
			{
				Key.Program_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002db0:	4b81      	ldr	r3, [pc, #516]	; (8002fb8 <vKeyScan+0x7c0>)
 8002db2:	7d1b      	ldrb	r3, [r3, #20]
 8002db4:	3301      	adds	r3, #1
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	4b7f      	ldr	r3, [pc, #508]	; (8002fb8 <vKeyScan+0x7c0>)
 8002dba:	751a      	strb	r2, [r3, #20]
			}


			Key.Program_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002dbc:	4b7e      	ldr	r3, [pc, #504]	; (8002fb8 <vKeyScan+0x7c0>)
 8002dbe:	7d9b      	ldrb	r3, [r3, #22]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	4b7c      	ldr	r3, [pc, #496]	; (8002fb8 <vKeyScan+0x7c0>)
 8002dc6:	759a      	strb	r2, [r3, #22]
			if (Key.Program_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002dc8:	4b7b      	ldr	r3, [pc, #492]	; (8002fb8 <vKeyScan+0x7c0>)
 8002dca:	7d9b      	ldrb	r3, [r3, #22]
 8002dcc:	2b32      	cmp	r3, #50	; 0x32
 8002dce:	d924      	bls.n	8002e1a <vKeyScan+0x622>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Program_L;
 8002dd0:	2316      	movs	r3, #22
 8002dd2:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002dd4:	4b7a      	ldr	r3, [pc, #488]	; (8002fc0 <vKeyScan+0x7c8>)
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	f107 010f 	add.w	r1, r7, #15
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2200      	movs	r2, #0
 8002de0:	f004 fa2c 	bl	800723c <xQueueGenericSend>

				Key.Program_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002de4:	4b74      	ldr	r3, [pc, #464]	; (8002fb8 <vKeyScan+0x7c0>)
 8002de6:	2206      	movs	r2, #6
 8002de8:	751a      	strb	r2, [r3, #20]
				Key.Program_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002dea:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <vKeyScan+0x7c0>)
 8002dec:	2225      	movs	r2, #37	; 0x25
 8002dee:	759a      	strb	r2, [r3, #22]
			if (Key.Program_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002df0:	e013      	b.n	8002e1a <vKeyScan+0x622>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_L >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 8002df2:	4b71      	ldr	r3, [pc, #452]	; (8002fb8 <vKeyScan+0x7c0>)
 8002df4:	7d1b      	ldrb	r3, [r3, #20]
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d909      	bls.n	8002e0e <vKeyScan+0x616>
			{
				nKeyPressed = press_short_Program_L;
 8002dfa:	2315      	movs	r3, #21
 8002dfc:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002dfe:	4b70      	ldr	r3, [pc, #448]	; (8002fc0 <vKeyScan+0x7c8>)
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	f107 010f 	add.w	r1, r7, #15
 8002e06:	2300      	movs	r3, #0
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f004 fa17 	bl	800723c <xQueueGenericSend>
			}

			Key.Program_ShortPress_L = 0;
 8002e0e:	4b6a      	ldr	r3, [pc, #424]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	751a      	strb	r2, [r3, #20]
			Key.Program_LongPress_L = 0;
 8002e14:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	759a      	strb	r2, [r3, #22]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 2 && !(WelderUnit.IndicatorPanel.KeyState[3] == 1))
 8002e1a:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <vKeyScan+0x7c4>)
 8002e1c:	7f9b      	ldrb	r3, [r3, #30]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d134      	bne.n	8002e8c <vKeyScan+0x694>
 8002e22:	4b66      	ldr	r3, [pc, #408]	; (8002fbc <vKeyScan+0x7c4>)
 8002e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d02f      	beq.n	8002e8c <vKeyScan+0x694>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_R > CNT_KEY_SHORT && Key.Program_ShortPress_R != CNT_KEY_SHORT + 2)
 8002e2c:	4b62      	ldr	r3, [pc, #392]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e2e:	7d5b      	ldrb	r3, [r3, #21]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d906      	bls.n	8002e42 <vKeyScan+0x64a>
 8002e34:	4b60      	ldr	r3, [pc, #384]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e36:	7d5b      	ldrb	r3, [r3, #21]
 8002e38:	2b06      	cmp	r3, #6
 8002e3a:	d002      	beq.n	8002e42 <vKeyScan+0x64a>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_Program_R;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_R = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 8002e3c:	4b5e      	ldr	r3, [pc, #376]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e3e:	2207      	movs	r2, #7
 8002e40:	755a      	strb	r2, [r3, #21]
			}

			if (Key.Program_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002e42:	4b5d      	ldr	r3, [pc, #372]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e44:	7d5b      	ldrb	r3, [r3, #21]
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d005      	beq.n	8002e56 <vKeyScan+0x65e>
			{
				Key.Program_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002e4a:	4b5b      	ldr	r3, [pc, #364]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e4c:	7d5b      	ldrb	r3, [r3, #21]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b59      	ldr	r3, [pc, #356]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e54:	755a      	strb	r2, [r3, #21]
			}


			Key.Program_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002e56:	4b58      	ldr	r3, [pc, #352]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e58:	7ddb      	ldrb	r3, [r3, #23]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4b56      	ldr	r3, [pc, #344]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e60:	75da      	strb	r2, [r3, #23]
			if (Key.Program_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002e62:	4b55      	ldr	r3, [pc, #340]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e64:	7ddb      	ldrb	r3, [r3, #23]
 8002e66:	2b32      	cmp	r3, #50	; 0x32
 8002e68:	d924      	bls.n	8002eb4 <vKeyScan+0x6bc>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Program_R;
 8002e6a:	2318      	movs	r3, #24
 8002e6c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002e6e:	4b54      	ldr	r3, [pc, #336]	; (8002fc0 <vKeyScan+0x7c8>)
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	f107 010f 	add.w	r1, r7, #15
 8002e76:	2300      	movs	r3, #0
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f004 f9df 	bl	800723c <xQueueGenericSend>

				Key.Program_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002e7e:	4b4e      	ldr	r3, [pc, #312]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e80:	2206      	movs	r2, #6
 8002e82:	755a      	strb	r2, [r3, #21]
				Key.Program_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002e84:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e86:	2225      	movs	r2, #37	; 0x25
 8002e88:	75da      	strb	r2, [r3, #23]
			if (Key.Program_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002e8a:	e013      	b.n	8002eb4 <vKeyScan+0x6bc>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_R >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 8002e8c:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <vKeyScan+0x7c0>)
 8002e8e:	7d5b      	ldrb	r3, [r3, #21]
 8002e90:	2b06      	cmp	r3, #6
 8002e92:	d909      	bls.n	8002ea8 <vKeyScan+0x6b0>
			{
				nKeyPressed = press_short_Program_R;
 8002e94:	2317      	movs	r3, #23
 8002e96:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002e98:	4b49      	ldr	r3, [pc, #292]	; (8002fc0 <vKeyScan+0x7c8>)
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	f107 010f 	add.w	r1, r7, #15
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f004 f9ca 	bl	800723c <xQueueGenericSend>
			}

			Key.Program_ShortPress_R = 0;
 8002ea8:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <vKeyScan+0x7c0>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	755a      	strb	r2, [r3, #21]
			Key.Program_LongPress_R = 0;
 8002eae:	4b42      	ldr	r3, [pc, #264]	; (8002fb8 <vKeyScan+0x7c0>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	75da      	strb	r2, [r3, #23]
		}



		if (WelderUnit.IndicatorPanel.KeyState[1] == 128) //ВВЕРХ, ВНИЗ: [1], "-" - 128, "+" - 64, , STLED №5;
 8002eb4:	4b41      	ldr	r3, [pc, #260]	; (8002fbc <vKeyScan+0x7c4>)
 8002eb6:	7f9b      	ldrb	r3, [r3, #30]
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	d139      	bne.n	8002f30 <vKeyScan+0x738>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Up_ShortPress > CNT_KEY_SHORT && Key.Up_ShortPress != CNT_KEY_SHORT + 2)
 8002ebc:	4b3e      	ldr	r3, [pc, #248]	; (8002fb8 <vKeyScan+0x7c0>)
 8002ebe:	7e9b      	ldrb	r3, [r3, #26]
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d910      	bls.n	8002ee6 <vKeyScan+0x6ee>
 8002ec4:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <vKeyScan+0x7c0>)
 8002ec6:	7e9b      	ldrb	r3, [r3, #26]
 8002ec8:	2b06      	cmp	r3, #6
 8002eca:	d00c      	beq.n	8002ee6 <vKeyScan+0x6ee>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Up;
 8002ecc:	2323      	movs	r3, #35	; 0x23
 8002ece:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <vKeyScan+0x7c8>)
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	f107 010f 	add.w	r1, r7, #15
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2200      	movs	r2, #0
 8002edc:	f004 f9ae 	bl	800723c <xQueueGenericSend>

				Key.Up_ShortPress = 0; // Сброс счетика выдержки
 8002ee0:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <vKeyScan+0x7c0>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	769a      	strb	r2, [r3, #26]
			}

			if (Key.Up_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002ee6:	4b34      	ldr	r3, [pc, #208]	; (8002fb8 <vKeyScan+0x7c0>)
 8002ee8:	7e9b      	ldrb	r3, [r3, #26]
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d005      	beq.n	8002efa <vKeyScan+0x702>
			{
				Key.Up_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002eee:	4b32      	ldr	r3, [pc, #200]	; (8002fb8 <vKeyScan+0x7c0>)
 8002ef0:	7e9b      	ldrb	r3, [r3, #26]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <vKeyScan+0x7c0>)
 8002ef8:	769a      	strb	r2, [r3, #26]
			}


			Key.Up_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002efa:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <vKeyScan+0x7c0>)
 8002efc:	7edb      	ldrb	r3, [r3, #27]
 8002efe:	3301      	adds	r3, #1
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f04:	76da      	strb	r2, [r3, #27]
			if (Key.Up_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002f06:	4b2c      	ldr	r3, [pc, #176]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f08:	7edb      	ldrb	r3, [r3, #27]
 8002f0a:	2b32      	cmp	r3, #50	; 0x32
 8002f0c:	d916      	bls.n	8002f3c <vKeyScan+0x744>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Up;
 8002f0e:	2324      	movs	r3, #36	; 0x24
 8002f10:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002f12:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <vKeyScan+0x7c8>)
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	f107 010f 	add.w	r1, r7, #15
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f004 f98d 	bl	800723c <xQueueGenericSend>


				Key.Up_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002f22:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f24:	2206      	movs	r2, #6
 8002f26:	769a      	strb	r2, [r3, #26]
				Key.Up_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002f28:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f2a:	2225      	movs	r2, #37	; 0x25
 8002f2c:	76da      	strb	r2, [r3, #27]
 8002f2e:	e005      	b.n	8002f3c <vKeyScan+0x744>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Up_ShortPress = 0;
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	769a      	strb	r2, [r3, #26]
			Key.Up_LongPress = 0;
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	76da      	strb	r2, [r3, #27]
		}
		if (WelderUnit.IndicatorPanel.KeyState[1] == 64)
 8002f3c:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <vKeyScan+0x7c4>)
 8002f3e:	7f9b      	ldrb	r3, [r3, #30]
 8002f40:	2b40      	cmp	r3, #64	; 0x40
 8002f42:	d13f      	bne.n	8002fc4 <vKeyScan+0x7cc>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Down_ShortPress > CNT_KEY_SHORT && Key.Down_ShortPress != CNT_KEY_SHORT + 2)
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f46:	7f1b      	ldrb	r3, [r3, #28]
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d910      	bls.n	8002f6e <vKeyScan+0x776>
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f4e:	7f1b      	ldrb	r3, [r3, #28]
 8002f50:	2b06      	cmp	r3, #6
 8002f52:	d00c      	beq.n	8002f6e <vKeyScan+0x776>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Down;
 8002f54:	2321      	movs	r3, #33	; 0x21
 8002f56:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <vKeyScan+0x7c8>)
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	f107 010f 	add.w	r1, r7, #15
 8002f60:	2300      	movs	r3, #0
 8002f62:	2200      	movs	r2, #0
 8002f64:	f004 f96a 	bl	800723c <xQueueGenericSend>

				Key.Down_ShortPress = 0; // Сброс счетика выдержки
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	771a      	strb	r2, [r3, #28]
			}

			if (Key.Down_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f70:	7f1b      	ldrb	r3, [r3, #28]
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d005      	beq.n	8002f82 <vKeyScan+0x78a>
			{
				Key.Down_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f78:	7f1b      	ldrb	r3, [r3, #28]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f80:	771a      	strb	r2, [r3, #28]
			}


			Key.Down_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f84:	7f5b      	ldrb	r3, [r3, #29]
 8002f86:	3301      	adds	r3, #1
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f8c:	775a      	strb	r2, [r3, #29]
			if (Key.Down_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <vKeyScan+0x7c0>)
 8002f90:	7f5b      	ldrb	r3, [r3, #29]
 8002f92:	2b32      	cmp	r3, #50	; 0x32
 8002f94:	d91c      	bls.n	8002fd0 <vKeyScan+0x7d8>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Down;
 8002f96:	2322      	movs	r3, #34	; 0x22
 8002f98:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <vKeyScan+0x7c8>)
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	f107 010f 	add.w	r1, r7, #15
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f004 f949 	bl	800723c <xQueueGenericSend>


				Key.Down_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002faa:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <vKeyScan+0x7c0>)
 8002fac:	2206      	movs	r2, #6
 8002fae:	771a      	strb	r2, [r3, #28]
				Key.Down_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002fb0:	4b01      	ldr	r3, [pc, #4]	; (8002fb8 <vKeyScan+0x7c0>)
 8002fb2:	2225      	movs	r2, #37	; 0x25
 8002fb4:	775a      	strb	r2, [r3, #29]
 8002fb6:	e00b      	b.n	8002fd0 <vKeyScan+0x7d8>
 8002fb8:	20003da0 	.word	0x20003da0
 8002fbc:	2000353c 	.word	0x2000353c
 8002fc0:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Down_ShortPress = 0;
 8002fc4:	4b94      	ldr	r3, [pc, #592]	; (8003218 <vKeyScan+0xa20>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	771a      	strb	r2, [r3, #28]
			Key.Down_LongPress = 0;
 8002fca:	4b93      	ldr	r3, [pc, #588]	; (8003218 <vKeyScan+0xa20>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	775a      	strb	r2, [r3, #29]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 32) // ПАРКОВКА, АВТО: [1], "-" - 32, "+" - 16, , STLED №5;
 8002fd0:	4b92      	ldr	r3, [pc, #584]	; (800321c <vKeyScan+0xa24>)
 8002fd2:	7f9b      	ldrb	r3, [r3, #30]
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d139      	bne.n	800304c <vKeyScan+0x854>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Parking_ShortPress > CNT_KEY_SHORT && Key.Parking_ShortPress != CNT_KEY_SHORT + 2)
 8002fd8:	4b8f      	ldr	r3, [pc, #572]	; (8003218 <vKeyScan+0xa20>)
 8002fda:	7f9b      	ldrb	r3, [r3, #30]
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d910      	bls.n	8003002 <vKeyScan+0x80a>
 8002fe0:	4b8d      	ldr	r3, [pc, #564]	; (8003218 <vKeyScan+0xa20>)
 8002fe2:	7f9b      	ldrb	r3, [r3, #30]
 8002fe4:	2b06      	cmp	r3, #6
 8002fe6:	d00c      	beq.n	8003002 <vKeyScan+0x80a>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Parking;
 8002fe8:	2319      	movs	r3, #25
 8002fea:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002fec:	4b8c      	ldr	r3, [pc, #560]	; (8003220 <vKeyScan+0xa28>)
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	f107 010f 	add.w	r1, r7, #15
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f004 f920 	bl	800723c <xQueueGenericSend>


				Key.Parking_ShortPress = 0; // Сброс счетика выдержки
 8002ffc:	4b86      	ldr	r3, [pc, #536]	; (8003218 <vKeyScan+0xa20>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	779a      	strb	r2, [r3, #30]
			}

			if (Key.Parking_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003002:	4b85      	ldr	r3, [pc, #532]	; (8003218 <vKeyScan+0xa20>)
 8003004:	7f9b      	ldrb	r3, [r3, #30]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d005      	beq.n	8003016 <vKeyScan+0x81e>
			{
				Key.Parking_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 800300a:	4b83      	ldr	r3, [pc, #524]	; (8003218 <vKeyScan+0xa20>)
 800300c:	7f9b      	ldrb	r3, [r3, #30]
 800300e:	3301      	adds	r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4b81      	ldr	r3, [pc, #516]	; (8003218 <vKeyScan+0xa20>)
 8003014:	779a      	strb	r2, [r3, #30]
			}


			Key.Parking_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8003016:	4b80      	ldr	r3, [pc, #512]	; (8003218 <vKeyScan+0xa20>)
 8003018:	7fdb      	ldrb	r3, [r3, #31]
 800301a:	3301      	adds	r3, #1
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b7e      	ldr	r3, [pc, #504]	; (8003218 <vKeyScan+0xa20>)
 8003020:	77da      	strb	r2, [r3, #31]
			if (Key.Parking_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003022:	4b7d      	ldr	r3, [pc, #500]	; (8003218 <vKeyScan+0xa20>)
 8003024:	7fdb      	ldrb	r3, [r3, #31]
 8003026:	2b32      	cmp	r3, #50	; 0x32
 8003028:	d916      	bls.n	8003058 <vKeyScan+0x860>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Parking;
 800302a:	231a      	movs	r3, #26
 800302c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800302e:	4b7c      	ldr	r3, [pc, #496]	; (8003220 <vKeyScan+0xa28>)
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	f107 010f 	add.w	r1, r7, #15
 8003036:	2300      	movs	r3, #0
 8003038:	2200      	movs	r2, #0
 800303a:	f004 f8ff 	bl	800723c <xQueueGenericSend>

				Key.Parking_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800303e:	4b76      	ldr	r3, [pc, #472]	; (8003218 <vKeyScan+0xa20>)
 8003040:	2206      	movs	r2, #6
 8003042:	779a      	strb	r2, [r3, #30]
				Key.Parking_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003044:	4b74      	ldr	r3, [pc, #464]	; (8003218 <vKeyScan+0xa20>)
 8003046:	2225      	movs	r2, #37	; 0x25
 8003048:	77da      	strb	r2, [r3, #31]
 800304a:	e005      	b.n	8003058 <vKeyScan+0x860>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Parking_ShortPress = 0;
 800304c:	4b72      	ldr	r3, [pc, #456]	; (8003218 <vKeyScan+0xa20>)
 800304e:	2200      	movs	r2, #0
 8003050:	779a      	strb	r2, [r3, #30]
			Key.Parking_LongPress = 0;
 8003052:	4b71      	ldr	r3, [pc, #452]	; (8003218 <vKeyScan+0xa20>)
 8003054:	2200      	movs	r2, #0
 8003056:	77da      	strb	r2, [r3, #31]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 16)
 8003058:	4b70      	ldr	r3, [pc, #448]	; (800321c <vKeyScan+0xa24>)
 800305a:	7f9b      	ldrb	r3, [r3, #30]
 800305c:	2b10      	cmp	r3, #16
 800305e:	d144      	bne.n	80030ea <vKeyScan+0x8f2>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Auto_ShortPress > CNT_KEY_SHORT && Key.Auto_ShortPress != CNT_KEY_SHORT + 2)
 8003060:	4b6d      	ldr	r3, [pc, #436]	; (8003218 <vKeyScan+0xa20>)
 8003062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003066:	2b04      	cmp	r3, #4
 8003068:	d912      	bls.n	8003090 <vKeyScan+0x898>
 800306a:	4b6b      	ldr	r3, [pc, #428]	; (8003218 <vKeyScan+0xa20>)
 800306c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003070:	2b06      	cmp	r3, #6
 8003072:	d00d      	beq.n	8003090 <vKeyScan+0x898>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Auto;
 8003074:	231b      	movs	r3, #27
 8003076:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003078:	4b69      	ldr	r3, [pc, #420]	; (8003220 <vKeyScan+0xa28>)
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	f107 010f 	add.w	r1, r7, #15
 8003080:	2300      	movs	r3, #0
 8003082:	2200      	movs	r2, #0
 8003084:	f004 f8da 	bl	800723c <xQueueGenericSend>

				Key.Auto_ShortPress = 0; // Сброс счетика выдержки
 8003088:	4b63      	ldr	r3, [pc, #396]	; (8003218 <vKeyScan+0xa20>)
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2020 	strb.w	r2, [r3, #32]
			}

			if (Key.Auto_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003090:	4b61      	ldr	r3, [pc, #388]	; (8003218 <vKeyScan+0xa20>)
 8003092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003096:	2b06      	cmp	r3, #6
 8003098:	d007      	beq.n	80030aa <vKeyScan+0x8b2>
			{
				Key.Auto_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 800309a:	4b5f      	ldr	r3, [pc, #380]	; (8003218 <vKeyScan+0xa20>)
 800309c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030a0:	3301      	adds	r3, #1
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	4b5c      	ldr	r3, [pc, #368]	; (8003218 <vKeyScan+0xa20>)
 80030a6:	f883 2020 	strb.w	r2, [r3, #32]
			}


			Key.Auto_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 80030aa:	4b5b      	ldr	r3, [pc, #364]	; (8003218 <vKeyScan+0xa20>)
 80030ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030b0:	3301      	adds	r3, #1
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	4b58      	ldr	r3, [pc, #352]	; (8003218 <vKeyScan+0xa20>)
 80030b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			if (Key.Auto_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80030ba:	4b57      	ldr	r3, [pc, #348]	; (8003218 <vKeyScan+0xa20>)
 80030bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030c0:	2b32      	cmp	r3, #50	; 0x32
 80030c2:	d91a      	bls.n	80030fa <vKeyScan+0x902>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Auto;
 80030c4:	231c      	movs	r3, #28
 80030c6:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80030c8:	4b55      	ldr	r3, [pc, #340]	; (8003220 <vKeyScan+0xa28>)
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	f107 010f 	add.w	r1, r7, #15
 80030d0:	2300      	movs	r3, #0
 80030d2:	2200      	movs	r2, #0
 80030d4:	f004 f8b2 	bl	800723c <xQueueGenericSend>

				Key.Auto_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80030d8:	4b4f      	ldr	r3, [pc, #316]	; (8003218 <vKeyScan+0xa20>)
 80030da:	2206      	movs	r2, #6
 80030dc:	f883 2020 	strb.w	r2, [r3, #32]
				Key.Auto_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80030e0:	4b4d      	ldr	r3, [pc, #308]	; (8003218 <vKeyScan+0xa20>)
 80030e2:	2225      	movs	r2, #37	; 0x25
 80030e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80030e8:	e007      	b.n	80030fa <vKeyScan+0x902>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Auto_ShortPress = 0;
 80030ea:	4b4b      	ldr	r3, [pc, #300]	; (8003218 <vKeyScan+0xa20>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2020 	strb.w	r2, [r3, #32]
			Key.Auto_LongPress = 0;
 80030f2:	4b49      	ldr	r3, [pc, #292]	; (8003218 <vKeyScan+0xa20>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 8)
 80030fa:	4b48      	ldr	r3, [pc, #288]	; (800321c <vKeyScan+0xa24>)
 80030fc:	7f9b      	ldrb	r3, [r3, #30]
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d144      	bne.n	800318c <vKeyScan+0x994>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.StartStop_ShortPress > CNT_KEY_SHORT && Key.StartStop_ShortPress != CNT_KEY_SHORT + 2)
 8003102:	4b45      	ldr	r3, [pc, #276]	; (8003218 <vKeyScan+0xa20>)
 8003104:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003108:	2b04      	cmp	r3, #4
 800310a:	d912      	bls.n	8003132 <vKeyScan+0x93a>
 800310c:	4b42      	ldr	r3, [pc, #264]	; (8003218 <vKeyScan+0xa20>)
 800310e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003112:	2b06      	cmp	r3, #6
 8003114:	d00d      	beq.n	8003132 <vKeyScan+0x93a>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_StartStop;
 8003116:	231d      	movs	r3, #29
 8003118:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800311a:	4b41      	ldr	r3, [pc, #260]	; (8003220 <vKeyScan+0xa28>)
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	f107 010f 	add.w	r1, r7, #15
 8003122:	2300      	movs	r3, #0
 8003124:	2200      	movs	r2, #0
 8003126:	f004 f889 	bl	800723c <xQueueGenericSend>

				Key.StartStop_ShortPress = 0; // Сброс счетика выдержки
 800312a:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <vKeyScan+0xa20>)
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}

			if (Key.StartStop_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003132:	4b39      	ldr	r3, [pc, #228]	; (8003218 <vKeyScan+0xa20>)
 8003134:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003138:	2b06      	cmp	r3, #6
 800313a:	d007      	beq.n	800314c <vKeyScan+0x954>
			{
				Key.StartStop_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 800313c:	4b36      	ldr	r3, [pc, #216]	; (8003218 <vKeyScan+0xa20>)
 800313e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003142:	3301      	adds	r3, #1
 8003144:	b2da      	uxtb	r2, r3
 8003146:	4b34      	ldr	r3, [pc, #208]	; (8003218 <vKeyScan+0xa20>)
 8003148:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}


			Key.StartStop_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 800314c:	4b32      	ldr	r3, [pc, #200]	; (8003218 <vKeyScan+0xa20>)
 800314e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003152:	3301      	adds	r3, #1
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4b30      	ldr	r3, [pc, #192]	; (8003218 <vKeyScan+0xa20>)
 8003158:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			if (Key.StartStop_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 800315c:	4b2e      	ldr	r3, [pc, #184]	; (8003218 <vKeyScan+0xa20>)
 800315e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003162:	2b32      	cmp	r3, #50	; 0x32
 8003164:	d91a      	bls.n	800319c <vKeyScan+0x9a4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_StartStop;
 8003166:	231e      	movs	r3, #30
 8003168:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800316a:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <vKeyScan+0xa28>)
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	f107 010f 	add.w	r1, r7, #15
 8003172:	2300      	movs	r3, #0
 8003174:	2200      	movs	r2, #0
 8003176:	f004 f861 	bl	800723c <xQueueGenericSend>

				Key.StartStop_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800317a:	4b27      	ldr	r3, [pc, #156]	; (8003218 <vKeyScan+0xa20>)
 800317c:	2206      	movs	r2, #6
 800317e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				Key.StartStop_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003182:	4b25      	ldr	r3, [pc, #148]	; (8003218 <vKeyScan+0xa20>)
 8003184:	2225      	movs	r2, #37	; 0x25
 8003186:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 800318a:	e007      	b.n	800319c <vKeyScan+0x9a4>
			}

		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.StartStop_ShortPress = 0;
 800318c:	4b22      	ldr	r3, [pc, #136]	; (8003218 <vKeyScan+0xa20>)
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			Key.StartStop_LongPress = 0;
 8003194:	4b20      	ldr	r3, [pc, #128]	; (8003218 <vKeyScan+0xa20>)
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}

		// *********************************************************Комбинации клавишь*********************************************************

		if (WelderUnit.IndicatorPanel.KeyState[3] == 1 && WelderUnit.IndicatorPanel.KeyState[1] == 2) // "ПРОГРАММА" "-" одновременно с "+"
 800319c:	4b1f      	ldr	r3, [pc, #124]	; (800321c <vKeyScan+0xa24>)
 800319e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d11f      	bne.n	80031e6 <vKeyScan+0x9ee>
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <vKeyScan+0xa24>)
 80031a8:	7f9b      	ldrb	r3, [r3, #30]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d11b      	bne.n	80031e6 <vKeyScan+0x9ee>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_L_and_R > CNT_KEY_SHORT && Key.Program_ShortPress_L_and_R != CNT_KEY_SHORT + 2)
 80031ae:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <vKeyScan+0xa20>)
 80031b0:	7e1b      	ldrb	r3, [r3, #24]
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d906      	bls.n	80031c4 <vKeyScan+0x9cc>
 80031b6:	4b18      	ldr	r3, [pc, #96]	; (8003218 <vKeyScan+0xa20>)
 80031b8:	7e1b      	ldrb	r3, [r3, #24]
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d002      	beq.n	80031c4 <vKeyScan+0x9cc>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_StartStop;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_L_and_R = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 80031be:	4b16      	ldr	r3, [pc, #88]	; (8003218 <vKeyScan+0xa20>)
 80031c0:	2207      	movs	r2, #7
 80031c2:	761a      	strb	r2, [r3, #24]
			}

			if (Key.Program_ShortPress_L_and_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <vKeyScan+0xa20>)
 80031c6:	7e1b      	ldrb	r3, [r3, #24]
 80031c8:	2b06      	cmp	r3, #6
 80031ca:	d005      	beq.n	80031d8 <vKeyScan+0x9e0>
			{
				Key.Program_ShortPress_L_and_R++; // Счетчик для определения короткого нажатия на кнопку
 80031cc:	4b12      	ldr	r3, [pc, #72]	; (8003218 <vKeyScan+0xa20>)
 80031ce:	7e1b      	ldrb	r3, [r3, #24]
 80031d0:	3301      	adds	r3, #1
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	4b10      	ldr	r3, [pc, #64]	; (8003218 <vKeyScan+0xa20>)
 80031d6:	761a      	strb	r2, [r3, #24]
			}


			Key.Program_LongPress_L_and_R++; // Счетчик для определения длинного нажатия на кнопку
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <vKeyScan+0xa20>)
 80031da:	7e5b      	ldrb	r3, [r3, #25]
 80031dc:	3301      	adds	r3, #1
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <vKeyScan+0xa20>)
 80031e2:	765a      	strb	r2, [r3, #25]
			if (Key.Program_LongPress_L_and_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80031e4:	e013      	b.n	800320e <vKeyScan+0xa16>
			}

		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_L_and_R >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <vKeyScan+0xa20>)
 80031e8:	7e1b      	ldrb	r3, [r3, #24]
 80031ea:	2b06      	cmp	r3, #6
 80031ec:	d909      	bls.n	8003202 <vKeyScan+0xa0a>
			{
				nKeyPressed = press_short_Program_L_and_R;
 80031ee:	231f      	movs	r3, #31
 80031f0:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80031f2:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <vKeyScan+0xa28>)
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	f107 010f 	add.w	r1, r7, #15
 80031fa:	2300      	movs	r3, #0
 80031fc:	2200      	movs	r2, #0
 80031fe:	f004 f81d 	bl	800723c <xQueueGenericSend>
//
//				Key.Program_ShortPress_R = 0;
//				Key.Program_LongPress_R = 0;
			}

			Key.Program_ShortPress_L_and_R = 0;
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <vKeyScan+0xa20>)
 8003204:	2200      	movs	r2, #0
 8003206:	761a      	strb	r2, [r3, #24]
			Key.Program_LongPress_L_and_R = 0;
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <vKeyScan+0xa20>)
 800320a:	2200      	movs	r2, #0
 800320c:	765a      	strb	r2, [r3, #25]

		}



		vTaskDelay(TIME_KEY_SCAN / portTICK_RATE_MS);
 800320e:	2014      	movs	r0, #20
 8003210:	f004 fe5a 	bl	8007ec8 <vTaskDelay>
		PCB_KeyScan();
 8003214:	f7ff baf7 	b.w	8002806 <vKeyScan+0xe>
 8003218:	20003da0 	.word	0x20003da0
 800321c:	2000353c 	.word	0x2000353c
 8003220:	20003d90 	.word	0x20003d90

08003224 <vIndicatorPanel_Out>:
	}
	vTaskDelete(NULL);
}

void vIndicatorPanel_Out(void *pvParameters)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	WelderUnit.Xs = 30;
 800322c:	4b2c      	ldr	r3, [pc, #176]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 800322e:	221e      	movs	r2, #30
 8003230:	801a      	strh	r2, [r3, #0]
	WelderUnit.Xf = 90;
 8003232:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 8003234:	225a      	movs	r2, #90	; 0x5a
 8003236:	805a      	strh	r2, [r3, #2]
	WelderUnit.Steps = 0;
 8003238:	4b29      	ldr	r3, [pc, #164]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 800323a:	2200      	movs	r2, #0
 800323c:	81da      	strh	r2, [r3, #14]
	WelderUnit.Delay_s = 10;
 800323e:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 8003240:	220a      	movs	r2, #10
 8003242:	729a      	strb	r2, [r3, #10]
	WelderUnit.Speed = 120;
 8003244:	4b26      	ldr	r3, [pc, #152]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 8003246:	2278      	movs	r2, #120	; 0x78
 8003248:	80da      	strh	r2, [r3, #6]
	WelderUnit.Delay_f = 20;
 800324a:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 800324c:	2214      	movs	r2, #20
 800324e:	72da      	strb	r2, [r3, #11]
	WelderUnit.Program = 4;
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 8003252:	2204      	movs	r2, #4
 8003254:	819a      	strh	r2, [r3, #12]

	WelderUnit.GoTo = WelderUnit.Xf;
 8003256:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 8003258:	885a      	ldrh	r2, [r3, #2]
 800325a:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 800325c:	811a      	strh	r2, [r3, #8]
	WelderUnit.Position = 0;
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 8003260:	2200      	movs	r2, #0
 8003262:	809a      	strh	r2, [r3, #4]
	WelderUnit.State = 0;
 8003264:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 8003266:	2200      	movs	r2, #0
 8003268:	741a      	strb	r2, [r3, #16]

	WelderUnit.IndicatorPanel.Brightness = 2;
 800326a:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 800326c:	2202      	movs	r2, #2
 800326e:	771a      	strb	r2, [r3, #28]

//	WelderUnit.IndicatorPanel.LEDsState |= LED_AUTO;
//
//	WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING;

	IndicatorPanel_Ini();
 8003270:	f7fd fc24 	bl	8000abc <IndicatorPanel_Ini>

	IndicatorPanel_SetBrightness(&WelderUnit.IndicatorPanel);
 8003274:	481b      	ldr	r0, [pc, #108]	; (80032e4 <vIndicatorPanel_Out+0xc0>)
 8003276:	f7fd fd0b 	bl	8000c90 <IndicatorPanel_SetBrightness>

	vTaskDelay(100 / portTICK_RATE_MS);
 800327a:	2064      	movs	r0, #100	; 0x64
 800327c:	f004 fe24 	bl	8007ec8 <vTaskDelay>

		//PCB_LEDs_OUT(PCB_LEDs_OUT(LEDs_val))



		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 8003280:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 8003282:	7c1b      	ldrb	r3, [r3, #16]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <vIndicatorPanel_Out+0x70>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Position;
 800328c:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 800328e:	889a      	ldrh	r2, [r3, #4]
 8003290:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 8003292:	825a      	strh	r2, [r3, #18]
		}

		if (!(WelderUnit.State & 0x01)) // Если каретка не в движении то отображать точку начала варки
 8003294:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 8003296:	7c1b      	ldrb	r3, [r3, #16]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d103      	bne.n	80032a8 <vIndicatorPanel_Out+0x84>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Xs;
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 80032a2:	881a      	ldrh	r2, [r3, #0]
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 80032a6:	825a      	strh	r2, [r3, #18]
		}

		WelderUnit.IndicatorPanel.Xf = WelderUnit.Xf;
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 80032aa:	885a      	ldrh	r2, [r3, #2]
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 80032ae:	829a      	strh	r2, [r3, #20]
		WelderUnit.IndicatorPanel.Delay_s = WelderUnit.Delay_s;
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 80032b2:	7a9a      	ldrb	r2, [r3, #10]
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 80032b6:	759a      	strb	r2, [r3, #22]
		WelderUnit.IndicatorPanel.Speed = WelderUnit.Speed;
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 80032ba:	88da      	ldrh	r2, [r3, #6]
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 80032be:	831a      	strh	r2, [r3, #24]
		WelderUnit.IndicatorPanel.Delay_f = WelderUnit.Delay_f;
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 80032c2:	7ada      	ldrb	r2, [r3, #11]
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 80032c6:	75da      	strb	r2, [r3, #23]
		WelderUnit.IndicatorPanel.Program = WelderUnit.Program;
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 80032ca:	899a      	ldrh	r2, [r3, #12]
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <vIndicatorPanel_Out+0xbc>)
 80032ce:	835a      	strh	r2, [r3, #26]


		IndicatorPanel_SetValue(&WelderUnit.IndicatorPanel);
 80032d0:	4804      	ldr	r0, [pc, #16]	; (80032e4 <vIndicatorPanel_Out+0xc0>)
 80032d2:	f7fd fc0d 	bl	8000af0 <IndicatorPanel_SetValue>

		vTaskDelay(100 / portTICK_RATE_MS);
 80032d6:	2064      	movs	r0, #100	; 0x64
 80032d8:	f004 fdf6 	bl	8007ec8 <vTaskDelay>
		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 80032dc:	e7d0      	b.n	8003280 <vIndicatorPanel_Out+0x5c>
 80032de:	bf00      	nop
 80032e0:	2000353c 	.word	0x2000353c
 80032e4:	2000354e 	.word	0x2000354e

080032e8 <vBuzzer_beep>:
	vTaskDelete(NULL);
}


void vBuzzer_beep(void *pvParameters)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	uint8_t lReceivedValue;
	portBASE_TYPE xStatus;

	for(;;)
	{
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 80032f0:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <vBuzzer_beep+0x1d8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f107 010f 	add.w	r1, r7, #15
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295
 80032fc:	4618      	mov	r0, r3
 80032fe:	f004 f8f5 	bl	80074ec <xQueueReceive>
 8003302:	6138      	str	r0, [r7, #16]

		if( xStatus == pdPASS ) // Если данные были успешно приняты из очереди
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b01      	cmp	r3, #1
 8003308:	f040 80d5 	bne.w	80034b6 <vBuzzer_beep+0x1ce>
		{

		switch(lReceivedValue)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b05      	cmp	r3, #5
 8003310:	f200 80d2 	bhi.w	80034b8 <vBuzzer_beep+0x1d0>
 8003314:	a201      	add	r2, pc, #4	; (adr r2, 800331c <vBuzzer_beep+0x34>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	08003335 	.word	0x08003335
 8003320:	08003341 	.word	0x08003341
 8003324:	08003363 	.word	0x08003363
 8003328:	08003397 	.word	0x08003397
 800332c:	080033d9 	.word	0x080033d9
 8003330:	08003483 	.word	0x08003483
		{
		case beep_off:
		{
			BUZZER_OFF
 8003334:	2200      	movs	r2, #0
 8003336:	2110      	movs	r1, #16
 8003338:	4862      	ldr	r0, [pc, #392]	; (80034c4 <vBuzzer_beep+0x1dc>)
 800333a:	f001 fa6e 	bl	800481a <HAL_GPIO_WritePin>
			break;
 800333e:	e0bb      	b.n	80034b8 <vBuzzer_beep+0x1d0>
		}

		case beep_click:
		{
			BUZZER_ON
 8003340:	2201      	movs	r2, #1
 8003342:	2110      	movs	r1, #16
 8003344:	485f      	ldr	r0, [pc, #380]	; (80034c4 <vBuzzer_beep+0x1dc>)
 8003346:	f001 fa68 	bl	800481a <HAL_GPIO_WritePin>
			vTaskDelay(10 / portTICK_RATE_MS);
 800334a:	200a      	movs	r0, #10
 800334c:	f004 fdbc 	bl	8007ec8 <vTaskDelay>
			BUZZER_OFF
 8003350:	2200      	movs	r2, #0
 8003352:	2110      	movs	r1, #16
 8003354:	485b      	ldr	r0, [pc, #364]	; (80034c4 <vBuzzer_beep+0x1dc>)
 8003356:	f001 fa60 	bl	800481a <HAL_GPIO_WritePin>
			vTaskDelay(50 / portTICK_RATE_MS);
 800335a:	2032      	movs	r0, #50	; 0x32
 800335c:	f004 fdb4 	bl	8007ec8 <vTaskDelay>
			break;
 8003360:	e0aa      	b.n	80034b8 <vBuzzer_beep+0x1d0>
		}

		case beep_1short:
		{
			for(uint16_t i = 0; i < 10; i++)
 8003362:	2300      	movs	r3, #0
 8003364:	83fb      	strh	r3, [r7, #30]
 8003366:	e012      	b.n	800338e <vBuzzer_beep+0xa6>
			    {
			    BUZZER_ON
 8003368:	2201      	movs	r2, #1
 800336a:	2110      	movs	r1, #16
 800336c:	4855      	ldr	r0, [pc, #340]	; (80034c4 <vBuzzer_beep+0x1dc>)
 800336e:	f001 fa54 	bl	800481a <HAL_GPIO_WritePin>
			    vTaskDelay(1 / portTICK_RATE_MS);
 8003372:	2001      	movs	r0, #1
 8003374:	f004 fda8 	bl	8007ec8 <vTaskDelay>
			    BUZZER_OFF
 8003378:	2200      	movs	r2, #0
 800337a:	2110      	movs	r1, #16
 800337c:	4851      	ldr	r0, [pc, #324]	; (80034c4 <vBuzzer_beep+0x1dc>)
 800337e:	f001 fa4c 	bl	800481a <HAL_GPIO_WritePin>
			    vTaskDelay(1 / portTICK_RATE_MS);
 8003382:	2001      	movs	r0, #1
 8003384:	f004 fda0 	bl	8007ec8 <vTaskDelay>
			for(uint16_t i = 0; i < 10; i++)
 8003388:	8bfb      	ldrh	r3, [r7, #30]
 800338a:	3301      	adds	r3, #1
 800338c:	83fb      	strh	r3, [r7, #30]
 800338e:	8bfb      	ldrh	r3, [r7, #30]
 8003390:	2b09      	cmp	r3, #9
 8003392:	d9e9      	bls.n	8003368 <vBuzzer_beep+0x80>
			    }
			break;
 8003394:	e090      	b.n	80034b8 <vBuzzer_beep+0x1d0>
		}

		case beep_2short:
		{
			BUZZER_ON
 8003396:	2201      	movs	r2, #1
 8003398:	2110      	movs	r1, #16
 800339a:	484a      	ldr	r0, [pc, #296]	; (80034c4 <vBuzzer_beep+0x1dc>)
 800339c:	f001 fa3d 	bl	800481a <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80033a0:	2064      	movs	r0, #100	; 0x64
 80033a2:	f004 fd91 	bl	8007ec8 <vTaskDelay>
			BUZZER_OFF
 80033a6:	2200      	movs	r2, #0
 80033a8:	2110      	movs	r1, #16
 80033aa:	4846      	ldr	r0, [pc, #280]	; (80034c4 <vBuzzer_beep+0x1dc>)
 80033ac:	f001 fa35 	bl	800481a <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80033b0:	2064      	movs	r0, #100	; 0x64
 80033b2:	f004 fd89 	bl	8007ec8 <vTaskDelay>

			BUZZER_ON
 80033b6:	2201      	movs	r2, #1
 80033b8:	2110      	movs	r1, #16
 80033ba:	4842      	ldr	r0, [pc, #264]	; (80034c4 <vBuzzer_beep+0x1dc>)
 80033bc:	f001 fa2d 	bl	800481a <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80033c0:	2064      	movs	r0, #100	; 0x64
 80033c2:	f004 fd81 	bl	8007ec8 <vTaskDelay>
			BUZZER_OFF
 80033c6:	2200      	movs	r2, #0
 80033c8:	2110      	movs	r1, #16
 80033ca:	483e      	ldr	r0, [pc, #248]	; (80034c4 <vBuzzer_beep+0x1dc>)
 80033cc:	f001 fa25 	bl	800481a <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80033d0:	2064      	movs	r0, #100	; 0x64
 80033d2:	f004 fd79 	bl	8007ec8 <vTaskDelay>
			break;
 80033d6:	e06f      	b.n	80034b8 <vBuzzer_beep+0x1d0>
		}

		case beep_3short:
		{
			for(uint16_t i = 0; i < 40; i++)
 80033d8:	2300      	movs	r3, #0
 80033da:	83bb      	strh	r3, [r7, #28]
 80033dc:	e012      	b.n	8003404 <vBuzzer_beep+0x11c>
			    {
				BUZZER_ON
 80033de:	2201      	movs	r2, #1
 80033e0:	2110      	movs	r1, #16
 80033e2:	4838      	ldr	r0, [pc, #224]	; (80034c4 <vBuzzer_beep+0x1dc>)
 80033e4:	f001 fa19 	bl	800481a <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 80033e8:	2001      	movs	r0, #1
 80033ea:	f004 fd6d 	bl	8007ec8 <vTaskDelay>
				BUZZER_OFF
 80033ee:	2200      	movs	r2, #0
 80033f0:	2110      	movs	r1, #16
 80033f2:	4834      	ldr	r0, [pc, #208]	; (80034c4 <vBuzzer_beep+0x1dc>)
 80033f4:	f001 fa11 	bl	800481a <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 80033f8:	2001      	movs	r0, #1
 80033fa:	f004 fd65 	bl	8007ec8 <vTaskDelay>
			for(uint16_t i = 0; i < 40; i++)
 80033fe:	8bbb      	ldrh	r3, [r7, #28]
 8003400:	3301      	adds	r3, #1
 8003402:	83bb      	strh	r3, [r7, #28]
 8003404:	8bbb      	ldrh	r3, [r7, #28]
 8003406:	2b27      	cmp	r3, #39	; 0x27
 8003408:	d9e9      	bls.n	80033de <vBuzzer_beep+0xf6>
			    }

			vTaskDelay(40 / portTICK_RATE_MS);
 800340a:	2028      	movs	r0, #40	; 0x28
 800340c:	f004 fd5c 	bl	8007ec8 <vTaskDelay>

			for(uint16_t i = 0; i < 40; i++)
 8003410:	2300      	movs	r3, #0
 8003412:	837b      	strh	r3, [r7, #26]
 8003414:	e012      	b.n	800343c <vBuzzer_beep+0x154>
			    {
				BUZZER_ON
 8003416:	2201      	movs	r2, #1
 8003418:	2110      	movs	r1, #16
 800341a:	482a      	ldr	r0, [pc, #168]	; (80034c4 <vBuzzer_beep+0x1dc>)
 800341c:	f001 f9fd 	bl	800481a <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003420:	2001      	movs	r0, #1
 8003422:	f004 fd51 	bl	8007ec8 <vTaskDelay>
				BUZZER_OFF
 8003426:	2200      	movs	r2, #0
 8003428:	2110      	movs	r1, #16
 800342a:	4826      	ldr	r0, [pc, #152]	; (80034c4 <vBuzzer_beep+0x1dc>)
 800342c:	f001 f9f5 	bl	800481a <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003430:	2001      	movs	r0, #1
 8003432:	f004 fd49 	bl	8007ec8 <vTaskDelay>
			for(uint16_t i = 0; i < 40; i++)
 8003436:	8b7b      	ldrh	r3, [r7, #26]
 8003438:	3301      	adds	r3, #1
 800343a:	837b      	strh	r3, [r7, #26]
 800343c:	8b7b      	ldrh	r3, [r7, #26]
 800343e:	2b27      	cmp	r3, #39	; 0x27
 8003440:	d9e9      	bls.n	8003416 <vBuzzer_beep+0x12e>
			    }

			vTaskDelay(40 / portTICK_RATE_MS);
 8003442:	2028      	movs	r0, #40	; 0x28
 8003444:	f004 fd40 	bl	8007ec8 <vTaskDelay>

			for(uint16_t i = 0; i < 50; i++)
 8003448:	2300      	movs	r3, #0
 800344a:	833b      	strh	r3, [r7, #24]
 800344c:	e012      	b.n	8003474 <vBuzzer_beep+0x18c>
			    {
				BUZZER_ON
 800344e:	2201      	movs	r2, #1
 8003450:	2110      	movs	r1, #16
 8003452:	481c      	ldr	r0, [pc, #112]	; (80034c4 <vBuzzer_beep+0x1dc>)
 8003454:	f001 f9e1 	bl	800481a <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003458:	2001      	movs	r0, #1
 800345a:	f004 fd35 	bl	8007ec8 <vTaskDelay>
				BUZZER_OFF
 800345e:	2200      	movs	r2, #0
 8003460:	2110      	movs	r1, #16
 8003462:	4818      	ldr	r0, [pc, #96]	; (80034c4 <vBuzzer_beep+0x1dc>)
 8003464:	f001 f9d9 	bl	800481a <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003468:	2001      	movs	r0, #1
 800346a:	f004 fd2d 	bl	8007ec8 <vTaskDelay>
			for(uint16_t i = 0; i < 50; i++)
 800346e:	8b3b      	ldrh	r3, [r7, #24]
 8003470:	3301      	adds	r3, #1
 8003472:	833b      	strh	r3, [r7, #24]
 8003474:	8b3b      	ldrh	r3, [r7, #24]
 8003476:	2b31      	cmp	r3, #49	; 0x31
 8003478:	d9e9      	bls.n	800344e <vBuzzer_beep+0x166>
			    }

			vTaskDelay(40 / portTICK_RATE_MS);
 800347a:	2028      	movs	r0, #40	; 0x28
 800347c:	f004 fd24 	bl	8007ec8 <vTaskDelay>

			break;
 8003480:	e01a      	b.n	80034b8 <vBuzzer_beep+0x1d0>
		}

		case beep_long:
		{
			for(uint16_t i = 0; i < 200; i++)
 8003482:	2300      	movs	r3, #0
 8003484:	82fb      	strh	r3, [r7, #22]
 8003486:	e012      	b.n	80034ae <vBuzzer_beep+0x1c6>
			    {
				BUZZER_ON
 8003488:	2201      	movs	r2, #1
 800348a:	2110      	movs	r1, #16
 800348c:	480d      	ldr	r0, [pc, #52]	; (80034c4 <vBuzzer_beep+0x1dc>)
 800348e:	f001 f9c4 	bl	800481a <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003492:	2001      	movs	r0, #1
 8003494:	f004 fd18 	bl	8007ec8 <vTaskDelay>
				BUZZER_OFF
 8003498:	2200      	movs	r2, #0
 800349a:	2110      	movs	r1, #16
 800349c:	4809      	ldr	r0, [pc, #36]	; (80034c4 <vBuzzer_beep+0x1dc>)
 800349e:	f001 f9bc 	bl	800481a <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 80034a2:	2001      	movs	r0, #1
 80034a4:	f004 fd10 	bl	8007ec8 <vTaskDelay>
			for(uint16_t i = 0; i < 200; i++)
 80034a8:	8afb      	ldrh	r3, [r7, #22]
 80034aa:	3301      	adds	r3, #1
 80034ac:	82fb      	strh	r3, [r7, #22]
 80034ae:	8afb      	ldrh	r3, [r7, #22]
 80034b0:	2bc7      	cmp	r3, #199	; 0xc7
 80034b2:	d9e9      	bls.n	8003488 <vBuzzer_beep+0x1a0>
			    }
			break;
 80034b4:	e000      	b.n	80034b8 <vBuzzer_beep+0x1d0>
		}

		}

		}
 80034b6:	bf00      	nop

		vTaskMissedYield(); // Переключение контекста.
 80034b8:	f005 f80e 	bl	80084d8 <vTaskMissedYield>
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 80034bc:	e718      	b.n	80032f0 <vBuzzer_beep+0x8>
 80034be:	bf00      	nop
 80034c0:	20003538 	.word	0x20003538
 80034c4:	40010800 	.word	0x40010800

080034c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034cc:	f000 fb82 	bl	8003bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034d0:	f000 f81a 	bl	8003508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034d4:	f000 f90c 	bl	80036f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80034d8:	f000 f85c 	bl	8003594 <MX_SPI1_Init>
  MX_TIM3_Init();
 80034dc:	f000 f892 	bl	8003604 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80034e0:	f003 fc0c 	bl	8006cfc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80034e4:	4a05      	ldr	r2, [pc, #20]	; (80034fc <main+0x34>)
 80034e6:	2100      	movs	r1, #0
 80034e8:	4805      	ldr	r0, [pc, #20]	; (8003500 <main+0x38>)
 80034ea:	f003 fc39 	bl	8006d60 <osThreadNew>
 80034ee:	4603      	mov	r3, r0
 80034f0:	4a04      	ldr	r2, [pc, #16]	; (8003504 <main+0x3c>)
 80034f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  freeRTOS_Tasks_Ini();
 80034f4:	f7fe f9ac 	bl	8001850 <freeRTOS_Tasks_Ini>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80034f8:	e7fe      	b.n	80034f8 <main+0x30>
 80034fa:	bf00      	nop
 80034fc:	080095d0 	.word	0x080095d0
 8003500:	080038e9 	.word	0x080038e9
 8003504:	20003dd0 	.word	0x20003dd0

08003508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b090      	sub	sp, #64	; 0x40
 800350c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800350e:	f107 0318 	add.w	r3, r7, #24
 8003512:	2228      	movs	r2, #40	; 0x28
 8003514:	2100      	movs	r1, #0
 8003516:	4618      	mov	r0, r3
 8003518:	f005 ffec 	bl	80094f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800351c:	1d3b      	adds	r3, r7, #4
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	609a      	str	r2, [r3, #8]
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800352a:	2301      	movs	r3, #1
 800352c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800352e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003532:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003534:	2300      	movs	r3, #0
 8003536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003538:	2301      	movs	r3, #1
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800353c:	2302      	movs	r3, #2
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003546:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800354a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800354c:	f107 0318 	add.w	r3, r7, #24
 8003550:	4618      	mov	r0, r3
 8003552:	f001 f993 	bl	800487c <HAL_RCC_OscConfig>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800355c:	f000 f9cd 	bl	80038fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003560:	230f      	movs	r3, #15
 8003562:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003564:	2302      	movs	r3, #2
 8003566:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800356c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	2102      	movs	r1, #2
 800357a:	4618      	mov	r0, r3
 800357c:	f001 fbfe 	bl	8004d7c <HAL_RCC_ClockConfig>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003586:	f000 f9b8 	bl	80038fa <Error_Handler>
  }
}
 800358a:	bf00      	nop
 800358c:	3740      	adds	r7, #64	; 0x40
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003598:	4b18      	ldr	r3, [pc, #96]	; (80035fc <MX_SPI1_Init+0x68>)
 800359a:	4a19      	ldr	r2, [pc, #100]	; (8003600 <MX_SPI1_Init+0x6c>)
 800359c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800359e:	4b17      	ldr	r3, [pc, #92]	; (80035fc <MX_SPI1_Init+0x68>)
 80035a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <MX_SPI1_Init+0x68>)
 80035a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80035ac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <MX_SPI1_Init+0x68>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <MX_SPI1_Init+0x68>)
 80035b6:	2202      	movs	r2, #2
 80035b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <MX_SPI1_Init+0x68>)
 80035bc:	2201      	movs	r2, #1
 80035be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035c0:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <MX_SPI1_Init+0x68>)
 80035c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <MX_SPI1_Init+0x68>)
 80035ca:	2238      	movs	r2, #56	; 0x38
 80035cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <MX_SPI1_Init+0x68>)
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <MX_SPI1_Init+0x68>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035da:	4b08      	ldr	r3, [pc, #32]	; (80035fc <MX_SPI1_Init+0x68>)
 80035dc:	2200      	movs	r2, #0
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80035e0:	4b06      	ldr	r3, [pc, #24]	; (80035fc <MX_SPI1_Init+0x68>)
 80035e2:	220a      	movs	r2, #10
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035e6:	4805      	ldr	r0, [pc, #20]	; (80035fc <MX_SPI1_Init+0x68>)
 80035e8:	f001 fd30 	bl	800504c <HAL_SPI_Init>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80035f2:	f000 f982 	bl	80038fa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20003e1c 	.word	0x20003e1c
 8003600:	40013000 	.word	0x40013000

08003604 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08e      	sub	sp, #56	; 0x38
 8003608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800360a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	605a      	str	r2, [r3, #4]
 8003614:	609a      	str	r2, [r3, #8]
 8003616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003618:	f107 0320 	add.w	r3, r7, #32
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	611a      	str	r2, [r3, #16]
 8003630:	615a      	str	r2, [r3, #20]
 8003632:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003634:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <MX_TIM3_Init+0xe4>)
 8003636:	4a2d      	ldr	r2, [pc, #180]	; (80036ec <MX_TIM3_Init+0xe8>)
 8003638:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800363a:	4b2b      	ldr	r3, [pc, #172]	; (80036e8 <MX_TIM3_Init+0xe4>)
 800363c:	2247      	movs	r2, #71	; 0x47
 800363e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003640:	4b29      	ldr	r3, [pc, #164]	; (80036e8 <MX_TIM3_Init+0xe4>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003646:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <MX_TIM3_Init+0xe4>)
 8003648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800364c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800364e:	4b26      	ldr	r3, [pc, #152]	; (80036e8 <MX_TIM3_Init+0xe4>)
 8003650:	2200      	movs	r2, #0
 8003652:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <MX_TIM3_Init+0xe4>)
 8003656:	2200      	movs	r2, #0
 8003658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800365a:	4823      	ldr	r0, [pc, #140]	; (80036e8 <MX_TIM3_Init+0xe4>)
 800365c:	f002 fb66 	bl	8005d2c <HAL_TIM_Base_Init>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003666:	f000 f948 	bl	80038fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800366a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003670:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003674:	4619      	mov	r1, r3
 8003676:	481c      	ldr	r0, [pc, #112]	; (80036e8 <MX_TIM3_Init+0xe4>)
 8003678:	f002 fef0 	bl	800645c <HAL_TIM_ConfigClockSource>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003682:	f000 f93a 	bl	80038fa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003686:	4818      	ldr	r0, [pc, #96]	; (80036e8 <MX_TIM3_Init+0xe4>)
 8003688:	f002 fb9f 	bl	8005dca <HAL_TIM_PWM_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003692:	f000 f932 	bl	80038fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800369a:	2300      	movs	r3, #0
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800369e:	f107 0320 	add.w	r3, r7, #32
 80036a2:	4619      	mov	r1, r3
 80036a4:	4810      	ldr	r0, [pc, #64]	; (80036e8 <MX_TIM3_Init+0xe4>)
 80036a6:	f003 faab 	bl	8006c00 <HAL_TIMEx_MasterConfigSynchronization>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80036b0:	f000 f923 	bl	80038fa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036b4:	2360      	movs	r3, #96	; 0x60
 80036b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	2200      	movs	r2, #0
 80036c8:	4619      	mov	r1, r3
 80036ca:	4807      	ldr	r0, [pc, #28]	; (80036e8 <MX_TIM3_Init+0xe4>)
 80036cc:	f002 fe08 	bl	80062e0 <HAL_TIM_PWM_ConfigChannel>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80036d6:	f000 f910 	bl	80038fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80036da:	4803      	ldr	r0, [pc, #12]	; (80036e8 <MX_TIM3_Init+0xe4>)
 80036dc:	f000 f9b6 	bl	8003a4c <HAL_TIM_MspPostInit>

}
 80036e0:	bf00      	nop
 80036e2:	3738      	adds	r7, #56	; 0x38
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20003dd4 	.word	0x20003dd4
 80036ec:	40000400 	.word	0x40000400

080036f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f6:	f107 0310 	add.w	r3, r7, #16
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	609a      	str	r2, [r3, #8]
 8003702:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003704:	4b71      	ldr	r3, [pc, #452]	; (80038cc <MX_GPIO_Init+0x1dc>)
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	4a70      	ldr	r2, [pc, #448]	; (80038cc <MX_GPIO_Init+0x1dc>)
 800370a:	f043 0320 	orr.w	r3, r3, #32
 800370e:	6193      	str	r3, [r2, #24]
 8003710:	4b6e      	ldr	r3, [pc, #440]	; (80038cc <MX_GPIO_Init+0x1dc>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800371c:	4b6b      	ldr	r3, [pc, #428]	; (80038cc <MX_GPIO_Init+0x1dc>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	4a6a      	ldr	r2, [pc, #424]	; (80038cc <MX_GPIO_Init+0x1dc>)
 8003722:	f043 0310 	orr.w	r3, r3, #16
 8003726:	6193      	str	r3, [r2, #24]
 8003728:	4b68      	ldr	r3, [pc, #416]	; (80038cc <MX_GPIO_Init+0x1dc>)
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003734:	4b65      	ldr	r3, [pc, #404]	; (80038cc <MX_GPIO_Init+0x1dc>)
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	4a64      	ldr	r2, [pc, #400]	; (80038cc <MX_GPIO_Init+0x1dc>)
 800373a:	f043 0304 	orr.w	r3, r3, #4
 800373e:	6193      	str	r3, [r2, #24]
 8003740:	4b62      	ldr	r3, [pc, #392]	; (80038cc <MX_GPIO_Init+0x1dc>)
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800374c:	4b5f      	ldr	r3, [pc, #380]	; (80038cc <MX_GPIO_Init+0x1dc>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	4a5e      	ldr	r2, [pc, #376]	; (80038cc <MX_GPIO_Init+0x1dc>)
 8003752:	f043 0308 	orr.w	r3, r3, #8
 8003756:	6193      	str	r3, [r2, #24]
 8003758:	4b5c      	ldr	r3, [pc, #368]	; (80038cc <MX_GPIO_Init+0x1dc>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oDIR1_Pin, GPIO_PIN_RESET);
 8003764:	2200      	movs	r2, #0
 8003766:	f44f 7183 	mov.w	r1, #262	; 0x106
 800376a:	4859      	ldr	r0, [pc, #356]	; (80038d0 <MX_GPIO_Init+0x1e0>)
 800376c:	f001 f855 	bl	800481a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, oBuzer_Pin|oSyncArc_Pin|oSMD_EN1_Pin, GPIO_PIN_RESET);
 8003770:	2200      	movs	r2, #0
 8003772:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8003776:	4857      	ldr	r0, [pc, #348]	; (80038d4 <MX_GPIO_Init+0x1e4>)
 8003778:	f001 f84f 	bl	800481a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin, GPIO_PIN_SET);
 800377c:	2201      	movs	r2, #1
 800377e:	2140      	movs	r1, #64	; 0x40
 8003780:	4854      	ldr	r0, [pc, #336]	; (80038d4 <MX_GPIO_Init+0x1e4>)
 8003782:	f001 f84a 	bl	800481a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin, GPIO_PIN_SET);
 8003786:	2201      	movs	r2, #1
 8003788:	2130      	movs	r1, #48	; 0x30
 800378a:	4851      	ldr	r0, [pc, #324]	; (80038d0 <MX_GPIO_Init+0x1e0>)
 800378c:	f001 f845 	bl	800481a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin, GPIO_PIN_SET);
 8003790:	2201      	movs	r2, #1
 8003792:	2103      	movs	r1, #3
 8003794:	4850      	ldr	r0, [pc, #320]	; (80038d8 <MX_GPIO_Init+0x1e8>)
 8003796:	f001 f840 	bl	800481a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSolenoidValve2_Pin|oSolenoidValve1_Pin, GPIO_PIN_RESET);
 800379a:	2200      	movs	r2, #0
 800379c:	21c0      	movs	r1, #192	; 0xc0
 800379e:	484e      	ldr	r0, [pc, #312]	; (80038d8 <MX_GPIO_Init+0x1e8>)
 80037a0:	f001 f83b 	bl	800481a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : oSol_Valve_b_Heade_Pin oSol_Valve_a_Heade_Pin oSTLED316S_STB1_Pin oSTLED316S_STB2_Pin
                           oDIR1_Pin */
  GPIO_InitStruct.Pin = oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin
 80037a4:	f44f 739b 	mov.w	r3, #310	; 0x136
 80037a8:	613b      	str	r3, [r7, #16]
                          |oDIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037aa:	2301      	movs	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b2:	2302      	movs	r3, #2
 80037b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b6:	f107 0310 	add.w	r3, r7, #16
 80037ba:	4619      	mov	r1, r3
 80037bc:	4844      	ldr	r0, [pc, #272]	; (80038d0 <MX_GPIO_Init+0x1e0>)
 80037be:	f000 fe81 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : iPedal_L_Pin iPedal_R_Pin */
  GPIO_InitStruct.Pin = iPedal_L_Pin|iPedal_R_Pin;
 80037c2:	2309      	movs	r3, #9
 80037c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ce:	f107 0310 	add.w	r3, r7, #16
 80037d2:	4619      	mov	r1, r3
 80037d4:	483f      	ldr	r0, [pc, #252]	; (80038d4 <MX_GPIO_Init+0x1e4>)
 80037d6:	f000 fe75 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : oBuzer_Pin oSTLED316S_STB5_Pin oSyncArc_Pin oSMD_EN1_Pin */
  GPIO_InitStruct.Pin = oBuzer_Pin|oSTLED316S_STB5_Pin|oSyncArc_Pin|oSMD_EN1_Pin;
 80037da:	f44f 6315 	mov.w	r3, #2384	; 0x950
 80037de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037e0:	2301      	movs	r3, #1
 80037e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e8:	2302      	movs	r3, #2
 80037ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ec:	f107 0310 	add.w	r3, r7, #16
 80037f0:	4619      	mov	r1, r3
 80037f2:	4838      	ldr	r0, [pc, #224]	; (80038d4 <MX_GPIO_Init+0x1e4>)
 80037f4:	f000 fe66 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : oSTLED316S_STB3_Pin oSTLED316S_STB4_Pin oSolenoidValve2_Pin oSolenoidValve1_Pin */
  GPIO_InitStruct.Pin = oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin|oSolenoidValve2_Pin|oSolenoidValve1_Pin;
 80037f8:	23c3      	movs	r3, #195	; 0xc3
 80037fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037fc:	2301      	movs	r3, #1
 80037fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	2300      	movs	r3, #0
 8003802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003804:	2302      	movs	r3, #2
 8003806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	4619      	mov	r1, r3
 800380e:	4832      	ldr	r0, [pc, #200]	; (80038d8 <MX_GPIO_Init+0x1e8>)
 8003810:	f000 fe58 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN5_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN5_Pin;
 8003814:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800381a:	4b30      	ldr	r3, [pc, #192]	; (80038dc <MX_GPIO_Init+0x1ec>)
 800381c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN5_GPIO_Port, &GPIO_InitStruct);
 8003822:	f107 0310 	add.w	r3, r7, #16
 8003826:	4619      	mov	r1, r3
 8003828:	482b      	ldr	r0, [pc, #172]	; (80038d8 <MX_GPIO_Init+0x1e8>)
 800382a:	f000 fe4b 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : iBackDoor_Pin */
  GPIO_InitStruct.Pin = iBackDoor_Pin;
 800382e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iBackDoor_GPIO_Port, &GPIO_InitStruct);
 800383c:	f107 0310 	add.w	r3, r7, #16
 8003840:	4619      	mov	r1, r3
 8003842:	4825      	ldr	r0, [pc, #148]	; (80038d8 <MX_GPIO_Init+0x1e8>)
 8003844:	f000 fe3e 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : iFB_STEP1_Pin */
  GPIO_InitStruct.Pin = iFB_STEP1_Pin;
 8003848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800384c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800384e:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <MX_GPIO_Init+0x1f0>)
 8003850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iFB_STEP1_GPIO_Port, &GPIO_InitStruct);
 8003856:	f107 0310 	add.w	r3, r7, #16
 800385a:	4619      	mov	r1, r3
 800385c:	481c      	ldr	r0, [pc, #112]	; (80038d0 <MX_GPIO_Init+0x1e0>)
 800385e:	f000 fe31 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN3_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN3_Pin;
 8003862:	2304      	movs	r3, #4
 8003864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003866:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <MX_GPIO_Init+0x1ec>)
 8003868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800386a:	2301      	movs	r3, #1
 800386c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN3_GPIO_Port, &GPIO_InitStruct);
 800386e:	f107 0310 	add.w	r3, r7, #16
 8003872:	4619      	mov	r1, r3
 8003874:	481b      	ldr	r0, [pc, #108]	; (80038e4 <MX_GPIO_Init+0x1f4>)
 8003876:	f000 fe25 	bl	80044c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : iCarriageStop_Pin */
  GPIO_InitStruct.Pin = iCarriageStop_Pin;
 800387a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800387e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003880:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <MX_GPIO_Init+0x1f0>)
 8003882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	2300      	movs	r3, #0
 8003886:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iCarriageStop_GPIO_Port, &GPIO_InitStruct);
 8003888:	f107 0310 	add.w	r3, r7, #16
 800388c:	4619      	mov	r1, r3
 800388e:	4812      	ldr	r0, [pc, #72]	; (80038d8 <MX_GPIO_Init+0x1e8>)
 8003890:	f000 fe18 	bl	80044c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8003894:	2200      	movs	r2, #0
 8003896:	2105      	movs	r1, #5
 8003898:	2008      	movs	r0, #8
 800389a:	f000 fad4 	bl	8003e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800389e:	2008      	movs	r0, #8
 80038a0:	f000 faed 	bl	8003e7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80038a4:	2200      	movs	r2, #0
 80038a6:	2105      	movs	r1, #5
 80038a8:	2017      	movs	r0, #23
 80038aa:	f000 facc 	bl	8003e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80038ae:	2017      	movs	r0, #23
 80038b0:	f000 fae5 	bl	8003e7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80038b4:	2200      	movs	r2, #0
 80038b6:	2105      	movs	r1, #5
 80038b8:	2028      	movs	r0, #40	; 0x28
 80038ba:	f000 fac4 	bl	8003e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80038be:	2028      	movs	r0, #40	; 0x28
 80038c0:	f000 fadd 	bl	8003e7e <HAL_NVIC_EnableIRQ>

}
 80038c4:	bf00      	nop
 80038c6:	3720      	adds	r7, #32
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40011000 	.word	0x40011000
 80038d4:	40010800 	.word	0x40010800
 80038d8:	40010c00 	.word	0x40010c00
 80038dc:	10210000 	.word	0x10210000
 80038e0:	10110000 	.word	0x10110000
 80038e4:	40011400 	.word	0x40011400

080038e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	vTaskDelay(1000);
 80038f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038f4:	f004 fae8 	bl	8007ec8 <vTaskDelay>
 80038f8:	e7fa      	b.n	80038f0 <StartDefaultTask+0x8>

080038fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038fe:	b672      	cpsid	i
}
 8003900:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003902:	e7fe      	b.n	8003902 <Error_Handler+0x8>

08003904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800390a:	4b18      	ldr	r3, [pc, #96]	; (800396c <HAL_MspInit+0x68>)
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	4a17      	ldr	r2, [pc, #92]	; (800396c <HAL_MspInit+0x68>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6193      	str	r3, [r2, #24]
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_MspInit+0x68>)
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_MspInit+0x68>)
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	4a11      	ldr	r2, [pc, #68]	; (800396c <HAL_MspInit+0x68>)
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392c:	61d3      	str	r3, [r2, #28]
 800392e:	4b0f      	ldr	r3, [pc, #60]	; (800396c <HAL_MspInit+0x68>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800393a:	2200      	movs	r2, #0
 800393c:	210f      	movs	r1, #15
 800393e:	f06f 0001 	mvn.w	r0, #1
 8003942:	f000 fa80 	bl	8003e46 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003946:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <HAL_MspInit+0x6c>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	4a04      	ldr	r2, [pc, #16]	; (8003970 <HAL_MspInit+0x6c>)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	40010000 	.word	0x40010000

08003974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397c:	f107 0310 	add.w	r3, r7, #16
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a19      	ldr	r2, [pc, #100]	; (80039f4 <HAL_SPI_MspInit+0x80>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d12b      	bne.n	80039ec <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003994:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <HAL_SPI_MspInit+0x84>)
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <HAL_SPI_MspInit+0x84>)
 800399a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800399e:	6193      	str	r3, [r2, #24]
 80039a0:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <HAL_SPI_MspInit+0x84>)
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ac:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <HAL_SPI_MspInit+0x84>)
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	4a11      	ldr	r2, [pc, #68]	; (80039f8 <HAL_SPI_MspInit+0x84>)
 80039b2:	f043 0304 	orr.w	r3, r3, #4
 80039b6:	6193      	str	r3, [r2, #24]
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_SPI_MspInit+0x84>)
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80039c4:	23a0      	movs	r3, #160	; 0xa0
 80039c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c8:	2302      	movs	r3, #2
 80039ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039cc:	2303      	movs	r3, #3
 80039ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d0:	f107 0310 	add.w	r3, r7, #16
 80039d4:	4619      	mov	r1, r3
 80039d6:	4809      	ldr	r0, [pc, #36]	; (80039fc <HAL_SPI_MspInit+0x88>)
 80039d8:	f000 fd74 	bl	80044c4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80039dc:	2200      	movs	r2, #0
 80039de:	2105      	movs	r1, #5
 80039e0:	2023      	movs	r0, #35	; 0x23
 80039e2:	f000 fa30 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80039e6:	2023      	movs	r0, #35	; 0x23
 80039e8:	f000 fa49 	bl	8003e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80039ec:	bf00      	nop
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40013000 	.word	0x40013000
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40010800 	.word	0x40010800

08003a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <HAL_TIM_Base_MspInit+0x44>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d113      	bne.n	8003a3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <HAL_TIM_Base_MspInit+0x48>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	4a0c      	ldr	r2, [pc, #48]	; (8003a48 <HAL_TIM_Base_MspInit+0x48>)
 8003a18:	f043 0302 	orr.w	r3, r3, #2
 8003a1c:	61d3      	str	r3, [r2, #28]
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_TIM_Base_MspInit+0x48>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2105      	movs	r1, #5
 8003a2e:	201d      	movs	r0, #29
 8003a30:	f000 fa09 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a34:	201d      	movs	r0, #29
 8003a36:	f000 fa22 	bl	8003e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40000400 	.word	0x40000400
 8003a48:	40021000 	.word	0x40021000

08003a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a54:	f107 030c 	add.w	r3, r7, #12
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <HAL_TIM_MspPostInit+0x7c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d129      	bne.n	8003ac0 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a6c:	4b17      	ldr	r3, [pc, #92]	; (8003acc <HAL_TIM_MspPostInit+0x80>)
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	4a16      	ldr	r2, [pc, #88]	; (8003acc <HAL_TIM_MspPostInit+0x80>)
 8003a72:	f043 0310 	orr.w	r3, r3, #16
 8003a76:	6193      	str	r3, [r2, #24]
 8003a78:	4b14      	ldr	r3, [pc, #80]	; (8003acc <HAL_TIM_MspPostInit+0x80>)
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = oPWM_STEP1_Pin;
 8003a84:	2340      	movs	r3, #64	; 0x40
 8003a86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(oPWM_STEP1_GPIO_Port, &GPIO_InitStruct);
 8003a90:	f107 030c 	add.w	r3, r7, #12
 8003a94:	4619      	mov	r1, r3
 8003a96:	480e      	ldr	r0, [pc, #56]	; (8003ad0 <HAL_TIM_MspPostInit+0x84>)
 8003a98:	f000 fd14 	bl	80044c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <HAL_TIM_MspPostInit+0x88>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	4a06      	ldr	r2, [pc, #24]	; (8003ad4 <HAL_TIM_MspPostInit+0x88>)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ac0:	bf00      	nop
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40011000 	.word	0x40011000
 8003ad4:	40010000 	.word	0x40010000

08003ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003adc:	e7fe      	b.n	8003adc <NMI_Handler+0x4>

08003ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ae2:	e7fe      	b.n	8003ae2 <HardFault_Handler+0x4>

08003ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae8:	e7fe      	b.n	8003ae8 <MemManage_Handler+0x4>

08003aea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aea:	b480      	push	{r7}
 8003aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aee:	e7fe      	b.n	8003aee <BusFault_Handler+0x4>

08003af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003af4:	e7fe      	b.n	8003af4 <UsageFault_Handler+0x4>

08003af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr

08003b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b06:	f000 f8ab 	bl	8003c60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003b0a:	f004 fdb9 	bl	8008680 <xTaskGetSchedulerState>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d001      	beq.n	8003b18 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003b14:	f005 faf0 	bl	80090f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b18:	bf00      	nop
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003b20:	2004      	movs	r0, #4
 8003b22:	f000 fe93 	bl	800484c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003b2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b32:	f000 fe8b 	bl	800484c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <TIM3_IRQHandler+0x10>)
 8003b42:	f002 fac5 	bl	80060d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20003dd4 	.word	0x20003dd4

08003b50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <SPI1_IRQHandler+0x10>)
 8003b56:	f001 feed 	bl	8005934 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20003e1c 	.word	0x20003e1c

08003b64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003b68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b6c:	f000 fe6e 	bl	800484c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003b70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b74:	f000 fe6a 	bl	800484c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b78:	bf00      	nop
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003b88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003b8a:	e003      	b.n	8003b94 <LoopCopyDataInit>

08003b8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003b8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003b90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003b92:	3104      	adds	r1, #4

08003b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003b94:	480a      	ldr	r0, [pc, #40]	; (8003bc0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003b96:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003b98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003b9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003b9c:	d3f6      	bcc.n	8003b8c <CopyDataInit>
  ldr r2, =_sbss
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003ba0:	e002      	b.n	8003ba8 <LoopFillZerobss>

08003ba2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003ba2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003ba4:	f842 3b04 	str.w	r3, [r2], #4

08003ba8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003ba8:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003baa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003bac:	d3f9      	bcc.n	8003ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003bae:	f7ff ffe5 	bl	8003b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bb2:	f005 fc6d 	bl	8009490 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bb6:	f7ff fc87 	bl	80034c8 <main>
  bx lr
 8003bba:	4770      	bx	lr
  ldr r3, =_sidata
 8003bbc:	0800960c 	.word	0x0800960c
  ldr r0, =_sdata
 8003bc0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003bc4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8003bc8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003bcc:	20003ed8 	.word	0x20003ed8

08003bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bd0:	e7fe      	b.n	8003bd0 <ADC1_2_IRQHandler>
	...

08003bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bd8:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <HAL_Init+0x28>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a07      	ldr	r2, [pc, #28]	; (8003bfc <HAL_Init+0x28>)
 8003bde:	f043 0310 	orr.w	r3, r3, #16
 8003be2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003be4:	2003      	movs	r0, #3
 8003be6:	f000 f923 	bl	8003e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bea:	200f      	movs	r0, #15
 8003bec:	f000 f808 	bl	8003c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bf0:	f7ff fe88 	bl	8003904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40022000 	.word	0x40022000

08003c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c08:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <HAL_InitTick+0x54>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_InitTick+0x58>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	4619      	mov	r1, r3
 8003c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f93b 	bl	8003e9a <HAL_SYSTICK_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e00e      	b.n	8003c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b0f      	cmp	r3, #15
 8003c32:	d80a      	bhi.n	8003c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c34:	2200      	movs	r2, #0
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	f000 f903 	bl	8003e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c40:	4a06      	ldr	r2, [pc, #24]	; (8003c5c <HAL_InitTick+0x5c>)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e000      	b.n	8003c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20000000 	.word	0x20000000
 8003c58:	20000008 	.word	0x20000008
 8003c5c:	20000004 	.word	0x20000004

08003c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_IncTick+0x1c>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_IncTick+0x20>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4413      	add	r3, r2
 8003c70:	4a03      	ldr	r2, [pc, #12]	; (8003c80 <HAL_IncTick+0x20>)
 8003c72:	6013      	str	r3, [r2, #0]
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	20000008 	.word	0x20000008
 8003c80:	20003e74 	.word	0x20003e74

08003c84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return uwTick;
 8003c88:	4b02      	ldr	r3, [pc, #8]	; (8003c94 <HAL_GetTick+0x10>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr
 8003c94:	20003e74 	.word	0x20003e74

08003c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cca:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	60d3      	str	r3, [r2, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	f003 0307 	and.w	r3, r3, #7
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	db0b      	blt.n	8003d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	4906      	ldr	r1, [pc, #24]	; (8003d30 <__NVIC_EnableIRQ+0x34>)
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	e000e100 	.word	0xe000e100

08003d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	6039      	str	r1, [r7, #0]
 8003d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db0a      	blt.n	8003d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	490c      	ldr	r1, [pc, #48]	; (8003d80 <__NVIC_SetPriority+0x4c>)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	0112      	lsls	r2, r2, #4
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	440b      	add	r3, r1
 8003d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d5c:	e00a      	b.n	8003d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	4908      	ldr	r1, [pc, #32]	; (8003d84 <__NVIC_SetPriority+0x50>)
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	3b04      	subs	r3, #4
 8003d6c:	0112      	lsls	r2, r2, #4
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	440b      	add	r3, r1
 8003d72:	761a      	strb	r2, [r3, #24]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000e100 	.word	0xe000e100
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	; 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f1c3 0307 	rsb	r3, r3, #7
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	bf28      	it	cs
 8003da6:	2304      	movcs	r3, #4
 8003da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d902      	bls.n	8003db8 <NVIC_EncodePriority+0x30>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3b03      	subs	r3, #3
 8003db6:	e000      	b.n	8003dba <NVIC_EncodePriority+0x32>
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	401a      	ands	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43d9      	mvns	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	4313      	orrs	r3, r2
         );
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3724      	adds	r7, #36	; 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dfc:	d301      	bcc.n	8003e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00f      	b.n	8003e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <SysTick_Config+0x40>)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e0a:	210f      	movs	r1, #15
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	f7ff ff90 	bl	8003d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <SysTick_Config+0x40>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e1a:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <SysTick_Config+0x40>)
 8003e1c:	2207      	movs	r2, #7
 8003e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	e000e010 	.word	0xe000e010

08003e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff2d 	bl	8003c98 <__NVIC_SetPriorityGrouping>
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b086      	sub	sp, #24
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e58:	f7ff ff42 	bl	8003ce0 <__NVIC_GetPriorityGrouping>
 8003e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	6978      	ldr	r0, [r7, #20]
 8003e64:	f7ff ff90 	bl	8003d88 <NVIC_EncodePriority>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ff5f 	bl	8003d34 <__NVIC_SetPriority>
}
 8003e76:	bf00      	nop
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	4603      	mov	r3, r0
 8003e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff ff35 	bl	8003cfc <__NVIC_EnableIRQ>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff ffa2 	bl	8003dec <SysTick_Config>
 8003ea8:	4603      	mov	r3, r0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d005      	beq.n	8003ed6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
 8003ed4:	e0d6      	b.n	8004084 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 020e 	bic.w	r2, r2, #14
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b64      	ldr	r3, [pc, #400]	; (8004090 <HAL_DMA_Abort_IT+0x1dc>)
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d958      	bls.n	8003fb4 <HAL_DMA_Abort_IT+0x100>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a63      	ldr	r2, [pc, #396]	; (8004094 <HAL_DMA_Abort_IT+0x1e0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d04f      	beq.n	8003fac <HAL_DMA_Abort_IT+0xf8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a61      	ldr	r2, [pc, #388]	; (8004098 <HAL_DMA_Abort_IT+0x1e4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d048      	beq.n	8003fa8 <HAL_DMA_Abort_IT+0xf4>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a60      	ldr	r2, [pc, #384]	; (800409c <HAL_DMA_Abort_IT+0x1e8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d040      	beq.n	8003fa2 <HAL_DMA_Abort_IT+0xee>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a5e      	ldr	r2, [pc, #376]	; (80040a0 <HAL_DMA_Abort_IT+0x1ec>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d038      	beq.n	8003f9c <HAL_DMA_Abort_IT+0xe8>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a5d      	ldr	r2, [pc, #372]	; (80040a4 <HAL_DMA_Abort_IT+0x1f0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d030      	beq.n	8003f96 <HAL_DMA_Abort_IT+0xe2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a5b      	ldr	r2, [pc, #364]	; (80040a8 <HAL_DMA_Abort_IT+0x1f4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d028      	beq.n	8003f90 <HAL_DMA_Abort_IT+0xdc>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a53      	ldr	r2, [pc, #332]	; (8004090 <HAL_DMA_Abort_IT+0x1dc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d020      	beq.n	8003f8a <HAL_DMA_Abort_IT+0xd6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a57      	ldr	r2, [pc, #348]	; (80040ac <HAL_DMA_Abort_IT+0x1f8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d019      	beq.n	8003f86 <HAL_DMA_Abort_IT+0xd2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a56      	ldr	r2, [pc, #344]	; (80040b0 <HAL_DMA_Abort_IT+0x1fc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d012      	beq.n	8003f82 <HAL_DMA_Abort_IT+0xce>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a54      	ldr	r2, [pc, #336]	; (80040b4 <HAL_DMA_Abort_IT+0x200>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00a      	beq.n	8003f7c <HAL_DMA_Abort_IT+0xc8>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a53      	ldr	r2, [pc, #332]	; (80040b8 <HAL_DMA_Abort_IT+0x204>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d102      	bne.n	8003f76 <HAL_DMA_Abort_IT+0xc2>
 8003f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f74:	e01b      	b.n	8003fae <HAL_DMA_Abort_IT+0xfa>
 8003f76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f7a:	e018      	b.n	8003fae <HAL_DMA_Abort_IT+0xfa>
 8003f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f80:	e015      	b.n	8003fae <HAL_DMA_Abort_IT+0xfa>
 8003f82:	2310      	movs	r3, #16
 8003f84:	e013      	b.n	8003fae <HAL_DMA_Abort_IT+0xfa>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e011      	b.n	8003fae <HAL_DMA_Abort_IT+0xfa>
 8003f8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f8e:	e00e      	b.n	8003fae <HAL_DMA_Abort_IT+0xfa>
 8003f90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f94:	e00b      	b.n	8003fae <HAL_DMA_Abort_IT+0xfa>
 8003f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f9a:	e008      	b.n	8003fae <HAL_DMA_Abort_IT+0xfa>
 8003f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa0:	e005      	b.n	8003fae <HAL_DMA_Abort_IT+0xfa>
 8003fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fa6:	e002      	b.n	8003fae <HAL_DMA_Abort_IT+0xfa>
 8003fa8:	2310      	movs	r3, #16
 8003faa:	e000      	b.n	8003fae <HAL_DMA_Abort_IT+0xfa>
 8003fac:	2301      	movs	r3, #1
 8003fae:	4a43      	ldr	r2, [pc, #268]	; (80040bc <HAL_DMA_Abort_IT+0x208>)
 8003fb0:	6053      	str	r3, [r2, #4]
 8003fb2:	e057      	b.n	8004064 <HAL_DMA_Abort_IT+0x1b0>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a36      	ldr	r2, [pc, #216]	; (8004094 <HAL_DMA_Abort_IT+0x1e0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d04f      	beq.n	800405e <HAL_DMA_Abort_IT+0x1aa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a35      	ldr	r2, [pc, #212]	; (8004098 <HAL_DMA_Abort_IT+0x1e4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d048      	beq.n	800405a <HAL_DMA_Abort_IT+0x1a6>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a33      	ldr	r2, [pc, #204]	; (800409c <HAL_DMA_Abort_IT+0x1e8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d040      	beq.n	8004054 <HAL_DMA_Abort_IT+0x1a0>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a32      	ldr	r2, [pc, #200]	; (80040a0 <HAL_DMA_Abort_IT+0x1ec>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d038      	beq.n	800404e <HAL_DMA_Abort_IT+0x19a>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a30      	ldr	r2, [pc, #192]	; (80040a4 <HAL_DMA_Abort_IT+0x1f0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d030      	beq.n	8004048 <HAL_DMA_Abort_IT+0x194>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <HAL_DMA_Abort_IT+0x1f4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d028      	beq.n	8004042 <HAL_DMA_Abort_IT+0x18e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a26      	ldr	r2, [pc, #152]	; (8004090 <HAL_DMA_Abort_IT+0x1dc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d020      	beq.n	800403c <HAL_DMA_Abort_IT+0x188>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2b      	ldr	r2, [pc, #172]	; (80040ac <HAL_DMA_Abort_IT+0x1f8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d019      	beq.n	8004038 <HAL_DMA_Abort_IT+0x184>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a29      	ldr	r2, [pc, #164]	; (80040b0 <HAL_DMA_Abort_IT+0x1fc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d012      	beq.n	8004034 <HAL_DMA_Abort_IT+0x180>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a28      	ldr	r2, [pc, #160]	; (80040b4 <HAL_DMA_Abort_IT+0x200>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00a      	beq.n	800402e <HAL_DMA_Abort_IT+0x17a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a26      	ldr	r2, [pc, #152]	; (80040b8 <HAL_DMA_Abort_IT+0x204>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d102      	bne.n	8004028 <HAL_DMA_Abort_IT+0x174>
 8004022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004026:	e01b      	b.n	8004060 <HAL_DMA_Abort_IT+0x1ac>
 8004028:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800402c:	e018      	b.n	8004060 <HAL_DMA_Abort_IT+0x1ac>
 800402e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004032:	e015      	b.n	8004060 <HAL_DMA_Abort_IT+0x1ac>
 8004034:	2310      	movs	r3, #16
 8004036:	e013      	b.n	8004060 <HAL_DMA_Abort_IT+0x1ac>
 8004038:	2301      	movs	r3, #1
 800403a:	e011      	b.n	8004060 <HAL_DMA_Abort_IT+0x1ac>
 800403c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004040:	e00e      	b.n	8004060 <HAL_DMA_Abort_IT+0x1ac>
 8004042:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004046:	e00b      	b.n	8004060 <HAL_DMA_Abort_IT+0x1ac>
 8004048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800404c:	e008      	b.n	8004060 <HAL_DMA_Abort_IT+0x1ac>
 800404e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004052:	e005      	b.n	8004060 <HAL_DMA_Abort_IT+0x1ac>
 8004054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004058:	e002      	b.n	8004060 <HAL_DMA_Abort_IT+0x1ac>
 800405a:	2310      	movs	r3, #16
 800405c:	e000      	b.n	8004060 <HAL_DMA_Abort_IT+0x1ac>
 800405e:	2301      	movs	r3, #1
 8004060:	4a17      	ldr	r2, [pc, #92]	; (80040c0 <HAL_DMA_Abort_IT+0x20c>)
 8004062:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
    } 
  }
  return status;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40020080 	.word	0x40020080
 8004094:	40020008 	.word	0x40020008
 8004098:	4002001c 	.word	0x4002001c
 800409c:	40020030 	.word	0x40020030
 80040a0:	40020044 	.word	0x40020044
 80040a4:	40020058 	.word	0x40020058
 80040a8:	4002006c 	.word	0x4002006c
 80040ac:	40020408 	.word	0x40020408
 80040b0:	4002041c 	.word	0x4002041c
 80040b4:	40020430 	.word	0x40020430
 80040b8:	40020444 	.word	0x40020444
 80040bc:	40020400 	.word	0x40020400
 80040c0:	40020000 	.word	0x40020000

080040c4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80040c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80040de:	4b2f      	ldr	r3, [pc, #188]	; (800419c <HAL_FLASH_Program+0xd8>)
 80040e0:	7e1b      	ldrb	r3, [r3, #24]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_FLASH_Program+0x26>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e054      	b.n	8004194 <HAL_FLASH_Program+0xd0>
 80040ea:	4b2c      	ldr	r3, [pc, #176]	; (800419c <HAL_FLASH_Program+0xd8>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040f4:	f000 f8a8 	bl	8004248 <FLASH_WaitForLastOperation>
 80040f8:	4603      	mov	r3, r0
 80040fa:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d144      	bne.n	800418c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d102      	bne.n	800410e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004108:	2301      	movs	r3, #1
 800410a:	757b      	strb	r3, [r7, #21]
 800410c:	e007      	b.n	800411e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d102      	bne.n	800411a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004114:	2302      	movs	r3, #2
 8004116:	757b      	strb	r3, [r7, #21]
 8004118:	e001      	b.n	800411e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800411a:	2304      	movs	r3, #4
 800411c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800411e:	2300      	movs	r3, #0
 8004120:	75bb      	strb	r3, [r7, #22]
 8004122:	e02d      	b.n	8004180 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004124:	7dbb      	ldrb	r3, [r7, #22]
 8004126:	005a      	lsls	r2, r3, #1
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	eb02 0c03 	add.w	ip, r2, r3
 800412e:	7dbb      	ldrb	r3, [r7, #22]
 8004130:	0119      	lsls	r1, r3, #4
 8004132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004136:	f1c1 0620 	rsb	r6, r1, #32
 800413a:	f1a1 0020 	sub.w	r0, r1, #32
 800413e:	fa22 f401 	lsr.w	r4, r2, r1
 8004142:	fa03 f606 	lsl.w	r6, r3, r6
 8004146:	4334      	orrs	r4, r6
 8004148:	fa23 f000 	lsr.w	r0, r3, r0
 800414c:	4304      	orrs	r4, r0
 800414e:	fa23 f501 	lsr.w	r5, r3, r1
 8004152:	b2a3      	uxth	r3, r4
 8004154:	4619      	mov	r1, r3
 8004156:	4660      	mov	r0, ip
 8004158:	f000 f85a 	bl	8004210 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800415c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004160:	f000 f872 	bl	8004248 <FLASH_WaitForLastOperation>
 8004164:	4603      	mov	r3, r0
 8004166:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004168:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <HAL_FLASH_Program+0xdc>)
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	4a0c      	ldr	r2, [pc, #48]	; (80041a0 <HAL_FLASH_Program+0xdc>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d107      	bne.n	800418a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800417a:	7dbb      	ldrb	r3, [r7, #22]
 800417c:	3301      	adds	r3, #1
 800417e:	75bb      	strb	r3, [r7, #22]
 8004180:	7dba      	ldrb	r2, [r7, #22]
 8004182:	7d7b      	ldrb	r3, [r7, #21]
 8004184:	429a      	cmp	r2, r3
 8004186:	d3cd      	bcc.n	8004124 <HAL_FLASH_Program+0x60>
 8004188:	e000      	b.n	800418c <HAL_FLASH_Program+0xc8>
      {
        break;
 800418a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800418c:	4b03      	ldr	r3, [pc, #12]	; (800419c <HAL_FLASH_Program+0xd8>)
 800418e:	2200      	movs	r2, #0
 8004190:	761a      	strb	r2, [r3, #24]

  return status;
 8004192:	7dfb      	ldrb	r3, [r7, #23]
}
 8004194:	4618      	mov	r0, r3
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800419c:	20003e78 	.word	0x20003e78
 80041a0:	40022000 	.word	0x40022000

080041a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <HAL_FLASH_Unlock+0x40>)
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00d      	beq.n	80041d6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80041ba:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <HAL_FLASH_Unlock+0x40>)
 80041bc:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <HAL_FLASH_Unlock+0x44>)
 80041be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80041c0:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <HAL_FLASH_Unlock+0x40>)
 80041c2:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <HAL_FLASH_Unlock+0x48>)
 80041c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80041c6:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <HAL_FLASH_Unlock+0x40>)
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80041d6:	79fb      	ldrb	r3, [r7, #7]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40022000 	.word	0x40022000
 80041e8:	45670123 	.word	0x45670123
 80041ec:	cdef89ab 	.word	0xcdef89ab

080041f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <HAL_FLASH_Lock+0x1c>)
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	4a04      	ldr	r2, [pc, #16]	; (800420c <HAL_FLASH_Lock+0x1c>)
 80041fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40022000 	.word	0x40022000

08004210 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800421c:	4b08      	ldr	r3, [pc, #32]	; (8004240 <FLASH_Program_HalfWord+0x30>)
 800421e:	2200      	movs	r2, #0
 8004220:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004222:	4b08      	ldr	r3, [pc, #32]	; (8004244 <FLASH_Program_HalfWord+0x34>)
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	4a07      	ldr	r2, [pc, #28]	; (8004244 <FLASH_Program_HalfWord+0x34>)
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	887a      	ldrh	r2, [r7, #2]
 8004232:	801a      	strh	r2, [r3, #0]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20003e78 	.word	0x20003e78
 8004244:	40022000 	.word	0x40022000

08004248 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004250:	f7ff fd18 	bl	8003c84 <HAL_GetTick>
 8004254:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004256:	e010      	b.n	800427a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d00c      	beq.n	800427a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <FLASH_WaitForLastOperation+0x2e>
 8004266:	f7ff fd0d 	bl	8003c84 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	429a      	cmp	r2, r3
 8004274:	d201      	bcs.n	800427a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e025      	b.n	80042c6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800427a:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <FLASH_WaitForLastOperation+0x88>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e8      	bne.n	8004258 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <FLASH_WaitForLastOperation+0x88>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <FLASH_WaitForLastOperation+0x88>)
 8004294:	2220      	movs	r2, #32
 8004296:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004298:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <FLASH_WaitForLastOperation+0x88>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <FLASH_WaitForLastOperation+0x88>)
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <FLASH_WaitForLastOperation+0x88>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80042bc:	f000 f80a 	bl	80042d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40022000 	.word	0x40022000

080042d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <FLASH_SetErrorCode+0x98>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80042ea:	4b21      	ldr	r3, [pc, #132]	; (8004370 <FLASH_SetErrorCode+0x9c>)
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f043 0302 	orr.w	r3, r3, #2
 80042f2:	4a1f      	ldr	r2, [pc, #124]	; (8004370 <FLASH_SetErrorCode+0x9c>)
 80042f4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f043 0310 	orr.w	r3, r3, #16
 80042fc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80042fe:	4b1b      	ldr	r3, [pc, #108]	; (800436c <FLASH_SetErrorCode+0x98>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800430a:	4b19      	ldr	r3, [pc, #100]	; (8004370 <FLASH_SetErrorCode+0x9c>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	4a17      	ldr	r2, [pc, #92]	; (8004370 <FLASH_SetErrorCode+0x9c>)
 8004314:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f043 0304 	orr.w	r3, r3, #4
 800431c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800431e:	4b13      	ldr	r3, [pc, #76]	; (800436c <FLASH_SetErrorCode+0x98>)
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <FLASH_SetErrorCode+0x9c>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f043 0304 	orr.w	r3, r3, #4
 8004332:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <FLASH_SetErrorCode+0x9c>)
 8004334:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <FLASH_SetErrorCode+0x98>)
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	4a0c      	ldr	r2, [pc, #48]	; (800436c <FLASH_SetErrorCode+0x98>)
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f240 1201 	movw	r2, #257	; 0x101
 8004348:	4293      	cmp	r3, r2
 800434a:	d106      	bne.n	800435a <FLASH_SetErrorCode+0x86>
 800434c:	4b07      	ldr	r3, [pc, #28]	; (800436c <FLASH_SetErrorCode+0x98>)
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	4a06      	ldr	r2, [pc, #24]	; (800436c <FLASH_SetErrorCode+0x98>)
 8004352:	f023 0301 	bic.w	r3, r3, #1
 8004356:	61d3      	str	r3, [r2, #28]
}  
 8004358:	e002      	b.n	8004360 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800435a:	4a04      	ldr	r2, [pc, #16]	; (800436c <FLASH_SetErrorCode+0x98>)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	60d3      	str	r3, [r2, #12]
}  
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40022000 	.word	0x40022000
 8004370:	20003e78 	.word	0x20003e78

08004374 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004386:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <HAL_FLASHEx_Erase+0xd0>)
 8004388:	7e1b      	ldrb	r3, [r3, #24]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_FLASHEx_Erase+0x1e>
 800438e:	2302      	movs	r3, #2
 8004390:	e053      	b.n	800443a <HAL_FLASHEx_Erase+0xc6>
 8004392:	4b2c      	ldr	r3, [pc, #176]	; (8004444 <HAL_FLASHEx_Erase+0xd0>)
 8004394:	2201      	movs	r2, #1
 8004396:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d116      	bne.n	80043ce <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80043a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043a4:	f7ff ff50 	bl	8004248 <FLASH_WaitForLastOperation>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d141      	bne.n	8004432 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80043ae:	2001      	movs	r0, #1
 80043b0:	f000 f84c 	bl	800444c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043b8:	f7ff ff46 	bl	8004248 <FLASH_WaitForLastOperation>
 80043bc:	4603      	mov	r3, r0
 80043be:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80043c0:	4b21      	ldr	r3, [pc, #132]	; (8004448 <HAL_FLASHEx_Erase+0xd4>)
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	4a20      	ldr	r2, [pc, #128]	; (8004448 <HAL_FLASHEx_Erase+0xd4>)
 80043c6:	f023 0304 	bic.w	r3, r3, #4
 80043ca:	6113      	str	r3, [r2, #16]
 80043cc:	e031      	b.n	8004432 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80043ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043d2:	f7ff ff39 	bl	8004248 <FLASH_WaitForLastOperation>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d12a      	bne.n	8004432 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	f04f 32ff 	mov.w	r2, #4294967295
 80043e2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	e019      	b.n	8004420 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80043ec:	68b8      	ldr	r0, [r7, #8]
 80043ee:	f000 f849 	bl	8004484 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043f6:	f7ff ff27 	bl	8004248 <FLASH_WaitForLastOperation>
 80043fa:	4603      	mov	r3, r0
 80043fc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_FLASHEx_Erase+0xd4>)
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	4a11      	ldr	r2, [pc, #68]	; (8004448 <HAL_FLASHEx_Erase+0xd4>)
 8004404:	f023 0302 	bic.w	r3, r3, #2
 8004408:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	601a      	str	r2, [r3, #0]
            break;
 8004416:	e00c      	b.n	8004432 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	02da      	lsls	r2, r3, #11
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	d3dc      	bcc.n	80043ec <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004432:	4b04      	ldr	r3, [pc, #16]	; (8004444 <HAL_FLASHEx_Erase+0xd0>)
 8004434:	2200      	movs	r2, #0
 8004436:	761a      	strb	r2, [r3, #24]

  return status;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20003e78 	.word	0x20003e78
 8004448:	40022000 	.word	0x40022000

0800444c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <FLASH_MassErase+0x30>)
 8004456:	2200      	movs	r2, #0
 8004458:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <FLASH_MassErase+0x34>)
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	4a08      	ldr	r2, [pc, #32]	; (8004480 <FLASH_MassErase+0x34>)
 8004460:	f043 0304 	orr.w	r3, r3, #4
 8004464:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <FLASH_MassErase+0x34>)
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	4a05      	ldr	r2, [pc, #20]	; (8004480 <FLASH_MassErase+0x34>)
 800446c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004470:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr
 800447c:	20003e78 	.word	0x20003e78
 8004480:	40022000 	.word	0x40022000

08004484 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <FLASH_PageErase+0x38>)
 800448e:	2200      	movs	r2, #0
 8004490:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <FLASH_PageErase+0x3c>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <FLASH_PageErase+0x3c>)
 8004498:	f043 0302 	orr.w	r3, r3, #2
 800449c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800449e:	4a08      	ldr	r2, [pc, #32]	; (80044c0 <FLASH_PageErase+0x3c>)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <FLASH_PageErase+0x3c>)
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	4a05      	ldr	r2, [pc, #20]	; (80044c0 <FLASH_PageErase+0x3c>)
 80044aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ae:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	20003e78 	.word	0x20003e78
 80044c0:	40022000 	.word	0x40022000

080044c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b08b      	sub	sp, #44	; 0x2c
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ce:	2300      	movs	r3, #0
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044d2:	2300      	movs	r3, #0
 80044d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044d6:	e179      	b.n	80047cc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80044d8:	2201      	movs	r2, #1
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	4013      	ands	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	f040 8168 	bne.w	80047c6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	4aa0      	ldr	r2, [pc, #640]	; (800477c <HAL_GPIO_Init+0x2b8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d05e      	beq.n	80045be <HAL_GPIO_Init+0xfa>
 8004500:	4a9e      	ldr	r2, [pc, #632]	; (800477c <HAL_GPIO_Init+0x2b8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d875      	bhi.n	80045f2 <HAL_GPIO_Init+0x12e>
 8004506:	4a9e      	ldr	r2, [pc, #632]	; (8004780 <HAL_GPIO_Init+0x2bc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d058      	beq.n	80045be <HAL_GPIO_Init+0xfa>
 800450c:	4a9c      	ldr	r2, [pc, #624]	; (8004780 <HAL_GPIO_Init+0x2bc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d86f      	bhi.n	80045f2 <HAL_GPIO_Init+0x12e>
 8004512:	4a9c      	ldr	r2, [pc, #624]	; (8004784 <HAL_GPIO_Init+0x2c0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d052      	beq.n	80045be <HAL_GPIO_Init+0xfa>
 8004518:	4a9a      	ldr	r2, [pc, #616]	; (8004784 <HAL_GPIO_Init+0x2c0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d869      	bhi.n	80045f2 <HAL_GPIO_Init+0x12e>
 800451e:	4a9a      	ldr	r2, [pc, #616]	; (8004788 <HAL_GPIO_Init+0x2c4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d04c      	beq.n	80045be <HAL_GPIO_Init+0xfa>
 8004524:	4a98      	ldr	r2, [pc, #608]	; (8004788 <HAL_GPIO_Init+0x2c4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d863      	bhi.n	80045f2 <HAL_GPIO_Init+0x12e>
 800452a:	4a98      	ldr	r2, [pc, #608]	; (800478c <HAL_GPIO_Init+0x2c8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d046      	beq.n	80045be <HAL_GPIO_Init+0xfa>
 8004530:	4a96      	ldr	r2, [pc, #600]	; (800478c <HAL_GPIO_Init+0x2c8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d85d      	bhi.n	80045f2 <HAL_GPIO_Init+0x12e>
 8004536:	2b12      	cmp	r3, #18
 8004538:	d82a      	bhi.n	8004590 <HAL_GPIO_Init+0xcc>
 800453a:	2b12      	cmp	r3, #18
 800453c:	d859      	bhi.n	80045f2 <HAL_GPIO_Init+0x12e>
 800453e:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <HAL_GPIO_Init+0x80>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	080045bf 	.word	0x080045bf
 8004548:	08004599 	.word	0x08004599
 800454c:	080045ab 	.word	0x080045ab
 8004550:	080045ed 	.word	0x080045ed
 8004554:	080045f3 	.word	0x080045f3
 8004558:	080045f3 	.word	0x080045f3
 800455c:	080045f3 	.word	0x080045f3
 8004560:	080045f3 	.word	0x080045f3
 8004564:	080045f3 	.word	0x080045f3
 8004568:	080045f3 	.word	0x080045f3
 800456c:	080045f3 	.word	0x080045f3
 8004570:	080045f3 	.word	0x080045f3
 8004574:	080045f3 	.word	0x080045f3
 8004578:	080045f3 	.word	0x080045f3
 800457c:	080045f3 	.word	0x080045f3
 8004580:	080045f3 	.word	0x080045f3
 8004584:	080045f3 	.word	0x080045f3
 8004588:	080045a1 	.word	0x080045a1
 800458c:	080045b5 	.word	0x080045b5
 8004590:	4a7f      	ldr	r2, [pc, #508]	; (8004790 <HAL_GPIO_Init+0x2cc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004596:	e02c      	b.n	80045f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	623b      	str	r3, [r7, #32]
          break;
 800459e:	e029      	b.n	80045f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	3304      	adds	r3, #4
 80045a6:	623b      	str	r3, [r7, #32]
          break;
 80045a8:	e024      	b.n	80045f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	3308      	adds	r3, #8
 80045b0:	623b      	str	r3, [r7, #32]
          break;
 80045b2:	e01f      	b.n	80045f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	330c      	adds	r3, #12
 80045ba:	623b      	str	r3, [r7, #32]
          break;
 80045bc:	e01a      	b.n	80045f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045c6:	2304      	movs	r3, #4
 80045c8:	623b      	str	r3, [r7, #32]
          break;
 80045ca:	e013      	b.n	80045f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d105      	bne.n	80045e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045d4:	2308      	movs	r3, #8
 80045d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	611a      	str	r2, [r3, #16]
          break;
 80045de:	e009      	b.n	80045f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045e0:	2308      	movs	r3, #8
 80045e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	615a      	str	r2, [r3, #20]
          break;
 80045ea:	e003      	b.n	80045f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045ec:	2300      	movs	r3, #0
 80045ee:	623b      	str	r3, [r7, #32]
          break;
 80045f0:	e000      	b.n	80045f4 <HAL_GPIO_Init+0x130>
          break;
 80045f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2bff      	cmp	r3, #255	; 0xff
 80045f8:	d801      	bhi.n	80045fe <HAL_GPIO_Init+0x13a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	e001      	b.n	8004602 <HAL_GPIO_Init+0x13e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3304      	adds	r3, #4
 8004602:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2bff      	cmp	r3, #255	; 0xff
 8004608:	d802      	bhi.n	8004610 <HAL_GPIO_Init+0x14c>
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	e002      	b.n	8004616 <HAL_GPIO_Init+0x152>
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	3b08      	subs	r3, #8
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	210f      	movs	r1, #15
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	fa01 f303 	lsl.w	r3, r1, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	401a      	ands	r2, r3
 8004628:	6a39      	ldr	r1, [r7, #32]
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	fa01 f303 	lsl.w	r3, r1, r3
 8004630:	431a      	orrs	r2, r3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80c1 	beq.w	80047c6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004644:	4b53      	ldr	r3, [pc, #332]	; (8004794 <HAL_GPIO_Init+0x2d0>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	4a52      	ldr	r2, [pc, #328]	; (8004794 <HAL_GPIO_Init+0x2d0>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6193      	str	r3, [r2, #24]
 8004650:	4b50      	ldr	r3, [pc, #320]	; (8004794 <HAL_GPIO_Init+0x2d0>)
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800465c:	4a4e      	ldr	r2, [pc, #312]	; (8004798 <HAL_GPIO_Init+0x2d4>)
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	089b      	lsrs	r3, r3, #2
 8004662:	3302      	adds	r3, #2
 8004664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004668:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	220f      	movs	r2, #15
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4013      	ands	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a46      	ldr	r2, [pc, #280]	; (800479c <HAL_GPIO_Init+0x2d8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d01f      	beq.n	80046c8 <HAL_GPIO_Init+0x204>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a45      	ldr	r2, [pc, #276]	; (80047a0 <HAL_GPIO_Init+0x2dc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d019      	beq.n	80046c4 <HAL_GPIO_Init+0x200>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a44      	ldr	r2, [pc, #272]	; (80047a4 <HAL_GPIO_Init+0x2e0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <HAL_GPIO_Init+0x1fc>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a43      	ldr	r2, [pc, #268]	; (80047a8 <HAL_GPIO_Init+0x2e4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00d      	beq.n	80046bc <HAL_GPIO_Init+0x1f8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a42      	ldr	r2, [pc, #264]	; (80047ac <HAL_GPIO_Init+0x2e8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <HAL_GPIO_Init+0x1f4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a41      	ldr	r2, [pc, #260]	; (80047b0 <HAL_GPIO_Init+0x2ec>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d101      	bne.n	80046b4 <HAL_GPIO_Init+0x1f0>
 80046b0:	2305      	movs	r3, #5
 80046b2:	e00a      	b.n	80046ca <HAL_GPIO_Init+0x206>
 80046b4:	2306      	movs	r3, #6
 80046b6:	e008      	b.n	80046ca <HAL_GPIO_Init+0x206>
 80046b8:	2304      	movs	r3, #4
 80046ba:	e006      	b.n	80046ca <HAL_GPIO_Init+0x206>
 80046bc:	2303      	movs	r3, #3
 80046be:	e004      	b.n	80046ca <HAL_GPIO_Init+0x206>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e002      	b.n	80046ca <HAL_GPIO_Init+0x206>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <HAL_GPIO_Init+0x206>
 80046c8:	2300      	movs	r3, #0
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	f002 0203 	and.w	r2, r2, #3
 80046d0:	0092      	lsls	r2, r2, #2
 80046d2:	4093      	lsls	r3, r2
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046da:	492f      	ldr	r1, [pc, #188]	; (8004798 <HAL_GPIO_Init+0x2d4>)
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	089b      	lsrs	r3, r3, #2
 80046e0:	3302      	adds	r3, #2
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d006      	beq.n	8004702 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046f4:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	492e      	ldr	r1, [pc, #184]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	600b      	str	r3, [r1, #0]
 8004700:	e006      	b.n	8004710 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004702:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	43db      	mvns	r3, r3
 800470a:	492a      	ldr	r1, [pc, #168]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 800470c:	4013      	ands	r3, r2
 800470e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d006      	beq.n	800472a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800471c:	4b25      	ldr	r3, [pc, #148]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	4924      	ldr	r1, [pc, #144]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]
 8004728:	e006      	b.n	8004738 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800472a:	4b22      	ldr	r3, [pc, #136]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	43db      	mvns	r3, r3
 8004732:	4920      	ldr	r1, [pc, #128]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 8004734:	4013      	ands	r3, r2
 8004736:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d006      	beq.n	8004752 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004744:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	491a      	ldr	r1, [pc, #104]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	4313      	orrs	r3, r2
 800474e:	608b      	str	r3, [r1, #8]
 8004750:	e006      	b.n	8004760 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004752:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	43db      	mvns	r3, r3
 800475a:	4916      	ldr	r1, [pc, #88]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 800475c:	4013      	ands	r3, r2
 800475e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d025      	beq.n	80047b8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	4910      	ldr	r1, [pc, #64]	; (80047b4 <HAL_GPIO_Init+0x2f0>)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	4313      	orrs	r3, r2
 8004776:	60cb      	str	r3, [r1, #12]
 8004778:	e025      	b.n	80047c6 <HAL_GPIO_Init+0x302>
 800477a:	bf00      	nop
 800477c:	10320000 	.word	0x10320000
 8004780:	10310000 	.word	0x10310000
 8004784:	10220000 	.word	0x10220000
 8004788:	10210000 	.word	0x10210000
 800478c:	10120000 	.word	0x10120000
 8004790:	10110000 	.word	0x10110000
 8004794:	40021000 	.word	0x40021000
 8004798:	40010000 	.word	0x40010000
 800479c:	40010800 	.word	0x40010800
 80047a0:	40010c00 	.word	0x40010c00
 80047a4:	40011000 	.word	0x40011000
 80047a8:	40011400 	.word	0x40011400
 80047ac:	40011800 	.word	0x40011800
 80047b0:	40011c00 	.word	0x40011c00
 80047b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <HAL_GPIO_Init+0x324>)
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	43db      	mvns	r3, r3
 80047c0:	4909      	ldr	r1, [pc, #36]	; (80047e8 <HAL_GPIO_Init+0x324>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	3301      	adds	r3, #1
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	fa22 f303 	lsr.w	r3, r2, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f47f ae7e 	bne.w	80044d8 <HAL_GPIO_Init+0x14>
  }
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	372c      	adds	r7, #44	; 0x2c
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	40010400 	.word	0x40010400

080047ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	887b      	ldrh	r3, [r7, #2]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
 8004808:	e001      	b.n	800480e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800480e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr

0800481a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	460b      	mov	r3, r1
 8004824:	807b      	strh	r3, [r7, #2]
 8004826:	4613      	mov	r3, r2
 8004828:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800482a:	787b      	ldrb	r3, [r7, #1]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004830:	887a      	ldrh	r2, [r7, #2]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004836:	e003      	b.n	8004840 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004838:	887b      	ldrh	r3, [r7, #2]
 800483a:	041a      	lsls	r2, r3, #16
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	611a      	str	r2, [r3, #16]
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
	...

0800484c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d006      	beq.n	8004870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004862:	4a05      	ldr	r2, [pc, #20]	; (8004878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004864:	88fb      	ldrh	r3, [r7, #6]
 8004866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	4618      	mov	r0, r3
 800486c:	f7fc fc1e 	bl	80010ac <HAL_GPIO_EXTI_Callback>
  }
}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40010400 	.word	0x40010400

0800487c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e26c      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 8087 	beq.w	80049aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800489c:	4b92      	ldr	r3, [pc, #584]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 030c 	and.w	r3, r3, #12
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d00c      	beq.n	80048c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048a8:	4b8f      	ldr	r3, [pc, #572]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d112      	bne.n	80048da <HAL_RCC_OscConfig+0x5e>
 80048b4:	4b8c      	ldr	r3, [pc, #560]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c0:	d10b      	bne.n	80048da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c2:	4b89      	ldr	r3, [pc, #548]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d06c      	beq.n	80049a8 <HAL_RCC_OscConfig+0x12c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d168      	bne.n	80049a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e246      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e2:	d106      	bne.n	80048f2 <HAL_RCC_OscConfig+0x76>
 80048e4:	4b80      	ldr	r3, [pc, #512]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a7f      	ldr	r2, [pc, #508]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 80048ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	e02e      	b.n	8004950 <HAL_RCC_OscConfig+0xd4>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0x98>
 80048fa:	4b7b      	ldr	r3, [pc, #492]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a7a      	ldr	r2, [pc, #488]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 8004900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b78      	ldr	r3, [pc, #480]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a77      	ldr	r2, [pc, #476]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 800490c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e01d      	b.n	8004950 <HAL_RCC_OscConfig+0xd4>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800491c:	d10c      	bne.n	8004938 <HAL_RCC_OscConfig+0xbc>
 800491e:	4b72      	ldr	r3, [pc, #456]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a71      	ldr	r2, [pc, #452]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 8004924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	4b6f      	ldr	r3, [pc, #444]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a6e      	ldr	r2, [pc, #440]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 8004930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	e00b      	b.n	8004950 <HAL_RCC_OscConfig+0xd4>
 8004938:	4b6b      	ldr	r3, [pc, #428]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a6a      	ldr	r2, [pc, #424]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 800493e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	4b68      	ldr	r3, [pc, #416]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a67      	ldr	r2, [pc, #412]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 800494a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800494e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d013      	beq.n	8004980 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7ff f994 	bl	8003c84 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004960:	f7ff f990 	bl	8003c84 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e1fa      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	4b5d      	ldr	r3, [pc, #372]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0xe4>
 800497e:	e014      	b.n	80049aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7ff f980 	bl	8003c84 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004988:	f7ff f97c 	bl	8003c84 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e1e6      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499a:	4b53      	ldr	r3, [pc, #332]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x10c>
 80049a6:	e000      	b.n	80049aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d063      	beq.n	8004a7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049b6:	4b4c      	ldr	r3, [pc, #304]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00b      	beq.n	80049da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049c2:	4b49      	ldr	r3, [pc, #292]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d11c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x18c>
 80049ce:	4b46      	ldr	r3, [pc, #280]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d116      	bne.n	8004a08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049da:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_RCC_OscConfig+0x176>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d001      	beq.n	80049f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e1ba      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f2:	4b3d      	ldr	r3, [pc, #244]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4939      	ldr	r1, [pc, #228]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a06:	e03a      	b.n	8004a7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a10:	4b36      	ldr	r3, [pc, #216]	; (8004aec <HAL_RCC_OscConfig+0x270>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a16:	f7ff f935 	bl	8003c84 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a1e:	f7ff f931 	bl	8003c84 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e19b      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a30:	4b2d      	ldr	r3, [pc, #180]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	4927      	ldr	r1, [pc, #156]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	600b      	str	r3, [r1, #0]
 8004a50:	e015      	b.n	8004a7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a52:	4b26      	ldr	r3, [pc, #152]	; (8004aec <HAL_RCC_OscConfig+0x270>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7ff f914 	bl	8003c84 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a60:	f7ff f910 	bl	8003c84 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e17a      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a72:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d03a      	beq.n	8004b00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d019      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a92:	4b17      	ldr	r3, [pc, #92]	; (8004af0 <HAL_RCC_OscConfig+0x274>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a98:	f7ff f8f4 	bl	8003c84 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa0:	f7ff f8f0 	bl	8003c84 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e15a      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <HAL_RCC_OscConfig+0x26c>)
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004abe:	2001      	movs	r0, #1
 8004ac0:	f000 faa6 	bl	8005010 <RCC_Delay>
 8004ac4:	e01c      	b.n	8004b00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004acc:	f7ff f8da 	bl	8003c84 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad2:	e00f      	b.n	8004af4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad4:	f7ff f8d6 	bl	8003c84 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d908      	bls.n	8004af4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e140      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	42420000 	.word	0x42420000
 8004af0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af4:	4b9e      	ldr	r3, [pc, #632]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e9      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80a6 	beq.w	8004c5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b12:	4b97      	ldr	r3, [pc, #604]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10d      	bne.n	8004b3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1e:	4b94      	ldr	r3, [pc, #592]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	4a93      	ldr	r2, [pc, #588]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b28:	61d3      	str	r3, [r2, #28]
 8004b2a:	4b91      	ldr	r3, [pc, #580]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b32:	60bb      	str	r3, [r7, #8]
 8004b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b36:	2301      	movs	r3, #1
 8004b38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3a:	4b8e      	ldr	r3, [pc, #568]	; (8004d74 <HAL_RCC_OscConfig+0x4f8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d118      	bne.n	8004b78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b46:	4b8b      	ldr	r3, [pc, #556]	; (8004d74 <HAL_RCC_OscConfig+0x4f8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a8a      	ldr	r2, [pc, #552]	; (8004d74 <HAL_RCC_OscConfig+0x4f8>)
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b52:	f7ff f897 	bl	8003c84 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5a:	f7ff f893 	bl	8003c84 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b64      	cmp	r3, #100	; 0x64
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e0fd      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6c:	4b81      	ldr	r3, [pc, #516]	; (8004d74 <HAL_RCC_OscConfig+0x4f8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d106      	bne.n	8004b8e <HAL_RCC_OscConfig+0x312>
 8004b80:	4b7b      	ldr	r3, [pc, #492]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	4a7a      	ldr	r2, [pc, #488]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	6213      	str	r3, [r2, #32]
 8004b8c:	e02d      	b.n	8004bea <HAL_RCC_OscConfig+0x36e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10c      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x334>
 8004b96:	4b76      	ldr	r3, [pc, #472]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	4a75      	ldr	r2, [pc, #468]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	6213      	str	r3, [r2, #32]
 8004ba2:	4b73      	ldr	r3, [pc, #460]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	4a72      	ldr	r2, [pc, #456]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004ba8:	f023 0304 	bic.w	r3, r3, #4
 8004bac:	6213      	str	r3, [r2, #32]
 8004bae:	e01c      	b.n	8004bea <HAL_RCC_OscConfig+0x36e>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	d10c      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x356>
 8004bb8:	4b6d      	ldr	r3, [pc, #436]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	4a6c      	ldr	r2, [pc, #432]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004bbe:	f043 0304 	orr.w	r3, r3, #4
 8004bc2:	6213      	str	r3, [r2, #32]
 8004bc4:	4b6a      	ldr	r3, [pc, #424]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	4a69      	ldr	r2, [pc, #420]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6213      	str	r3, [r2, #32]
 8004bd0:	e00b      	b.n	8004bea <HAL_RCC_OscConfig+0x36e>
 8004bd2:	4b67      	ldr	r3, [pc, #412]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	4a66      	ldr	r2, [pc, #408]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	6213      	str	r3, [r2, #32]
 8004bde:	4b64      	ldr	r3, [pc, #400]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	4a63      	ldr	r2, [pc, #396]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004be4:	f023 0304 	bic.w	r3, r3, #4
 8004be8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d015      	beq.n	8004c1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf2:	f7ff f847 	bl	8003c84 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7ff f843 	bl	8003c84 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e0ab      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c10:	4b57      	ldr	r3, [pc, #348]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0ee      	beq.n	8004bfa <HAL_RCC_OscConfig+0x37e>
 8004c1c:	e014      	b.n	8004c48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c1e:	f7ff f831 	bl	8003c84 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c26:	f7ff f82d 	bl	8003c84 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e095      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3c:	4b4c      	ldr	r3, [pc, #304]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1ee      	bne.n	8004c26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4e:	4b48      	ldr	r3, [pc, #288]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	4a47      	ldr	r2, [pc, #284]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8081 	beq.w	8004d66 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c64:	4b42      	ldr	r3, [pc, #264]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d061      	beq.n	8004d34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d146      	bne.n	8004d06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c78:	4b3f      	ldr	r3, [pc, #252]	; (8004d78 <HAL_RCC_OscConfig+0x4fc>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7e:	f7ff f801 	bl	8003c84 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c86:	f7fe fffd 	bl	8003c84 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e067      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c98:	4b35      	ldr	r3, [pc, #212]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f0      	bne.n	8004c86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cac:	d108      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cae:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	492d      	ldr	r1, [pc, #180]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc0:	4b2b      	ldr	r3, [pc, #172]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a19      	ldr	r1, [r3, #32]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	4927      	ldr	r1, [pc, #156]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd8:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <HAL_RCC_OscConfig+0x4fc>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fe ffd1 	bl	8003c84 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce6:	f7fe ffcd 	bl	8003c84 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e037      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x46a>
 8004d04:	e02f      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d06:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <HAL_RCC_OscConfig+0x4fc>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fe ffba 	bl	8003c84 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d14:	f7fe ffb6 	bl	8003c84 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e020      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x498>
 8004d32:	e018      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e013      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d40:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <HAL_RCC_OscConfig+0x4f4>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d106      	bne.n	8004d62 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d001      	beq.n	8004d66 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40021000 	.word	0x40021000
 8004d74:	40007000 	.word	0x40007000
 8004d78:	42420060 	.word	0x42420060

08004d7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0d0      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d90:	4b6a      	ldr	r3, [pc, #424]	; (8004f3c <HAL_RCC_ClockConfig+0x1c0>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d910      	bls.n	8004dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b67      	ldr	r3, [pc, #412]	; (8004f3c <HAL_RCC_ClockConfig+0x1c0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f023 0207 	bic.w	r2, r3, #7
 8004da6:	4965      	ldr	r1, [pc, #404]	; (8004f3c <HAL_RCC_ClockConfig+0x1c0>)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dae:	4b63      	ldr	r3, [pc, #396]	; (8004f3c <HAL_RCC_ClockConfig+0x1c0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d001      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e0b8      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d020      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dd8:	4b59      	ldr	r3, [pc, #356]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4a58      	ldr	r2, [pc, #352]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004dde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004de2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004df0:	4b53      	ldr	r3, [pc, #332]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4a52      	ldr	r2, [pc, #328]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004df6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004dfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dfc:	4b50      	ldr	r3, [pc, #320]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	494d      	ldr	r1, [pc, #308]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d040      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d107      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e22:	4b47      	ldr	r3, [pc, #284]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d115      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e07f      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d107      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3a:	4b41      	ldr	r3, [pc, #260]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e073      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4a:	4b3d      	ldr	r3, [pc, #244]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e06b      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e5a:	4b39      	ldr	r3, [pc, #228]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f023 0203 	bic.w	r2, r3, #3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	4936      	ldr	r1, [pc, #216]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e6c:	f7fe ff0a 	bl	8003c84 <HAL_GetTick>
 8004e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e74:	f7fe ff06 	bl	8003c84 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e053      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8a:	4b2d      	ldr	r3, [pc, #180]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 020c 	and.w	r2, r3, #12
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d1eb      	bne.n	8004e74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b27      	ldr	r3, [pc, #156]	; (8004f3c <HAL_RCC_ClockConfig+0x1c0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d210      	bcs.n	8004ecc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b24      	ldr	r3, [pc, #144]	; (8004f3c <HAL_RCC_ClockConfig+0x1c0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 0207 	bic.w	r2, r3, #7
 8004eb2:	4922      	ldr	r1, [pc, #136]	; (8004f3c <HAL_RCC_ClockConfig+0x1c0>)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <HAL_RCC_ClockConfig+0x1c0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e032      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed8:	4b19      	ldr	r3, [pc, #100]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4916      	ldr	r1, [pc, #88]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ef6:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	490e      	ldr	r1, [pc, #56]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f0a:	f000 f821 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	091b      	lsrs	r3, r3, #4
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	490a      	ldr	r1, [pc, #40]	; (8004f44 <HAL_RCC_ClockConfig+0x1c8>)
 8004f1c:	5ccb      	ldrb	r3, [r1, r3]
 8004f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f22:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <HAL_RCC_ClockConfig+0x1cc>)
 8004f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f26:	4b09      	ldr	r3, [pc, #36]	; (8004f4c <HAL_RCC_ClockConfig+0x1d0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe fe68 	bl	8003c00 <HAL_InitTick>

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40022000 	.word	0x40022000
 8004f40:	40021000 	.word	0x40021000
 8004f44:	080095f4 	.word	0x080095f4
 8004f48:	20000000 	.word	0x20000000
 8004f4c:	20000004 	.word	0x20000004

08004f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f50:	b490      	push	{r4, r7}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f56:	4b2a      	ldr	r3, [pc, #168]	; (8005000 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f58:	1d3c      	adds	r4, r7, #4
 8004f5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f60:	f240 2301 	movw	r3, #513	; 0x201
 8004f64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f7a:	4b22      	ldr	r3, [pc, #136]	; (8005004 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d002      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0x40>
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0x46>
 8004f8e:	e02d      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f90:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f92:	623b      	str	r3, [r7, #32]
      break;
 8004f94:	e02d      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	0c9b      	lsrs	r3, r3, #18
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004fa8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d013      	beq.n	8004fdc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fb4:	4b13      	ldr	r3, [pc, #76]	; (8005004 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	0c5b      	lsrs	r3, r3, #17
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004fc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4a0e      	ldr	r2, [pc, #56]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fce:	fb02 f203 	mul.w	r2, r2, r3
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fda:	e004      	b.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	4a0b      	ldr	r2, [pc, #44]	; (800500c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fe0:	fb02 f303 	mul.w	r3, r2, r3
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	623b      	str	r3, [r7, #32]
      break;
 8004fea:	e002      	b.n	8004ff2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fec:	4b06      	ldr	r3, [pc, #24]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fee:	623b      	str	r3, [r7, #32]
      break;
 8004ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3728      	adds	r7, #40	; 0x28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc90      	pop	{r4, r7}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	08009590 	.word	0x08009590
 8005004:	40021000 	.word	0x40021000
 8005008:	007a1200 	.word	0x007a1200
 800500c:	003d0900 	.word	0x003d0900

08005010 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <RCC_Delay+0x34>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <RCC_Delay+0x38>)
 800501e:	fba2 2303 	umull	r2, r3, r2, r3
 8005022:	0a5b      	lsrs	r3, r3, #9
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800502c:	bf00      	nop
  }
  while (Delay --);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1e5a      	subs	r2, r3, #1
 8005032:	60fa      	str	r2, [r7, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f9      	bne.n	800502c <RCC_Delay+0x1c>
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr
 8005044:	20000000 	.word	0x20000000
 8005048:	10624dd3 	.word	0x10624dd3

0800504c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e076      	b.n	800514c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	2b00      	cmp	r3, #0
 8005064:	d108      	bne.n	8005078 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506e:	d009      	beq.n	8005084 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	61da      	str	r2, [r3, #28]
 8005076:	e005      	b.n	8005084 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fe fc68 	bl	8003974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	ea42 0103 	orr.w	r1, r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	0c1a      	lsrs	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f002 0204 	and.w	r2, r2, #4
 800512a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69da      	ldr	r2, [r3, #28]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800513a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_SPI_Transmit+0x22>
 8005172:	2302      	movs	r3, #2
 8005174:	e126      	b.n	80053c4 <HAL_SPI_Transmit+0x270>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800517e:	f7fe fd81 	bl	8003c84 <HAL_GetTick>
 8005182:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005184:	88fb      	ldrh	r3, [r7, #6]
 8005186:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d002      	beq.n	800519a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005194:	2302      	movs	r3, #2
 8005196:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005198:	e10b      	b.n	80053b2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_SPI_Transmit+0x52>
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051aa:	e102      	b.n	80053b2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2203      	movs	r2, #3
 80051b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f2:	d10f      	bne.n	8005214 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005202:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005212:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d007      	beq.n	8005232 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005230:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523a:	d14b      	bne.n	80052d4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_SPI_Transmit+0xf6>
 8005244:	8afb      	ldrh	r3, [r7, #22]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d13e      	bne.n	80052c8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	881a      	ldrh	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	1c9a      	adds	r2, r3, #2
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800526e:	e02b      	b.n	80052c8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b02      	cmp	r3, #2
 800527c:	d112      	bne.n	80052a4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	881a      	ldrh	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	1c9a      	adds	r2, r3, #2
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80052a2:	e011      	b.n	80052c8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052a4:	f7fe fcee 	bl	8003c84 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d803      	bhi.n	80052bc <HAL_SPI_Transmit+0x168>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ba:	d102      	bne.n	80052c2 <HAL_SPI_Transmit+0x16e>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052c6:	e074      	b.n	80053b2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1ce      	bne.n	8005270 <HAL_SPI_Transmit+0x11c>
 80052d2:	e04c      	b.n	800536e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <HAL_SPI_Transmit+0x18e>
 80052dc:	8afb      	ldrh	r3, [r7, #22]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d140      	bne.n	8005364 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	7812      	ldrb	r2, [r2, #0]
 80052ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005308:	e02c      	b.n	8005364 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b02      	cmp	r3, #2
 8005316:	d113      	bne.n	8005340 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	330c      	adds	r3, #12
 8005322:	7812      	ldrb	r2, [r2, #0]
 8005324:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005334:	b29b      	uxth	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	86da      	strh	r2, [r3, #54]	; 0x36
 800533e:	e011      	b.n	8005364 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005340:	f7fe fca0 	bl	8003c84 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d803      	bhi.n	8005358 <HAL_SPI_Transmit+0x204>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005356:	d102      	bne.n	800535e <HAL_SPI_Transmit+0x20a>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005362:	e026      	b.n	80053b2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1cd      	bne.n	800530a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fcbc 	bl	8005cf0 <SPI_EndRxTxTransaction>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800538c:	2300      	movs	r3, #0
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	77fb      	strb	r3, [r7, #31]
 80053ae:	e000      	b.n	80053b2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80053b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3720      	adds	r7, #32
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053e8:	d112      	bne.n	8005410 <HAL_SPI_Receive+0x44>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10e      	bne.n	8005410 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2204      	movs	r2, #4
 80053f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f8f1 	bl	80055ee <HAL_SPI_TransmitReceive>
 800540c:	4603      	mov	r3, r0
 800540e:	e0ea      	b.n	80055e6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_SPI_Receive+0x52>
 800541a:	2302      	movs	r3, #2
 800541c:	e0e3      	b.n	80055e6 <HAL_SPI_Receive+0x21a>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005426:	f7fe fc2d 	bl	8003c84 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	d002      	beq.n	800543e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005438:	2302      	movs	r3, #2
 800543a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800543c:	e0ca      	b.n	80055d4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <HAL_SPI_Receive+0x7e>
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800544e:	e0c1      	b.n	80055d4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2204      	movs	r2, #4
 8005454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	88fa      	ldrh	r2, [r7, #6]
 8005468:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	88fa      	ldrh	r2, [r7, #6]
 800546e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005496:	d10f      	bne.n	80054b8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d007      	beq.n	80054d6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d162      	bne.n	80055a4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80054de:	e02e      	b.n	800553e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d115      	bne.n	800551a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f103 020c 	add.w	r2, r3, #12
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	7812      	ldrb	r2, [r2, #0]
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005518:	e011      	b.n	800553e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800551a:	f7fe fbb3 	bl	8003c84 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d803      	bhi.n	8005532 <HAL_SPI_Receive+0x166>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d102      	bne.n	8005538 <HAL_SPI_Receive+0x16c>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800553c:	e04a      	b.n	80055d4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1cb      	bne.n	80054e0 <HAL_SPI_Receive+0x114>
 8005548:	e031      	b.n	80055ae <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b01      	cmp	r3, #1
 8005556:	d113      	bne.n	8005580 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	b292      	uxth	r2, r2
 8005564:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	1c9a      	adds	r2, r3, #2
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800557e:	e011      	b.n	80055a4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005580:	f7fe fb80 	bl	8003c84 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d803      	bhi.n	8005598 <HAL_SPI_Receive+0x1cc>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d102      	bne.n	800559e <HAL_SPI_Receive+0x1d2>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80055a2:	e017      	b.n	80055d4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1cd      	bne.n	800554a <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 fb4a 	bl	8005c4c <SPI_EndRxTransaction>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2220      	movs	r2, #32
 80055c2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75fb      	strb	r3, [r7, #23]
 80055d0:	e000      	b.n	80055d4 <HAL_SPI_Receive+0x208>
  }

error :
 80055d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b08c      	sub	sp, #48	; 0x30
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	607a      	str	r2, [r7, #4]
 80055fa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055fc:	2301      	movs	r3, #1
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_SPI_TransmitReceive+0x26>
 8005610:	2302      	movs	r3, #2
 8005612:	e18a      	b.n	800592a <HAL_SPI_TransmitReceive+0x33c>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800561c:	f7fe fb32 	bl	8003c84 <HAL_GetTick>
 8005620:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005632:	887b      	ldrh	r3, [r7, #2]
 8005634:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005636:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800563a:	2b01      	cmp	r3, #1
 800563c:	d00f      	beq.n	800565e <HAL_SPI_TransmitReceive+0x70>
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005644:	d107      	bne.n	8005656 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d103      	bne.n	8005656 <HAL_SPI_TransmitReceive+0x68>
 800564e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005652:	2b04      	cmp	r3, #4
 8005654:	d003      	beq.n	800565e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005656:	2302      	movs	r3, #2
 8005658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800565c:	e15b      	b.n	8005916 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_SPI_TransmitReceive+0x82>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_SPI_TransmitReceive+0x82>
 800566a:	887b      	ldrh	r3, [r7, #2]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d103      	bne.n	8005678 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005676:	e14e      	b.n	8005916 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b04      	cmp	r3, #4
 8005682:	d003      	beq.n	800568c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2205      	movs	r2, #5
 8005688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	887a      	ldrh	r2, [r7, #2]
 800569c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	887a      	ldrh	r2, [r7, #2]
 80056a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	887a      	ldrh	r2, [r7, #2]
 80056ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	887a      	ldrh	r2, [r7, #2]
 80056b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b40      	cmp	r3, #64	; 0x40
 80056ce:	d007      	beq.n	80056e0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056e8:	d178      	bne.n	80057dc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <HAL_SPI_TransmitReceive+0x10a>
 80056f2:	8b7b      	ldrh	r3, [r7, #26]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d166      	bne.n	80057c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	881a      	ldrh	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	1c9a      	adds	r2, r3, #2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800571c:	e053      	b.n	80057c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b02      	cmp	r3, #2
 800572a:	d11b      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x176>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d016      	beq.n	8005764 <HAL_SPI_TransmitReceive+0x176>
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d113      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	881a      	ldrh	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	1c9a      	adds	r2, r3, #2
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b01      	cmp	r3, #1
 8005770:	d119      	bne.n	80057a6 <HAL_SPI_TransmitReceive+0x1b8>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d014      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	b292      	uxth	r2, r2
 8005788:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	1c9a      	adds	r2, r3, #2
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057a2:	2301      	movs	r3, #1
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057a6:	f7fe fa6d 	bl	8003c84 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d807      	bhi.n	80057c6 <HAL_SPI_TransmitReceive+0x1d8>
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d003      	beq.n	80057c6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057c4:	e0a7      	b.n	8005916 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1a6      	bne.n	800571e <HAL_SPI_TransmitReceive+0x130>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1a1      	bne.n	800571e <HAL_SPI_TransmitReceive+0x130>
 80057da:	e07c      	b.n	80058d6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_SPI_TransmitReceive+0x1fc>
 80057e4:	8b7b      	ldrh	r3, [r7, #26]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d16b      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	7812      	ldrb	r2, [r2, #0]
 80057f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005810:	e057      	b.n	80058c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b02      	cmp	r3, #2
 800581e:	d11c      	bne.n	800585a <HAL_SPI_TransmitReceive+0x26c>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d017      	beq.n	800585a <HAL_SPI_TransmitReceive+0x26c>
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d114      	bne.n	800585a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	7812      	ldrb	r2, [r2, #0]
 800583c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d119      	bne.n	800589c <HAL_SPI_TransmitReceive+0x2ae>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d014      	beq.n	800589c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005898:	2301      	movs	r3, #1
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800589c:	f7fe f9f2 	bl	8003c84 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d803      	bhi.n	80058b4 <HAL_SPI_TransmitReceive+0x2c6>
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	d102      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x2cc>
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80058c0:	e029      	b.n	8005916 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1a2      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x224>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d19d      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 fa08 	bl	8005cf0 <SPI_EndRxTxTransaction>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d006      	beq.n	80058f4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058f2:	e010      	b.n	8005916 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	e000      	b.n	8005916 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005914:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005926:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800592a:	4618      	mov	r0, r3
 800592c:	3730      	adds	r7, #48	; 0x30
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	099b      	lsrs	r3, r3, #6
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10f      	bne.n	8005978 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	099b      	lsrs	r3, r3, #6
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d004      	beq.n	8005978 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
    return;
 8005976:	e0be      	b.n	8005af6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	085b      	lsrs	r3, r3, #1
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <HAL_SPI_IRQHandler+0x66>
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	09db      	lsrs	r3, r3, #7
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	4798      	blx	r3
    return;
 8005998:	e0ad      	b.n	8005af6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	095b      	lsrs	r3, r3, #5
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_SPI_IRQHandler+0x80>
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	099b      	lsrs	r3, r3, #6
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 80a1 	beq.w	8005af6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 809a 	beq.w	8005af6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	099b      	lsrs	r3, r3, #6
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d023      	beq.n	8005a16 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d011      	beq.n	80059fe <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059de:	f043 0204 	orr.w	r2, r3, #4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	e00b      	b.n	8005a16 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059fe:	2300      	movs	r3, #0
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	693b      	ldr	r3, [r7, #16]
        return;
 8005a14:	e06f      	b.n	8005af6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d014      	beq.n	8005a4c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a26:	f043 0201 	orr.w	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d04f      	beq.n	8005af4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a62:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <HAL_SPI_IRQHandler+0x14c>
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d034      	beq.n	8005aea <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0203 	bic.w	r2, r2, #3
 8005a8e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d011      	beq.n	8005abc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9c:	4a17      	ldr	r2, [pc, #92]	; (8005afc <HAL_SPI_IRQHandler+0x1c8>)
 8005a9e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fe fa05 	bl	8003eb4 <HAL_DMA_Abort_IT>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d016      	beq.n	8005af2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac8:	4a0c      	ldr	r2, [pc, #48]	; (8005afc <HAL_SPI_IRQHandler+0x1c8>)
 8005aca:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fe f9ef 	bl	8003eb4 <HAL_DMA_Abort_IT>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005ae8:	e003      	b.n	8005af2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f808 	bl	8005b00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005af0:	e000      	b.n	8005af4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005af2:	bf00      	nop
    return;
 8005af4:	bf00      	nop
  }
}
 8005af6:	3720      	adds	r7, #32
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	08005b13 	.word	0x08005b13

08005b00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff ffe7 	bl	8005b00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b32:	bf00      	nop
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b4c:	f7fe f89a 	bl	8003c84 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	1a9b      	subs	r3, r3, r2
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	4413      	add	r3, r2
 8005b5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b5c:	f7fe f892 	bl	8003c84 <HAL_GetTick>
 8005b60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b62:	4b39      	ldr	r3, [pc, #228]	; (8005c48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	015b      	lsls	r3, r3, #5
 8005b68:	0d1b      	lsrs	r3, r3, #20
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	fb02 f303 	mul.w	r3, r2, r3
 8005b70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b72:	e054      	b.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d050      	beq.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b7c:	f7fe f882 	bl	8003c84 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d902      	bls.n	8005b92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d13d      	bne.n	8005c0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ba0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005baa:	d111      	bne.n	8005bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb4:	d004      	beq.n	8005bc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bbe:	d107      	bne.n	8005bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd8:	d10f      	bne.n	8005bfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e017      	b.n	8005c3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4013      	ands	r3, r2
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	bf0c      	ite	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	2300      	movne	r3, #0
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d19b      	bne.n	8005b74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3720      	adds	r7, #32
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000000 	.word	0x20000000

08005c4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c60:	d111      	bne.n	8005c86 <SPI_EndRxTransaction+0x3a>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c6a:	d004      	beq.n	8005c76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c74:	d107      	bne.n	8005c86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c84:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c8e:	d117      	bne.n	8005cc0 <SPI_EndRxTransaction+0x74>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c98:	d112      	bne.n	8005cc0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7ff ff49 	bl	8005b3c <SPI_WaitFlagStateUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01a      	beq.n	8005ce6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb4:	f043 0220 	orr.w	r2, r3, #32
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e013      	b.n	8005ce8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2180      	movs	r1, #128	; 0x80
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f7ff ff36 	bl	8005b3c <SPI_WaitFlagStateUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d007      	beq.n	8005ce6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cda:	f043 0220 	orr.w	r2, r3, #32
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e000      	b.n	8005ce8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2200      	movs	r2, #0
 8005d04:	2180      	movs	r1, #128	; 0x80
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f7ff ff18 	bl	8005b3c <SPI_WaitFlagStateUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d16:	f043 0220 	orr.w	r2, r3, #32
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e000      	b.n	8005d24 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e041      	b.n	8005dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fd fe54 	bl	8003a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f000 fc68 	bl	8006640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e041      	b.n	8005e60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f839 	bl	8005e68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3304      	adds	r3, #4
 8005e06:	4619      	mov	r1, r3
 8005e08:	4610      	mov	r0, r2
 8005e0a:	f000 fc19 	bl	8006640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr
	...

08005e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d109      	bne.n	8005ea0 <HAL_TIM_PWM_Start+0x24>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e022      	b.n	8005ee6 <HAL_TIM_PWM_Start+0x6a>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d109      	bne.n	8005eba <HAL_TIM_PWM_Start+0x3e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	bf14      	ite	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	2300      	moveq	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	e015      	b.n	8005ee6 <HAL_TIM_PWM_Start+0x6a>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d109      	bne.n	8005ed4 <HAL_TIM_PWM_Start+0x58>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	bf14      	ite	ne
 8005ecc:	2301      	movne	r3, #1
 8005ece:	2300      	moveq	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	e008      	b.n	8005ee6 <HAL_TIM_PWM_Start+0x6a>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	bf14      	ite	ne
 8005ee0:	2301      	movne	r3, #1
 8005ee2:	2300      	moveq	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e072      	b.n	8005fd4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d104      	bne.n	8005efe <HAL_TIM_PWM_Start+0x82>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005efc:	e013      	b.n	8005f26 <HAL_TIM_PWM_Start+0xaa>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d104      	bne.n	8005f0e <HAL_TIM_PWM_Start+0x92>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f0c:	e00b      	b.n	8005f26 <HAL_TIM_PWM_Start+0xaa>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_PWM_Start+0xa2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f1c:	e003      	b.n	8005f26 <HAL_TIM_PWM_Start+0xaa>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2202      	movs	r2, #2
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fe42 	bl	8006bb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a28      	ldr	r2, [pc, #160]	; (8005fdc <HAL_TIM_PWM_Start+0x160>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d004      	beq.n	8005f48 <HAL_TIM_PWM_Start+0xcc>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a27      	ldr	r2, [pc, #156]	; (8005fe0 <HAL_TIM_PWM_Start+0x164>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d101      	bne.n	8005f4c <HAL_TIM_PWM_Start+0xd0>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e000      	b.n	8005f4e <HAL_TIM_PWM_Start+0xd2>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a1d      	ldr	r2, [pc, #116]	; (8005fdc <HAL_TIM_PWM_Start+0x160>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d018      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x122>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a1b      	ldr	r2, [pc, #108]	; (8005fe0 <HAL_TIM_PWM_Start+0x164>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x122>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7e:	d00e      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x122>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a17      	ldr	r2, [pc, #92]	; (8005fe4 <HAL_TIM_PWM_Start+0x168>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d009      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x122>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a16      	ldr	r2, [pc, #88]	; (8005fe8 <HAL_TIM_PWM_Start+0x16c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d004      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x122>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a14      	ldr	r2, [pc, #80]	; (8005fec <HAL_TIM_PWM_Start+0x170>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d111      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	d010      	beq.n	8005fd2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc0:	e007      	b.n	8005fd2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0201 	orr.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40013400 	.word	0x40013400
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40000800 	.word	0x40000800
 8005fec:	40000c00 	.word	0x40000c00

08005ff0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2200      	movs	r2, #0
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fdd8 	bl	8006bb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a2e      	ldr	r2, [pc, #184]	; (80060c8 <HAL_TIM_PWM_Stop+0xd8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <HAL_TIM_PWM_Stop+0x2c>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a2d      	ldr	r2, [pc, #180]	; (80060cc <HAL_TIM_PWM_Stop+0xdc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d101      	bne.n	8006020 <HAL_TIM_PWM_Stop+0x30>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <HAL_TIM_PWM_Stop+0x32>
 8006020:	2300      	movs	r3, #0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d017      	beq.n	8006056 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6a1a      	ldr	r2, [r3, #32]
 800602c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006030:	4013      	ands	r3, r2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10f      	bne.n	8006056 <HAL_TIM_PWM_Stop+0x66>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a1a      	ldr	r2, [r3, #32]
 800603c:	f240 4344 	movw	r3, #1092	; 0x444
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d107      	bne.n	8006056 <HAL_TIM_PWM_Stop+0x66>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006054:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6a1a      	ldr	r2, [r3, #32]
 800605c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006060:	4013      	ands	r3, r2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10f      	bne.n	8006086 <HAL_TIM_PWM_Stop+0x96>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6a1a      	ldr	r2, [r3, #32]
 800606c:	f240 4344 	movw	r3, #1092	; 0x444
 8006070:	4013      	ands	r3, r2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d107      	bne.n	8006086 <HAL_TIM_PWM_Stop+0x96>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0201 	bic.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d104      	bne.n	8006096 <HAL_TIM_PWM_Stop+0xa6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006094:	e013      	b.n	80060be <HAL_TIM_PWM_Stop+0xce>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b04      	cmp	r3, #4
 800609a:	d104      	bne.n	80060a6 <HAL_TIM_PWM_Stop+0xb6>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060a4:	e00b      	b.n	80060be <HAL_TIM_PWM_Stop+0xce>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d104      	bne.n	80060b6 <HAL_TIM_PWM_Stop+0xc6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060b4:	e003      	b.n	80060be <HAL_TIM_PWM_Stop+0xce>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40013400 	.word	0x40013400

080060d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d122      	bne.n	800612c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d11b      	bne.n	800612c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0202 	mvn.w	r2, #2
 80060fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fa78 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 8006118:	e005      	b.n	8006126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fa6b 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fa7a 	bl	800661a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b04      	cmp	r3, #4
 8006138:	d122      	bne.n	8006180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b04      	cmp	r3, #4
 8006146:	d11b      	bne.n	8006180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0204 	mvn.w	r2, #4
 8006150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fa4e 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 800616c:	e005      	b.n	800617a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fa41 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fa50 	bl	800661a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b08      	cmp	r3, #8
 800618c:	d122      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b08      	cmp	r3, #8
 800619a:	d11b      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0208 	mvn.w	r2, #8
 80061a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2204      	movs	r2, #4
 80061aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fa24 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 80061c0:	e005      	b.n	80061ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fa17 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fa26 	bl	800661a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	2b10      	cmp	r3, #16
 80061e0:	d122      	bne.n	8006228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d11b      	bne.n	8006228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0210 	mvn.w	r2, #16
 80061f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2208      	movs	r2, #8
 80061fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f9fa 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 8006214:	e005      	b.n	8006222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f9ed 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f9fc 	bl	800661a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b01      	cmp	r3, #1
 8006234:	d10e      	bne.n	8006254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b01      	cmp	r3, #1
 8006242:	d107      	bne.n	8006254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0201 	mvn.w	r2, #1
 800624c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f9c8 	bl	80065e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625e:	2b80      	cmp	r3, #128	; 0x80
 8006260:	d10e      	bne.n	8006280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626c:	2b80      	cmp	r3, #128	; 0x80
 800626e:	d107      	bne.n	8006280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fd35 	bl	8006cea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628a:	2b40      	cmp	r3, #64	; 0x40
 800628c:	d10e      	bne.n	80062ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	d107      	bne.n	80062ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f9c0 	bl	800662c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d10e      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d107      	bne.n	80062d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0220 	mvn.w	r2, #32
 80062d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fd00 	bl	8006cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e0ac      	b.n	8006454 <HAL_TIM_PWM_ConfigChannel+0x174>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b0c      	cmp	r3, #12
 8006306:	f200 809f 	bhi.w	8006448 <HAL_TIM_PWM_ConfigChannel+0x168>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006345 	.word	0x08006345
 8006314:	08006449 	.word	0x08006449
 8006318:	08006449 	.word	0x08006449
 800631c:	08006449 	.word	0x08006449
 8006320:	08006385 	.word	0x08006385
 8006324:	08006449 	.word	0x08006449
 8006328:	08006449 	.word	0x08006449
 800632c:	08006449 	.word	0x08006449
 8006330:	080063c7 	.word	0x080063c7
 8006334:	08006449 	.word	0x08006449
 8006338:	08006449 	.word	0x08006449
 800633c:	08006449 	.word	0x08006449
 8006340:	08006407 	.word	0x08006407
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	4618      	mov	r0, r3
 800634c:	f000 f9f2 	bl	8006734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699a      	ldr	r2, [r3, #24]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0208 	orr.w	r2, r2, #8
 800635e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0204 	bic.w	r2, r2, #4
 800636e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6999      	ldr	r1, [r3, #24]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	691a      	ldr	r2, [r3, #16]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	619a      	str	r2, [r3, #24]
      break;
 8006382:	e062      	b.n	800644a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fa42 	bl	8006814 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800639e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6999      	ldr	r1, [r3, #24]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	021a      	lsls	r2, r3, #8
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	619a      	str	r2, [r3, #24]
      break;
 80063c4:	e041      	b.n	800644a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68b9      	ldr	r1, [r7, #8]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 fa95 	bl	80068fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0208 	orr.w	r2, r2, #8
 80063e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69da      	ldr	r2, [r3, #28]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0204 	bic.w	r2, r2, #4
 80063f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69d9      	ldr	r1, [r3, #28]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	61da      	str	r2, [r3, #28]
      break;
 8006404:	e021      	b.n	800644a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fae9 	bl	80069e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69da      	ldr	r2, [r3, #28]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69da      	ldr	r2, [r3, #28]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69d9      	ldr	r1, [r3, #28]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	021a      	lsls	r2, r3, #8
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	61da      	str	r2, [r3, #28]
      break;
 8006446:	e000      	b.n	800644a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006448:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646c:	2b01      	cmp	r3, #1
 800646e:	d101      	bne.n	8006474 <HAL_TIM_ConfigClockSource+0x18>
 8006470:	2302      	movs	r3, #2
 8006472:	e0b3      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x180>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006492:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800649a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ac:	d03e      	beq.n	800652c <HAL_TIM_ConfigClockSource+0xd0>
 80064ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b2:	f200 8087 	bhi.w	80065c4 <HAL_TIM_ConfigClockSource+0x168>
 80064b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ba:	f000 8085 	beq.w	80065c8 <HAL_TIM_ConfigClockSource+0x16c>
 80064be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c2:	d87f      	bhi.n	80065c4 <HAL_TIM_ConfigClockSource+0x168>
 80064c4:	2b70      	cmp	r3, #112	; 0x70
 80064c6:	d01a      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0xa2>
 80064c8:	2b70      	cmp	r3, #112	; 0x70
 80064ca:	d87b      	bhi.n	80065c4 <HAL_TIM_ConfigClockSource+0x168>
 80064cc:	2b60      	cmp	r3, #96	; 0x60
 80064ce:	d050      	beq.n	8006572 <HAL_TIM_ConfigClockSource+0x116>
 80064d0:	2b60      	cmp	r3, #96	; 0x60
 80064d2:	d877      	bhi.n	80065c4 <HAL_TIM_ConfigClockSource+0x168>
 80064d4:	2b50      	cmp	r3, #80	; 0x50
 80064d6:	d03c      	beq.n	8006552 <HAL_TIM_ConfigClockSource+0xf6>
 80064d8:	2b50      	cmp	r3, #80	; 0x50
 80064da:	d873      	bhi.n	80065c4 <HAL_TIM_ConfigClockSource+0x168>
 80064dc:	2b40      	cmp	r3, #64	; 0x40
 80064de:	d058      	beq.n	8006592 <HAL_TIM_ConfigClockSource+0x136>
 80064e0:	2b40      	cmp	r3, #64	; 0x40
 80064e2:	d86f      	bhi.n	80065c4 <HAL_TIM_ConfigClockSource+0x168>
 80064e4:	2b30      	cmp	r3, #48	; 0x30
 80064e6:	d064      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0x156>
 80064e8:	2b30      	cmp	r3, #48	; 0x30
 80064ea:	d86b      	bhi.n	80065c4 <HAL_TIM_ConfigClockSource+0x168>
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d060      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0x156>
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d867      	bhi.n	80065c4 <HAL_TIM_ConfigClockSource+0x168>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d05c      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0x156>
 80064f8:	2b10      	cmp	r3, #16
 80064fa:	d05a      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80064fc:	e062      	b.n	80065c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6818      	ldr	r0, [r3, #0]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	6899      	ldr	r1, [r3, #8]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f000 fb34 	bl	8006b7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006520:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	609a      	str	r2, [r3, #8]
      break;
 800652a:	e04e      	b.n	80065ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	6899      	ldr	r1, [r3, #8]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f000 fb1d 	bl	8006b7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800654e:	609a      	str	r2, [r3, #8]
      break;
 8006550:	e03b      	b.n	80065ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	6859      	ldr	r1, [r3, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	461a      	mov	r2, r3
 8006560:	f000 fa94 	bl	8006a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2150      	movs	r1, #80	; 0x50
 800656a:	4618      	mov	r0, r3
 800656c:	f000 faeb 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 8006570:	e02b      	b.n	80065ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	6859      	ldr	r1, [r3, #4]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	461a      	mov	r2, r3
 8006580:	f000 fab2 	bl	8006ae8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2160      	movs	r1, #96	; 0x60
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fadb 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 8006590:	e01b      	b.n	80065ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	6859      	ldr	r1, [r3, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	461a      	mov	r2, r3
 80065a0:	f000 fa74 	bl	8006a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2140      	movs	r1, #64	; 0x40
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 facb 	bl	8006b46 <TIM_ITRx_SetConfig>
      break;
 80065b0:	e00b      	b.n	80065ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4619      	mov	r1, r3
 80065bc:	4610      	mov	r0, r2
 80065be:	f000 fac2 	bl	8006b46 <TIM_ITRx_SetConfig>
        break;
 80065c2:	e002      	b.n	80065ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80065c4:	bf00      	nop
 80065c6:	e000      	b.n	80065ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80065c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr

080065f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr

08006608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr

0800661a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr
	...

08006640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a33      	ldr	r2, [pc, #204]	; (8006720 <TIM_Base_SetConfig+0xe0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d013      	beq.n	8006680 <TIM_Base_SetConfig+0x40>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a32      	ldr	r2, [pc, #200]	; (8006724 <TIM_Base_SetConfig+0xe4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00f      	beq.n	8006680 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006666:	d00b      	beq.n	8006680 <TIM_Base_SetConfig+0x40>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a2f      	ldr	r2, [pc, #188]	; (8006728 <TIM_Base_SetConfig+0xe8>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d007      	beq.n	8006680 <TIM_Base_SetConfig+0x40>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a2e      	ldr	r2, [pc, #184]	; (800672c <TIM_Base_SetConfig+0xec>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d003      	beq.n	8006680 <TIM_Base_SetConfig+0x40>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a2d      	ldr	r2, [pc, #180]	; (8006730 <TIM_Base_SetConfig+0xf0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d108      	bne.n	8006692 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a22      	ldr	r2, [pc, #136]	; (8006720 <TIM_Base_SetConfig+0xe0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <TIM_Base_SetConfig+0x82>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a21      	ldr	r2, [pc, #132]	; (8006724 <TIM_Base_SetConfig+0xe4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00f      	beq.n	80066c2 <TIM_Base_SetConfig+0x82>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a8:	d00b      	beq.n	80066c2 <TIM_Base_SetConfig+0x82>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a1e      	ldr	r2, [pc, #120]	; (8006728 <TIM_Base_SetConfig+0xe8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d007      	beq.n	80066c2 <TIM_Base_SetConfig+0x82>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a1d      	ldr	r2, [pc, #116]	; (800672c <TIM_Base_SetConfig+0xec>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_Base_SetConfig+0x82>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a1c      	ldr	r2, [pc, #112]	; (8006730 <TIM_Base_SetConfig+0xf0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d108      	bne.n	80066d4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a09      	ldr	r2, [pc, #36]	; (8006720 <TIM_Base_SetConfig+0xe0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d003      	beq.n	8006708 <TIM_Base_SetConfig+0xc8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a08      	ldr	r2, [pc, #32]	; (8006724 <TIM_Base_SetConfig+0xe4>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d103      	bne.n	8006710 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	615a      	str	r2, [r3, #20]
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr
 8006720:	40012c00 	.word	0x40012c00
 8006724:	40013400 	.word	0x40013400
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00

08006734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	f023 0201 	bic.w	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0303 	bic.w	r3, r3, #3
 800676a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f023 0302 	bic.w	r3, r3, #2
 800677c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a20      	ldr	r2, [pc, #128]	; (800680c <TIM_OC1_SetConfig+0xd8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_OC1_SetConfig+0x64>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <TIM_OC1_SetConfig+0xdc>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d10c      	bne.n	80067b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0308 	bic.w	r3, r3, #8
 800679e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f023 0304 	bic.w	r3, r3, #4
 80067b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a15      	ldr	r2, [pc, #84]	; (800680c <TIM_OC1_SetConfig+0xd8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d003      	beq.n	80067c2 <TIM_OC1_SetConfig+0x8e>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a14      	ldr	r2, [pc, #80]	; (8006810 <TIM_OC1_SetConfig+0xdc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d111      	bne.n	80067e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	621a      	str	r2, [r3, #32]
}
 8006800:	bf00      	nop
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	bc80      	pop	{r7}
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40013400 	.word	0x40013400

08006814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	f023 0210 	bic.w	r2, r3, #16
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f023 0320 	bic.w	r3, r3, #32
 800685e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a21      	ldr	r2, [pc, #132]	; (80068f4 <TIM_OC2_SetConfig+0xe0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_OC2_SetConfig+0x68>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a20      	ldr	r2, [pc, #128]	; (80068f8 <TIM_OC2_SetConfig+0xe4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d10d      	bne.n	8006898 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006896:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a16      	ldr	r2, [pc, #88]	; (80068f4 <TIM_OC2_SetConfig+0xe0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_OC2_SetConfig+0x94>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a15      	ldr	r2, [pc, #84]	; (80068f8 <TIM_OC2_SetConfig+0xe4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d113      	bne.n	80068d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	621a      	str	r2, [r3, #32]
}
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40013400 	.word	0x40013400

080068fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0303 	bic.w	r3, r3, #3
 8006932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a21      	ldr	r2, [pc, #132]	; (80069dc <TIM_OC3_SetConfig+0xe0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d003      	beq.n	8006962 <TIM_OC3_SetConfig+0x66>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a20      	ldr	r2, [pc, #128]	; (80069e0 <TIM_OC3_SetConfig+0xe4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d10d      	bne.n	800697e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	021b      	lsls	r3, r3, #8
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800697c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a16      	ldr	r2, [pc, #88]	; (80069dc <TIM_OC3_SetConfig+0xe0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d003      	beq.n	800698e <TIM_OC3_SetConfig+0x92>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <TIM_OC3_SetConfig+0xe4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d113      	bne.n	80069b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800699c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	621a      	str	r2, [r3, #32]
}
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40012c00 	.word	0x40012c00
 80069e0:	40013400 	.word	0x40013400

080069e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	031b      	lsls	r3, r3, #12
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a11      	ldr	r2, [pc, #68]	; (8006a84 <TIM_OC4_SetConfig+0xa0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_OC4_SetConfig+0x68>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a10      	ldr	r2, [pc, #64]	; (8006a88 <TIM_OC4_SetConfig+0xa4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d109      	bne.n	8006a60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	019b      	lsls	r3, r3, #6
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	621a      	str	r2, [r3, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr
 8006a84:	40012c00 	.word	0x40012c00
 8006a88:	40013400 	.word	0x40013400

08006a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0201 	bic.w	r2, r3, #1
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f023 030a 	bic.w	r3, r3, #10
 8006ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr

08006ae8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	f023 0210 	bic.w	r2, r3, #16
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	031b      	lsls	r3, r3, #12
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	621a      	str	r2, [r3, #32]
}
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr

08006b46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f043 0307 	orr.w	r3, r3, #7
 8006b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	609a      	str	r2, [r3, #8]
}
 8006b70:	bf00      	nop
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr

08006b7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b087      	sub	sp, #28
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	607a      	str	r2, [r7, #4]
 8006b86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	021a      	lsls	r2, r3, #8
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	609a      	str	r2, [r3, #8]
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bc80      	pop	{r7}
 8006bb6:	4770      	bx	lr

08006bb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 031f 	and.w	r3, r3, #31
 8006bca:	2201      	movs	r2, #1
 8006bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a1a      	ldr	r2, [r3, #32]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	401a      	ands	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a1a      	ldr	r2, [r3, #32]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f003 031f 	and.w	r3, r3, #31
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	621a      	str	r2, [r3, #32]
}
 8006bf6:	bf00      	nop
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr

08006c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d101      	bne.n	8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c14:	2302      	movs	r3, #2
 8006c16:	e050      	b.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d018      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a19      	ldr	r2, [pc, #100]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d013      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6e:	d00e      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d009      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a14      	ldr	r2, [pc, #80]	; (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d004      	beq.n	8006c8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a12      	ldr	r2, [pc, #72]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d10c      	bne.n	8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr
 8006cc4:	40012c00 	.word	0x40012c00
 8006cc8:	40013400 	.word	0x40013400
 8006ccc:	40000400 	.word	0x40000400
 8006cd0:	40000800 	.word	0x40000800
 8006cd4:	40000c00 	.word	0x40000c00

08006cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr

08006cfc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d02:	f3ef 8305 	mrs	r3, IPSR
 8006d06:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10f      	bne.n	8006d2e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d12:	607b      	str	r3, [r7, #4]
  return(result);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d109      	bne.n	8006d2e <osKernelInitialize+0x32>
 8006d1a:	4b10      	ldr	r3, [pc, #64]	; (8006d5c <osKernelInitialize+0x60>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d109      	bne.n	8006d36 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d22:	f3ef 8311 	mrs	r3, BASEPRI
 8006d26:	603b      	str	r3, [r7, #0]
  return(result);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006d2e:	f06f 0305 	mvn.w	r3, #5
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e00c      	b.n	8006d50 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d36:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <osKernelInitialize+0x60>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d105      	bne.n	8006d4a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006d3e:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <osKernelInitialize+0x60>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e002      	b.n	8006d50 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006d50:	68fb      	ldr	r3, [r7, #12]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr
 8006d5c:	20000038 	.word	0x20000038

08006d60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b092      	sub	sp, #72	; 0x48
 8006d64:	af04      	add	r7, sp, #16
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d70:	f3ef 8305 	mrs	r3, IPSR
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f040 8094 	bne.w	8006ea6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d82:	623b      	str	r3, [r7, #32]
  return(result);
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f040 808d 	bne.w	8006ea6 <osThreadNew+0x146>
 8006d8c:	4b48      	ldr	r3, [pc, #288]	; (8006eb0 <osThreadNew+0x150>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d106      	bne.n	8006da2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d94:	f3ef 8311 	mrs	r3, BASEPRI
 8006d98:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f040 8082 	bne.w	8006ea6 <osThreadNew+0x146>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d07e      	beq.n	8006ea6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006da8:	2380      	movs	r3, #128	; 0x80
 8006daa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006dac:	2318      	movs	r3, #24
 8006dae:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006db0:	2300      	movs	r3, #0
 8006db2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006db4:	f107 031b 	add.w	r3, r7, #27
 8006db8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006dba:	f04f 33ff 	mov.w	r3, #4294967295
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d045      	beq.n	8006e52 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <osThreadNew+0x74>
        name = attr->name;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <osThreadNew+0x9a>
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	2b38      	cmp	r3, #56	; 0x38
 8006dec:	d805      	bhi.n	8006dfa <osThreadNew+0x9a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <osThreadNew+0x9e>
        return (NULL);
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e054      	b.n	8006ea8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	089b      	lsrs	r3, r3, #2
 8006e0c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00e      	beq.n	8006e34 <osThreadNew+0xd4>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	2b5b      	cmp	r3, #91	; 0x5b
 8006e1c:	d90a      	bls.n	8006e34 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d006      	beq.n	8006e34 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <osThreadNew+0xd4>
        mem = 1;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e32:	e010      	b.n	8006e56 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10c      	bne.n	8006e56 <osThreadNew+0xf6>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d108      	bne.n	8006e56 <osThreadNew+0xf6>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <osThreadNew+0xf6>
          mem = 0;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e50:	e001      	b.n	8006e56 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d110      	bne.n	8006e7e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e64:	9202      	str	r2, [sp, #8]
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 fecc 	bl	8007c10 <xTaskCreateStatic>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	e013      	b.n	8006ea6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d110      	bne.n	8006ea6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	f107 0314 	add.w	r3, r7, #20
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 feea 	bl	8007c70 <xTaskCreate>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d001      	beq.n	8006ea6 <osThreadNew+0x146>
          hTask = NULL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006ea6:	697b      	ldr	r3, [r7, #20]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3738      	adds	r7, #56	; 0x38
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20000038 	.word	0x20000038

08006eb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4a06      	ldr	r2, [pc, #24]	; (8006edc <vApplicationGetIdleTaskMemory+0x28>)
 8006ec4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	4a05      	ldr	r2, [pc, #20]	; (8006ee0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006eca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2280      	movs	r2, #128	; 0x80
 8006ed0:	601a      	str	r2, [r3, #0]
}
 8006ed2:	bf00      	nop
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr
 8006edc:	2000003c 	.word	0x2000003c
 8006ee0:	20000098 	.word	0x20000098

08006ee4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a07      	ldr	r2, [pc, #28]	; (8006f10 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ef4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	4a06      	ldr	r2, [pc, #24]	; (8006f14 <vApplicationGetTimerTaskMemory+0x30>)
 8006efa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f02:	601a      	str	r2, [r3, #0]
}
 8006f04:	bf00      	nop
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bc80      	pop	{r7}
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20000298 	.word	0x20000298
 8006f14:	200002f4 	.word	0x200002f4

08006f18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f103 0208 	add.w	r2, r3, #8
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f103 0208 	add.w	r2, r3, #8
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f103 0208 	add.w	r2, r3, #8
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bc80      	pop	{r7}
 8006f54:	4770      	bx	lr

08006f56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr

08006f6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	601a      	str	r2, [r3, #0]
}
 8006faa:	bf00      	nop
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bc80      	pop	{r7}
 8006fb2:	4770      	bx	lr

08006fb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d103      	bne.n	8006fd4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	e00c      	b.n	8006fee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	e002      	b.n	8006fe2 <vListInsert+0x2e>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d2f6      	bcs.n	8006fdc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	601a      	str	r2, [r3, #0]
}
 800701a:	bf00      	nop
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	6892      	ldr	r2, [r2, #8]
 800703a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6852      	ldr	r2, [r2, #4]
 8007044:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	429a      	cmp	r2, r3
 800704e:	d103      	bne.n	8007058 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	1e5a      	subs	r2, r3, #1
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	bc80      	pop	{r7}
 8007074:	4770      	bx	lr
	...

08007078 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8007086:	f001 ffdf 	bl	8009048 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007092:	68f9      	ldr	r1, [r7, #12]
 8007094:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007096:	fb01 f303 	mul.w	r3, r1, r3
 800709a:	441a      	add	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b6:	3b01      	subs	r3, #1
 80070b8:	68f9      	ldr	r1, [r7, #12]
 80070ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	441a      	add	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	22ff      	movs	r2, #255	; 0xff
 80070ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	22ff      	movs	r2, #255	; 0xff
 80070d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d114      	bne.n	8007106 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d01a      	beq.n	800711a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	3310      	adds	r3, #16
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 f943 	bl	8008374 <xTaskRemoveFromEventList>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d012      	beq.n	800711a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070f4:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <xQueueGenericReset+0xb0>)
 80070f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	e009      	b.n	800711a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3310      	adds	r3, #16
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff ff04 	bl	8006f18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3324      	adds	r3, #36	; 0x24
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff feff 	bl	8006f18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800711a:	f001 ffaf 	bl	800907c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800711e:	2301      	movs	r3, #1
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	e000ed04 	.word	0xe000ed04

0800712c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af02      	add	r7, sp, #8
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00d      	beq.n	8007160 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800714c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	4613      	mov	r3, r2
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f835 	bl	80071ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007160:	697b      	ldr	r3, [r7, #20]
	}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800716a:	b580      	push	{r7, lr}
 800716c:	b08a      	sub	sp, #40	; 0x28
 800716e:	af02      	add	r7, sp, #8
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	4613      	mov	r3, r2
 8007176:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d102      	bne.n	8007184 <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800717e:	2300      	movs	r3, #0
 8007180:	61fb      	str	r3, [r7, #28]
 8007182:	e004      	b.n	800718e <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	fb02 f303 	mul.w	r3, r2, r3
 800718c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	3350      	adds	r3, #80	; 0x50
 8007192:	4618      	mov	r0, r3
 8007194:	f001 fff4 	bl	8009180 <pvPortMalloc>
 8007198:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00f      	beq.n	80071c0 <xQueueGenericCreate+0x56>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	3350      	adds	r3, #80	; 0x50
 80071a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071ae:	79fa      	ldrb	r2, [r7, #7]
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	4613      	mov	r3, r2
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 f805 	bl	80071ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80071c0:	69bb      	ldr	r3, [r7, #24]
	}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3720      	adds	r7, #32
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d103      	bne.n	80071e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	e002      	b.n	80071ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071f8:	2101      	movs	r1, #1
 80071fa:	69b8      	ldr	r0, [r7, #24]
 80071fc:	f7ff ff3c 	bl	8007078 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	78fa      	ldrb	r2, [r7, #3]
 8007204:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007208:	bf00      	nop
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800721a:	2202      	movs	r2, #2
 800721c:	2100      	movs	r1, #0
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff ffa3 	bl	800716a <xQueueGenericCreate>
 8007224:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007232:	68fb      	ldr	r3, [r7, #12]
	}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08a      	sub	sp, #40	; 0x28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800724a:	2300      	movs	r3, #0
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007252:	f001 fef9 	bl	8009048 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725e:	429a      	cmp	r2, r3
 8007260:	d302      	bcc.n	8007268 <xQueueGenericSend+0x2c>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b02      	cmp	r3, #2
 8007266:	d129      	bne.n	80072bc <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	68b9      	ldr	r1, [r7, #8]
 800726c:	6a38      	ldr	r0, [r7, #32]
 800726e:	f000 fb62 	bl	8007936 <prvCopyDataToQueue>
 8007272:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	2b00      	cmp	r3, #0
 800727a:	d010      	beq.n	800729e <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	3324      	adds	r3, #36	; 0x24
 8007280:	4618      	mov	r0, r3
 8007282:	f001 f877 	bl	8008374 <xTaskRemoveFromEventList>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d013      	beq.n	80072b4 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800728c:	4b3f      	ldr	r3, [pc, #252]	; (800738c <xQueueGenericSend+0x150>)
 800728e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	e00a      	b.n	80072b4 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d007      	beq.n	80072b4 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072a4:	4b39      	ldr	r3, [pc, #228]	; (800738c <xQueueGenericSend+0x150>)
 80072a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80072b4:	f001 fee2 	bl	800907c <vPortExitCritical>
				return pdPASS;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e063      	b.n	8007384 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072c2:	f001 fedb 	bl	800907c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	e05c      	b.n	8007384 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d106      	bne.n	80072de <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072d0:	f107 0314 	add.w	r3, r7, #20
 80072d4:	4618      	mov	r0, r3
 80072d6:	f001 f8a3 	bl	8008420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072da:	2301      	movs	r3, #1
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072de:	f001 fecd 	bl	800907c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072e2:	f000 fe6d 	bl	8007fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072e6:	f001 feaf 	bl	8009048 <vPortEnterCritical>
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072f0:	b25b      	sxtb	r3, r3
 80072f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f6:	d103      	bne.n	8007300 <xQueueGenericSend+0xc4>
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007306:	b25b      	sxtb	r3, r3
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730c:	d103      	bne.n	8007316 <xQueueGenericSend+0xda>
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007316:	f001 feb1 	bl	800907c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800731a:	1d3a      	adds	r2, r7, #4
 800731c:	f107 0314 	add.w	r3, r7, #20
 8007320:	4611      	mov	r1, r2
 8007322:	4618      	mov	r0, r3
 8007324:	f001 f892 	bl	800844c <xTaskCheckForTimeOut>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d124      	bne.n	8007378 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800732e:	6a38      	ldr	r0, [r7, #32]
 8007330:	f000 fbf9 	bl	8007b26 <prvIsQueueFull>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d018      	beq.n	800736c <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	3310      	adds	r3, #16
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	4611      	mov	r1, r2
 8007342:	4618      	mov	r0, r3
 8007344:	f000 ffe2 	bl	800830c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007348:	6a38      	ldr	r0, [r7, #32]
 800734a:	f000 fb84 	bl	8007a56 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800734e:	f000 fe45 	bl	8007fdc <xTaskResumeAll>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	f47f af7c 	bne.w	8007252 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 800735a:	4b0c      	ldr	r3, [pc, #48]	; (800738c <xQueueGenericSend+0x150>)
 800735c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	e772      	b.n	8007252 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800736c:	6a38      	ldr	r0, [r7, #32]
 800736e:	f000 fb72 	bl	8007a56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007372:	f000 fe33 	bl	8007fdc <xTaskResumeAll>
 8007376:	e76c      	b.n	8007252 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007378:	6a38      	ldr	r0, [r7, #32]
 800737a:	f000 fb6c 	bl	8007a56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800737e:	f000 fe2d 	bl	8007fdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007382:	2300      	movs	r3, #0
		}
	}
}
 8007384:	4618      	mov	r0, r3
 8007386:	3728      	adds	r7, #40	; 0x28
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	e000ed04 	.word	0xe000ed04

08007390 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08c      	sub	sp, #48	; 0x30
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073a2:	f3ef 8211 	mrs	r2, BASEPRI
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	61fa      	str	r2, [r7, #28]
 80073b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d302      	bcc.n	80073d0 <xQueueGenericSendFromISR+0x40>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d12c      	bne.n	800742a <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	68b9      	ldr	r1, [r7, #8]
 80073de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073e0:	f000 faa9 	bl	8007936 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80073e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ec:	d112      	bne.n	8007414 <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d016      	beq.n	8007424 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	3324      	adds	r3, #36	; 0x24
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 ffba 	bl	8008374 <xTaskRemoveFromEventList>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00e      	beq.n	8007424 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00b      	beq.n	8007424 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	e007      	b.n	8007424 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007414:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007418:	3301      	adds	r3, #1
 800741a:	b2db      	uxtb	r3, r3
 800741c:	b25a      	sxtb	r2, r3
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007424:	2301      	movs	r3, #1
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 8007428:	e001      	b.n	800742e <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800742a:	2300      	movs	r3, #0
 800742c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007438:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800743c:	4618      	mov	r0, r3
 800743e:	3730      	adds	r7, #48	; 0x30
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08a      	sub	sp, #40	; 0x28
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	623b      	str	r3, [r7, #32]
	__asm volatile
 8007452:	f3ef 8211 	mrs	r2, BASEPRI
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	613a      	str	r2, [r7, #16]
 8007468:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800746a:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800746c:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	429a      	cmp	r2, r3
 800747c:	d229      	bcs.n	80074d2 <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007484:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800748e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007496:	d112      	bne.n	80074be <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	2b00      	cmp	r3, #0
 800749e:	d015      	beq.n	80074cc <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	3324      	adds	r3, #36	; 0x24
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 ff65 	bl	8008374 <xTaskRemoveFromEventList>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00d      	beq.n	80074cc <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2201      	movs	r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	e006      	b.n	80074cc <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	3301      	adds	r3, #1
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	b25a      	sxtb	r2, r3
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80074cc:	2301      	movs	r3, #1
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
 80074d0:	e001      	b.n	80074d6 <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f383 8811 	msr	BASEPRI, r3
}
 80074e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3728      	adds	r7, #40	; 0x28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	; 0x28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80074f8:	2300      	movs	r3, #0
 80074fa:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007500:	f001 fda2 	bl	8009048 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007508:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d01f      	beq.n	8007550 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007510:	68b9      	ldr	r1, [r7, #8]
 8007512:	6a38      	ldr	r0, [r7, #32]
 8007514:	f000 fa79 	bl	8007a0a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	1e5a      	subs	r2, r3, #1
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00f      	beq.n	8007548 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	3310      	adds	r3, #16
 800752c:	4618      	mov	r0, r3
 800752e:	f000 ff21 	bl	8008374 <xTaskRemoveFromEventList>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007538:	4b3c      	ldr	r3, [pc, #240]	; (800762c <xQueueReceive+0x140>)
 800753a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007548:	f001 fd98 	bl	800907c <vPortExitCritical>
				return pdPASS;
 800754c:	2301      	movs	r3, #1
 800754e:	e069      	b.n	8007624 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d103      	bne.n	800755e <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007556:	f001 fd91 	bl	800907c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800755a:	2300      	movs	r3, #0
 800755c:	e062      	b.n	8007624 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	2b00      	cmp	r3, #0
 8007562:	d106      	bne.n	8007572 <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007564:	f107 0314 	add.w	r3, r7, #20
 8007568:	4618      	mov	r0, r3
 800756a:	f000 ff59 	bl	8008420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800756e:	2301      	movs	r3, #1
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007572:	f001 fd83 	bl	800907c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007576:	f000 fd23 	bl	8007fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800757a:	f001 fd65 	bl	8009048 <vPortEnterCritical>
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007584:	b25b      	sxtb	r3, r3
 8007586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758a:	d103      	bne.n	8007594 <xQueueReceive+0xa8>
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800759a:	b25b      	sxtb	r3, r3
 800759c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a0:	d103      	bne.n	80075aa <xQueueReceive+0xbe>
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075aa:	f001 fd67 	bl	800907c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ae:	1d3a      	adds	r2, r7, #4
 80075b0:	f107 0314 	add.w	r3, r7, #20
 80075b4:	4611      	mov	r1, r2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 ff48 	bl	800844c <xTaskCheckForTimeOut>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d123      	bne.n	800760a <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075c2:	6a38      	ldr	r0, [r7, #32]
 80075c4:	f000 fa99 	bl	8007afa <prvIsQueueEmpty>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d017      	beq.n	80075fe <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	3324      	adds	r3, #36	; 0x24
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	4611      	mov	r1, r2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fe98 	bl	800830c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075dc:	6a38      	ldr	r0, [r7, #32]
 80075de:	f000 fa3a 	bl	8007a56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075e2:	f000 fcfb 	bl	8007fdc <xTaskResumeAll>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d189      	bne.n	8007500 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 80075ec:	4b0f      	ldr	r3, [pc, #60]	; (800762c <xQueueReceive+0x140>)
 80075ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	e780      	b.n	8007500 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80075fe:	6a38      	ldr	r0, [r7, #32]
 8007600:	f000 fa29 	bl	8007a56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007604:	f000 fcea 	bl	8007fdc <xTaskResumeAll>
 8007608:	e77a      	b.n	8007500 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800760a:	6a38      	ldr	r0, [r7, #32]
 800760c:	f000 fa23 	bl	8007a56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007610:	f000 fce4 	bl	8007fdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007614:	6a38      	ldr	r0, [r7, #32]
 8007616:	f000 fa70 	bl	8007afa <prvIsQueueEmpty>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	f43f af6f 	beq.w	8007500 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007622:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007624:	4618      	mov	r0, r3
 8007626:	3728      	adds	r7, #40	; 0x28
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	e000ed04 	.word	0xe000ed04

08007630 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	; 0x28
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007642:	2300      	movs	r3, #0
 8007644:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007646:	f001 fcff 	bl	8009048 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d024      	beq.n	80076a0 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	1e5a      	subs	r2, r3, #1
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d104      	bne.n	8007670 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007666:	f001 f949 	bl	80088fc <pvTaskIncrementMutexHeldCount>
 800766a:	4602      	mov	r2, r0
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00f      	beq.n	8007698 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	3310      	adds	r3, #16
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fe79 	bl	8008374 <xTaskRemoveFromEventList>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d007      	beq.n	8007698 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007688:	4b4c      	ldr	r3, [pc, #304]	; (80077bc <xQueueSemaphoreTake+0x18c>)
 800768a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007698:	f001 fcf0 	bl	800907c <vPortExitCritical>
				return pdPASS;
 800769c:	2301      	movs	r3, #1
 800769e:	e089      	b.n	80077b4 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d103      	bne.n	80076ae <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80076a6:	f001 fce9 	bl	800907c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076aa:	2300      	movs	r3, #0
 80076ac:	e082      	b.n	80077b4 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d106      	bne.n	80076c2 <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076b4:	f107 030c 	add.w	r3, r7, #12
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 feb1 	bl	8008420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076be:	2301      	movs	r3, #1
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076c2:	f001 fcdb 	bl	800907c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076c6:	f000 fc7b 	bl	8007fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076ca:	f001 fcbd 	bl	8009048 <vPortEnterCritical>
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076d4:	b25b      	sxtb	r3, r3
 80076d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076da:	d103      	bne.n	80076e4 <xQueueSemaphoreTake+0xb4>
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ea:	b25b      	sxtb	r3, r3
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f0:	d103      	bne.n	80076fa <xQueueSemaphoreTake+0xca>
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076fa:	f001 fcbf 	bl	800907c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076fe:	463a      	mov	r2, r7
 8007700:	f107 030c 	add.w	r3, r7, #12
 8007704:	4611      	mov	r1, r2
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fea0 	bl	800844c <xTaskCheckForTimeOut>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d132      	bne.n	8007778 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007712:	69f8      	ldr	r0, [r7, #28]
 8007714:	f000 f9f1 	bl	8007afa <prvIsQueueEmpty>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d026      	beq.n	800776c <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d109      	bne.n	800773a <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 8007726:	f001 fc8f 	bl	8009048 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 ffc4 	bl	80086bc <xTaskPriorityInherit>
 8007734:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8007736:	f001 fca1 	bl	800907c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	3324      	adds	r3, #36	; 0x24
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	4611      	mov	r1, r2
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fde2 	bl	800830c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007748:	69f8      	ldr	r0, [r7, #28]
 800774a:	f000 f984 	bl	8007a56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800774e:	f000 fc45 	bl	8007fdc <xTaskResumeAll>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	f47f af76 	bne.w	8007646 <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 800775a:	4b18      	ldr	r3, [pc, #96]	; (80077bc <xQueueSemaphoreTake+0x18c>)
 800775c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	e76c      	b.n	8007646 <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800776c:	69f8      	ldr	r0, [r7, #28]
 800776e:	f000 f972 	bl	8007a56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007772:	f000 fc33 	bl	8007fdc <xTaskResumeAll>
 8007776:	e766      	b.n	8007646 <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007778:	69f8      	ldr	r0, [r7, #28]
 800777a:	f000 f96c 	bl	8007a56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800777e:	f000 fc2d 	bl	8007fdc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007782:	69f8      	ldr	r0, [r7, #28]
 8007784:	f000 f9b9 	bl	8007afa <prvIsQueueEmpty>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	f43f af5b 	beq.w	8007646 <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00d      	beq.n	80077b2 <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 8007796:	f001 fc57 	bl	8009048 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800779a:	69f8      	ldr	r0, [r7, #28]
 800779c:	f000 f8b4 	bl	8007908 <prvGetDisinheritPriorityAfterTimeout>
 80077a0:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	6979      	ldr	r1, [r7, #20]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 f841 	bl	8008830 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80077ae:	f001 fc65 	bl	800907c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3728      	adds	r7, #40	; 0x28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	e000ed04 	.word	0xe000ed04

080077c0 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b08a      	sub	sp, #40	; 0x28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077cc:	2300      	movs	r3, #0
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80077d4:	f001 fc38 	bl	8009048 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d021      	beq.n	8007828 <xQueuePeek+0x68>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	6a38      	ldr	r0, [r7, #32]
 80077ee:	f000 f90c 	bl	8007a0a <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00f      	beq.n	8007820 <xQueuePeek+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	3324      	adds	r3, #36	; 0x24
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fdb5 	bl	8008374 <xTaskRemoveFromEventList>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d007      	beq.n	8007820 <xQueuePeek+0x60>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8007810:	4b3c      	ldr	r3, [pc, #240]	; (8007904 <xQueuePeek+0x144>)
 8007812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007820:	f001 fc2c 	bl	800907c <vPortExitCritical>
				return pdPASS;
 8007824:	2301      	movs	r3, #1
 8007826:	e069      	b.n	80078fc <xQueuePeek+0x13c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d103      	bne.n	8007836 <xQueuePeek+0x76>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800782e:	f001 fc25 	bl	800907c <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007832:	2300      	movs	r3, #0
 8007834:	e062      	b.n	80078fc <xQueuePeek+0x13c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	2b00      	cmp	r3, #0
 800783a:	d106      	bne.n	800784a <xQueuePeek+0x8a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800783c:	f107 0310 	add.w	r3, r7, #16
 8007840:	4618      	mov	r0, r3
 8007842:	f000 fded 	bl	8008420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007846:	2301      	movs	r3, #1
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800784a:	f001 fc17 	bl	800907c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800784e:	f000 fbb7 	bl	8007fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007852:	f001 fbf9 	bl	8009048 <vPortEnterCritical>
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800785c:	b25b      	sxtb	r3, r3
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d103      	bne.n	800786c <xQueuePeek+0xac>
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007872:	b25b      	sxtb	r3, r3
 8007874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007878:	d103      	bne.n	8007882 <xQueuePeek+0xc2>
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007882:	f001 fbfb 	bl	800907c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007886:	1d3a      	adds	r2, r7, #4
 8007888:	f107 0310 	add.w	r3, r7, #16
 800788c:	4611      	mov	r1, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fddc 	bl	800844c <xTaskCheckForTimeOut>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d123      	bne.n	80078e2 <xQueuePeek+0x122>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800789a:	6a38      	ldr	r0, [r7, #32]
 800789c:	f000 f92d 	bl	8007afa <prvIsQueueEmpty>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d017      	beq.n	80078d6 <xQueuePeek+0x116>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	3324      	adds	r3, #36	; 0x24
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	4611      	mov	r1, r2
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fd2c 	bl	800830c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078b4:	6a38      	ldr	r0, [r7, #32]
 80078b6:	f000 f8ce 	bl	8007a56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078ba:	f000 fb8f 	bl	8007fdc <xTaskResumeAll>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d187      	bne.n	80077d4 <xQueuePeek+0x14>
				{
					portYIELD_WITHIN_API();
 80078c4:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <xQueuePeek+0x144>)
 80078c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	e77e      	b.n	80077d4 <xQueuePeek+0x14>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 80078d6:	6a38      	ldr	r0, [r7, #32]
 80078d8:	f000 f8bd 	bl	8007a56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078dc:	f000 fb7e 	bl	8007fdc <xTaskResumeAll>
 80078e0:	e778      	b.n	80077d4 <xQueuePeek+0x14>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 80078e2:	6a38      	ldr	r0, [r7, #32]
 80078e4:	f000 f8b7 	bl	8007a56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078e8:	f000 fb78 	bl	8007fdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078ec:	6a38      	ldr	r0, [r7, #32]
 80078ee:	f000 f904 	bl	8007afa <prvIsQueueEmpty>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f43f af6d 	beq.w	80077d4 <xQueuePeek+0x14>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3728      	adds	r7, #40	; 0x28
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	e000ed04 	.word	0xe000ed04

08007908 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	2b00      	cmp	r3, #0
 8007916:	d006      	beq.n	8007926 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e001      	b.n	800792a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800792a:	68fb      	ldr	r3, [r7, #12]
	}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	bc80      	pop	{r7}
 8007934:	4770      	bx	lr

08007936 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b086      	sub	sp, #24
 800793a:	af00      	add	r7, sp, #0
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007942:	2300      	movs	r3, #0
 8007944:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10d      	bne.n	8007970 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d14d      	bne.n	80079f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	4618      	mov	r0, r3
 8007962:	f000 ff19 	bl	8008798 <xTaskPriorityDisinherit>
 8007966:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	605a      	str	r2, [r3, #4]
 800796e:	e043      	b.n	80079f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d119      	bne.n	80079aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6898      	ldr	r0, [r3, #8]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	461a      	mov	r2, r3
 8007980:	68b9      	ldr	r1, [r7, #8]
 8007982:	f001 fda9 	bl	80094d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	689a      	ldr	r2, [r3, #8]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	441a      	add	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	429a      	cmp	r2, r3
 800799e:	d32b      	bcc.n	80079f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	609a      	str	r2, [r3, #8]
 80079a8:	e026      	b.n	80079f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	68d8      	ldr	r0, [r3, #12]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	461a      	mov	r2, r3
 80079b4:	68b9      	ldr	r1, [r7, #8]
 80079b6:	f001 fd8f 	bl	80094d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	425b      	negs	r3, r3
 80079c4:	441a      	add	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	68da      	ldr	r2, [r3, #12]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d207      	bcs.n	80079e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	425b      	negs	r3, r3
 80079e0:	441a      	add	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d105      	bne.n	80079f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a00:	697b      	ldr	r3, [r7, #20]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d018      	beq.n	8007a4e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	441a      	add	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d303      	bcc.n	8007a3e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68d9      	ldr	r1, [r3, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	461a      	mov	r2, r3
 8007a48:	6838      	ldr	r0, [r7, #0]
 8007a4a:	f001 fd45 	bl	80094d8 <memcpy>
	}
}
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a5e:	f001 faf3 	bl	8009048 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a68:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a6a:	e011      	b.n	8007a90 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d012      	beq.n	8007a9a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3324      	adds	r3, #36	; 0x24
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 fc7b 	bl	8008374 <xTaskRemoveFromEventList>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a84:	f000 fd28 	bl	80084d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	dce9      	bgt.n	8007a6c <prvUnlockQueue+0x16>
 8007a98:	e000      	b.n	8007a9c <prvUnlockQueue+0x46>
					break;
 8007a9a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	22ff      	movs	r2, #255	; 0xff
 8007aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007aa4:	f001 faea 	bl	800907c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007aa8:	f001 face 	bl	8009048 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ab2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ab4:	e011      	b.n	8007ada <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d012      	beq.n	8007ae4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	3310      	adds	r3, #16
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fc56 	bl	8008374 <xTaskRemoveFromEventList>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ace:	f000 fd03 	bl	80084d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ada:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	dce9      	bgt.n	8007ab6 <prvUnlockQueue+0x60>
 8007ae2:	e000      	b.n	8007ae6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ae4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	22ff      	movs	r2, #255	; 0xff
 8007aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007aee:	f001 fac5 	bl	800907c <vPortExitCritical>
}
 8007af2:	bf00      	nop
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b02:	f001 faa1 	bl	8009048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d102      	bne.n	8007b14 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	e001      	b.n	8007b18 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b14:	2300      	movs	r3, #0
 8007b16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b18:	f001 fab0 	bl	800907c <vPortExitCritical>

	return xReturn;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b2e:	f001 fa8b 	bl	8009048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d102      	bne.n	8007b44 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	e001      	b.n	8007b48 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b44:	2300      	movs	r3, #0
 8007b46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b48:	f001 fa98 	bl	800907c <vPortExitCritical>

	return xReturn;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	e014      	b.n	8007b92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b68:	4a0e      	ldr	r2, [pc, #56]	; (8007ba4 <vQueueAddToRegistry+0x4c>)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10b      	bne.n	8007b8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b74:	490b      	ldr	r1, [pc, #44]	; (8007ba4 <vQueueAddToRegistry+0x4c>)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b7e:	4a09      	ldr	r2, [pc, #36]	; (8007ba4 <vQueueAddToRegistry+0x4c>)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	4413      	add	r3, r2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b8a:	e006      	b.n	8007b9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	60fb      	str	r3, [r7, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b07      	cmp	r3, #7
 8007b96:	d9e7      	bls.n	8007b68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b98:	bf00      	nop
 8007b9a:	bf00      	nop
 8007b9c:	3714      	adds	r7, #20
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bc80      	pop	{r7}
 8007ba2:	4770      	bx	lr
 8007ba4:	20003e98 	.word	0x20003e98

08007ba8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007bb8:	f001 fa46 	bl	8009048 <vPortEnterCritical>
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bc2:	b25b      	sxtb	r3, r3
 8007bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc8:	d103      	bne.n	8007bd2 <vQueueWaitForMessageRestricted+0x2a>
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bd8:	b25b      	sxtb	r3, r3
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d103      	bne.n	8007be8 <vQueueWaitForMessageRestricted+0x40>
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007be8:	f001 fa48 	bl	800907c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d106      	bne.n	8007c02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	3324      	adds	r3, #36	; 0x24
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	68b9      	ldr	r1, [r7, #8]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 fb9b 	bl	8008338 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c02:	6978      	ldr	r0, [r7, #20]
 8007c04:	f7ff ff27 	bl	8007a56 <prvUnlockQueue>
	}
 8007c08:	bf00      	nop
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08a      	sub	sp, #40	; 0x28
 8007c14:	af04      	add	r7, sp, #16
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
			configASSERT( xSize == sizeof( TCB_t ) );
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d01e      	beq.n	8007c62 <xTaskCreateStatic+0x52>
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d01b      	beq.n	8007c62 <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c32:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	2202      	movs	r2, #2
 8007c38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	9303      	str	r3, [sp, #12]
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	9302      	str	r3, [sp, #8]
 8007c44:	f107 0310 	add.w	r3, r7, #16
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	68b9      	ldr	r1, [r7, #8]
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f850 	bl	8007cfa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c5a:	6978      	ldr	r0, [r7, #20]
 8007c5c:	f000 f8c4 	bl	8007de8 <prvAddNewTaskToReadyList>
 8007c60:	e001      	b.n	8007c66 <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 8007c66:	693b      	ldr	r3, [r7, #16]
	}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3718      	adds	r7, #24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08c      	sub	sp, #48	; 0x30
 8007c74:	af04      	add	r7, sp, #16
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c80:	88fb      	ldrh	r3, [r7, #6]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f001 fa7b 	bl	8009180 <pvPortMalloc>
 8007c8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00e      	beq.n	8007cb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007c92:	205c      	movs	r0, #92	; 0x5c
 8007c94:	f001 fa74 	bl	8009180 <pvPortMalloc>
 8007c98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8007ca6:	e005      	b.n	8007cb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ca8:	6978      	ldr	r0, [r7, #20]
 8007caa:	f001 fafd 	bl	80092a8 <vPortFree>
 8007cae:	e001      	b.n	8007cb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d017      	beq.n	8007cea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007cc2:	88fa      	ldrh	r2, [r7, #6]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9303      	str	r3, [sp, #12]
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	9302      	str	r3, [sp, #8]
 8007ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 f80e 	bl	8007cfa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cde:	69f8      	ldr	r0, [r7, #28]
 8007ce0:	f000 f882 	bl	8007de8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	61bb      	str	r3, [r7, #24]
 8007ce8:	e002      	b.n	8007cf0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007cea:	f04f 33ff 	mov.w	r3, #4294967295
 8007cee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007cf0:	69bb      	ldr	r3, [r7, #24]
	}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3720      	adds	r7, #32
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b086      	sub	sp, #24
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	607a      	str	r2, [r7, #4]
 8007d06:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	461a      	mov	r2, r3
 8007d12:	21a5      	movs	r1, #165	; 0xa5
 8007d14:	f001 fbee 	bl	80094f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d22:	3b01      	subs	r3, #1
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f023 0307 	bic.w	r3, r3, #7
 8007d30:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d32:	2300      	movs	r3, #0
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	e012      	b.n	8007d5e <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	7819      	ldrb	r1, [r3, #0]
 8007d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	4413      	add	r3, r2
 8007d46:	3334      	adds	r3, #52	; 0x34
 8007d48:	460a      	mov	r2, r1
 8007d4a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	4413      	add	r3, r2
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d006      	beq.n	8007d66 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	617b      	str	r3, [r7, #20]
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2b0f      	cmp	r3, #15
 8007d62:	d9e9      	bls.n	8007d38 <prvInitialiseNewTask+0x3e>
 8007d64:	e000      	b.n	8007d68 <prvInitialiseNewTask+0x6e>
		{
			break;
 8007d66:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	2b37      	cmp	r3, #55	; 0x37
 8007d74:	d901      	bls.n	8007d7a <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d76:	2337      	movs	r3, #55	; 0x37
 8007d78:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	6a3a      	ldr	r2, [r7, #32]
 8007d7e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d82:	6a3a      	ldr	r2, [r7, #32]
 8007d84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	2200      	movs	r2, #0
 8007d8a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7ff f8e0 	bl	8006f56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d98:	3318      	adds	r3, #24
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff f8db 	bl	8006f56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007da4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007db4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db8:	2200      	movs	r2, #0
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	68f9      	ldr	r1, [r7, #12]
 8007dc8:	6938      	ldr	r0, [r7, #16]
 8007dca:	f001 f8af 	bl	8008f2c <pxPortInitialiseStack>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d002      	beq.n	8007de0 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007de0:	bf00      	nop
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007df0:	f001 f92a 	bl	8009048 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007df4:	4b2d      	ldr	r3, [pc, #180]	; (8007eac <prvAddNewTaskToReadyList+0xc4>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	4a2c      	ldr	r2, [pc, #176]	; (8007eac <prvAddNewTaskToReadyList+0xc4>)
 8007dfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dfe:	4b2c      	ldr	r3, [pc, #176]	; (8007eb0 <prvAddNewTaskToReadyList+0xc8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d109      	bne.n	8007e1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e06:	4a2a      	ldr	r2, [pc, #168]	; (8007eb0 <prvAddNewTaskToReadyList+0xc8>)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e0c:	4b27      	ldr	r3, [pc, #156]	; (8007eac <prvAddNewTaskToReadyList+0xc4>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d110      	bne.n	8007e36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e14:	f000 fb84 	bl	8008520 <prvInitialiseTaskLists>
 8007e18:	e00d      	b.n	8007e36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e1a:	4b26      	ldr	r3, [pc, #152]	; (8007eb4 <prvAddNewTaskToReadyList+0xcc>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d109      	bne.n	8007e36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e22:	4b23      	ldr	r3, [pc, #140]	; (8007eb0 <prvAddNewTaskToReadyList+0xc8>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d802      	bhi.n	8007e36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e30:	4a1f      	ldr	r2, [pc, #124]	; (8007eb0 <prvAddNewTaskToReadyList+0xc8>)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e36:	4b20      	ldr	r3, [pc, #128]	; (8007eb8 <prvAddNewTaskToReadyList+0xd0>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	4a1e      	ldr	r2, [pc, #120]	; (8007eb8 <prvAddNewTaskToReadyList+0xd0>)
 8007e3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e40:	4b1d      	ldr	r3, [pc, #116]	; (8007eb8 <prvAddNewTaskToReadyList+0xd0>)
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4c:	4b1b      	ldr	r3, [pc, #108]	; (8007ebc <prvAddNewTaskToReadyList+0xd4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d903      	bls.n	8007e5c <prvAddNewTaskToReadyList+0x74>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e58:	4a18      	ldr	r2, [pc, #96]	; (8007ebc <prvAddNewTaskToReadyList+0xd4>)
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4a15      	ldr	r2, [pc, #84]	; (8007ec0 <prvAddNewTaskToReadyList+0xd8>)
 8007e6a:	441a      	add	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4619      	mov	r1, r3
 8007e72:	4610      	mov	r0, r2
 8007e74:	f7ff f87b 	bl	8006f6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e78:	f001 f900 	bl	800907c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e7c:	4b0d      	ldr	r3, [pc, #52]	; (8007eb4 <prvAddNewTaskToReadyList+0xcc>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00e      	beq.n	8007ea2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e84:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <prvAddNewTaskToReadyList+0xc8>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d207      	bcs.n	8007ea2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e92:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <prvAddNewTaskToReadyList+0xdc>)
 8007e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ea2:	bf00      	nop
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000bc8 	.word	0x20000bc8
 8007eb0:	200006f4 	.word	0x200006f4
 8007eb4:	20000bd4 	.word	0x20000bd4
 8007eb8:	20000be4 	.word	0x20000be4
 8007ebc:	20000bd0 	.word	0x20000bd0
 8007ec0:	200006f8 	.word	0x200006f8
 8007ec4:	e000ed04 	.word	0xe000ed04

08007ec8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d008      	beq.n	8007eec <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8007eda:	f000 f871 	bl	8007fc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ede:	2100      	movs	r1, #0
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fd1f 	bl	8008924 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ee6:	f000 f879 	bl	8007fdc <xTaskResumeAll>
 8007eea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d107      	bne.n	8007f02 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8007ef2:	4b06      	ldr	r3, [pc, #24]	; (8007f0c <vTaskDelay+0x44>)
 8007ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f02:	bf00      	nop
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	e000ed04 	.word	0xe000ed04

08007f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08a      	sub	sp, #40	; 0x28
 8007f14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f1e:	1d3a      	adds	r2, r7, #4
 8007f20:	f107 0108 	add.w	r1, r7, #8
 8007f24:	f107 030c 	add.w	r3, r7, #12
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe ffc3 	bl	8006eb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f2e:	6879      	ldr	r1, [r7, #4]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	9202      	str	r2, [sp, #8]
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	460a      	mov	r2, r1
 8007f40:	4919      	ldr	r1, [pc, #100]	; (8007fa8 <vTaskStartScheduler+0x98>)
 8007f42:	481a      	ldr	r0, [pc, #104]	; (8007fac <vTaskStartScheduler+0x9c>)
 8007f44:	f7ff fe64 	bl	8007c10 <xTaskCreateStatic>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	4a19      	ldr	r2, [pc, #100]	; (8007fb0 <vTaskStartScheduler+0xa0>)
 8007f4c:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f4e:	4b18      	ldr	r3, [pc, #96]	; (8007fb0 <vTaskStartScheduler+0xa0>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8007f56:	2301      	movs	r3, #1
 8007f58:	617b      	str	r3, [r7, #20]
 8007f5a:	e001      	b.n	8007f60 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d102      	bne.n	8007f6c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8007f66:	f000 fd31 	bl	80089cc <xTimerCreateTimerTask>
 8007f6a:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d115      	bne.n	8007f9e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	613b      	str	r3, [r7, #16]
}
 8007f84:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f86:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <vTaskStartScheduler+0xa4>)
 8007f88:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f8e:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <vTaskStartScheduler+0xa8>)
 8007f90:	2201      	movs	r2, #1
 8007f92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007f94:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <vTaskStartScheduler+0xac>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f9a:	f001 f835 	bl	8009008 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f9e:	bf00      	nop
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	080095a0 	.word	0x080095a0
 8007fac:	080084f1 	.word	0x080084f1
 8007fb0:	20000bec 	.word	0x20000bec
 8007fb4:	20000be8 	.word	0x20000be8
 8007fb8:	20000bd4 	.word	0x20000bd4
 8007fbc:	20000bcc 	.word	0x20000bcc

08007fc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007fc4:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <vTaskSuspendAll+0x18>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	4a03      	ldr	r2, [pc, #12]	; (8007fd8 <vTaskSuspendAll+0x18>)
 8007fcc:	6013      	str	r3, [r2, #0]
}
 8007fce:	bf00      	nop
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bc80      	pop	{r7}
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	20000bf0 	.word	0x20000bf0

08007fdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fea:	f001 f82d 	bl	8009048 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fee:	4b39      	ldr	r3, [pc, #228]	; (80080d4 <xTaskResumeAll+0xf8>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	4a37      	ldr	r2, [pc, #220]	; (80080d4 <xTaskResumeAll+0xf8>)
 8007ff6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ff8:	4b36      	ldr	r3, [pc, #216]	; (80080d4 <xTaskResumeAll+0xf8>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d162      	bne.n	80080c6 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008000:	4b35      	ldr	r3, [pc, #212]	; (80080d8 <xTaskResumeAll+0xfc>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d05e      	beq.n	80080c6 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008008:	e02f      	b.n	800806a <xTaskResumeAll+0x8e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800800a:	4b34      	ldr	r3, [pc, #208]	; (80080dc <xTaskResumeAll+0x100>)
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3318      	adds	r3, #24
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff f804 	bl	8007024 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3304      	adds	r3, #4
 8008020:	4618      	mov	r0, r3
 8008022:	f7fe ffff 	bl	8007024 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802a:	4b2d      	ldr	r3, [pc, #180]	; (80080e0 <xTaskResumeAll+0x104>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d903      	bls.n	800803a <xTaskResumeAll+0x5e>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008036:	4a2a      	ldr	r2, [pc, #168]	; (80080e0 <xTaskResumeAll+0x104>)
 8008038:	6013      	str	r3, [r2, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4a27      	ldr	r2, [pc, #156]	; (80080e4 <xTaskResumeAll+0x108>)
 8008048:	441a      	add	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	3304      	adds	r3, #4
 800804e:	4619      	mov	r1, r3
 8008050:	4610      	mov	r0, r2
 8008052:	f7fe ff8c 	bl	8006f6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805a:	4b23      	ldr	r3, [pc, #140]	; (80080e8 <xTaskResumeAll+0x10c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008060:	429a      	cmp	r2, r3
 8008062:	d302      	bcc.n	800806a <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 8008064:	4b21      	ldr	r3, [pc, #132]	; (80080ec <xTaskResumeAll+0x110>)
 8008066:	2201      	movs	r2, #1
 8008068:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800806a:	4b1c      	ldr	r3, [pc, #112]	; (80080dc <xTaskResumeAll+0x100>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1cb      	bne.n	800800a <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008078:	f000 fade 	bl	8008638 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800807c:	4b1c      	ldr	r3, [pc, #112]	; (80080f0 <xTaskResumeAll+0x114>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d010      	beq.n	80080aa <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008088:	f000 f844 	bl	8008114 <xTaskIncrementTick>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d002      	beq.n	8008098 <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 8008092:	4b16      	ldr	r3, [pc, #88]	; (80080ec <xTaskResumeAll+0x110>)
 8008094:	2201      	movs	r2, #1
 8008096:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3b01      	subs	r3, #1
 800809c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1f1      	bne.n	8008088 <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
 80080a4:	4b12      	ldr	r3, [pc, #72]	; (80080f0 <xTaskResumeAll+0x114>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080aa:	4b10      	ldr	r3, [pc, #64]	; (80080ec <xTaskResumeAll+0x110>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080b2:	2301      	movs	r3, #1
 80080b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080b6:	4b0f      	ldr	r3, [pc, #60]	; (80080f4 <xTaskResumeAll+0x118>)
 80080b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080c6:	f000 ffd9 	bl	800907c <vPortExitCritical>

	return xAlreadyYielded;
 80080ca:	68bb      	ldr	r3, [r7, #8]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	20000bf0 	.word	0x20000bf0
 80080d8:	20000bc8 	.word	0x20000bc8
 80080dc:	20000b88 	.word	0x20000b88
 80080e0:	20000bd0 	.word	0x20000bd0
 80080e4:	200006f8 	.word	0x200006f8
 80080e8:	200006f4 	.word	0x200006f4
 80080ec:	20000bdc 	.word	0x20000bdc
 80080f0:	20000bd8 	.word	0x20000bd8
 80080f4:	e000ed04 	.word	0xe000ed04

080080f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080fe:	4b04      	ldr	r3, [pc, #16]	; (8008110 <xTaskGetTickCount+0x18>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008104:	687b      	ldr	r3, [r7, #4]
}
 8008106:	4618      	mov	r0, r3
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr
 8008110:	20000bcc 	.word	0x20000bcc

08008114 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800811a:	2300      	movs	r3, #0
 800811c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800811e:	4b49      	ldr	r3, [pc, #292]	; (8008244 <xTaskIncrementTick+0x130>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d17d      	bne.n	8008222 <xTaskIncrementTick+0x10e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008126:	4b48      	ldr	r3, [pc, #288]	; (8008248 <xTaskIncrementTick+0x134>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3301      	adds	r3, #1
 800812c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800812e:	4a46      	ldr	r2, [pc, #280]	; (8008248 <xTaskIncrementTick+0x134>)
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d110      	bne.n	800815c <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 800813a:	4b44      	ldr	r3, [pc, #272]	; (800824c <xTaskIncrementTick+0x138>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	4b43      	ldr	r3, [pc, #268]	; (8008250 <xTaskIncrementTick+0x13c>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a41      	ldr	r2, [pc, #260]	; (800824c <xTaskIncrementTick+0x138>)
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	4a41      	ldr	r2, [pc, #260]	; (8008250 <xTaskIncrementTick+0x13c>)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	4b41      	ldr	r3, [pc, #260]	; (8008254 <xTaskIncrementTick+0x140>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3301      	adds	r3, #1
 8008154:	4a3f      	ldr	r2, [pc, #252]	; (8008254 <xTaskIncrementTick+0x140>)
 8008156:	6013      	str	r3, [r2, #0]
 8008158:	f000 fa6e 	bl	8008638 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800815c:	4b3e      	ldr	r3, [pc, #248]	; (8008258 <xTaskIncrementTick+0x144>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	429a      	cmp	r2, r3
 8008164:	d34e      	bcc.n	8008204 <xTaskIncrementTick+0xf0>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008166:	4b39      	ldr	r3, [pc, #228]	; (800824c <xTaskIncrementTick+0x138>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <xTaskIncrementTick+0x60>
 8008170:	2301      	movs	r3, #1
 8008172:	e000      	b.n	8008176 <xTaskIncrementTick+0x62>
 8008174:	2300      	movs	r3, #0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d004      	beq.n	8008184 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800817a:	4b37      	ldr	r3, [pc, #220]	; (8008258 <xTaskIncrementTick+0x144>)
 800817c:	f04f 32ff 	mov.w	r2, #4294967295
 8008180:	601a      	str	r2, [r3, #0]
					break;
 8008182:	e03f      	b.n	8008204 <xTaskIncrementTick+0xf0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008184:	4b31      	ldr	r3, [pc, #196]	; (800824c <xTaskIncrementTick+0x138>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	429a      	cmp	r2, r3
 800819a:	d203      	bcs.n	80081a4 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800819c:	4a2e      	ldr	r2, [pc, #184]	; (8008258 <xTaskIncrementTick+0x144>)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6013      	str	r3, [r2, #0]
						break;
 80081a2:	e02f      	b.n	8008204 <xTaskIncrementTick+0xf0>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7fe ff3b 	bl	8007024 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d004      	beq.n	80081c0 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	3318      	adds	r3, #24
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe ff32 	bl	8007024 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c4:	4b25      	ldr	r3, [pc, #148]	; (800825c <xTaskIncrementTick+0x148>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d903      	bls.n	80081d4 <xTaskIncrementTick+0xc0>
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d0:	4a22      	ldr	r2, [pc, #136]	; (800825c <xTaskIncrementTick+0x148>)
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4a1f      	ldr	r2, [pc, #124]	; (8008260 <xTaskIncrementTick+0x14c>)
 80081e2:	441a      	add	r2, r3
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	3304      	adds	r3, #4
 80081e8:	4619      	mov	r1, r3
 80081ea:	4610      	mov	r0, r2
 80081ec:	f7fe febf 	bl	8006f6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f4:	4b1b      	ldr	r3, [pc, #108]	; (8008264 <xTaskIncrementTick+0x150>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d3b3      	bcc.n	8008166 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80081fe:	2301      	movs	r3, #1
 8008200:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008202:	e7b0      	b.n	8008166 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008204:	4b17      	ldr	r3, [pc, #92]	; (8008264 <xTaskIncrementTick+0x150>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820a:	4915      	ldr	r1, [pc, #84]	; (8008260 <xTaskIncrementTick+0x14c>)
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d907      	bls.n	800822c <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 800821c:	2301      	movs	r3, #1
 800821e:	617b      	str	r3, [r7, #20]
 8008220:	e004      	b.n	800822c <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008222:	4b11      	ldr	r3, [pc, #68]	; (8008268 <xTaskIncrementTick+0x154>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3301      	adds	r3, #1
 8008228:	4a0f      	ldr	r2, [pc, #60]	; (8008268 <xTaskIncrementTick+0x154>)
 800822a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800822c:	4b0f      	ldr	r3, [pc, #60]	; (800826c <xTaskIncrementTick+0x158>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <xTaskIncrementTick+0x124>
		{
			xSwitchRequired = pdTRUE;
 8008234:	2301      	movs	r3, #1
 8008236:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008238:	697b      	ldr	r3, [r7, #20]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000bf0 	.word	0x20000bf0
 8008248:	20000bcc 	.word	0x20000bcc
 800824c:	20000b80 	.word	0x20000b80
 8008250:	20000b84 	.word	0x20000b84
 8008254:	20000be0 	.word	0x20000be0
 8008258:	20000be8 	.word	0x20000be8
 800825c:	20000bd0 	.word	0x20000bd0
 8008260:	200006f8 	.word	0x200006f8
 8008264:	200006f4 	.word	0x200006f4
 8008268:	20000bd8 	.word	0x20000bd8
 800826c:	20000bdc 	.word	0x20000bdc

08008270 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008276:	4b20      	ldr	r3, [pc, #128]	; (80082f8 <vTaskSwitchContext+0x88>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800827e:	4b1f      	ldr	r3, [pc, #124]	; (80082fc <vTaskSwitchContext+0x8c>)
 8008280:	2201      	movs	r2, #1
 8008282:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008284:	e033      	b.n	80082ee <vTaskSwitchContext+0x7e>
		xYieldPending = pdFALSE;
 8008286:	4b1d      	ldr	r3, [pc, #116]	; (80082fc <vTaskSwitchContext+0x8c>)
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800828c:	4b1c      	ldr	r3, [pc, #112]	; (8008300 <vTaskSwitchContext+0x90>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	607b      	str	r3, [r7, #4]
 8008292:	e002      	b.n	800829a <vTaskSwitchContext+0x2a>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3b01      	subs	r3, #1
 8008298:	607b      	str	r3, [r7, #4]
 800829a:	491a      	ldr	r1, [pc, #104]	; (8008304 <vTaskSwitchContext+0x94>)
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	4613      	mov	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	440b      	add	r3, r1
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0f2      	beq.n	8008294 <vTaskSwitchContext+0x24>
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4a12      	ldr	r2, [pc, #72]	; (8008304 <vTaskSwitchContext+0x94>)
 80082ba:	4413      	add	r3, r2
 80082bc:	603b      	str	r3, [r7, #0]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	605a      	str	r2, [r3, #4]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	3308      	adds	r3, #8
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d104      	bne.n	80082de <vTaskSwitchContext+0x6e>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	605a      	str	r2, [r3, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	4a08      	ldr	r2, [pc, #32]	; (8008308 <vTaskSwitchContext+0x98>)
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	4a05      	ldr	r2, [pc, #20]	; (8008300 <vTaskSwitchContext+0x90>)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6013      	str	r3, [r2, #0]
}
 80082ee:	bf00      	nop
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bc80      	pop	{r7}
 80082f6:	4770      	bx	lr
 80082f8:	20000bf0 	.word	0x20000bf0
 80082fc:	20000bdc 	.word	0x20000bdc
 8008300:	20000bd0 	.word	0x20000bd0
 8008304:	200006f8 	.word	0x200006f8
 8008308:	200006f4 	.word	0x200006f4

0800830c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008316:	4b07      	ldr	r3, [pc, #28]	; (8008334 <vTaskPlaceOnEventList+0x28>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3318      	adds	r3, #24
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7fe fe48 	bl	8006fb4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008324:	2101      	movs	r1, #1
 8008326:	6838      	ldr	r0, [r7, #0]
 8008328:	f000 fafc 	bl	8008924 <prvAddCurrentTaskToDelayedList>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	200006f4 	.word	0x200006f4

08008338 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008344:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <vTaskPlaceOnEventListRestricted+0x38>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3318      	adds	r3, #24
 800834a:	4619      	mov	r1, r3
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f7fe fe0e 	bl	8006f6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8008358:	f04f 33ff 	mov.w	r3, #4294967295
 800835c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	68b8      	ldr	r0, [r7, #8]
 8008362:	f000 fadf 	bl	8008924 <prvAddCurrentTaskToDelayedList>
	}
 8008366:	bf00      	nop
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	200006f4 	.word	0x200006f4

08008374 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	3318      	adds	r3, #24
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe fe4b 	bl	8007024 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800838e:	4b1e      	ldr	r3, [pc, #120]	; (8008408 <xTaskRemoveFromEventList+0x94>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d11d      	bne.n	80083d2 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	3304      	adds	r3, #4
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fe42 	bl	8007024 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a4:	4b19      	ldr	r3, [pc, #100]	; (800840c <xTaskRemoveFromEventList+0x98>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d903      	bls.n	80083b4 <xTaskRemoveFromEventList+0x40>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b0:	4a16      	ldr	r2, [pc, #88]	; (800840c <xTaskRemoveFromEventList+0x98>)
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b8:	4613      	mov	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4a13      	ldr	r2, [pc, #76]	; (8008410 <xTaskRemoveFromEventList+0x9c>)
 80083c2:	441a      	add	r2, r3
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4619      	mov	r1, r3
 80083ca:	4610      	mov	r0, r2
 80083cc:	f7fe fdcf 	bl	8006f6e <vListInsertEnd>
 80083d0:	e005      	b.n	80083de <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	3318      	adds	r3, #24
 80083d6:	4619      	mov	r1, r3
 80083d8:	480e      	ldr	r0, [pc, #56]	; (8008414 <xTaskRemoveFromEventList+0xa0>)
 80083da:	f7fe fdc8 	bl	8006f6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e2:	4b0d      	ldr	r3, [pc, #52]	; (8008418 <xTaskRemoveFromEventList+0xa4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d905      	bls.n	80083f8 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80083ec:	2301      	movs	r3, #1
 80083ee:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80083f0:	4b0a      	ldr	r3, [pc, #40]	; (800841c <xTaskRemoveFromEventList+0xa8>)
 80083f2:	2201      	movs	r2, #1
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	e001      	b.n	80083fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 80083f8:	2300      	movs	r3, #0
 80083fa:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80083fc:	68fb      	ldr	r3, [r7, #12]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000bf0 	.word	0x20000bf0
 800840c:	20000bd0 	.word	0x20000bd0
 8008410:	200006f8 	.word	0x200006f8
 8008414:	20000b88 	.word	0x20000b88
 8008418:	200006f4 	.word	0x200006f4
 800841c:	20000bdc 	.word	0x20000bdc

08008420 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008428:	4b06      	ldr	r3, [pc, #24]	; (8008444 <vTaskInternalSetTimeOutState+0x24>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008430:	4b05      	ldr	r3, [pc, #20]	; (8008448 <vTaskInternalSetTimeOutState+0x28>)
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	605a      	str	r2, [r3, #4]
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	bc80      	pop	{r7}
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	20000be0 	.word	0x20000be0
 8008448:	20000bcc 	.word	0x20000bcc

0800844c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8008456:	f000 fdf7 	bl	8009048 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800845a:	4b1d      	ldr	r3, [pc, #116]	; (80084d0 <xTaskCheckForTimeOut+0x84>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008472:	d102      	bne.n	800847a <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e023      	b.n	80084c2 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	4b15      	ldr	r3, [pc, #84]	; (80084d4 <xTaskCheckForTimeOut+0x88>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	429a      	cmp	r2, r3
 8008484:	d007      	beq.n	8008496 <xTaskCheckForTimeOut+0x4a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	429a      	cmp	r2, r3
 800848e:	d302      	bcc.n	8008496 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008490:	2301      	movs	r3, #1
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	e015      	b.n	80084c2 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	429a      	cmp	r2, r3
 800849e:	d20b      	bcs.n	80084b8 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	1ad2      	subs	r2, r2, r3
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff ffb7 	bl	8008420 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]
 80084b6:	e004      	b.n	80084c2 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2200      	movs	r2, #0
 80084bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80084be:	2301      	movs	r3, #1
 80084c0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80084c2:	f000 fddb 	bl	800907c <vPortExitCritical>

	return xReturn;
 80084c6:	697b      	ldr	r3, [r7, #20]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	20000bcc 	.word	0x20000bcc
 80084d4:	20000be0 	.word	0x20000be0

080084d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80084dc:	4b03      	ldr	r3, [pc, #12]	; (80084ec <vTaskMissedYield+0x14>)
 80084de:	2201      	movs	r2, #1
 80084e0:	601a      	str	r2, [r3, #0]
}
 80084e2:	bf00      	nop
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bc80      	pop	{r7}
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	20000bdc 	.word	0x20000bdc

080084f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80084f8:	f000 f852 	bl	80085a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80084fc:	4b06      	ldr	r3, [pc, #24]	; (8008518 <prvIdleTask+0x28>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d9f9      	bls.n	80084f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <prvIdleTask+0x2c>)
 8008506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008514:	e7f0      	b.n	80084f8 <prvIdleTask+0x8>
 8008516:	bf00      	nop
 8008518:	200006f8 	.word	0x200006f8
 800851c:	e000ed04 	.word	0xe000ed04

08008520 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008526:	2300      	movs	r3, #0
 8008528:	607b      	str	r3, [r7, #4]
 800852a:	e00c      	b.n	8008546 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4a12      	ldr	r2, [pc, #72]	; (8008580 <prvInitialiseTaskLists+0x60>)
 8008538:	4413      	add	r3, r2
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe fcec 	bl	8006f18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3301      	adds	r3, #1
 8008544:	607b      	str	r3, [r7, #4]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b37      	cmp	r3, #55	; 0x37
 800854a:	d9ef      	bls.n	800852c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800854c:	480d      	ldr	r0, [pc, #52]	; (8008584 <prvInitialiseTaskLists+0x64>)
 800854e:	f7fe fce3 	bl	8006f18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008552:	480d      	ldr	r0, [pc, #52]	; (8008588 <prvInitialiseTaskLists+0x68>)
 8008554:	f7fe fce0 	bl	8006f18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008558:	480c      	ldr	r0, [pc, #48]	; (800858c <prvInitialiseTaskLists+0x6c>)
 800855a:	f7fe fcdd 	bl	8006f18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800855e:	480c      	ldr	r0, [pc, #48]	; (8008590 <prvInitialiseTaskLists+0x70>)
 8008560:	f7fe fcda 	bl	8006f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008564:	480b      	ldr	r0, [pc, #44]	; (8008594 <prvInitialiseTaskLists+0x74>)
 8008566:	f7fe fcd7 	bl	8006f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800856a:	4b0b      	ldr	r3, [pc, #44]	; (8008598 <prvInitialiseTaskLists+0x78>)
 800856c:	4a05      	ldr	r2, [pc, #20]	; (8008584 <prvInitialiseTaskLists+0x64>)
 800856e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008570:	4b0a      	ldr	r3, [pc, #40]	; (800859c <prvInitialiseTaskLists+0x7c>)
 8008572:	4a05      	ldr	r2, [pc, #20]	; (8008588 <prvInitialiseTaskLists+0x68>)
 8008574:	601a      	str	r2, [r3, #0]
}
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	200006f8 	.word	0x200006f8
 8008584:	20000b58 	.word	0x20000b58
 8008588:	20000b6c 	.word	0x20000b6c
 800858c:	20000b88 	.word	0x20000b88
 8008590:	20000b9c 	.word	0x20000b9c
 8008594:	20000bb4 	.word	0x20000bb4
 8008598:	20000b80 	.word	0x20000b80
 800859c:	20000b84 	.word	0x20000b84

080085a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085a6:	e019      	b.n	80085dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80085a8:	f000 fd4e 	bl	8009048 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80085ac:	4b10      	ldr	r3, [pc, #64]	; (80085f0 <prvCheckTasksWaitingTermination+0x50>)
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3304      	adds	r3, #4
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe fd33 	bl	8007024 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80085be:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <prvCheckTasksWaitingTermination+0x54>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	4a0b      	ldr	r2, [pc, #44]	; (80085f4 <prvCheckTasksWaitingTermination+0x54>)
 80085c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80085c8:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <prvCheckTasksWaitingTermination+0x58>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	4a0a      	ldr	r2, [pc, #40]	; (80085f8 <prvCheckTasksWaitingTermination+0x58>)
 80085d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80085d2:	f000 fd53 	bl	800907c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f810 	bl	80085fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085dc:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <prvCheckTasksWaitingTermination+0x58>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e1      	bne.n	80085a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20000b9c 	.word	0x20000b9c
 80085f4:	20000bc8 	.word	0x20000bc8
 80085f8:	20000bb0 	.word	0x20000bb0

080085fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800860a:	2b00      	cmp	r3, #0
 800860c:	d108      	bne.n	8008620 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fe48 	bl	80092a8 <vPortFree>
				vPortFree( pxTCB );
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fe45 	bl	80092a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800861e:	e007      	b.n	8008630 <prvDeleteTCB+0x34>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008626:	2b01      	cmp	r3, #1
 8008628:	d102      	bne.n	8008630 <prvDeleteTCB+0x34>
				vPortFree( pxTCB );
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fe3c 	bl	80092a8 <vPortFree>
	}
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800863e:	4b0e      	ldr	r3, [pc, #56]	; (8008678 <prvResetNextTaskUnblockTime+0x40>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <prvResetNextTaskUnblockTime+0x14>
 8008648:	2301      	movs	r3, #1
 800864a:	e000      	b.n	800864e <prvResetNextTaskUnblockTime+0x16>
 800864c:	2300      	movs	r3, #0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d004      	beq.n	800865c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008652:	4b0a      	ldr	r3, [pc, #40]	; (800867c <prvResetNextTaskUnblockTime+0x44>)
 8008654:	f04f 32ff 	mov.w	r2, #4294967295
 8008658:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800865a:	e008      	b.n	800866e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800865c:	4b06      	ldr	r3, [pc, #24]	; (8008678 <prvResetNextTaskUnblockTime+0x40>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	4a04      	ldr	r2, [pc, #16]	; (800867c <prvResetNextTaskUnblockTime+0x44>)
 800866c:	6013      	str	r3, [r2, #0]
}
 800866e:	bf00      	nop
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	bc80      	pop	{r7}
 8008676:	4770      	bx	lr
 8008678:	20000b80 	.word	0x20000b80
 800867c:	20000be8 	.word	0x20000be8

08008680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008686:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <xTaskGetSchedulerState+0x34>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d102      	bne.n	8008694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800868e:	2301      	movs	r3, #1
 8008690:	607b      	str	r3, [r7, #4]
 8008692:	e008      	b.n	80086a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008694:	4b08      	ldr	r3, [pc, #32]	; (80086b8 <xTaskGetSchedulerState+0x38>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d102      	bne.n	80086a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800869c:	2302      	movs	r3, #2
 800869e:	607b      	str	r3, [r7, #4]
 80086a0:	e001      	b.n	80086a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80086a2:	2300      	movs	r3, #0
 80086a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80086a6:	687b      	ldr	r3, [r7, #4]
	}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bc80      	pop	{r7}
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	20000bd4 	.word	0x20000bd4
 80086b8:	20000bf0 	.word	0x20000bf0

080086bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80086c8:	2300      	movs	r3, #0
 80086ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d056      	beq.n	8008780 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d6:	4b2d      	ldr	r3, [pc, #180]	; (800878c <xTaskPriorityInherit+0xd0>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	429a      	cmp	r2, r3
 80086de:	d246      	bcs.n	800876e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	db06      	blt.n	80086f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086e8:	4b28      	ldr	r3, [pc, #160]	; (800878c <xTaskPriorityInherit+0xd0>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	6959      	ldr	r1, [r3, #20]
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fe:	4613      	mov	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4a22      	ldr	r2, [pc, #136]	; (8008790 <xTaskPriorityInherit+0xd4>)
 8008708:	4413      	add	r3, r2
 800870a:	4299      	cmp	r1, r3
 800870c:	d101      	bne.n	8008712 <xTaskPriorityInherit+0x56>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <xTaskPriorityInherit+0x58>
 8008712:	2300      	movs	r3, #0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d022      	beq.n	800875e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	3304      	adds	r3, #4
 800871c:	4618      	mov	r0, r3
 800871e:	f7fe fc81 	bl	8007024 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008722:	4b1a      	ldr	r3, [pc, #104]	; (800878c <xTaskPriorityInherit+0xd0>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008730:	4b18      	ldr	r3, [pc, #96]	; (8008794 <xTaskPriorityInherit+0xd8>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	429a      	cmp	r2, r3
 8008736:	d903      	bls.n	8008740 <xTaskPriorityInherit+0x84>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	4a15      	ldr	r2, [pc, #84]	; (8008794 <xTaskPriorityInherit+0xd8>)
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008744:	4613      	mov	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4a10      	ldr	r2, [pc, #64]	; (8008790 <xTaskPriorityInherit+0xd4>)
 800874e:	441a      	add	r2, r3
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	3304      	adds	r3, #4
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f7fe fc09 	bl	8006f6e <vListInsertEnd>
 800875c:	e004      	b.n	8008768 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800875e:	4b0b      	ldr	r3, [pc, #44]	; (800878c <xTaskPriorityInherit+0xd0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008768:	2301      	movs	r3, #1
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	e008      	b.n	8008780 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008772:	4b06      	ldr	r3, [pc, #24]	; (800878c <xTaskPriorityInherit+0xd0>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008778:	429a      	cmp	r2, r3
 800877a:	d201      	bcs.n	8008780 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800877c:	2301      	movs	r3, #1
 800877e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008780:	68fb      	ldr	r3, [r7, #12]
	}
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	200006f4 	.word	0x200006f4
 8008790:	200006f8 	.word	0x200006f8
 8008794:	20000bd0 	.word	0x20000bd0

08008798 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d037      	beq.n	800881e <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b2:	1e5a      	subs	r2, r3, #1
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d02c      	beq.n	800881e <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d128      	bne.n	800881e <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	3304      	adds	r3, #4
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fe fc27 	bl	8007024 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ee:	4b0e      	ldr	r3, [pc, #56]	; (8008828 <xTaskPriorityDisinherit+0x90>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d903      	bls.n	80087fe <xTaskPriorityDisinherit+0x66>
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fa:	4a0b      	ldr	r2, [pc, #44]	; (8008828 <xTaskPriorityDisinherit+0x90>)
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4a08      	ldr	r2, [pc, #32]	; (800882c <xTaskPriorityDisinherit+0x94>)
 800880c:	441a      	add	r2, r3
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	3304      	adds	r3, #4
 8008812:	4619      	mov	r1, r3
 8008814:	4610      	mov	r0, r2
 8008816:	f7fe fbaa 	bl	8006f6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800881a:	2301      	movs	r3, #1
 800881c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800881e:	68fb      	ldr	r3, [r7, #12]
	}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	20000bd0 	.word	0x20000bd0
 800882c:	200006f8 	.word	0x200006f8

08008830 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800883e:	2301      	movs	r3, #1
 8008840:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d050      	beq.n	80088ea <vTaskPriorityDisinheritAfterTimeout+0xba>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d902      	bls.n	8008858 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	617b      	str	r3, [r7, #20]
 8008856:	e002      	b.n	800885e <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800885c:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	429a      	cmp	r2, r3
 8008866:	d040      	beq.n	80088ea <vTaskPriorityDisinheritAfterTimeout+0xba>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	429a      	cmp	r2, r3
 8008870:	d13b      	bne.n	80088ea <vTaskPriorityDisinheritAfterTimeout+0xba>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008876:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	2b00      	cmp	r3, #0
 8008884:	db04      	blt.n	8008890 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	6959      	ldr	r1, [r3, #20]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4a15      	ldr	r2, [pc, #84]	; (80088f4 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80088a0:	4413      	add	r3, r2
 80088a2:	4299      	cmp	r1, r3
 80088a4:	d101      	bne.n	80088aa <vTaskPriorityDisinheritAfterTimeout+0x7a>
 80088a6:	2301      	movs	r3, #1
 80088a8:	e000      	b.n	80088ac <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80088aa:	2300      	movs	r3, #0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01c      	beq.n	80088ea <vTaskPriorityDisinheritAfterTimeout+0xba>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fbb5 	bl	8007024 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088be:	4b0e      	ldr	r3, [pc, #56]	; (80088f8 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d903      	bls.n	80088ce <vTaskPriorityDisinheritAfterTimeout+0x9e>
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	4a0b      	ldr	r2, [pc, #44]	; (80088f8 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4a06      	ldr	r2, [pc, #24]	; (80088f4 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80088dc:	441a      	add	r2, r3
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f7fe fb42 	bl	8006f6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088ea:	bf00      	nop
 80088ec:	3718      	adds	r7, #24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	200006f8 	.word	0x200006f8
 80088f8:	20000bd0 	.word	0x20000bd0

080088fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80088fc:	b480      	push	{r7}
 80088fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008900:	4b07      	ldr	r3, [pc, #28]	; (8008920 <pvTaskIncrementMutexHeldCount+0x24>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d004      	beq.n	8008912 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008908:	4b05      	ldr	r3, [pc, #20]	; (8008920 <pvTaskIncrementMutexHeldCount+0x24>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800890e:	3201      	adds	r2, #1
 8008910:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008912:	4b03      	ldr	r3, [pc, #12]	; (8008920 <pvTaskIncrementMutexHeldCount+0x24>)
 8008914:	681b      	ldr	r3, [r3, #0]
	}
 8008916:	4618      	mov	r0, r3
 8008918:	46bd      	mov	sp, r7
 800891a:	bc80      	pop	{r7}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	200006f4 	.word	0x200006f4

08008924 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800892e:	4b21      	ldr	r3, [pc, #132]	; (80089b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008934:	4b20      	ldr	r3, [pc, #128]	; (80089b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3304      	adds	r3, #4
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fb72 	bl	8007024 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008946:	d10a      	bne.n	800895e <prvAddCurrentTaskToDelayedList+0x3a>
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d007      	beq.n	800895e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800894e:	4b1a      	ldr	r3, [pc, #104]	; (80089b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3304      	adds	r3, #4
 8008954:	4619      	mov	r1, r3
 8008956:	4819      	ldr	r0, [pc, #100]	; (80089bc <prvAddCurrentTaskToDelayedList+0x98>)
 8008958:	f7fe fb09 	bl	8006f6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800895c:	e026      	b.n	80089ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4413      	add	r3, r2
 8008964:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008966:	4b14      	ldr	r3, [pc, #80]	; (80089b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	429a      	cmp	r2, r3
 8008974:	d209      	bcs.n	800898a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008976:	4b12      	ldr	r3, [pc, #72]	; (80089c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3304      	adds	r3, #4
 8008980:	4619      	mov	r1, r3
 8008982:	4610      	mov	r0, r2
 8008984:	f7fe fb16 	bl	8006fb4 <vListInsert>
}
 8008988:	e010      	b.n	80089ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800898a:	4b0e      	ldr	r3, [pc, #56]	; (80089c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	4b0a      	ldr	r3, [pc, #40]	; (80089b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3304      	adds	r3, #4
 8008994:	4619      	mov	r1, r3
 8008996:	4610      	mov	r0, r2
 8008998:	f7fe fb0c 	bl	8006fb4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800899c:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d202      	bcs.n	80089ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80089a6:	4a08      	ldr	r2, [pc, #32]	; (80089c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	6013      	str	r3, [r2, #0]
}
 80089ac:	bf00      	nop
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	20000bcc 	.word	0x20000bcc
 80089b8:	200006f4 	.word	0x200006f4
 80089bc:	20000bb4 	.word	0x20000bb4
 80089c0:	20000b84 	.word	0x20000b84
 80089c4:	20000b80 	.word	0x20000b80
 80089c8:	20000be8 	.word	0x20000be8

080089cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b088      	sub	sp, #32
 80089d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80089d6:	f000 fa69 	bl	8008eac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80089da:	4b15      	ldr	r3, [pc, #84]	; (8008a30 <xTimerCreateTimerTask+0x64>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d020      	beq.n	8008a24 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80089e6:	2300      	movs	r3, #0
 80089e8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80089ea:	463a      	mov	r2, r7
 80089ec:	1d39      	adds	r1, r7, #4
 80089ee:	f107 0308 	add.w	r3, r7, #8
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe fa76 	bl	8006ee4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	9202      	str	r2, [sp, #8]
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	2302      	movs	r3, #2
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	2300      	movs	r3, #0
 8008a08:	460a      	mov	r2, r1
 8008a0a:	490a      	ldr	r1, [pc, #40]	; (8008a34 <xTimerCreateTimerTask+0x68>)
 8008a0c:	480a      	ldr	r0, [pc, #40]	; (8008a38 <xTimerCreateTimerTask+0x6c>)
 8008a0e:	f7ff f8ff 	bl	8007c10 <xTaskCreateStatic>
 8008a12:	4603      	mov	r3, r0
 8008a14:	4a09      	ldr	r2, [pc, #36]	; (8008a3c <xTimerCreateTimerTask+0x70>)
 8008a16:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a18:	4b08      	ldr	r3, [pc, #32]	; (8008a3c <xTimerCreateTimerTask+0x70>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8008a20:	2301      	movs	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8008a24:	68fb      	ldr	r3, [r7, #12]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	20000c24 	.word	0x20000c24
 8008a34:	080095a8 	.word	0x080095a8
 8008a38:	08008b25 	.word	0x08008b25
 8008a3c:	20000c28 	.word	0x20000c28

08008a40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b08a      	sub	sp, #40	; 0x28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
 8008a4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a52:	4b1a      	ldr	r3, [pc, #104]	; (8008abc <xTimerGenericCommand+0x7c>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d02a      	beq.n	8008ab0 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2b05      	cmp	r3, #5
 8008a6a:	dc18      	bgt.n	8008a9e <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a6c:	f7ff fe08 	bl	8008680 <xTaskGetSchedulerState>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d109      	bne.n	8008a8a <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a76:	4b11      	ldr	r3, [pc, #68]	; (8008abc <xTimerGenericCommand+0x7c>)
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	f107 0114 	add.w	r1, r7, #20
 8008a7e:	2300      	movs	r3, #0
 8008a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a82:	f7fe fbdb 	bl	800723c <xQueueGenericSend>
 8008a86:	6278      	str	r0, [r7, #36]	; 0x24
 8008a88:	e012      	b.n	8008ab0 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a8a:	4b0c      	ldr	r3, [pc, #48]	; (8008abc <xTimerGenericCommand+0x7c>)
 8008a8c:	6818      	ldr	r0, [r3, #0]
 8008a8e:	f107 0114 	add.w	r1, r7, #20
 8008a92:	2300      	movs	r3, #0
 8008a94:	2200      	movs	r2, #0
 8008a96:	f7fe fbd1 	bl	800723c <xQueueGenericSend>
 8008a9a:	6278      	str	r0, [r7, #36]	; 0x24
 8008a9c:	e008      	b.n	8008ab0 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a9e:	4b07      	ldr	r3, [pc, #28]	; (8008abc <xTimerGenericCommand+0x7c>)
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	f107 0114 	add.w	r1, r7, #20
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	f7fe fc71 	bl	8007390 <xQueueGenericSendFromISR>
 8008aae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3728      	adds	r7, #40	; 0x28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000c24 	.word	0x20000c24

08008ac0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af02      	add	r7, sp, #8
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008aca:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <prvProcessExpiredTimer+0x60>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe faa3 	bl	8007024 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d114      	bne.n	8008b10 <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	699a      	ldr	r2, [r3, #24]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	18d1      	adds	r1, r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 f8ba 	bl	8008c6c <prvInsertTimerInActiveList>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d008      	beq.n	8008b10 <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008afe:	2300      	movs	r3, #0
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	2300      	movs	r3, #0
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	2100      	movs	r1, #0
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f7ff ff99 	bl	8008a40 <xTimerGenericCommand>
 8008b0e:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	4798      	blx	r3
}
 8008b18:	bf00      	nop
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20000c1c 	.word	0x20000c1c

08008b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b2c:	f107 0308 	add.w	r3, r7, #8
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 f857 	bl	8008be4 <prvGetNextExpireTime>
 8008b36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f803 	bl	8008b48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b42:	f000 f8d5 	bl	8008cf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b46:	e7f1      	b.n	8008b2c <prvTimerTask+0x8>

08008b48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b52:	f7ff fa35 	bl	8007fc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b56:	f107 0308 	add.w	r3, r7, #8
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 f866 	bl	8008c2c <prvSampleTimeNow>
 8008b60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d130      	bne.n	8008bca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <prvProcessTimerOrBlockTask+0x3c>
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d806      	bhi.n	8008b84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b76:	f7ff fa31 	bl	8007fdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b7a:	68f9      	ldr	r1, [r7, #12]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff ff9f 	bl	8008ac0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b82:	e024      	b.n	8008bce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d008      	beq.n	8008b9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b8a:	4b13      	ldr	r3, [pc, #76]	; (8008bd8 <prvProcessTimerOrBlockTask+0x90>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	bf0c      	ite	eq
 8008b94:	2301      	moveq	r3, #1
 8008b96:	2300      	movne	r3, #0
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b9c:	4b0f      	ldr	r3, [pc, #60]	; (8008bdc <prvProcessTimerOrBlockTask+0x94>)
 8008b9e:	6818      	ldr	r0, [r3, #0]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	f7fe fffd 	bl	8007ba8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008bae:	f7ff fa15 	bl	8007fdc <xTaskResumeAll>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10a      	bne.n	8008bce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008bb8:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <prvProcessTimerOrBlockTask+0x98>)
 8008bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	f3bf 8f6f 	isb	sy
}
 8008bc8:	e001      	b.n	8008bce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008bca:	f7ff fa07 	bl	8007fdc <xTaskResumeAll>
}
 8008bce:	bf00      	nop
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20000c20 	.word	0x20000c20
 8008bdc:	20000c24 	.word	0x20000c24
 8008be0:	e000ed04 	.word	0xe000ed04

08008be4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008bec:	4b0e      	ldr	r3, [pc, #56]	; (8008c28 <prvGetNextExpireTime+0x44>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bf0c      	ite	eq
 8008bf6:	2301      	moveq	r3, #1
 8008bf8:	2300      	movne	r3, #0
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d105      	bne.n	8008c16 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c0a:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <prvGetNextExpireTime+0x44>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	e001      	b.n	8008c1a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bc80      	pop	{r7}
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	20000c1c 	.word	0x20000c1c

08008c2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c34:	f7ff fa60 	bl	80080f8 <xTaskGetTickCount>
 8008c38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c3a:	4b0b      	ldr	r3, [pc, #44]	; (8008c68 <prvSampleTimeNow+0x3c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d205      	bcs.n	8008c50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c44:	f000 f8de 	bl	8008e04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	e002      	b.n	8008c56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c56:	4a04      	ldr	r2, [pc, #16]	; (8008c68 <prvSampleTimeNow+0x3c>)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20000c2c 	.word	0x20000c2c

08008c6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d812      	bhi.n	8008cb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	1ad2      	subs	r2, r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d302      	bcc.n	8008ca6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	617b      	str	r3, [r7, #20]
 8008ca4:	e01b      	b.n	8008cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ca6:	4b10      	ldr	r3, [pc, #64]	; (8008ce8 <prvInsertTimerInActiveList+0x7c>)
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3304      	adds	r3, #4
 8008cae:	4619      	mov	r1, r3
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	f7fe f97f 	bl	8006fb4 <vListInsert>
 8008cb6:	e012      	b.n	8008cde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d206      	bcs.n	8008cce <prvInsertTimerInActiveList+0x62>
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d302      	bcc.n	8008cce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	617b      	str	r3, [r7, #20]
 8008ccc:	e007      	b.n	8008cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cce:	4b07      	ldr	r3, [pc, #28]	; (8008cec <prvInsertTimerInActiveList+0x80>)
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	4610      	mov	r0, r2
 8008cda:	f7fe f96b 	bl	8006fb4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008cde:	697b      	ldr	r3, [r7, #20]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20000c20 	.word	0x20000c20
 8008cec:	20000c1c 	.word	0x20000c1c

08008cf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08c      	sub	sp, #48	; 0x30
 8008cf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cf6:	e073      	b.n	8008de0 <prvProcessReceivedCommands+0xf0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	da0b      	bge.n	8008d16 <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008cfe:	f107 0308 	add.w	r3, r7, #8
 8008d02:	3304      	adds	r3, #4
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d0c:	6850      	ldr	r0, [r2, #4]
 8008d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d10:	6892      	ldr	r2, [r2, #8]
 8008d12:	4611      	mov	r1, r2
 8008d14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	db60      	blt.n	8008dde <prvProcessReceivedCommands+0xee>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d004      	beq.n	8008d32 <prvProcessReceivedCommands+0x42>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	3304      	adds	r3, #4
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fe f979 	bl	8007024 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d32:	1d3b      	adds	r3, r7, #4
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff ff79 	bl	8008c2c <prvSampleTimeNow>
 8008d3a:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b09      	cmp	r3, #9
 8008d40:	d84e      	bhi.n	8008de0 <prvProcessReceivedCommands+0xf0>
 8008d42:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <prvProcessReceivedCommands+0x58>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008d71 	.word	0x08008d71
 8008d4c:	08008d71 	.word	0x08008d71
 8008d50:	08008d71 	.word	0x08008d71
 8008d54:	08008de1 	.word	0x08008de1
 8008d58:	08008db3 	.word	0x08008db3
 8008d5c:	08008dcd 	.word	0x08008dcd
 8008d60:	08008d71 	.word	0x08008d71
 8008d64:	08008d71 	.word	0x08008d71
 8008d68:	08008de1 	.word	0x08008de1
 8008d6c:	08008db3 	.word	0x08008db3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	18d1      	adds	r1, r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	69fa      	ldr	r2, [r7, #28]
 8008d7c:	6a38      	ldr	r0, [r7, #32]
 8008d7e:	f7ff ff75 	bl	8008c6c <prvInsertTimerInActiveList>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d02b      	beq.n	8008de0 <prvProcessReceivedCommands+0xf0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	6a38      	ldr	r0, [r7, #32]
 8008d8e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d123      	bne.n	8008de0 <prvProcessReceivedCommands+0xf0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	441a      	add	r2, r3
 8008da0:	2300      	movs	r3, #0
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	2300      	movs	r3, #0
 8008da6:	2100      	movs	r1, #0
 8008da8:	6a38      	ldr	r0, [r7, #32]
 8008daa:	f7ff fe49 	bl	8008a40 <xTimerGenericCommand>
 8008dae:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8008db0:	e016      	b.n	8008de0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	699a      	ldr	r2, [r3, #24]
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	18d1      	adds	r1, r2, r3
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	69fa      	ldr	r2, [r7, #28]
 8008dc4:	6a38      	ldr	r0, [r7, #32]
 8008dc6:	f7ff ff51 	bl	8008c6c <prvInsertTimerInActiveList>
					break;
 8008dca:	e009      	b.n	8008de0 <prvProcessReceivedCommands+0xf0>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d104      	bne.n	8008de0 <prvProcessReceivedCommands+0xf0>
						{
							vPortFree( pxTimer );
 8008dd6:	6a38      	ldr	r0, [r7, #32]
 8008dd8:	f000 fa66 	bl	80092a8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ddc:	e000      	b.n	8008de0 <prvProcessReceivedCommands+0xf0>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008dde:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008de0:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <prvProcessReceivedCommands+0x110>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f107 0108 	add.w	r1, r7, #8
 8008de8:	2200      	movs	r2, #0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fe fb7e 	bl	80074ec <xQueueReceive>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d180      	bne.n	8008cf8 <prvProcessReceivedCommands+0x8>
	}
}
 8008df6:	bf00      	nop
 8008df8:	bf00      	nop
 8008dfa:	3728      	adds	r7, #40	; 0x28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20000c24 	.word	0x20000c24

08008e04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e0a:	e037      	b.n	8008e7c <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e0c:	4b25      	ldr	r3, [pc, #148]	; (8008ea4 <prvSwitchTimerLists+0xa0>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e16:	4b23      	ldr	r3, [pc, #140]	; (8008ea4 <prvSwitchTimerLists+0xa0>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3304      	adds	r3, #4
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe f8fd 	bl	8007024 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d120      	bne.n	8008e7c <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	4413      	add	r3, r2
 8008e42:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d90e      	bls.n	8008e6a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e58:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <prvSwitchTimerLists+0xa0>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3304      	adds	r3, #4
 8008e60:	4619      	mov	r1, r3
 8008e62:	4610      	mov	r0, r2
 8008e64:	f7fe f8a6 	bl	8006fb4 <vListInsert>
 8008e68:	e008      	b.n	8008e7c <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	2100      	movs	r1, #0
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff fde3 	bl	8008a40 <xTimerGenericCommand>
 8008e7a:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <prvSwitchTimerLists+0xa0>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1c2      	bne.n	8008e0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008e86:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <prvSwitchTimerLists+0xa0>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008e8c:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <prvSwitchTimerLists+0xa4>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a04      	ldr	r2, [pc, #16]	; (8008ea4 <prvSwitchTimerLists+0xa0>)
 8008e92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e94:	4a04      	ldr	r2, [pc, #16]	; (8008ea8 <prvSwitchTimerLists+0xa4>)
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	6013      	str	r3, [r2, #0]
}
 8008e9a:	bf00      	nop
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20000c1c 	.word	0x20000c1c
 8008ea8:	20000c20 	.word	0x20000c20

08008eac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008eb2:	f000 f8c9 	bl	8009048 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008eb6:	4b15      	ldr	r3, [pc, #84]	; (8008f0c <prvCheckForValidListAndQueue+0x60>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d120      	bne.n	8008f00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ebe:	4814      	ldr	r0, [pc, #80]	; (8008f10 <prvCheckForValidListAndQueue+0x64>)
 8008ec0:	f7fe f82a 	bl	8006f18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ec4:	4813      	ldr	r0, [pc, #76]	; (8008f14 <prvCheckForValidListAndQueue+0x68>)
 8008ec6:	f7fe f827 	bl	8006f18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008eca:	4b13      	ldr	r3, [pc, #76]	; (8008f18 <prvCheckForValidListAndQueue+0x6c>)
 8008ecc:	4a10      	ldr	r2, [pc, #64]	; (8008f10 <prvCheckForValidListAndQueue+0x64>)
 8008ece:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ed0:	4b12      	ldr	r3, [pc, #72]	; (8008f1c <prvCheckForValidListAndQueue+0x70>)
 8008ed2:	4a10      	ldr	r2, [pc, #64]	; (8008f14 <prvCheckForValidListAndQueue+0x68>)
 8008ed4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	4b11      	ldr	r3, [pc, #68]	; (8008f20 <prvCheckForValidListAndQueue+0x74>)
 8008edc:	4a11      	ldr	r2, [pc, #68]	; (8008f24 <prvCheckForValidListAndQueue+0x78>)
 8008ede:	2110      	movs	r1, #16
 8008ee0:	200a      	movs	r0, #10
 8008ee2:	f7fe f923 	bl	800712c <xQueueGenericCreateStatic>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	4a08      	ldr	r2, [pc, #32]	; (8008f0c <prvCheckForValidListAndQueue+0x60>)
 8008eea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008eec:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <prvCheckForValidListAndQueue+0x60>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d005      	beq.n	8008f00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ef4:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <prvCheckForValidListAndQueue+0x60>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	490b      	ldr	r1, [pc, #44]	; (8008f28 <prvCheckForValidListAndQueue+0x7c>)
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fe fe2c 	bl	8007b58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f00:	f000 f8bc 	bl	800907c <vPortExitCritical>
}
 8008f04:	bf00      	nop
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20000c24 	.word	0x20000c24
 8008f10:	20000bf4 	.word	0x20000bf4
 8008f14:	20000c08 	.word	0x20000c08
 8008f18:	20000c1c 	.word	0x20000c1c
 8008f1c:	20000c20 	.word	0x20000c20
 8008f20:	20000cd0 	.word	0x20000cd0
 8008f24:	20000c30 	.word	0x20000c30
 8008f28:	080095b0 	.word	0x080095b0

08008f2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3b04      	subs	r3, #4
 8008f3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3b04      	subs	r3, #4
 8008f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	f023 0201 	bic.w	r2, r3, #1
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3b04      	subs	r3, #4
 8008f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f5c:	4a08      	ldr	r2, [pc, #32]	; (8008f80 <pxPortInitialiseStack+0x54>)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3b14      	subs	r3, #20
 8008f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3b20      	subs	r3, #32
 8008f72:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f74:	68fb      	ldr	r3, [r7, #12]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bc80      	pop	{r7}
 8008f7e:	4770      	bx	lr
 8008f80:	08008f85 	.word	0x08008f85

08008f84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	607b      	str	r3, [r7, #4]
}
 8008fa0:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008fa2:	bf00      	nop
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d0fc      	beq.n	8008fa4 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008faa:	bf00      	nop
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bc80      	pop	{r7}
 8008fb4:	4770      	bx	lr
	...

08008fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008fc0:	4b07      	ldr	r3, [pc, #28]	; (8008fe0 <pxCurrentTCBConst2>)
 8008fc2:	6819      	ldr	r1, [r3, #0]
 8008fc4:	6808      	ldr	r0, [r1, #0]
 8008fc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008fca:	f380 8809 	msr	PSP, r0
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f04f 0000 	mov.w	r0, #0
 8008fd6:	f380 8811 	msr	BASEPRI, r0
 8008fda:	f04e 0e0d 	orr.w	lr, lr, #13
 8008fde:	4770      	bx	lr

08008fe0 <pxCurrentTCBConst2>:
 8008fe0:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop

08008fe8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008fe8:	4806      	ldr	r0, [pc, #24]	; (8009004 <prvPortStartFirstTask+0x1c>)
 8008fea:	6800      	ldr	r0, [r0, #0]
 8008fec:	6800      	ldr	r0, [r0, #0]
 8008fee:	f380 8808 	msr	MSP, r0
 8008ff2:	b662      	cpsie	i
 8008ff4:	b661      	cpsie	f
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	df00      	svc	0
 8009000:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009002:	bf00      	nop
 8009004:	e000ed08 	.word	0xe000ed08

08009008 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800900c:	4b0c      	ldr	r3, [pc, #48]	; (8009040 <xPortStartScheduler+0x38>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a0b      	ldr	r2, [pc, #44]	; (8009040 <xPortStartScheduler+0x38>)
 8009012:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009018:	4b09      	ldr	r3, [pc, #36]	; (8009040 <xPortStartScheduler+0x38>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a08      	ldr	r2, [pc, #32]	; (8009040 <xPortStartScheduler+0x38>)
 800901e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009024:	f000 f88a 	bl	800913c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009028:	4b06      	ldr	r3, [pc, #24]	; (8009044 <xPortStartScheduler+0x3c>)
 800902a:	2200      	movs	r2, #0
 800902c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800902e:	f7ff ffdb 	bl	8008fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009032:	f7ff f91d 	bl	8008270 <vTaskSwitchContext>
	prvTaskExitError();
 8009036:	f7ff ffa5 	bl	8008f84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	bd80      	pop	{r7, pc}
 8009040:	e000ed20 	.word	0xe000ed20
 8009044:	2000000c 	.word	0x2000000c

08009048 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	607b      	str	r3, [r7, #4]
}
 8009060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009062:	4b05      	ldr	r3, [pc, #20]	; (8009078 <vPortEnterCritical+0x30>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3301      	adds	r3, #1
 8009068:	4a03      	ldr	r2, [pc, #12]	; (8009078 <vPortEnterCritical+0x30>)
 800906a:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	bc80      	pop	{r7}
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	2000000c 	.word	0x2000000c

0800907c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8009082:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <vPortExitCritical+0x30>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3b01      	subs	r3, #1
 8009088:	4a08      	ldr	r2, [pc, #32]	; (80090ac <vPortExitCritical+0x30>)
 800908a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800908c:	4b07      	ldr	r3, [pc, #28]	; (80090ac <vPortExitCritical+0x30>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d105      	bne.n	80090a0 <vPortExitCritical+0x24>
 8009094:	2300      	movs	r3, #0
 8009096:	607b      	str	r3, [r7, #4]
	__asm volatile
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f383 8811 	msr	BASEPRI, r3
}
 800909e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bc80      	pop	{r7}
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	2000000c 	.word	0x2000000c

080090b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090b0:	f3ef 8009 	mrs	r0, PSP
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	4b0d      	ldr	r3, [pc, #52]	; (80090f0 <pxCurrentTCBConst>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090c0:	6010      	str	r0, [r2, #0]
 80090c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80090c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090ca:	f380 8811 	msr	BASEPRI, r0
 80090ce:	f7ff f8cf 	bl	8008270 <vTaskSwitchContext>
 80090d2:	f04f 0000 	mov.w	r0, #0
 80090d6:	f380 8811 	msr	BASEPRI, r0
 80090da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80090de:	6819      	ldr	r1, [r3, #0]
 80090e0:	6808      	ldr	r0, [r1, #0]
 80090e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090e6:	f380 8809 	msr	PSP, r0
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	4770      	bx	lr

080090f0 <pxCurrentTCBConst>:
 80090f0:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090f4:	bf00      	nop
 80090f6:	bf00      	nop

080090f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	607b      	str	r3, [r7, #4]
}
 8009110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009112:	f7fe ffff 	bl	8008114 <xTaskIncrementTick>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800911c:	4b06      	ldr	r3, [pc, #24]	; (8009138 <xPortSysTickHandler+0x40>)
 800911e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	2300      	movs	r3, #0
 8009126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f383 8811 	msr	BASEPRI, r3
}
 800912e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	e000ed04 	.word	0xe000ed04

0800913c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <vPortSetupTimerInterrupt+0x30>)
 8009142:	2200      	movs	r2, #0
 8009144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009146:	4b0a      	ldr	r3, [pc, #40]	; (8009170 <vPortSetupTimerInterrupt+0x34>)
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800914c:	4b09      	ldr	r3, [pc, #36]	; (8009174 <vPortSetupTimerInterrupt+0x38>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a09      	ldr	r2, [pc, #36]	; (8009178 <vPortSetupTimerInterrupt+0x3c>)
 8009152:	fba2 2303 	umull	r2, r3, r2, r3
 8009156:	099b      	lsrs	r3, r3, #6
 8009158:	4a08      	ldr	r2, [pc, #32]	; (800917c <vPortSetupTimerInterrupt+0x40>)
 800915a:	3b01      	subs	r3, #1
 800915c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800915e:	4b03      	ldr	r3, [pc, #12]	; (800916c <vPortSetupTimerInterrupt+0x30>)
 8009160:	2207      	movs	r2, #7
 8009162:	601a      	str	r2, [r3, #0]
}
 8009164:	bf00      	nop
 8009166:	46bd      	mov	sp, r7
 8009168:	bc80      	pop	{r7}
 800916a:	4770      	bx	lr
 800916c:	e000e010 	.word	0xe000e010
 8009170:	e000e018 	.word	0xe000e018
 8009174:	20000000 	.word	0x20000000
 8009178:	10624dd3 	.word	0x10624dd3
 800917c:	e000e014 	.word	0xe000e014

08009180 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800918c:	f7fe ff18 	bl	8007fc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009190:	4b40      	ldr	r3, [pc, #256]	; (8009294 <pvPortMalloc+0x114>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d101      	bne.n	800919c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009198:	f000 f8c0 	bl	800931c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800919c:	4b3e      	ldr	r3, [pc, #248]	; (8009298 <pvPortMalloc+0x118>)
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4013      	ands	r3, r2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d16d      	bne.n	8009284 <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00d      	beq.n	80091ca <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 80091ae:	2208      	movs	r2, #8
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4413      	add	r3, r2
 80091b4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f003 0307 	and.w	r3, r3, #7
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d004      	beq.n	80091ca <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f023 0307 	bic.w	r3, r3, #7
 80091c6:	3308      	adds	r3, #8
 80091c8:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d059      	beq.n	8009284 <pvPortMalloc+0x104>
 80091d0:	4b32      	ldr	r3, [pc, #200]	; (800929c <pvPortMalloc+0x11c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d854      	bhi.n	8009284 <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091da:	4b31      	ldr	r3, [pc, #196]	; (80092a0 <pvPortMalloc+0x120>)
 80091dc:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80091de:	4b30      	ldr	r3, [pc, #192]	; (80092a0 <pvPortMalloc+0x120>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091e4:	e004      	b.n	80091f0 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d903      	bls.n	8009202 <pvPortMalloc+0x82>
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1f1      	bne.n	80091e6 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009202:	4b24      	ldr	r3, [pc, #144]	; (8009294 <pvPortMalloc+0x114>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	429a      	cmp	r2, r3
 800920a:	d03b      	beq.n	8009284 <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2208      	movs	r2, #8
 8009212:	4413      	add	r3, r2
 8009214:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	1ad2      	subs	r2, r2, r3
 8009226:	2308      	movs	r3, #8
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	429a      	cmp	r2, r3
 800922c:	d90f      	bls.n	800924e <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4413      	add	r3, r2
 8009234:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	1ad2      	subs	r2, r2, r3
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009248:	68b8      	ldr	r0, [r7, #8]
 800924a:	f000 f8c9 	bl	80093e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800924e:	4b13      	ldr	r3, [pc, #76]	; (800929c <pvPortMalloc+0x11c>)
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	4a10      	ldr	r2, [pc, #64]	; (800929c <pvPortMalloc+0x11c>)
 800925a:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800925c:	4b0f      	ldr	r3, [pc, #60]	; (800929c <pvPortMalloc+0x11c>)
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	4b10      	ldr	r3, [pc, #64]	; (80092a4 <pvPortMalloc+0x124>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	429a      	cmp	r2, r3
 8009266:	d203      	bcs.n	8009270 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009268:	4b0c      	ldr	r3, [pc, #48]	; (800929c <pvPortMalloc+0x11c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a0d      	ldr	r2, [pc, #52]	; (80092a4 <pvPortMalloc+0x124>)
 800926e:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	4b08      	ldr	r3, [pc, #32]	; (8009298 <pvPortMalloc+0x118>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	431a      	orrs	r2, r3
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2200      	movs	r2, #0
 8009282:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009284:	f7fe feaa 	bl	8007fdc <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8009288:	68fb      	ldr	r3, [r7, #12]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	20003528 	.word	0x20003528
 8009298:	20003534 	.word	0x20003534
 800929c:	2000352c 	.word	0x2000352c
 80092a0:	20003520 	.word	0x20003520
 80092a4:	20003530 	.word	0x20003530

080092a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d027      	beq.n	800930a <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092ba:	2308      	movs	r3, #8
 80092bc:	425b      	negs	r3, r3
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	4413      	add	r3, r2
 80092c2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	4b11      	ldr	r3, [pc, #68]	; (8009314 <vPortFree+0x6c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4013      	ands	r3, r2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d019      	beq.n	800930a <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d115      	bne.n	800930a <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	4b0c      	ldr	r3, [pc, #48]	; (8009314 <vPortFree+0x6c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	43db      	mvns	r3, r3
 80092e8:	401a      	ands	r2, r3
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80092ee:	f7fe fe67 	bl	8007fc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	4b08      	ldr	r3, [pc, #32]	; (8009318 <vPortFree+0x70>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4413      	add	r3, r2
 80092fc:	4a06      	ldr	r2, [pc, #24]	; (8009318 <vPortFree+0x70>)
 80092fe:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009300:	68b8      	ldr	r0, [r7, #8]
 8009302:	f000 f86d 	bl	80093e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009306:	f7fe fe69 	bl	8007fdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800930a:	bf00      	nop
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20003534 	.word	0x20003534
 8009318:	2000352c 	.word	0x2000352c

0800931c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009322:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009326:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009328:	4b27      	ldr	r3, [pc, #156]	; (80093c8 <prvHeapInit+0xac>)
 800932a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f003 0307 	and.w	r3, r3, #7
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00c      	beq.n	8009350 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	3307      	adds	r3, #7
 800933a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f023 0307 	bic.w	r3, r3, #7
 8009342:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	4a1f      	ldr	r2, [pc, #124]	; (80093c8 <prvHeapInit+0xac>)
 800934c:	4413      	add	r3, r2
 800934e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009354:	4a1d      	ldr	r2, [pc, #116]	; (80093cc <prvHeapInit+0xb0>)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800935a:	4b1c      	ldr	r3, [pc, #112]	; (80093cc <prvHeapInit+0xb0>)
 800935c:	2200      	movs	r2, #0
 800935e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	4413      	add	r3, r2
 8009366:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009368:	2208      	movs	r2, #8
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	1a9b      	subs	r3, r3, r2
 800936e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f023 0307 	bic.w	r3, r3, #7
 8009376:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	4a15      	ldr	r2, [pc, #84]	; (80093d0 <prvHeapInit+0xb4>)
 800937c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800937e:	4b14      	ldr	r3, [pc, #80]	; (80093d0 <prvHeapInit+0xb4>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2200      	movs	r2, #0
 8009384:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009386:	4b12      	ldr	r3, [pc, #72]	; (80093d0 <prvHeapInit+0xb4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	1ad2      	subs	r2, r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800939c:	4b0c      	ldr	r3, [pc, #48]	; (80093d0 <prvHeapInit+0xb4>)
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	4a0a      	ldr	r2, [pc, #40]	; (80093d4 <prvHeapInit+0xb8>)
 80093aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	4a09      	ldr	r2, [pc, #36]	; (80093d8 <prvHeapInit+0xbc>)
 80093b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093b4:	4b09      	ldr	r3, [pc, #36]	; (80093dc <prvHeapInit+0xc0>)
 80093b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093ba:	601a      	str	r2, [r3, #0]
}
 80093bc:	bf00      	nop
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bc80      	pop	{r7}
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	20000d20 	.word	0x20000d20
 80093cc:	20003520 	.word	0x20003520
 80093d0:	20003528 	.word	0x20003528
 80093d4:	20003530 	.word	0x20003530
 80093d8:	2000352c 	.word	0x2000352c
 80093dc:	20003534 	.word	0x20003534

080093e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093e8:	4b27      	ldr	r3, [pc, #156]	; (8009488 <prvInsertBlockIntoFreeList+0xa8>)
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	e002      	b.n	80093f4 <prvInsertBlockIntoFreeList+0x14>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d8f7      	bhi.n	80093ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	4413      	add	r3, r2
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	429a      	cmp	r2, r3
 800940e:	d108      	bne.n	8009422 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	441a      	add	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	441a      	add	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	429a      	cmp	r2, r3
 8009434:	d118      	bne.n	8009468 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	4b14      	ldr	r3, [pc, #80]	; (800948c <prvInsertBlockIntoFreeList+0xac>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	429a      	cmp	r2, r3
 8009440:	d00d      	beq.n	800945e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	441a      	add	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	e008      	b.n	8009470 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800945e:	4b0b      	ldr	r3, [pc, #44]	; (800948c <prvInsertBlockIntoFreeList+0xac>)
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	e003      	b.n	8009470 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	429a      	cmp	r2, r3
 8009476:	d002      	beq.n	800947e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800947e:	bf00      	nop
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	bc80      	pop	{r7}
 8009486:	4770      	bx	lr
 8009488:	20003520 	.word	0x20003520
 800948c:	20003528 	.word	0x20003528

08009490 <__libc_init_array>:
 8009490:	b570      	push	{r4, r5, r6, lr}
 8009492:	2600      	movs	r6, #0
 8009494:	4d0c      	ldr	r5, [pc, #48]	; (80094c8 <__libc_init_array+0x38>)
 8009496:	4c0d      	ldr	r4, [pc, #52]	; (80094cc <__libc_init_array+0x3c>)
 8009498:	1b64      	subs	r4, r4, r5
 800949a:	10a4      	asrs	r4, r4, #2
 800949c:	42a6      	cmp	r6, r4
 800949e:	d109      	bne.n	80094b4 <__libc_init_array+0x24>
 80094a0:	f000 f830 	bl	8009504 <_init>
 80094a4:	2600      	movs	r6, #0
 80094a6:	4d0a      	ldr	r5, [pc, #40]	; (80094d0 <__libc_init_array+0x40>)
 80094a8:	4c0a      	ldr	r4, [pc, #40]	; (80094d4 <__libc_init_array+0x44>)
 80094aa:	1b64      	subs	r4, r4, r5
 80094ac:	10a4      	asrs	r4, r4, #2
 80094ae:	42a6      	cmp	r6, r4
 80094b0:	d105      	bne.n	80094be <__libc_init_array+0x2e>
 80094b2:	bd70      	pop	{r4, r5, r6, pc}
 80094b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b8:	4798      	blx	r3
 80094ba:	3601      	adds	r6, #1
 80094bc:	e7ee      	b.n	800949c <__libc_init_array+0xc>
 80094be:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c2:	4798      	blx	r3
 80094c4:	3601      	adds	r6, #1
 80094c6:	e7f2      	b.n	80094ae <__libc_init_array+0x1e>
 80094c8:	08009604 	.word	0x08009604
 80094cc:	08009604 	.word	0x08009604
 80094d0:	08009604 	.word	0x08009604
 80094d4:	08009608 	.word	0x08009608

080094d8 <memcpy>:
 80094d8:	440a      	add	r2, r1
 80094da:	4291      	cmp	r1, r2
 80094dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80094e0:	d100      	bne.n	80094e4 <memcpy+0xc>
 80094e2:	4770      	bx	lr
 80094e4:	b510      	push	{r4, lr}
 80094e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ea:	4291      	cmp	r1, r2
 80094ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094f0:	d1f9      	bne.n	80094e6 <memcpy+0xe>
 80094f2:	bd10      	pop	{r4, pc}

080094f4 <memset>:
 80094f4:	4603      	mov	r3, r0
 80094f6:	4402      	add	r2, r0
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d100      	bne.n	80094fe <memset+0xa>
 80094fc:	4770      	bx	lr
 80094fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009502:	e7f9      	b.n	80094f8 <memset+0x4>

08009504 <_init>:
 8009504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009506:	bf00      	nop
 8009508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950a:	bc08      	pop	{r3}
 800950c:	469e      	mov	lr, r3
 800950e:	4770      	bx	lr

08009510 <_fini>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	bf00      	nop
 8009514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009516:	bc08      	pop	{r3}
 8009518:	469e      	mov	lr, r3
 800951a:	4770      	bx	lr
