
WELDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000975c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a34  08009a34  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009a34  08009a34  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a34  08009a34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a34  08009a34  00019a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a38  08009a38  00019a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ec8  20000010  08009a4c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20003ed8  08009a4c  00023ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be8d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d5d  00000000  00000000  0003bec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  000411f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8e6  00000000  00000000  00042620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c51  00000000  00000000  0005df06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a27ad  00000000  00000000  00076b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119304  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae0  00000000  00000000  00119358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08009934 	.word	0x08009934

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08009934 	.word	0x08009934

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <MicrostepDriver_Ini>:
#include  "MicrostepDriver.h"


void MicrostepDriver_Ini(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
    htim3.Init.Prescaler = 7199; // Предделитель таймера 3
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a12:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000a16:	605a      	str	r2, [r3, #4]
    htim3.Init.Period = 10000; // Период ШИМа
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a1e:	60da      	str	r2, [r3, #12]
    TIM3->CCR1 = 5000; // Длительность импульса
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <MicrostepDriver_Ini+0x2c>)
 8000a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a26:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_Base_Init(&htim3);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a2a:	f005 fb99 	bl	8006160 <HAL_TIM_Base_Init>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20003dd4 	.word	0x20003dd4
 8000a38:	40000400 	.word	0x40000400

08000a3c <MicrostepDriver_Run>:


void MicrostepDriver_Run (uint16_t freq, uint8_t dir, GPIO_TypeDef *EN1_Port, uint16_t EN1_Pin, GPIO_TypeDef *DIR1_Port, uint16_t DIR1_Pin, uint32_t PWM_Channel)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60ba      	str	r2, [r7, #8]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4603      	mov	r3, r0
 8000a48:	81fb      	strh	r3, [r7, #14]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	737b      	strb	r3, [r7, #13]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	80fb      	strh	r3, [r7, #6]
	if (freq != 0)
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d024      	beq.n	8000aa2 <MicrostepDriver_Run+0x66>
	{

	htim3.Init.Period = (htim3.Init.Prescaler /  freq) / MICRO_STEP_DEV; // Расчет периода следования импульсов
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a66:	60d3      	str	r3, [r2, #12]
	TIM3->CCR1 = htim3.Init.Period / 2; // Расчет коэффицента заполнения
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MicrostepDriver_Run+0x7c>)
 8000a6e:	085b      	lsrs	r3, r3, #1
 8000a70:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_TIM_Base_Init(&htim3);
 8000a72:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a74:	f005 fb74 	bl	8006160 <HAL_TIM_Base_Init>

	if (dir == 0) // Направление вращения
 8000a78:	7b7b      	ldrb	r3, [r7, #13]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d106      	bne.n	8000a8c <MicrostepDriver_Run+0x50>
	{
		HAL_GPIO_WritePin(DIR1_Port, DIR1_Pin, GPIO_PIN_RESET);
 8000a7e:	8bbb      	ldrh	r3, [r7, #28]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	69b8      	ldr	r0, [r7, #24]
 8000a86:	f004 f8e2 	bl	8004c4e <HAL_GPIO_WritePin>
 8000a8a:	e005      	b.n	8000a98 <MicrostepDriver_Run+0x5c>

	}
	else
	{
		HAL_GPIO_WritePin(DIR1_Port, DIR1_Pin, GPIO_PIN_SET);
 8000a8c:	8bbb      	ldrh	r3, [r7, #28]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4619      	mov	r1, r3
 8000a92:	69b8      	ldr	r0, [r7, #24]
 8000a94:	f004 f8db 	bl	8004c4e <HAL_GPIO_WritePin>
	}


	HAL_TIM_PWM_Start(&htim3, PWM_Channel); // Начало генерации ШИМ сигнала
 8000a98:	6a39      	ldr	r1, [r7, #32]
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a9c:	f005 fc08 	bl	80062b0 <HAL_TIM_PWM_Start>
	else // Если частота задана как 0, то останов ШД
	{
		HAL_TIM_PWM_Stop(&htim3, PWM_Channel);
	}

}
 8000aa0:	e003      	b.n	8000aaa <MicrostepDriver_Run+0x6e>
		HAL_TIM_PWM_Stop(&htim3, PWM_Channel);
 8000aa2:	6a39      	ldr	r1, [r7, #32]
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000aa6:	f005 fcbd 	bl	8006424 <HAL_TIM_PWM_Stop>
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20003dd4 	.word	0x20003dd4
 8000ab8:	40000400 	.word	0x40000400

08000abc <IndicatorPanel_Ini>:
#include "PCB_WELDER.h"

void IndicatorPanel_Ini (void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	STLED316S_Ini(oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); // Индикатор "ВЛЕВО"
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <IndicatorPanel_Ini+0x28>)
 8000ac4:	f000 fc8a 	bl	80013dc <STLED316S_Ini>
	STLED316S_Ini(oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin); // Индикатор "ВПРАВО"
 8000ac8:	2120      	movs	r1, #32
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <IndicatorPanel_Ini+0x28>)
 8000acc:	f000 fc86 	bl	80013dc <STLED316S_Ini>
	STLED316S_Ini(oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin); // Индикаторы "СКОРОСТЬ" (ст. 3 разряда) и "ПРОГРАММА" (мл. 3 разряда)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <IndicatorPanel_Ini+0x2c>)
 8000ad4:	f000 fc82 	bl	80013dc <STLED316S_Ini>
  //STLED316S_Ini(oSTLED316S_STB4_GPIO_Port, oSTLED316S_STB4_Pin); // Микросхема не установлена, резерв
	STLED316S_Ini(oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin); // Индикаторы "ЗАДЕРЖКА" (слева, ст. 2 разряда) "ЗАДЕРЖКА" (справа, 2 и 3  разряды драйвера)
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <IndicatorPanel_Ini+0x30>)
 8000adc:	f000 fc7e 	bl	80013dc <STLED316S_Ini>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	40010800 	.word	0x40010800

08000af0 <IndicatorPanel_SetValue>:

void IndicatorPanel_SetValue (IndicatorValues *IndicatorPanel0)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]
	uint8_t num;

	uint8_t LEDsOut;

	LEDsOut = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	737b      	strb	r3, [r7, #13]

	for(uint8_t i = 0; i < 6; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e006      	b.n	8000b10 <IndicatorPanel_SetValue+0x20>
	{
	    STLED_digVal[i] = 0;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	4a5b      	ldr	r2, [pc, #364]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 6; i++)
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b05      	cmp	r3, #5
 8000b14:	d9f5      	bls.n	8000b02 <IndicatorPanel_SetValue+0x12>
	}

	//uint8_t gg = 11;

	// Индикатор "ВЛЕВО"
	num = separate(IndicatorPanel0->Xs,  &STLED_digVal[0]);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	4956      	ldr	r1, [pc, #344]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f8e9 	bl	8000cf4 <separate>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_4dig(num, STLED_digVal);
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	4952      	ldr	r1, [pc, #328]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f926 	bl	8000d7c <IndicatorPanel_offset_4dig>
	STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin);
 8000b30:	2310      	movs	r3, #16
 8000b32:	4a51      	ldr	r2, [pc, #324]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000b34:	2104      	movs	r1, #4
 8000b36:	484f      	ldr	r0, [pc, #316]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b38:	f000 fc84 	bl	8001444 <STLED316S_OutData>

	// Индикатор "ВПРАВО"
	num = separate(IndicatorPanel0->Xf,  &STLED_digVal[0]);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	885b      	ldrh	r3, [r3, #2]
 8000b40:	494c      	ldr	r1, [pc, #304]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f8d6 	bl	8000cf4 <separate>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_4dig(num, STLED_digVal);
 8000b4c:	7bbb      	ldrb	r3, [r7, #14]
 8000b4e:	4949      	ldr	r1, [pc, #292]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f913 	bl	8000d7c <IndicatorPanel_offset_4dig>
	STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin);
 8000b56:	2320      	movs	r3, #32
 8000b58:	4a47      	ldr	r2, [pc, #284]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	4845      	ldr	r0, [pc, #276]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b5e:	f000 fc71 	bl	8001444 <STLED316S_OutData>

	// Вывод пред и пост задержки
	num = separate(IndicatorPanel0->Delay_s, &STLED_digVal[0]);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	791b      	ldrb	r3, [r3, #4]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4942      	ldr	r1, [pc, #264]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f8c2 	bl	8000cf4 <separate>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73bb      	strb	r3, [r7, #14]
	//IndicatorPanel_offset_2dig(num, &STLED_digVal[0]);
	num = separate(IndicatorPanel0->Delay_f, &STLED_digVal[2]);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4940      	ldr	r1, [pc, #256]	; (8000c7c <IndicatorPanel_SetValue+0x18c>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f8b9 	bl	8000cf4 <separate>
 8000b82:	4603      	mov	r3, r0
 8000b84:	73bb      	strb	r3, [r7, #14]
	//IndicatorPanel_offset_2dig(num, &STLED_digVal[2]);
	//STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);

	STLED316S_Single_Out(&STLED_digVal[0], 6, 1, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2106      	movs	r1, #6
 8000b90:	4838      	ldr	r0, [pc, #224]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b92:	f000 fcb5 	bl	8001500 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[1], 5, 0, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000b96:	2340      	movs	r3, #64	; 0x40
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2105      	movs	r1, #5
 8000ba0:	4838      	ldr	r0, [pc, #224]	; (8000c84 <IndicatorPanel_SetValue+0x194>)
 8000ba2:	f000 fcad 	bl	8001500 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[2], 4, 1, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000ba6:	2340      	movs	r3, #64	; 0x40
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4832      	ldr	r0, [pc, #200]	; (8000c7c <IndicatorPanel_SetValue+0x18c>)
 8000bb2:	f000 fca5 	bl	8001500 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[3], 3, 0, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2103      	movs	r1, #3
 8000bc0:	4831      	ldr	r0, [pc, #196]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000bc2:	f000 fc9d 	bl	8001500 <STLED316S_Single_Out>


	// Индикаторы "СКОРОСТЬ" (ст. 3 разряда) и "ПРОГРАММА" (мл. 3 разряда)
	num = separate(IndicatorPanel0->Speed, &STLED_digVal[0]);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	88db      	ldrh	r3, [r3, #6]
 8000bca:	492a      	ldr	r1, [pc, #168]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f891 	bl	8000cf4 <separate>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_3dig(num, &STLED_digVal[0]);
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	4926      	ldr	r1, [pc, #152]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f920 	bl	8000e20 <IndicatorPanel_offset_3dig>

	num = separate(IndicatorPanel0->Program, &STLED_digVal[3]);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	891b      	ldrh	r3, [r3, #8]
 8000be4:	4928      	ldr	r1, [pc, #160]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f884 	bl	8000cf4 <separate>
 8000bec:	4603      	mov	r3, r0
 8000bee:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_3dig(num, &STLED_digVal[3]);
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	4925      	ldr	r1, [pc, #148]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f913 	bl	8000e20 <IndicatorPanel_offset_3dig>
	STLED316S_OutData(STLED_digVal, 6, oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <IndicatorPanel_SetValue+0x19c>)
 8000bfe:	2106      	movs	r1, #6
 8000c00:	481c      	ldr	r0, [pc, #112]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000c02:	f000 fc1f 	bl	8001444 <STLED316S_OutData>


	if((IndicatorPanel0->LEDsState & LED_AUTO) == LED_AUTO)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7bdb      	ldrb	r3, [r3, #15]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <IndicatorPanel_SetValue+0x12c>
	{
		LEDsOut |= 0x10;
 8000c12:	7b7b      	ldrb	r3, [r7, #13]
 8000c14:	f043 0310 	orr.w	r3, r3, #16
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_PARKING) == LED_PARKING)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7bdb      	ldrb	r3, [r3, #15]
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <IndicatorPanel_SetValue+0x142>
	{
		LEDsOut |= 0x20;
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	f043 0320 	orr.w	r3, r3, #32
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_DOWN) == LED_DOWN)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7bdb      	ldrb	r3, [r3, #15]
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d004      	beq.n	8000c48 <IndicatorPanel_SetValue+0x158>
	{
		LEDsOut |= 0x40;
 8000c3e:	7b7b      	ldrb	r3, [r7, #13]
 8000c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_UP) == LED_UP)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7bdb      	ldrb	r3, [r3, #15]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d004      	beq.n	8000c5e <IndicatorPanel_SetValue+0x16e>
	{
		LEDsOut |= 0x80;
 8000c54:	7b7b      	ldrb	r3, [r7, #13]
 8000c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	737b      	strb	r3, [r7, #13]
	}

	// Вывод состояния светодиодов
	STLED316S_Direct_Single_Out(&LEDsOut, 2, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора
 8000c5e:	f107 000d 	add.w	r0, r7, #13
 8000c62:	2310      	movs	r3, #16
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000c66:	2102      	movs	r1, #2
 8000c68:	f000 fcac 	bl	80015c4 <STLED316S_Direct_Single_Out>
}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20003dc8 	.word	0x20003dc8
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	20003dca 	.word	0x20003dca
 8000c80:	40010800 	.word	0x40010800
 8000c84:	20003dc9 	.word	0x20003dc9
 8000c88:	20003dcb 	.word	0x20003dcb
 8000c8c:	40010c00 	.word	0x40010c00

08000c90 <IndicatorPanel_SetBrightness>:
	STLED316S_Direct_Single_Out(&LEDsOut, 2, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора

}

void IndicatorPanel_SetBrightness (IndicatorValues *IndicatorPanel0)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if (IndicatorPanel0->Brightness > 7)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7a9b      	ldrb	r3, [r3, #10]
 8000c9c:	2b07      	cmp	r3, #7
 8000c9e:	d902      	bls.n	8000ca6 <IndicatorPanel_SetBrightness+0x16>
	{
		IndicatorPanel0->Brightness = 7;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	729a      	strb	r2, [r3, #10]
	}
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7a9b      	ldrb	r3, [r3, #10]
 8000caa:	2210      	movs	r2, #16
 8000cac:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <IndicatorPanel_SetBrightness+0x58>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fcd8 	bl	8001664 <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7a9b      	ldrb	r3, [r3, #10]
 8000cb8:	2220      	movs	r2, #32
 8000cba:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <IndicatorPanel_SetBrightness+0x58>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fcd1 	bl	8001664 <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7a9b      	ldrb	r3, [r3, #10]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4908      	ldr	r1, [pc, #32]	; (8000cec <IndicatorPanel_SetBrightness+0x5c>)
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fcca 	bl	8001664 <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7a9b      	ldrb	r3, [r3, #10]
 8000cd4:	2240      	movs	r2, #64	; 0x40
 8000cd6:	4906      	ldr	r1, [pc, #24]	; (8000cf0 <IndicatorPanel_SetBrightness+0x60>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fcc3 	bl	8001664 <STLED316S_SetBrightness>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <separate>:

int32_t separate (uint16_t in_data, uint8_t *out_data)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	80fb      	strh	r3, [r7, #6]
    int32_t k,i,m;
    k = in_data;
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	617b      	str	r3, [r7, #20]
    m = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]

    while(k != 0)       //цикл чтобы найти количество цифр в числе
 8000d08:	e00a      	b.n	8000d20 <separate+0x2c>
    {
        k = k / 10;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <separate+0x80>)
 8000d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d12:	1092      	asrs	r2, r2, #2
 8000d14:	17db      	asrs	r3, r3, #31
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
        m++;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
    while(k != 0)       //цикл чтобы найти количество цифр в числе
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f1      	bne.n	8000d0a <separate+0x16>
    }

    for(i=m-1;i>=0;i--)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	e018      	b.n	8000d60 <separate+0x6c>
    {
    	out_data[i] = in_data%10;      //берем последнюю цифру с числа
 8000d2e:	88fa      	ldrh	r2, [r7, #6]
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <separate+0x84>)
 8000d32:	fba3 1302 	umull	r1, r3, r3, r2
 8000d36:	08d9      	lsrs	r1, r3, #3
 8000d38:	460b      	mov	r3, r1
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	b299      	uxth	r1, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
    	in_data = in_data / 10;         //забираем эту цифру с числа
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <separate+0x84>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	80fb      	strh	r3, [r7, #6]
    for(i=m-1;i>=0;i--)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	dae3      	bge.n	8000d2e <separate+0x3a>
    }

    return m;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	66666667 	.word	0x66666667
 8000d78:	cccccccd 	.word	0xcccccccd

08000d7c <IndicatorPanel_offset_4dig>:

void IndicatorPanel_offset_4dig (uint8_t num, uint8_t *dataArray)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d841      	bhi.n	8000e14 <IndicatorPanel_offset_4dig+0x98>
 8000d90:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <IndicatorPanel_offset_4dig+0x1c>)
 8000d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d96:	bf00      	nop
 8000d98:	08000da9 	.word	0x08000da9
 8000d9c:	08000dcb 	.word	0x08000dcb
 8000da0:	08000def 	.word	0x08000def
 8000da4:	08000e15 	.word	0x08000e15
	{

	case 1:
	{
		dataArray[3] = dataArray[0];
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	3303      	adds	r3, #3
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	701a      	strb	r2, [r3, #0]
		dataArray[2] = 0;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	3302      	adds	r3, #2
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
		break;
 8000dc8:	e025      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
	}

	case 2:
	{
		dataArray[3] = dataArray[1];
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3303      	adds	r3, #3
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	7852      	ldrb	r2, [r2, #1]
 8000dd2:	701a      	strb	r2, [r3, #0]
		dataArray[2] = dataArray[0];
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	7812      	ldrb	r2, [r2, #0]
 8000ddc:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
		break;
 8000dec:	e013      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
	}

	case 3:
	{
		dataArray[3] = dataArray[2];
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	3303      	adds	r3, #3
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	7892      	ldrb	r2, [r2, #2]
 8000df6:	701a      	strb	r2, [r3, #0]
		dataArray[2] = dataArray[1];
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	7852      	ldrb	r2, [r2, #1]
 8000e00:	701a      	strb	r2, [r3, #0]
		dataArray[1] = dataArray[0];
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]

		break;
 8000e12:	e000      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
		break;
	}

default:
{
	break;
 8000e14:	bf00      	nop
}

	}

}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <IndicatorPanel_offset_3dig>:

}


void IndicatorPanel_offset_3dig (uint8_t num, uint8_t *dataArray)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d021      	beq.n	8000e76 <IndicatorPanel_offset_3dig+0x56>
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	dc21      	bgt.n	8000e7a <IndicatorPanel_offset_3dig+0x5a>
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d002      	beq.n	8000e40 <IndicatorPanel_offset_3dig+0x20>
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d00d      	beq.n	8000e5a <IndicatorPanel_offset_3dig+0x3a>
		break;
	}

default:
{
	break;
 8000e3e:	e01c      	b.n	8000e7a <IndicatorPanel_offset_3dig+0x5a>
		dataArray[2] = dataArray[0];
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3302      	adds	r3, #2
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
		break;
 8000e58:	e010      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
		dataArray[2] = dataArray[1];
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	7852      	ldrb	r2, [r2, #1]
 8000e62:	701a      	strb	r2, [r3, #0]
		dataArray[1] = dataArray[0];
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	7812      	ldrb	r2, [r2, #0]
 8000e6c:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
		break;
 8000e74:	e002      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
		break;
 8000e76:	bf00      	nop
 8000e78:	e000      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
	break;
 8000e7a:	bf00      	nop
}

	}

}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
	...

08000e88 <Carriage_Move>:

void Carriage_Move (uint16_t Speed, uint8_t Dir, uint8_t NumSM)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
 8000e92:	460b      	mov	r3, r1
 8000e94:	717b      	strb	r3, [r7, #5]
 8000e96:	4613      	mov	r3, r2
 8000e98:	713b      	strb	r3, [r7, #4]

uint16_t freq_pwm;

	freq_pwm = ((Speed / (60/10)) * STEPS_PER_ROTATE) / DISTANCE_PER_ROTATE; // Вычисление частоты ШИМ для скорости в см/мин
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <Carriage_Move+0x7c>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fb14 	bl	80004d4 <__aeabi_i2d>
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <Carriage_Move+0x80>)
 8000eb2:	f7ff fb79 	bl	80005a8 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <Carriage_Move+0x84>)
 8000ec4:	f7ff fc9a 	bl	80007fc <__aeabi_ddiv>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fd7c 	bl	80009cc <__aeabi_d2uiz>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	81fb      	strh	r3, [r7, #14]

	if (NumSM == 1)
 8000ed8:	793b      	ldrb	r3, [r7, #4]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10d      	bne.n	8000efa <Carriage_Move+0x72>
	{
		MicrostepDriver_Run (freq_pwm, Dir, oSMD_EN1_GPIO_Port, oSMD_EN1_Pin, oDIR1_GPIO_Port,  oDIR1_Pin, TIM_CHANNEL_1);
 8000ede:	7979      	ldrb	r1, [r7, #5]
 8000ee0:	89f8      	ldrh	r0, [r7, #14]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <Carriage_Move+0x88>)
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <Carriage_Move+0x8c>)
 8000ef6:	f7ff fda1 	bl	8000a3c <MicrostepDriver_Run>
	}
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	aaaaaaab 	.word	0xaaaaaaab
 8000f08:	40690000 	.word	0x40690000
 8000f0c:	404e0000 	.word	0x404e0000
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40010800 	.word	0x40010800

08000f18 <PCB_KeyScan>:

void PCB_KeyScan (void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	STLED316S_ReciveData(&WelderUnit.IndicatorPanel.KeyState[0], oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	4905      	ldr	r1, [pc, #20]	; (8000f34 <PCB_KeyScan+0x1c>)
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <PCB_KeyScan+0x20>)
 8000f22:	f000 fbf9 	bl	8001718 <STLED316S_ReciveData>
	STLED316S_ReciveData(&WelderUnit.IndicatorPanel.KeyState[2], oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000f26:	2201      	movs	r2, #1
 8000f28:	4904      	ldr	r1, [pc, #16]	; (8000f3c <PCB_KeyScan+0x24>)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <PCB_KeyScan+0x28>)
 8000f2c:	f000 fbf4 	bl	8001718 <STLED316S_ReciveData>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40010800 	.word	0x40010800
 8000f38:	20003559 	.word	0x20003559
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	2000355b 	.word	0x2000355b

08000f44 <PCB_InputsScan>:

void PCB_InputsScan (void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(iPedal_L_GPIO_Port, iPedal_L_Pin)) // Если Нажата педаль для зажима левой части заготовки, то установить бит, иначе сбросить
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4824      	ldr	r0, [pc, #144]	; (8000fdc <PCB_InputsScan+0x98>)
 8000f4c:	f003 fe68 	bl	8004c20 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <PCB_InputsScan+0x22>
	{
		WelderUnit.HolderState |= WELDER_STATE_PEDAL_L;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f58:	7c5b      	ldrb	r3, [r3, #17]
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f62:	745a      	strb	r2, [r3, #17]
 8000f64:	e006      	b.n	8000f74 <PCB_InputsScan+0x30>
	}
	else
	{
		WelderUnit.HolderState &= ~WELDER_STATE_PEDAL_L;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f68:	7c5b      	ldrb	r3, [r3, #17]
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f72:	745a      	strb	r2, [r3, #17]
	}

	if (HAL_GPIO_ReadPin(iPedal_R_GPIO_Port, iPedal_R_Pin)) // Если Нажата педаль для зажима правой части заготовки, то установить бит, иначе сбросить
 8000f74:	2108      	movs	r1, #8
 8000f76:	4819      	ldr	r0, [pc, #100]	; (8000fdc <PCB_InputsScan+0x98>)
 8000f78:	f003 fe52 	bl	8004c20 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <PCB_InputsScan+0x4e>
	{
		WelderUnit.HolderState |= WELDER_STATE_PEDAL_R;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f8e:	745a      	strb	r2, [r3, #17]
 8000f90:	e006      	b.n	8000fa0 <PCB_InputsScan+0x5c>
	}
	else
	{
		WelderUnit.HolderState &= ~WELDER_STATE_PEDAL_R;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f94:	7c5b      	ldrb	r3, [r3, #17]
 8000f96:	f023 0302 	bic.w	r3, r3, #2
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f9e:	745a      	strb	r2, [r3, #17]
	}

	if (HAL_GPIO_ReadPin(iBackDoor_GPIO_Port, iBackDoor_Pin)) // Если задняя дверца закрыта, то установить бит, иначе сбросить
 8000fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa4:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <PCB_InputsScan+0xa0>)
 8000fa6:	f003 fe3b 	bl	8004c20 <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d007      	beq.n	8000fc0 <PCB_InputsScan+0x7c>
	{
		WelderUnit.State |= WELDER_STATE_BACK_DOOR_CLOSE;
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fb2:	7c1b      	ldrb	r3, [r3, #16]
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fbc:	741a      	strb	r2, [r3, #16]
	else
	{
		WelderUnit.State &= ~WELDER_STATE_BACK_DOOR_CLOSE;
		WELDER_HEAD_UP
	}
}
 8000fbe:	e00b      	b.n	8000fd8 <PCB_InputsScan+0x94>
		WelderUnit.State &= ~WELDER_STATE_BACK_DOOR_CLOSE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fc2:	7c1b      	ldrb	r3, [r3, #16]
 8000fc4:	f023 0310 	bic.w	r3, r3, #16
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fcc:	741a      	strb	r2, [r3, #16]
		WELDER_HEAD_UP
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2106      	movs	r1, #6
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <PCB_InputsScan+0xa4>)
 8000fd4:	f003 fe3b 	bl	8004c4e <HAL_GPIO_WritePin>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	2000353c 	.word	0x2000353c
 8000fe4:	40010c00 	.word	0x40010c00
 8000fe8:	40011000 	.word	0x40011000

08000fec <PCB_OutputControl>:

void PCB_OutputControl(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	static uint8_t StateOld = 0;

	PCB_InputsScan(); // Опрос входов платы
 8000ff0:	f7ff ffa8 	bl	8000f44 <PCB_InputsScan>


	if ((WelderUnit.HolderState & WELDER_STATE_PEDAL_L) != (StateOld & WELDER_STATE_PEDAL_L)) // Если произошли изменения на входе отвечающим за девую педаль
 8000ff4:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <PCB_OutputControl+0xcc>)
 8000ff6:	7c5a      	ldrb	r2, [r3, #17]
 8000ff8:	4b30      	ldr	r3, [pc, #192]	; (80010bc <PCB_OutputControl+0xd0>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4053      	eors	r3, r2
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00c      	beq.n	8001022 <PCB_OutputControl+0x36>
	{
		if(WelderUnit.HolderState & WELDER_STATE_PEDAL_L) // Если педаль была нажата (фронт импульса)
 8001008:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <PCB_OutputControl+0xcc>)
 800100a:	7c5b      	ldrb	r3, [r3, #17]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <PCB_OutputControl+0x36>
		{
			WelderUnit.HolderState = WelderUnit.HolderState ^ WELDER_STATE_HOLDER_L; // Инвертировать состояние бита держателя затовки
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <PCB_OutputControl+0xcc>)
 8001016:	7c5b      	ldrb	r3, [r3, #17]
 8001018:	f083 0304 	eor.w	r3, r3, #4
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <PCB_OutputControl+0xcc>)
 8001020:	745a      	strb	r2, [r3, #17]
		}

	}

	if ((WelderUnit.HolderState & WELDER_STATE_PEDAL_R) != (StateOld & WELDER_STATE_PEDAL_R)) // Если произошли изменения на входе отвечающим за девую педаль
 8001022:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <PCB_OutputControl+0xcc>)
 8001024:	7c5a      	ldrb	r2, [r3, #17]
 8001026:	4b25      	ldr	r3, [pc, #148]	; (80010bc <PCB_OutputControl+0xd0>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4053      	eors	r3, r2
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00c      	beq.n	8001050 <PCB_OutputControl+0x64>
	{
		if(WelderUnit.HolderState & WELDER_STATE_PEDAL_R) // Если педаль была нажата (фронт импульса)
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <PCB_OutputControl+0xcc>)
 8001038:	7c5b      	ldrb	r3, [r3, #17]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <PCB_OutputControl+0x64>
		{
			WelderUnit.HolderState = WelderUnit.HolderState ^ WELDER_STATE_HOLDER_R; // Инвертировать состояние бита держателя затовки
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <PCB_OutputControl+0xcc>)
 8001044:	7c5b      	ldrb	r3, [r3, #17]
 8001046:	f083 0308 	eor.w	r3, r3, #8
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <PCB_OutputControl+0xcc>)
 800104e:	745a      	strb	r2, [r3, #17]
		}

	}

	if((WelderUnit.HolderState & WELDER_STATE_HOLDER_L) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE)) // Если бит установлен, то зажать зажать заготвку, иначе отпустить
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <PCB_OutputControl+0xcc>)
 8001052:	7c5b      	ldrb	r3, [r3, #17]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00b      	beq.n	8001074 <PCB_OutputControl+0x88>
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <PCB_OutputControl+0xcc>)
 800105e:	7c1b      	ldrb	r3, [r3, #16]
 8001060:	f003 0310 	and.w	r3, r3, #16
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <PCB_OutputControl+0x88>
	{
		Valve_L_CLOSE
 8001068:	2201      	movs	r2, #1
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	4814      	ldr	r0, [pc, #80]	; (80010c0 <PCB_OutputControl+0xd4>)
 800106e:	f003 fdee 	bl	8004c4e <HAL_GPIO_WritePin>
 8001072:	e004      	b.n	800107e <PCB_OutputControl+0x92>
	}
	else
	{
		Valve_L_OPEN
 8001074:	2200      	movs	r2, #0
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	4811      	ldr	r0, [pc, #68]	; (80010c0 <PCB_OutputControl+0xd4>)
 800107a:	f003 fde8 	bl	8004c4e <HAL_GPIO_WritePin>
	}

	if((WelderUnit.HolderState & WELDER_STATE_HOLDER_R) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE)) // Если бит установлен, то зажать зажать заготвку, иначе отпустить
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <PCB_OutputControl+0xcc>)
 8001080:	7c5b      	ldrb	r3, [r3, #17]
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00b      	beq.n	80010a2 <PCB_OutputControl+0xb6>
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <PCB_OutputControl+0xcc>)
 800108c:	7c1b      	ldrb	r3, [r3, #16]
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <PCB_OutputControl+0xb6>
	{
		Valve_R_CLOSE
 8001096:	2201      	movs	r2, #1
 8001098:	2140      	movs	r1, #64	; 0x40
 800109a:	4809      	ldr	r0, [pc, #36]	; (80010c0 <PCB_OutputControl+0xd4>)
 800109c:	f003 fdd7 	bl	8004c4e <HAL_GPIO_WritePin>
 80010a0:	e004      	b.n	80010ac <PCB_OutputControl+0xc0>
	}
	else
	{
		Valve_R_OPEN
 80010a2:	2200      	movs	r2, #0
 80010a4:	2140      	movs	r1, #64	; 0x40
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <PCB_OutputControl+0xd4>)
 80010a8:	f003 fdd1 	bl	8004c4e <HAL_GPIO_WritePin>
	}

	StateOld = WelderUnit.HolderState; // Сохранить текущее состояние
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <PCB_OutputControl+0xcc>)
 80010ae:	7c5a      	ldrb	r2, [r3, #17]
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <PCB_OutputControl+0xd0>)
 80010b2:	701a      	strb	r2, [r3, #0]

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000353c 	.word	0x2000353c
 80010bc:	2000002c 	.word	0x2000002c
 80010c0:	40010c00 	.word	0x40010c00

080010c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(iSTLED316S_IRQN5_GPIO_Port, iSTLED316S_IRQN5_Pin) == GPIO_PIN_RESET)
 80010ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d2:	482a      	ldr	r0, [pc, #168]	; (800117c <HAL_GPIO_EXTI_Callback+0xb8>)
 80010d4:	f003 fda4 	bl	8004c20 <HAL_GPIO_ReadPin>

	}



	if (HAL_GPIO_ReadPin(iFB_STEP1_GPIO_Port, iFB_STEP1_Pin) == GPIO_PIN_SET)
 80010d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010dc:	4828      	ldr	r0, [pc, #160]	; (8001180 <HAL_GPIO_EXTI_Callback+0xbc>)
 80010de:	f003 fd9f 	bl	8004c20 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d10e      	bne.n	8001106 <HAL_GPIO_EXTI_Callback+0x42>
		//#define configASSERT( x ) if ((x) == 0) {taskDISABLE_INTERRUPTS(); for( ;; );}
		// Без этого не работают семафоры


		static portBASE_TYPE xHigherPriorityTaskWoken;
		  xHigherPriorityTaskWoken = pdFALSE; // Не переключать контекст
 80010e8:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_GPIO_EXTI_Callback+0xc0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]

		  //WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / STEPS_PER_ROTATE; // Вычисление текущей позиции каретки, мм

			  xSemaphoreGiveFromISR(xSemaphore_StepCount,&xHigherPriorityTaskWoken);
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <HAL_GPIO_EXTI_Callback+0xc4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4924      	ldr	r1, [pc, #144]	; (8001184 <HAL_GPIO_EXTI_Callback+0xc0>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f006 fbbf 	bl	8007878 <xQueueGiveFromISR>


		if( xHigherPriorityTaskWoken == pdTRUE )
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_GPIO_EXTI_Callback+0xc0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_EXTI_Callback+0x42>
				вместе с портом FreeRTOS. */
			 //portSWITCH_CONTEXT();
			//vTaskSwitchContext();
			//portYIELD_FROM_ISR(NULL);

			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 8001102:	f007 fc03 	bl	800890c <vTaskMissedYield>

		  }
	}

	if (HAL_GPIO_ReadPin(iCarriageStop_GPIO_Port, iCarriageStop_Pin) == GPIO_PIN_SET)
 8001106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110a:	481c      	ldr	r0, [pc, #112]	; (800117c <HAL_GPIO_EXTI_Callback+0xb8>)
 800110c:	f003 fd88 	bl	8004c20 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	d126      	bne.n	8001164 <HAL_GPIO_EXTI_Callback+0xa0>
		// В файле FreeRTOSConfig.h закомментировать
		//#define configASSERT( x ) if ((x) == 0) {taskDISABLE_INTERRUPTS(); for( ;; );}
		// Без этого не работают семафоры

		static portBASE_TYPE xHigherPriorityTaskWoken2;
		  xHigherPriorityTaskWoken2 = pdFALSE; // Не переключать контекст
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]

		  //WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / STEPS_PER_ROTATE; // Вычисление текущей позиции каретки, мм

			  xSemaphoreGiveFromISR(xSemaphore_Calibration, &xHigherPriorityTaskWoken2);
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_GPIO_EXTI_Callback+0xcc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	491a      	ldr	r1, [pc, #104]	; (800118c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001122:	4618      	mov	r0, r3
 8001124:	f006 fba8 	bl	8007878 <xQueueGiveFromISR>

			  if (HAL_GPIO_ReadPin(iCarriageStop_GPIO_Port, iCarriageStop_Pin))
 8001128:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112c:	4813      	ldr	r0, [pc, #76]	; (800117c <HAL_GPIO_EXTI_Callback+0xb8>)
 800112e:	f003 fd77 	bl	8004c20 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d007      	beq.n	8001148 <HAL_GPIO_EXTI_Callback+0x84>
			  {
				  WelderUnit.State |= 1<<3; // 3 бит - Состояние вывода iCarriageStop, 1 - коневик нажат кареткой
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <HAL_GPIO_EXTI_Callback+0xd0>)
 800113a:	7c1b      	ldrb	r3, [r3, #16]
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001144:	741a      	strb	r2, [r3, #16]
 8001146:	e006      	b.n	8001156 <HAL_GPIO_EXTI_Callback+0x92>
			  }
			  else
			  {
				  WelderUnit.State &= ~0x08; // 3 бит - Состояние вывода iCarriageStop, 0 - коневик отжат
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_GPIO_EXTI_Callback+0xd0>)
 800114a:	7c1b      	ldrb	r3, [r3, #16]
 800114c:	f023 0308 	bic.w	r3, r3, #8
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001154:	741a      	strb	r2, [r3, #16]
			  }




		if( xHigherPriorityTaskWoken2 == pdTRUE )
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d109      	bne.n	8001172 <HAL_GPIO_EXTI_Callback+0xae>
		  {
			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 800115e:	f007 fbd5 	bl	800890c <vTaskMissedYield>
	{
		WelderUnit.State &= ~0x08; //// 3 бит - Состояние вывода iCarriageStop 0 - коневик отжат.

	}

}
 8001162:	e006      	b.n	8001172 <HAL_GPIO_EXTI_Callback+0xae>
		WelderUnit.State &= ~0x08; //// 3 бит - Состояние вывода iCarriageStop 0 - коневик отжат.
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001166:	7c1b      	ldrb	r3, [r3, #16]
 8001168:	f023 0308 	bic.w	r3, r3, #8
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001170:	741a      	strb	r2, [r3, #16]
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40010c00 	.word	0x40010c00
 8001180:	40011000 	.word	0x40011000
 8001184:	20000030 	.word	0x20000030
 8001188:	20003564 	.word	0x20003564
 800118c:	20000034 	.word	0x20000034
 8001190:	20003dc4 	.word	0x20003dc4
 8001194:	2000353c 	.word	0x2000353c

08001198 <SaveProgramToFlash2>:

void SaveProgramToFlash2()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	uint32_t *p; // Указатель на считваемые из flash памяти данные

	uint16_t offset = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	80bb      	strh	r3, [r7, #4]

	p = (uint32_t*)PAGE; // p содержит начальный адрес записи параметров программы
 80011a2:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <SaveProgramToFlash2+0xfc>)
 80011a4:	603b      	str	r3, [r7, #0]

	for(uint16_t i = 0; i < 256; i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	80fb      	strh	r3, [r7, #6]
 80011aa:	e010      	b.n	80011ce <SaveProgramToFlash2+0x36>
	{
		ReadFlashPage[i] = *(p + i);
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	88f9      	ldrh	r1, [r7, #6]
 80011b8:	461a      	mov	r2, r3
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	4836      	ldr	r0, [pc, #216]	; (8001298 <SaveProgramToFlash2+0x100>)
 80011c0:	00c9      	lsls	r1, r1, #3
 80011c2:	4401      	add	r1, r0
 80011c4:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i = 0; i < 256; i++)
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	3301      	adds	r3, #1
 80011cc:	80fb      	strh	r3, [r7, #6]
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	2bff      	cmp	r3, #255	; 0xff
 80011d2:	d9eb      	bls.n	80011ac <SaveProgramToFlash2+0x14>
	}

	offset = WelderUnit.Program * 6;
 80011d4:	4b31      	ldr	r3, [pc, #196]	; (800129c <SaveProgramToFlash2+0x104>)
 80011d6:	899b      	ldrh	r3, [r3, #12]
 80011d8:	461a      	mov	r2, r3
 80011da:	0052      	lsls	r2, r2, #1
 80011dc:	4413      	add	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	80bb      	strh	r3, [r7, #4]

	ReadFlashPage[offset] = WelderUnit.Program;
 80011e2:	4b2e      	ldr	r3, [pc, #184]	; (800129c <SaveProgramToFlash2+0x104>)
 80011e4:	899b      	ldrh	r3, [r3, #12]
 80011e6:	88b9      	ldrh	r1, [r7, #4]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	482a      	ldr	r0, [pc, #168]	; (8001298 <SaveProgramToFlash2+0x100>)
 80011f0:	00c9      	lsls	r1, r1, #3
 80011f2:	4401      	add	r1, r0
 80011f4:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 1] = WelderUnit.Xs;
 80011f8:	4b28      	ldr	r3, [pc, #160]	; (800129c <SaveProgramToFlash2+0x104>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	88ba      	ldrh	r2, [r7, #4]
 80011fe:	1c51      	adds	r1, r2, #1
 8001200:	b29a      	uxth	r2, r3
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	4824      	ldr	r0, [pc, #144]	; (8001298 <SaveProgramToFlash2+0x100>)
 8001208:	00c9      	lsls	r1, r1, #3
 800120a:	4401      	add	r1, r0
 800120c:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 2] = WelderUnit.Xf;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <SaveProgramToFlash2+0x104>)
 8001212:	885b      	ldrh	r3, [r3, #2]
 8001214:	88ba      	ldrh	r2, [r7, #4]
 8001216:	1c91      	adds	r1, r2, #2
 8001218:	b29a      	uxth	r2, r3
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	481e      	ldr	r0, [pc, #120]	; (8001298 <SaveProgramToFlash2+0x100>)
 8001220:	00c9      	lsls	r1, r1, #3
 8001222:	4401      	add	r1, r0
 8001224:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 3] = WelderUnit.Speed;
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <SaveProgramToFlash2+0x104>)
 800122a:	88db      	ldrh	r3, [r3, #6]
 800122c:	88ba      	ldrh	r2, [r7, #4]
 800122e:	1cd1      	adds	r1, r2, #3
 8001230:	b29a      	uxth	r2, r3
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	4818      	ldr	r0, [pc, #96]	; (8001298 <SaveProgramToFlash2+0x100>)
 8001238:	00c9      	lsls	r1, r1, #3
 800123a:	4401      	add	r1, r0
 800123c:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 4] = WelderUnit.Delay_s;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <SaveProgramToFlash2+0x104>)
 8001242:	7a9b      	ldrb	r3, [r3, #10]
 8001244:	88ba      	ldrh	r2, [r7, #4]
 8001246:	1d11      	adds	r1, r2, #4
 8001248:	b2da      	uxtb	r2, r3
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	4812      	ldr	r0, [pc, #72]	; (8001298 <SaveProgramToFlash2+0x100>)
 8001250:	00c9      	lsls	r1, r1, #3
 8001252:	4401      	add	r1, r0
 8001254:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 5] = WelderUnit.Delay_f;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <SaveProgramToFlash2+0x104>)
 800125a:	7adb      	ldrb	r3, [r3, #11]
 800125c:	88ba      	ldrh	r2, [r7, #4]
 800125e:	1d51      	adds	r1, r2, #5
 8001260:	b2da      	uxtb	r2, r3
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <SaveProgramToFlash2+0x100>)
 8001268:	00c9      	lsls	r1, r1, #3
 800126a:	4401      	add	r1, r0
 800126c:	e9c1 2300 	strd	r2, r3, [r1]

	STM32_WriteToFlash3(ReadFlashPage, 64);
 8001270:	2140      	movs	r1, #64	; 0x40
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <SaveProgramToFlash2+0x100>)
 8001274:	f000 face 	bl	8001814 <STM32_WriteToFlash3>

	p = (uint32_t*)PAGE + offset/4; // p содержит начальный адрес записи параметров программы
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	b29b      	uxth	r3, r3
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001284:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 8001288:	603b      	str	r3, [r7, #0]

}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	0803f800 	.word	0x0803f800
 8001298:	20003570 	.word	0x20003570
 800129c:	2000353c 	.word	0x2000353c

080012a0 <ReadProgramFromFlash2>:

void ReadProgramFromFlash2()
{
 80012a0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
	uint32_t *p; // Указатель на считваемые из flash памяти данные

	uint16_t offset = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	80bb      	strh	r3, [r7, #4]

	p = (uint32_t*)PAGE; // p содержит начальный адрес записи параметров программы
 80012ac:	4b48      	ldr	r3, [pc, #288]	; (80013d0 <ReadProgramFromFlash2+0x130>)
 80012ae:	603b      	str	r3, [r7, #0]

	for(uint16_t i = 0; i < 256; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	80fb      	strh	r3, [r7, #6]
 80012b4:	e010      	b.n	80012d8 <ReadProgramFromFlash2+0x38>
	{
		ReadFlashPage[i] = *(p + i);
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	88f9      	ldrh	r1, [r7, #6]
 80012c2:	461a      	mov	r2, r3
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	4842      	ldr	r0, [pc, #264]	; (80013d4 <ReadProgramFromFlash2+0x134>)
 80012ca:	00c9      	lsls	r1, r1, #3
 80012cc:	4401      	add	r1, r0
 80012ce:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i = 0; i < 256; i++)
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	3301      	adds	r3, #1
 80012d6:	80fb      	strh	r3, [r7, #6]
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	2bff      	cmp	r3, #255	; 0xff
 80012dc:	d9eb      	bls.n	80012b6 <ReadProgramFromFlash2+0x16>
	}

	offset = WelderUnit.Program * 6;
 80012de:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <ReadProgramFromFlash2+0x138>)
 80012e0:	899b      	ldrh	r3, [r3, #12]
 80012e2:	461a      	mov	r2, r3
 80012e4:	0052      	lsls	r2, r2, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	80bb      	strh	r3, [r7, #4]

	if (WelderUnit.Program - ReadFlashPage[offset] <= 1 || ReadFlashPage[offset] - WelderUnit.Program <= 1)
 80012ec:	4b3a      	ldr	r3, [pc, #232]	; (80013d8 <ReadProgramFromFlash2+0x138>)
 80012ee:	899b      	ldrh	r3, [r3, #12]
 80012f0:	b298      	uxth	r0, r3
 80012f2:	f04f 0100 	mov.w	r1, #0
 80012f6:	88bb      	ldrh	r3, [r7, #4]
 80012f8:	4a36      	ldr	r2, [pc, #216]	; (80013d4 <ReadProgramFromFlash2+0x134>)
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4413      	add	r3, r2
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	ebb0 0802 	subs.w	r8, r0, r2
 8001306:	eb61 0903 	sbc.w	r9, r1, r3
 800130a:	f1b9 0f00 	cmp.w	r9, #0
 800130e:	bf08      	it	eq
 8001310:	f1b8 0f02 	cmpeq.w	r8, #2
 8001314:	d311      	bcc.n	800133a <ReadProgramFromFlash2+0x9a>
 8001316:	88bb      	ldrh	r3, [r7, #4]
 8001318:	4a2e      	ldr	r2, [pc, #184]	; (80013d4 <ReadProgramFromFlash2+0x134>)
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4413      	add	r3, r2
 800131e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001322:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <ReadProgramFromFlash2+0x138>)
 8001324:	899b      	ldrh	r3, [r3, #12]
 8001326:	b29a      	uxth	r2, r3
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	1a84      	subs	r4, r0, r2
 800132e:	eb61 0503 	sbc.w	r5, r1, r3
 8001332:	2d00      	cmp	r5, #0
 8001334:	bf08      	it	eq
 8001336:	2c02      	cmpeq	r4, #2
 8001338:	d244      	bcs.n	80013c4 <ReadProgramFromFlash2+0x124>
	{
		if (ReadFlashPage[offset] <= PROGRAM_MAX)
 800133a:	88bb      	ldrh	r3, [r7, #4]
 800133c:	4a25      	ldr	r2, [pc, #148]	; (80013d4 <ReadProgramFromFlash2+0x134>)
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4413      	add	r3, r2
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	2b00      	cmp	r3, #0
 8001348:	bf08      	it	eq
 800134a:	2a47      	cmpeq	r2, #71	; 0x47
 800134c:	d23a      	bcs.n	80013c4 <ReadProgramFromFlash2+0x124>
		{
			WelderUnit.Program = ReadFlashPage[offset];
 800134e:	88bb      	ldrh	r3, [r7, #4]
 8001350:	4a20      	ldr	r2, [pc, #128]	; (80013d4 <ReadProgramFromFlash2+0x134>)
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4413      	add	r3, r2
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	b292      	uxth	r2, r2
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <ReadProgramFromFlash2+0x138>)
 800135e:	819a      	strh	r2, [r3, #12]
			WelderUnit.Xs = ReadFlashPage[offset + 1];
 8001360:	88bb      	ldrh	r3, [r7, #4]
 8001362:	3301      	adds	r3, #1
 8001364:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <ReadProgramFromFlash2+0x134>)
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4413      	add	r3, r2
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	b292      	uxth	r2, r2
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <ReadProgramFromFlash2+0x138>)
 8001372:	801a      	strh	r2, [r3, #0]
			WelderUnit.Xf = ReadFlashPage[offset + 2];
 8001374:	88bb      	ldrh	r3, [r7, #4]
 8001376:	3302      	adds	r3, #2
 8001378:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <ReadProgramFromFlash2+0x134>)
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4413      	add	r3, r2
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	b292      	uxth	r2, r2
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <ReadProgramFromFlash2+0x138>)
 8001386:	805a      	strh	r2, [r3, #2]
			WelderUnit.Speed = ReadFlashPage[offset + 3];
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	3303      	adds	r3, #3
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <ReadProgramFromFlash2+0x134>)
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	b292      	uxth	r2, r2
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <ReadProgramFromFlash2+0x138>)
 800139a:	80da      	strh	r2, [r3, #6]
			WelderUnit.Delay_s = ReadFlashPage[offset + 4];
 800139c:	88bb      	ldrh	r3, [r7, #4]
 800139e:	3304      	adds	r3, #4
 80013a0:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <ReadProgramFromFlash2+0x134>)
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4413      	add	r3, r2
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <ReadProgramFromFlash2+0x138>)
 80013ae:	729a      	strb	r2, [r3, #10]
			WelderUnit.Delay_f = ReadFlashPage[offset + 5];
 80013b0:	88bb      	ldrh	r3, [r7, #4]
 80013b2:	3305      	adds	r3, #5
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <ReadProgramFromFlash2+0x134>)
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4413      	add	r3, r2
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <ReadProgramFromFlash2+0x138>)
 80013c2:	72da      	strb	r2, [r3, #11]

//	STM32_WriteToFlash3(ReadFlashPage, 64);
//
//	p = (uint32_t*)PAGE + offset/4; // p содержит начальный адрес записи параметров программы

}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80013ce:	4770      	bx	lr
 80013d0:	0803f800 	.word	0x0803f800
 80013d4:	20003570 	.word	0x20003570
 80013d8:	2000353c 	.word	0x2000353c

080013dc <STLED316S_Ini>:
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	461a      	mov	r2, r3
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	2007      	movs	r0, #7
 80013f0:	f000 f938 	bl	8001664 <STLED316S_SetBrightness>
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <STLED316S_Ini+0x60>)
 80013f6:	220d      	movs	r2, #13
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	2200      	movs	r2, #0
 80013fe:	4619      	mov	r1, r3
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f003 fc24 	bl	8004c4e <HAL_GPIO_WritePin>
 8001406:	2005      	movs	r0, #5
 8001408:	f000 f9e6 	bl	80017d8 <DelayMicro>
 800140c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001410:	2201      	movs	r2, #1
 8001412:	490a      	ldr	r1, [pc, #40]	; (800143c <STLED316S_Ini+0x60>)
 8001414:	480a      	ldr	r0, [pc, #40]	; (8001440 <STLED316S_Ini+0x64>)
 8001416:	f004 f8b7 	bl	8005588 <HAL_SPI_Transmit>
 800141a:	2005      	movs	r0, #5
 800141c:	f000 f9dc 	bl	80017d8 <DelayMicro>
 8001420:	887b      	ldrh	r3, [r7, #2]
 8001422:	2201      	movs	r2, #1
 8001424:	4619      	mov	r1, r3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f003 fc11 	bl	8004c4e <HAL_GPIO_WritePin>
 800142c:	2005      	movs	r0, #5
 800142e:	f000 f9d3 	bl	80017d8 <DelayMicro>
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20003d98 	.word	0x20003d98
 8001440:	20003e1c 	.word	0x20003e1c

08001444 <STLED316S_OutData>:
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	461a      	mov	r2, r3
 8001450:	460b      	mov	r3, r1
 8001452:	72fb      	strb	r3, [r7, #11]
 8001454:	4613      	mov	r3, r2
 8001456:	813b      	strh	r3, [r7, #8]
 8001458:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <STLED316S_OutData+0xb0>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <STLED316S_OutData+0xb0>)
 8001460:	2200      	movs	r2, #0
 8001462:	705a      	strb	r2, [r3, #1]
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <STLED316S_OutData+0xb0>)
 8001466:	2200      	movs	r2, #0
 8001468:	709a      	strb	r2, [r3, #2]
 800146a:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <STLED316S_OutData+0xb0>)
 800146c:	2200      	movs	r2, #0
 800146e:	70da      	strb	r2, [r3, #3]
 8001470:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <STLED316S_OutData+0xb0>)
 8001472:	2200      	movs	r2, #0
 8001474:	711a      	strb	r2, [r3, #4]
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <STLED316S_OutData+0xb0>)
 8001478:	2200      	movs	r2, #0
 800147a:	715a      	strb	r2, [r3, #5]
 800147c:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <STLED316S_OutData+0xb0>)
 800147e:	2200      	movs	r2, #0
 8001480:	719a      	strb	r2, [r3, #6]
 8001482:	2300      	movs	r3, #0
 8001484:	75fb      	strb	r3, [r7, #23]
 8001486:	e00d      	b.n	80014a4 <STLED316S_OutData+0x60>
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	7dfb      	ldrb	r3, [r7, #23]
 8001494:	3301      	adds	r3, #1
 8001496:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <STLED316S_OutData+0xb4>)
 8001498:	5c51      	ldrb	r1, [r2, r1]
 800149a:	4a16      	ldr	r2, [pc, #88]	; (80014f4 <STLED316S_OutData+0xb0>)
 800149c:	54d1      	strb	r1, [r2, r3]
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	3301      	adds	r3, #1
 80014a2:	75fb      	strb	r3, [r7, #23]
 80014a4:	7dfa      	ldrb	r2, [r7, #23]
 80014a6:	7afb      	ldrb	r3, [r7, #11]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3ed      	bcc.n	8001488 <STLED316S_OutData+0x44>
 80014ac:	893b      	ldrh	r3, [r7, #8]
 80014ae:	2200      	movs	r2, #0
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f003 fbcb 	bl	8004c4e <HAL_GPIO_WritePin>
 80014b8:	2005      	movs	r0, #5
 80014ba:	f000 f98d 	bl	80017d8 <DelayMicro>
 80014be:	7afb      	ldrb	r3, [r7, #11]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	f242 7310 	movw	r3, #10000	; 0x2710
 80014ca:	490a      	ldr	r1, [pc, #40]	; (80014f4 <STLED316S_OutData+0xb0>)
 80014cc:	480b      	ldr	r0, [pc, #44]	; (80014fc <STLED316S_OutData+0xb8>)
 80014ce:	f004 f85b 	bl	8005588 <HAL_SPI_Transmit>
 80014d2:	2005      	movs	r0, #5
 80014d4:	f000 f980 	bl	80017d8 <DelayMicro>
 80014d8:	893b      	ldrh	r3, [r7, #8]
 80014da:	2201      	movs	r2, #1
 80014dc:	4619      	mov	r1, r3
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f003 fbb5 	bl	8004c4e <HAL_GPIO_WritePin>
 80014e4:	2005      	movs	r0, #5
 80014e6:	f000 f977 	bl	80017d8 <DelayMicro>
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20003d98 	.word	0x20003d98
 80014f8:	080099e8 	.word	0x080099e8
 80014fc:	20003e1c 	.word	0x20003e1c

08001500 <STLED316S_Single_Out>:
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	72fb      	strb	r3, [r7, #11]
 800150e:	4613      	mov	r3, r2
 8001510:	72bb      	strb	r3, [r7, #10]
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <STLED316S_Single_Out+0xb8>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <STLED316S_Single_Out+0xb8>)
 800151a:	2200      	movs	r2, #0
 800151c:	705a      	strb	r2, [r3, #1]
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <STLED316S_Single_Out+0xb8>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	f043 0320 	orr.w	r3, r3, #32
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <STLED316S_Single_Out+0xb8>)
 800152a:	701a      	strb	r2, [r3, #0]
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <STLED316S_Single_Out+0xb8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b25a      	sxtb	r2, r3
 8001532:	7afb      	ldrb	r3, [r7, #11]
 8001534:	f1c3 0306 	rsb	r3, r3, #6
 8001538:	b2db      	uxtb	r3, r3
 800153a:	b25b      	sxtb	r3, r3
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	b25b      	sxtb	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b25b      	sxtb	r3, r3
 8001546:	b2da      	uxtb	r2, r3
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <STLED316S_Single_Out+0xb8>)
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	781a      	ldrb	r2, [r3, #0]
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <STLED316S_Single_Out+0xb8>)
 8001552:	705a      	strb	r2, [r3, #1]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <STLED316S_Single_Out+0xbc>)
 800155c:	5c9a      	ldrb	r2, [r3, r2]
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <STLED316S_Single_Out+0xb8>)
 8001560:	705a      	strb	r2, [r3, #1]
 8001562:	7abb      	ldrb	r3, [r7, #10]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <STLED316S_Single_Out+0x76>
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <STLED316S_Single_Out+0xb8>)
 800156a:	785b      	ldrb	r3, [r3, #1]
 800156c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <STLED316S_Single_Out+0xb8>)
 8001574:	705a      	strb	r2, [r3, #1]
 8001576:	8b3b      	ldrh	r3, [r7, #24]
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f003 fb66 	bl	8004c4e <HAL_GPIO_WritePin>
 8001582:	2005      	movs	r0, #5
 8001584:	f000 f928 	bl	80017d8 <DelayMicro>
 8001588:	f242 7310 	movw	r3, #10000	; 0x2710
 800158c:	2202      	movs	r2, #2
 800158e:	490a      	ldr	r1, [pc, #40]	; (80015b8 <STLED316S_Single_Out+0xb8>)
 8001590:	480b      	ldr	r0, [pc, #44]	; (80015c0 <STLED316S_Single_Out+0xc0>)
 8001592:	f003 fff9 	bl	8005588 <HAL_SPI_Transmit>
 8001596:	2005      	movs	r0, #5
 8001598:	f000 f91e 	bl	80017d8 <DelayMicro>
 800159c:	8b3b      	ldrh	r3, [r7, #24]
 800159e:	2201      	movs	r2, #1
 80015a0:	4619      	mov	r1, r3
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f003 fb53 	bl	8004c4e <HAL_GPIO_WritePin>
 80015a8:	2069      	movs	r0, #105	; 0x69
 80015aa:	f000 f915 	bl	80017d8 <DelayMicro>
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20003d98 	.word	0x20003d98
 80015bc:	080099e8 	.word	0x080099e8
 80015c0:	20003e1c 	.word	0x20003e1c

080015c4 <STLED316S_Direct_Single_Out>:
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	461a      	mov	r2, r3
 80015d0:	460b      	mov	r3, r1
 80015d2:	72fb      	strb	r3, [r7, #11]
 80015d4:	4613      	mov	r3, r2
 80015d6:	813b      	strh	r3, [r7, #8]
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <STLED316S_Direct_Single_Out+0x98>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <STLED316S_Direct_Single_Out+0x98>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	705a      	strb	r2, [r3, #1]
 80015e4:	4b1d      	ldr	r3, [pc, #116]	; (800165c <STLED316S_Direct_Single_Out+0x98>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	f043 0320 	orr.w	r3, r3, #32
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <STLED316S_Direct_Single_Out+0x98>)
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <STLED316S_Direct_Single_Out+0x98>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b25a      	sxtb	r2, r3
 80015f8:	7afb      	ldrb	r3, [r7, #11]
 80015fa:	f1c3 0306 	rsb	r3, r3, #6
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	b25b      	sxtb	r3, r3
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	b25b      	sxtb	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b25b      	sxtb	r3, r3
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <STLED316S_Direct_Single_Out+0x98>)
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <STLED316S_Direct_Single_Out+0x98>)
 8001618:	705a      	strb	r2, [r3, #1]
 800161a:	893b      	ldrh	r3, [r7, #8]
 800161c:	2200      	movs	r2, #0
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f003 fb14 	bl	8004c4e <HAL_GPIO_WritePin>
 8001626:	2005      	movs	r0, #5
 8001628:	f000 f8d6 	bl	80017d8 <DelayMicro>
 800162c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001630:	2202      	movs	r2, #2
 8001632:	490a      	ldr	r1, [pc, #40]	; (800165c <STLED316S_Direct_Single_Out+0x98>)
 8001634:	480a      	ldr	r0, [pc, #40]	; (8001660 <STLED316S_Direct_Single_Out+0x9c>)
 8001636:	f003 ffa7 	bl	8005588 <HAL_SPI_Transmit>
 800163a:	2005      	movs	r0, #5
 800163c:	f000 f8cc 	bl	80017d8 <DelayMicro>
 8001640:	893b      	ldrh	r3, [r7, #8]
 8001642:	2201      	movs	r2, #1
 8001644:	4619      	mov	r1, r3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f003 fb01 	bl	8004c4e <HAL_GPIO_WritePin>
 800164c:	2005      	movs	r0, #5
 800164e:	f000 f8c3 	bl	80017d8 <DelayMicro>
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20003d98 	.word	0x20003d98
 8001660:	20003e1c 	.word	0x20003e1c

08001664 <STLED316S_SetBrightness>:
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
 8001670:	4613      	mov	r3, r2
 8001672:	80bb      	strh	r3, [r7, #4]
 8001674:	4b26      	ldr	r3, [pc, #152]	; (8001710 <STLED316S_SetBrightness+0xac>)
 8001676:	2210      	movs	r2, #16
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	4b25      	ldr	r3, [pc, #148]	; (8001710 <STLED316S_SetBrightness+0xac>)
 800167c:	22e5      	movs	r2, #229	; 0xe5
 800167e:	705a      	strb	r2, [r3, #1]
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <STLED316S_SetBrightness+0xac>)
 8001682:	2200      	movs	r2, #0
 8001684:	709a      	strb	r2, [r3, #2]
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <STLED316S_SetBrightness+0xac>)
 8001688:	2200      	movs	r2, #0
 800168a:	70da      	strb	r2, [r3, #3]
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <STLED316S_SetBrightness+0xac>)
 800168e:	2200      	movs	r2, #0
 8001690:	711a      	strb	r2, [r3, #4]
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	b25a      	sxtb	r2, r3
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	4313      	orrs	r3, r2
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <STLED316S_SetBrightness+0xac>)
 80016a4:	709a      	strb	r2, [r3, #2]
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	b25a      	sxtb	r2, r3
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <STLED316S_SetBrightness+0xac>)
 80016b8:	70da      	strb	r2, [r3, #3]
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	b25a      	sxtb	r2, r3
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <STLED316S_SetBrightness+0xac>)
 80016cc:	711a      	strb	r2, [r3, #4]
 80016ce:	88bb      	ldrh	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	4619      	mov	r1, r3
 80016d4:	6838      	ldr	r0, [r7, #0]
 80016d6:	f003 faba 	bl	8004c4e <HAL_GPIO_WritePin>
 80016da:	2005      	movs	r0, #5
 80016dc:	f000 f87c 	bl	80017d8 <DelayMicro>
 80016e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80016e4:	2205      	movs	r2, #5
 80016e6:	490a      	ldr	r1, [pc, #40]	; (8001710 <STLED316S_SetBrightness+0xac>)
 80016e8:	480a      	ldr	r0, [pc, #40]	; (8001714 <STLED316S_SetBrightness+0xb0>)
 80016ea:	f003 ff4d 	bl	8005588 <HAL_SPI_Transmit>
 80016ee:	2005      	movs	r0, #5
 80016f0:	f000 f872 	bl	80017d8 <DelayMicro>
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	4619      	mov	r1, r3
 80016fa:	6838      	ldr	r0, [r7, #0]
 80016fc:	f003 faa7 	bl	8004c4e <HAL_GPIO_WritePin>
 8001700:	2005      	movs	r0, #5
 8001702:	f000 f869 	bl	80017d8 <DelayMicro>
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20003d98 	.word	0x20003d98
 8001714:	20003e1c 	.word	0x20003e1c

08001718 <STLED316S_ReciveData>:
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	4613      	mov	r3, r2
 8001724:	80fb      	strh	r3, [r7, #6]
 8001726:	4b29      	ldr	r3, [pc, #164]	; (80017cc <STLED316S_ReciveData+0xb4>)
 8001728:	2249      	movs	r2, #73	; 0x49
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	4b27      	ldr	r3, [pc, #156]	; (80017cc <STLED316S_ReciveData+0xb4>)
 800172e:	2200      	movs	r2, #0
 8001730:	705a      	strb	r2, [r3, #1]
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <STLED316S_ReciveData+0xb4>)
 8001734:	2200      	movs	r2, #0
 8001736:	709a      	strb	r2, [r3, #2]
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <STLED316S_ReciveData+0xb4>)
 800173a:	2200      	movs	r2, #0
 800173c:	70da      	strb	r2, [r3, #3]
 800173e:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <STLED316S_ReciveData+0xb8>)
 8001740:	2249      	movs	r2, #73	; 0x49
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <STLED316S_ReciveData+0xb8>)
 8001746:	2202      	movs	r2, #2
 8001748:	705a      	strb	r2, [r3, #1]
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <STLED316S_ReciveData+0xb8>)
 800174c:	2202      	movs	r2, #2
 800174e:	709a      	strb	r2, [r3, #2]
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <STLED316S_ReciveData+0xb8>)
 8001752:	2202      	movs	r2, #2
 8001754:	70da      	strb	r2, [r3, #3]
 8001756:	2300      	movs	r3, #0
 8001758:	75fb      	strb	r3, [r7, #23]
 800175a:	e006      	b.n	800176a <STLED316S_ReciveData+0x52>
 800175c:	7dfb      	ldrb	r3, [r7, #23]
 800175e:	4a1c      	ldr	r2, [pc, #112]	; (80017d0 <STLED316S_ReciveData+0xb8>)
 8001760:	2100      	movs	r1, #0
 8001762:	54d1      	strb	r1, [r2, r3]
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	3301      	adds	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	2b07      	cmp	r3, #7
 800176e:	d9f5      	bls.n	800175c <STLED316S_ReciveData+0x44>
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	2200      	movs	r2, #0
 8001774:	4619      	mov	r1, r3
 8001776:	68b8      	ldr	r0, [r7, #8]
 8001778:	f003 fa69 	bl	8004c4e <HAL_GPIO_WritePin>
 800177c:	2005      	movs	r0, #5
 800177e:	f000 f82b 	bl	80017d8 <DelayMicro>
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	2201      	movs	r2, #1
 8001788:	4910      	ldr	r1, [pc, #64]	; (80017cc <STLED316S_ReciveData+0xb4>)
 800178a:	4812      	ldr	r0, [pc, #72]	; (80017d4 <STLED316S_ReciveData+0xbc>)
 800178c:	f003 fefc 	bl	8005588 <HAL_SPI_Transmit>
 8001790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001794:	2202      	movs	r2, #2
 8001796:	490e      	ldr	r1, [pc, #56]	; (80017d0 <STLED316S_ReciveData+0xb8>)
 8001798:	480e      	ldr	r0, [pc, #56]	; (80017d4 <STLED316S_ReciveData+0xbc>)
 800179a:	f004 f831 	bl	8005800 <HAL_SPI_Receive>
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	2201      	movs	r2, #1
 80017a2:	4619      	mov	r1, r3
 80017a4:	68b8      	ldr	r0, [r7, #8]
 80017a6:	f003 fa52 	bl	8004c4e <HAL_GPIO_WritePin>
 80017aa:	2005      	movs	r0, #5
 80017ac:	f000 f814 	bl	80017d8 <DelayMicro>
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <STLED316S_ReciveData+0xb8>)
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3301      	adds	r3, #1
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <STLED316S_ReciveData+0xb8>)
 80017be:	7852      	ldrb	r2, [r2, #1]
 80017c0:	701a      	strb	r2, [r3, #0]
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20003d98 	.word	0x20003d98
 80017d0:	20003568 	.word	0x20003568
 80017d4:	20003e1c 	.word	0x20003e1c

080017d8 <DelayMicro>:
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <DelayMicro+0x34>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <DelayMicro+0x38>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0d5b      	lsrs	r3, r3, #21
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	bf00      	nop
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1fa      	bne.n	80017f6 <DelayMicro+0x1e>
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000000 	.word	0x20000000
 8001810:	6b5fca6b 	.word	0x6b5fca6b

08001814 <STM32_WriteToFlash3>:
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	f002 fedb 	bl	80045d8 <HAL_FLASH_Unlock>
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <STM32_WriteToFlash3+0x70>)
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	2301      	movs	r3, #1
 8001830:	61bb      	str	r3, [r7, #24]
 8001832:	f107 0208 	add.w	r2, r7, #8
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f002 ffb3 	bl	80047a8 <HAL_FLASHEx_Erase>
 8001842:	2300      	movs	r3, #0
 8001844:	83fb      	strh	r3, [r7, #30]
 8001846:	e012      	b.n	800186e <STM32_WriteToFlash3+0x5a>
 8001848:	8bfb      	ldrh	r3, [r7, #30]
 800184a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800184e:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4619      	mov	r1, r3
 8001856:	8bfb      	ldrh	r3, [r7, #30]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	2002      	movs	r0, #2
 8001864:	f002 fe48 	bl	80044f8 <HAL_FLASH_Program>
 8001868:	8bfb      	ldrh	r3, [r7, #30]
 800186a:	3301      	adds	r3, #1
 800186c:	83fb      	strh	r3, [r7, #30]
 800186e:	8bfb      	ldrh	r3, [r7, #30]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d8e8      	bhi.n	8001848 <STM32_WriteToFlash3+0x34>
 8001876:	f002 fed5 	bl	8004624 <HAL_FLASH_Lock>
 800187a:	bf00      	nop
 800187c:	3720      	adds	r7, #32
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	0803f800 	.word	0x0803f800

08001888 <freeRTOS_Tasks_Ini>:
	uint8_t STLED_Rx[8];



void freeRTOS_Tasks_Ini (void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af02      	add	r7, sp, #8
	xSemaphore_StepCount = xQueueCreateCountingSemaphore(4, 0);
 800188e:	2100      	movs	r1, #0
 8001890:	2004      	movs	r0, #4
 8001892:	f005 fed7 	bl	8007644 <xQueueCreateCountingSemaphore>
 8001896:	4603      	mov	r3, r0
 8001898:	4a48      	ldr	r2, [pc, #288]	; (80019bc <freeRTOS_Tasks_Ini+0x134>)
 800189a:	6013      	str	r3, [r2, #0]

	//xSemaphore_Calibration = xQueueCreateCountingSemaphore(1, 0); // Первый аргмент - это максимальное количество счета, второй - начальное значение счетчика

	vSemaphoreCreateBinary(xSemaphore_Calibration); // Создание двоичного семафора
 800189c:	2203      	movs	r2, #3
 800189e:	2100      	movs	r1, #0
 80018a0:	2001      	movs	r0, #1
 80018a2:	f005 fe7c 	bl	800759e <xQueueGenericCreate>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a45      	ldr	r2, [pc, #276]	; (80019c0 <freeRTOS_Tasks_Ini+0x138>)
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <freeRTOS_Tasks_Ini+0x138>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <freeRTOS_Tasks_Ini+0x3a>
 80018b4:	4b42      	ldr	r3, [pc, #264]	; (80019c0 <freeRTOS_Tasks_Ini+0x138>)
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	2300      	movs	r3, #0
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	f005 fed7 	bl	8007670 <xQueueGenericSend>

	qBeepMode = xQueueCreate(1, sizeof( uint8_t )); // Очередь для передачи режима работы бипера
 80018c2:	2200      	movs	r2, #0
 80018c4:	2101      	movs	r1, #1
 80018c6:	2001      	movs	r0, #1
 80018c8:	f005 fe69 	bl	800759e <xQueueGenericCreate>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a3d      	ldr	r2, [pc, #244]	; (80019c4 <freeRTOS_Tasks_Ini+0x13c>)
 80018d0:	6013      	str	r3, [r2, #0]

	qWelderCmd = xQueueCreate(1, sizeof( uint8_t )); // Очередь для передачи команд управления кареткой
 80018d2:	2200      	movs	r2, #0
 80018d4:	2101      	movs	r1, #1
 80018d6:	2001      	movs	r0, #1
 80018d8:	f005 fe61 	bl	800759e <xQueueGenericCreate>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a3a      	ldr	r2, [pc, #232]	; (80019c8 <freeRTOS_Tasks_Ini+0x140>)
 80018e0:	6013      	str	r3, [r2, #0]

	qGoToResponse = xQueueCreate(1, sizeof( uint8_t )); // Требуемая позиция занята
 80018e2:	2200      	movs	r2, #0
 80018e4:	2101      	movs	r1, #1
 80018e6:	2001      	movs	r0, #1
 80018e8:	f005 fe59 	bl	800759e <xQueueGenericCreate>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a37      	ldr	r2, [pc, #220]	; (80019cc <freeRTOS_Tasks_Ini+0x144>)
 80018f0:	6013      	str	r3, [r2, #0]

	//vSemaphoreCreateBinary(qDebug);

	qWelderRun = xQueueCreate(1, sizeof( uint8_t )); // Начать процесс варки
 80018f2:	2200      	movs	r2, #0
 80018f4:	2101      	movs	r1, #1
 80018f6:	2001      	movs	r0, #1
 80018f8:	f005 fe51 	bl	800759e <xQueueGenericCreate>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4a34      	ldr	r2, [pc, #208]	; (80019d0 <freeRTOS_Tasks_Ini+0x148>)
 8001900:	6013      	str	r3, [r2, #0]

	qWelderCalibrated = xQueueCreate(1, sizeof( uint8_t )); // Начать калибровку
 8001902:	2200      	movs	r2, #0
 8001904:	2101      	movs	r1, #1
 8001906:	2001      	movs	r0, #1
 8001908:	f005 fe49 	bl	800759e <xQueueGenericCreate>
 800190c:	4603      	mov	r3, r0
 800190e:	4a31      	ldr	r2, [pc, #196]	; (80019d4 <freeRTOS_Tasks_Ini+0x14c>)
 8001910:	6013      	str	r3, [r2, #0]

	qKeyPress = xQueueCreate(1, sizeof( uint8_t )); // Предача события о нажатии кнопки
 8001912:	2200      	movs	r2, #0
 8001914:	2101      	movs	r1, #1
 8001916:	2001      	movs	r0, #1
 8001918:	f005 fe41 	bl	800759e <xQueueGenericCreate>
 800191c:	4603      	mov	r3, r0
 800191e:	4a2e      	ldr	r2, [pc, #184]	; (80019d8 <freeRTOS_Tasks_Ini+0x150>)
 8001920:	6013      	str	r3, [r2, #0]

	MicrostepDriver_Ini();
 8001922:	f7ff f873 	bl	8000a0c <MicrostepDriver_Ini>

//	WELDER_Preset();

	xTaskCreate(vIndicatorPanel_Out, "IndicatorPanel_Out", 250, NULL, 2, NULL); // З-а вывода значений на панель
 8001926:	2300      	movs	r3, #0
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	2302      	movs	r3, #2
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2300      	movs	r3, #0
 8001930:	22fa      	movs	r2, #250	; 0xfa
 8001932:	492a      	ldr	r1, [pc, #168]	; (80019dc <freeRTOS_Tasks_Ini+0x154>)
 8001934:	482a      	ldr	r0, [pc, #168]	; (80019e0 <freeRTOS_Tasks_Ini+0x158>)
 8001936:	f006 fbb5 	bl	80080a4 <xTaskCreate>

	xTaskCreate(vKeyScan, "KeyScan", 200, NULL, 2, NULL); // З-а опроса кнопок
 800193a:	2300      	movs	r3, #0
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	2302      	movs	r3, #2
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2300      	movs	r3, #0
 8001944:	22c8      	movs	r2, #200	; 0xc8
 8001946:	4927      	ldr	r1, [pc, #156]	; (80019e4 <freeRTOS_Tasks_Ini+0x15c>)
 8001948:	4827      	ldr	r0, [pc, #156]	; (80019e8 <freeRTOS_Tasks_Ini+0x160>)
 800194a:	f006 fbab 	bl	80080a4 <xTaskCreate>

	xTaskCreate(vBuzzer_beep, "Buzzer_beep", 200, NULL, 1, NULL); // З-а опроса кнопок
 800194e:	2300      	movs	r3, #0
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	2301      	movs	r3, #1
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2300      	movs	r3, #0
 8001958:	22c8      	movs	r2, #200	; 0xc8
 800195a:	4924      	ldr	r1, [pc, #144]	; (80019ec <freeRTOS_Tasks_Ini+0x164>)
 800195c:	4824      	ldr	r0, [pc, #144]	; (80019f0 <freeRTOS_Tasks_Ini+0x168>)
 800195e:	f006 fba1 	bl	80080a4 <xTaskCreate>

	xTaskCreate(vWelder_Run, "Weleder_Run", 200, NULL, 2, NULL);
 8001962:	2300      	movs	r3, #0
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	2302      	movs	r3, #2
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2300      	movs	r3, #0
 800196c:	22c8      	movs	r2, #200	; 0xc8
 800196e:	4921      	ldr	r1, [pc, #132]	; (80019f4 <freeRTOS_Tasks_Ini+0x16c>)
 8001970:	4821      	ldr	r0, [pc, #132]	; (80019f8 <freeRTOS_Tasks_Ini+0x170>)
 8001972:	f006 fb97 	bl	80080a4 <xTaskCreate>

	xTaskCreate(vCarriage_GoTo, "Carriage_GoTo", 200, NULL, 3, NULL); // З-а перемещения каретки в заданную точку
 8001976:	2300      	movs	r3, #0
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	2303      	movs	r3, #3
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2300      	movs	r3, #0
 8001980:	22c8      	movs	r2, #200	; 0xc8
 8001982:	491e      	ldr	r1, [pc, #120]	; (80019fc <freeRTOS_Tasks_Ini+0x174>)
 8001984:	481e      	ldr	r0, [pc, #120]	; (8001a00 <freeRTOS_Tasks_Ini+0x178>)
 8001986:	f006 fb8d 	bl	80080a4 <xTaskCreate>

	xTaskCreate(vCarriage_Calibration, "Carriage_Calibration", 200, NULL, 2, NULL); // З-а перемещения каретки в заданную точку
 800198a:	2300      	movs	r3, #0
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	2302      	movs	r3, #2
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2300      	movs	r3, #0
 8001994:	22c8      	movs	r2, #200	; 0xc8
 8001996:	491b      	ldr	r1, [pc, #108]	; (8001a04 <freeRTOS_Tasks_Ini+0x17c>)
 8001998:	481b      	ldr	r0, [pc, #108]	; (8001a08 <freeRTOS_Tasks_Ini+0x180>)
 800199a:	f006 fb83 	bl	80080a4 <xTaskCreate>

	xTaskCreate(vKey_Action, "Key_Action", 200, NULL, 2, NULL); // З-а выполняет дейсвия в зависимости от нажатой кнопки и режима работы устройсво
 800199e:	2300      	movs	r3, #0
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	2302      	movs	r3, #2
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	22c8      	movs	r2, #200	; 0xc8
 80019aa:	4918      	ldr	r1, [pc, #96]	; (8001a0c <freeRTOS_Tasks_Ini+0x184>)
 80019ac:	4818      	ldr	r0, [pc, #96]	; (8001a10 <freeRTOS_Tasks_Ini+0x188>)
 80019ae:	f006 fb79 	bl	80080a4 <xTaskCreate>

	vTaskStartScheduler();
 80019b2:	f006 fcc7 	bl	8008344 <vTaskStartScheduler>

}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20003564 	.word	0x20003564
 80019c0:	20003dc4 	.word	0x20003dc4
 80019c4:	20003538 	.word	0x20003538
 80019c8:	20003d94 	.word	0x20003d94
 80019cc:	20003d80 	.word	0x20003d80
 80019d0:	20003d88 	.word	0x20003d88
 80019d4:	20003d8c 	.word	0x20003d8c
 80019d8:	20003d90 	.word	0x20003d90
 80019dc:	0800994c 	.word	0x0800994c
 80019e0:	08003655 	.word	0x08003655
 80019e4:	08009960 	.word	0x08009960
 80019e8:	08002c29 	.word	0x08002c29
 80019ec:	08009968 	.word	0x08009968
 80019f0:	08003719 	.word	0x08003719
 80019f4:	08009974 	.word	0x08009974
 80019f8:	08002599 	.word	0x08002599
 80019fc:	08009980 	.word	0x08009980
 8001a00:	08002a59 	.word	0x08002a59
 8001a04:	08009990 	.word	0x08009990
 8001a08:	0800285d 	.word	0x0800285d
 8001a0c:	080099a8 	.word	0x080099a8
 8001a10:	08001a15 	.word	0x08001a15

08001a14 <vKey_Action>:

void vKey_Action(void *pvParameters)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed; // Номер нажатой кнопки или комбинации кнопок
	uint8_t beep_mode_send = beep_click; // Режим работы бипера
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73bb      	strb	r3, [r7, #14]
	uint8_t Cal = 0; // Передача команды калибровка
 8001a20:	2300      	movs	r3, #0
 8001a22:	737b      	strb	r3, [r7, #13]
	uint8_t Run; // Переменная для передачи команды начало варки
	uint8_t Carriage_cmd = Cmd_CarriageGoTo; //Передача команды для начала движения каретки в заданную точку
 8001a24:	2301      	movs	r3, #1
 8001a26:	72fb      	strb	r3, [r7, #11]


	for(;;)
	{
		xQueueReceive(qKeyPress, &KeyPressed, portMAX_DELAY ); // Ждать нажатия кнопки
 8001a28:	4ba9      	ldr	r3, [pc, #676]	; (8001cd0 <vKey_Action+0x2bc>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f107 010f 	add.w	r1, r7, #15
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	4618      	mov	r0, r3
 8001a36:	f005 ff73 	bl	8007920 <xQueueReceive>

		switch(KeyPressed)
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	2b24      	cmp	r3, #36	; 0x24
 8001a3e:	d8f3      	bhi.n	8001a28 <vKey_Action+0x14>
 8001a40:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <vKey_Action+0x34>)
 8001a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a46:	bf00      	nop
 8001a48:	08001a29 	.word	0x08001a29
 8001a4c:	08001add 	.word	0x08001add
 8001a50:	08001b3d 	.word	0x08001b3d
 8001a54:	08001b67 	.word	0x08001b67
 8001a58:	08001bd7 	.word	0x08001bd7
 8001a5c:	08001c17 	.word	0x08001c17
 8001a60:	08001c8d 	.word	0x08001c8d
 8001a64:	08001ce1 	.word	0x08001ce1
 8001a68:	08001d4b 	.word	0x08001d4b
 8001a6c:	08001d7f 	.word	0x08001d7f
 8001a70:	08001da7 	.word	0x08001da7
 8001a74:	08001dcf 	.word	0x08001dcf
 8001a78:	08001df7 	.word	0x08001df7
 8001a7c:	08001e1f 	.word	0x08001e1f
 8001a80:	08001e47 	.word	0x08001e47
 8001a84:	08001e6f 	.word	0x08001e6f
 8001a88:	08001e9b 	.word	0x08001e9b
 8001a8c:	08001ec7 	.word	0x08001ec7
 8001a90:	08001eef 	.word	0x08001eef
 8001a94:	08001f17 	.word	0x08001f17
 8001a98:	08001f3f 	.word	0x08001f3f
 8001a9c:	08001f67 	.word	0x08001f67
 8001aa0:	08001fa1 	.word	0x08001fa1
 8001aa4:	08001fc9 	.word	0x08001fc9
 8001aa8:	08001ff5 	.word	0x08001ff5
 8001aac:	0800210f 	.word	0x0800210f
 8001ab0:	0800213b 	.word	0x0800213b
 8001ab4:	08002159 	.word	0x08002159
 8001ab8:	080021b9 	.word	0x080021b9
 8001abc:	080021d7 	.word	0x080021d7
 8001ac0:	0800249b 	.word	0x0800249b
 8001ac4:	080024a9 	.word	0x080024a9
 8001ac8:	08001a29 	.word	0x08001a29
 8001acc:	0800201d 	.word	0x0800201d
 8001ad0:	08002077 	.word	0x08002077
 8001ad4:	08002089 	.word	0x08002089
 8001ad8:	080020e3 	.word	0x080020e3
			break;
		}

		case press_short_Xs_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001adc:	4b7d      	ldr	r3, [pc, #500]	; (8001cd4 <vKey_Action+0x2c0>)
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	f107 010e 	add.w	r1, r7, #14
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f005 fdc2 	bl	8007670 <xQueueGenericSend>

			if (WelderUnit.Xs > XS_MIN) // Проверка на попадание в допустимый диапазон значений
 8001aec:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <vKey_Action+0x2c4>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	2b0a      	cmp	r3, #10
 8001af2:	f240 84e8 	bls.w	80024c6 <vKey_Action+0xab2>
			{
				WelderUnit.Xs--; // Исполнить
 8001af6:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <vKey_Action+0x2c4>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b76      	ldr	r3, [pc, #472]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b00:	801a      	strh	r2, [r3, #0]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001b02:	4b75      	ldr	r3, [pc, #468]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b04:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	f040 84dc 	bne.w	80024c6 <vKey_Action+0xab2>
 8001b0e:	4b72      	ldr	r3, [pc, #456]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b10:	7c1b      	ldrb	r3, [r3, #16]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 84d5 	beq.w	80024c6 <vKey_Action+0xab2>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xs;
 8001b20:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b22:	881a      	ldrh	r2, [r3, #0]
 8001b24:	4b6c      	ldr	r3, [pc, #432]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b26:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001b28:	4b6c      	ldr	r3, [pc, #432]	; (8001cdc <vKey_Action+0x2c8>)
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	f107 010b 	add.w	r1, r7, #11
 8001b30:	2300      	movs	r3, #0
 8001b32:	2200      	movs	r2, #0
 8001b34:	f005 fd9c 	bl	8007670 <xQueueGenericSend>

				}
			}
			break;
 8001b38:	f000 bcc5 	b.w	80024c6 <vKey_Action+0xab2>
		}

		case press_long_Xs_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b3c:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <vKey_Action+0x2c0>)
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	f107 010e 	add.w	r1, r7, #14
 8001b44:	2300      	movs	r3, #0
 8001b46:	2200      	movs	r2, #0
 8001b48:	f005 fd92 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Xs > XS_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001b4c:	4b62      	ldr	r3, [pc, #392]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	2b1e      	cmp	r3, #30
 8001b52:	f240 84bb 	bls.w	80024cc <vKey_Action+0xab8>
			{
				WelderUnit.Xs -= 20; // Дейсвия при длинном нажатии
 8001b56:	4b60      	ldr	r3, [pc, #384]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	3b14      	subs	r3, #20
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b5e      	ldr	r3, [pc, #376]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b60:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001b62:	f000 bcb3 	b.w	80024cc <vKey_Action+0xab8>
		}

		case press_short_Xs_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b66:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <vKey_Action+0x2c0>)
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	f107 010e 	add.w	r1, r7, #14
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2200      	movs	r2, #0
 8001b72:	f005 fd7d 	bl	8007670 <xQueueGenericSend>
			if ((WelderUnit.Xs < XS_MAX) && (WelderUnit.Xs < WelderUnit.Xf)) // Проверка на попадание в допустимый диапазон значений  и что бы Xs была меньше Xf
 8001b76:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001b7e:	f080 84a8 	bcs.w	80024d2 <vKey_Action+0xabe>
 8001b82:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b84:	881a      	ldrh	r2, [r3, #0]
 8001b86:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b88:	885b      	ldrh	r3, [r3, #2]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	f080 84a1 	bcs.w	80024d2 <vKey_Action+0xabe>
			{

			WelderUnit.Xs++; // Исполнить
 8001b90:	4b51      	ldr	r3, [pc, #324]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b9a:	801a      	strh	r2, [r3, #0]

			// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
			if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001b9c:	4b4e      	ldr	r3, [pc, #312]	; (8001cd8 <vKey_Action+0x2c4>)
 8001b9e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	f040 8495 	bne.w	80024d2 <vKey_Action+0xabe>
 8001ba8:	4b4b      	ldr	r3, [pc, #300]	; (8001cd8 <vKey_Action+0x2c4>)
 8001baa:	7c1b      	ldrb	r3, [r3, #16]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 848e 	beq.w	80024d2 <vKey_Action+0xabe>
			{
				Carriage_cmd = Cmd_CarriageGoTo;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	72fb      	strb	r3, [r7, #11]
				WelderUnit.GoTo = WelderUnit.Xs;
 8001bba:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <vKey_Action+0x2c4>)
 8001bbc:	881a      	ldrh	r2, [r3, #0]
 8001bbe:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <vKey_Action+0x2c4>)
 8001bc0:	811a      	strh	r2, [r3, #8]
				xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001bc2:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <vKey_Action+0x2c8>)
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	f107 010b 	add.w	r1, r7, #11
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f005 fd4f 	bl	8007670 <xQueueGenericSend>
			}

			}
			break;
 8001bd2:	f000 bc7e 	b.w	80024d2 <vKey_Action+0xabe>
		}

		case press_long_Xs_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <vKey_Action+0x2c0>)
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	f107 010e 	add.w	r1, r7, #14
 8001bde:	2300      	movs	r3, #0
 8001be0:	2200      	movs	r2, #0
 8001be2:	f005 fd45 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Xs < XS_MAX - 20 && WelderUnit.Xs < WelderUnit.Xf - 20) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
 8001be6:	4b3c      	ldr	r3, [pc, #240]	; (8001cd8 <vKey_Action+0x2c4>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	f240 622b 	movw	r2, #1579	; 0x62b
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	f200 8472 	bhi.w	80024d8 <vKey_Action+0xac4>
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <vKey_Action+0x2c4>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <vKey_Action+0x2c4>)
 8001bfc:	885b      	ldrh	r3, [r3, #2]
 8001bfe:	3b14      	subs	r3, #20
 8001c00:	429a      	cmp	r2, r3
 8001c02:	f280 8469 	bge.w	80024d8 <vKey_Action+0xac4>
			{
				WelderUnit.Xs += 20; // Дейсвия при длинном нажатии
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	3314      	adds	r3, #20
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c10:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001c12:	f000 bc61 	b.w	80024d8 <vKey_Action+0xac4>
		}

		case press_short_Xf_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <vKey_Action+0x2c0>)
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	f107 010e 	add.w	r1, r7, #14
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2200      	movs	r2, #0
 8001c22:	f005 fd25 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN && WelderUnit.Xf > WelderUnit.Xs) // Проверка на попадание в допустимый диапазон значений
 8001c26:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c28:	885b      	ldrh	r3, [r3, #2]
 8001c2a:	2b14      	cmp	r3, #20
 8001c2c:	f240 8457 	bls.w	80024de <vKey_Action+0xaca>
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c32:	885a      	ldrh	r2, [r3, #2]
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	f240 8450 	bls.w	80024de <vKey_Action+0xaca>
			{
				WelderUnit.Xf--; // Исполнить
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c40:	885b      	ldrh	r3, [r3, #2]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c48:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001c4a:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c4c:	885a      	ldrh	r2, [r3, #2]
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c50:	811a      	strh	r2, [r3, #8]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c54:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	f040 8440 	bne.w	80024de <vKey_Action+0xaca>
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c60:	7c1b      	ldrb	r3, [r3, #16]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8439 	beq.w	80024de <vKey_Action+0xaca>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xf;
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c72:	885a      	ldrh	r2, [r3, #2]
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c76:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <vKey_Action+0x2c8>)
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	f107 010b 	add.w	r1, r7, #11
 8001c80:	2300      	movs	r3, #0
 8001c82:	2200      	movs	r2, #0
 8001c84:	f005 fcf4 	bl	8007670 <xQueueGenericSend>

				}
			}
			break;
 8001c88:	f000 bc29 	b.w	80024de <vKey_Action+0xaca>
		}

		case press_long_Xf_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <vKey_Action+0x2c0>)
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	f107 010e 	add.w	r1, r7, #14
 8001c94:	2300      	movs	r3, #0
 8001c96:	2200      	movs	r2, #0
 8001c98:	f005 fcea 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN + 20 && WelderUnit.Xf > WelderUnit.Xs + 20 ) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <vKey_Action+0x2c4>)
 8001c9e:	885b      	ldrh	r3, [r3, #2]
 8001ca0:	2b28      	cmp	r3, #40	; 0x28
 8001ca2:	f240 841f 	bls.w	80024e4 <vKey_Action+0xad0>
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <vKey_Action+0x2c4>)
 8001ca8:	885b      	ldrh	r3, [r3, #2]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <vKey_Action+0x2c4>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	3314      	adds	r3, #20
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	f340 8416 	ble.w	80024e4 <vKey_Action+0xad0>
			{
				WelderUnit.Xf -= 20; // Дейсвия при длинном нажатии
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <vKey_Action+0x2c4>)
 8001cba:	885b      	ldrh	r3, [r3, #2]
 8001cbc:	3b14      	subs	r3, #20
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <vKey_Action+0x2c4>)
 8001cc2:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <vKey_Action+0x2c4>)
 8001cc6:	885a      	ldrh	r2, [r3, #2]
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <vKey_Action+0x2c4>)
 8001cca:	811a      	strh	r2, [r3, #8]
			}
			break;
 8001ccc:	f000 bc0a 	b.w	80024e4 <vKey_Action+0xad0>
 8001cd0:	20003d90 	.word	0x20003d90
 8001cd4:	20003538 	.word	0x20003538
 8001cd8:	2000353c 	.word	0x2000353c
 8001cdc:	20003d94 	.word	0x20003d94
		}

		case press_short_Xf_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001ce0:	4bac      	ldr	r3, [pc, #688]	; (8001f94 <vKey_Action+0x580>)
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	f107 010e 	add.w	r1, r7, #14
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2200      	movs	r2, #0
 8001cec:	f005 fcc0 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001cf0:	4ba9      	ldr	r3, [pc, #676]	; (8001f98 <vKey_Action+0x584>)
 8001cf2:	885b      	ldrh	r3, [r3, #2]
 8001cf4:	f240 6271 	movw	r2, #1649	; 0x671
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	f200 83f6 	bhi.w	80024ea <vKey_Action+0xad6>
			{
				WelderUnit.Xf++; // Исполнить
 8001cfe:	4ba6      	ldr	r3, [pc, #664]	; (8001f98 <vKey_Action+0x584>)
 8001d00:	885b      	ldrh	r3, [r3, #2]
 8001d02:	3301      	adds	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	4ba4      	ldr	r3, [pc, #656]	; (8001f98 <vKey_Action+0x584>)
 8001d08:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001d0a:	4ba3      	ldr	r3, [pc, #652]	; (8001f98 <vKey_Action+0x584>)
 8001d0c:	885a      	ldrh	r2, [r3, #2]
 8001d0e:	4ba2      	ldr	r3, [pc, #648]	; (8001f98 <vKey_Action+0x584>)
 8001d10:	811a      	strh	r2, [r3, #8]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001d12:	4ba1      	ldr	r3, [pc, #644]	; (8001f98 <vKey_Action+0x584>)
 8001d14:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	f040 83e6 	bne.w	80024ea <vKey_Action+0xad6>
 8001d1e:	4b9e      	ldr	r3, [pc, #632]	; (8001f98 <vKey_Action+0x584>)
 8001d20:	7c1b      	ldrb	r3, [r3, #16]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 83df 	beq.w	80024ea <vKey_Action+0xad6>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xf;
 8001d30:	4b99      	ldr	r3, [pc, #612]	; (8001f98 <vKey_Action+0x584>)
 8001d32:	885a      	ldrh	r2, [r3, #2]
 8001d34:	4b98      	ldr	r3, [pc, #608]	; (8001f98 <vKey_Action+0x584>)
 8001d36:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001d38:	4b98      	ldr	r3, [pc, #608]	; (8001f9c <vKey_Action+0x588>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	f107 010b 	add.w	r1, r7, #11
 8001d40:	2300      	movs	r3, #0
 8001d42:	2200      	movs	r2, #0
 8001d44:	f005 fc94 	bl	8007670 <xQueueGenericSend>

				}
			}
			break;
 8001d48:	e3cf      	b.n	80024ea <vKey_Action+0xad6>
		}

		case press_long_Xf_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d4a:	4b92      	ldr	r3, [pc, #584]	; (8001f94 <vKey_Action+0x580>)
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	f107 010e 	add.w	r1, r7, #14
 8001d52:	2300      	movs	r3, #0
 8001d54:	2200      	movs	r2, #0
 8001d56:	f005 fc8b 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX - 20 ) // Проверка на попадание в допустимый диапазон значений
 8001d5a:	4b8f      	ldr	r3, [pc, #572]	; (8001f98 <vKey_Action+0x584>)
 8001d5c:	885b      	ldrh	r3, [r3, #2]
 8001d5e:	f240 625d 	movw	r2, #1629	; 0x65d
 8001d62:	4293      	cmp	r3, r2
 8001d64:	f200 83c4 	bhi.w	80024f0 <vKey_Action+0xadc>
			{
				WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 8001d68:	4b8b      	ldr	r3, [pc, #556]	; (8001f98 <vKey_Action+0x584>)
 8001d6a:	885b      	ldrh	r3, [r3, #2]
 8001d6c:	3314      	adds	r3, #20
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b89      	ldr	r3, [pc, #548]	; (8001f98 <vKey_Action+0x584>)
 8001d72:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001d74:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <vKey_Action+0x584>)
 8001d76:	885a      	ldrh	r2, [r3, #2]
 8001d78:	4b87      	ldr	r3, [pc, #540]	; (8001f98 <vKey_Action+0x584>)
 8001d7a:	811a      	strh	r2, [r3, #8]
			}
			break;
 8001d7c:	e3b8      	b.n	80024f0 <vKey_Action+0xadc>

		}

		case press_short_Delay_s_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d7e:	4b85      	ldr	r3, [pc, #532]	; (8001f94 <vKey_Action+0x580>)
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	f107 010e 	add.w	r1, r7, #14
 8001d86:	2300      	movs	r3, #0
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f005 fc71 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN) // Проверка на попадание в допустимый диапазон значений
 8001d8e:	4b82      	ldr	r3, [pc, #520]	; (8001f98 <vKey_Action+0x584>)
 8001d90:	7a9b      	ldrb	r3, [r3, #10]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	f240 83af 	bls.w	80024f6 <vKey_Action+0xae2>
			{
				WelderUnit.Delay_s--; // Исполнить
 8001d98:	4b7f      	ldr	r3, [pc, #508]	; (8001f98 <vKey_Action+0x584>)
 8001d9a:	7a9b      	ldrb	r3, [r3, #10]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	4b7d      	ldr	r3, [pc, #500]	; (8001f98 <vKey_Action+0x584>)
 8001da2:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001da4:	e3a7      	b.n	80024f6 <vKey_Action+0xae2>
		}

		case press_long_Delay_s_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001da6:	4b7b      	ldr	r3, [pc, #492]	; (8001f94 <vKey_Action+0x580>)
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	f107 010e 	add.w	r1, r7, #14
 8001dae:	2300      	movs	r3, #0
 8001db0:	2200      	movs	r2, #0
 8001db2:	f005 fc5d 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN + 10) // Проверка на попадание в допустимый диапазон значений
 8001db6:	4b78      	ldr	r3, [pc, #480]	; (8001f98 <vKey_Action+0x584>)
 8001db8:	7a9b      	ldrb	r3, [r3, #10]
 8001dba:	2b0b      	cmp	r3, #11
 8001dbc:	f240 839e 	bls.w	80024fc <vKey_Action+0xae8>
			{
				WelderUnit.Delay_s -= 10; // Дейсвия при длинном нажатии
 8001dc0:	4b75      	ldr	r3, [pc, #468]	; (8001f98 <vKey_Action+0x584>)
 8001dc2:	7a9b      	ldrb	r3, [r3, #10]
 8001dc4:	3b0a      	subs	r3, #10
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	4b73      	ldr	r3, [pc, #460]	; (8001f98 <vKey_Action+0x584>)
 8001dca:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001dcc:	e396      	b.n	80024fc <vKey_Action+0xae8>
		}

		case press_short_Delay_s_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001dce:	4b71      	ldr	r3, [pc, #452]	; (8001f94 <vKey_Action+0x580>)
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	f107 010e 	add.w	r1, r7, #14
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f005 fc49 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001dde:	4b6e      	ldr	r3, [pc, #440]	; (8001f98 <vKey_Action+0x584>)
 8001de0:	7a9b      	ldrb	r3, [r3, #10]
 8001de2:	2b31      	cmp	r3, #49	; 0x31
 8001de4:	f200 838d 	bhi.w	8002502 <vKey_Action+0xaee>
			{
				WelderUnit.Delay_s++; // Исполнить
 8001de8:	4b6b      	ldr	r3, [pc, #428]	; (8001f98 <vKey_Action+0x584>)
 8001dea:	7a9b      	ldrb	r3, [r3, #10]
 8001dec:	3301      	adds	r3, #1
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b69      	ldr	r3, [pc, #420]	; (8001f98 <vKey_Action+0x584>)
 8001df2:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001df4:	e385      	b.n	8002502 <vKey_Action+0xaee>
		}

		case press_long_Delay_s_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001df6:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <vKey_Action+0x580>)
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	f107 010e 	add.w	r1, r7, #14
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2200      	movs	r2, #0
 8001e02:	f005 fc35 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
 8001e06:	4b64      	ldr	r3, [pc, #400]	; (8001f98 <vKey_Action+0x584>)
 8001e08:	7a9b      	ldrb	r3, [r3, #10]
 8001e0a:	2b27      	cmp	r3, #39	; 0x27
 8001e0c:	f200 837c 	bhi.w	8002508 <vKey_Action+0xaf4>
			{
				WelderUnit.Delay_s += 10; // Дейсвия при длинном нажатии
 8001e10:	4b61      	ldr	r3, [pc, #388]	; (8001f98 <vKey_Action+0x584>)
 8001e12:	7a9b      	ldrb	r3, [r3, #10]
 8001e14:	330a      	adds	r3, #10
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <vKey_Action+0x584>)
 8001e1a:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001e1c:	e374      	b.n	8002508 <vKey_Action+0xaf4>
		}

		case press_short_Speed_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <vKey_Action+0x580>)
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	f107 010e 	add.w	r1, r7, #14
 8001e26:	2300      	movs	r3, #0
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f005 fc21 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN) // Проверка на попадание в допустимый диапазон значений
 8001e2e:	4b5a      	ldr	r3, [pc, #360]	; (8001f98 <vKey_Action+0x584>)
 8001e30:	88db      	ldrh	r3, [r3, #6]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	f240 836b 	bls.w	800250e <vKey_Action+0xafa>
			{
				WelderUnit.Speed--; // Исполнить
 8001e38:	4b57      	ldr	r3, [pc, #348]	; (8001f98 <vKey_Action+0x584>)
 8001e3a:	88db      	ldrh	r3, [r3, #6]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b55      	ldr	r3, [pc, #340]	; (8001f98 <vKey_Action+0x584>)
 8001e42:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e44:	e363      	b.n	800250e <vKey_Action+0xafa>
		}

		case press_long_Speed_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e46:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <vKey_Action+0x580>)
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	f107 010e 	add.w	r1, r7, #14
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2200      	movs	r2, #0
 8001e52:	f005 fc0d 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001e56:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <vKey_Action+0x584>)
 8001e58:	88db      	ldrh	r3, [r3, #6]
 8001e5a:	2b15      	cmp	r3, #21
 8001e5c:	f240 835a 	bls.w	8002514 <vKey_Action+0xb00>
			{
				WelderUnit.Speed -= 20; // Дейсвия при длинном нажатии
 8001e60:	4b4d      	ldr	r3, [pc, #308]	; (8001f98 <vKey_Action+0x584>)
 8001e62:	88db      	ldrh	r3, [r3, #6]
 8001e64:	3b14      	subs	r3, #20
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	4b4b      	ldr	r3, [pc, #300]	; (8001f98 <vKey_Action+0x584>)
 8001e6a:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e6c:	e352      	b.n	8002514 <vKey_Action+0xb00>
		}

		case press_short_Speed_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e6e:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <vKey_Action+0x580>)
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	f107 010e 	add.w	r1, r7, #14
 8001e76:	2300      	movs	r3, #0
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f005 fbf9 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001e7e:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <vKey_Action+0x584>)
 8001e80:	88db      	ldrh	r3, [r3, #6]
 8001e82:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001e86:	4293      	cmp	r3, r2
 8001e88:	f200 8358 	bhi.w	800253c <vKey_Action+0xb28>
			{
				WelderUnit.Speed++; // Исполнить
 8001e8c:	4b42      	ldr	r3, [pc, #264]	; (8001f98 <vKey_Action+0x584>)
 8001e8e:	88db      	ldrh	r3, [r3, #6]
 8001e90:	3301      	adds	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <vKey_Action+0x584>)
 8001e96:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e98:	e350      	b.n	800253c <vKey_Action+0xb28>
		}

		case press_long_Speed_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e9a:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <vKey_Action+0x580>)
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	f107 010e 	add.w	r1, r7, #14
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f005 fbe3 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8001eaa:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <vKey_Action+0x584>)
 8001eac:	88db      	ldrh	r3, [r3, #6]
 8001eae:	f240 32d2 	movw	r2, #978	; 0x3d2
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	f200 8345 	bhi.w	8002542 <vKey_Action+0xb2e>
			{
				WelderUnit.Speed += 20; // Дейсвия при длинном нажатии
 8001eb8:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <vKey_Action+0x584>)
 8001eba:	88db      	ldrh	r3, [r3, #6]
 8001ebc:	3314      	adds	r3, #20
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b35      	ldr	r3, [pc, #212]	; (8001f98 <vKey_Action+0x584>)
 8001ec2:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001ec4:	e33d      	b.n	8002542 <vKey_Action+0xb2e>
		}

		case press_short_Delay_f_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001ec6:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <vKey_Action+0x580>)
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	f107 010e 	add.w	r1, r7, #14
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f005 fbcd 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN) // Проверка на попадание в допустимый диапазон значений
 8001ed6:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <vKey_Action+0x584>)
 8001ed8:	7adb      	ldrb	r3, [r3, #11]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	f240 8334 	bls.w	8002548 <vKey_Action+0xb34>
			{
				WelderUnit.Delay_f--; // Исполнить
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <vKey_Action+0x584>)
 8001ee2:	7adb      	ldrb	r3, [r3, #11]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <vKey_Action+0x584>)
 8001eea:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001eec:	e32c      	b.n	8002548 <vKey_Action+0xb34>
		}

		case press_long_Delay_f_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <vKey_Action+0x580>)
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	f107 010e 	add.w	r1, r7, #14
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f005 fbb9 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN + 10) // Проверка на попадание в допустимый диапазон значений
 8001efe:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <vKey_Action+0x584>)
 8001f00:	7adb      	ldrb	r3, [r3, #11]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	f240 8323 	bls.w	800254e <vKey_Action+0xb3a>
			{
				WelderUnit.Delay_f -= 10; // Дейсвия при длинном нажатии
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <vKey_Action+0x584>)
 8001f0a:	7adb      	ldrb	r3, [r3, #11]
 8001f0c:	3b0a      	subs	r3, #10
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <vKey_Action+0x584>)
 8001f12:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001f14:	e31b      	b.n	800254e <vKey_Action+0xb3a>
		}

		case press_short_Delay_f_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f16:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <vKey_Action+0x580>)
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	f107 010e 	add.w	r1, r7, #14
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2200      	movs	r2, #0
 8001f22:	f005 fba5 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX) // Проверка на попадание в допустимый диапазон значений
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <vKey_Action+0x584>)
 8001f28:	7adb      	ldrb	r3, [r3, #11]
 8001f2a:	2b45      	cmp	r3, #69	; 0x45
 8001f2c:	f200 8312 	bhi.w	8002554 <vKey_Action+0xb40>
			{
				WelderUnit.Delay_f++; // Исполнить
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <vKey_Action+0x584>)
 8001f32:	7adb      	ldrb	r3, [r3, #11]
 8001f34:	3301      	adds	r3, #1
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <vKey_Action+0x584>)
 8001f3a:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001f3c:	e30a      	b.n	8002554 <vKey_Action+0xb40>
		}

		case press_long_Delay_f_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <vKey_Action+0x580>)
 8001f40:	6818      	ldr	r0, [r3, #0]
 8001f42:	f107 010e 	add.w	r1, r7, #14
 8001f46:	2300      	movs	r3, #0
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f005 fb91 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <vKey_Action+0x584>)
 8001f50:	7adb      	ldrb	r3, [r3, #11]
 8001f52:	2b3b      	cmp	r3, #59	; 0x3b
 8001f54:	f200 8301 	bhi.w	800255a <vKey_Action+0xb46>
			{
				WelderUnit.Delay_f += 10; // Дейсвия при длинном нажатии
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <vKey_Action+0x584>)
 8001f5a:	7adb      	ldrb	r3, [r3, #11]
 8001f5c:	330a      	adds	r3, #10
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <vKey_Action+0x584>)
 8001f62:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001f64:	e2f9      	b.n	800255a <vKey_Action+0xb46>
		}

		case press_short_Program_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <vKey_Action+0x580>)
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	f107 010e 	add.w	r1, r7, #14
 8001f6e:	2300      	movs	r3, #0
 8001f70:	2200      	movs	r2, #0
 8001f72:	f005 fb7d 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN) // Проверка на попадание в допустимый диапазон значений
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <vKey_Action+0x584>)
 8001f78:	899b      	ldrh	r3, [r3, #12]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	f240 82f0 	bls.w	8002560 <vKey_Action+0xb4c>
			{
				WelderUnit.Program--; // Исполнить
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <vKey_Action+0x584>)
 8001f82:	899b      	ldrh	r3, [r3, #12]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <vKey_Action+0x584>)
 8001f8a:	819a      	strh	r2, [r3, #12]
				ReadProgramFromFlash2();
 8001f8c:	f7ff f988 	bl	80012a0 <ReadProgramFromFlash2>
			}
			break;
 8001f90:	e2e6      	b.n	8002560 <vKey_Action+0xb4c>
 8001f92:	bf00      	nop
 8001f94:	20003538 	.word	0x20003538
 8001f98:	2000353c 	.word	0x2000353c
 8001f9c:	20003d94 	.word	0x20003d94
		}

		case press_long_Program_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001fa0:	4b98      	ldr	r3, [pc, #608]	; (8002204 <vKey_Action+0x7f0>)
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	f107 010e 	add.w	r1, r7, #14
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2200      	movs	r2, #0
 8001fac:	f005 fb60 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001fb0:	4b95      	ldr	r3, [pc, #596]	; (8002208 <vKey_Action+0x7f4>)
 8001fb2:	899b      	ldrh	r3, [r3, #12]
 8001fb4:	2b15      	cmp	r3, #21
 8001fb6:	f240 82d6 	bls.w	8002566 <vKey_Action+0xb52>
			{
				WelderUnit.Program -= 20; // Дейсвия при длинном нажатии
 8001fba:	4b93      	ldr	r3, [pc, #588]	; (8002208 <vKey_Action+0x7f4>)
 8001fbc:	899b      	ldrh	r3, [r3, #12]
 8001fbe:	3b14      	subs	r3, #20
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	4b91      	ldr	r3, [pc, #580]	; (8002208 <vKey_Action+0x7f4>)
 8001fc4:	819a      	strh	r2, [r3, #12]
			}
			break;
 8001fc6:	e2ce      	b.n	8002566 <vKey_Action+0xb52>
		}

		case press_short_Program_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 );
 8001fc8:	4b8e      	ldr	r3, [pc, #568]	; (8002204 <vKey_Action+0x7f0>)
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	f107 010e 	add.w	r1, r7, #14
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f005 fb4c 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX) // Проверка на попадание в допустимый диапазон значений
 8001fd8:	4b8b      	ldr	r3, [pc, #556]	; (8002208 <vKey_Action+0x7f4>)
 8001fda:	899b      	ldrh	r3, [r3, #12]
 8001fdc:	2b45      	cmp	r3, #69	; 0x45
 8001fde:	f200 82c5 	bhi.w	800256c <vKey_Action+0xb58>
			{
				WelderUnit.Program++; // Исполнить
 8001fe2:	4b89      	ldr	r3, [pc, #548]	; (8002208 <vKey_Action+0x7f4>)
 8001fe4:	899b      	ldrh	r3, [r3, #12]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	4b87      	ldr	r3, [pc, #540]	; (8002208 <vKey_Action+0x7f4>)
 8001fec:	819a      	strh	r2, [r3, #12]
				ReadProgramFromFlash2(); //
 8001fee:	f7ff f957 	bl	80012a0 <ReadProgramFromFlash2>
				//SaveProgramToFlash2();
			}
			break;
 8001ff2:	e2bb      	b.n	800256c <vKey_Action+0xb58>
		}

		case press_long_Program_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001ff4:	4b83      	ldr	r3, [pc, #524]	; (8002204 <vKey_Action+0x7f0>)
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	f107 010e 	add.w	r1, r7, #14
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2200      	movs	r2, #0
 8002000:	f005 fb36 	bl	8007670 <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8002004:	4b80      	ldr	r3, [pc, #512]	; (8002208 <vKey_Action+0x7f4>)
 8002006:	899b      	ldrh	r3, [r3, #12]
 8002008:	2b31      	cmp	r3, #49	; 0x31
 800200a:	f200 82b2 	bhi.w	8002572 <vKey_Action+0xb5e>
			{
				WelderUnit.Program += 20; // Дейсвия при длинном нажатии
 800200e:	4b7e      	ldr	r3, [pc, #504]	; (8002208 <vKey_Action+0x7f4>)
 8002010:	899b      	ldrh	r3, [r3, #12]
 8002012:	3314      	adds	r3, #20
 8002014:	b29a      	uxth	r2, r3
 8002016:	4b7c      	ldr	r3, [pc, #496]	; (8002208 <vKey_Action+0x7f4>)
 8002018:	819a      	strh	r2, [r3, #12]
			}
			break;
 800201a:	e2aa      	b.n	8002572 <vKey_Action+0xb5e>
		}


		case press_short_Down:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 800201c:	4b79      	ldr	r3, [pc, #484]	; (8002204 <vKey_Action+0x7f0>)
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	f107 010e 	add.w	r1, r7, #14
 8002024:	2300      	movs	r3, #0
 8002026:	2200      	movs	r2, #0
 8002028:	f005 fb22 	bl	8007670 <xQueueGenericSend>
					if ((WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) && WelderUnit.Mode == WELDER_MODE_MANUAL) // Если задняя дверца закрыта и режим работы аппарата ручной, то разрешить опускание головки.
 800202c:	4b76      	ldr	r3, [pc, #472]	; (8002208 <vKey_Action+0x7f4>)
 800202e:	7c1b      	ldrb	r3, [r3, #16]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 829f 	beq.w	8002578 <vKey_Action+0xb64>
 800203a:	4b73      	ldr	r3, [pc, #460]	; (8002208 <vKey_Action+0x7f4>)
 800203c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002040:	2b02      	cmp	r3, #2
 8002042:	f040 8299 	bne.w	8002578 <vKey_Action+0xb64>
					{
						WELDER_HEAD_DOWN // Опустить сварочную головку
 8002046:	2201      	movs	r2, #1
 8002048:	2106      	movs	r1, #6
 800204a:	4870      	ldr	r0, [pc, #448]	; (800220c <vKey_Action+0x7f8>)
 800204c:	f002 fdff 	bl	8004c4e <HAL_GPIO_WritePin>
						WelderUnit.IndicatorPanel.LEDsState |= LED_DOWN; // Индикация что головка опущена
 8002050:	4b6d      	ldr	r3, [pc, #436]	; (8002208 <vKey_Action+0x7f4>)
 8002052:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <vKey_Action+0x7f4>)
 800205e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						WelderUnit.IndicatorPanel.LEDsState &= ~LED_UP; // Индикация что головка опущена
 8002062:	4b69      	ldr	r3, [pc, #420]	; (8002208 <vKey_Action+0x7f4>)
 8002064:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002068:	f023 0308 	bic.w	r3, r3, #8
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b66      	ldr	r3, [pc, #408]	; (8002208 <vKey_Action+0x7f4>)
 8002070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					}

					break;
 8002074:	e280      	b.n	8002578 <vKey_Action+0xb64>
				}

				case press_long_Down:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002076:	4b63      	ldr	r3, [pc, #396]	; (8002204 <vKey_Action+0x7f0>)
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	f107 010e 	add.w	r1, r7, #14
 800207e:	2300      	movs	r3, #0
 8002080:	2200      	movs	r2, #0
 8002082:	f005 faf5 	bl	8007670 <xQueueGenericSend>
//					if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
//					{
//						WelderUnit.Speed -= 20; // Дейсвия при длинном нажатии
//					}
					break;
 8002086:	e284      	b.n	8002592 <vKey_Action+0xb7e>
				}

				case press_short_Up:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002088:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <vKey_Action+0x7f0>)
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	f107 010e 	add.w	r1, r7, #14
 8002090:	2300      	movs	r3, #0
 8002092:	2200      	movs	r2, #0
 8002094:	f005 faec 	bl	8007670 <xQueueGenericSend>
					if ((WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) && WelderUnit.Mode == WELDER_MODE_MANUAL) // Если задняя дверца закрыта и режим работы аппарата ручной, то разрешить подъем головки
 8002098:	4b5b      	ldr	r3, [pc, #364]	; (8002208 <vKey_Action+0x7f4>)
 800209a:	7c1b      	ldrb	r3, [r3, #16]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 826c 	beq.w	800257e <vKey_Action+0xb6a>
 80020a6:	4b58      	ldr	r3, [pc, #352]	; (8002208 <vKey_Action+0x7f4>)
 80020a8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	f040 8266 	bne.w	800257e <vKey_Action+0xb6a>
					{
					WELDER_HEAD_UP // Поднять сварочную головку
 80020b2:	2200      	movs	r2, #0
 80020b4:	2106      	movs	r1, #6
 80020b6:	4855      	ldr	r0, [pc, #340]	; (800220c <vKey_Action+0x7f8>)
 80020b8:	f002 fdc9 	bl	8004c4e <HAL_GPIO_WritePin>
					WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация что головка поднята
 80020bc:	4b52      	ldr	r3, [pc, #328]	; (8002208 <vKey_Action+0x7f4>)
 80020be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020c2:	f043 0308 	orr.w	r3, r3, #8
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b4f      	ldr	r3, [pc, #316]	; (8002208 <vKey_Action+0x7f4>)
 80020ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN; // Индикация что головка поднята
 80020ce:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <vKey_Action+0x7f4>)
 80020d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020d4:	f023 0304 	bic.w	r3, r3, #4
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <vKey_Action+0x7f4>)
 80020dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					}
					break;
 80020e0:	e24d      	b.n	800257e <vKey_Action+0xb6a>
				}

				case press_long_Up:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80020e2:	4b48      	ldr	r3, [pc, #288]	; (8002204 <vKey_Action+0x7f0>)
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	f107 010e 	add.w	r1, r7, #14
 80020ea:	2300      	movs	r3, #0
 80020ec:	2200      	movs	r2, #0
 80020ee:	f005 fabf 	bl	8007670 <xQueueGenericSend>
					if (WelderUnit.Speed < SPEED_MAX - 20 ) // Проверка на попадание в допустимый диапазон значений
 80020f2:	4b45      	ldr	r3, [pc, #276]	; (8002208 <vKey_Action+0x7f4>)
 80020f4:	88db      	ldrh	r3, [r3, #6]
 80020f6:	f240 32d2 	movw	r2, #978	; 0x3d2
 80020fa:	4293      	cmp	r3, r2
 80020fc:	f200 8242 	bhi.w	8002584 <vKey_Action+0xb70>
					{
						WelderUnit.Speed += 20; // Дейсвия при длинном нажатии
 8002100:	4b41      	ldr	r3, [pc, #260]	; (8002208 <vKey_Action+0x7f4>)
 8002102:	88db      	ldrh	r3, [r3, #6]
 8002104:	3314      	adds	r3, #20
 8002106:	b29a      	uxth	r2, r3
 8002108:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <vKey_Action+0x7f4>)
 800210a:	80da      	strh	r2, [r3, #6]
					}
					break;
 800210c:	e23a      	b.n	8002584 <vKey_Action+0xb70>



		case press_short_Parking:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <vKey_Action+0x7f0>)
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	f107 010e 	add.w	r1, r7, #14
 8002116:	2300      	movs	r3, #0
 8002118:	2200      	movs	r2, #0
 800211a:	f005 faa9 	bl	8007670 <xQueueGenericSend>

			WelderUnit.Mode = WELDER_MODE_CALIBRATION; //Задать режим работы аппарата - калибровка
 800211e:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <vKey_Action+0x7f4>)
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

			//WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отключении индикации режима АВТО
			WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING; // Отображение что выбран режим калибровки
 8002126:	4b38      	ldr	r3, [pc, #224]	; (8002208 <vKey_Action+0x7f4>)
 8002128:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b35      	ldr	r3, [pc, #212]	; (8002208 <vKey_Action+0x7f4>)
 8002134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

			break;
 8002138:	e22b      	b.n	8002592 <vKey_Action+0xb7e>
		}

		case press_long_Parking:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 800213a:	4b32      	ldr	r3, [pc, #200]	; (8002204 <vKey_Action+0x7f0>)
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	f107 010e 	add.w	r1, r7, #14
 8002142:	2300      	movs	r3, #0
 8002144:	2200      	movs	r2, #0
 8002146:	f005 fa93 	bl	8007670 <xQueueGenericSend>
			WelderUnit.Xf -= 20; // Дейсвия при длинном нажатии
 800214a:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <vKey_Action+0x7f4>)
 800214c:	885b      	ldrh	r3, [r3, #2]
 800214e:	3b14      	subs	r3, #20
 8002150:	b29a      	uxth	r2, r3
 8002152:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <vKey_Action+0x7f4>)
 8002154:	805a      	strh	r2, [r3, #2]

			break;
 8002156:	e21c      	b.n	8002592 <vKey_Action+0xb7e>
		}

		case press_short_Auto:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 );
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <vKey_Action+0x7f0>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	f107 010e 	add.w	r1, r7, #14
 8002160:	2300      	movs	r3, #0
 8002162:	2200      	movs	r2, #0
 8002164:	f005 fa84 	bl	8007670 <xQueueGenericSend>


			if (WelderUnit.State & WELDER_STATE_CALIBRATED) // Если аппарат откалиброван, то разрешить включение режима АВТО
 8002168:	4b27      	ldr	r3, [pc, #156]	; (8002208 <vKey_Action+0x7f4>)
 800216a:	7c1b      	ldrb	r3, [r3, #16]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 820a 	beq.w	800258a <vKey_Action+0xb76>
			{
				if (WelderUnit.Mode != WELDER_MODE_AUTO) // Если уже не выбран режим АВТО, то включить его, иначе включить Ручной режим
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <vKey_Action+0x7f4>)
 8002178:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800217c:	2b03      	cmp	r3, #3
 800217e:	d00d      	beq.n	800219c <vKey_Action+0x788>
				{
					WelderUnit.Mode = WELDER_MODE_AUTO;
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <vKey_Action+0x7f4>)
 8002182:	2203      	movs	r2, #3
 8002184:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					WelderUnit.IndicatorPanel.LEDsState |= LED_AUTO; // Отображение что выбран режим калибровки
 8002188:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <vKey_Action+0x7f4>)
 800218a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	b2da      	uxtb	r2, r3
 8002194:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <vKey_Action+0x7f4>)
 8002196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отображение что выбран режим калибровки
				}

			}

			break;
 800219a:	e1f6      	b.n	800258a <vKey_Action+0xb76>
					WelderUnit.Mode = WELDER_MODE_MANUAL;
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <vKey_Action+0x7f4>)
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отображение что выбран режим калибровки
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <vKey_Action+0x7f4>)
 80021a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <vKey_Action+0x7f4>)
 80021b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			break;
 80021b6:	e1e8      	b.n	800258a <vKey_Action+0xb76>
		}

		case press_long_Auto:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <vKey_Action+0x7f0>)
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	f107 010e 	add.w	r1, r7, #14
 80021c0:	2300      	movs	r3, #0
 80021c2:	2200      	movs	r2, #0
 80021c4:	f005 fa54 	bl	8007670 <xQueueGenericSend>
			WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <vKey_Action+0x7f4>)
 80021ca:	885b      	ldrh	r3, [r3, #2]
 80021cc:	3314      	adds	r3, #20
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <vKey_Action+0x7f4>)
 80021d2:	805a      	strh	r2, [r3, #2]
			break;
 80021d4:	e1dd      	b.n	8002592 <vKey_Action+0xb7e>
		}

		case press_short_StartStop:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <vKey_Action+0x7f0>)
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	f107 010e 	add.w	r1, r7, #14
 80021de:	2300      	movs	r3, #0
 80021e0:	2200      	movs	r2, #0
 80021e2:	f005 fa45 	bl	8007670 <xQueueGenericSend>

			// Дейсвия при нажатии на кнопку СТАРТ/СТОП в зависимости от установленного режима работы аппарата
			switch(WelderUnit.Mode)
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <vKey_Action+0x7f4>)
 80021e8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	f000 80d8 	beq.w	80023a2 <vKey_Action+0x98e>
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	f300 81cc 	bgt.w	8002590 <vKey_Action+0xb7c>
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d009      	beq.n	8002210 <vKey_Action+0x7fc>
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d061      	beq.n	80022c4 <vKey_Action+0x8b0>


//			Carriage_cmd = Cmd_CarriageGoTo;
//			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к

			break;
 8002200:	e1c6      	b.n	8002590 <vKey_Action+0xb7c>
 8002202:	bf00      	nop
 8002204:	20003538 	.word	0x20003538
 8002208:	2000353c 	.word	0x2000353c
 800220c:	40011000 	.word	0x40011000
				if (WelderUnit.State & WELDER_CLIBRATION_PROCESS)
 8002210:	4bc2      	ldr	r3, [pc, #776]	; (800251c <vKey_Action+0xb08>)
 8002212:	7c1b      	ldrb	r3, [r3, #16]
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d041      	beq.n	80022a0 <vKey_Action+0x88c>
					WelderUnit.State &= ~WELDER_CLIBRATION_PROCESS; // Запретить калибровку
 800221c:	4bbf      	ldr	r3, [pc, #764]	; (800251c <vKey_Action+0xb08>)
 800221e:	7c1b      	ldrb	r3, [r3, #16]
 8002220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4bbd      	ldr	r3, [pc, #756]	; (800251c <vKey_Action+0xb08>)
 8002228:	741a      	strb	r2, [r3, #16]
					if (WelderUnit.Calibration_level == 02)
 800222a:	4bbc      	ldr	r3, [pc, #752]	; (800251c <vKey_Action+0xb08>)
 800222c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002230:	2b02      	cmp	r3, #2
 8002232:	d108      	bne.n	8002246 <vKey_Action+0x832>
						Carriage_Move(0, 0, 1); // Стоп
 8002234:	2201      	movs	r2, #1
 8002236:	2100      	movs	r1, #0
 8002238:	2000      	movs	r0, #0
 800223a:	f7fe fe25 	bl	8000e88 <Carriage_Move>
						WelderUnit.Calibration_level = 05; // Калибровка остановлена
 800223e:	4bb7      	ldr	r3, [pc, #732]	; (800251c <vKey_Action+0xb08>)
 8002240:	2205      	movs	r2, #5
 8002242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					WelderUnit.Calibration_level = 05; // Калибровка остановлена
 8002246:	4bb5      	ldr	r3, [pc, #724]	; (800251c <vKey_Action+0xb08>)
 8002248:	2205      	movs	r2, #5
 800224a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					xSemaphoreGive(xSemaphore_Calibration);
 800224e:	4bb4      	ldr	r3, [pc, #720]	; (8002520 <vKey_Action+0xb0c>)
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	2300      	movs	r3, #0
 8002254:	2200      	movs	r2, #0
 8002256:	2100      	movs	r1, #0
 8002258:	f005 fa0a 	bl	8007670 <xQueueGenericSend>
					vTaskDelay(10);
 800225c:	200a      	movs	r0, #10
 800225e:	f006 f84d 	bl	80082fc <vTaskDelay>
					xSemaphoreGive(xSemaphore_Calibration);
 8002262:	4baf      	ldr	r3, [pc, #700]	; (8002520 <vKey_Action+0xb0c>)
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	2300      	movs	r3, #0
 8002268:	2200      	movs	r2, #0
 800226a:	2100      	movs	r1, #0
 800226c:	f005 fa00 	bl	8007670 <xQueueGenericSend>
					vTaskDelay(10);
 8002270:	200a      	movs	r0, #10
 8002272:	f006 f843 	bl	80082fc <vTaskDelay>
					xSemaphoreGive(xSemaphore_Calibration);
 8002276:	4baa      	ldr	r3, [pc, #680]	; (8002520 <vKey_Action+0xb0c>)
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	2300      	movs	r3, #0
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	f005 f9f6 	bl	8007670 <xQueueGenericSend>
					vTaskDelay(10);
 8002284:	200a      	movs	r0, #10
 8002286:	f006 f839 	bl	80082fc <vTaskDelay>
					xSemaphoreGive(xSemaphore_Calibration);
 800228a:	4ba5      	ldr	r3, [pc, #660]	; (8002520 <vKey_Action+0xb0c>)
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	2300      	movs	r3, #0
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	f005 f9ec 	bl	8007670 <xQueueGenericSend>
					vTaskDelay(10);
 8002298:	200a      	movs	r0, #10
 800229a:	f006 f82f 	bl	80082fc <vTaskDelay>
				break;
 800229e:	e0fb      	b.n	8002498 <vKey_Action+0xa84>
					WelderUnit.State |= WELDER_CLIBRATION_PROCESS; // Разрешить калибровку
 80022a0:	4b9e      	ldr	r3, [pc, #632]	; (800251c <vKey_Action+0xb08>)
 80022a2:	7c1b      	ldrb	r3, [r3, #16]
 80022a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b9c      	ldr	r3, [pc, #624]	; (800251c <vKey_Action+0xb08>)
 80022ac:	741a      	strb	r2, [r3, #16]
					Cal = Calibrated;
 80022ae:	2304      	movs	r3, #4
 80022b0:	737b      	strb	r3, [r7, #13]
					xQueueSendToBack( qWelderCalibrated, &Cal, 0 ); // Начать калибровку
 80022b2:	4b9c      	ldr	r3, [pc, #624]	; (8002524 <vKey_Action+0xb10>)
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	f107 010d 	add.w	r1, r7, #13
 80022ba:	2300      	movs	r3, #0
 80022bc:	2200      	movs	r2, #0
 80022be:	f005 f9d7 	bl	8007670 <xQueueGenericSend>
				break;
 80022c2:	e0e9      	b.n	8002498 <vKey_Action+0xa84>
				Run = Welder_Run;
 80022c4:	2303      	movs	r3, #3
 80022c6:	733b      	strb	r3, [r7, #12]
				if (WelderUnit.State & 0x01) // Если каретка уже движеся, то остановать её (остановка варки)
 80022c8:	4b94      	ldr	r3, [pc, #592]	; (800251c <vKey_Action+0xb08>)
 80022ca:	7c1b      	ldrb	r3, [r3, #16]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d046      	beq.n	8002362 <vKey_Action+0x94e>
					WelderUnit.State &= ~WELDER_MOVE_ENABLE; // Заппретить движение каретки
 80022d4:	4b91      	ldr	r3, [pc, #580]	; (800251c <vKey_Action+0xb08>)
 80022d6:	7c1b      	ldrb	r3, [r3, #16]
 80022d8:	f023 0320 	bic.w	r3, r3, #32
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b8f      	ldr	r3, [pc, #572]	; (800251c <vKey_Action+0xb08>)
 80022e0:	741a      	strb	r2, [r3, #16]
					SYNC_ARC_OFF // Прекращение подачи дуги
 80022e2:	2200      	movs	r2, #0
 80022e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022e8:	488f      	ldr	r0, [pc, #572]	; (8002528 <vKey_Action+0xb14>)
 80022ea:	f002 fcb0 	bl	8004c4e <HAL_GPIO_WritePin>
					WELDER_HEAD_UP // Поднять головку
 80022ee:	2200      	movs	r2, #0
 80022f0:	2106      	movs	r1, #6
 80022f2:	488e      	ldr	r0, [pc, #568]	; (800252c <vKey_Action+0xb18>)
 80022f4:	f002 fcab 	bl	8004c4e <HAL_GPIO_WritePin>
					WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 80022f8:	4b88      	ldr	r3, [pc, #544]	; (800251c <vKey_Action+0xb08>)
 80022fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022fe:	f043 0308 	orr.w	r3, r3, #8
 8002302:	b2da      	uxtb	r2, r3
 8002304:	4b85      	ldr	r3, [pc, #532]	; (800251c <vKey_Action+0xb08>)
 8002306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 800230a:	4b84      	ldr	r3, [pc, #528]	; (800251c <vKey_Action+0xb08>)
 800230c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4b81      	ldr	r3, [pc, #516]	; (800251c <vKey_Action+0xb08>)
 8002318:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.vWelder_Run_level = 8; // Остановка варки
 800231c:	4b7f      	ldr	r3, [pc, #508]	; (800251c <vKey_Action+0xb08>)
 800231e:	2208      	movs	r2, #8
 8002320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					Run = Carriage_Done;
 8002324:	2302      	movs	r3, #2
 8002326:	733b      	strb	r3, [r7, #12]
					xQueueSendToBack(qGoToResponse, &Run, 0 );
 8002328:	4b81      	ldr	r3, [pc, #516]	; (8002530 <vKey_Action+0xb1c>)
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	f107 010c 	add.w	r1, r7, #12
 8002330:	2300      	movs	r3, #0
 8002332:	2200      	movs	r2, #0
 8002334:	f005 f99c 	bl	8007670 <xQueueGenericSend>
					vTaskDelay(10);
 8002338:	200a      	movs	r0, #10
 800233a:	f005 ffdf 	bl	80082fc <vTaskDelay>
					xQueueSendToBack(qGoToResponse, &Run, 0 );
 800233e:	4b7c      	ldr	r3, [pc, #496]	; (8002530 <vKey_Action+0xb1c>)
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	f107 010c 	add.w	r1, r7, #12
 8002346:	2300      	movs	r3, #0
 8002348:	2200      	movs	r2, #0
 800234a:	f005 f991 	bl	8007670 <xQueueGenericSend>
					vTaskDelay(10);
 800234e:	200a      	movs	r0, #10
 8002350:	f005 ffd4 	bl	80082fc <vTaskDelay>
					xQueueReset(qGoToResponse); // Сброс очереди в исходное состояние
 8002354:	4b76      	ldr	r3, [pc, #472]	; (8002530 <vKey_Action+0xb1c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f005 f8a6 	bl	80074ac <xQueueGenericReset>
				break;
 8002360:	e09a      	b.n	8002498 <vKey_Action+0xa84>
					if (!(WelderUnit.State & WELDER_MOVE_ENABLE)) // Если движение было запрещено (остановлено), то просто разрешить движение каретки
 8002362:	4b6e      	ldr	r3, [pc, #440]	; (800251c <vKey_Action+0xb08>)
 8002364:	7c1b      	ldrb	r3, [r3, #16]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d107      	bne.n	800237e <vKey_Action+0x96a>
					WelderUnit.State |= WELDER_MOVE_ENABLE; // Разрешить движение каретки
 800236e:	4b6b      	ldr	r3, [pc, #428]	; (800251c <vKey_Action+0xb08>)
 8002370:	7c1b      	ldrb	r3, [r3, #16]
 8002372:	f043 0320 	orr.w	r3, r3, #32
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b68      	ldr	r3, [pc, #416]	; (800251c <vKey_Action+0xb08>)
 800237a:	741a      	strb	r2, [r3, #16]
				break;
 800237c:	e08c      	b.n	8002498 <vKey_Action+0xa84>
						Run = Welder_Run;
 800237e:	2303      	movs	r3, #3
 8002380:	733b      	strb	r3, [r7, #12]
						WelderUnit.State |= WELDER_MOVE_ENABLE; // Разрешить движение каретки
 8002382:	4b66      	ldr	r3, [pc, #408]	; (800251c <vKey_Action+0xb08>)
 8002384:	7c1b      	ldrb	r3, [r3, #16]
 8002386:	f043 0320 	orr.w	r3, r3, #32
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b63      	ldr	r3, [pc, #396]	; (800251c <vKey_Action+0xb08>)
 800238e:	741a      	strb	r2, [r3, #16]
						xQueueSendToBack(qWelderRun, &Run, 0 ); // Начать варку в автоматическом режиме
 8002390:	4b68      	ldr	r3, [pc, #416]	; (8002534 <vKey_Action+0xb20>)
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	f107 010c 	add.w	r1, r7, #12
 8002398:	2300      	movs	r3, #0
 800239a:	2200      	movs	r2, #0
 800239c:	f005 f968 	bl	8007670 <xQueueGenericSend>
				break;
 80023a0:	e07a      	b.n	8002498 <vKey_Action+0xa84>
				Run = Welder_Run;
 80023a2:	2303      	movs	r3, #3
 80023a4:	733b      	strb	r3, [r7, #12]
				if ((WelderUnit.State & 0x01)  ) // Если каретка уже движеся, то остановать её (остановка варки)
 80023a6:	4b5d      	ldr	r3, [pc, #372]	; (800251c <vKey_Action+0xb08>)
 80023a8:	7c1b      	ldrb	r3, [r3, #16]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d046      	beq.n	8002440 <vKey_Action+0xa2c>
					WelderUnit.State &= ~WELDER_MOVE_ENABLE; // Заппретить движение каретки
 80023b2:	4b5a      	ldr	r3, [pc, #360]	; (800251c <vKey_Action+0xb08>)
 80023b4:	7c1b      	ldrb	r3, [r3, #16]
 80023b6:	f023 0320 	bic.w	r3, r3, #32
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b57      	ldr	r3, [pc, #348]	; (800251c <vKey_Action+0xb08>)
 80023be:	741a      	strb	r2, [r3, #16]
					SYNC_ARC_OFF // Прекращение подачи дуги
 80023c0:	2200      	movs	r2, #0
 80023c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023c6:	4858      	ldr	r0, [pc, #352]	; (8002528 <vKey_Action+0xb14>)
 80023c8:	f002 fc41 	bl	8004c4e <HAL_GPIO_WritePin>
					WELDER_HEAD_UP // Поднять головку
 80023cc:	2200      	movs	r2, #0
 80023ce:	2106      	movs	r1, #6
 80023d0:	4856      	ldr	r0, [pc, #344]	; (800252c <vKey_Action+0xb18>)
 80023d2:	f002 fc3c 	bl	8004c4e <HAL_GPIO_WritePin>
					WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 80023d6:	4b51      	ldr	r3, [pc, #324]	; (800251c <vKey_Action+0xb08>)
 80023d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023dc:	f043 0308 	orr.w	r3, r3, #8
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b4e      	ldr	r3, [pc, #312]	; (800251c <vKey_Action+0xb08>)
 80023e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 80023e8:	4b4c      	ldr	r3, [pc, #304]	; (800251c <vKey_Action+0xb08>)
 80023ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023ee:	f023 0304 	bic.w	r3, r3, #4
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	4b49      	ldr	r3, [pc, #292]	; (800251c <vKey_Action+0xb08>)
 80023f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.vWelder_Run_level = 8; // Остановка варки
 80023fa:	4b48      	ldr	r3, [pc, #288]	; (800251c <vKey_Action+0xb08>)
 80023fc:	2208      	movs	r2, #8
 80023fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					Run = Carriage_Done;
 8002402:	2302      	movs	r3, #2
 8002404:	733b      	strb	r3, [r7, #12]
					xQueueSendToBack(qGoToResponse, &Run, 0 );
 8002406:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <vKey_Action+0xb1c>)
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	f107 010c 	add.w	r1, r7, #12
 800240e:	2300      	movs	r3, #0
 8002410:	2200      	movs	r2, #0
 8002412:	f005 f92d 	bl	8007670 <xQueueGenericSend>
					vTaskDelay(10);
 8002416:	200a      	movs	r0, #10
 8002418:	f005 ff70 	bl	80082fc <vTaskDelay>
					xQueueSendToBack(qGoToResponse, &Run, 0 );
 800241c:	4b44      	ldr	r3, [pc, #272]	; (8002530 <vKey_Action+0xb1c>)
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	f107 010c 	add.w	r1, r7, #12
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	f005 f922 	bl	8007670 <xQueueGenericSend>
					vTaskDelay(10);
 800242c:	200a      	movs	r0, #10
 800242e:	f005 ff65 	bl	80082fc <vTaskDelay>
					xQueueReset(qGoToResponse); // Сброс очереди в исходное состояние
 8002432:	4b3f      	ldr	r3, [pc, #252]	; (8002530 <vKey_Action+0xb1c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f005 f837 	bl	80074ac <xQueueGenericReset>
				break;
 800243e:	e02a      	b.n	8002496 <vKey_Action+0xa82>
					if (!(WelderUnit.State & WELDER_MOVE_ENABLE) ) // Если движение было запрещено (остановлено), то просто разрешить движение каретки
 8002440:	4b36      	ldr	r3, [pc, #216]	; (800251c <vKey_Action+0xb08>)
 8002442:	7c1b      	ldrb	r3, [r3, #16]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d107      	bne.n	800245c <vKey_Action+0xa48>
					WelderUnit.State |= WELDER_MOVE_ENABLE; // Разрешить движение каретки
 800244c:	4b33      	ldr	r3, [pc, #204]	; (800251c <vKey_Action+0xb08>)
 800244e:	7c1b      	ldrb	r3, [r3, #16]
 8002450:	f043 0320 	orr.w	r3, r3, #32
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4b31      	ldr	r3, [pc, #196]	; (800251c <vKey_Action+0xb08>)
 8002458:	741a      	strb	r2, [r3, #16]
				break;
 800245a:	e01c      	b.n	8002496 <vKey_Action+0xa82>
						if( ((WelderUnit.HolderState & WELDER_STATE_HOLDER_L)) && ((WelderUnit.HolderState & WELDER_STATE_HOLDER_R))) // Если обе части держателя затовки зажаты
 800245c:	4b2f      	ldr	r3, [pc, #188]	; (800251c <vKey_Action+0xb08>)
 800245e:	7c5b      	ldrb	r3, [r3, #17]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d016      	beq.n	8002496 <vKey_Action+0xa82>
 8002468:	4b2c      	ldr	r3, [pc, #176]	; (800251c <vKey_Action+0xb08>)
 800246a:	7c5b      	ldrb	r3, [r3, #17]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d010      	beq.n	8002496 <vKey_Action+0xa82>
						Run = Welder_Run;
 8002474:	2303      	movs	r3, #3
 8002476:	733b      	strb	r3, [r7, #12]
						WelderUnit.State |= WELDER_MOVE_ENABLE; // Разрешить движение каретки
 8002478:	4b28      	ldr	r3, [pc, #160]	; (800251c <vKey_Action+0xb08>)
 800247a:	7c1b      	ldrb	r3, [r3, #16]
 800247c:	f043 0320 	orr.w	r3, r3, #32
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b26      	ldr	r3, [pc, #152]	; (800251c <vKey_Action+0xb08>)
 8002484:	741a      	strb	r2, [r3, #16]
						xQueueSendToBack(qWelderRun, &Run, 0 ); // Начать варку в автоматическом режиме
 8002486:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <vKey_Action+0xb20>)
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	f107 010c 	add.w	r1, r7, #12
 800248e:	2300      	movs	r3, #0
 8002490:	2200      	movs	r2, #0
 8002492:	f005 f8ed 	bl	8007670 <xQueueGenericSend>
				break;
 8002496:	bf00      	nop
			break;
 8002498:	e07a      	b.n	8002590 <vKey_Action+0xb7c>
		}

		case press_long_StartStop:
		{
			WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <vKey_Action+0xb08>)
 800249c:	885b      	ldrh	r3, [r3, #2]
 800249e:	3314      	adds	r3, #20
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	4b1e      	ldr	r3, [pc, #120]	; (800251c <vKey_Action+0xb08>)
 80024a4:	805a      	strh	r2, [r3, #2]
//			Key.StartStop_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
//			Key.StartStop_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
			break;
 80024a6:	e074      	b.n	8002592 <vKey_Action+0xb7e>

		// *********************************************************Комбинации клавишь*********************************************************

		case press_short_Program_L_and_R:
		{
			beep_mode_send = beep_long;
 80024a8:	2305      	movs	r3, #5
 80024aa:	73bb      	strb	r3, [r7, #14]
			xQueueSendToBack( qBeepMode, &beep_mode_send , 0 ); // Звук нажатия
 80024ac:	4b22      	ldr	r3, [pc, #136]	; (8002538 <vKey_Action+0xb24>)
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	f107 010e 	add.w	r1, r7, #14
 80024b4:	2300      	movs	r3, #0
 80024b6:	2200      	movs	r2, #0
 80024b8:	f005 f8da 	bl	8007670 <xQueueGenericSend>
			SaveProgramToFlash2();
 80024bc:	f7fe fe6c 	bl	8001198 <SaveProgramToFlash2>
			beep_mode_send = beep_click;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73bb      	strb	r3, [r7, #14]
			break;
 80024c4:	e065      	b.n	8002592 <vKey_Action+0xb7e>
			break;
 80024c6:	bf00      	nop
 80024c8:	f7ff baae 	b.w	8001a28 <vKey_Action+0x14>
			break;
 80024cc:	bf00      	nop
 80024ce:	f7ff baab 	b.w	8001a28 <vKey_Action+0x14>
			break;
 80024d2:	bf00      	nop
 80024d4:	f7ff baa8 	b.w	8001a28 <vKey_Action+0x14>
			break;
 80024d8:	bf00      	nop
 80024da:	f7ff baa5 	b.w	8001a28 <vKey_Action+0x14>
			break;
 80024de:	bf00      	nop
 80024e0:	f7ff baa2 	b.w	8001a28 <vKey_Action+0x14>
			break;
 80024e4:	bf00      	nop
 80024e6:	f7ff ba9f 	b.w	8001a28 <vKey_Action+0x14>
			break;
 80024ea:	bf00      	nop
 80024ec:	f7ff ba9c 	b.w	8001a28 <vKey_Action+0x14>
			break;
 80024f0:	bf00      	nop
 80024f2:	f7ff ba99 	b.w	8001a28 <vKey_Action+0x14>
			break;
 80024f6:	bf00      	nop
 80024f8:	f7ff ba96 	b.w	8001a28 <vKey_Action+0x14>
			break;
 80024fc:	bf00      	nop
 80024fe:	f7ff ba93 	b.w	8001a28 <vKey_Action+0x14>
			break;
 8002502:	bf00      	nop
 8002504:	f7ff ba90 	b.w	8001a28 <vKey_Action+0x14>
			break;
 8002508:	bf00      	nop
 800250a:	f7ff ba8d 	b.w	8001a28 <vKey_Action+0x14>
			break;
 800250e:	bf00      	nop
 8002510:	f7ff ba8a 	b.w	8001a28 <vKey_Action+0x14>
			break;
 8002514:	bf00      	nop
 8002516:	f7ff ba87 	b.w	8001a28 <vKey_Action+0x14>
 800251a:	bf00      	nop
 800251c:	2000353c 	.word	0x2000353c
 8002520:	20003dc4 	.word	0x20003dc4
 8002524:	20003d8c 	.word	0x20003d8c
 8002528:	40010800 	.word	0x40010800
 800252c:	40011000 	.word	0x40011000
 8002530:	20003d80 	.word	0x20003d80
 8002534:	20003d88 	.word	0x20003d88
 8002538:	20003538 	.word	0x20003538
			break;
 800253c:	bf00      	nop
 800253e:	f7ff ba73 	b.w	8001a28 <vKey_Action+0x14>
			break;
 8002542:	bf00      	nop
 8002544:	f7ff ba70 	b.w	8001a28 <vKey_Action+0x14>
			break;
 8002548:	bf00      	nop
 800254a:	f7ff ba6d 	b.w	8001a28 <vKey_Action+0x14>
			break;
 800254e:	bf00      	nop
 8002550:	f7ff ba6a 	b.w	8001a28 <vKey_Action+0x14>
			break;
 8002554:	bf00      	nop
 8002556:	f7ff ba67 	b.w	8001a28 <vKey_Action+0x14>
			break;
 800255a:	bf00      	nop
 800255c:	f7ff ba64 	b.w	8001a28 <vKey_Action+0x14>
			break;
 8002560:	bf00      	nop
 8002562:	f7ff ba61 	b.w	8001a28 <vKey_Action+0x14>
			break;
 8002566:	bf00      	nop
 8002568:	f7ff ba5e 	b.w	8001a28 <vKey_Action+0x14>
			break;
 800256c:	bf00      	nop
 800256e:	f7ff ba5b 	b.w	8001a28 <vKey_Action+0x14>
			break;
 8002572:	bf00      	nop
 8002574:	f7ff ba58 	b.w	8001a28 <vKey_Action+0x14>
					break;
 8002578:	bf00      	nop
 800257a:	f7ff ba55 	b.w	8001a28 <vKey_Action+0x14>
					break;
 800257e:	bf00      	nop
 8002580:	f7ff ba52 	b.w	8001a28 <vKey_Action+0x14>
					break;
 8002584:	bf00      	nop
 8002586:	f7ff ba4f 	b.w	8001a28 <vKey_Action+0x14>
			break;
 800258a:	bf00      	nop
 800258c:	f7ff ba4c 	b.w	8001a28 <vKey_Action+0x14>
			break;
 8002590:	bf00      	nop
		xQueueReceive(qKeyPress, &KeyPressed, portMAX_DELAY ); // Ждать нажатия кнопки
 8002592:	f7ff ba49 	b.w	8001a28 <vKey_Action+0x14>
 8002596:	bf00      	nop

08002598 <vWelder_Run>:
	vTaskDelete(NULL);

}

void vWelder_Run(void *pvParameters)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

	uint16_t tempSpeed; // Для временного хранения значения скорости

	for(;;)
	{
		xQueueReceive(qWelderRun, &lReceivedValue, portMAX_DELAY ); // Ожидание команды на начало варки
 80025a0:	4ba7      	ldr	r3, [pc, #668]	; (8002840 <vWelder_Run+0x2a8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f107 010c 	add.w	r1, r7, #12
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	4618      	mov	r0, r3
 80025ae:	f005 f9b7 	bl	8007920 <xQueueReceive>

		if (lReceivedValue == Welder_Run && (WelderUnit.State & WELDER_MOVE_ENABLE) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) ) // Если пришла команда на начло калибровки и движение каретки разрешено и задняя дверца закрыта
 80025b2:	7b3b      	ldrb	r3, [r7, #12]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d1f3      	bne.n	80025a0 <vWelder_Run+0x8>
 80025b8:	4ba2      	ldr	r3, [pc, #648]	; (8002844 <vWelder_Run+0x2ac>)
 80025ba:	7c1b      	ldrb	r3, [r3, #16]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ed      	beq.n	80025a0 <vWelder_Run+0x8>
 80025c4:	4b9f      	ldr	r3, [pc, #636]	; (8002844 <vWelder_Run+0x2ac>)
 80025c6:	7c1b      	ldrb	r3, [r3, #16]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0e7      	beq.n	80025a0 <vWelder_Run+0x8>
		{
			beep = beep_1short;
 80025d0:	2302      	movs	r3, #2
 80025d2:	72fb      	strb	r3, [r7, #11]
			xQueueSendToBack( qBeepMode, &beep, 0 ); // Звук нажатия
 80025d4:	4b9c      	ldr	r3, [pc, #624]	; (8002848 <vWelder_Run+0x2b0>)
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	f107 010b 	add.w	r1, r7, #11
 80025dc:	2300      	movs	r3, #0
 80025de:	2200      	movs	r2, #0
 80025e0:	f005 f846 	bl	8007670 <xQueueGenericSend>

		if (WelderUnit.Position != WelderUnit.Xs) // Если текущая позиция каретки не равна стартовой позиции, то занять её
 80025e4:	4b97      	ldr	r3, [pc, #604]	; (8002844 <vWelder_Run+0x2ac>)
 80025e6:	889a      	ldrh	r2, [r3, #4]
 80025e8:	4b96      	ldr	r3, [pc, #600]	; (8002844 <vWelder_Run+0x2ac>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d031      	beq.n	8002654 <vWelder_Run+0xbc>
		{
			if (WelderUnit.vWelder_Run_level != 8)
 80025f0:	4b94      	ldr	r3, [pc, #592]	; (8002844 <vWelder_Run+0x2ac>)
 80025f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d02c      	beq.n	8002654 <vWelder_Run+0xbc>
			{
			WelderUnit.vWelder_Run_level = 01; // Движение каретки к точке начла варки
 80025fa:	4b92      	ldr	r3, [pc, #584]	; (8002844 <vWelder_Run+0x2ac>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			tempSpeed  = WelderUnit.Speed;
 8002602:	4b90      	ldr	r3, [pc, #576]	; (8002844 <vWelder_Run+0x2ac>)
 8002604:	88db      	ldrh	r3, [r3, #6]
 8002606:	81fb      	strh	r3, [r7, #14]
			WelderUnit.Speed = CALIBRATION_PHASE_SPEED_1;
 8002608:	4b8e      	ldr	r3, [pc, #568]	; (8002844 <vWelder_Run+0x2ac>)
 800260a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800260e:	80da      	strh	r2, [r3, #6]
			Carriage_cmd = Cmd_CarriageGoTo;
 8002610:	2301      	movs	r3, #1
 8002612:	737b      	strb	r3, [r7, #13]
			WelderUnit.GoTo = WelderUnit.Xs;
 8002614:	4b8b      	ldr	r3, [pc, #556]	; (8002844 <vWelder_Run+0x2ac>)
 8002616:	881a      	ldrh	r2, [r3, #0]
 8002618:	4b8a      	ldr	r3, [pc, #552]	; (8002844 <vWelder_Run+0x2ac>)
 800261a:	811a      	strh	r2, [r3, #8]
			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идти к
 800261c:	4b8b      	ldr	r3, [pc, #556]	; (800284c <vWelder_Run+0x2b4>)
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	f107 010d 	add.w	r1, r7, #13
 8002624:	2300      	movs	r3, #0
 8002626:	2200      	movs	r2, #0
 8002628:	f005 f822 	bl	8007670 <xQueueGenericSend>

			xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Без этого не работает. В очереди откуда то берутся данные
 800262c:	4b88      	ldr	r3, [pc, #544]	; (8002850 <vWelder_Run+0x2b8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f107 010c 	add.w	r1, r7, #12
 8002634:	2200      	movs	r2, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f005 f972 	bl	8007920 <xQueueReceive>
			xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 800263c:	4b84      	ldr	r3, [pc, #528]	; (8002850 <vWelder_Run+0x2b8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f107 010c 	add.w	r1, r7, #12
 8002644:	f04f 32ff 	mov.w	r2, #4294967295
 8002648:	4618      	mov	r0, r3
 800264a:	f005 f969 	bl	8007920 <xQueueReceive>
			WelderUnit.Speed = tempSpeed;
 800264e:	4a7d      	ldr	r2, [pc, #500]	; (8002844 <vWelder_Run+0x2ac>)
 8002650:	89fb      	ldrh	r3, [r7, #14]
 8002652:	80d3      	strh	r3, [r2, #6]
			}
		}

		if ((WelderUnit.Position == WelderUnit.Xs) && (WelderUnit.State & WELDER_MOVE_ENABLE)) // Если каретка на заданной позиции и движение каретки разрешено
 8002654:	4b7b      	ldr	r3, [pc, #492]	; (8002844 <vWelder_Run+0x2ac>)
 8002656:	889a      	ldrh	r2, [r3, #4]
 8002658:	4b7a      	ldr	r3, [pc, #488]	; (8002844 <vWelder_Run+0x2ac>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d19f      	bne.n	80025a0 <vWelder_Run+0x8>
 8002660:	4b78      	ldr	r3, [pc, #480]	; (8002844 <vWelder_Run+0x2ac>)
 8002662:	7c1b      	ldrb	r3, [r3, #16]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d099      	beq.n	80025a0 <vWelder_Run+0x8>
		{

		if (WelderUnit.vWelder_Run_level != 8)
 800266c:	4b75      	ldr	r3, [pc, #468]	; (8002844 <vWelder_Run+0x2ac>)
 800266e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002672:	2b08      	cmp	r3, #8
 8002674:	d01e      	beq.n	80026b4 <vWelder_Run+0x11c>
		{
		WelderUnit.vWelder_Run_level = 02; // Ожидание опускания сварочной головки
 8002676:	4b73      	ldr	r3, [pc, #460]	; (8002844 <vWelder_Run+0x2ac>)
 8002678:	2202      	movs	r2, #2
 800267a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		WELDER_HEAD_DOWN // Опустить головку
 800267e:	2201      	movs	r2, #1
 8002680:	2106      	movs	r1, #6
 8002682:	4874      	ldr	r0, [pc, #464]	; (8002854 <vWelder_Run+0x2bc>)
 8002684:	f002 fae3 	bl	8004c4e <HAL_GPIO_WritePin>
		WelderUnit.IndicatorPanel.LEDsState |= LED_DOWN; // Индикация опущенной сварочной головки
 8002688:	4b6e      	ldr	r3, [pc, #440]	; (8002844 <vWelder_Run+0x2ac>)
 800268a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	b2da      	uxtb	r2, r3
 8002694:	4b6b      	ldr	r3, [pc, #428]	; (8002844 <vWelder_Run+0x2ac>)
 8002696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		vTaskDelay(500 / portTICK_RATE_MS); // Ожидание опускания головки
 800269a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800269e:	f005 fe2d 	bl	80082fc <vTaskDelay>
		WelderUnit.IndicatorPanel.LEDsState &= ~LED_UP;
 80026a2:	4b68      	ldr	r3, [pc, #416]	; (8002844 <vWelder_Run+0x2ac>)
 80026a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026a8:	f023 0308 	bic.w	r3, r3, #8
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4b65      	ldr	r3, [pc, #404]	; (8002844 <vWelder_Run+0x2ac>)
 80026b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}

		if (WelderUnit.vWelder_Run_level != 8)
 80026b4:	4b63      	ldr	r3, [pc, #396]	; (8002844 <vWelder_Run+0x2ac>)
 80026b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d012      	beq.n	80026e4 <vWelder_Run+0x14c>
		{
		WelderUnit.vWelder_Run_level = 03;
 80026be:	4b61      	ldr	r3, [pc, #388]	; (8002844 <vWelder_Run+0x2ac>)
 80026c0:	2203      	movs	r2, #3
 80026c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		vTaskDelay(WelderUnit.Delay_s * 100 / portTICK_RATE_MS); // Выдержка времени для заполнения точки начала сварки аргоном.
 80026c6:	4b5f      	ldr	r3, [pc, #380]	; (8002844 <vWelder_Run+0x2ac>)
 80026c8:	7a9b      	ldrb	r3, [r3, #10]
 80026ca:	461a      	mov	r2, r3
 80026cc:	2364      	movs	r3, #100	; 0x64
 80026ce:	fb03 f302 	mul.w	r3, r3, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f005 fe12 	bl	80082fc <vTaskDelay>
		SYNC_ARC_ON // Подача дуги
 80026d8:	2201      	movs	r2, #1
 80026da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026de:	485e      	ldr	r0, [pc, #376]	; (8002858 <vWelder_Run+0x2c0>)
 80026e0:	f002 fab5 	bl	8004c4e <HAL_GPIO_WritePin>
		}

		if (WelderUnit.vWelder_Run_level != 8)
 80026e4:	4b57      	ldr	r3, [pc, #348]	; (8002844 <vWelder_Run+0x2ac>)
 80026e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d022      	beq.n	8002734 <vWelder_Run+0x19c>
		{
		WelderUnit.vWelder_Run_level = 04; // Движение к точке окончания варки
 80026ee:	4b55      	ldr	r3, [pc, #340]	; (8002844 <vWelder_Run+0x2ac>)
 80026f0:	2204      	movs	r2, #4
 80026f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		WelderUnit.GoTo = WelderUnit.Xf; // Указание точки осановки головки
 80026f6:	4b53      	ldr	r3, [pc, #332]	; (8002844 <vWelder_Run+0x2ac>)
 80026f8:	885a      	ldrh	r2, [r3, #2]
 80026fa:	4b52      	ldr	r3, [pc, #328]	; (8002844 <vWelder_Run+0x2ac>)
 80026fc:	811a      	strh	r2, [r3, #8]
		Carriage_cmd = Cmd_CarriageGoTo; // Команда на начала движение каретки
 80026fe:	2301      	movs	r3, #1
 8002700:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идти к
 8002702:	4b52      	ldr	r3, [pc, #328]	; (800284c <vWelder_Run+0x2b4>)
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	f107 010d 	add.w	r1, r7, #13
 800270a:	2300      	movs	r3, #0
 800270c:	2200      	movs	r2, #0
 800270e:	f004 ffaf 	bl	8007670 <xQueueGenericSend>

		xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Без этого не работает. В очереди откуда то берутся данные
 8002712:	4b4f      	ldr	r3, [pc, #316]	; (8002850 <vWelder_Run+0x2b8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f107 010c 	add.w	r1, r7, #12
 800271a:	2200      	movs	r2, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f005 f8ff 	bl	8007920 <xQueueReceive>
		xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 8002722:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <vWelder_Run+0x2b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f107 010c 	add.w	r1, r7, #12
 800272a:	f04f 32ff 	mov.w	r2, #4294967295
 800272e:	4618      	mov	r0, r3
 8002730:	f005 f8f6 	bl	8007920 <xQueueReceive>
		}

		if (WelderUnit.vWelder_Run_level != 8)
 8002734:	4b43      	ldr	r3, [pc, #268]	; (8002844 <vWelder_Run+0x2ac>)
 8002736:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800273a:	2b08      	cmp	r3, #8
 800273c:	d01c      	beq.n	8002778 <vWelder_Run+0x1e0>
		{
		WelderUnit.vWelder_Run_level = 05; // Выдерживание времеи конца варки
 800273e:	4b41      	ldr	r3, [pc, #260]	; (8002844 <vWelder_Run+0x2ac>)
 8002740:	2205      	movs	r2, #5
 8002742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		SYNC_ARC_OFF // Прекращение подачи дуги
 8002746:	2200      	movs	r2, #0
 8002748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800274c:	4842      	ldr	r0, [pc, #264]	; (8002858 <vWelder_Run+0x2c0>)
 800274e:	f002 fa7e 	bl	8004c4e <HAL_GPIO_WritePin>
		vTaskDelay(WelderUnit.Delay_f * 100 / portTICK_RATE_MS); // Выдержка времени для заполнения точки останова сварки аргоном.
 8002752:	4b3c      	ldr	r3, [pc, #240]	; (8002844 <vWelder_Run+0x2ac>)
 8002754:	7adb      	ldrb	r3, [r3, #11]
 8002756:	461a      	mov	r2, r3
 8002758:	2364      	movs	r3, #100	; 0x64
 800275a:	fb03 f302 	mul.w	r3, r3, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f005 fdcc 	bl	80082fc <vTaskDelay>

		beep = beep_3short;
 8002764:	2304      	movs	r3, #4
 8002766:	72fb      	strb	r3, [r7, #11]
		xQueueSendToBack( qBeepMode, &beep, 0 ); // Звук окончания варки
 8002768:	4b37      	ldr	r3, [pc, #220]	; (8002848 <vWelder_Run+0x2b0>)
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	f107 010b 	add.w	r1, r7, #11
 8002770:	2300      	movs	r3, #0
 8002772:	2200      	movs	r2, #0
 8002774:	f004 ff7c 	bl	8007670 <xQueueGenericSend>
		}

		if (WelderUnit.vWelder_Run_level != 8)
 8002778:	4b32      	ldr	r3, [pc, #200]	; (8002844 <vWelder_Run+0x2ac>)
 800277a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800277e:	2b08      	cmp	r3, #8
 8002780:	d01e      	beq.n	80027c0 <vWelder_Run+0x228>
		{
		WelderUnit.vWelder_Run_level = 06; // Ожидание подъема головки
 8002782:	4b30      	ldr	r3, [pc, #192]	; (8002844 <vWelder_Run+0x2ac>)
 8002784:	2206      	movs	r2, #6
 8002786:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		WELDER_HEAD_UP // Поднять головку
 800278a:	2200      	movs	r2, #0
 800278c:	2106      	movs	r1, #6
 800278e:	4831      	ldr	r0, [pc, #196]	; (8002854 <vWelder_Run+0x2bc>)
 8002790:	f002 fa5d 	bl	8004c4e <HAL_GPIO_WritePin>

		WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 8002794:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <vWelder_Run+0x2ac>)
 8002796:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800279a:	f043 0308 	orr.w	r3, r3, #8
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	4b28      	ldr	r3, [pc, #160]	; (8002844 <vWelder_Run+0x2ac>)
 80027a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		vTaskDelay(500 / portTICK_RATE_MS); // Ожидание подъема головки
 80027a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027aa:	f005 fda7 	bl	80082fc <vTaskDelay>
		WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <vWelder_Run+0x2ac>)
 80027b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4b22      	ldr	r3, [pc, #136]	; (8002844 <vWelder_Run+0x2ac>)
 80027bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}

		if (WelderUnit.vWelder_Run_level != 8)
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <vWelder_Run+0x2ac>)
 80027c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d02f      	beq.n	800282a <vWelder_Run+0x292>
		{
		// Откат каретки
		WelderUnit.vWelder_Run_level = 07;
 80027ca:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <vWelder_Run+0x2ac>)
 80027cc:	2207      	movs	r2, #7
 80027ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		tempSpeed  = WelderUnit.Speed;
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <vWelder_Run+0x2ac>)
 80027d4:	88db      	ldrh	r3, [r3, #6]
 80027d6:	81fb      	strh	r3, [r7, #14]

			if (WelderUnit.Position > KICKBACK)
 80027d8:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <vWelder_Run+0x2ac>)
 80027da:	889b      	ldrh	r3, [r3, #4]
 80027dc:	2bc8      	cmp	r3, #200	; 0xc8
 80027de:	d907      	bls.n	80027f0 <vWelder_Run+0x258>
			{
				WelderUnit.Speed =  CALIBRATION_PHASE_SPEED_1;
 80027e0:	4b18      	ldr	r3, [pc, #96]	; (8002844 <vWelder_Run+0x2ac>)
 80027e2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80027e6:	80da      	strh	r2, [r3, #6]
				WelderUnit.GoTo = 0;
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <vWelder_Run+0x2ac>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	811a      	strh	r2, [r3, #8]
 80027ee:	e006      	b.n	80027fe <vWelder_Run+0x266>
			}
			else
			{
				WelderUnit.Speed =  CALIBRATION_PHASE_SPEED_1;
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <vWelder_Run+0x2ac>)
 80027f2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80027f6:	80da      	strh	r2, [r3, #6]
				WelderUnit.GoTo = 0;
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <vWelder_Run+0x2ac>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	811a      	strh	r2, [r3, #8]
			}

			Carriage_cmd = Cmd_CarriageGoTo;
 80027fe:	2301      	movs	r3, #1
 8002800:	737b      	strb	r3, [r7, #13]
			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <vWelder_Run+0x2b4>)
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	f107 010d 	add.w	r1, r7, #13
 800280a:	2300      	movs	r3, #0
 800280c:	2200      	movs	r2, #0
 800280e:	f004 ff2f 	bl	8007670 <xQueueGenericSend>
			xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <vWelder_Run+0x2b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f107 010c 	add.w	r1, r7, #12
 800281a:	f04f 32ff 	mov.w	r2, #4294967295
 800281e:	4618      	mov	r0, r3
 8002820:	f005 f87e 	bl	8007920 <xQueueReceive>
			WelderUnit.Speed = tempSpeed;
 8002824:	4a07      	ldr	r2, [pc, #28]	; (8002844 <vWelder_Run+0x2ac>)
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	80d3      	strh	r3, [r2, #6]
		}

		if (WelderUnit.vWelder_Run_level == 8)
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <vWelder_Run+0x2ac>)
 800282c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002830:	2b08      	cmp	r3, #8
 8002832:	f47f aeb5 	bne.w	80025a0 <vWelder_Run+0x8>
		{
			WelderUnit.vWelder_Run_level = 0;
 8002836:	4b03      	ldr	r3, [pc, #12]	; (8002844 <vWelder_Run+0x2ac>)
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		xQueueReceive(qWelderRun, &lReceivedValue, portMAX_DELAY ); // Ожидание команды на начало варки
 800283e:	e6af      	b.n	80025a0 <vWelder_Run+0x8>
 8002840:	20003d88 	.word	0x20003d88
 8002844:	2000353c 	.word	0x2000353c
 8002848:	20003538 	.word	0x20003538
 800284c:	20003d94 	.word	0x20003d94
 8002850:	20003d80 	.word	0x20003d80
 8002854:	40011000 	.word	0x40011000
 8002858:	40010800 	.word	0x40010800

0800285c <vCarriage_Calibration>:
}



void vCarriage_Calibration(void *pvParameters)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	uint8_t lReceivedValue;


	for(;;)
	{
		xQueueReceive(qWelderCalibrated, &lReceivedValue, portMAX_DELAY ); // Ждать команды на начало калибровки
 8002864:	4b78      	ldr	r3, [pc, #480]	; (8002a48 <vCarriage_Calibration+0x1ec>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f107 010f 	add.w	r1, r7, #15
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	4618      	mov	r0, r3
 8002872:	f005 f855 	bl	8007920 <xQueueReceive>

		if (lReceivedValue == Calibrated && (WelderUnit.State & 0x10) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) && ((WelderUnit.State & WELDER_CLIBRATION_PROCESS))) // Если пришла команда на калибровку и движение каретки разрешено и задняя дверца закрыта
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b04      	cmp	r3, #4
 800287a:	d1f3      	bne.n	8002864 <vCarriage_Calibration+0x8>
 800287c:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 800287e:	7c1b      	ldrb	r3, [r3, #16]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ed      	beq.n	8002864 <vCarriage_Calibration+0x8>
 8002888:	4b70      	ldr	r3, [pc, #448]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 800288a:	7c1b      	ldrb	r3, [r3, #16]
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0e7      	beq.n	8002864 <vCarriage_Calibration+0x8>
 8002894:	4b6d      	ldr	r3, [pc, #436]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 8002896:	7c1b      	ldrb	r3, [r3, #16]
 8002898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0e1      	beq.n	8002864 <vCarriage_Calibration+0x8>
		{																																										// и если калибровка разрешена
			WelderUnit.Calibration_level = 01; // Первая фаза калибровки - движение каретки к концевуику с большной скоростью
 80028a0:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			WELDER_HEAD_UP // Поднять головку
 80028a8:	2200      	movs	r2, #0
 80028aa:	2106      	movs	r1, #6
 80028ac:	4868      	ldr	r0, [pc, #416]	; (8002a50 <vCarriage_Calibration+0x1f4>)
 80028ae:	f002 f9ce 	bl	8004c4e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS); // Ожидание подъема головки
 80028b2:	2064      	movs	r0, #100	; 0x64
 80028b4:	f005 fd22 	bl	80082fc <vTaskDelay>

			WelderUnit.IndicatorPanel.LEDsState &= ~LED_PARKING; // индикации калибровки
 80028b8:	4b64      	ldr	r3, [pc, #400]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80028ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028be:	f023 0302 	bic.w	r3, r3, #2
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b61      	ldr	r3, [pc, #388]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80028c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


			WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 80028ca:	4b60      	ldr	r3, [pc, #384]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80028cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028d0:	f043 0308 	orr.w	r3, r3, #8
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b5d      	ldr	r3, [pc, #372]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80028d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 80028dc:	4b5b      	ldr	r3, [pc, #364]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80028de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028e2:	f023 0304 	bic.w	r3, r3, #4
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b58      	ldr	r3, [pc, #352]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80028ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

			Carriage_Move(CALIBRATION_PHASE_SPEED_1, 0, 1); // Начать перемещение каретки в сторону концевика
 80028ee:	2201      	movs	r2, #1
 80028f0:	2100      	movs	r1, #0
 80028f2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80028f6:	f7fe fac7 	bl	8000e88 <Carriage_Move>

			// Когда концевик замкнулся выдается семофор, что коретка дошла до самого начала

			// По какой-то причине при первой попытке взять 2-й семафор он берется (даже если не выдан). Потому семафор берется дважды
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY ); // Попытка взять семафор.
 80028fa:	4b56      	ldr	r3, [pc, #344]	; (8002a54 <vCarriage_Calibration+0x1f8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002902:	4618      	mov	r0, r3
 8002904:	f005 f8ae 	bl	8007a64 <xQueueSemaphoreTake>
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
 8002908:	4b52      	ldr	r3, [pc, #328]	; (8002a54 <vCarriage_Calibration+0x1f8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f04f 31ff 	mov.w	r1, #4294967295
 8002910:	4618      	mov	r0, r3
 8002912:	f005 f8a7 	bl	8007a64 <xQueueSemaphoreTake>

			Carriage_Move(0, 0, 1); // Стоп
 8002916:	2201      	movs	r2, #1
 8002918:	2100      	movs	r1, #0
 800291a:	2000      	movs	r0, #0
 800291c:	f7fe fab4 	bl	8000e88 <Carriage_Move>

				if ((WelderUnit.State & 0x10) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) && ((WelderUnit.State & WELDER_CLIBRATION_PROCESS)) ) // Если движение каретки разрешено и задняя дверца закрыта
 8002920:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 8002922:	7c1b      	ldrb	r3, [r3, #16]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d09b      	beq.n	8002864 <vCarriage_Calibration+0x8>
 800292c:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 800292e:	7c1b      	ldrb	r3, [r3, #16]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	d095      	beq.n	8002864 <vCarriage_Calibration+0x8>
 8002938:	4b44      	ldr	r3, [pc, #272]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 800293a:	7c1b      	ldrb	r3, [r3, #16]
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d08f      	beq.n	8002864 <vCarriage_Calibration+0x8>
				{
					WelderUnit.Calibration_level = 02; // Вторая фаза калибровки - откат каретки от концевика в течении некторого времени
 8002944:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 8002946:	2202      	movs	r2, #2
 8002948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					Carriage_Move(CALIBRATION_PHASE_SPEED_2, 1, 1); // Отъехать немного назад
 800294c:	2201      	movs	r2, #1
 800294e:	2101      	movs	r1, #1
 8002950:	20c8      	movs	r0, #200	; 0xc8
 8002952:	f7fe fa99 	bl	8000e88 <Carriage_Move>
					vTaskDelay(250 / portTICK_RATE_MS);
 8002956:	20fa      	movs	r0, #250	; 0xfa
 8002958:	f005 fcd0 	bl	80082fc <vTaskDelay>

					Carriage_Move(0, 0, 1); // Стоп
 800295c:	2201      	movs	r2, #1
 800295e:	2100      	movs	r1, #0
 8002960:	2000      	movs	r0, #0
 8002962:	f7fe fa91 	bl	8000e88 <Carriage_Move>

					vTaskDelay(100/ portTICK_RATE_MS);
 8002966:	2064      	movs	r0, #100	; 0x64
 8002968:	f005 fcc8 	bl	80082fc <vTaskDelay>

					if (WelderUnit.Calibration_level == 02) // Если фаза калибровки 2 (а не 05, что значит остановить калибровку)
 800296c:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 800296e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002972:	2b02      	cmp	r3, #2
 8002974:	d11b      	bne.n	80029ae <vCarriage_Calibration+0x152>
					{

					WelderUnit.Calibration_level = 03; // Третья фаза калибровки - медленное движение каретки к концевуику на низкой скорости
 8002976:	4b35      	ldr	r3, [pc, #212]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 8002978:	2203      	movs	r2, #3
 800297a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

					Carriage_Move(CALIBRATION_PHASE_SPEED_3, 0, 1); // Начать перемещение каретки в сторону концевика
 800297e:	2201      	movs	r2, #1
 8002980:	2100      	movs	r1, #0
 8002982:	2018      	movs	r0, #24
 8002984:	f7fe fa80 	bl	8000e88 <Carriage_Move>

					// По какой-то причине при первой попытке взять 2-й семафор он берется (даже если не выдан). Потому семафор берется дважды
					xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY ); // Попытка взять семафор по прерыванию срабатывания концевика
 8002988:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <vCarriage_Calibration+0x1f8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f04f 31ff 	mov.w	r1, #4294967295
 8002990:	4618      	mov	r0, r3
 8002992:	f005 f867 	bl	8007a64 <xQueueSemaphoreTake>
					xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
 8002996:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <vCarriage_Calibration+0x1f8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f04f 31ff 	mov.w	r1, #4294967295
 800299e:	4618      	mov	r0, r3
 80029a0:	f005 f860 	bl	8007a64 <xQueueSemaphoreTake>

					Carriage_Move(0, 0, 1); // Стоп
 80029a4:	2201      	movs	r2, #1
 80029a6:	2100      	movs	r1, #0
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7fe fa6d 	bl	8000e88 <Carriage_Move>

					}

					if ((WelderUnit.State & 0x10) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) && ((WelderUnit.State & WELDER_CLIBRATION_PROCESS)) && (WelderUnit.Calibration_level == 03) )
 80029ae:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80029b0:	7c1b      	ldrb	r3, [r3, #16]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d032      	beq.n	8002a20 <vCarriage_Calibration+0x1c4>
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80029bc:	7c1b      	ldrb	r3, [r3, #16]
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d02c      	beq.n	8002a20 <vCarriage_Calibration+0x1c4>
 80029c6:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80029c8:	7c1b      	ldrb	r3, [r3, #16]
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d026      	beq.n	8002a20 <vCarriage_Calibration+0x1c4>
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80029d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d121      	bne.n	8002a20 <vCarriage_Calibration+0x1c4>
					{
						WelderUnit.Calibration_level = 04; // Откалибровано
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80029de:	2204      	movs	r2, #4
 80029e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

						WelderUnit.State |= 1<<1; //1 бит - Откалибровано
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80029e6:	7c1b      	ldrb	r3, [r3, #16]
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80029f0:	741a      	strb	r2, [r3, #16]

						WelderUnit.Position = 0; // Позиция каретки
 80029f2:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	809a      	strh	r2, [r3, #4]

						WelderUnit.Mode = WELDER_MODE_MANUAL; // После калибровки режим работы аппарата - ручной.
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

						WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING; // Отображение что выбран режим калибровки
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 8002a02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 8002a0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

						WelderUnit.State |= WELDER_MOVE_ENABLE; // Разрешить движение каретки
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 8002a14:	7c1b      	ldrb	r3, [r3, #16]
 8002a16:	f043 0320 	orr.w	r3, r3, #32
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 8002a1e:	741a      	strb	r2, [r3, #16]
					}

					if (WelderUnit.Calibration_level  == 05) // Остановка калибровки
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 8002a22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	f47f af1c 	bne.w	8002864 <vCarriage_Calibration+0x8>
					{
						WelderUnit.Mode = 00; // Режим работа аппарата не выбран
 8002a2c:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
						WelderUnit.IndicatorPanel.LEDsState &= ~LED_PARKING; // индикации калибровки
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 8002a36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a3a:	f023 0302 	bic.w	r3, r3, #2
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	4b02      	ldr	r3, [pc, #8]	; (8002a4c <vCarriage_Calibration+0x1f0>)
 8002a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		xQueueReceive(qWelderCalibrated, &lReceivedValue, portMAX_DELAY ); // Ждать команды на начало калибровки
 8002a46:	e70d      	b.n	8002864 <vCarriage_Calibration+0x8>
 8002a48:	20003d8c 	.word	0x20003d8c
 8002a4c:	2000353c 	.word	0x2000353c
 8002a50:	40011000 	.word	0x40011000
 8002a54:	20003dc4 	.word	0x20003dc4

08002a58 <vCarriage_GoTo>:
	vTaskDelete(NULL);
}


void vCarriage_GoTo(void *pvParameters)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		//Попытка получить команду для передвижения каретки в нужную позицию.
		// Данные из очереди при этом не удаляются
		xQueuePeek(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 8002a60:	4b6c      	ldr	r3, [pc, #432]	; (8002c14 <vCarriage_GoTo+0x1bc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f107 010b 	add.w	r1, r7, #11
 8002a68:	f04f 32ff 	mov.w	r2, #4294967295
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f005 f8c1 	bl	8007bf4 <xQueuePeek>
//			WelderUnit.State &= ~0x01;
//			xQueueReceive(qWelderCmd, &lReceivedValue, portMAX_DELAY );
//			//WelderUnit.GoTo = WelderUnit.Position;
//		}

		if ((lReceivedValue == Cmd_CarriageGoTo) ) // Если пришла команда на начло движения
 8002a72:	7afb      	ldrb	r3, [r7, #11]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d1f3      	bne.n	8002a60 <vCarriage_GoTo+0x8>
		{

		WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / (STEPS_PER_ROTATE * MICRO_STEP_DEV); // Вычисление текущей позиции каретки, мм
 8002a78:	4b67      	ldr	r3, [pc, #412]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002a7a:	89db      	ldrh	r3, [r3, #14]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fd24 	bl	80004d4 <__aeabi_i2d>
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	4b62      	ldr	r3, [pc, #392]	; (8002c1c <vCarriage_GoTo+0x1c4>)
 8002a92:	f7fd feb3 	bl	80007fc <__aeabi_ddiv>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f7fd ff95 	bl	80009cc <__aeabi_d2uiz>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	4b5c      	ldr	r3, [pc, #368]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002aa8:	809a      	strh	r2, [r3, #4]

		dX = WelderUnit.GoTo - WelderUnit.Position; // Определение сколько и в какую сторону нужно сдвинуть каретку
 8002aaa:	4b5b      	ldr	r3, [pc, #364]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002aac:	891b      	ldrh	r3, [r3, #8]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b59      	ldr	r3, [pc, #356]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002ab2:	889b      	ldrh	r3, [r3, #4]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	60fb      	str	r3, [r7, #12]

		// Если каретка на нужном месте, то остановить движение каретки, очищаем очередь и снова взврат к xQueuePeek, для ожидания след команды
		if (dX == 0)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11e      	bne.n	8002afc <vCarriage_GoTo+0xa4>
		{
			Carriage_Move(0, 1, 1); // стоп
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7fe f9e0 	bl	8000e88 <Carriage_Move>
			WelderUnit.State &= ~0x01;
 8002ac8:	4b53      	ldr	r3, [pc, #332]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002aca:	7c1b      	ldrb	r3, [r3, #16]
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	4b51      	ldr	r3, [pc, #324]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002ad4:	741a      	strb	r2, [r3, #16]
			SendVal = Carriage_Done;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	72bb      	strb	r3, [r7, #10]
			xQueueSendToBack( qGoToResponse, &SendVal, 0 );
 8002ada:	4b51      	ldr	r3, [pc, #324]	; (8002c20 <vCarriage_GoTo+0x1c8>)
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	f107 010a 	add.w	r1, r7, #10
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f004 fdc3 	bl	8007670 <xQueueGenericSend>

			//xQueueSendToBack( qDebug, &SendVal, 0 );

			xQueueReceive(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 8002aea:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <vCarriage_GoTo+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f107 010b 	add.w	r1, r7, #11
 8002af2:	f04f 32ff 	mov.w	r2, #4294967295
 8002af6:	4618      	mov	r0, r3
 8002af8:	f004 ff12 	bl	8007920 <xQueueReceive>

		}

		if (dX > 0 && (WelderUnit.State & WELDER_MOVE_ENABLE)) // Если двигать в сторону концевика
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	dd26      	ble.n	8002b50 <vCarriage_GoTo+0xf8>
 8002b02:	4b45      	ldr	r3, [pc, #276]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b04:	7c1b      	ldrb	r3, [r3, #16]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d020      	beq.n	8002b50 <vCarriage_GoTo+0xf8>
		{

			if (WelderUnit.Position <= WelderUnit.GoTo && !(WelderUnit.State & 0x01)) // Если позиция не достигнута и каретка находится не в движении, то начать перемещение
 8002b0e:	4b42      	ldr	r3, [pc, #264]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b10:	889a      	ldrh	r2, [r3, #4]
 8002b12:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b14:	891b      	ldrh	r3, [r3, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d81a      	bhi.n	8002b50 <vCarriage_GoTo+0xf8>
 8002b1a:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b1c:	7c1b      	ldrb	r3, [r3, #16]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d114      	bne.n	8002b50 <vCarriage_GoTo+0xf8>
			{
				Carriage_Move(WelderUnit.Speed, 1, 1); // Начать перемещение
 8002b26:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b28:	88db      	ldrh	r3, [r3, #6]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe f9aa 	bl	8000e88 <Carriage_Move>
				WelderUnit.State |= 0x01; // Статус - каретка в движении
 8002b34:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b36:	7c1b      	ldrb	r3, [r3, #16]
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b40:	741a      	strb	r2, [r3, #16]
				WelderUnit.State &= ~0x04; // Статус картека движется на встречу концевику
 8002b42:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b44:	7c1b      	ldrb	r3, [r3, #16]
 8002b46:	f023 0304 	bic.w	r3, r3, #4
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b4e:	741a      	strb	r2, [r3, #16]
			}
		}

		if (dX < 0 && (WelderUnit.State & WELDER_MOVE_ENABLE)) // Если нужно двигать от концевика
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	da26      	bge.n	8002ba4 <vCarriage_GoTo+0x14c>
 8002b56:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b58:	7c1b      	ldrb	r3, [r3, #16]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d020      	beq.n	8002ba4 <vCarriage_GoTo+0x14c>
		{
			if (WelderUnit.Position >= WelderUnit.GoTo && !(WelderUnit.State & 0x01)) // Если позиция не достигнута и каретка находится не в движении, то начать перемещение
 8002b62:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b64:	889a      	ldrh	r2, [r3, #4]
 8002b66:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b68:	891b      	ldrh	r3, [r3, #8]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d31a      	bcc.n	8002ba4 <vCarriage_GoTo+0x14c>
 8002b6e:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b70:	7c1b      	ldrb	r3, [r3, #16]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d114      	bne.n	8002ba4 <vCarriage_GoTo+0x14c>
			{
				Carriage_Move(WelderUnit.Speed, 0, 1); // Начать перемещение
 8002b7a:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b7c:	88db      	ldrh	r3, [r3, #6]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe f980 	bl	8000e88 <Carriage_Move>
				WelderUnit.State |= 0x01; // Статус - каретка в движении
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b8a:	7c1b      	ldrb	r3, [r3, #16]
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b94:	741a      	strb	r2, [r3, #16]
				WelderUnit.State |= 0x04; // Статус картека движется от концевика
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002b98:	7c1b      	ldrb	r3, [r3, #16]
 8002b9a:	f043 0304 	orr.w	r3, r3, #4
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002ba2:	741a      	strb	r2, [r3, #16]
			}
		}

		if(!(WelderUnit.State & WELDER_MOVE_ENABLE))
 8002ba4:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002ba6:	7c1b      	ldrb	r3, [r3, #16]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10b      	bne.n	8002bc8 <vCarriage_GoTo+0x170>
		{
			Carriage_Move(0, 1, 1); // стоп
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fe f967 	bl	8000e88 <Carriage_Move>
			WelderUnit.State &= ~0x01;
 8002bba:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002bbc:	7c1b      	ldrb	r3, [r3, #16]
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002bc6:	741a      	strb	r2, [r3, #16]
		}

		if (xSemaphoreTake(xSemaphore_StepCount, (500 / portTICK_RATE_MS)) == pdTRUE) // Если через 100 мС семафор так и не получен, то считать что двигатель осановлен
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <vCarriage_GoTo+0x1cc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f004 ff47 	bl	8007a64 <xQueueSemaphoreTake>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	f47f af41 	bne.w	8002a60 <vCarriage_GoTo+0x8>
		//xSemaphoreTake(xSemaphore_StepCount, portMAX_DELAY );
		{
			if (!(WelderUnit.State & 0x04)) // Если каретка движется на встречу концевику, то инкрментирование Steps на каждый шаг ШД
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002be0:	7c1b      	ldrb	r3, [r3, #16]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <vCarriage_GoTo+0x19e>
				{
					WelderUnit.Steps++;
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002bec:	89db      	ldrh	r3, [r3, #14]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002bf4:	81da      	strh	r2, [r3, #14]
				}

				if (WelderUnit.State & 0x04) // Если каретка движется от концевика, то декрементирование Steps на каждый шаг ШД
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002bf8:	7c1b      	ldrb	r3, [r3, #16]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f43f af2e 	beq.w	8002a60 <vCarriage_GoTo+0x8>
				{
						WelderUnit.Steps--;
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002c06:	89db      	ldrh	r3, [r3, #14]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	4b02      	ldr	r3, [pc, #8]	; (8002c18 <vCarriage_GoTo+0x1c0>)
 8002c0e:	81da      	strh	r2, [r3, #14]
		xQueuePeek(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 8002c10:	e726      	b.n	8002a60 <vCarriage_GoTo+0x8>
 8002c12:	bf00      	nop
 8002c14:	20003d94 	.word	0x20003d94
 8002c18:	2000353c 	.word	0x2000353c
 8002c1c:	40890000 	.word	0x40890000
 8002c20:	20003d80 	.word	0x20003d80
 8002c24:	20003564 	.word	0x20003564

08002c28 <vKeyScan>:
	}
	vTaskDelete(NULL);
}

void vKeyScan(void *pvParameters)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]


	uint8_t nKeyPressed; // Передача команды о том какая кнопка или комбинация кнопок нажаты
	//portBASE_TYPE xStatus;

	vTaskDelay(100 / portTICK_RATE_MS);
 8002c30:	2064      	movs	r0, #100	; 0x64
 8002c32:	f005 fb63 	bl	80082fc <vTaskDelay>

	for(;;)
	{
		PCB_KeyScan();
 8002c36:	f7fe f96f 	bl	8000f18 <PCB_KeyScan>
		PCB_OutputControl();
 8002c3a:	f7fe f9d7 	bl	8000fec <PCB_OutputControl>
		//PCB_InputsScan();

		if (WelderUnit.IndicatorPanel.KeyState[0] == 128) // ВЛЕВО: [0], "-" - 128, "+" - 64, , STLED №5;
 8002c3e:	4ba9      	ldr	r3, [pc, #676]	; (8002ee4 <vKeyScan+0x2bc>)
 8002c40:	7f5b      	ldrb	r3, [r3, #29]
 8002c42:	2b80      	cmp	r3, #128	; 0x80
 8002c44:	d12f      	bne.n	8002ca6 <vKeyScan+0x7e>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xs_ShortPress_L > CNT_KEY_SHORT && Key.Xs_ShortPress_L != CNT_KEY_SHORT + 2)
 8002c46:	4ba8      	ldr	r3, [pc, #672]	; (8002ee8 <vKeyScan+0x2c0>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d906      	bls.n	8002c5c <vKeyScan+0x34>
 8002c4e:	4ba6      	ldr	r3, [pc, #664]	; (8002ee8 <vKeyScan+0x2c0>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d002      	beq.n	8002c5c <vKeyScan+0x34>
			{
//				nKeyPressed = press_short_Xs_L;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Xs_ShortPress_L = CNT_KEY_SHORT + 3; // Для ожидания отпускания клавиши
 8002c56:	4ba4      	ldr	r3, [pc, #656]	; (8002ee8 <vKeyScan+0x2c0>)
 8002c58:	2207      	movs	r2, #7
 8002c5a:	701a      	strb	r2, [r3, #0]
			}

			if (Key.Xs_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002c5c:	4ba2      	ldr	r3, [pc, #648]	; (8002ee8 <vKeyScan+0x2c0>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b06      	cmp	r3, #6
 8002c62:	d005      	beq.n	8002c70 <vKeyScan+0x48>
			{
				Key.Xs_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002c64:	4ba0      	ldr	r3, [pc, #640]	; (8002ee8 <vKeyScan+0x2c0>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	4b9e      	ldr	r3, [pc, #632]	; (8002ee8 <vKeyScan+0x2c0>)
 8002c6e:	701a      	strb	r2, [r3, #0]
			}


			Key.Xs_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002c70:	4b9d      	ldr	r3, [pc, #628]	; (8002ee8 <vKeyScan+0x2c0>)
 8002c72:	789b      	ldrb	r3, [r3, #2]
 8002c74:	3301      	adds	r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	4b9b      	ldr	r3, [pc, #620]	; (8002ee8 <vKeyScan+0x2c0>)
 8002c7a:	709a      	strb	r2, [r3, #2]
			if (Key.Xs_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002c7c:	4b9a      	ldr	r3, [pc, #616]	; (8002ee8 <vKeyScan+0x2c0>)
 8002c7e:	789b      	ldrb	r3, [r3, #2]
 8002c80:	2b32      	cmp	r3, #50	; 0x32
 8002c82:	d924      	bls.n	8002cce <vKeyScan+0xa6>
			{
				nKeyPressed = press_long_Xs_L;
 8002c84:	2302      	movs	r3, #2
 8002c86:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002c88:	4b98      	ldr	r3, [pc, #608]	; (8002eec <vKeyScan+0x2c4>)
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	f107 010f 	add.w	r1, r7, #15
 8002c90:	2300      	movs	r3, #0
 8002c92:	2200      	movs	r2, #0
 8002c94:	f004 fcec 	bl	8007670 <xQueueGenericSend>


				Key.Xs_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002c98:	4b93      	ldr	r3, [pc, #588]	; (8002ee8 <vKeyScan+0x2c0>)
 8002c9a:	2206      	movs	r2, #6
 8002c9c:	701a      	strb	r2, [r3, #0]
				Key.Xs_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002c9e:	4b92      	ldr	r3, [pc, #584]	; (8002ee8 <vKeyScan+0x2c0>)
 8002ca0:	2225      	movs	r2, #37	; 0x25
 8002ca2:	709a      	strb	r2, [r3, #2]
 8002ca4:	e013      	b.n	8002cce <vKeyScan+0xa6>
		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{


			if (Key.Xs_ShortPress_L >= CNT_KEY_SHORT + 3)
 8002ca6:	4b90      	ldr	r3, [pc, #576]	; (8002ee8 <vKeyScan+0x2c0>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d909      	bls.n	8002cc2 <vKeyScan+0x9a>
			{
				nKeyPressed = press_short_Xs_L;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002cb2:	4b8e      	ldr	r3, [pc, #568]	; (8002eec <vKeyScan+0x2c4>)
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	f107 010f 	add.w	r1, r7, #15
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f004 fcd7 	bl	8007670 <xQueueGenericSend>
			}

			Key.Xs_ShortPress_L = 0;
 8002cc2:	4b89      	ldr	r3, [pc, #548]	; (8002ee8 <vKeyScan+0x2c0>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
			Key.Xs_LongPress_L = 0;
 8002cc8:	4b87      	ldr	r3, [pc, #540]	; (8002ee8 <vKeyScan+0x2c0>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	709a      	strb	r2, [r3, #2]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 64) // Если есть факт нажатия кнопки
 8002cce:	4b85      	ldr	r3, [pc, #532]	; (8002ee4 <vKeyScan+0x2bc>)
 8002cd0:	7f5b      	ldrb	r3, [r3, #29]
 8002cd2:	2b40      	cmp	r3, #64	; 0x40
 8002cd4:	d139      	bne.n	8002d4a <vKeyScan+0x122>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xs_ShortPress_R > CNT_KEY_SHORT && Key.Xs_ShortPress_R != CNT_KEY_SHORT + 2)
 8002cd6:	4b84      	ldr	r3, [pc, #528]	; (8002ee8 <vKeyScan+0x2c0>)
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d910      	bls.n	8002d00 <vKeyScan+0xd8>
 8002cde:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <vKeyScan+0x2c0>)
 8002ce0:	785b      	ldrb	r3, [r3, #1]
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d00c      	beq.n	8002d00 <vKeyScan+0xd8>
			{

				nKeyPressed = press_short_Xs_R;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002cea:	4b80      	ldr	r3, [pc, #512]	; (8002eec <vKeyScan+0x2c4>)
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	f107 010f 	add.w	r1, r7, #15
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f004 fcbb 	bl	8007670 <xQueueGenericSend>

				Key.Xs_ShortPress_R = 0; // Сброс счетика выдержки
 8002cfa:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <vKeyScan+0x2c0>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	705a      	strb	r2, [r3, #1]
			}

			if (Key.Xs_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002d00:	4b79      	ldr	r3, [pc, #484]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d02:	785b      	ldrb	r3, [r3, #1]
 8002d04:	2b06      	cmp	r3, #6
 8002d06:	d005      	beq.n	8002d14 <vKeyScan+0xec>
			{
				Key.Xs_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002d08:	4b77      	ldr	r3, [pc, #476]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d0a:	785b      	ldrb	r3, [r3, #1]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	4b75      	ldr	r3, [pc, #468]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d12:	705a      	strb	r2, [r3, #1]
			}


			Key.Xs_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002d14:	4b74      	ldr	r3, [pc, #464]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d16:	78db      	ldrb	r3, [r3, #3]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	4b72      	ldr	r3, [pc, #456]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d1e:	70da      	strb	r2, [r3, #3]
			if (Key.Xs_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002d20:	4b71      	ldr	r3, [pc, #452]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d22:	78db      	ldrb	r3, [r3, #3]
 8002d24:	2b32      	cmp	r3, #50	; 0x32
 8002d26:	d916      	bls.n	8002d56 <vKeyScan+0x12e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xs_R;
 8002d28:	2304      	movs	r3, #4
 8002d2a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002d2c:	4b6f      	ldr	r3, [pc, #444]	; (8002eec <vKeyScan+0x2c4>)
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	f107 010f 	add.w	r1, r7, #15
 8002d34:	2300      	movs	r3, #0
 8002d36:	2200      	movs	r2, #0
 8002d38:	f004 fc9a 	bl	8007670 <xQueueGenericSend>

				Key.Xs_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002d3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d3e:	2206      	movs	r2, #6
 8002d40:	705a      	strb	r2, [r3, #1]
				Key.Xs_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002d42:	4b69      	ldr	r3, [pc, #420]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d44:	2225      	movs	r2, #37	; 0x25
 8002d46:	70da      	strb	r2, [r3, #3]
 8002d48:	e005      	b.n	8002d56 <vKeyScan+0x12e>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xs_ShortPress_R = 0;
 8002d4a:	4b67      	ldr	r3, [pc, #412]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	705a      	strb	r2, [r3, #1]
			Key.Xs_LongPress_R = 0;
 8002d50:	4b65      	ldr	r3, [pc, #404]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	70da      	strb	r2, [r3, #3]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 16) // ВПРАВО: [0], "-" - 16, "+" - 32, , STLED №5;
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <vKeyScan+0x2bc>)
 8002d58:	7f5b      	ldrb	r3, [r3, #29]
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d139      	bne.n	8002dd2 <vKeyScan+0x1aa>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xf_ShortPress_L > CNT_KEY_SHORT && Key.Xf_ShortPress_L != CNT_KEY_SHORT + 2)
 8002d5e:	4b62      	ldr	r3, [pc, #392]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d60:	791b      	ldrb	r3, [r3, #4]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d910      	bls.n	8002d88 <vKeyScan+0x160>
 8002d66:	4b60      	ldr	r3, [pc, #384]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d68:	791b      	ldrb	r3, [r3, #4]
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d00c      	beq.n	8002d88 <vKeyScan+0x160>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Xf_L;
 8002d6e:	2305      	movs	r3, #5
 8002d70:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002d72:	4b5e      	ldr	r3, [pc, #376]	; (8002eec <vKeyScan+0x2c4>)
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	f107 010f 	add.w	r1, r7, #15
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f004 fc77 	bl	8007670 <xQueueGenericSend>


				Key.Xf_ShortPress_L = 0; // Сброс счетика выдержки
 8002d82:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	711a      	strb	r2, [r3, #4]
			}

			if (Key.Xf_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002d88:	4b57      	ldr	r3, [pc, #348]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d8a:	791b      	ldrb	r3, [r3, #4]
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d005      	beq.n	8002d9c <vKeyScan+0x174>
			{
				Key.Xf_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002d90:	4b55      	ldr	r3, [pc, #340]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d92:	791b      	ldrb	r3, [r3, #4]
 8002d94:	3301      	adds	r3, #1
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d9a:	711a      	strb	r2, [r3, #4]
			}


			Key.Xf_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002d9c:	4b52      	ldr	r3, [pc, #328]	; (8002ee8 <vKeyScan+0x2c0>)
 8002d9e:	799b      	ldrb	r3, [r3, #6]
 8002da0:	3301      	adds	r3, #1
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	4b50      	ldr	r3, [pc, #320]	; (8002ee8 <vKeyScan+0x2c0>)
 8002da6:	719a      	strb	r2, [r3, #6]
			if (Key.Xf_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002da8:	4b4f      	ldr	r3, [pc, #316]	; (8002ee8 <vKeyScan+0x2c0>)
 8002daa:	799b      	ldrb	r3, [r3, #6]
 8002dac:	2b32      	cmp	r3, #50	; 0x32
 8002dae:	d916      	bls.n	8002dde <vKeyScan+0x1b6>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xf_L;
 8002db0:	2306      	movs	r3, #6
 8002db2:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002db4:	4b4d      	ldr	r3, [pc, #308]	; (8002eec <vKeyScan+0x2c4>)
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	f107 010f 	add.w	r1, r7, #15
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f004 fc56 	bl	8007670 <xQueueGenericSend>


				Key.Xf_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002dc4:	4b48      	ldr	r3, [pc, #288]	; (8002ee8 <vKeyScan+0x2c0>)
 8002dc6:	2206      	movs	r2, #6
 8002dc8:	711a      	strb	r2, [r3, #4]
				Key.Xf_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <vKeyScan+0x2c0>)
 8002dcc:	2225      	movs	r2, #37	; 0x25
 8002dce:	719a      	strb	r2, [r3, #6]
 8002dd0:	e005      	b.n	8002dde <vKeyScan+0x1b6>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xf_ShortPress_L = 0;
 8002dd2:	4b45      	ldr	r3, [pc, #276]	; (8002ee8 <vKeyScan+0x2c0>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	711a      	strb	r2, [r3, #4]
			Key.Xf_LongPress_L = 0;
 8002dd8:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <vKeyScan+0x2c0>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	719a      	strb	r2, [r3, #6]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 32)
 8002dde:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <vKeyScan+0x2bc>)
 8002de0:	7f5b      	ldrb	r3, [r3, #29]
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d139      	bne.n	8002e5a <vKeyScan+0x232>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xf_ShortPress_R > CNT_KEY_SHORT && Key.Xf_ShortPress_R != CNT_KEY_SHORT + 2)
 8002de6:	4b40      	ldr	r3, [pc, #256]	; (8002ee8 <vKeyScan+0x2c0>)
 8002de8:	795b      	ldrb	r3, [r3, #5]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d910      	bls.n	8002e10 <vKeyScan+0x1e8>
 8002dee:	4b3e      	ldr	r3, [pc, #248]	; (8002ee8 <vKeyScan+0x2c0>)
 8002df0:	795b      	ldrb	r3, [r3, #5]
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d00c      	beq.n	8002e10 <vKeyScan+0x1e8>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Xf_R;
 8002df6:	2307      	movs	r3, #7
 8002df8:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002dfa:	4b3c      	ldr	r3, [pc, #240]	; (8002eec <vKeyScan+0x2c4>)
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	f107 010f 	add.w	r1, r7, #15
 8002e02:	2300      	movs	r3, #0
 8002e04:	2200      	movs	r2, #0
 8002e06:	f004 fc33 	bl	8007670 <xQueueGenericSend>


				Key.Xf_ShortPress_R = 0; // Сброс счетика выдержки
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	715a      	strb	r2, [r3, #5]
			}

			if (Key.Xf_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002e10:	4b35      	ldr	r3, [pc, #212]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e12:	795b      	ldrb	r3, [r3, #5]
 8002e14:	2b06      	cmp	r3, #6
 8002e16:	d005      	beq.n	8002e24 <vKeyScan+0x1fc>
			{
				Key.Xf_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002e18:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e1a:	795b      	ldrb	r3, [r3, #5]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e22:	715a      	strb	r2, [r3, #5]
			}


			Key.Xf_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002e24:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e26:	79db      	ldrb	r3, [r3, #7]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e2e:	71da      	strb	r2, [r3, #7]
			if (Key.Xf_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002e30:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e32:	79db      	ldrb	r3, [r3, #7]
 8002e34:	2b32      	cmp	r3, #50	; 0x32
 8002e36:	d916      	bls.n	8002e66 <vKeyScan+0x23e>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xf_R;
 8002e38:	2308      	movs	r3, #8
 8002e3a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	; (8002eec <vKeyScan+0x2c4>)
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	f107 010f 	add.w	r1, r7, #15
 8002e44:	2300      	movs	r3, #0
 8002e46:	2200      	movs	r2, #0
 8002e48:	f004 fc12 	bl	8007670 <xQueueGenericSend>

				Key.Xf_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002e4c:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e4e:	2206      	movs	r2, #6
 8002e50:	715a      	strb	r2, [r3, #5]
				Key.Xf_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002e52:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e54:	2225      	movs	r2, #37	; 0x25
 8002e56:	71da      	strb	r2, [r3, #7]
 8002e58:	e005      	b.n	8002e66 <vKeyScan+0x23e>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xf_ShortPress_R = 0;
 8002e5a:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	715a      	strb	r2, [r3, #5]
			Key.Xf_LongPress_R = 0;
 8002e60:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	71da      	strb	r2, [r3, #7]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 8) //ЗАДЕРЖКА (Delay_s): [0], "-" - 8, "+" - 4, , STLED №5;
 8002e66:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <vKeyScan+0x2bc>)
 8002e68:	7f5b      	ldrb	r3, [r3, #29]
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d140      	bne.n	8002ef0 <vKeyScan+0x2c8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_s_ShortPress_L > CNT_KEY_SHORT && Key.Delay_s_ShortPress_L != CNT_KEY_SHORT + 2)
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e70:	7a1b      	ldrb	r3, [r3, #8]
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d910      	bls.n	8002e98 <vKeyScan+0x270>
 8002e76:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e78:	7a1b      	ldrb	r3, [r3, #8]
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d00c      	beq.n	8002e98 <vKeyScan+0x270>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_s_L;
 8002e7e:	2309      	movs	r3, #9
 8002e80:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002e82:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <vKeyScan+0x2c4>)
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	f107 010f 	add.w	r1, r7, #15
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f004 fbef 	bl	8007670 <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = 0; // Сброс счетика выдержки
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	721a      	strb	r2, [r3, #8]
			}

			if (Key.Delay_s_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <vKeyScan+0x2c0>)
 8002e9a:	7a1b      	ldrb	r3, [r3, #8]
 8002e9c:	2b06      	cmp	r3, #6
 8002e9e:	d005      	beq.n	8002eac <vKeyScan+0x284>
			{
				Key.Delay_s_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <vKeyScan+0x2c0>)
 8002ea2:	7a1b      	ldrb	r3, [r3, #8]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <vKeyScan+0x2c0>)
 8002eaa:	721a      	strb	r2, [r3, #8]
			}


			Key.Delay_s_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <vKeyScan+0x2c0>)
 8002eae:	7a9b      	ldrb	r3, [r3, #10]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <vKeyScan+0x2c0>)
 8002eb6:	729a      	strb	r2, [r3, #10]
			if (Key.Delay_s_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <vKeyScan+0x2c0>)
 8002eba:	7a9b      	ldrb	r3, [r3, #10]
 8002ebc:	2b32      	cmp	r3, #50	; 0x32
 8002ebe:	d91d      	bls.n	8002efc <vKeyScan+0x2d4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_s_L;
 8002ec0:	230a      	movs	r3, #10
 8002ec2:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <vKeyScan+0x2c4>)
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	f107 010f 	add.w	r1, r7, #15
 8002ecc:	2300      	movs	r3, #0
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f004 fbce 	bl	8007670 <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <vKeyScan+0x2c0>)
 8002ed6:	2206      	movs	r2, #6
 8002ed8:	721a      	strb	r2, [r3, #8]
				Key.Delay_s_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002eda:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <vKeyScan+0x2c0>)
 8002edc:	2225      	movs	r2, #37	; 0x25
 8002ede:	729a      	strb	r2, [r3, #10]
 8002ee0:	e00c      	b.n	8002efc <vKeyScan+0x2d4>
 8002ee2:	bf00      	nop
 8002ee4:	2000353c 	.word	0x2000353c
 8002ee8:	20003da0 	.word	0x20003da0
 8002eec:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_s_ShortPress_L = 0;
 8002ef0:	4ba9      	ldr	r3, [pc, #676]	; (8003198 <vKeyScan+0x570>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	721a      	strb	r2, [r3, #8]
			Key.Delay_s_LongPress_L = 0;
 8002ef6:	4ba8      	ldr	r3, [pc, #672]	; (8003198 <vKeyScan+0x570>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	729a      	strb	r2, [r3, #10]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 4)
 8002efc:	4ba7      	ldr	r3, [pc, #668]	; (800319c <vKeyScan+0x574>)
 8002efe:	7f5b      	ldrb	r3, [r3, #29]
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d139      	bne.n	8002f78 <vKeyScan+0x350>
			{
				// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
				if (Key.Delay_s_ShortPress_R > CNT_KEY_SHORT && Key.Delay_s_ShortPress_R != CNT_KEY_SHORT + 2)
 8002f04:	4ba4      	ldr	r3, [pc, #656]	; (8003198 <vKeyScan+0x570>)
 8002f06:	7a5b      	ldrb	r3, [r3, #9]
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d910      	bls.n	8002f2e <vKeyScan+0x306>
 8002f0c:	4ba2      	ldr	r3, [pc, #648]	; (8003198 <vKeyScan+0x570>)
 8002f0e:	7a5b      	ldrb	r3, [r3, #9]
 8002f10:	2b06      	cmp	r3, #6
 8002f12:	d00c      	beq.n	8002f2e <vKeyScan+0x306>
				{
					// Дейсвие при нажатии на клавишу
					nKeyPressed = press_short_Delay_s_R;
 8002f14:	230b      	movs	r3, #11
 8002f16:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002f18:	4ba1      	ldr	r3, [pc, #644]	; (80031a0 <vKeyScan+0x578>)
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	f107 010f 	add.w	r1, r7, #15
 8002f20:	2300      	movs	r3, #0
 8002f22:	2200      	movs	r2, #0
 8002f24:	f004 fba4 	bl	8007670 <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = 0; // Сброс счетика выдержки
 8002f28:	4b9b      	ldr	r3, [pc, #620]	; (8003198 <vKeyScan+0x570>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	725a      	strb	r2, [r3, #9]
				}

				if (Key.Delay_s_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002f2e:	4b9a      	ldr	r3, [pc, #616]	; (8003198 <vKeyScan+0x570>)
 8002f30:	7a5b      	ldrb	r3, [r3, #9]
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d005      	beq.n	8002f42 <vKeyScan+0x31a>
				{
					Key.Delay_s_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002f36:	4b98      	ldr	r3, [pc, #608]	; (8003198 <vKeyScan+0x570>)
 8002f38:	7a5b      	ldrb	r3, [r3, #9]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	4b96      	ldr	r3, [pc, #600]	; (8003198 <vKeyScan+0x570>)
 8002f40:	725a      	strb	r2, [r3, #9]
				}


				Key.Delay_s_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002f42:	4b95      	ldr	r3, [pc, #596]	; (8003198 <vKeyScan+0x570>)
 8002f44:	7adb      	ldrb	r3, [r3, #11]
 8002f46:	3301      	adds	r3, #1
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4b93      	ldr	r3, [pc, #588]	; (8003198 <vKeyScan+0x570>)
 8002f4c:	72da      	strb	r2, [r3, #11]
				if (Key.Delay_s_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002f4e:	4b92      	ldr	r3, [pc, #584]	; (8003198 <vKeyScan+0x570>)
 8002f50:	7adb      	ldrb	r3, [r3, #11]
 8002f52:	2b32      	cmp	r3, #50	; 0x32
 8002f54:	d916      	bls.n	8002f84 <vKeyScan+0x35c>
				{
					// Дейсвие при нажатии на клавишу
					nKeyPressed = press_long_Delay_s_R;
 8002f56:	230c      	movs	r3, #12
 8002f58:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002f5a:	4b91      	ldr	r3, [pc, #580]	; (80031a0 <vKeyScan+0x578>)
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	f107 010f 	add.w	r1, r7, #15
 8002f62:	2300      	movs	r3, #0
 8002f64:	2200      	movs	r2, #0
 8002f66:	f004 fb83 	bl	8007670 <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002f6a:	4b8b      	ldr	r3, [pc, #556]	; (8003198 <vKeyScan+0x570>)
 8002f6c:	2206      	movs	r2, #6
 8002f6e:	725a      	strb	r2, [r3, #9]
					Key.Delay_s_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002f70:	4b89      	ldr	r3, [pc, #548]	; (8003198 <vKeyScan+0x570>)
 8002f72:	2225      	movs	r2, #37	; 0x25
 8002f74:	72da      	strb	r2, [r3, #11]
 8002f76:	e005      	b.n	8002f84 <vKeyScan+0x35c>


			}
			else // Если кнопка была отпущена то сбросить все счетчики выдержки
			{
				Key.Delay_s_ShortPress_R = 0;
 8002f78:	4b87      	ldr	r3, [pc, #540]	; (8003198 <vKeyScan+0x570>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	725a      	strb	r2, [r3, #9]
				Key.Delay_s_LongPress_R = 0;
 8002f7e:	4b86      	ldr	r3, [pc, #536]	; (8003198 <vKeyScan+0x570>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	72da      	strb	r2, [r3, #11]
			}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 2) // СКОРОСТЬ: [0], "-" - 2, "+" - 1, , STLED №5;
 8002f84:	4b85      	ldr	r3, [pc, #532]	; (800319c <vKeyScan+0x574>)
 8002f86:	7f5b      	ldrb	r3, [r3, #29]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d139      	bne.n	8003000 <vKeyScan+0x3d8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Speed_ShortPress_L > CNT_KEY_SHORT && Key.Speed_ShortPress_L != CNT_KEY_SHORT + 2)
 8002f8c:	4b82      	ldr	r3, [pc, #520]	; (8003198 <vKeyScan+0x570>)
 8002f8e:	7b1b      	ldrb	r3, [r3, #12]
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d910      	bls.n	8002fb6 <vKeyScan+0x38e>
 8002f94:	4b80      	ldr	r3, [pc, #512]	; (8003198 <vKeyScan+0x570>)
 8002f96:	7b1b      	ldrb	r3, [r3, #12]
 8002f98:	2b06      	cmp	r3, #6
 8002f9a:	d00c      	beq.n	8002fb6 <vKeyScan+0x38e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Speed_L;
 8002f9c:	230d      	movs	r3, #13
 8002f9e:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002fa0:	4b7f      	ldr	r3, [pc, #508]	; (80031a0 <vKeyScan+0x578>)
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	f107 010f 	add.w	r1, r7, #15
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2200      	movs	r2, #0
 8002fac:	f004 fb60 	bl	8007670 <xQueueGenericSend>

				Key.Speed_ShortPress_L = 0; // Сброс счетика выдержки
 8002fb0:	4b79      	ldr	r3, [pc, #484]	; (8003198 <vKeyScan+0x570>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	731a      	strb	r2, [r3, #12]
			}

			if (Key.Speed_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002fb6:	4b78      	ldr	r3, [pc, #480]	; (8003198 <vKeyScan+0x570>)
 8002fb8:	7b1b      	ldrb	r3, [r3, #12]
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d005      	beq.n	8002fca <vKeyScan+0x3a2>
			{
				Key.Speed_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002fbe:	4b76      	ldr	r3, [pc, #472]	; (8003198 <vKeyScan+0x570>)
 8002fc0:	7b1b      	ldrb	r3, [r3, #12]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4b74      	ldr	r3, [pc, #464]	; (8003198 <vKeyScan+0x570>)
 8002fc8:	731a      	strb	r2, [r3, #12]
			}


			Key.Speed_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002fca:	4b73      	ldr	r3, [pc, #460]	; (8003198 <vKeyScan+0x570>)
 8002fcc:	7b9b      	ldrb	r3, [r3, #14]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4b71      	ldr	r3, [pc, #452]	; (8003198 <vKeyScan+0x570>)
 8002fd4:	739a      	strb	r2, [r3, #14]
			if (Key.Speed_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002fd6:	4b70      	ldr	r3, [pc, #448]	; (8003198 <vKeyScan+0x570>)
 8002fd8:	7b9b      	ldrb	r3, [r3, #14]
 8002fda:	2b32      	cmp	r3, #50	; 0x32
 8002fdc:	d916      	bls.n	800300c <vKeyScan+0x3e4>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Speed_L;
 8002fde:	230e      	movs	r3, #14
 8002fe0:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002fe2:	4b6f      	ldr	r3, [pc, #444]	; (80031a0 <vKeyScan+0x578>)
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	f107 010f 	add.w	r1, r7, #15
 8002fea:	2300      	movs	r3, #0
 8002fec:	2200      	movs	r2, #0
 8002fee:	f004 fb3f 	bl	8007670 <xQueueGenericSend>

				Key.Speed_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002ff2:	4b69      	ldr	r3, [pc, #420]	; (8003198 <vKeyScan+0x570>)
 8002ff4:	2206      	movs	r2, #6
 8002ff6:	731a      	strb	r2, [r3, #12]
				Key.Speed_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002ff8:	4b67      	ldr	r3, [pc, #412]	; (8003198 <vKeyScan+0x570>)
 8002ffa:	2225      	movs	r2, #37	; 0x25
 8002ffc:	739a      	strb	r2, [r3, #14]
 8002ffe:	e005      	b.n	800300c <vKeyScan+0x3e4>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Speed_ShortPress_L = 0;
 8003000:	4b65      	ldr	r3, [pc, #404]	; (8003198 <vKeyScan+0x570>)
 8003002:	2200      	movs	r2, #0
 8003004:	731a      	strb	r2, [r3, #12]
			Key.Speed_LongPress_L = 0;
 8003006:	4b64      	ldr	r3, [pc, #400]	; (8003198 <vKeyScan+0x570>)
 8003008:	2200      	movs	r2, #0
 800300a:	739a      	strb	r2, [r3, #14]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 1)
 800300c:	4b63      	ldr	r3, [pc, #396]	; (800319c <vKeyScan+0x574>)
 800300e:	7f5b      	ldrb	r3, [r3, #29]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d139      	bne.n	8003088 <vKeyScan+0x460>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Speed_ShortPress_R > CNT_KEY_SHORT && Key.Speed_ShortPress_R != CNT_KEY_SHORT + 2)
 8003014:	4b60      	ldr	r3, [pc, #384]	; (8003198 <vKeyScan+0x570>)
 8003016:	7b5b      	ldrb	r3, [r3, #13]
 8003018:	2b04      	cmp	r3, #4
 800301a:	d910      	bls.n	800303e <vKeyScan+0x416>
 800301c:	4b5e      	ldr	r3, [pc, #376]	; (8003198 <vKeyScan+0x570>)
 800301e:	7b5b      	ldrb	r3, [r3, #13]
 8003020:	2b06      	cmp	r3, #6
 8003022:	d00c      	beq.n	800303e <vKeyScan+0x416>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Speed_R;
 8003024:	230f      	movs	r3, #15
 8003026:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003028:	4b5d      	ldr	r3, [pc, #372]	; (80031a0 <vKeyScan+0x578>)
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	f107 010f 	add.w	r1, r7, #15
 8003030:	2300      	movs	r3, #0
 8003032:	2200      	movs	r2, #0
 8003034:	f004 fb1c 	bl	8007670 <xQueueGenericSend>

				Key.Speed_ShortPress_R = 0; // Сброс счетика выдержки
 8003038:	4b57      	ldr	r3, [pc, #348]	; (8003198 <vKeyScan+0x570>)
 800303a:	2200      	movs	r2, #0
 800303c:	735a      	strb	r2, [r3, #13]
			}

			if (Key.Speed_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 800303e:	4b56      	ldr	r3, [pc, #344]	; (8003198 <vKeyScan+0x570>)
 8003040:	7b5b      	ldrb	r3, [r3, #13]
 8003042:	2b06      	cmp	r3, #6
 8003044:	d005      	beq.n	8003052 <vKeyScan+0x42a>
			{
				Key.Speed_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8003046:	4b54      	ldr	r3, [pc, #336]	; (8003198 <vKeyScan+0x570>)
 8003048:	7b5b      	ldrb	r3, [r3, #13]
 800304a:	3301      	adds	r3, #1
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4b52      	ldr	r3, [pc, #328]	; (8003198 <vKeyScan+0x570>)
 8003050:	735a      	strb	r2, [r3, #13]
			}


			Key.Speed_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8003052:	4b51      	ldr	r3, [pc, #324]	; (8003198 <vKeyScan+0x570>)
 8003054:	7bdb      	ldrb	r3, [r3, #15]
 8003056:	3301      	adds	r3, #1
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4b4f      	ldr	r3, [pc, #316]	; (8003198 <vKeyScan+0x570>)
 800305c:	73da      	strb	r2, [r3, #15]
			if (Key.Speed_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 800305e:	4b4e      	ldr	r3, [pc, #312]	; (8003198 <vKeyScan+0x570>)
 8003060:	7bdb      	ldrb	r3, [r3, #15]
 8003062:	2b32      	cmp	r3, #50	; 0x32
 8003064:	d916      	bls.n	8003094 <vKeyScan+0x46c>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Speed_R;
 8003066:	2310      	movs	r3, #16
 8003068:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800306a:	4b4d      	ldr	r3, [pc, #308]	; (80031a0 <vKeyScan+0x578>)
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	f107 010f 	add.w	r1, r7, #15
 8003072:	2300      	movs	r3, #0
 8003074:	2200      	movs	r2, #0
 8003076:	f004 fafb 	bl	8007670 <xQueueGenericSend>

				Key.Speed_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800307a:	4b47      	ldr	r3, [pc, #284]	; (8003198 <vKeyScan+0x570>)
 800307c:	2206      	movs	r2, #6
 800307e:	735a      	strb	r2, [r3, #13]
				Key.Speed_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003080:	4b45      	ldr	r3, [pc, #276]	; (8003198 <vKeyScan+0x570>)
 8003082:	2225      	movs	r2, #37	; 0x25
 8003084:	73da      	strb	r2, [r3, #15]
 8003086:	e005      	b.n	8003094 <vKeyScan+0x46c>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Speed_ShortPress_R = 0;
 8003088:	4b43      	ldr	r3, [pc, #268]	; (8003198 <vKeyScan+0x570>)
 800308a:	2200      	movs	r2, #0
 800308c:	735a      	strb	r2, [r3, #13]
			Key.Speed_LongPress_R = 0;
 800308e:	4b42      	ldr	r3, [pc, #264]	; (8003198 <vKeyScan+0x570>)
 8003090:	2200      	movs	r2, #0
 8003092:	73da      	strb	r2, [r3, #15]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 1) // ЗАДЕРЖКА (Delay_f): [1], "-" - 1, "+" - 4, , STLED №5;
 8003094:	4b41      	ldr	r3, [pc, #260]	; (800319c <vKeyScan+0x574>)
 8003096:	7f9b      	ldrb	r3, [r3, #30]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d139      	bne.n	8003110 <vKeyScan+0x4e8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_f_ShortPress_L > CNT_KEY_SHORT && Key.Delay_f_ShortPress_L != CNT_KEY_SHORT + 2)
 800309c:	4b3e      	ldr	r3, [pc, #248]	; (8003198 <vKeyScan+0x570>)
 800309e:	7c1b      	ldrb	r3, [r3, #16]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d910      	bls.n	80030c6 <vKeyScan+0x49e>
 80030a4:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <vKeyScan+0x570>)
 80030a6:	7c1b      	ldrb	r3, [r3, #16]
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d00c      	beq.n	80030c6 <vKeyScan+0x49e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_f_L;
 80030ac:	2311      	movs	r3, #17
 80030ae:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80030b0:	4b3b      	ldr	r3, [pc, #236]	; (80031a0 <vKeyScan+0x578>)
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	f107 010f 	add.w	r1, r7, #15
 80030b8:	2300      	movs	r3, #0
 80030ba:	2200      	movs	r2, #0
 80030bc:	f004 fad8 	bl	8007670 <xQueueGenericSend>

				Key.Delay_f_ShortPress_L = 0; // Сброс счетика выдержки
 80030c0:	4b35      	ldr	r3, [pc, #212]	; (8003198 <vKeyScan+0x570>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	741a      	strb	r2, [r3, #16]
			}

			if (Key.Delay_f_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80030c6:	4b34      	ldr	r3, [pc, #208]	; (8003198 <vKeyScan+0x570>)
 80030c8:	7c1b      	ldrb	r3, [r3, #16]
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d005      	beq.n	80030da <vKeyScan+0x4b2>
			{
				Key.Delay_f_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 80030ce:	4b32      	ldr	r3, [pc, #200]	; (8003198 <vKeyScan+0x570>)
 80030d0:	7c1b      	ldrb	r3, [r3, #16]
 80030d2:	3301      	adds	r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	4b30      	ldr	r3, [pc, #192]	; (8003198 <vKeyScan+0x570>)
 80030d8:	741a      	strb	r2, [r3, #16]
			}


			Key.Delay_f_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 80030da:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <vKeyScan+0x570>)
 80030dc:	7c9b      	ldrb	r3, [r3, #18]
 80030de:	3301      	adds	r3, #1
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <vKeyScan+0x570>)
 80030e4:	749a      	strb	r2, [r3, #18]
			if (Key.Delay_f_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80030e6:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <vKeyScan+0x570>)
 80030e8:	7c9b      	ldrb	r3, [r3, #18]
 80030ea:	2b32      	cmp	r3, #50	; 0x32
 80030ec:	d916      	bls.n	800311c <vKeyScan+0x4f4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_f_L;
 80030ee:	2312      	movs	r3, #18
 80030f0:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80030f2:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <vKeyScan+0x578>)
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	f107 010f 	add.w	r1, r7, #15
 80030fa:	2300      	movs	r3, #0
 80030fc:	2200      	movs	r2, #0
 80030fe:	f004 fab7 	bl	8007670 <xQueueGenericSend>


				Key.Delay_f_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8003102:	4b25      	ldr	r3, [pc, #148]	; (8003198 <vKeyScan+0x570>)
 8003104:	2206      	movs	r2, #6
 8003106:	741a      	strb	r2, [r3, #16]
				Key.Delay_f_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <vKeyScan+0x570>)
 800310a:	2225      	movs	r2, #37	; 0x25
 800310c:	749a      	strb	r2, [r3, #18]
 800310e:	e005      	b.n	800311c <vKeyScan+0x4f4>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_f_ShortPress_L = 0;
 8003110:	4b21      	ldr	r3, [pc, #132]	; (8003198 <vKeyScan+0x570>)
 8003112:	2200      	movs	r2, #0
 8003114:	741a      	strb	r2, [r3, #16]
			Key.Delay_f_LongPress_L = 0;
 8003116:	4b20      	ldr	r3, [pc, #128]	; (8003198 <vKeyScan+0x570>)
 8003118:	2200      	movs	r2, #0
 800311a:	749a      	strb	r2, [r3, #18]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 4)
 800311c:	4b1f      	ldr	r3, [pc, #124]	; (800319c <vKeyScan+0x574>)
 800311e:	7f9b      	ldrb	r3, [r3, #30]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d13f      	bne.n	80031a4 <vKeyScan+0x57c>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_f_ShortPress_R > CNT_KEY_SHORT && Key.Delay_f_ShortPress_R != CNT_KEY_SHORT + 2)
 8003124:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <vKeyScan+0x570>)
 8003126:	7c5b      	ldrb	r3, [r3, #17]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d910      	bls.n	800314e <vKeyScan+0x526>
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <vKeyScan+0x570>)
 800312e:	7c5b      	ldrb	r3, [r3, #17]
 8003130:	2b06      	cmp	r3, #6
 8003132:	d00c      	beq.n	800314e <vKeyScan+0x526>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_f_R;
 8003134:	2313      	movs	r3, #19
 8003136:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003138:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <vKeyScan+0x578>)
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	f107 010f 	add.w	r1, r7, #15
 8003140:	2300      	movs	r3, #0
 8003142:	2200      	movs	r2, #0
 8003144:	f004 fa94 	bl	8007670 <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = 0; // Сброс счетика выдержки
 8003148:	4b13      	ldr	r3, [pc, #76]	; (8003198 <vKeyScan+0x570>)
 800314a:	2200      	movs	r2, #0
 800314c:	745a      	strb	r2, [r3, #17]
			}

			if (Key.Delay_f_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 800314e:	4b12      	ldr	r3, [pc, #72]	; (8003198 <vKeyScan+0x570>)
 8003150:	7c5b      	ldrb	r3, [r3, #17]
 8003152:	2b06      	cmp	r3, #6
 8003154:	d005      	beq.n	8003162 <vKeyScan+0x53a>
			{
				Key.Delay_f_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <vKeyScan+0x570>)
 8003158:	7c5b      	ldrb	r3, [r3, #17]
 800315a:	3301      	adds	r3, #1
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <vKeyScan+0x570>)
 8003160:	745a      	strb	r2, [r3, #17]
			}


			Key.Delay_f_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8003162:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <vKeyScan+0x570>)
 8003164:	7cdb      	ldrb	r3, [r3, #19]
 8003166:	3301      	adds	r3, #1
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <vKeyScan+0x570>)
 800316c:	74da      	strb	r2, [r3, #19]
			if (Key.Delay_f_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <vKeyScan+0x570>)
 8003170:	7cdb      	ldrb	r3, [r3, #19]
 8003172:	2b32      	cmp	r3, #50	; 0x32
 8003174:	d91c      	bls.n	80031b0 <vKeyScan+0x588>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_f_R;
 8003176:	2314      	movs	r3, #20
 8003178:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <vKeyScan+0x578>)
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	f107 010f 	add.w	r1, r7, #15
 8003182:	2300      	movs	r3, #0
 8003184:	2200      	movs	r2, #0
 8003186:	f004 fa73 	bl	8007670 <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800318a:	4b03      	ldr	r3, [pc, #12]	; (8003198 <vKeyScan+0x570>)
 800318c:	2206      	movs	r2, #6
 800318e:	745a      	strb	r2, [r3, #17]
				Key.Delay_f_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003190:	4b01      	ldr	r3, [pc, #4]	; (8003198 <vKeyScan+0x570>)
 8003192:	2225      	movs	r2, #37	; 0x25
 8003194:	74da      	strb	r2, [r3, #19]
 8003196:	e00b      	b.n	80031b0 <vKeyScan+0x588>
 8003198:	20003da0 	.word	0x20003da0
 800319c:	2000353c 	.word	0x2000353c
 80031a0:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_f_ShortPress_R = 0;
 80031a4:	4b90      	ldr	r3, [pc, #576]	; (80033e8 <vKeyScan+0x7c0>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	745a      	strb	r2, [r3, #17]
			Key.Delay_f_LongPress_R = 0;
 80031aa:	4b8f      	ldr	r3, [pc, #572]	; (80033e8 <vKeyScan+0x7c0>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	74da      	strb	r2, [r3, #19]
		}

		if (WelderUnit.IndicatorPanel.KeyState[3] == 1 && !(WelderUnit.IndicatorPanel.KeyState[1] == 2)) // ВЛЕВО: [0], "-" - 128, "+" - 64, , STLED №5; ПРОГРАММА: [1], "-" - ..., "+" - 2, , STLED №5;
 80031b0:	4b8e      	ldr	r3, [pc, #568]	; (80033ec <vKeyScan+0x7c4>)
 80031b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d133      	bne.n	8003222 <vKeyScan+0x5fa>
 80031ba:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <vKeyScan+0x7c4>)
 80031bc:	7f9b      	ldrb	r3, [r3, #30]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d02f      	beq.n	8003222 <vKeyScan+0x5fa>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_L > CNT_KEY_SHORT && Key.Program_ShortPress_L != CNT_KEY_SHORT + 2)
 80031c2:	4b89      	ldr	r3, [pc, #548]	; (80033e8 <vKeyScan+0x7c0>)
 80031c4:	7d1b      	ldrb	r3, [r3, #20]
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d906      	bls.n	80031d8 <vKeyScan+0x5b0>
 80031ca:	4b87      	ldr	r3, [pc, #540]	; (80033e8 <vKeyScan+0x7c0>)
 80031cc:	7d1b      	ldrb	r3, [r3, #20]
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d002      	beq.n	80031d8 <vKeyScan+0x5b0>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_Program_L;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_L = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 80031d2:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <vKeyScan+0x7c0>)
 80031d4:	2207      	movs	r2, #7
 80031d6:	751a      	strb	r2, [r3, #20]
			}

			if (Key.Program_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80031d8:	4b83      	ldr	r3, [pc, #524]	; (80033e8 <vKeyScan+0x7c0>)
 80031da:	7d1b      	ldrb	r3, [r3, #20]
 80031dc:	2b06      	cmp	r3, #6
 80031de:	d005      	beq.n	80031ec <vKeyScan+0x5c4>
			{
				Key.Program_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 80031e0:	4b81      	ldr	r3, [pc, #516]	; (80033e8 <vKeyScan+0x7c0>)
 80031e2:	7d1b      	ldrb	r3, [r3, #20]
 80031e4:	3301      	adds	r3, #1
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	4b7f      	ldr	r3, [pc, #508]	; (80033e8 <vKeyScan+0x7c0>)
 80031ea:	751a      	strb	r2, [r3, #20]
			}


			Key.Program_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 80031ec:	4b7e      	ldr	r3, [pc, #504]	; (80033e8 <vKeyScan+0x7c0>)
 80031ee:	7d9b      	ldrb	r3, [r3, #22]
 80031f0:	3301      	adds	r3, #1
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	4b7c      	ldr	r3, [pc, #496]	; (80033e8 <vKeyScan+0x7c0>)
 80031f6:	759a      	strb	r2, [r3, #22]
			if (Key.Program_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80031f8:	4b7b      	ldr	r3, [pc, #492]	; (80033e8 <vKeyScan+0x7c0>)
 80031fa:	7d9b      	ldrb	r3, [r3, #22]
 80031fc:	2b32      	cmp	r3, #50	; 0x32
 80031fe:	d924      	bls.n	800324a <vKeyScan+0x622>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Program_L;
 8003200:	2316      	movs	r3, #22
 8003202:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003204:	4b7a      	ldr	r3, [pc, #488]	; (80033f0 <vKeyScan+0x7c8>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	f107 010f 	add.w	r1, r7, #15
 800320c:	2300      	movs	r3, #0
 800320e:	2200      	movs	r2, #0
 8003210:	f004 fa2e 	bl	8007670 <xQueueGenericSend>

				Key.Program_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8003214:	4b74      	ldr	r3, [pc, #464]	; (80033e8 <vKeyScan+0x7c0>)
 8003216:	2206      	movs	r2, #6
 8003218:	751a      	strb	r2, [r3, #20]
				Key.Program_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 800321a:	4b73      	ldr	r3, [pc, #460]	; (80033e8 <vKeyScan+0x7c0>)
 800321c:	2225      	movs	r2, #37	; 0x25
 800321e:	759a      	strb	r2, [r3, #22]
			if (Key.Program_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003220:	e013      	b.n	800324a <vKeyScan+0x622>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_L >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 8003222:	4b71      	ldr	r3, [pc, #452]	; (80033e8 <vKeyScan+0x7c0>)
 8003224:	7d1b      	ldrb	r3, [r3, #20]
 8003226:	2b06      	cmp	r3, #6
 8003228:	d909      	bls.n	800323e <vKeyScan+0x616>
			{
				nKeyPressed = press_short_Program_L;
 800322a:	2315      	movs	r3, #21
 800322c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800322e:	4b70      	ldr	r3, [pc, #448]	; (80033f0 <vKeyScan+0x7c8>)
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	f107 010f 	add.w	r1, r7, #15
 8003236:	2300      	movs	r3, #0
 8003238:	2200      	movs	r2, #0
 800323a:	f004 fa19 	bl	8007670 <xQueueGenericSend>
			}

			Key.Program_ShortPress_L = 0;
 800323e:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <vKeyScan+0x7c0>)
 8003240:	2200      	movs	r2, #0
 8003242:	751a      	strb	r2, [r3, #20]
			Key.Program_LongPress_L = 0;
 8003244:	4b68      	ldr	r3, [pc, #416]	; (80033e8 <vKeyScan+0x7c0>)
 8003246:	2200      	movs	r2, #0
 8003248:	759a      	strb	r2, [r3, #22]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 2 && !(WelderUnit.IndicatorPanel.KeyState[3] == 1))
 800324a:	4b68      	ldr	r3, [pc, #416]	; (80033ec <vKeyScan+0x7c4>)
 800324c:	7f9b      	ldrb	r3, [r3, #30]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d134      	bne.n	80032bc <vKeyScan+0x694>
 8003252:	4b66      	ldr	r3, [pc, #408]	; (80033ec <vKeyScan+0x7c4>)
 8003254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d02f      	beq.n	80032bc <vKeyScan+0x694>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_R > CNT_KEY_SHORT && Key.Program_ShortPress_R != CNT_KEY_SHORT + 2)
 800325c:	4b62      	ldr	r3, [pc, #392]	; (80033e8 <vKeyScan+0x7c0>)
 800325e:	7d5b      	ldrb	r3, [r3, #21]
 8003260:	2b04      	cmp	r3, #4
 8003262:	d906      	bls.n	8003272 <vKeyScan+0x64a>
 8003264:	4b60      	ldr	r3, [pc, #384]	; (80033e8 <vKeyScan+0x7c0>)
 8003266:	7d5b      	ldrb	r3, [r3, #21]
 8003268:	2b06      	cmp	r3, #6
 800326a:	d002      	beq.n	8003272 <vKeyScan+0x64a>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_Program_R;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_R = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 800326c:	4b5e      	ldr	r3, [pc, #376]	; (80033e8 <vKeyScan+0x7c0>)
 800326e:	2207      	movs	r2, #7
 8003270:	755a      	strb	r2, [r3, #21]
			}

			if (Key.Program_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003272:	4b5d      	ldr	r3, [pc, #372]	; (80033e8 <vKeyScan+0x7c0>)
 8003274:	7d5b      	ldrb	r3, [r3, #21]
 8003276:	2b06      	cmp	r3, #6
 8003278:	d005      	beq.n	8003286 <vKeyScan+0x65e>
			{
				Key.Program_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 800327a:	4b5b      	ldr	r3, [pc, #364]	; (80033e8 <vKeyScan+0x7c0>)
 800327c:	7d5b      	ldrb	r3, [r3, #21]
 800327e:	3301      	adds	r3, #1
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <vKeyScan+0x7c0>)
 8003284:	755a      	strb	r2, [r3, #21]
			}


			Key.Program_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8003286:	4b58      	ldr	r3, [pc, #352]	; (80033e8 <vKeyScan+0x7c0>)
 8003288:	7ddb      	ldrb	r3, [r3, #23]
 800328a:	3301      	adds	r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b56      	ldr	r3, [pc, #344]	; (80033e8 <vKeyScan+0x7c0>)
 8003290:	75da      	strb	r2, [r3, #23]
			if (Key.Program_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003292:	4b55      	ldr	r3, [pc, #340]	; (80033e8 <vKeyScan+0x7c0>)
 8003294:	7ddb      	ldrb	r3, [r3, #23]
 8003296:	2b32      	cmp	r3, #50	; 0x32
 8003298:	d924      	bls.n	80032e4 <vKeyScan+0x6bc>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Program_R;
 800329a:	2318      	movs	r3, #24
 800329c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800329e:	4b54      	ldr	r3, [pc, #336]	; (80033f0 <vKeyScan+0x7c8>)
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	f107 010f 	add.w	r1, r7, #15
 80032a6:	2300      	movs	r3, #0
 80032a8:	2200      	movs	r2, #0
 80032aa:	f004 f9e1 	bl	8007670 <xQueueGenericSend>

				Key.Program_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80032ae:	4b4e      	ldr	r3, [pc, #312]	; (80033e8 <vKeyScan+0x7c0>)
 80032b0:	2206      	movs	r2, #6
 80032b2:	755a      	strb	r2, [r3, #21]
				Key.Program_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80032b4:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <vKeyScan+0x7c0>)
 80032b6:	2225      	movs	r2, #37	; 0x25
 80032b8:	75da      	strb	r2, [r3, #23]
			if (Key.Program_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80032ba:	e013      	b.n	80032e4 <vKeyScan+0x6bc>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_R >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 80032bc:	4b4a      	ldr	r3, [pc, #296]	; (80033e8 <vKeyScan+0x7c0>)
 80032be:	7d5b      	ldrb	r3, [r3, #21]
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d909      	bls.n	80032d8 <vKeyScan+0x6b0>
			{
				nKeyPressed = press_short_Program_R;
 80032c4:	2317      	movs	r3, #23
 80032c6:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80032c8:	4b49      	ldr	r3, [pc, #292]	; (80033f0 <vKeyScan+0x7c8>)
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	f107 010f 	add.w	r1, r7, #15
 80032d0:	2300      	movs	r3, #0
 80032d2:	2200      	movs	r2, #0
 80032d4:	f004 f9cc 	bl	8007670 <xQueueGenericSend>
			}

			Key.Program_ShortPress_R = 0;
 80032d8:	4b43      	ldr	r3, [pc, #268]	; (80033e8 <vKeyScan+0x7c0>)
 80032da:	2200      	movs	r2, #0
 80032dc:	755a      	strb	r2, [r3, #21]
			Key.Program_LongPress_R = 0;
 80032de:	4b42      	ldr	r3, [pc, #264]	; (80033e8 <vKeyScan+0x7c0>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	75da      	strb	r2, [r3, #23]
		}



		if (WelderUnit.IndicatorPanel.KeyState[1] == 128) //ВВЕРХ, ВНИЗ: [1], "-" - 128, "+" - 64, , STLED №5;
 80032e4:	4b41      	ldr	r3, [pc, #260]	; (80033ec <vKeyScan+0x7c4>)
 80032e6:	7f9b      	ldrb	r3, [r3, #30]
 80032e8:	2b80      	cmp	r3, #128	; 0x80
 80032ea:	d139      	bne.n	8003360 <vKeyScan+0x738>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Up_ShortPress > CNT_KEY_SHORT && Key.Up_ShortPress != CNT_KEY_SHORT + 2)
 80032ec:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <vKeyScan+0x7c0>)
 80032ee:	7e9b      	ldrb	r3, [r3, #26]
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d910      	bls.n	8003316 <vKeyScan+0x6ee>
 80032f4:	4b3c      	ldr	r3, [pc, #240]	; (80033e8 <vKeyScan+0x7c0>)
 80032f6:	7e9b      	ldrb	r3, [r3, #26]
 80032f8:	2b06      	cmp	r3, #6
 80032fa:	d00c      	beq.n	8003316 <vKeyScan+0x6ee>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Up;
 80032fc:	2323      	movs	r3, #35	; 0x23
 80032fe:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003300:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <vKeyScan+0x7c8>)
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	f107 010f 	add.w	r1, r7, #15
 8003308:	2300      	movs	r3, #0
 800330a:	2200      	movs	r2, #0
 800330c:	f004 f9b0 	bl	8007670 <xQueueGenericSend>

				Key.Up_ShortPress = 0; // Сброс счетика выдержки
 8003310:	4b35      	ldr	r3, [pc, #212]	; (80033e8 <vKeyScan+0x7c0>)
 8003312:	2200      	movs	r2, #0
 8003314:	769a      	strb	r2, [r3, #26]
			}

			if (Key.Up_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003316:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <vKeyScan+0x7c0>)
 8003318:	7e9b      	ldrb	r3, [r3, #26]
 800331a:	2b06      	cmp	r3, #6
 800331c:	d005      	beq.n	800332a <vKeyScan+0x702>
			{
				Key.Up_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 800331e:	4b32      	ldr	r3, [pc, #200]	; (80033e8 <vKeyScan+0x7c0>)
 8003320:	7e9b      	ldrb	r3, [r3, #26]
 8003322:	3301      	adds	r3, #1
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <vKeyScan+0x7c0>)
 8003328:	769a      	strb	r2, [r3, #26]
			}


			Key.Up_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <vKeyScan+0x7c0>)
 800332c:	7edb      	ldrb	r3, [r3, #27]
 800332e:	3301      	adds	r3, #1
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <vKeyScan+0x7c0>)
 8003334:	76da      	strb	r2, [r3, #27]
			if (Key.Up_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003336:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <vKeyScan+0x7c0>)
 8003338:	7edb      	ldrb	r3, [r3, #27]
 800333a:	2b32      	cmp	r3, #50	; 0x32
 800333c:	d916      	bls.n	800336c <vKeyScan+0x744>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Up;
 800333e:	2324      	movs	r3, #36	; 0x24
 8003340:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003342:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <vKeyScan+0x7c8>)
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	f107 010f 	add.w	r1, r7, #15
 800334a:	2300      	movs	r3, #0
 800334c:	2200      	movs	r2, #0
 800334e:	f004 f98f 	bl	8007670 <xQueueGenericSend>


				Key.Up_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8003352:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <vKeyScan+0x7c0>)
 8003354:	2206      	movs	r2, #6
 8003356:	769a      	strb	r2, [r3, #26]
				Key.Up_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003358:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <vKeyScan+0x7c0>)
 800335a:	2225      	movs	r2, #37	; 0x25
 800335c:	76da      	strb	r2, [r3, #27]
 800335e:	e005      	b.n	800336c <vKeyScan+0x744>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Up_ShortPress = 0;
 8003360:	4b21      	ldr	r3, [pc, #132]	; (80033e8 <vKeyScan+0x7c0>)
 8003362:	2200      	movs	r2, #0
 8003364:	769a      	strb	r2, [r3, #26]
			Key.Up_LongPress = 0;
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <vKeyScan+0x7c0>)
 8003368:	2200      	movs	r2, #0
 800336a:	76da      	strb	r2, [r3, #27]
		}
		if (WelderUnit.IndicatorPanel.KeyState[1] == 64)
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <vKeyScan+0x7c4>)
 800336e:	7f9b      	ldrb	r3, [r3, #30]
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d13f      	bne.n	80033f4 <vKeyScan+0x7cc>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Down_ShortPress > CNT_KEY_SHORT && Key.Down_ShortPress != CNT_KEY_SHORT + 2)
 8003374:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <vKeyScan+0x7c0>)
 8003376:	7f1b      	ldrb	r3, [r3, #28]
 8003378:	2b04      	cmp	r3, #4
 800337a:	d910      	bls.n	800339e <vKeyScan+0x776>
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <vKeyScan+0x7c0>)
 800337e:	7f1b      	ldrb	r3, [r3, #28]
 8003380:	2b06      	cmp	r3, #6
 8003382:	d00c      	beq.n	800339e <vKeyScan+0x776>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Down;
 8003384:	2321      	movs	r3, #33	; 0x21
 8003386:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003388:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <vKeyScan+0x7c8>)
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	f107 010f 	add.w	r1, r7, #15
 8003390:	2300      	movs	r3, #0
 8003392:	2200      	movs	r2, #0
 8003394:	f004 f96c 	bl	8007670 <xQueueGenericSend>

				Key.Down_ShortPress = 0; // Сброс счетика выдержки
 8003398:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <vKeyScan+0x7c0>)
 800339a:	2200      	movs	r2, #0
 800339c:	771a      	strb	r2, [r3, #28]
			}

			if (Key.Down_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 800339e:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <vKeyScan+0x7c0>)
 80033a0:	7f1b      	ldrb	r3, [r3, #28]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d005      	beq.n	80033b2 <vKeyScan+0x78a>
			{
				Key.Down_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <vKeyScan+0x7c0>)
 80033a8:	7f1b      	ldrb	r3, [r3, #28]
 80033aa:	3301      	adds	r3, #1
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <vKeyScan+0x7c0>)
 80033b0:	771a      	strb	r2, [r3, #28]
			}


			Key.Down_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <vKeyScan+0x7c0>)
 80033b4:	7f5b      	ldrb	r3, [r3, #29]
 80033b6:	3301      	adds	r3, #1
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <vKeyScan+0x7c0>)
 80033bc:	775a      	strb	r2, [r3, #29]
			if (Key.Down_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <vKeyScan+0x7c0>)
 80033c0:	7f5b      	ldrb	r3, [r3, #29]
 80033c2:	2b32      	cmp	r3, #50	; 0x32
 80033c4:	d91c      	bls.n	8003400 <vKeyScan+0x7d8>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Down;
 80033c6:	2322      	movs	r3, #34	; 0x22
 80033c8:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <vKeyScan+0x7c8>)
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	f107 010f 	add.w	r1, r7, #15
 80033d2:	2300      	movs	r3, #0
 80033d4:	2200      	movs	r2, #0
 80033d6:	f004 f94b 	bl	8007670 <xQueueGenericSend>


				Key.Down_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80033da:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <vKeyScan+0x7c0>)
 80033dc:	2206      	movs	r2, #6
 80033de:	771a      	strb	r2, [r3, #28]
				Key.Down_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80033e0:	4b01      	ldr	r3, [pc, #4]	; (80033e8 <vKeyScan+0x7c0>)
 80033e2:	2225      	movs	r2, #37	; 0x25
 80033e4:	775a      	strb	r2, [r3, #29]
 80033e6:	e00b      	b.n	8003400 <vKeyScan+0x7d8>
 80033e8:	20003da0 	.word	0x20003da0
 80033ec:	2000353c 	.word	0x2000353c
 80033f0:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Down_ShortPress = 0;
 80033f4:	4b94      	ldr	r3, [pc, #592]	; (8003648 <vKeyScan+0xa20>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	771a      	strb	r2, [r3, #28]
			Key.Down_LongPress = 0;
 80033fa:	4b93      	ldr	r3, [pc, #588]	; (8003648 <vKeyScan+0xa20>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	775a      	strb	r2, [r3, #29]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 32) // ПАРКОВКА, АВТО: [1], "-" - 32, "+" - 16, , STLED №5;
 8003400:	4b92      	ldr	r3, [pc, #584]	; (800364c <vKeyScan+0xa24>)
 8003402:	7f9b      	ldrb	r3, [r3, #30]
 8003404:	2b20      	cmp	r3, #32
 8003406:	d139      	bne.n	800347c <vKeyScan+0x854>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Parking_ShortPress > CNT_KEY_SHORT && Key.Parking_ShortPress != CNT_KEY_SHORT + 2)
 8003408:	4b8f      	ldr	r3, [pc, #572]	; (8003648 <vKeyScan+0xa20>)
 800340a:	7f9b      	ldrb	r3, [r3, #30]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d910      	bls.n	8003432 <vKeyScan+0x80a>
 8003410:	4b8d      	ldr	r3, [pc, #564]	; (8003648 <vKeyScan+0xa20>)
 8003412:	7f9b      	ldrb	r3, [r3, #30]
 8003414:	2b06      	cmp	r3, #6
 8003416:	d00c      	beq.n	8003432 <vKeyScan+0x80a>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Parking;
 8003418:	2319      	movs	r3, #25
 800341a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800341c:	4b8c      	ldr	r3, [pc, #560]	; (8003650 <vKeyScan+0xa28>)
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	f107 010f 	add.w	r1, r7, #15
 8003424:	2300      	movs	r3, #0
 8003426:	2200      	movs	r2, #0
 8003428:	f004 f922 	bl	8007670 <xQueueGenericSend>


				Key.Parking_ShortPress = 0; // Сброс счетика выдержки
 800342c:	4b86      	ldr	r3, [pc, #536]	; (8003648 <vKeyScan+0xa20>)
 800342e:	2200      	movs	r2, #0
 8003430:	779a      	strb	r2, [r3, #30]
			}

			if (Key.Parking_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003432:	4b85      	ldr	r3, [pc, #532]	; (8003648 <vKeyScan+0xa20>)
 8003434:	7f9b      	ldrb	r3, [r3, #30]
 8003436:	2b06      	cmp	r3, #6
 8003438:	d005      	beq.n	8003446 <vKeyScan+0x81e>
			{
				Key.Parking_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 800343a:	4b83      	ldr	r3, [pc, #524]	; (8003648 <vKeyScan+0xa20>)
 800343c:	7f9b      	ldrb	r3, [r3, #30]
 800343e:	3301      	adds	r3, #1
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4b81      	ldr	r3, [pc, #516]	; (8003648 <vKeyScan+0xa20>)
 8003444:	779a      	strb	r2, [r3, #30]
			}


			Key.Parking_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8003446:	4b80      	ldr	r3, [pc, #512]	; (8003648 <vKeyScan+0xa20>)
 8003448:	7fdb      	ldrb	r3, [r3, #31]
 800344a:	3301      	adds	r3, #1
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4b7e      	ldr	r3, [pc, #504]	; (8003648 <vKeyScan+0xa20>)
 8003450:	77da      	strb	r2, [r3, #31]
			if (Key.Parking_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003452:	4b7d      	ldr	r3, [pc, #500]	; (8003648 <vKeyScan+0xa20>)
 8003454:	7fdb      	ldrb	r3, [r3, #31]
 8003456:	2b32      	cmp	r3, #50	; 0x32
 8003458:	d916      	bls.n	8003488 <vKeyScan+0x860>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Parking;
 800345a:	231a      	movs	r3, #26
 800345c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800345e:	4b7c      	ldr	r3, [pc, #496]	; (8003650 <vKeyScan+0xa28>)
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	f107 010f 	add.w	r1, r7, #15
 8003466:	2300      	movs	r3, #0
 8003468:	2200      	movs	r2, #0
 800346a:	f004 f901 	bl	8007670 <xQueueGenericSend>

				Key.Parking_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800346e:	4b76      	ldr	r3, [pc, #472]	; (8003648 <vKeyScan+0xa20>)
 8003470:	2206      	movs	r2, #6
 8003472:	779a      	strb	r2, [r3, #30]
				Key.Parking_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003474:	4b74      	ldr	r3, [pc, #464]	; (8003648 <vKeyScan+0xa20>)
 8003476:	2225      	movs	r2, #37	; 0x25
 8003478:	77da      	strb	r2, [r3, #31]
 800347a:	e005      	b.n	8003488 <vKeyScan+0x860>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Parking_ShortPress = 0;
 800347c:	4b72      	ldr	r3, [pc, #456]	; (8003648 <vKeyScan+0xa20>)
 800347e:	2200      	movs	r2, #0
 8003480:	779a      	strb	r2, [r3, #30]
			Key.Parking_LongPress = 0;
 8003482:	4b71      	ldr	r3, [pc, #452]	; (8003648 <vKeyScan+0xa20>)
 8003484:	2200      	movs	r2, #0
 8003486:	77da      	strb	r2, [r3, #31]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 16)
 8003488:	4b70      	ldr	r3, [pc, #448]	; (800364c <vKeyScan+0xa24>)
 800348a:	7f9b      	ldrb	r3, [r3, #30]
 800348c:	2b10      	cmp	r3, #16
 800348e:	d144      	bne.n	800351a <vKeyScan+0x8f2>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Auto_ShortPress > CNT_KEY_SHORT && Key.Auto_ShortPress != CNT_KEY_SHORT + 2)
 8003490:	4b6d      	ldr	r3, [pc, #436]	; (8003648 <vKeyScan+0xa20>)
 8003492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003496:	2b04      	cmp	r3, #4
 8003498:	d912      	bls.n	80034c0 <vKeyScan+0x898>
 800349a:	4b6b      	ldr	r3, [pc, #428]	; (8003648 <vKeyScan+0xa20>)
 800349c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a0:	2b06      	cmp	r3, #6
 80034a2:	d00d      	beq.n	80034c0 <vKeyScan+0x898>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Auto;
 80034a4:	231b      	movs	r3, #27
 80034a6:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80034a8:	4b69      	ldr	r3, [pc, #420]	; (8003650 <vKeyScan+0xa28>)
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	f107 010f 	add.w	r1, r7, #15
 80034b0:	2300      	movs	r3, #0
 80034b2:	2200      	movs	r2, #0
 80034b4:	f004 f8dc 	bl	8007670 <xQueueGenericSend>

				Key.Auto_ShortPress = 0; // Сброс счетика выдержки
 80034b8:	4b63      	ldr	r3, [pc, #396]	; (8003648 <vKeyScan+0xa20>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2020 	strb.w	r2, [r3, #32]
			}

			if (Key.Auto_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80034c0:	4b61      	ldr	r3, [pc, #388]	; (8003648 <vKeyScan+0xa20>)
 80034c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d007      	beq.n	80034da <vKeyScan+0x8b2>
			{
				Key.Auto_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 80034ca:	4b5f      	ldr	r3, [pc, #380]	; (8003648 <vKeyScan+0xa20>)
 80034cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d0:	3301      	adds	r3, #1
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	4b5c      	ldr	r3, [pc, #368]	; (8003648 <vKeyScan+0xa20>)
 80034d6:	f883 2020 	strb.w	r2, [r3, #32]
			}


			Key.Auto_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 80034da:	4b5b      	ldr	r3, [pc, #364]	; (8003648 <vKeyScan+0xa20>)
 80034dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034e0:	3301      	adds	r3, #1
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	4b58      	ldr	r3, [pc, #352]	; (8003648 <vKeyScan+0xa20>)
 80034e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			if (Key.Auto_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80034ea:	4b57      	ldr	r3, [pc, #348]	; (8003648 <vKeyScan+0xa20>)
 80034ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034f0:	2b32      	cmp	r3, #50	; 0x32
 80034f2:	d91a      	bls.n	800352a <vKeyScan+0x902>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Auto;
 80034f4:	231c      	movs	r3, #28
 80034f6:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80034f8:	4b55      	ldr	r3, [pc, #340]	; (8003650 <vKeyScan+0xa28>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	f107 010f 	add.w	r1, r7, #15
 8003500:	2300      	movs	r3, #0
 8003502:	2200      	movs	r2, #0
 8003504:	f004 f8b4 	bl	8007670 <xQueueGenericSend>

				Key.Auto_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8003508:	4b4f      	ldr	r3, [pc, #316]	; (8003648 <vKeyScan+0xa20>)
 800350a:	2206      	movs	r2, #6
 800350c:	f883 2020 	strb.w	r2, [r3, #32]
				Key.Auto_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003510:	4b4d      	ldr	r3, [pc, #308]	; (8003648 <vKeyScan+0xa20>)
 8003512:	2225      	movs	r2, #37	; 0x25
 8003514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003518:	e007      	b.n	800352a <vKeyScan+0x902>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Auto_ShortPress = 0;
 800351a:	4b4b      	ldr	r3, [pc, #300]	; (8003648 <vKeyScan+0xa20>)
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2020 	strb.w	r2, [r3, #32]
			Key.Auto_LongPress = 0;
 8003522:	4b49      	ldr	r3, [pc, #292]	; (8003648 <vKeyScan+0xa20>)
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 8)
 800352a:	4b48      	ldr	r3, [pc, #288]	; (800364c <vKeyScan+0xa24>)
 800352c:	7f9b      	ldrb	r3, [r3, #30]
 800352e:	2b08      	cmp	r3, #8
 8003530:	d144      	bne.n	80035bc <vKeyScan+0x994>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.StartStop_ShortPress > CNT_KEY_SHORT && Key.StartStop_ShortPress != CNT_KEY_SHORT + 2)
 8003532:	4b45      	ldr	r3, [pc, #276]	; (8003648 <vKeyScan+0xa20>)
 8003534:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003538:	2b04      	cmp	r3, #4
 800353a:	d912      	bls.n	8003562 <vKeyScan+0x93a>
 800353c:	4b42      	ldr	r3, [pc, #264]	; (8003648 <vKeyScan+0xa20>)
 800353e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003542:	2b06      	cmp	r3, #6
 8003544:	d00d      	beq.n	8003562 <vKeyScan+0x93a>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_StartStop;
 8003546:	231d      	movs	r3, #29
 8003548:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800354a:	4b41      	ldr	r3, [pc, #260]	; (8003650 <vKeyScan+0xa28>)
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	f107 010f 	add.w	r1, r7, #15
 8003552:	2300      	movs	r3, #0
 8003554:	2200      	movs	r2, #0
 8003556:	f004 f88b 	bl	8007670 <xQueueGenericSend>

				Key.StartStop_ShortPress = 0; // Сброс счетика выдержки
 800355a:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <vKeyScan+0xa20>)
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}

			if (Key.StartStop_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003562:	4b39      	ldr	r3, [pc, #228]	; (8003648 <vKeyScan+0xa20>)
 8003564:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003568:	2b06      	cmp	r3, #6
 800356a:	d007      	beq.n	800357c <vKeyScan+0x954>
			{
				Key.StartStop_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 800356c:	4b36      	ldr	r3, [pc, #216]	; (8003648 <vKeyScan+0xa20>)
 800356e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003572:	3301      	adds	r3, #1
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4b34      	ldr	r3, [pc, #208]	; (8003648 <vKeyScan+0xa20>)
 8003578:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}


			Key.StartStop_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 800357c:	4b32      	ldr	r3, [pc, #200]	; (8003648 <vKeyScan+0xa20>)
 800357e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003582:	3301      	adds	r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4b30      	ldr	r3, [pc, #192]	; (8003648 <vKeyScan+0xa20>)
 8003588:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			if (Key.StartStop_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 800358c:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <vKeyScan+0xa20>)
 800358e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003592:	2b32      	cmp	r3, #50	; 0x32
 8003594:	d91a      	bls.n	80035cc <vKeyScan+0x9a4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_StartStop;
 8003596:	231e      	movs	r3, #30
 8003598:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800359a:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <vKeyScan+0xa28>)
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	f107 010f 	add.w	r1, r7, #15
 80035a2:	2300      	movs	r3, #0
 80035a4:	2200      	movs	r2, #0
 80035a6:	f004 f863 	bl	8007670 <xQueueGenericSend>

				Key.StartStop_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80035aa:	4b27      	ldr	r3, [pc, #156]	; (8003648 <vKeyScan+0xa20>)
 80035ac:	2206      	movs	r2, #6
 80035ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				Key.StartStop_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80035b2:	4b25      	ldr	r3, [pc, #148]	; (8003648 <vKeyScan+0xa20>)
 80035b4:	2225      	movs	r2, #37	; 0x25
 80035b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80035ba:	e007      	b.n	80035cc <vKeyScan+0x9a4>
			}

		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.StartStop_ShortPress = 0;
 80035bc:	4b22      	ldr	r3, [pc, #136]	; (8003648 <vKeyScan+0xa20>)
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			Key.StartStop_LongPress = 0;
 80035c4:	4b20      	ldr	r3, [pc, #128]	; (8003648 <vKeyScan+0xa20>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}

		// *********************************************************Комбинации клавишь*********************************************************

		if (WelderUnit.IndicatorPanel.KeyState[3] == 1 && WelderUnit.IndicatorPanel.KeyState[1] == 2) // "ПРОГРАММА" "-" одновременно с "+"
 80035cc:	4b1f      	ldr	r3, [pc, #124]	; (800364c <vKeyScan+0xa24>)
 80035ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d11f      	bne.n	8003616 <vKeyScan+0x9ee>
 80035d6:	4b1d      	ldr	r3, [pc, #116]	; (800364c <vKeyScan+0xa24>)
 80035d8:	7f9b      	ldrb	r3, [r3, #30]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d11b      	bne.n	8003616 <vKeyScan+0x9ee>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_L_and_R > CNT_KEY_SHORT && Key.Program_ShortPress_L_and_R != CNT_KEY_SHORT + 2)
 80035de:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <vKeyScan+0xa20>)
 80035e0:	7e1b      	ldrb	r3, [r3, #24]
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d906      	bls.n	80035f4 <vKeyScan+0x9cc>
 80035e6:	4b18      	ldr	r3, [pc, #96]	; (8003648 <vKeyScan+0xa20>)
 80035e8:	7e1b      	ldrb	r3, [r3, #24]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d002      	beq.n	80035f4 <vKeyScan+0x9cc>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_StartStop;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_L_and_R = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <vKeyScan+0xa20>)
 80035f0:	2207      	movs	r2, #7
 80035f2:	761a      	strb	r2, [r3, #24]
			}

			if (Key.Program_ShortPress_L_and_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80035f4:	4b14      	ldr	r3, [pc, #80]	; (8003648 <vKeyScan+0xa20>)
 80035f6:	7e1b      	ldrb	r3, [r3, #24]
 80035f8:	2b06      	cmp	r3, #6
 80035fa:	d005      	beq.n	8003608 <vKeyScan+0x9e0>
			{
				Key.Program_ShortPress_L_and_R++; // Счетчик для определения короткого нажатия на кнопку
 80035fc:	4b12      	ldr	r3, [pc, #72]	; (8003648 <vKeyScan+0xa20>)
 80035fe:	7e1b      	ldrb	r3, [r3, #24]
 8003600:	3301      	adds	r3, #1
 8003602:	b2da      	uxtb	r2, r3
 8003604:	4b10      	ldr	r3, [pc, #64]	; (8003648 <vKeyScan+0xa20>)
 8003606:	761a      	strb	r2, [r3, #24]
			}


			Key.Program_LongPress_L_and_R++; // Счетчик для определения длинного нажатия на кнопку
 8003608:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <vKeyScan+0xa20>)
 800360a:	7e5b      	ldrb	r3, [r3, #25]
 800360c:	3301      	adds	r3, #1
 800360e:	b2da      	uxtb	r2, r3
 8003610:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <vKeyScan+0xa20>)
 8003612:	765a      	strb	r2, [r3, #25]
			if (Key.Program_LongPress_L_and_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003614:	e013      	b.n	800363e <vKeyScan+0xa16>
			}

		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_L_and_R >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <vKeyScan+0xa20>)
 8003618:	7e1b      	ldrb	r3, [r3, #24]
 800361a:	2b06      	cmp	r3, #6
 800361c:	d909      	bls.n	8003632 <vKeyScan+0xa0a>
			{
				nKeyPressed = press_short_Program_L_and_R;
 800361e:	231f      	movs	r3, #31
 8003620:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003622:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <vKeyScan+0xa28>)
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	f107 010f 	add.w	r1, r7, #15
 800362a:	2300      	movs	r3, #0
 800362c:	2200      	movs	r2, #0
 800362e:	f004 f81f 	bl	8007670 <xQueueGenericSend>
//
//				Key.Program_ShortPress_R = 0;
//				Key.Program_LongPress_R = 0;
			}

			Key.Program_ShortPress_L_and_R = 0;
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <vKeyScan+0xa20>)
 8003634:	2200      	movs	r2, #0
 8003636:	761a      	strb	r2, [r3, #24]
			Key.Program_LongPress_L_and_R = 0;
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <vKeyScan+0xa20>)
 800363a:	2200      	movs	r2, #0
 800363c:	765a      	strb	r2, [r3, #25]

		}



		vTaskDelay(TIME_KEY_SCAN / portTICK_RATE_MS);
 800363e:	2014      	movs	r0, #20
 8003640:	f004 fe5c 	bl	80082fc <vTaskDelay>
		PCB_KeyScan();
 8003644:	f7ff baf7 	b.w	8002c36 <vKeyScan+0xe>
 8003648:	20003da0 	.word	0x20003da0
 800364c:	2000353c 	.word	0x2000353c
 8003650:	20003d90 	.word	0x20003d90

08003654 <vIndicatorPanel_Out>:
	}
	vTaskDelete(NULL);
}

void vIndicatorPanel_Out(void *pvParameters)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	WelderUnit.Xs = 30;
 800365c:	4b2c      	ldr	r3, [pc, #176]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 800365e:	221e      	movs	r2, #30
 8003660:	801a      	strh	r2, [r3, #0]
	WelderUnit.Xf = 90;
 8003662:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 8003664:	225a      	movs	r2, #90	; 0x5a
 8003666:	805a      	strh	r2, [r3, #2]
	WelderUnit.Steps = 0;
 8003668:	4b29      	ldr	r3, [pc, #164]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 800366a:	2200      	movs	r2, #0
 800366c:	81da      	strh	r2, [r3, #14]
	WelderUnit.Delay_s = 10;
 800366e:	4b28      	ldr	r3, [pc, #160]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 8003670:	220a      	movs	r2, #10
 8003672:	729a      	strb	r2, [r3, #10]
	WelderUnit.Speed = 120;
 8003674:	4b26      	ldr	r3, [pc, #152]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 8003676:	2278      	movs	r2, #120	; 0x78
 8003678:	80da      	strh	r2, [r3, #6]
	WelderUnit.Delay_f = 20;
 800367a:	4b25      	ldr	r3, [pc, #148]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 800367c:	2214      	movs	r2, #20
 800367e:	72da      	strb	r2, [r3, #11]
	WelderUnit.Program = 4;
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 8003682:	2204      	movs	r2, #4
 8003684:	819a      	strh	r2, [r3, #12]

	WelderUnit.GoTo = WelderUnit.Xf;
 8003686:	4b22      	ldr	r3, [pc, #136]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 8003688:	885a      	ldrh	r2, [r3, #2]
 800368a:	4b21      	ldr	r3, [pc, #132]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 800368c:	811a      	strh	r2, [r3, #8]
	WelderUnit.Position = 0;
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 8003690:	2200      	movs	r2, #0
 8003692:	809a      	strh	r2, [r3, #4]
	WelderUnit.State = 0;
 8003694:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 8003696:	2200      	movs	r2, #0
 8003698:	741a      	strb	r2, [r3, #16]

	WelderUnit.IndicatorPanel.Brightness = 2;
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 800369c:	2202      	movs	r2, #2
 800369e:	771a      	strb	r2, [r3, #28]

//	WelderUnit.IndicatorPanel.LEDsState |= LED_AUTO;
//
//	WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING;

	IndicatorPanel_Ini();
 80036a0:	f7fd fa0c 	bl	8000abc <IndicatorPanel_Ini>

	IndicatorPanel_SetBrightness(&WelderUnit.IndicatorPanel);
 80036a4:	481b      	ldr	r0, [pc, #108]	; (8003714 <vIndicatorPanel_Out+0xc0>)
 80036a6:	f7fd faf3 	bl	8000c90 <IndicatorPanel_SetBrightness>

	vTaskDelay(100 / portTICK_RATE_MS);
 80036aa:	2064      	movs	r0, #100	; 0x64
 80036ac:	f004 fe26 	bl	80082fc <vTaskDelay>

		//PCB_LEDs_OUT(PCB_LEDs_OUT(LEDs_val))



		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 80036b0:	4b17      	ldr	r3, [pc, #92]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036b2:	7c1b      	ldrb	r3, [r3, #16]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <vIndicatorPanel_Out+0x70>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Position;
 80036bc:	4b14      	ldr	r3, [pc, #80]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036be:	889a      	ldrh	r2, [r3, #4]
 80036c0:	4b13      	ldr	r3, [pc, #76]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036c2:	825a      	strh	r2, [r3, #18]
		}

		if (!(WelderUnit.State & 0x01)) // Если каретка не в движении то отображать точку начала варки
 80036c4:	4b12      	ldr	r3, [pc, #72]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036c6:	7c1b      	ldrb	r3, [r3, #16]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d103      	bne.n	80036d8 <vIndicatorPanel_Out+0x84>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Xs;
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036d2:	881a      	ldrh	r2, [r3, #0]
 80036d4:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036d6:	825a      	strh	r2, [r3, #18]
		}

		WelderUnit.IndicatorPanel.Xf = WelderUnit.Xf;
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036da:	885a      	ldrh	r2, [r3, #2]
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036de:	829a      	strh	r2, [r3, #20]
		WelderUnit.IndicatorPanel.Delay_s = WelderUnit.Delay_s;
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036e2:	7a9a      	ldrb	r2, [r3, #10]
 80036e4:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036e6:	759a      	strb	r2, [r3, #22]
		WelderUnit.IndicatorPanel.Speed = WelderUnit.Speed;
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036ea:	88da      	ldrh	r2, [r3, #6]
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036ee:	831a      	strh	r2, [r3, #24]
		WelderUnit.IndicatorPanel.Delay_f = WelderUnit.Delay_f;
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036f2:	7ada      	ldrb	r2, [r3, #11]
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036f6:	75da      	strb	r2, [r3, #23]
		WelderUnit.IndicatorPanel.Program = WelderUnit.Program;
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036fa:	899a      	ldrh	r2, [r3, #12]
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <vIndicatorPanel_Out+0xbc>)
 80036fe:	835a      	strh	r2, [r3, #26]


		IndicatorPanel_SetValue(&WelderUnit.IndicatorPanel);
 8003700:	4804      	ldr	r0, [pc, #16]	; (8003714 <vIndicatorPanel_Out+0xc0>)
 8003702:	f7fd f9f5 	bl	8000af0 <IndicatorPanel_SetValue>

		vTaskDelay(100 / portTICK_RATE_MS);
 8003706:	2064      	movs	r0, #100	; 0x64
 8003708:	f004 fdf8 	bl	80082fc <vTaskDelay>
		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 800370c:	e7d0      	b.n	80036b0 <vIndicatorPanel_Out+0x5c>
 800370e:	bf00      	nop
 8003710:	2000353c 	.word	0x2000353c
 8003714:	2000354e 	.word	0x2000354e

08003718 <vBuzzer_beep>:
	vTaskDelete(NULL);
}


void vBuzzer_beep(void *pvParameters)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	uint8_t lReceivedValue;
	portBASE_TYPE xStatus;

	for(;;)
	{
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 8003720:	4b73      	ldr	r3, [pc, #460]	; (80038f0 <vBuzzer_beep+0x1d8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f107 010f 	add.w	r1, r7, #15
 8003728:	f04f 32ff 	mov.w	r2, #4294967295
 800372c:	4618      	mov	r0, r3
 800372e:	f004 f8f7 	bl	8007920 <xQueueReceive>
 8003732:	6138      	str	r0, [r7, #16]

		if( xStatus == pdPASS ) // Если данные были успешно приняты из очереди
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b01      	cmp	r3, #1
 8003738:	f040 80d5 	bne.w	80038e6 <vBuzzer_beep+0x1ce>
		{

		switch(lReceivedValue)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	2b05      	cmp	r3, #5
 8003740:	f200 80d2 	bhi.w	80038e8 <vBuzzer_beep+0x1d0>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <vBuzzer_beep+0x34>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003765 	.word	0x08003765
 8003750:	08003771 	.word	0x08003771
 8003754:	08003793 	.word	0x08003793
 8003758:	080037c7 	.word	0x080037c7
 800375c:	08003809 	.word	0x08003809
 8003760:	080038b3 	.word	0x080038b3
		{
		case beep_off:
		{
			BUZZER_OFF
 8003764:	2200      	movs	r2, #0
 8003766:	2110      	movs	r1, #16
 8003768:	4862      	ldr	r0, [pc, #392]	; (80038f4 <vBuzzer_beep+0x1dc>)
 800376a:	f001 fa70 	bl	8004c4e <HAL_GPIO_WritePin>
			break;
 800376e:	e0bb      	b.n	80038e8 <vBuzzer_beep+0x1d0>
		}

		case beep_click:
		{
			BUZZER_ON
 8003770:	2201      	movs	r2, #1
 8003772:	2110      	movs	r1, #16
 8003774:	485f      	ldr	r0, [pc, #380]	; (80038f4 <vBuzzer_beep+0x1dc>)
 8003776:	f001 fa6a 	bl	8004c4e <HAL_GPIO_WritePin>
			vTaskDelay(10 / portTICK_RATE_MS);
 800377a:	200a      	movs	r0, #10
 800377c:	f004 fdbe 	bl	80082fc <vTaskDelay>
			BUZZER_OFF
 8003780:	2200      	movs	r2, #0
 8003782:	2110      	movs	r1, #16
 8003784:	485b      	ldr	r0, [pc, #364]	; (80038f4 <vBuzzer_beep+0x1dc>)
 8003786:	f001 fa62 	bl	8004c4e <HAL_GPIO_WritePin>
			vTaskDelay(50 / portTICK_RATE_MS);
 800378a:	2032      	movs	r0, #50	; 0x32
 800378c:	f004 fdb6 	bl	80082fc <vTaskDelay>
			break;
 8003790:	e0aa      	b.n	80038e8 <vBuzzer_beep+0x1d0>
		}

		case beep_1short:
		{
			for(uint16_t i = 0; i < 10; i++)
 8003792:	2300      	movs	r3, #0
 8003794:	83fb      	strh	r3, [r7, #30]
 8003796:	e012      	b.n	80037be <vBuzzer_beep+0xa6>
			    {
			    BUZZER_ON
 8003798:	2201      	movs	r2, #1
 800379a:	2110      	movs	r1, #16
 800379c:	4855      	ldr	r0, [pc, #340]	; (80038f4 <vBuzzer_beep+0x1dc>)
 800379e:	f001 fa56 	bl	8004c4e <HAL_GPIO_WritePin>
			    vTaskDelay(1 / portTICK_RATE_MS);
 80037a2:	2001      	movs	r0, #1
 80037a4:	f004 fdaa 	bl	80082fc <vTaskDelay>
			    BUZZER_OFF
 80037a8:	2200      	movs	r2, #0
 80037aa:	2110      	movs	r1, #16
 80037ac:	4851      	ldr	r0, [pc, #324]	; (80038f4 <vBuzzer_beep+0x1dc>)
 80037ae:	f001 fa4e 	bl	8004c4e <HAL_GPIO_WritePin>
			    vTaskDelay(1 / portTICK_RATE_MS);
 80037b2:	2001      	movs	r0, #1
 80037b4:	f004 fda2 	bl	80082fc <vTaskDelay>
			for(uint16_t i = 0; i < 10; i++)
 80037b8:	8bfb      	ldrh	r3, [r7, #30]
 80037ba:	3301      	adds	r3, #1
 80037bc:	83fb      	strh	r3, [r7, #30]
 80037be:	8bfb      	ldrh	r3, [r7, #30]
 80037c0:	2b09      	cmp	r3, #9
 80037c2:	d9e9      	bls.n	8003798 <vBuzzer_beep+0x80>
			    }
			break;
 80037c4:	e090      	b.n	80038e8 <vBuzzer_beep+0x1d0>
		}

		case beep_2short:
		{
			BUZZER_ON
 80037c6:	2201      	movs	r2, #1
 80037c8:	2110      	movs	r1, #16
 80037ca:	484a      	ldr	r0, [pc, #296]	; (80038f4 <vBuzzer_beep+0x1dc>)
 80037cc:	f001 fa3f 	bl	8004c4e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80037d0:	2064      	movs	r0, #100	; 0x64
 80037d2:	f004 fd93 	bl	80082fc <vTaskDelay>
			BUZZER_OFF
 80037d6:	2200      	movs	r2, #0
 80037d8:	2110      	movs	r1, #16
 80037da:	4846      	ldr	r0, [pc, #280]	; (80038f4 <vBuzzer_beep+0x1dc>)
 80037dc:	f001 fa37 	bl	8004c4e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80037e0:	2064      	movs	r0, #100	; 0x64
 80037e2:	f004 fd8b 	bl	80082fc <vTaskDelay>

			BUZZER_ON
 80037e6:	2201      	movs	r2, #1
 80037e8:	2110      	movs	r1, #16
 80037ea:	4842      	ldr	r0, [pc, #264]	; (80038f4 <vBuzzer_beep+0x1dc>)
 80037ec:	f001 fa2f 	bl	8004c4e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80037f0:	2064      	movs	r0, #100	; 0x64
 80037f2:	f004 fd83 	bl	80082fc <vTaskDelay>
			BUZZER_OFF
 80037f6:	2200      	movs	r2, #0
 80037f8:	2110      	movs	r1, #16
 80037fa:	483e      	ldr	r0, [pc, #248]	; (80038f4 <vBuzzer_beep+0x1dc>)
 80037fc:	f001 fa27 	bl	8004c4e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003800:	2064      	movs	r0, #100	; 0x64
 8003802:	f004 fd7b 	bl	80082fc <vTaskDelay>
			break;
 8003806:	e06f      	b.n	80038e8 <vBuzzer_beep+0x1d0>
		}

		case beep_3short:
		{
			for(uint16_t i = 0; i < 40; i++)
 8003808:	2300      	movs	r3, #0
 800380a:	83bb      	strh	r3, [r7, #28]
 800380c:	e012      	b.n	8003834 <vBuzzer_beep+0x11c>
			    {
				BUZZER_ON
 800380e:	2201      	movs	r2, #1
 8003810:	2110      	movs	r1, #16
 8003812:	4838      	ldr	r0, [pc, #224]	; (80038f4 <vBuzzer_beep+0x1dc>)
 8003814:	f001 fa1b 	bl	8004c4e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003818:	2001      	movs	r0, #1
 800381a:	f004 fd6f 	bl	80082fc <vTaskDelay>
				BUZZER_OFF
 800381e:	2200      	movs	r2, #0
 8003820:	2110      	movs	r1, #16
 8003822:	4834      	ldr	r0, [pc, #208]	; (80038f4 <vBuzzer_beep+0x1dc>)
 8003824:	f001 fa13 	bl	8004c4e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003828:	2001      	movs	r0, #1
 800382a:	f004 fd67 	bl	80082fc <vTaskDelay>
			for(uint16_t i = 0; i < 40; i++)
 800382e:	8bbb      	ldrh	r3, [r7, #28]
 8003830:	3301      	adds	r3, #1
 8003832:	83bb      	strh	r3, [r7, #28]
 8003834:	8bbb      	ldrh	r3, [r7, #28]
 8003836:	2b27      	cmp	r3, #39	; 0x27
 8003838:	d9e9      	bls.n	800380e <vBuzzer_beep+0xf6>
			    }

			vTaskDelay(40 / portTICK_RATE_MS);
 800383a:	2028      	movs	r0, #40	; 0x28
 800383c:	f004 fd5e 	bl	80082fc <vTaskDelay>

			for(uint16_t i = 0; i < 40; i++)
 8003840:	2300      	movs	r3, #0
 8003842:	837b      	strh	r3, [r7, #26]
 8003844:	e012      	b.n	800386c <vBuzzer_beep+0x154>
			    {
				BUZZER_ON
 8003846:	2201      	movs	r2, #1
 8003848:	2110      	movs	r1, #16
 800384a:	482a      	ldr	r0, [pc, #168]	; (80038f4 <vBuzzer_beep+0x1dc>)
 800384c:	f001 f9ff 	bl	8004c4e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003850:	2001      	movs	r0, #1
 8003852:	f004 fd53 	bl	80082fc <vTaskDelay>
				BUZZER_OFF
 8003856:	2200      	movs	r2, #0
 8003858:	2110      	movs	r1, #16
 800385a:	4826      	ldr	r0, [pc, #152]	; (80038f4 <vBuzzer_beep+0x1dc>)
 800385c:	f001 f9f7 	bl	8004c4e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003860:	2001      	movs	r0, #1
 8003862:	f004 fd4b 	bl	80082fc <vTaskDelay>
			for(uint16_t i = 0; i < 40; i++)
 8003866:	8b7b      	ldrh	r3, [r7, #26]
 8003868:	3301      	adds	r3, #1
 800386a:	837b      	strh	r3, [r7, #26]
 800386c:	8b7b      	ldrh	r3, [r7, #26]
 800386e:	2b27      	cmp	r3, #39	; 0x27
 8003870:	d9e9      	bls.n	8003846 <vBuzzer_beep+0x12e>
			    }

			vTaskDelay(40 / portTICK_RATE_MS);
 8003872:	2028      	movs	r0, #40	; 0x28
 8003874:	f004 fd42 	bl	80082fc <vTaskDelay>

			for(uint16_t i = 0; i < 50; i++)
 8003878:	2300      	movs	r3, #0
 800387a:	833b      	strh	r3, [r7, #24]
 800387c:	e012      	b.n	80038a4 <vBuzzer_beep+0x18c>
			    {
				BUZZER_ON
 800387e:	2201      	movs	r2, #1
 8003880:	2110      	movs	r1, #16
 8003882:	481c      	ldr	r0, [pc, #112]	; (80038f4 <vBuzzer_beep+0x1dc>)
 8003884:	f001 f9e3 	bl	8004c4e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003888:	2001      	movs	r0, #1
 800388a:	f004 fd37 	bl	80082fc <vTaskDelay>
				BUZZER_OFF
 800388e:	2200      	movs	r2, #0
 8003890:	2110      	movs	r1, #16
 8003892:	4818      	ldr	r0, [pc, #96]	; (80038f4 <vBuzzer_beep+0x1dc>)
 8003894:	f001 f9db 	bl	8004c4e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003898:	2001      	movs	r0, #1
 800389a:	f004 fd2f 	bl	80082fc <vTaskDelay>
			for(uint16_t i = 0; i < 50; i++)
 800389e:	8b3b      	ldrh	r3, [r7, #24]
 80038a0:	3301      	adds	r3, #1
 80038a2:	833b      	strh	r3, [r7, #24]
 80038a4:	8b3b      	ldrh	r3, [r7, #24]
 80038a6:	2b31      	cmp	r3, #49	; 0x31
 80038a8:	d9e9      	bls.n	800387e <vBuzzer_beep+0x166>
			    }

			vTaskDelay(40 / portTICK_RATE_MS);
 80038aa:	2028      	movs	r0, #40	; 0x28
 80038ac:	f004 fd26 	bl	80082fc <vTaskDelay>

			break;
 80038b0:	e01a      	b.n	80038e8 <vBuzzer_beep+0x1d0>
		}

		case beep_long:
		{
			for(uint16_t i = 0; i < 200; i++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	82fb      	strh	r3, [r7, #22]
 80038b6:	e012      	b.n	80038de <vBuzzer_beep+0x1c6>
			    {
				BUZZER_ON
 80038b8:	2201      	movs	r2, #1
 80038ba:	2110      	movs	r1, #16
 80038bc:	480d      	ldr	r0, [pc, #52]	; (80038f4 <vBuzzer_beep+0x1dc>)
 80038be:	f001 f9c6 	bl	8004c4e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 80038c2:	2001      	movs	r0, #1
 80038c4:	f004 fd1a 	bl	80082fc <vTaskDelay>
				BUZZER_OFF
 80038c8:	2200      	movs	r2, #0
 80038ca:	2110      	movs	r1, #16
 80038cc:	4809      	ldr	r0, [pc, #36]	; (80038f4 <vBuzzer_beep+0x1dc>)
 80038ce:	f001 f9be 	bl	8004c4e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 80038d2:	2001      	movs	r0, #1
 80038d4:	f004 fd12 	bl	80082fc <vTaskDelay>
			for(uint16_t i = 0; i < 200; i++)
 80038d8:	8afb      	ldrh	r3, [r7, #22]
 80038da:	3301      	adds	r3, #1
 80038dc:	82fb      	strh	r3, [r7, #22]
 80038de:	8afb      	ldrh	r3, [r7, #22]
 80038e0:	2bc7      	cmp	r3, #199	; 0xc7
 80038e2:	d9e9      	bls.n	80038b8 <vBuzzer_beep+0x1a0>
			    }
			break;
 80038e4:	e000      	b.n	80038e8 <vBuzzer_beep+0x1d0>
		}

		}

		}
 80038e6:	bf00      	nop

		vTaskMissedYield(); // Переключение контекста.
 80038e8:	f005 f810 	bl	800890c <vTaskMissedYield>
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 80038ec:	e718      	b.n	8003720 <vBuzzer_beep+0x8>
 80038ee:	bf00      	nop
 80038f0:	20003538 	.word	0x20003538
 80038f4:	40010800 	.word	0x40010800

080038f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038fc:	f000 fb84 	bl	8004008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003900:	f000 f81a 	bl	8003938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003904:	f000 f90c 	bl	8003b20 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003908:	f000 f85c 	bl	80039c4 <MX_SPI1_Init>
  MX_TIM3_Init();
 800390c:	f000 f892 	bl	8003a34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003910:	f003 fc0e 	bl	8007130 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003914:	4a05      	ldr	r2, [pc, #20]	; (800392c <main+0x34>)
 8003916:	2100      	movs	r1, #0
 8003918:	4805      	ldr	r0, [pc, #20]	; (8003930 <main+0x38>)
 800391a:	f003 fc3b 	bl	8007194 <osThreadNew>
 800391e:	4603      	mov	r3, r0
 8003920:	4a04      	ldr	r2, [pc, #16]	; (8003934 <main+0x3c>)
 8003922:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  freeRTOS_Tasks_Ini();
 8003924:	f7fd ffb0 	bl	8001888 <freeRTOS_Tasks_Ini>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003928:	e7fe      	b.n	8003928 <main+0x30>
 800392a:	bf00      	nop
 800392c:	08009a00 	.word	0x08009a00
 8003930:	08003d1d 	.word	0x08003d1d
 8003934:	20003dd0 	.word	0x20003dd0

08003938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b090      	sub	sp, #64	; 0x40
 800393c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800393e:	f107 0318 	add.w	r3, r7, #24
 8003942:	2228      	movs	r2, #40	; 0x28
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f005 ffec 	bl	8009924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	609a      	str	r2, [r3, #8]
 8003956:	60da      	str	r2, [r3, #12]
 8003958:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800395a:	2301      	movs	r3, #1
 800395c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800395e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003962:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003964:	2300      	movs	r3, #0
 8003966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003968:	2301      	movs	r3, #1
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800396c:	2302      	movs	r3, #2
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003974:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003976:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800397a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800397c:	f107 0318 	add.w	r3, r7, #24
 8003980:	4618      	mov	r0, r3
 8003982:	f001 f995 	bl	8004cb0 <HAL_RCC_OscConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800398c:	f000 f9cf 	bl	8003d2e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003990:	230f      	movs	r3, #15
 8003992:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003994:	2302      	movs	r3, #2
 8003996:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800399c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039a6:	1d3b      	adds	r3, r7, #4
 80039a8:	2102      	movs	r1, #2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f001 fc00 	bl	80051b0 <HAL_RCC_ClockConfig>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80039b6:	f000 f9ba 	bl	8003d2e <Error_Handler>
  }
}
 80039ba:	bf00      	nop
 80039bc:	3740      	adds	r7, #64	; 0x40
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039c8:	4b18      	ldr	r3, [pc, #96]	; (8003a2c <MX_SPI1_Init+0x68>)
 80039ca:	4a19      	ldr	r2, [pc, #100]	; (8003a30 <MX_SPI1_Init+0x6c>)
 80039cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039ce:	4b17      	ldr	r3, [pc, #92]	; (8003a2c <MX_SPI1_Init+0x68>)
 80039d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80039d6:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <MX_SPI1_Init+0x68>)
 80039d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039de:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <MX_SPI1_Init+0x68>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80039e4:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <MX_SPI1_Init+0x68>)
 80039e6:	2202      	movs	r2, #2
 80039e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <MX_SPI1_Init+0x68>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <MX_SPI1_Init+0x68>)
 80039f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <MX_SPI1_Init+0x68>)
 80039fa:	2238      	movs	r2, #56	; 0x38
 80039fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80039fe:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <MX_SPI1_Init+0x68>)
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <MX_SPI1_Init+0x68>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a0a:	4b08      	ldr	r3, [pc, #32]	; (8003a2c <MX_SPI1_Init+0x68>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <MX_SPI1_Init+0x68>)
 8003a12:	220a      	movs	r2, #10
 8003a14:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a16:	4805      	ldr	r0, [pc, #20]	; (8003a2c <MX_SPI1_Init+0x68>)
 8003a18:	f001 fd32 	bl	8005480 <HAL_SPI_Init>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8003a22:	f000 f984 	bl	8003d2e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20003e1c 	.word	0x20003e1c
 8003a30:	40013000 	.word	0x40013000

08003a34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08e      	sub	sp, #56	; 0x38
 8003a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	609a      	str	r2, [r3, #8]
 8003a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a48:	f107 0320 	add.w	r3, r7, #32
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
 8003a60:	615a      	str	r2, [r3, #20]
 8003a62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a64:	4b2c      	ldr	r3, [pc, #176]	; (8003b18 <MX_TIM3_Init+0xe4>)
 8003a66:	4a2d      	ldr	r2, [pc, #180]	; (8003b1c <MX_TIM3_Init+0xe8>)
 8003a68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8003a6a:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <MX_TIM3_Init+0xe4>)
 8003a6c:	2247      	movs	r2, #71	; 0x47
 8003a6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a70:	4b29      	ldr	r3, [pc, #164]	; (8003b18 <MX_TIM3_Init+0xe4>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003a76:	4b28      	ldr	r3, [pc, #160]	; (8003b18 <MX_TIM3_Init+0xe4>)
 8003a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a7e:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <MX_TIM3_Init+0xe4>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a84:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <MX_TIM3_Init+0xe4>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a8a:	4823      	ldr	r0, [pc, #140]	; (8003b18 <MX_TIM3_Init+0xe4>)
 8003a8c:	f002 fb68 	bl	8006160 <HAL_TIM_Base_Init>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003a96:	f000 f94a 	bl	8003d2e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003aa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	481c      	ldr	r0, [pc, #112]	; (8003b18 <MX_TIM3_Init+0xe4>)
 8003aa8:	f002 fef2 	bl	8006890 <HAL_TIM_ConfigClockSource>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003ab2:	f000 f93c 	bl	8003d2e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ab6:	4818      	ldr	r0, [pc, #96]	; (8003b18 <MX_TIM3_Init+0xe4>)
 8003ab8:	f002 fba1 	bl	80061fe <HAL_TIM_PWM_Init>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003ac2:	f000 f934 	bl	8003d2e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ace:	f107 0320 	add.w	r3, r7, #32
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4810      	ldr	r0, [pc, #64]	; (8003b18 <MX_TIM3_Init+0xe4>)
 8003ad6:	f003 faad 	bl	8007034 <HAL_TIMEx_MasterConfigSynchronization>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003ae0:	f000 f925 	bl	8003d2e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ae4:	2360      	movs	r3, #96	; 0x60
 8003ae6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003af4:	1d3b      	adds	r3, r7, #4
 8003af6:	2200      	movs	r2, #0
 8003af8:	4619      	mov	r1, r3
 8003afa:	4807      	ldr	r0, [pc, #28]	; (8003b18 <MX_TIM3_Init+0xe4>)
 8003afc:	f002 fe0a 	bl	8006714 <HAL_TIM_PWM_ConfigChannel>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003b06:	f000 f912 	bl	8003d2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b0a:	4803      	ldr	r0, [pc, #12]	; (8003b18 <MX_TIM3_Init+0xe4>)
 8003b0c:	f000 f9b8 	bl	8003e80 <HAL_TIM_MspPostInit>

}
 8003b10:	bf00      	nop
 8003b12:	3738      	adds	r7, #56	; 0x38
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20003dd4 	.word	0x20003dd4
 8003b1c:	40000400 	.word	0x40000400

08003b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b26:	f107 0310 	add.w	r3, r7, #16
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
 8003b30:	609a      	str	r2, [r3, #8]
 8003b32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b34:	4b71      	ldr	r3, [pc, #452]	; (8003cfc <MX_GPIO_Init+0x1dc>)
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	4a70      	ldr	r2, [pc, #448]	; (8003cfc <MX_GPIO_Init+0x1dc>)
 8003b3a:	f043 0320 	orr.w	r3, r3, #32
 8003b3e:	6193      	str	r3, [r2, #24]
 8003b40:	4b6e      	ldr	r3, [pc, #440]	; (8003cfc <MX_GPIO_Init+0x1dc>)
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b4c:	4b6b      	ldr	r3, [pc, #428]	; (8003cfc <MX_GPIO_Init+0x1dc>)
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	4a6a      	ldr	r2, [pc, #424]	; (8003cfc <MX_GPIO_Init+0x1dc>)
 8003b52:	f043 0310 	orr.w	r3, r3, #16
 8003b56:	6193      	str	r3, [r2, #24]
 8003b58:	4b68      	ldr	r3, [pc, #416]	; (8003cfc <MX_GPIO_Init+0x1dc>)
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b64:	4b65      	ldr	r3, [pc, #404]	; (8003cfc <MX_GPIO_Init+0x1dc>)
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	4a64      	ldr	r2, [pc, #400]	; (8003cfc <MX_GPIO_Init+0x1dc>)
 8003b6a:	f043 0304 	orr.w	r3, r3, #4
 8003b6e:	6193      	str	r3, [r2, #24]
 8003b70:	4b62      	ldr	r3, [pc, #392]	; (8003cfc <MX_GPIO_Init+0x1dc>)
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b7c:	4b5f      	ldr	r3, [pc, #380]	; (8003cfc <MX_GPIO_Init+0x1dc>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	4a5e      	ldr	r2, [pc, #376]	; (8003cfc <MX_GPIO_Init+0x1dc>)
 8003b82:	f043 0308 	orr.w	r3, r3, #8
 8003b86:	6193      	str	r3, [r2, #24]
 8003b88:	4b5c      	ldr	r3, [pc, #368]	; (8003cfc <MX_GPIO_Init+0x1dc>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oDIR1_Pin, GPIO_PIN_RESET);
 8003b94:	2200      	movs	r2, #0
 8003b96:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003b9a:	4859      	ldr	r0, [pc, #356]	; (8003d00 <MX_GPIO_Init+0x1e0>)
 8003b9c:	f001 f857 	bl	8004c4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, oBuzer_Pin|oSyncArc_Pin|oSMD_EN1_Pin, GPIO_PIN_RESET);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8003ba6:	4857      	ldr	r0, [pc, #348]	; (8003d04 <MX_GPIO_Init+0x1e4>)
 8003ba8:	f001 f851 	bl	8004c4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin, GPIO_PIN_SET);
 8003bac:	2201      	movs	r2, #1
 8003bae:	2140      	movs	r1, #64	; 0x40
 8003bb0:	4854      	ldr	r0, [pc, #336]	; (8003d04 <MX_GPIO_Init+0x1e4>)
 8003bb2:	f001 f84c 	bl	8004c4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin, GPIO_PIN_SET);
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	2130      	movs	r1, #48	; 0x30
 8003bba:	4851      	ldr	r0, [pc, #324]	; (8003d00 <MX_GPIO_Init+0x1e0>)
 8003bbc:	f001 f847 	bl	8004c4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin, GPIO_PIN_SET);
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	2103      	movs	r1, #3
 8003bc4:	4850      	ldr	r0, [pc, #320]	; (8003d08 <MX_GPIO_Init+0x1e8>)
 8003bc6:	f001 f842 	bl	8004c4e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSolenoidValve2_Pin|oSolenoidValve1_Pin, GPIO_PIN_RESET);
 8003bca:	2200      	movs	r2, #0
 8003bcc:	21c0      	movs	r1, #192	; 0xc0
 8003bce:	484e      	ldr	r0, [pc, #312]	; (8003d08 <MX_GPIO_Init+0x1e8>)
 8003bd0:	f001 f83d 	bl	8004c4e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : oSol_Valve_b_Heade_Pin oSol_Valve_a_Heade_Pin oSTLED316S_STB1_Pin oSTLED316S_STB2_Pin
                           oDIR1_Pin */
  GPIO_InitStruct.Pin = oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin
 8003bd4:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003bd8:	613b      	str	r3, [r7, #16]
                          |oDIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be2:	2302      	movs	r3, #2
 8003be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be6:	f107 0310 	add.w	r3, r7, #16
 8003bea:	4619      	mov	r1, r3
 8003bec:	4844      	ldr	r0, [pc, #272]	; (8003d00 <MX_GPIO_Init+0x1e0>)
 8003bee:	f000 fe83 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : iPedal_L_Pin iPedal_R_Pin */
  GPIO_InitStruct.Pin = iPedal_L_Pin|iPedal_R_Pin;
 8003bf2:	2309      	movs	r3, #9
 8003bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bfe:	f107 0310 	add.w	r3, r7, #16
 8003c02:	4619      	mov	r1, r3
 8003c04:	483f      	ldr	r0, [pc, #252]	; (8003d04 <MX_GPIO_Init+0x1e4>)
 8003c06:	f000 fe77 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : oBuzer_Pin oSTLED316S_STB5_Pin oSyncArc_Pin oSMD_EN1_Pin */
  GPIO_InitStruct.Pin = oBuzer_Pin|oSTLED316S_STB5_Pin|oSyncArc_Pin|oSMD_EN1_Pin;
 8003c0a:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8003c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c10:	2301      	movs	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1c:	f107 0310 	add.w	r3, r7, #16
 8003c20:	4619      	mov	r1, r3
 8003c22:	4838      	ldr	r0, [pc, #224]	; (8003d04 <MX_GPIO_Init+0x1e4>)
 8003c24:	f000 fe68 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : oSTLED316S_STB3_Pin oSTLED316S_STB4_Pin oSolenoidValve2_Pin oSolenoidValve1_Pin */
  GPIO_InitStruct.Pin = oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin|oSolenoidValve2_Pin|oSolenoidValve1_Pin;
 8003c28:	23c3      	movs	r3, #195	; 0xc3
 8003c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c34:	2302      	movs	r3, #2
 8003c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c38:	f107 0310 	add.w	r3, r7, #16
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4832      	ldr	r0, [pc, #200]	; (8003d08 <MX_GPIO_Init+0x1e8>)
 8003c40:	f000 fe5a 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN5_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN5_Pin;
 8003c44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c4a:	4b30      	ldr	r3, [pc, #192]	; (8003d0c <MX_GPIO_Init+0x1ec>)
 8003c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN5_GPIO_Port, &GPIO_InitStruct);
 8003c52:	f107 0310 	add.w	r3, r7, #16
 8003c56:	4619      	mov	r1, r3
 8003c58:	482b      	ldr	r0, [pc, #172]	; (8003d08 <MX_GPIO_Init+0x1e8>)
 8003c5a:	f000 fe4d 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : iBackDoor_Pin */
  GPIO_InitStruct.Pin = iBackDoor_Pin;
 8003c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iBackDoor_GPIO_Port, &GPIO_InitStruct);
 8003c6c:	f107 0310 	add.w	r3, r7, #16
 8003c70:	4619      	mov	r1, r3
 8003c72:	4825      	ldr	r0, [pc, #148]	; (8003d08 <MX_GPIO_Init+0x1e8>)
 8003c74:	f000 fe40 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : iFB_STEP1_Pin */
  GPIO_InitStruct.Pin = iFB_STEP1_Pin;
 8003c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c7e:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <MX_GPIO_Init+0x1f0>)
 8003c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iFB_STEP1_GPIO_Port, &GPIO_InitStruct);
 8003c86:	f107 0310 	add.w	r3, r7, #16
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	481c      	ldr	r0, [pc, #112]	; (8003d00 <MX_GPIO_Init+0x1e0>)
 8003c8e:	f000 fe33 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN3_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN3_Pin;
 8003c92:	2304      	movs	r3, #4
 8003c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c96:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <MX_GPIO_Init+0x1ec>)
 8003c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN3_GPIO_Port, &GPIO_InitStruct);
 8003c9e:	f107 0310 	add.w	r3, r7, #16
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	481b      	ldr	r0, [pc, #108]	; (8003d14 <MX_GPIO_Init+0x1f4>)
 8003ca6:	f000 fe27 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : iCarriageStop_Pin */
  GPIO_InitStruct.Pin = iCarriageStop_Pin;
 8003caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <MX_GPIO_Init+0x1f8>)
 8003cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iCarriageStop_GPIO_Port, &GPIO_InitStruct);
 8003cb8:	f107 0310 	add.w	r3, r7, #16
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4812      	ldr	r0, [pc, #72]	; (8003d08 <MX_GPIO_Init+0x1e8>)
 8003cc0:	f000 fe1a 	bl	80048f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2105      	movs	r1, #5
 8003cc8:	2008      	movs	r0, #8
 8003cca:	f000 fad6 	bl	800427a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003cce:	2008      	movs	r0, #8
 8003cd0:	f000 faef 	bl	80042b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2105      	movs	r1, #5
 8003cd8:	2017      	movs	r0, #23
 8003cda:	f000 face 	bl	800427a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003cde:	2017      	movs	r0, #23
 8003ce0:	f000 fae7 	bl	80042b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2105      	movs	r1, #5
 8003ce8:	2028      	movs	r0, #40	; 0x28
 8003cea:	f000 fac6 	bl	800427a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003cee:	2028      	movs	r0, #40	; 0x28
 8003cf0:	f000 fadf 	bl	80042b2 <HAL_NVIC_EnableIRQ>

}
 8003cf4:	bf00      	nop
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40011000 	.word	0x40011000
 8003d04:	40010800 	.word	0x40010800
 8003d08:	40010c00 	.word	0x40010c00
 8003d0c:	10210000 	.word	0x10210000
 8003d10:	10110000 	.word	0x10110000
 8003d14:	40011400 	.word	0x40011400
 8003d18:	10310000 	.word	0x10310000

08003d1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	vTaskDelay(1000);
 8003d24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d28:	f004 fae8 	bl	80082fc <vTaskDelay>
 8003d2c:	e7fa      	b.n	8003d24 <StartDefaultTask+0x8>

08003d2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d32:	b672      	cpsid	i
}
 8003d34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d36:	e7fe      	b.n	8003d36 <Error_Handler+0x8>

08003d38 <HAL_MspInit>:
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4b18      	ldr	r3, [pc, #96]	; (8003da0 <HAL_MspInit+0x68>)
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	4a17      	ldr	r2, [pc, #92]	; (8003da0 <HAL_MspInit+0x68>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	6193      	str	r3, [r2, #24]
 8003d4a:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <HAL_MspInit+0x68>)
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <HAL_MspInit+0x68>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	4a11      	ldr	r2, [pc, #68]	; (8003da0 <HAL_MspInit+0x68>)
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d60:	61d3      	str	r3, [r2, #28]
 8003d62:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_MspInit+0x68>)
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	210f      	movs	r1, #15
 8003d72:	f06f 0001 	mvn.w	r0, #1
 8003d76:	f000 fa80 	bl	800427a <HAL_NVIC_SetPriority>
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <HAL_MspInit+0x6c>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	4a04      	ldr	r2, [pc, #16]	; (8003da4 <HAL_MspInit+0x6c>)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6053      	str	r3, [r2, #4]
 8003d96:	bf00      	nop
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40010000 	.word	0x40010000

08003da8 <HAL_SPI_MspInit>:
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	f107 0310 	add.w	r3, r7, #16
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a19      	ldr	r2, [pc, #100]	; (8003e28 <HAL_SPI_MspInit+0x80>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d12b      	bne.n	8003e20 <HAL_SPI_MspInit+0x78>
 8003dc8:	4b18      	ldr	r3, [pc, #96]	; (8003e2c <HAL_SPI_MspInit+0x84>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	4a17      	ldr	r2, [pc, #92]	; (8003e2c <HAL_SPI_MspInit+0x84>)
 8003dce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dd2:	6193      	str	r3, [r2, #24]
 8003dd4:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <HAL_SPI_MspInit+0x84>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_SPI_MspInit+0x84>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <HAL_SPI_MspInit+0x84>)
 8003de6:	f043 0304 	orr.w	r3, r3, #4
 8003dea:	6193      	str	r3, [r2, #24]
 8003dec:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <HAL_SPI_MspInit+0x84>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	23a0      	movs	r3, #160	; 0xa0
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	2303      	movs	r3, #3
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	f107 0310 	add.w	r3, r7, #16
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4809      	ldr	r0, [pc, #36]	; (8003e30 <HAL_SPI_MspInit+0x88>)
 8003e0c:	f000 fd74 	bl	80048f8 <HAL_GPIO_Init>
 8003e10:	2200      	movs	r2, #0
 8003e12:	2105      	movs	r1, #5
 8003e14:	2023      	movs	r0, #35	; 0x23
 8003e16:	f000 fa30 	bl	800427a <HAL_NVIC_SetPriority>
 8003e1a:	2023      	movs	r0, #35	; 0x23
 8003e1c:	f000 fa49 	bl	80042b2 <HAL_NVIC_EnableIRQ>
 8003e20:	bf00      	nop
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40013000 	.word	0x40013000
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40010800 	.word	0x40010800

08003e34 <HAL_TIM_Base_MspInit>:
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a0d      	ldr	r2, [pc, #52]	; (8003e78 <HAL_TIM_Base_MspInit+0x44>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d113      	bne.n	8003e6e <HAL_TIM_Base_MspInit+0x3a>
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <HAL_TIM_Base_MspInit+0x48>)
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	4a0c      	ldr	r2, [pc, #48]	; (8003e7c <HAL_TIM_Base_MspInit+0x48>)
 8003e4c:	f043 0302 	orr.w	r3, r3, #2
 8003e50:	61d3      	str	r3, [r2, #28]
 8003e52:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <HAL_TIM_Base_MspInit+0x48>)
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2105      	movs	r1, #5
 8003e62:	201d      	movs	r0, #29
 8003e64:	f000 fa09 	bl	800427a <HAL_NVIC_SetPriority>
 8003e68:	201d      	movs	r0, #29
 8003e6a:	f000 fa22 	bl	80042b2 <HAL_NVIC_EnableIRQ>
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40021000 	.word	0x40021000

08003e80 <HAL_TIM_MspPostInit>:
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	f107 030c 	add.w	r3, r7, #12
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	60da      	str	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a18      	ldr	r2, [pc, #96]	; (8003efc <HAL_TIM_MspPostInit+0x7c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d129      	bne.n	8003ef4 <HAL_TIM_MspPostInit+0x74>
 8003ea0:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <HAL_TIM_MspPostInit+0x80>)
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	4a16      	ldr	r2, [pc, #88]	; (8003f00 <HAL_TIM_MspPostInit+0x80>)
 8003ea6:	f043 0310 	orr.w	r3, r3, #16
 8003eaa:	6193      	str	r3, [r2, #24]
 8003eac:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <HAL_TIM_MspPostInit+0x80>)
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2340      	movs	r3, #64	; 0x40
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	f107 030c 	add.w	r3, r7, #12
 8003ec8:	4619      	mov	r1, r3
 8003eca:	480e      	ldr	r0, [pc, #56]	; (8003f04 <HAL_TIM_MspPostInit+0x84>)
 8003ecc:	f000 fd14 	bl	80048f8 <HAL_GPIO_Init>
 8003ed0:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <HAL_TIM_MspPostInit+0x88>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	4a06      	ldr	r2, [pc, #24]	; (8003f08 <HAL_TIM_MspPostInit+0x88>)
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	6053      	str	r3, [r2, #4]
 8003ef4:	bf00      	nop
 8003ef6:	3720      	adds	r7, #32
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40011000 	.word	0x40011000
 8003f08:	40010000 	.word	0x40010000

08003f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f10:	e7fe      	b.n	8003f10 <NMI_Handler+0x4>

08003f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f12:	b480      	push	{r7}
 8003f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f16:	e7fe      	b.n	8003f16 <HardFault_Handler+0x4>

08003f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f1c:	e7fe      	b.n	8003f1c <MemManage_Handler+0x4>

08003f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f22:	e7fe      	b.n	8003f22 <BusFault_Handler+0x4>

08003f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f28:	e7fe      	b.n	8003f28 <UsageFault_Handler+0x4>

08003f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f3a:	f000 f8ab 	bl	8004094 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003f3e:	f004 fdb9 	bl	8008ab4 <xTaskGetSchedulerState>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d001      	beq.n	8003f4c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003f48:	f005 faee 	bl	8009528 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f4c:	bf00      	nop
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003f54:	2004      	movs	r0, #4
 8003f56:	f000 fe93 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003f62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003f66:	f000 fe8b 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f74:	4802      	ldr	r0, [pc, #8]	; (8003f80 <TIM3_IRQHandler+0x10>)
 8003f76:	f002 fac5 	bl	8006504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20003dd4 	.word	0x20003dd4

08003f84 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003f88:	4802      	ldr	r0, [pc, #8]	; (8003f94 <SPI1_IRQHandler+0x10>)
 8003f8a:	f001 feed 	bl	8005d68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20003e1c 	.word	0x20003e1c

08003f98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003f9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003fa0:	f000 fe6e 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003fa4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003fa8:	f000 fe6a 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <SystemInit>:
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <Reset_Handler>:
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	e003      	b.n	8003fc8 <LoopCopyDataInit>

08003fc0 <CopyDataInit>:
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <LoopFillZerobss+0x14>)
 8003fc2:	585b      	ldr	r3, [r3, r1]
 8003fc4:	5043      	str	r3, [r0, r1]
 8003fc6:	3104      	adds	r1, #4

08003fc8 <LoopCopyDataInit>:
 8003fc8:	480a      	ldr	r0, [pc, #40]	; (8003ff4 <LoopFillZerobss+0x18>)
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <LoopFillZerobss+0x1c>)
 8003fcc:	1842      	adds	r2, r0, r1
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d3f6      	bcc.n	8003fc0 <CopyDataInit>
 8003fd2:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <LoopFillZerobss+0x20>)
 8003fd4:	e002      	b.n	8003fdc <LoopFillZerobss>

08003fd6 <FillZerobss>:
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f842 3b04 	str.w	r3, [r2], #4

08003fdc <LoopFillZerobss>:
 8003fdc:	4b08      	ldr	r3, [pc, #32]	; (8004000 <LoopFillZerobss+0x24>)
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d3f9      	bcc.n	8003fd6 <FillZerobss>
 8003fe2:	f7ff ffe5 	bl	8003fb0 <SystemInit>
 8003fe6:	f005 fc6b 	bl	80098c0 <__libc_init_array>
 8003fea:	f7ff fc85 	bl	80038f8 <main>
 8003fee:	4770      	bx	lr
 8003ff0:	08009a3c 	.word	0x08009a3c
 8003ff4:	20000000 	.word	0x20000000
 8003ff8:	20000010 	.word	0x20000010
 8003ffc:	20000010 	.word	0x20000010
 8004000:	20003ed8 	.word	0x20003ed8

08004004 <ADC1_2_IRQHandler>:
 8004004:	e7fe      	b.n	8004004 <ADC1_2_IRQHandler>
	...

08004008 <HAL_Init>:
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
 800400c:	4b08      	ldr	r3, [pc, #32]	; (8004030 <HAL_Init+0x28>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a07      	ldr	r2, [pc, #28]	; (8004030 <HAL_Init+0x28>)
 8004012:	f043 0310 	orr.w	r3, r3, #16
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	2003      	movs	r0, #3
 800401a:	f000 f923 	bl	8004264 <HAL_NVIC_SetPriorityGrouping>
 800401e:	200f      	movs	r0, #15
 8004020:	f000 f808 	bl	8004034 <HAL_InitTick>
 8004024:	f7ff fe88 	bl	8003d38 <HAL_MspInit>
 8004028:	2300      	movs	r3, #0
 800402a:	4618      	mov	r0, r3
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40022000 	.word	0x40022000

08004034 <HAL_InitTick>:
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	4b12      	ldr	r3, [pc, #72]	; (8004088 <HAL_InitTick+0x54>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b12      	ldr	r3, [pc, #72]	; (800408c <HAL_InitTick+0x58>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	4619      	mov	r1, r3
 8004046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800404a:	fbb3 f3f1 	udiv	r3, r3, r1
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f93b 	bl	80042ce <HAL_SYSTICK_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_InitTick+0x2e>
 800405e:	2301      	movs	r3, #1
 8004060:	e00e      	b.n	8004080 <HAL_InitTick+0x4c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b0f      	cmp	r3, #15
 8004066:	d80a      	bhi.n	800407e <HAL_InitTick+0x4a>
 8004068:	2200      	movs	r2, #0
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	f000 f903 	bl	800427a <HAL_NVIC_SetPriority>
 8004074:	4a06      	ldr	r2, [pc, #24]	; (8004090 <HAL_InitTick+0x5c>)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	2300      	movs	r3, #0
 800407c:	e000      	b.n	8004080 <HAL_InitTick+0x4c>
 800407e:	2301      	movs	r3, #1
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000000 	.word	0x20000000
 800408c:	20000008 	.word	0x20000008
 8004090:	20000004 	.word	0x20000004

08004094 <HAL_IncTick>:
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_IncTick+0x1c>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_IncTick+0x20>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4413      	add	r3, r2
 80040a4:	4a03      	ldr	r2, [pc, #12]	; (80040b4 <HAL_IncTick+0x20>)
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr
 80040b0:	20000008 	.word	0x20000008
 80040b4:	20003e74 	.word	0x20003e74

080040b8 <HAL_GetTick>:
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	4b02      	ldr	r3, [pc, #8]	; (80040c8 <HAL_GetTick+0x10>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr
 80040c8:	20003e74 	.word	0x20003e74

080040cc <__NVIC_SetPriorityGrouping>:
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <__NVIC_SetPriorityGrouping+0x44>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e8:	4013      	ands	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	021a      	lsls	r2, r3, #8
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	4a04      	ldr	r2, [pc, #16]	; (8004110 <__NVIC_SetPriorityGrouping+0x44>)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	60d3      	str	r3, [r2, #12]
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <__NVIC_GetPriorityGrouping>:
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <__NVIC_GetPriorityGrouping+0x18>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	4618      	mov	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <__NVIC_EnableIRQ>:
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	71fb      	strb	r3, [r7, #7]
 800413a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413e:	2b00      	cmp	r3, #0
 8004140:	db0b      	blt.n	800415a <__NVIC_EnableIRQ+0x2a>
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	f003 021f 	and.w	r2, r3, #31
 8004148:	4906      	ldr	r1, [pc, #24]	; (8004164 <__NVIC_EnableIRQ+0x34>)
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2001      	movs	r0, #1
 8004152:	fa00 f202 	lsl.w	r2, r0, r2
 8004156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	e000e100 	.word	0xe000e100

08004168 <__NVIC_SetPriority>:
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	71fb      	strb	r3, [r7, #7]
 8004174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004178:	2b00      	cmp	r3, #0
 800417a:	db0a      	blt.n	8004192 <__NVIC_SetPriority+0x2a>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	490c      	ldr	r1, [pc, #48]	; (80041b4 <__NVIC_SetPriority+0x4c>)
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	440b      	add	r3, r1
 800418c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004190:	e00a      	b.n	80041a8 <__NVIC_SetPriority+0x40>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4908      	ldr	r1, [pc, #32]	; (80041b8 <__NVIC_SetPriority+0x50>)
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	3b04      	subs	r3, #4
 80041a0:	0112      	lsls	r2, r2, #4
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	440b      	add	r3, r1
 80041a6:	761a      	strb	r2, [r3, #24]
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	e000e100 	.word	0xe000e100
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <NVIC_EncodePriority>:
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	; 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f1c3 0307 	rsb	r3, r3, #7
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	bf28      	it	cs
 80041da:	2304      	movcs	r3, #4
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3304      	adds	r3, #4
 80041e2:	2b06      	cmp	r3, #6
 80041e4:	d902      	bls.n	80041ec <NVIC_EncodePriority+0x30>
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3b03      	subs	r3, #3
 80041ea:	e000      	b.n	80041ee <NVIC_EncodePriority+0x32>
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	f04f 32ff 	mov.w	r2, #4294967295
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43da      	mvns	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	401a      	ands	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	409a      	lsls	r2, r3
 8004204:	f04f 31ff 	mov.w	r1, #4294967295
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	43d9      	mvns	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	400b      	ands	r3, r1
 8004214:	4313      	orrs	r3, r2
 8004216:	4618      	mov	r0, r3
 8004218:	3724      	adds	r7, #36	; 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <SysTick_Config>:
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3b01      	subs	r3, #1
 800422c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004230:	d301      	bcc.n	8004236 <SysTick_Config+0x16>
 8004232:	2301      	movs	r3, #1
 8004234:	e00f      	b.n	8004256 <SysTick_Config+0x36>
 8004236:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <SysTick_Config+0x40>)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	6053      	str	r3, [r2, #4]
 800423e:	210f      	movs	r1, #15
 8004240:	f04f 30ff 	mov.w	r0, #4294967295
 8004244:	f7ff ff90 	bl	8004168 <__NVIC_SetPriority>
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <SysTick_Config+0x40>)
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
 800424e:	4b04      	ldr	r3, [pc, #16]	; (8004260 <SysTick_Config+0x40>)
 8004250:	2207      	movs	r2, #7
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	2300      	movs	r3, #0
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	e000e010 	.word	0xe000e010

08004264 <HAL_NVIC_SetPriorityGrouping>:
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff2d 	bl	80040cc <__NVIC_SetPriorityGrouping>
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_NVIC_SetPriority>:
 800427a:	b580      	push	{r7, lr}
 800427c:	b086      	sub	sp, #24
 800427e:	af00      	add	r7, sp, #0
 8004280:	4603      	mov	r3, r0
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	73fb      	strb	r3, [r7, #15]
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	f7ff ff42 	bl	8004114 <__NVIC_GetPriorityGrouping>
 8004290:	6178      	str	r0, [r7, #20]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	6978      	ldr	r0, [r7, #20]
 8004298:	f7ff ff90 	bl	80041bc <NVIC_EncodePriority>
 800429c:	4602      	mov	r2, r0
 800429e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff5f 	bl	8004168 <__NVIC_SetPriority>
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_NVIC_EnableIRQ>:
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	4603      	mov	r3, r0
 80042ba:	71fb      	strb	r3, [r7, #7]
 80042bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff35 	bl	8004130 <__NVIC_EnableIRQ>
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_SYSTICK_Config>:
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ffa2 	bl	8004220 <SysTick_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <HAL_DMA_Abort_IT>:
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d005      	beq.n	800430a <HAL_DMA_Abort_IT+0x22>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2204      	movs	r2, #4
 8004302:	639a      	str	r2, [r3, #56]	; 0x38
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
 8004308:	e0d6      	b.n	80044b8 <HAL_DMA_Abort_IT+0x1d0>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 020e 	bic.w	r2, r2, #14
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0201 	bic.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	4b64      	ldr	r3, [pc, #400]	; (80044c4 <HAL_DMA_Abort_IT+0x1dc>)
 8004332:	429a      	cmp	r2, r3
 8004334:	d958      	bls.n	80043e8 <HAL_DMA_Abort_IT+0x100>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a63      	ldr	r2, [pc, #396]	; (80044c8 <HAL_DMA_Abort_IT+0x1e0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d04f      	beq.n	80043e0 <HAL_DMA_Abort_IT+0xf8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a61      	ldr	r2, [pc, #388]	; (80044cc <HAL_DMA_Abort_IT+0x1e4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d048      	beq.n	80043dc <HAL_DMA_Abort_IT+0xf4>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a60      	ldr	r2, [pc, #384]	; (80044d0 <HAL_DMA_Abort_IT+0x1e8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d040      	beq.n	80043d6 <HAL_DMA_Abort_IT+0xee>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a5e      	ldr	r2, [pc, #376]	; (80044d4 <HAL_DMA_Abort_IT+0x1ec>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d038      	beq.n	80043d0 <HAL_DMA_Abort_IT+0xe8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a5d      	ldr	r2, [pc, #372]	; (80044d8 <HAL_DMA_Abort_IT+0x1f0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d030      	beq.n	80043ca <HAL_DMA_Abort_IT+0xe2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a5b      	ldr	r2, [pc, #364]	; (80044dc <HAL_DMA_Abort_IT+0x1f4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d028      	beq.n	80043c4 <HAL_DMA_Abort_IT+0xdc>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a53      	ldr	r2, [pc, #332]	; (80044c4 <HAL_DMA_Abort_IT+0x1dc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d020      	beq.n	80043be <HAL_DMA_Abort_IT+0xd6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a57      	ldr	r2, [pc, #348]	; (80044e0 <HAL_DMA_Abort_IT+0x1f8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d019      	beq.n	80043ba <HAL_DMA_Abort_IT+0xd2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a56      	ldr	r2, [pc, #344]	; (80044e4 <HAL_DMA_Abort_IT+0x1fc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d012      	beq.n	80043b6 <HAL_DMA_Abort_IT+0xce>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a54      	ldr	r2, [pc, #336]	; (80044e8 <HAL_DMA_Abort_IT+0x200>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00a      	beq.n	80043b0 <HAL_DMA_Abort_IT+0xc8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a53      	ldr	r2, [pc, #332]	; (80044ec <HAL_DMA_Abort_IT+0x204>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d102      	bne.n	80043aa <HAL_DMA_Abort_IT+0xc2>
 80043a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043a8:	e01b      	b.n	80043e2 <HAL_DMA_Abort_IT+0xfa>
 80043aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043ae:	e018      	b.n	80043e2 <HAL_DMA_Abort_IT+0xfa>
 80043b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043b4:	e015      	b.n	80043e2 <HAL_DMA_Abort_IT+0xfa>
 80043b6:	2310      	movs	r3, #16
 80043b8:	e013      	b.n	80043e2 <HAL_DMA_Abort_IT+0xfa>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e011      	b.n	80043e2 <HAL_DMA_Abort_IT+0xfa>
 80043be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043c2:	e00e      	b.n	80043e2 <HAL_DMA_Abort_IT+0xfa>
 80043c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043c8:	e00b      	b.n	80043e2 <HAL_DMA_Abort_IT+0xfa>
 80043ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043ce:	e008      	b.n	80043e2 <HAL_DMA_Abort_IT+0xfa>
 80043d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043d4:	e005      	b.n	80043e2 <HAL_DMA_Abort_IT+0xfa>
 80043d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043da:	e002      	b.n	80043e2 <HAL_DMA_Abort_IT+0xfa>
 80043dc:	2310      	movs	r3, #16
 80043de:	e000      	b.n	80043e2 <HAL_DMA_Abort_IT+0xfa>
 80043e0:	2301      	movs	r3, #1
 80043e2:	4a43      	ldr	r2, [pc, #268]	; (80044f0 <HAL_DMA_Abort_IT+0x208>)
 80043e4:	6053      	str	r3, [r2, #4]
 80043e6:	e057      	b.n	8004498 <HAL_DMA_Abort_IT+0x1b0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a36      	ldr	r2, [pc, #216]	; (80044c8 <HAL_DMA_Abort_IT+0x1e0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d04f      	beq.n	8004492 <HAL_DMA_Abort_IT+0x1aa>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a35      	ldr	r2, [pc, #212]	; (80044cc <HAL_DMA_Abort_IT+0x1e4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d048      	beq.n	800448e <HAL_DMA_Abort_IT+0x1a6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a33      	ldr	r2, [pc, #204]	; (80044d0 <HAL_DMA_Abort_IT+0x1e8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d040      	beq.n	8004488 <HAL_DMA_Abort_IT+0x1a0>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a32      	ldr	r2, [pc, #200]	; (80044d4 <HAL_DMA_Abort_IT+0x1ec>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d038      	beq.n	8004482 <HAL_DMA_Abort_IT+0x19a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a30      	ldr	r2, [pc, #192]	; (80044d8 <HAL_DMA_Abort_IT+0x1f0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d030      	beq.n	800447c <HAL_DMA_Abort_IT+0x194>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2f      	ldr	r2, [pc, #188]	; (80044dc <HAL_DMA_Abort_IT+0x1f4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d028      	beq.n	8004476 <HAL_DMA_Abort_IT+0x18e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a26      	ldr	r2, [pc, #152]	; (80044c4 <HAL_DMA_Abort_IT+0x1dc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d020      	beq.n	8004470 <HAL_DMA_Abort_IT+0x188>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <HAL_DMA_Abort_IT+0x1f8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d019      	beq.n	800446c <HAL_DMA_Abort_IT+0x184>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a29      	ldr	r2, [pc, #164]	; (80044e4 <HAL_DMA_Abort_IT+0x1fc>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d012      	beq.n	8004468 <HAL_DMA_Abort_IT+0x180>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a28      	ldr	r2, [pc, #160]	; (80044e8 <HAL_DMA_Abort_IT+0x200>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00a      	beq.n	8004462 <HAL_DMA_Abort_IT+0x17a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a26      	ldr	r2, [pc, #152]	; (80044ec <HAL_DMA_Abort_IT+0x204>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d102      	bne.n	800445c <HAL_DMA_Abort_IT+0x174>
 8004456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800445a:	e01b      	b.n	8004494 <HAL_DMA_Abort_IT+0x1ac>
 800445c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004460:	e018      	b.n	8004494 <HAL_DMA_Abort_IT+0x1ac>
 8004462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004466:	e015      	b.n	8004494 <HAL_DMA_Abort_IT+0x1ac>
 8004468:	2310      	movs	r3, #16
 800446a:	e013      	b.n	8004494 <HAL_DMA_Abort_IT+0x1ac>
 800446c:	2301      	movs	r3, #1
 800446e:	e011      	b.n	8004494 <HAL_DMA_Abort_IT+0x1ac>
 8004470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004474:	e00e      	b.n	8004494 <HAL_DMA_Abort_IT+0x1ac>
 8004476:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800447a:	e00b      	b.n	8004494 <HAL_DMA_Abort_IT+0x1ac>
 800447c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004480:	e008      	b.n	8004494 <HAL_DMA_Abort_IT+0x1ac>
 8004482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004486:	e005      	b.n	8004494 <HAL_DMA_Abort_IT+0x1ac>
 8004488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800448c:	e002      	b.n	8004494 <HAL_DMA_Abort_IT+0x1ac>
 800448e:	2310      	movs	r3, #16
 8004490:	e000      	b.n	8004494 <HAL_DMA_Abort_IT+0x1ac>
 8004492:	2301      	movs	r3, #1
 8004494:	4a17      	ldr	r2, [pc, #92]	; (80044f4 <HAL_DMA_Abort_IT+0x20c>)
 8004496:	6053      	str	r3, [r2, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2020 	strb.w	r2, [r3, #32]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_DMA_Abort_IT+0x1d0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40020080 	.word	0x40020080
 80044c8:	40020008 	.word	0x40020008
 80044cc:	4002001c 	.word	0x4002001c
 80044d0:	40020030 	.word	0x40020030
 80044d4:	40020044 	.word	0x40020044
 80044d8:	40020058 	.word	0x40020058
 80044dc:	4002006c 	.word	0x4002006c
 80044e0:	40020408 	.word	0x40020408
 80044e4:	4002041c 	.word	0x4002041c
 80044e8:	40020430 	.word	0x40020430
 80044ec:	40020444 	.word	0x40020444
 80044f0:	40020400 	.word	0x40020400
 80044f4:	40020000 	.word	0x40020000

080044f8 <HAL_FLASH_Program>:
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	e9c7 2300 	strd	r2, r3, [r7]
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
 800450a:	2300      	movs	r3, #0
 800450c:	75bb      	strb	r3, [r7, #22]
 800450e:	2300      	movs	r3, #0
 8004510:	757b      	strb	r3, [r7, #21]
 8004512:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <HAL_FLASH_Program+0xd8>)
 8004514:	7e1b      	ldrb	r3, [r3, #24]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_FLASH_Program+0x26>
 800451a:	2302      	movs	r3, #2
 800451c:	e054      	b.n	80045c8 <HAL_FLASH_Program+0xd0>
 800451e:	4b2c      	ldr	r3, [pc, #176]	; (80045d0 <HAL_FLASH_Program+0xd8>)
 8004520:	2201      	movs	r2, #1
 8004522:	761a      	strb	r2, [r3, #24]
 8004524:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004528:	f000 f8a8 	bl	800467c <FLASH_WaitForLastOperation>
 800452c:	4603      	mov	r3, r0
 800452e:	75fb      	strb	r3, [r7, #23]
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d144      	bne.n	80045c0 <HAL_FLASH_Program+0xc8>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d102      	bne.n	8004542 <HAL_FLASH_Program+0x4a>
 800453c:	2301      	movs	r3, #1
 800453e:	757b      	strb	r3, [r7, #21]
 8004540:	e007      	b.n	8004552 <HAL_FLASH_Program+0x5a>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d102      	bne.n	800454e <HAL_FLASH_Program+0x56>
 8004548:	2302      	movs	r3, #2
 800454a:	757b      	strb	r3, [r7, #21]
 800454c:	e001      	b.n	8004552 <HAL_FLASH_Program+0x5a>
 800454e:	2304      	movs	r3, #4
 8004550:	757b      	strb	r3, [r7, #21]
 8004552:	2300      	movs	r3, #0
 8004554:	75bb      	strb	r3, [r7, #22]
 8004556:	e02d      	b.n	80045b4 <HAL_FLASH_Program+0xbc>
 8004558:	7dbb      	ldrb	r3, [r7, #22]
 800455a:	005a      	lsls	r2, r3, #1
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	eb02 0c03 	add.w	ip, r2, r3
 8004562:	7dbb      	ldrb	r3, [r7, #22]
 8004564:	0119      	lsls	r1, r3, #4
 8004566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800456a:	f1c1 0620 	rsb	r6, r1, #32
 800456e:	f1a1 0020 	sub.w	r0, r1, #32
 8004572:	fa22 f401 	lsr.w	r4, r2, r1
 8004576:	fa03 f606 	lsl.w	r6, r3, r6
 800457a:	4334      	orrs	r4, r6
 800457c:	fa23 f000 	lsr.w	r0, r3, r0
 8004580:	4304      	orrs	r4, r0
 8004582:	fa23 f501 	lsr.w	r5, r3, r1
 8004586:	b2a3      	uxth	r3, r4
 8004588:	4619      	mov	r1, r3
 800458a:	4660      	mov	r0, ip
 800458c:	f000 f85a 	bl	8004644 <FLASH_Program_HalfWord>
 8004590:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004594:	f000 f872 	bl	800467c <FLASH_WaitForLastOperation>
 8004598:	4603      	mov	r3, r0
 800459a:	75fb      	strb	r3, [r7, #23]
 800459c:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <HAL_FLASH_Program+0xdc>)
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <HAL_FLASH_Program+0xdc>)
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	6113      	str	r3, [r2, #16]
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d107      	bne.n	80045be <HAL_FLASH_Program+0xc6>
 80045ae:	7dbb      	ldrb	r3, [r7, #22]
 80045b0:	3301      	adds	r3, #1
 80045b2:	75bb      	strb	r3, [r7, #22]
 80045b4:	7dba      	ldrb	r2, [r7, #22]
 80045b6:	7d7b      	ldrb	r3, [r7, #21]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d3cd      	bcc.n	8004558 <HAL_FLASH_Program+0x60>
 80045bc:	e000      	b.n	80045c0 <HAL_FLASH_Program+0xc8>
 80045be:	bf00      	nop
 80045c0:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <HAL_FLASH_Program+0xd8>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	761a      	strb	r2, [r3, #24]
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
 80045c8:	4618      	mov	r0, r3
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d0:	20003e78 	.word	0x20003e78
 80045d4:	40022000 	.word	0x40022000

080045d8 <HAL_FLASH_Unlock>:
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	2300      	movs	r3, #0
 80045e0:	71fb      	strb	r3, [r7, #7]
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <HAL_FLASH_Unlock+0x40>)
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00d      	beq.n	800460a <HAL_FLASH_Unlock+0x32>
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <HAL_FLASH_Unlock+0x40>)
 80045f0:	4a0a      	ldr	r2, [pc, #40]	; (800461c <HAL_FLASH_Unlock+0x44>)
 80045f2:	605a      	str	r2, [r3, #4]
 80045f4:	4b08      	ldr	r3, [pc, #32]	; (8004618 <HAL_FLASH_Unlock+0x40>)
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <HAL_FLASH_Unlock+0x48>)
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	4b07      	ldr	r3, [pc, #28]	; (8004618 <HAL_FLASH_Unlock+0x40>)
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_FLASH_Unlock+0x32>
 8004606:	2301      	movs	r3, #1
 8004608:	71fb      	strb	r3, [r7, #7]
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40022000 	.word	0x40022000
 800461c:	45670123 	.word	0x45670123
 8004620:	cdef89ab 	.word	0xcdef89ab

08004624 <HAL_FLASH_Lock>:
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_FLASH_Lock+0x1c>)
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	4a04      	ldr	r2, [pc, #16]	; (8004640 <HAL_FLASH_Lock+0x1c>)
 800462e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004632:	6113      	str	r3, [r2, #16]
 8004634:	2300      	movs	r3, #0
 8004636:	4618      	mov	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40022000 	.word	0x40022000

08004644 <FLASH_Program_HalfWord>:
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	807b      	strh	r3, [r7, #2]
 8004650:	4b08      	ldr	r3, [pc, #32]	; (8004674 <FLASH_Program_HalfWord+0x30>)
 8004652:	2200      	movs	r2, #0
 8004654:	61da      	str	r2, [r3, #28]
 8004656:	4b08      	ldr	r3, [pc, #32]	; (8004678 <FLASH_Program_HalfWord+0x34>)
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	4a07      	ldr	r2, [pc, #28]	; (8004678 <FLASH_Program_HalfWord+0x34>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6113      	str	r3, [r2, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	887a      	ldrh	r2, [r7, #2]
 8004666:	801a      	strh	r2, [r3, #0]
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20003e78 	.word	0x20003e78
 8004678:	40022000 	.word	0x40022000

0800467c <FLASH_WaitForLastOperation>:
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	f7ff fd18 	bl	80040b8 <HAL_GetTick>
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	e010      	b.n	80046ae <FLASH_WaitForLastOperation+0x32>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d00c      	beq.n	80046ae <FLASH_WaitForLastOperation+0x32>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <FLASH_WaitForLastOperation+0x2e>
 800469a:	f7ff fd0d 	bl	80040b8 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d201      	bcs.n	80046ae <FLASH_WaitForLastOperation+0x32>
 80046aa:	2303      	movs	r3, #3
 80046ac:	e025      	b.n	80046fa <FLASH_WaitForLastOperation+0x7e>
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <FLASH_WaitForLastOperation+0x88>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1e8      	bne.n	800468c <FLASH_WaitForLastOperation+0x10>
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <FLASH_WaitForLastOperation+0x88>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <FLASH_WaitForLastOperation+0x50>
 80046c6:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <FLASH_WaitForLastOperation+0x88>)
 80046c8:	2220      	movs	r2, #32
 80046ca:	60da      	str	r2, [r3, #12]
 80046cc:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <FLASH_WaitForLastOperation+0x88>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <FLASH_WaitForLastOperation+0x74>
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <FLASH_WaitForLastOperation+0x88>)
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <FLASH_WaitForLastOperation+0x74>
 80046e4:	4b07      	ldr	r3, [pc, #28]	; (8004704 <FLASH_WaitForLastOperation+0x88>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <FLASH_WaitForLastOperation+0x7c>
 80046f0:	f000 f80a 	bl	8004708 <FLASH_SetErrorCode>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <FLASH_WaitForLastOperation+0x7e>
 80046f8:	2300      	movs	r3, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40022000 	.word	0x40022000

08004708 <FLASH_SetErrorCode>:
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	2300      	movs	r3, #0
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <FLASH_SetErrorCode+0x2a>
 800471e:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <FLASH_SetErrorCode+0x9c>)
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f043 0302 	orr.w	r3, r3, #2
 8004726:	4a1f      	ldr	r2, [pc, #124]	; (80047a4 <FLASH_SetErrorCode+0x9c>)
 8004728:	61d3      	str	r3, [r2, #28]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f043 0310 	orr.w	r3, r3, #16
 8004730:	607b      	str	r3, [r7, #4]
 8004732:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <FLASH_SetErrorCode+0x4a>
 800473e:	4b19      	ldr	r3, [pc, #100]	; (80047a4 <FLASH_SetErrorCode+0x9c>)
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <FLASH_SetErrorCode+0x9c>)
 8004748:	61d3      	str	r3, [r2, #28]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f043 0304 	orr.w	r3, r3, #4
 8004750:	607b      	str	r3, [r7, #4]
 8004752:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <FLASH_SetErrorCode+0x6e>
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <FLASH_SetErrorCode+0x9c>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f043 0304 	orr.w	r3, r3, #4
 8004766:	4a0f      	ldr	r2, [pc, #60]	; (80047a4 <FLASH_SetErrorCode+0x9c>)
 8004768:	61d3      	str	r3, [r2, #28]
 800476a:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	4a0c      	ldr	r2, [pc, #48]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	61d3      	str	r3, [r2, #28]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f240 1201 	movw	r2, #257	; 0x101
 800477c:	4293      	cmp	r3, r2
 800477e:	d106      	bne.n	800478e <FLASH_SetErrorCode+0x86>
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	4a06      	ldr	r2, [pc, #24]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	61d3      	str	r3, [r2, #28]
 800478c:	e002      	b.n	8004794 <FLASH_SetErrorCode+0x8c>
 800478e:	4a04      	ldr	r2, [pc, #16]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60d3      	str	r3, [r2, #12]
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40022000 	.word	0x40022000
 80047a4:	20003e78 	.word	0x20003e78

080047a8 <HAL_FLASHEx_Erase>:
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	4b2f      	ldr	r3, [pc, #188]	; (8004878 <HAL_FLASHEx_Erase+0xd0>)
 80047bc:	7e1b      	ldrb	r3, [r3, #24]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_FLASHEx_Erase+0x1e>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e053      	b.n	800486e <HAL_FLASHEx_Erase+0xc6>
 80047c6:	4b2c      	ldr	r3, [pc, #176]	; (8004878 <HAL_FLASHEx_Erase+0xd0>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	761a      	strb	r2, [r3, #24]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d116      	bne.n	8004802 <HAL_FLASHEx_Erase+0x5a>
 80047d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047d8:	f7ff ff50 	bl	800467c <FLASH_WaitForLastOperation>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d141      	bne.n	8004866 <HAL_FLASHEx_Erase+0xbe>
 80047e2:	2001      	movs	r0, #1
 80047e4:	f000 f84c 	bl	8004880 <FLASH_MassErase>
 80047e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047ec:	f7ff ff46 	bl	800467c <FLASH_WaitForLastOperation>
 80047f0:	4603      	mov	r3, r0
 80047f2:	73fb      	strb	r3, [r7, #15]
 80047f4:	4b21      	ldr	r3, [pc, #132]	; (800487c <HAL_FLASHEx_Erase+0xd4>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	4a20      	ldr	r2, [pc, #128]	; (800487c <HAL_FLASHEx_Erase+0xd4>)
 80047fa:	f023 0304 	bic.w	r3, r3, #4
 80047fe:	6113      	str	r3, [r2, #16]
 8004800:	e031      	b.n	8004866 <HAL_FLASHEx_Erase+0xbe>
 8004802:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004806:	f7ff ff39 	bl	800467c <FLASH_WaitForLastOperation>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d12a      	bne.n	8004866 <HAL_FLASHEx_Erase+0xbe>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	f04f 32ff 	mov.w	r2, #4294967295
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	e019      	b.n	8004854 <HAL_FLASHEx_Erase+0xac>
 8004820:	68b8      	ldr	r0, [r7, #8]
 8004822:	f000 f849 	bl	80048b8 <FLASH_PageErase>
 8004826:	f24c 3050 	movw	r0, #50000	; 0xc350
 800482a:	f7ff ff27 	bl	800467c <FLASH_WaitForLastOperation>
 800482e:	4603      	mov	r3, r0
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <HAL_FLASHEx_Erase+0xd4>)
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	4a11      	ldr	r2, [pc, #68]	; (800487c <HAL_FLASHEx_Erase+0xd4>)
 8004838:	f023 0302 	bic.w	r3, r3, #2
 800483c:	6113      	str	r3, [r2, #16]
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_FLASHEx_Erase+0xa4>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e00c      	b.n	8004866 <HAL_FLASHEx_Erase+0xbe>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004852:	60bb      	str	r3, [r7, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	02da      	lsls	r2, r3, #11
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	4413      	add	r3, r2
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	429a      	cmp	r2, r3
 8004864:	d3dc      	bcc.n	8004820 <HAL_FLASHEx_Erase+0x78>
 8004866:	4b04      	ldr	r3, [pc, #16]	; (8004878 <HAL_FLASHEx_Erase+0xd0>)
 8004868:	2200      	movs	r2, #0
 800486a:	761a      	strb	r2, [r3, #24]
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20003e78 	.word	0x20003e78
 800487c:	40022000 	.word	0x40022000

08004880 <FLASH_MassErase>:
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <FLASH_MassErase+0x30>)
 800488a:	2200      	movs	r2, #0
 800488c:	61da      	str	r2, [r3, #28]
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <FLASH_MassErase+0x34>)
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <FLASH_MassErase+0x34>)
 8004894:	f043 0304 	orr.w	r3, r3, #4
 8004898:	6113      	str	r3, [r2, #16]
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <FLASH_MassErase+0x34>)
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	4a05      	ldr	r2, [pc, #20]	; (80048b4 <FLASH_MassErase+0x34>)
 80048a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048a4:	6113      	str	r3, [r2, #16]
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr
 80048b0:	20003e78 	.word	0x20003e78
 80048b4:	40022000 	.word	0x40022000

080048b8 <FLASH_PageErase>:
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <FLASH_PageErase+0x38>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	61da      	str	r2, [r3, #28]
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <FLASH_PageErase+0x3c>)
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <FLASH_PageErase+0x3c>)
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	6113      	str	r3, [r2, #16]
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <FLASH_PageErase+0x3c>)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6153      	str	r3, [r2, #20]
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <FLASH_PageErase+0x3c>)
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	4a05      	ldr	r2, [pc, #20]	; (80048f4 <FLASH_PageErase+0x3c>)
 80048de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e2:	6113      	str	r3, [r2, #16]
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20003e78 	.word	0x20003e78
 80048f4:	40022000 	.word	0x40022000

080048f8 <HAL_GPIO_Init>:
 80048f8:	b480      	push	{r7}
 80048fa:	b08b      	sub	sp, #44	; 0x2c
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
 8004906:	2300      	movs	r3, #0
 8004908:	623b      	str	r3, [r7, #32]
 800490a:	e179      	b.n	8004c00 <HAL_GPIO_Init+0x308>
 800490c:	2201      	movs	r2, #1
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	429a      	cmp	r2, r3
 8004926:	f040 8168 	bne.w	8004bfa <HAL_GPIO_Init+0x302>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4aa0      	ldr	r2, [pc, #640]	; (8004bb0 <HAL_GPIO_Init+0x2b8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d05e      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004934:	4a9e      	ldr	r2, [pc, #632]	; (8004bb0 <HAL_GPIO_Init+0x2b8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d875      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 800493a:	4a9e      	ldr	r2, [pc, #632]	; (8004bb4 <HAL_GPIO_Init+0x2bc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d058      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004940:	4a9c      	ldr	r2, [pc, #624]	; (8004bb4 <HAL_GPIO_Init+0x2bc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d86f      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 8004946:	4a9c      	ldr	r2, [pc, #624]	; (8004bb8 <HAL_GPIO_Init+0x2c0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d052      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 800494c:	4a9a      	ldr	r2, [pc, #616]	; (8004bb8 <HAL_GPIO_Init+0x2c0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d869      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 8004952:	4a9a      	ldr	r2, [pc, #616]	; (8004bbc <HAL_GPIO_Init+0x2c4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d04c      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004958:	4a98      	ldr	r2, [pc, #608]	; (8004bbc <HAL_GPIO_Init+0x2c4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d863      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 800495e:	4a98      	ldr	r2, [pc, #608]	; (8004bc0 <HAL_GPIO_Init+0x2c8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d046      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004964:	4a96      	ldr	r2, [pc, #600]	; (8004bc0 <HAL_GPIO_Init+0x2c8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d85d      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 800496a:	2b12      	cmp	r3, #18
 800496c:	d82a      	bhi.n	80049c4 <HAL_GPIO_Init+0xcc>
 800496e:	2b12      	cmp	r3, #18
 8004970:	d859      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <HAL_GPIO_Init+0x80>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	080049f3 	.word	0x080049f3
 800497c:	080049cd 	.word	0x080049cd
 8004980:	080049df 	.word	0x080049df
 8004984:	08004a21 	.word	0x08004a21
 8004988:	08004a27 	.word	0x08004a27
 800498c:	08004a27 	.word	0x08004a27
 8004990:	08004a27 	.word	0x08004a27
 8004994:	08004a27 	.word	0x08004a27
 8004998:	08004a27 	.word	0x08004a27
 800499c:	08004a27 	.word	0x08004a27
 80049a0:	08004a27 	.word	0x08004a27
 80049a4:	08004a27 	.word	0x08004a27
 80049a8:	08004a27 	.word	0x08004a27
 80049ac:	08004a27 	.word	0x08004a27
 80049b0:	08004a27 	.word	0x08004a27
 80049b4:	08004a27 	.word	0x08004a27
 80049b8:	08004a27 	.word	0x08004a27
 80049bc:	080049d5 	.word	0x080049d5
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	4a7f      	ldr	r2, [pc, #508]	; (8004bc4 <HAL_GPIO_Init+0x2cc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 80049ca:	e02c      	b.n	8004a26 <HAL_GPIO_Init+0x12e>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	623b      	str	r3, [r7, #32]
 80049d2:	e029      	b.n	8004a28 <HAL_GPIO_Init+0x130>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	3304      	adds	r3, #4
 80049da:	623b      	str	r3, [r7, #32]
 80049dc:	e024      	b.n	8004a28 <HAL_GPIO_Init+0x130>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	3308      	adds	r3, #8
 80049e4:	623b      	str	r3, [r7, #32]
 80049e6:	e01f      	b.n	8004a28 <HAL_GPIO_Init+0x130>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	330c      	adds	r3, #12
 80049ee:	623b      	str	r3, [r7, #32]
 80049f0:	e01a      	b.n	8004a28 <HAL_GPIO_Init+0x130>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d102      	bne.n	8004a00 <HAL_GPIO_Init+0x108>
 80049fa:	2304      	movs	r3, #4
 80049fc:	623b      	str	r3, [r7, #32]
 80049fe:	e013      	b.n	8004a28 <HAL_GPIO_Init+0x130>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d105      	bne.n	8004a14 <HAL_GPIO_Init+0x11c>
 8004a08:	2308      	movs	r3, #8
 8004a0a:	623b      	str	r3, [r7, #32]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	611a      	str	r2, [r3, #16]
 8004a12:	e009      	b.n	8004a28 <HAL_GPIO_Init+0x130>
 8004a14:	2308      	movs	r3, #8
 8004a16:	623b      	str	r3, [r7, #32]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	615a      	str	r2, [r3, #20]
 8004a1e:	e003      	b.n	8004a28 <HAL_GPIO_Init+0x130>
 8004a20:	2300      	movs	r3, #0
 8004a22:	623b      	str	r3, [r7, #32]
 8004a24:	e000      	b.n	8004a28 <HAL_GPIO_Init+0x130>
 8004a26:	bf00      	nop
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2bff      	cmp	r3, #255	; 0xff
 8004a2c:	d801      	bhi.n	8004a32 <HAL_GPIO_Init+0x13a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	e001      	b.n	8004a36 <HAL_GPIO_Init+0x13e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2bff      	cmp	r3, #255	; 0xff
 8004a3c:	d802      	bhi.n	8004a44 <HAL_GPIO_Init+0x14c>
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	e002      	b.n	8004a4a <HAL_GPIO_Init+0x152>
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	3b08      	subs	r3, #8
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	210f      	movs	r1, #15
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	fa01 f303 	lsl.w	r3, r1, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	6a39      	ldr	r1, [r7, #32]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	431a      	orrs	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80c1 	beq.w	8004bfa <HAL_GPIO_Init+0x302>
 8004a78:	4b53      	ldr	r3, [pc, #332]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	4a52      	ldr	r2, [pc, #328]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6193      	str	r3, [r2, #24]
 8004a84:	4b50      	ldr	r3, [pc, #320]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4a4e      	ldr	r2, [pc, #312]	; (8004bcc <HAL_GPIO_Init+0x2d4>)
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	3302      	adds	r3, #2
 8004a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	220f      	movs	r2, #15
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	43db      	mvns	r3, r3
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a46      	ldr	r2, [pc, #280]	; (8004bd0 <HAL_GPIO_Init+0x2d8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d01f      	beq.n	8004afc <HAL_GPIO_Init+0x204>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a45      	ldr	r2, [pc, #276]	; (8004bd4 <HAL_GPIO_Init+0x2dc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d019      	beq.n	8004af8 <HAL_GPIO_Init+0x200>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a44      	ldr	r2, [pc, #272]	; (8004bd8 <HAL_GPIO_Init+0x2e0>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d013      	beq.n	8004af4 <HAL_GPIO_Init+0x1fc>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a43      	ldr	r2, [pc, #268]	; (8004bdc <HAL_GPIO_Init+0x2e4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00d      	beq.n	8004af0 <HAL_GPIO_Init+0x1f8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a42      	ldr	r2, [pc, #264]	; (8004be0 <HAL_GPIO_Init+0x2e8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d007      	beq.n	8004aec <HAL_GPIO_Init+0x1f4>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a41      	ldr	r2, [pc, #260]	; (8004be4 <HAL_GPIO_Init+0x2ec>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d101      	bne.n	8004ae8 <HAL_GPIO_Init+0x1f0>
 8004ae4:	2305      	movs	r3, #5
 8004ae6:	e00a      	b.n	8004afe <HAL_GPIO_Init+0x206>
 8004ae8:	2306      	movs	r3, #6
 8004aea:	e008      	b.n	8004afe <HAL_GPIO_Init+0x206>
 8004aec:	2304      	movs	r3, #4
 8004aee:	e006      	b.n	8004afe <HAL_GPIO_Init+0x206>
 8004af0:	2303      	movs	r3, #3
 8004af2:	e004      	b.n	8004afe <HAL_GPIO_Init+0x206>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e002      	b.n	8004afe <HAL_GPIO_Init+0x206>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <HAL_GPIO_Init+0x206>
 8004afc:	2300      	movs	r3, #0
 8004afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b00:	f002 0203 	and.w	r2, r2, #3
 8004b04:	0092      	lsls	r2, r2, #2
 8004b06:	4093      	lsls	r3, r2
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	492f      	ldr	r1, [pc, #188]	; (8004bcc <HAL_GPIO_Init+0x2d4>)
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	3302      	adds	r3, #2
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d006      	beq.n	8004b36 <HAL_GPIO_Init+0x23e>
 8004b28:	4b2f      	ldr	r3, [pc, #188]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	492e      	ldr	r1, [pc, #184]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	600b      	str	r3, [r1, #0]
 8004b34:	e006      	b.n	8004b44 <HAL_GPIO_Init+0x24c>
 8004b36:	4b2c      	ldr	r3, [pc, #176]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	492a      	ldr	r1, [pc, #168]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	600b      	str	r3, [r1, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d006      	beq.n	8004b5e <HAL_GPIO_Init+0x266>
 8004b50:	4b25      	ldr	r3, [pc, #148]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	4924      	ldr	r1, [pc, #144]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]
 8004b5c:	e006      	b.n	8004b6c <HAL_GPIO_Init+0x274>
 8004b5e:	4b22      	ldr	r3, [pc, #136]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	4920      	ldr	r1, [pc, #128]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	604b      	str	r3, [r1, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d006      	beq.n	8004b86 <HAL_GPIO_Init+0x28e>
 8004b78:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	491a      	ldr	r1, [pc, #104]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	608b      	str	r3, [r1, #8]
 8004b84:	e006      	b.n	8004b94 <HAL_GPIO_Init+0x29c>
 8004b86:	4b18      	ldr	r3, [pc, #96]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	4916      	ldr	r1, [pc, #88]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	608b      	str	r3, [r1, #8]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d025      	beq.n	8004bec <HAL_GPIO_Init+0x2f4>
 8004ba0:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	4910      	ldr	r1, [pc, #64]	; (8004be8 <HAL_GPIO_Init+0x2f0>)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60cb      	str	r3, [r1, #12]
 8004bac:	e025      	b.n	8004bfa <HAL_GPIO_Init+0x302>
 8004bae:	bf00      	nop
 8004bb0:	10320000 	.word	0x10320000
 8004bb4:	10310000 	.word	0x10310000
 8004bb8:	10220000 	.word	0x10220000
 8004bbc:	10210000 	.word	0x10210000
 8004bc0:	10120000 	.word	0x10120000
 8004bc4:	10110000 	.word	0x10110000
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40010000 	.word	0x40010000
 8004bd0:	40010800 	.word	0x40010800
 8004bd4:	40010c00 	.word	0x40010c00
 8004bd8:	40011000 	.word	0x40011000
 8004bdc:	40011400 	.word	0x40011400
 8004be0:	40011800 	.word	0x40011800
 8004be4:	40011c00 	.word	0x40011c00
 8004be8:	40010400 	.word	0x40010400
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_GPIO_Init+0x324>)
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	4909      	ldr	r1, [pc, #36]	; (8004c1c <HAL_GPIO_Init+0x324>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	60cb      	str	r3, [r1, #12]
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f47f ae7e 	bne.w	800490c <HAL_GPIO_Init+0x14>
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	372c      	adds	r7, #44	; 0x2c
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	40010400 	.word	0x40010400

08004c20 <HAL_GPIO_ReadPin>:
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	807b      	strh	r3, [r7, #2]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	887b      	ldrh	r3, [r7, #2]
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_GPIO_ReadPin+0x1e>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
 8004c3c:	e001      	b.n	8004c42 <HAL_GPIO_ReadPin+0x22>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	73fb      	strb	r3, [r7, #15]
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr

08004c4e <HAL_GPIO_WritePin>:
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	807b      	strh	r3, [r7, #2]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	707b      	strb	r3, [r7, #1]
 8004c5e:	787b      	ldrb	r3, [r7, #1]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_GPIO_WritePin+0x1e>
 8004c64:	887a      	ldrh	r2, [r7, #2]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	611a      	str	r2, [r3, #16]
 8004c6a:	e003      	b.n	8004c74 <HAL_GPIO_WritePin+0x26>
 8004c6c:	887b      	ldrh	r3, [r7, #2]
 8004c6e:	041a      	lsls	r2, r3, #16
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	611a      	str	r2, [r3, #16]
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_GPIO_EXTI_IRQHandler>:
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	80fb      	strh	r3, [r7, #6]
 8004c8a:	4b08      	ldr	r3, [pc, #32]	; (8004cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c8c:	695a      	ldr	r2, [r3, #20]
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d006      	beq.n	8004ca4 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8004c96:	4a05      	ldr	r2, [pc, #20]	; (8004cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	6153      	str	r3, [r2, #20]
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fc fa10 	bl	80010c4 <HAL_GPIO_EXTI_Callback>
 8004ca4:	bf00      	nop
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40010400 	.word	0x40010400

08004cb0 <HAL_RCC_OscConfig>:
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x12>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e26c      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8087 	beq.w	8004dde <HAL_RCC_OscConfig+0x12e>
 8004cd0:	4b92      	ldr	r3, [pc, #584]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d00c      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x46>
 8004cdc:	4b8f      	ldr	r3, [pc, #572]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 030c 	and.w	r3, r3, #12
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d112      	bne.n	8004d0e <HAL_RCC_OscConfig+0x5e>
 8004ce8:	4b8c      	ldr	r3, [pc, #560]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf4:	d10b      	bne.n	8004d0e <HAL_RCC_OscConfig+0x5e>
 8004cf6:	4b89      	ldr	r3, [pc, #548]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d06c      	beq.n	8004ddc <HAL_RCC_OscConfig+0x12c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d168      	bne.n	8004ddc <HAL_RCC_OscConfig+0x12c>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e246      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d16:	d106      	bne.n	8004d26 <HAL_RCC_OscConfig+0x76>
 8004d18:	4b80      	ldr	r3, [pc, #512]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a7f      	ldr	r2, [pc, #508]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	e02e      	b.n	8004d84 <HAL_RCC_OscConfig+0xd4>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RCC_OscConfig+0x98>
 8004d2e:	4b7b      	ldr	r3, [pc, #492]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a7a      	ldr	r2, [pc, #488]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	4b78      	ldr	r3, [pc, #480]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a77      	ldr	r2, [pc, #476]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	e01d      	b.n	8004d84 <HAL_RCC_OscConfig+0xd4>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d50:	d10c      	bne.n	8004d6c <HAL_RCC_OscConfig+0xbc>
 8004d52:	4b72      	ldr	r3, [pc, #456]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a71      	ldr	r2, [pc, #452]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	4b6f      	ldr	r3, [pc, #444]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a6e      	ldr	r2, [pc, #440]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e00b      	b.n	8004d84 <HAL_RCC_OscConfig+0xd4>
 8004d6c:	4b6b      	ldr	r3, [pc, #428]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a6a      	ldr	r2, [pc, #424]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	4b68      	ldr	r3, [pc, #416]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a67      	ldr	r2, [pc, #412]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <HAL_RCC_OscConfig+0x104>
 8004d8c:	f7ff f994 	bl	80040b8 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0xf6>
 8004d94:	f7ff f990 	bl	80040b8 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	; 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0xf6>
 8004da2:	2303      	movs	r3, #3
 8004da4:	e1fa      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 8004da6:	4b5d      	ldr	r3, [pc, #372]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0xe4>
 8004db2:	e014      	b.n	8004dde <HAL_RCC_OscConfig+0x12e>
 8004db4:	f7ff f980 	bl	80040b8 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x11e>
 8004dbc:	f7ff f97c 	bl	80040b8 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	; 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x11e>
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e1e6      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 8004dce:	4b53      	ldr	r3, [pc, #332]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1f0      	bne.n	8004dbc <HAL_RCC_OscConfig+0x10c>
 8004dda:	e000      	b.n	8004dde <HAL_RCC_OscConfig+0x12e>
 8004ddc:	bf00      	nop
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d063      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x202>
 8004dea:	4b4c      	ldr	r3, [pc, #304]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f003 030c 	and.w	r3, r3, #12
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00b      	beq.n	8004e0e <HAL_RCC_OscConfig+0x15e>
 8004df6:	4b49      	ldr	r3, [pc, #292]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b08      	cmp	r3, #8
 8004e00:	d11c      	bne.n	8004e3c <HAL_RCC_OscConfig+0x18c>
 8004e02:	4b46      	ldr	r3, [pc, #280]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d116      	bne.n	8004e3c <HAL_RCC_OscConfig+0x18c>
 8004e0e:	4b43      	ldr	r3, [pc, #268]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <HAL_RCC_OscConfig+0x176>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d001      	beq.n	8004e26 <HAL_RCC_OscConfig+0x176>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e1ba      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 8004e26:	4b3d      	ldr	r3, [pc, #244]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4939      	ldr	r1, [pc, #228]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	600b      	str	r3, [r1, #0]
 8004e3a:	e03a      	b.n	8004eb2 <HAL_RCC_OscConfig+0x202>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d020      	beq.n	8004e86 <HAL_RCC_OscConfig+0x1d6>
 8004e44:	4b36      	ldr	r3, [pc, #216]	; (8004f20 <HAL_RCC_OscConfig+0x270>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	f7ff f935 	bl	80040b8 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x1b4>
 8004e52:	f7ff f931 	bl	80040b8 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x1b4>
 8004e60:	2303      	movs	r3, #3
 8004e62:	e19b      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 8004e64:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0f0      	beq.n	8004e52 <HAL_RCC_OscConfig+0x1a2>
 8004e70:	4b2a      	ldr	r3, [pc, #168]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4927      	ldr	r1, [pc, #156]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	600b      	str	r3, [r1, #0]
 8004e84:	e015      	b.n	8004eb2 <HAL_RCC_OscConfig+0x202>
 8004e86:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <HAL_RCC_OscConfig+0x270>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	f7ff f914 	bl	80040b8 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x1f6>
 8004e94:	f7ff f910 	bl	80040b8 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x1f6>
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e17a      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x1e4>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d03a      	beq.n	8004f34 <HAL_RCC_OscConfig+0x284>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d019      	beq.n	8004efa <HAL_RCC_OscConfig+0x24a>
 8004ec6:	4b17      	ldr	r3, [pc, #92]	; (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004ec8:	2201      	movs	r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	f7ff f8f4 	bl	80040b8 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x236>
 8004ed4:	f7ff f8f0 	bl	80040b8 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x236>
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e15a      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <HAL_RCC_OscConfig+0x26c>)
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x224>
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	f000 faa6 	bl	8005444 <RCC_Delay>
 8004ef8:	e01c      	b.n	8004f34 <HAL_RCC_OscConfig+0x284>
 8004efa:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <HAL_RCC_OscConfig+0x274>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f7ff f8da 	bl	80040b8 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]
 8004f06:	e00f      	b.n	8004f28 <HAL_RCC_OscConfig+0x278>
 8004f08:	f7ff f8d6 	bl	80040b8 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d908      	bls.n	8004f28 <HAL_RCC_OscConfig+0x278>
 8004f16:	2303      	movs	r3, #3
 8004f18:	e140      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	42420000 	.word	0x42420000
 8004f24:	42420480 	.word	0x42420480
 8004f28:	4b9e      	ldr	r3, [pc, #632]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e9      	bne.n	8004f08 <HAL_RCC_OscConfig+0x258>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 80a6 	beq.w	800508e <HAL_RCC_OscConfig+0x3de>
 8004f42:	2300      	movs	r3, #0
 8004f44:	75fb      	strb	r3, [r7, #23]
 8004f46:	4b97      	ldr	r3, [pc, #604]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10d      	bne.n	8004f6e <HAL_RCC_OscConfig+0x2be>
 8004f52:	4b94      	ldr	r3, [pc, #592]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	4a93      	ldr	r2, [pc, #588]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f5c:	61d3      	str	r3, [r2, #28]
 8004f5e:	4b91      	ldr	r3, [pc, #580]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f66:	60bb      	str	r3, [r7, #8]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	75fb      	strb	r3, [r7, #23]
 8004f6e:	4b8e      	ldr	r3, [pc, #568]	; (80051a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d118      	bne.n	8004fac <HAL_RCC_OscConfig+0x2fc>
 8004f7a:	4b8b      	ldr	r3, [pc, #556]	; (80051a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a8a      	ldr	r2, [pc, #552]	; (80051a8 <HAL_RCC_OscConfig+0x4f8>)
 8004f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	f7ff f897 	bl	80040b8 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x2f0>
 8004f8e:	f7ff f893 	bl	80040b8 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b64      	cmp	r3, #100	; 0x64
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x2f0>
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e0fd      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 8004fa0:	4b81      	ldr	r3, [pc, #516]	; (80051a8 <HAL_RCC_OscConfig+0x4f8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <HAL_RCC_OscConfig+0x2de>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d106      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x312>
 8004fb4:	4b7b      	ldr	r3, [pc, #492]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	4a7a      	ldr	r2, [pc, #488]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	6213      	str	r3, [r2, #32]
 8004fc0:	e02d      	b.n	800501e <HAL_RCC_OscConfig+0x36e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10c      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x334>
 8004fca:	4b76      	ldr	r3, [pc, #472]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	4a75      	ldr	r2, [pc, #468]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004fd0:	f023 0301 	bic.w	r3, r3, #1
 8004fd4:	6213      	str	r3, [r2, #32]
 8004fd6:	4b73      	ldr	r3, [pc, #460]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	4a72      	ldr	r2, [pc, #456]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004fdc:	f023 0304 	bic.w	r3, r3, #4
 8004fe0:	6213      	str	r3, [r2, #32]
 8004fe2:	e01c      	b.n	800501e <HAL_RCC_OscConfig+0x36e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b05      	cmp	r3, #5
 8004fea:	d10c      	bne.n	8005006 <HAL_RCC_OscConfig+0x356>
 8004fec:	4b6d      	ldr	r3, [pc, #436]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	4a6c      	ldr	r2, [pc, #432]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004ff2:	f043 0304 	orr.w	r3, r3, #4
 8004ff6:	6213      	str	r3, [r2, #32]
 8004ff8:	4b6a      	ldr	r3, [pc, #424]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	4a69      	ldr	r2, [pc, #420]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8004ffe:	f043 0301 	orr.w	r3, r3, #1
 8005002:	6213      	str	r3, [r2, #32]
 8005004:	e00b      	b.n	800501e <HAL_RCC_OscConfig+0x36e>
 8005006:	4b67      	ldr	r3, [pc, #412]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	4a66      	ldr	r2, [pc, #408]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	6213      	str	r3, [r2, #32]
 8005012:	4b64      	ldr	r3, [pc, #400]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	4a63      	ldr	r2, [pc, #396]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8005018:	f023 0304 	bic.w	r3, r3, #4
 800501c:	6213      	str	r3, [r2, #32]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d015      	beq.n	8005052 <HAL_RCC_OscConfig+0x3a2>
 8005026:	f7ff f847 	bl	80040b8 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]
 800502c:	e00a      	b.n	8005044 <HAL_RCC_OscConfig+0x394>
 800502e:	f7ff f843 	bl	80040b8 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	; 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x394>
 8005040:	2303      	movs	r3, #3
 8005042:	e0ab      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 8005044:	4b57      	ldr	r3, [pc, #348]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0ee      	beq.n	800502e <HAL_RCC_OscConfig+0x37e>
 8005050:	e014      	b.n	800507c <HAL_RCC_OscConfig+0x3cc>
 8005052:	f7ff f831 	bl	80040b8 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]
 8005058:	e00a      	b.n	8005070 <HAL_RCC_OscConfig+0x3c0>
 800505a:	f7ff f82d 	bl	80040b8 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f241 3288 	movw	r2, #5000	; 0x1388
 8005068:	4293      	cmp	r3, r2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x3c0>
 800506c:	2303      	movs	r3, #3
 800506e:	e095      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 8005070:	4b4c      	ldr	r3, [pc, #304]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1ee      	bne.n	800505a <HAL_RCC_OscConfig+0x3aa>
 800507c:	7dfb      	ldrb	r3, [r7, #23]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d105      	bne.n	800508e <HAL_RCC_OscConfig+0x3de>
 8005082:	4b48      	ldr	r3, [pc, #288]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	4a47      	ldr	r2, [pc, #284]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8005088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800508c:	61d3      	str	r3, [r2, #28]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8081 	beq.w	800519a <HAL_RCC_OscConfig+0x4ea>
 8005098:	4b42      	ldr	r3, [pc, #264]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f003 030c 	and.w	r3, r3, #12
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d061      	beq.n	8005168 <HAL_RCC_OscConfig+0x4b8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d146      	bne.n	800513a <HAL_RCC_OscConfig+0x48a>
 80050ac:	4b3f      	ldr	r3, [pc, #252]	; (80051ac <HAL_RCC_OscConfig+0x4fc>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	f7ff f801 	bl	80040b8 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x41c>
 80050ba:	f7fe fffd 	bl	80040b8 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x41c>
 80050c8:	2303      	movs	r3, #3
 80050ca:	e067      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 80050cc:	4b35      	ldr	r3, [pc, #212]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f0      	bne.n	80050ba <HAL_RCC_OscConfig+0x40a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e0:	d108      	bne.n	80050f4 <HAL_RCC_OscConfig+0x444>
 80050e2:	4b30      	ldr	r3, [pc, #192]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	492d      	ldr	r1, [pc, #180]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]
 80050f4:	4b2b      	ldr	r3, [pc, #172]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a19      	ldr	r1, [r3, #32]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	430b      	orrs	r3, r1
 8005106:	4927      	ldr	r1, [pc, #156]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8005108:	4313      	orrs	r3, r2
 800510a:	604b      	str	r3, [r1, #4]
 800510c:	4b27      	ldr	r3, [pc, #156]	; (80051ac <HAL_RCC_OscConfig+0x4fc>)
 800510e:	2201      	movs	r2, #1
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	f7fe ffd1 	bl	80040b8 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x47c>
 800511a:	f7fe ffcd 	bl	80040b8 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x47c>
 8005128:	2303      	movs	r3, #3
 800512a:	e037      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 800512c:	4b1d      	ldr	r3, [pc, #116]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x46a>
 8005138:	e02f      	b.n	800519a <HAL_RCC_OscConfig+0x4ea>
 800513a:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <HAL_RCC_OscConfig+0x4fc>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	f7fe ffba 	bl	80040b8 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x4aa>
 8005148:	f7fe ffb6 	bl	80040b8 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x4aa>
 8005156:	2303      	movs	r3, #3
 8005158:	e020      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 800515a:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0x498>
 8005166:	e018      	b.n	800519a <HAL_RCC_OscConfig+0x4ea>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_RCC_OscConfig+0x4c4>
 8005170:	2301      	movs	r3, #1
 8005172:	e013      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 8005174:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <HAL_RCC_OscConfig+0x4f4>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	429a      	cmp	r2, r3
 8005186:	d106      	bne.n	8005196 <HAL_RCC_OscConfig+0x4e6>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	429a      	cmp	r2, r3
 8005194:	d001      	beq.n	800519a <HAL_RCC_OscConfig+0x4ea>
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <HAL_RCC_OscConfig+0x4ec>
 800519a:	2300      	movs	r3, #0
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40021000 	.word	0x40021000
 80051a8:	40007000 	.word	0x40007000
 80051ac:	42420060 	.word	0x42420060

080051b0 <HAL_RCC_ClockConfig>:
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x14>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e0d0      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
 80051c4:	4b6a      	ldr	r3, [pc, #424]	; (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d910      	bls.n	80051f4 <HAL_RCC_ClockConfig+0x44>
 80051d2:	4b67      	ldr	r3, [pc, #412]	; (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f023 0207 	bic.w	r2, r3, #7
 80051da:	4965      	ldr	r1, [pc, #404]	; (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	4313      	orrs	r3, r2
 80051e0:	600b      	str	r3, [r1, #0]
 80051e2:	4b63      	ldr	r3, [pc, #396]	; (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d001      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x44>
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0b8      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d020      	beq.n	8005242 <HAL_RCC_ClockConfig+0x92>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <HAL_RCC_ClockConfig+0x68>
 800520c:	4b59      	ldr	r3, [pc, #356]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	4a58      	ldr	r2, [pc, #352]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005212:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005216:	6053      	str	r3, [r2, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <HAL_RCC_ClockConfig+0x80>
 8005224:	4b53      	ldr	r3, [pc, #332]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	4a52      	ldr	r2, [pc, #328]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800522a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800522e:	6053      	str	r3, [r2, #4]
 8005230:	4b50      	ldr	r3, [pc, #320]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	494d      	ldr	r1, [pc, #308]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800523e:	4313      	orrs	r3, r2
 8005240:	604b      	str	r3, [r1, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d040      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x120>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d107      	bne.n	8005266 <HAL_RCC_ClockConfig+0xb6>
 8005256:	4b47      	ldr	r3, [pc, #284]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d115      	bne.n	800528e <HAL_RCC_ClockConfig+0xde>
 8005262:	2301      	movs	r3, #1
 8005264:	e07f      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d107      	bne.n	800527e <HAL_RCC_ClockConfig+0xce>
 800526e:	4b41      	ldr	r3, [pc, #260]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <HAL_RCC_ClockConfig+0xde>
 800527a:	2301      	movs	r3, #1
 800527c:	e073      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
 800527e:	4b3d      	ldr	r3, [pc, #244]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_RCC_ClockConfig+0xde>
 800528a:	2301      	movs	r3, #1
 800528c:	e06b      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
 800528e:	4b39      	ldr	r3, [pc, #228]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f023 0203 	bic.w	r2, r3, #3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	4936      	ldr	r1, [pc, #216]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	4313      	orrs	r3, r2
 800529e:	604b      	str	r3, [r1, #4]
 80052a0:	f7fe ff0a 	bl	80040b8 <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	e00a      	b.n	80052be <HAL_RCC_ClockConfig+0x10e>
 80052a8:	f7fe ff06 	bl	80040b8 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_ClockConfig+0x10e>
 80052ba:	2303      	movs	r3, #3
 80052bc:	e053      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
 80052be:	4b2d      	ldr	r3, [pc, #180]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f003 020c 	and.w	r2, r3, #12
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d1eb      	bne.n	80052a8 <HAL_RCC_ClockConfig+0xf8>
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d210      	bcs.n	8005300 <HAL_RCC_ClockConfig+0x150>
 80052de:	4b24      	ldr	r3, [pc, #144]	; (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 0207 	bic.w	r2, r3, #7
 80052e6:	4922      	ldr	r1, [pc, #136]	; (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	600b      	str	r3, [r1, #0]
 80052ee:	4b20      	ldr	r3, [pc, #128]	; (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_ClockConfig+0x150>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e032      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_RCC_ClockConfig+0x16e>
 800530c:	4b19      	ldr	r3, [pc, #100]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	4916      	ldr	r1, [pc, #88]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	4313      	orrs	r3, r2
 800531c:	604b      	str	r3, [r1, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d009      	beq.n	800533e <HAL_RCC_ClockConfig+0x18e>
 800532a:	4b12      	ldr	r3, [pc, #72]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	490e      	ldr	r1, [pc, #56]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800533a:	4313      	orrs	r3, r2
 800533c:	604b      	str	r3, [r1, #4]
 800533e:	f000 f821 	bl	8005384 <HAL_RCC_GetSysClockFreq>
 8005342:	4602      	mov	r2, r0
 8005344:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	091b      	lsrs	r3, r3, #4
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	490a      	ldr	r1, [pc, #40]	; (8005378 <HAL_RCC_ClockConfig+0x1c8>)
 8005350:	5ccb      	ldrb	r3, [r1, r3]
 8005352:	fa22 f303 	lsr.w	r3, r2, r3
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <HAL_RCC_ClockConfig+0x1cc>)
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <HAL_RCC_ClockConfig+0x1d0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe fe68 	bl	8004034 <HAL_InitTick>
 8005364:	2300      	movs	r3, #0
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40022000 	.word	0x40022000
 8005374:	40021000 	.word	0x40021000
 8005378:	08009a24 	.word	0x08009a24
 800537c:	20000000 	.word	0x20000000
 8005380:	20000004 	.word	0x20000004

08005384 <HAL_RCC_GetSysClockFreq>:
 8005384:	b490      	push	{r4, r7}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <HAL_RCC_GetSysClockFreq+0xb0>)
 800538c:	1d3c      	adds	r4, r7, #4
 800538e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005394:	f240 2301 	movw	r3, #513	; 0x201
 8005398:	803b      	strh	r3, [r7, #0]
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	2300      	movs	r3, #0
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	2300      	movs	r3, #0
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	2300      	movs	r3, #0
 80053ac:	623b      	str	r3, [r7, #32]
 80053ae:	4b22      	ldr	r3, [pc, #136]	; (8005438 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	61fb      	str	r3, [r7, #28]
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d002      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0x40>
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d003      	beq.n	80053ca <HAL_RCC_GetSysClockFreq+0x46>
 80053c2:	e02d      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x9c>
 80053c4:	4b1d      	ldr	r3, [pc, #116]	; (800543c <HAL_RCC_GetSysClockFreq+0xb8>)
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	e02d      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0xa2>
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	0c9b      	lsrs	r3, r3, #18
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80053d6:	4413      	add	r3, r2
 80053d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d013      	beq.n	8005410 <HAL_RCC_GetSysClockFreq+0x8c>
 80053e8:	4b13      	ldr	r3, [pc, #76]	; (8005438 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	0c5b      	lsrs	r3, r3, #17
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80053f6:	4413      	add	r3, r2
 80053f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	4a0e      	ldr	r2, [pc, #56]	; (800543c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005402:	fb02 f203 	mul.w	r2, r2, r3
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	fbb2 f3f3 	udiv	r3, r2, r3
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
 800540e:	e004      	b.n	800541a <HAL_RCC_GetSysClockFreq+0x96>
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005414:	fb02 f303 	mul.w	r3, r2, r3
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	623b      	str	r3, [r7, #32]
 800541e:	e002      	b.n	8005426 <HAL_RCC_GetSysClockFreq+0xa2>
 8005420:	4b06      	ldr	r3, [pc, #24]	; (800543c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005422:	623b      	str	r3, [r7, #32]
 8005424:	bf00      	nop
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	4618      	mov	r0, r3
 800542a:	3728      	adds	r7, #40	; 0x28
 800542c:	46bd      	mov	sp, r7
 800542e:	bc90      	pop	{r4, r7}
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	080099c0 	.word	0x080099c0
 8005438:	40021000 	.word	0x40021000
 800543c:	007a1200 	.word	0x007a1200
 8005440:	003d0900 	.word	0x003d0900

08005444 <RCC_Delay>:
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <RCC_Delay+0x34>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <RCC_Delay+0x38>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	0a5b      	lsrs	r3, r3, #9
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	fb02 f303 	mul.w	r3, r2, r3
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	bf00      	nop
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	1e5a      	subs	r2, r3, #1
 8005466:	60fa      	str	r2, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f9      	bne.n	8005460 <RCC_Delay+0x1c>
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr
 8005478:	20000000 	.word	0x20000000
 800547c:	10624dd3 	.word	0x10624dd3

08005480 <HAL_SPI_Init>:
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_SPI_Init+0x12>
 800548e:	2301      	movs	r3, #1
 8005490:	e076      	b.n	8005580 <HAL_SPI_Init+0x100>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b00      	cmp	r3, #0
 8005498:	d108      	bne.n	80054ac <HAL_SPI_Init+0x2c>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a2:	d009      	beq.n	80054b8 <HAL_SPI_Init+0x38>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	61da      	str	r2, [r3, #28]
 80054aa:	e005      	b.n	80054b8 <HAL_SPI_Init+0x38>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	611a      	str	r2, [r3, #16]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	615a      	str	r2, [r3, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	629a      	str	r2, [r3, #40]	; 0x28
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_SPI_Init+0x58>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fe fc68 	bl	8003da8 <HAL_SPI_MspInit>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	ea42 0103 	orr.w	r1, r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	0c1a      	lsrs	r2, r3, #16
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f002 0204 	and.w	r2, r2, #4
 800555e:	605a      	str	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800556e:	61da      	str	r2, [r3, #28]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	655a      	str	r2, [r3, #84]	; 0x54
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800557e:	2300      	movs	r3, #0
 8005580:	4618      	mov	r0, r3
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_SPI_Transmit>:
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	80fb      	strh	r3, [r7, #6]
 8005598:	2300      	movs	r3, #0
 800559a:	77fb      	strb	r3, [r7, #31]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <HAL_SPI_Transmit+0x22>
 80055a6:	2302      	movs	r3, #2
 80055a8:	e126      	b.n	80057f8 <HAL_SPI_Transmit+0x270>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80055b2:	f7fe fd81 	bl	80040b8 <HAL_GetTick>
 80055b6:	61b8      	str	r0, [r7, #24]
 80055b8:	88fb      	ldrh	r3, [r7, #6]
 80055ba:	82fb      	strh	r3, [r7, #22]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d002      	beq.n	80055ce <HAL_SPI_Transmit+0x46>
 80055c8:	2302      	movs	r3, #2
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e10b      	b.n	80057e6 <HAL_SPI_Transmit+0x25e>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <HAL_SPI_Transmit+0x52>
 80055d4:	88fb      	ldrh	r3, [r7, #6]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d102      	bne.n	80055e0 <HAL_SPI_Transmit+0x58>
 80055da:	2301      	movs	r3, #1
 80055dc:	77fb      	strb	r3, [r7, #31]
 80055de:	e102      	b.n	80057e6 <HAL_SPI_Transmit+0x25e>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2203      	movs	r2, #3
 80055e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	655a      	str	r2, [r3, #84]	; 0x54
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	88fa      	ldrh	r2, [r7, #6]
 80055f8:	869a      	strh	r2, [r3, #52]	; 0x34
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	88fa      	ldrh	r2, [r7, #6]
 80055fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	639a      	str	r2, [r3, #56]	; 0x38
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	645a      	str	r2, [r3, #68]	; 0x44
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	641a      	str	r2, [r3, #64]	; 0x40
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005626:	d10f      	bne.n	8005648 <HAL_SPI_Transmit+0xc0>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d007      	beq.n	8005666 <HAL_SPI_Transmit+0xde>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566e:	d14b      	bne.n	8005708 <HAL_SPI_Transmit+0x180>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_SPI_Transmit+0xf6>
 8005678:	8afb      	ldrh	r3, [r7, #22]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d13e      	bne.n	80056fc <HAL_SPI_Transmit+0x174>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	881a      	ldrh	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	1c9a      	adds	r2, r3, #2
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	631a      	str	r2, [r3, #48]	; 0x30
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80056a2:	e02b      	b.n	80056fc <HAL_SPI_Transmit+0x174>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d112      	bne.n	80056d8 <HAL_SPI_Transmit+0x150>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	881a      	ldrh	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60da      	str	r2, [r3, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	1c9a      	adds	r2, r3, #2
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	631a      	str	r2, [r3, #48]	; 0x30
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80056d6:	e011      	b.n	80056fc <HAL_SPI_Transmit+0x174>
 80056d8:	f7fe fcee 	bl	80040b8 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d803      	bhi.n	80056f0 <HAL_SPI_Transmit+0x168>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d102      	bne.n	80056f6 <HAL_SPI_Transmit+0x16e>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <HAL_SPI_Transmit+0x174>
 80056f6:	2303      	movs	r3, #3
 80056f8:	77fb      	strb	r3, [r7, #31]
 80056fa:	e074      	b.n	80057e6 <HAL_SPI_Transmit+0x25e>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1ce      	bne.n	80056a4 <HAL_SPI_Transmit+0x11c>
 8005706:	e04c      	b.n	80057a2 <HAL_SPI_Transmit+0x21a>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_SPI_Transmit+0x18e>
 8005710:	8afb      	ldrh	r3, [r7, #22]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d140      	bne.n	8005798 <HAL_SPI_Transmit+0x210>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	330c      	adds	r3, #12
 8005720:	7812      	ldrb	r2, [r2, #0]
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	86da      	strh	r2, [r3, #54]	; 0x36
 800573c:	e02c      	b.n	8005798 <HAL_SPI_Transmit+0x210>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b02      	cmp	r3, #2
 800574a:	d113      	bne.n	8005774 <HAL_SPI_Transmit+0x1ec>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	7812      	ldrb	r2, [r2, #0]
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	86da      	strh	r2, [r3, #54]	; 0x36
 8005772:	e011      	b.n	8005798 <HAL_SPI_Transmit+0x210>
 8005774:	f7fe fca0 	bl	80040b8 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d803      	bhi.n	800578c <HAL_SPI_Transmit+0x204>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578a:	d102      	bne.n	8005792 <HAL_SPI_Transmit+0x20a>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d102      	bne.n	8005798 <HAL_SPI_Transmit+0x210>
 8005792:	2303      	movs	r3, #3
 8005794:	77fb      	strb	r3, [r7, #31]
 8005796:	e026      	b.n	80057e6 <HAL_SPI_Transmit+0x25e>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1cd      	bne.n	800573e <HAL_SPI_Transmit+0x1b6>
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	6839      	ldr	r1, [r7, #0]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fcbc 	bl	8006124 <SPI_EndRxTxTransaction>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_SPI_Transmit+0x230>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <HAL_SPI_Transmit+0x24e>
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_SPI_Transmit+0x25c>
 80057de:	2301      	movs	r3, #1
 80057e0:	77fb      	strb	r3, [r7, #31]
 80057e2:	e000      	b.n	80057e6 <HAL_SPI_Transmit+0x25e>
 80057e4:	bf00      	nop
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80057f6:	7ffb      	ldrb	r3, [r7, #31]
 80057f8:	4618      	mov	r0, r3
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_SPI_Receive>:
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af02      	add	r7, sp, #8
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	4613      	mov	r3, r2
 800580e:	80fb      	strh	r3, [r7, #6]
 8005810:	2300      	movs	r3, #0
 8005812:	75fb      	strb	r3, [r7, #23]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800581c:	d112      	bne.n	8005844 <HAL_SPI_Receive+0x44>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10e      	bne.n	8005844 <HAL_SPI_Receive+0x44>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2204      	movs	r2, #4
 800582a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800582e:	88fa      	ldrh	r2, [r7, #6]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	4613      	mov	r3, r2
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 f8f1 	bl	8005a22 <HAL_SPI_TransmitReceive>
 8005840:	4603      	mov	r3, r0
 8005842:	e0ea      	b.n	8005a1a <HAL_SPI_Receive+0x21a>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_SPI_Receive+0x52>
 800584e:	2302      	movs	r3, #2
 8005850:	e0e3      	b.n	8005a1a <HAL_SPI_Receive+0x21a>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800585a:	f7fe fc2d 	bl	80040b8 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d002      	beq.n	8005872 <HAL_SPI_Receive+0x72>
 800586c:	2302      	movs	r3, #2
 800586e:	75fb      	strb	r3, [r7, #23]
 8005870:	e0ca      	b.n	8005a08 <HAL_SPI_Receive+0x208>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_SPI_Receive+0x7e>
 8005878:	88fb      	ldrh	r3, [r7, #6]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d102      	bne.n	8005884 <HAL_SPI_Receive+0x84>
 800587e:	2301      	movs	r3, #1
 8005880:	75fb      	strb	r3, [r7, #23]
 8005882:	e0c1      	b.n	8005a08 <HAL_SPI_Receive+0x208>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2204      	movs	r2, #4
 8005888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	655a      	str	r2, [r3, #84]	; 0x54
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	639a      	str	r2, [r3, #56]	; 0x38
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	88fa      	ldrh	r2, [r7, #6]
 800589c:	879a      	strh	r2, [r3, #60]	; 0x3c
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	88fa      	ldrh	r2, [r7, #6]
 80058a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	869a      	strh	r2, [r3, #52]	; 0x34
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	641a      	str	r2, [r3, #64]	; 0x40
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	645a      	str	r2, [r3, #68]	; 0x44
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ca:	d10f      	bne.n	80058ec <HAL_SPI_Receive+0xec>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d007      	beq.n	800590a <HAL_SPI_Receive+0x10a>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d162      	bne.n	80059d8 <HAL_SPI_Receive+0x1d8>
 8005912:	e02e      	b.n	8005972 <HAL_SPI_Receive+0x172>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b01      	cmp	r3, #1
 8005920:	d115      	bne.n	800594e <HAL_SPI_Receive+0x14e>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f103 020c 	add.w	r2, r3, #12
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	7812      	ldrb	r2, [r2, #0]
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	639a      	str	r2, [r3, #56]	; 0x38
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005942:	b29b      	uxth	r3, r3
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800594c:	e011      	b.n	8005972 <HAL_SPI_Receive+0x172>
 800594e:	f7fe fbb3 	bl	80040b8 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d803      	bhi.n	8005966 <HAL_SPI_Receive+0x166>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005964:	d102      	bne.n	800596c <HAL_SPI_Receive+0x16c>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d102      	bne.n	8005972 <HAL_SPI_Receive+0x172>
 800596c:	2303      	movs	r3, #3
 800596e:	75fb      	strb	r3, [r7, #23]
 8005970:	e04a      	b.n	8005a08 <HAL_SPI_Receive+0x208>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1cb      	bne.n	8005914 <HAL_SPI_Receive+0x114>
 800597c:	e031      	b.n	80059e2 <HAL_SPI_Receive+0x1e2>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d113      	bne.n	80059b4 <HAL_SPI_Receive+0x1b4>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	b292      	uxth	r2, r2
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	1c9a      	adds	r2, r3, #2
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059b2:	e011      	b.n	80059d8 <HAL_SPI_Receive+0x1d8>
 80059b4:	f7fe fb80 	bl	80040b8 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d803      	bhi.n	80059cc <HAL_SPI_Receive+0x1cc>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d102      	bne.n	80059d2 <HAL_SPI_Receive+0x1d2>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <HAL_SPI_Receive+0x1d8>
 80059d2:	2303      	movs	r3, #3
 80059d4:	75fb      	strb	r3, [r7, #23]
 80059d6:	e017      	b.n	8005a08 <HAL_SPI_Receive+0x208>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1cd      	bne.n	800597e <HAL_SPI_Receive+0x17e>
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	6839      	ldr	r1, [r7, #0]
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 fb4a 	bl	8006080 <SPI_EndRxTransaction>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_SPI_Receive+0x1f8>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2220      	movs	r2, #32
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_SPI_Receive+0x206>
 8005a00:	2301      	movs	r3, #1
 8005a02:	75fb      	strb	r3, [r7, #23]
 8005a04:	e000      	b.n	8005a08 <HAL_SPI_Receive+0x208>
 8005a06:	bf00      	nop
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_SPI_TransmitReceive>:
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b08c      	sub	sp, #48	; 0x30
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	807b      	strh	r3, [r7, #2]
 8005a30:	2301      	movs	r3, #1
 8005a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a34:	2300      	movs	r3, #0
 8005a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_SPI_TransmitReceive+0x26>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e18a      	b.n	8005d5e <HAL_SPI_TransmitReceive+0x33c>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005a50:	f7fe fb32 	bl	80040b8 <HAL_GetTick>
 8005a54:	6278      	str	r0, [r7, #36]	; 0x24
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	887b      	ldrh	r3, [r7, #2]
 8005a68:	837b      	strh	r3, [r7, #26]
 8005a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d00f      	beq.n	8005a92 <HAL_SPI_TransmitReceive+0x70>
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a78:	d107      	bne.n	8005a8a <HAL_SPI_TransmitReceive+0x68>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d103      	bne.n	8005a8a <HAL_SPI_TransmitReceive+0x68>
 8005a82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d003      	beq.n	8005a92 <HAL_SPI_TransmitReceive+0x70>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a90:	e15b      	b.n	8005d4a <HAL_SPI_TransmitReceive+0x328>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_SPI_TransmitReceive+0x82>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <HAL_SPI_TransmitReceive+0x82>
 8005a9e:	887b      	ldrh	r3, [r7, #2]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d103      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x8a>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aaa:	e14e      	b.n	8005d4a <HAL_SPI_TransmitReceive+0x328>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d003      	beq.n	8005ac0 <HAL_SPI_TransmitReceive+0x9e>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2205      	movs	r2, #5
 8005abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	655a      	str	r2, [r3, #84]	; 0x54
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	887a      	ldrh	r2, [r7, #2]
 8005ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	887a      	ldrh	r2, [r7, #2]
 8005ad6:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	887a      	ldrh	r2, [r7, #2]
 8005ae2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	887a      	ldrh	r2, [r7, #2]
 8005ae8:	869a      	strh	r2, [r3, #52]	; 0x34
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	641a      	str	r2, [r3, #64]	; 0x40
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	645a      	str	r2, [r3, #68]	; 0x44
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b00:	2b40      	cmp	r3, #64	; 0x40
 8005b02:	d007      	beq.n	8005b14 <HAL_SPI_TransmitReceive+0xf2>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b1c:	d178      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x1ee>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_SPI_TransmitReceive+0x10a>
 8005b26:	8b7b      	ldrh	r3, [r7, #26]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d166      	bne.n	8005bfa <HAL_SPI_TransmitReceive+0x1d8>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	881a      	ldrh	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60da      	str	r2, [r3, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	1c9a      	adds	r2, r3, #2
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	631a      	str	r2, [r3, #48]	; 0x30
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b50:	e053      	b.n	8005bfa <HAL_SPI_TransmitReceive+0x1d8>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d11b      	bne.n	8005b98 <HAL_SPI_TransmitReceive+0x176>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_SPI_TransmitReceive+0x176>
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d113      	bne.n	8005b98 <HAL_SPI_TransmitReceive+0x176>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	881a      	ldrh	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60da      	str	r2, [r3, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	1c9a      	adds	r2, r3, #2
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b94:	2300      	movs	r3, #0
 8005b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d119      	bne.n	8005bda <HAL_SPI_TransmitReceive+0x1b8>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d014      	beq.n	8005bda <HAL_SPI_TransmitReceive+0x1b8>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	b292      	uxth	r2, r2
 8005bbc:	801a      	strh	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	1c9a      	adds	r2, r3, #2
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bda:	f7fe fa6d 	bl	80040b8 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d807      	bhi.n	8005bfa <HAL_SPI_TransmitReceive+0x1d8>
 8005bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf0:	d003      	beq.n	8005bfa <HAL_SPI_TransmitReceive+0x1d8>
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bf8:	e0a7      	b.n	8005d4a <HAL_SPI_TransmitReceive+0x328>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1a6      	bne.n	8005b52 <HAL_SPI_TransmitReceive+0x130>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1a1      	bne.n	8005b52 <HAL_SPI_TransmitReceive+0x130>
 8005c0e:	e07c      	b.n	8005d0a <HAL_SPI_TransmitReceive+0x2e8>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <HAL_SPI_TransmitReceive+0x1fc>
 8005c18:	8b7b      	ldrh	r3, [r7, #26]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d16b      	bne.n	8005cf6 <HAL_SPI_TransmitReceive+0x2d4>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	330c      	adds	r3, #12
 8005c28:	7812      	ldrb	r2, [r2, #0]
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c44:	e057      	b.n	8005cf6 <HAL_SPI_TransmitReceive+0x2d4>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d11c      	bne.n	8005c8e <HAL_SPI_TransmitReceive+0x26c>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d017      	beq.n	8005c8e <HAL_SPI_TransmitReceive+0x26c>
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d114      	bne.n	8005c8e <HAL_SPI_TransmitReceive+0x26c>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	701a      	strb	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d119      	bne.n	8005cd0 <HAL_SPI_TransmitReceive+0x2ae>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d014      	beq.n	8005cd0 <HAL_SPI_TransmitReceive+0x2ae>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	701a      	strb	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ccc:	2301      	movs	r3, #1
 8005cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd0:	f7fe f9f2 	bl	80040b8 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d803      	bhi.n	8005ce8 <HAL_SPI_TransmitReceive+0x2c6>
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d102      	bne.n	8005cee <HAL_SPI_TransmitReceive+0x2cc>
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d103      	bne.n	8005cf6 <HAL_SPI_TransmitReceive+0x2d4>
 8005cee:	2303      	movs	r3, #3
 8005cf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf4:	e029      	b.n	8005d4a <HAL_SPI_TransmitReceive+0x328>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1a2      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x224>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d19d      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x224>
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 fa08 	bl	8006124 <SPI_EndRxTxTransaction>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d006      	beq.n	8005d28 <HAL_SPI_TransmitReceive+0x306>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	655a      	str	r2, [r3, #84]	; 0x54
 8005d26:	e010      	b.n	8005d4a <HAL_SPI_TransmitReceive+0x328>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10b      	bne.n	8005d48 <HAL_SPI_TransmitReceive+0x326>
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	e000      	b.n	8005d4a <HAL_SPI_TransmitReceive+0x328>
 8005d48:	bf00      	nop
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3730      	adds	r7, #48	; 0x30
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <HAL_SPI_IRQHandler>:
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	099b      	lsrs	r3, r3, #6
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10f      	bne.n	8005dac <HAL_SPI_IRQHandler+0x44>
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_SPI_IRQHandler+0x44>
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	099b      	lsrs	r3, r3, #6
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <HAL_SPI_IRQHandler+0x44>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	4798      	blx	r3
 8005daa:	e0be      	b.n	8005f2a <HAL_SPI_IRQHandler+0x1c2>
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <HAL_SPI_IRQHandler+0x66>
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	09db      	lsrs	r3, r3, #7
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d004      	beq.n	8005dce <HAL_SPI_IRQHandler+0x66>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
 8005dcc:	e0ad      	b.n	8005f2a <HAL_SPI_IRQHandler+0x1c2>
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_SPI_IRQHandler+0x80>
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	099b      	lsrs	r3, r3, #6
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80a1 	beq.w	8005f2a <HAL_SPI_IRQHandler+0x1c2>
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 809a 	beq.w	8005f2a <HAL_SPI_IRQHandler+0x1c2>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	099b      	lsrs	r3, r3, #6
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d023      	beq.n	8005e4a <HAL_SPI_IRQHandler+0xe2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d011      	beq.n	8005e32 <HAL_SPI_IRQHandler+0xca>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e12:	f043 0204 	orr.w	r2, r3, #4
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	655a      	str	r2, [r3, #84]	; 0x54
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	e00b      	b.n	8005e4a <HAL_SPI_IRQHandler+0xe2>
 8005e32:	2300      	movs	r3, #0
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	e06f      	b.n	8005f2a <HAL_SPI_IRQHandler+0x1c2>
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d014      	beq.n	8005e80 <HAL_SPI_IRQHandler+0x118>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5a:	f043 0201 	orr.w	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d04f      	beq.n	8005f28 <HAL_SPI_IRQHandler+0x1c0>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e96:	605a      	str	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d104      	bne.n	8005eb4 <HAL_SPI_IRQHandler+0x14c>
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d034      	beq.n	8005f1e <HAL_SPI_IRQHandler+0x1b6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0203 	bic.w	r2, r2, #3
 8005ec2:	605a      	str	r2, [r3, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d011      	beq.n	8005ef0 <HAL_SPI_IRQHandler+0x188>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed0:	4a17      	ldr	r2, [pc, #92]	; (8005f30 <HAL_SPI_IRQHandler+0x1c8>)
 8005ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fe fa05 	bl	80042e8 <HAL_DMA_Abort_IT>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <HAL_SPI_IRQHandler+0x188>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d016      	beq.n	8005f26 <HAL_SPI_IRQHandler+0x1be>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efc:	4a0c      	ldr	r2, [pc, #48]	; (8005f30 <HAL_SPI_IRQHandler+0x1c8>)
 8005efe:	635a      	str	r2, [r3, #52]	; 0x34
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fe f9ef 	bl	80042e8 <HAL_DMA_Abort_IT>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00a      	beq.n	8005f26 <HAL_SPI_IRQHandler+0x1be>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	655a      	str	r2, [r3, #84]	; 0x54
 8005f1c:	e003      	b.n	8005f26 <HAL_SPI_IRQHandler+0x1be>
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f808 	bl	8005f34 <HAL_SPI_ErrorCallback>
 8005f24:	e000      	b.n	8005f28 <HAL_SPI_IRQHandler+0x1c0>
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	3720      	adds	r7, #32
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	08005f47 	.word	0x08005f47

08005f34 <HAL_SPI_ErrorCallback>:
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bc80      	pop	{r7}
 8005f44:	4770      	bx	lr

08005f46 <SPI_DMAAbortOnError>:
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f7ff ffe7 	bl	8005f34 <HAL_SPI_ErrorCallback>
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <SPI_WaitFlagStateUntilTimeout>:
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	71fb      	strb	r3, [r7, #7]
 8005f80:	f7fe f89a 	bl	80040b8 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	61fb      	str	r3, [r7, #28]
 8005f90:	f7fe f892 	bl	80040b8 <HAL_GetTick>
 8005f94:	61b8      	str	r0, [r7, #24]
 8005f96:	4b39      	ldr	r3, [pc, #228]	; (800607c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	015b      	lsls	r3, r3, #5
 8005f9c:	0d1b      	lsrs	r3, r3, #20
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	fb02 f303 	mul.w	r3, r2, r3
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	e054      	b.n	8006052 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d050      	beq.n	8006052 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005fb0:	f7fe f882 	bl	80040b8 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d902      	bls.n	8005fc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d13d      	bne.n	8006042 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fd4:	605a      	str	r2, [r3, #4]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fde:	d111      	bne.n	8006004 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe8:	d004      	beq.n	8005ff4 <SPI_WaitFlagStateUntilTimeout+0x84>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff2:	d107      	bne.n	8006004 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800600c:	d10f      	bne.n	800602e <SPI_WaitFlagStateUntilTimeout+0xbe>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800603e:	2303      	movs	r3, #3
 8006040:	e017      	b.n	8006072 <SPI_WaitFlagStateUntilTimeout+0x102>
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8006048:	2300      	movs	r3, #0
 800604a:	61fb      	str	r3, [r7, #28]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	3b01      	subs	r3, #1
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4013      	ands	r3, r2
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	429a      	cmp	r2, r3
 8006060:	bf0c      	ite	eq
 8006062:	2301      	moveq	r3, #1
 8006064:	2300      	movne	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	461a      	mov	r2, r3
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	429a      	cmp	r2, r3
 800606e:	d19b      	bne.n	8005fa8 <SPI_WaitFlagStateUntilTimeout+0x38>
 8006070:	2300      	movs	r3, #0
 8006072:	4618      	mov	r0, r3
 8006074:	3720      	adds	r7, #32
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000000 	.word	0x20000000

08006080 <SPI_EndRxTransaction>:
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006094:	d111      	bne.n	80060ba <SPI_EndRxTransaction+0x3a>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609e:	d004      	beq.n	80060aa <SPI_EndRxTransaction+0x2a>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a8:	d107      	bne.n	80060ba <SPI_EndRxTransaction+0x3a>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c2:	d117      	bne.n	80060f4 <SPI_EndRxTransaction+0x74>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060cc:	d112      	bne.n	80060f4 <SPI_EndRxTransaction+0x74>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2200      	movs	r2, #0
 80060d6:	2101      	movs	r1, #1
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff ff49 	bl	8005f70 <SPI_WaitFlagStateUntilTimeout>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01a      	beq.n	800611a <SPI_EndRxTransaction+0x9a>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e8:	f043 0220 	orr.w	r2, r3, #32
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54
 80060f0:	2303      	movs	r3, #3
 80060f2:	e013      	b.n	800611c <SPI_EndRxTransaction+0x9c>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2200      	movs	r2, #0
 80060fc:	2180      	movs	r1, #128	; 0x80
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f7ff ff36 	bl	8005f70 <SPI_WaitFlagStateUntilTimeout>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <SPI_EndRxTransaction+0x9a>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610e:	f043 0220 	orr.w	r2, r3, #32
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	655a      	str	r2, [r3, #84]	; 0x54
 8006116:	2303      	movs	r3, #3
 8006118:	e000      	b.n	800611c <SPI_EndRxTransaction+0x9c>
 800611a:	2300      	movs	r3, #0
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <SPI_EndRxTxTransaction>:
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af02      	add	r7, sp, #8
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2200      	movs	r2, #0
 8006138:	2180      	movs	r1, #128	; 0x80
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f7ff ff18 	bl	8005f70 <SPI_WaitFlagStateUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d007      	beq.n	8006156 <SPI_EndRxTxTransaction+0x32>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614a:	f043 0220 	orr.w	r2, r3, #32
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	655a      	str	r2, [r3, #84]	; 0x54
 8006152:	2303      	movs	r3, #3
 8006154:	e000      	b.n	8006158 <SPI_EndRxTxTransaction+0x34>
 8006156:	2300      	movs	r3, #0
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_TIM_Base_Init>:
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_TIM_Base_Init+0x12>
 800616e:	2301      	movs	r3, #1
 8006170:	e041      	b.n	80061f6 <HAL_TIM_Base_Init+0x96>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_TIM_Base_Init+0x2c>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fd fe54 	bl	8003e34 <HAL_TIM_Base_MspInit>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3304      	adds	r3, #4
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f000 fc68 	bl	8006a74 <TIM_Base_SetConfig>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061f4:	2300      	movs	r3, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_TIM_PWM_Init>:
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_TIM_PWM_Init+0x12>
 800620c:	2301      	movs	r3, #1
 800620e:	e041      	b.n	8006294 <HAL_TIM_PWM_Init+0x96>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d106      	bne.n	800622a <HAL_TIM_PWM_Init+0x2c>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f839 	bl	800629c <HAL_TIM_PWM_MspInit>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3304      	adds	r3, #4
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f000 fc19 	bl	8006a74 <TIM_Base_SetConfig>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006292:	2300      	movs	r3, #0
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_TIM_PWM_MspInit>:
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr
	...

080062b0 <HAL_TIM_PWM_Start>:
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d109      	bne.n	80062d4 <HAL_TIM_PWM_Start+0x24>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	bf14      	ite	ne
 80062cc:	2301      	movne	r3, #1
 80062ce:	2300      	moveq	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	e022      	b.n	800631a <HAL_TIM_PWM_Start+0x6a>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d109      	bne.n	80062ee <HAL_TIM_PWM_Start+0x3e>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	bf14      	ite	ne
 80062e6:	2301      	movne	r3, #1
 80062e8:	2300      	moveq	r3, #0
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	e015      	b.n	800631a <HAL_TIM_PWM_Start+0x6a>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d109      	bne.n	8006308 <HAL_TIM_PWM_Start+0x58>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	bf14      	ite	ne
 8006300:	2301      	movne	r3, #1
 8006302:	2300      	moveq	r3, #0
 8006304:	b2db      	uxtb	r3, r3
 8006306:	e008      	b.n	800631a <HAL_TIM_PWM_Start+0x6a>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b01      	cmp	r3, #1
 8006312:	bf14      	ite	ne
 8006314:	2301      	movne	r3, #1
 8006316:	2300      	moveq	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_TIM_PWM_Start+0x72>
 800631e:	2301      	movs	r3, #1
 8006320:	e072      	b.n	8006408 <HAL_TIM_PWM_Start+0x158>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <HAL_TIM_PWM_Start+0x82>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006330:	e013      	b.n	800635a <HAL_TIM_PWM_Start+0xaa>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b04      	cmp	r3, #4
 8006336:	d104      	bne.n	8006342 <HAL_TIM_PWM_Start+0x92>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006340:	e00b      	b.n	800635a <HAL_TIM_PWM_Start+0xaa>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b08      	cmp	r3, #8
 8006346:	d104      	bne.n	8006352 <HAL_TIM_PWM_Start+0xa2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006350:	e003      	b.n	800635a <HAL_TIM_PWM_Start+0xaa>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2201      	movs	r2, #1
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fe42 	bl	8006fec <TIM_CCxChannelCmd>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a28      	ldr	r2, [pc, #160]	; (8006410 <HAL_TIM_PWM_Start+0x160>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d004      	beq.n	800637c <HAL_TIM_PWM_Start+0xcc>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a27      	ldr	r2, [pc, #156]	; (8006414 <HAL_TIM_PWM_Start+0x164>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d101      	bne.n	8006380 <HAL_TIM_PWM_Start+0xd0>
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <HAL_TIM_PWM_Start+0xd2>
 8006380:	2300      	movs	r3, #0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d007      	beq.n	8006396 <HAL_TIM_PWM_Start+0xe6>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006394:	645a      	str	r2, [r3, #68]	; 0x44
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a1d      	ldr	r2, [pc, #116]	; (8006410 <HAL_TIM_PWM_Start+0x160>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d018      	beq.n	80063d2 <HAL_TIM_PWM_Start+0x122>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a1b      	ldr	r2, [pc, #108]	; (8006414 <HAL_TIM_PWM_Start+0x164>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d013      	beq.n	80063d2 <HAL_TIM_PWM_Start+0x122>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b2:	d00e      	beq.n	80063d2 <HAL_TIM_PWM_Start+0x122>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a17      	ldr	r2, [pc, #92]	; (8006418 <HAL_TIM_PWM_Start+0x168>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d009      	beq.n	80063d2 <HAL_TIM_PWM_Start+0x122>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a16      	ldr	r2, [pc, #88]	; (800641c <HAL_TIM_PWM_Start+0x16c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d004      	beq.n	80063d2 <HAL_TIM_PWM_Start+0x122>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a14      	ldr	r2, [pc, #80]	; (8006420 <HAL_TIM_PWM_Start+0x170>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d111      	bne.n	80063f6 <HAL_TIM_PWM_Start+0x146>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b06      	cmp	r3, #6
 80063e2:	d010      	beq.n	8006406 <HAL_TIM_PWM_Start+0x156>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	e007      	b.n	8006406 <HAL_TIM_PWM_Start+0x156>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f042 0201 	orr.w	r2, r2, #1
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	2300      	movs	r3, #0
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40012c00 	.word	0x40012c00
 8006414:	40013400 	.word	0x40013400
 8006418:	40000400 	.word	0x40000400
 800641c:	40000800 	.word	0x40000800
 8006420:	40000c00 	.word	0x40000c00

08006424 <HAL_TIM_PWM_Stop>:
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fdd8 	bl	8006fec <TIM_CCxChannelCmd>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a2e      	ldr	r2, [pc, #184]	; (80064fc <HAL_TIM_PWM_Stop+0xd8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d004      	beq.n	8006450 <HAL_TIM_PWM_Stop+0x2c>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a2d      	ldr	r2, [pc, #180]	; (8006500 <HAL_TIM_PWM_Stop+0xdc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d101      	bne.n	8006454 <HAL_TIM_PWM_Stop+0x30>
 8006450:	2301      	movs	r3, #1
 8006452:	e000      	b.n	8006456 <HAL_TIM_PWM_Stop+0x32>
 8006454:	2300      	movs	r3, #0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d017      	beq.n	800648a <HAL_TIM_PWM_Stop+0x66>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6a1a      	ldr	r2, [r3, #32]
 8006460:	f241 1311 	movw	r3, #4369	; 0x1111
 8006464:	4013      	ands	r3, r2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10f      	bne.n	800648a <HAL_TIM_PWM_Stop+0x66>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6a1a      	ldr	r2, [r3, #32]
 8006470:	f240 4344 	movw	r3, #1092	; 0x444
 8006474:	4013      	ands	r3, r2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d107      	bne.n	800648a <HAL_TIM_PWM_Stop+0x66>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6a1a      	ldr	r2, [r3, #32]
 8006490:	f241 1311 	movw	r3, #4369	; 0x1111
 8006494:	4013      	ands	r3, r2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10f      	bne.n	80064ba <HAL_TIM_PWM_Stop+0x96>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6a1a      	ldr	r2, [r3, #32]
 80064a0:	f240 4344 	movw	r3, #1092	; 0x444
 80064a4:	4013      	ands	r3, r2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d107      	bne.n	80064ba <HAL_TIM_PWM_Stop+0x96>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0201 	bic.w	r2, r2, #1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <HAL_TIM_PWM_Stop+0xa6>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c8:	e013      	b.n	80064f2 <HAL_TIM_PWM_Stop+0xce>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d104      	bne.n	80064da <HAL_TIM_PWM_Stop+0xb6>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064d8:	e00b      	b.n	80064f2 <HAL_TIM_PWM_Stop+0xce>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d104      	bne.n	80064ea <HAL_TIM_PWM_Stop+0xc6>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064e8:	e003      	b.n	80064f2 <HAL_TIM_PWM_Stop+0xce>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064f2:	2300      	movs	r3, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	40013400 	.word	0x40013400

08006504 <HAL_TIM_IRQHandler>:
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d122      	bne.n	8006560 <HAL_TIM_IRQHandler+0x5c>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b02      	cmp	r3, #2
 8006526:	d11b      	bne.n	8006560 <HAL_TIM_IRQHandler+0x5c>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0202 	mvn.w	r2, #2
 8006530:	611a      	str	r2, [r3, #16]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	771a      	strb	r2, [r3, #28]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_TIM_IRQHandler+0x4a>
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fa78 	bl	8006a3c <HAL_TIM_IC_CaptureCallback>
 800654c:	e005      	b.n	800655a <HAL_TIM_IRQHandler+0x56>
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fa6b 	bl	8006a2a <HAL_TIM_OC_DelayElapsedCallback>
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fa7a 	bl	8006a4e <HAL_TIM_PWM_PulseFinishedCallback>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	771a      	strb	r2, [r3, #28]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0304 	and.w	r3, r3, #4
 800656a:	2b04      	cmp	r3, #4
 800656c:	d122      	bne.n	80065b4 <HAL_TIM_IRQHandler+0xb0>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b04      	cmp	r3, #4
 800657a:	d11b      	bne.n	80065b4 <HAL_TIM_IRQHandler+0xb0>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0204 	mvn.w	r2, #4
 8006584:	611a      	str	r2, [r3, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2202      	movs	r2, #2
 800658a:	771a      	strb	r2, [r3, #28]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_TIM_IRQHandler+0x9e>
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fa4e 	bl	8006a3c <HAL_TIM_IC_CaptureCallback>
 80065a0:	e005      	b.n	80065ae <HAL_TIM_IRQHandler+0xaa>
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fa41 	bl	8006a2a <HAL_TIM_OC_DelayElapsedCallback>
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa50 	bl	8006a4e <HAL_TIM_PWM_PulseFinishedCallback>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	771a      	strb	r2, [r3, #28]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d122      	bne.n	8006608 <HAL_TIM_IRQHandler+0x104>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d11b      	bne.n	8006608 <HAL_TIM_IRQHandler+0x104>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0208 	mvn.w	r2, #8
 80065d8:	611a      	str	r2, [r3, #16]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2204      	movs	r2, #4
 80065de:	771a      	strb	r2, [r3, #28]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_TIM_IRQHandler+0xf2>
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fa24 	bl	8006a3c <HAL_TIM_IC_CaptureCallback>
 80065f4:	e005      	b.n	8006602 <HAL_TIM_IRQHandler+0xfe>
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa17 	bl	8006a2a <HAL_TIM_OC_DelayElapsedCallback>
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fa26 	bl	8006a4e <HAL_TIM_PWM_PulseFinishedCallback>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	771a      	strb	r2, [r3, #28]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0310 	and.w	r3, r3, #16
 8006612:	2b10      	cmp	r3, #16
 8006614:	d122      	bne.n	800665c <HAL_TIM_IRQHandler+0x158>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b10      	cmp	r3, #16
 8006622:	d11b      	bne.n	800665c <HAL_TIM_IRQHandler+0x158>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0210 	mvn.w	r2, #16
 800662c:	611a      	str	r2, [r3, #16]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2208      	movs	r2, #8
 8006632:	771a      	strb	r2, [r3, #28]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_TIM_IRQHandler+0x146>
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f9fa 	bl	8006a3c <HAL_TIM_IC_CaptureCallback>
 8006648:	e005      	b.n	8006656 <HAL_TIM_IRQHandler+0x152>
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f9ed 	bl	8006a2a <HAL_TIM_OC_DelayElapsedCallback>
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f9fc 	bl	8006a4e <HAL_TIM_PWM_PulseFinishedCallback>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b01      	cmp	r3, #1
 8006668:	d10e      	bne.n	8006688 <HAL_TIM_IRQHandler+0x184>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b01      	cmp	r3, #1
 8006676:	d107      	bne.n	8006688 <HAL_TIM_IRQHandler+0x184>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0201 	mvn.w	r2, #1
 8006680:	611a      	str	r2, [r3, #16]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f9c8 	bl	8006a18 <HAL_TIM_PeriodElapsedCallback>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b80      	cmp	r3, #128	; 0x80
 8006694:	d10e      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x1b0>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a0:	2b80      	cmp	r3, #128	; 0x80
 80066a2:	d107      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x1b0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066ac:	611a      	str	r2, [r3, #16]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fd35 	bl	800711e <HAL_TIMEx_BreakCallback>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b40      	cmp	r3, #64	; 0x40
 80066c0:	d10e      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x1dc>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066cc:	2b40      	cmp	r3, #64	; 0x40
 80066ce:	d107      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x1dc>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066d8:	611a      	str	r2, [r3, #16]
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f9c0 	bl	8006a60 <HAL_TIM_TriggerCallback>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d10e      	bne.n	800670c <HAL_TIM_IRQHandler+0x208>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d107      	bne.n	800670c <HAL_TIM_IRQHandler+0x208>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f06f 0220 	mvn.w	r2, #32
 8006704:	611a      	str	r2, [r3, #16]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fd00 	bl	800710c <HAL_TIMEx_CommutCallback>
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_TIM_PWM_ConfigChannel>:
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800672a:	2302      	movs	r3, #2
 800672c:	e0ac      	b.n	8006888 <HAL_TIM_PWM_ConfigChannel+0x174>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b0c      	cmp	r3, #12
 800673a:	f200 809f 	bhi.w	800687c <HAL_TIM_PWM_ConfigChannel+0x168>
 800673e:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	08006779 	.word	0x08006779
 8006748:	0800687d 	.word	0x0800687d
 800674c:	0800687d 	.word	0x0800687d
 8006750:	0800687d 	.word	0x0800687d
 8006754:	080067b9 	.word	0x080067b9
 8006758:	0800687d 	.word	0x0800687d
 800675c:	0800687d 	.word	0x0800687d
 8006760:	0800687d 	.word	0x0800687d
 8006764:	080067fb 	.word	0x080067fb
 8006768:	0800687d 	.word	0x0800687d
 800676c:	0800687d 	.word	0x0800687d
 8006770:	0800687d 	.word	0x0800687d
 8006774:	0800683b 	.word	0x0800683b
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	4618      	mov	r0, r3
 8006780:	f000 f9f2 	bl	8006b68 <TIM_OC1_SetConfig>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0208 	orr.w	r2, r2, #8
 8006792:	619a      	str	r2, [r3, #24]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0204 	bic.w	r2, r2, #4
 80067a2:	619a      	str	r2, [r3, #24]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6999      	ldr	r1, [r3, #24]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	691a      	ldr	r2, [r3, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	619a      	str	r2, [r3, #24]
 80067b6:	e062      	b.n	800687e <HAL_TIM_PWM_ConfigChannel+0x16a>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fa42 	bl	8006c48 <TIM_OC2_SetConfig>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699a      	ldr	r2, [r3, #24]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d2:	619a      	str	r2, [r3, #24]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e2:	619a      	str	r2, [r3, #24]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6999      	ldr	r1, [r3, #24]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	021a      	lsls	r2, r3, #8
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	619a      	str	r2, [r3, #24]
 80067f8:	e041      	b.n	800687e <HAL_TIM_PWM_ConfigChannel+0x16a>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fa95 	bl	8006d30 <TIM_OC3_SetConfig>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0208 	orr.w	r2, r2, #8
 8006814:	61da      	str	r2, [r3, #28]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0204 	bic.w	r2, r2, #4
 8006824:	61da      	str	r2, [r3, #28]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69d9      	ldr	r1, [r3, #28]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	61da      	str	r2, [r3, #28]
 8006838:	e021      	b.n	800687e <HAL_TIM_PWM_ConfigChannel+0x16a>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	4618      	mov	r0, r3
 8006842:	f000 fae9 	bl	8006e18 <TIM_OC4_SetConfig>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006854:	61da      	str	r2, [r3, #28]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69da      	ldr	r2, [r3, #28]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006864:	61da      	str	r2, [r3, #28]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	69d9      	ldr	r1, [r3, #28]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	021a      	lsls	r2, r3, #8
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	61da      	str	r2, [r3, #28]
 800687a:	e000      	b.n	800687e <HAL_TIM_PWM_ConfigChannel+0x16a>
 800687c:	bf00      	nop
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006886:	2300      	movs	r3, #0
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_TIM_ConfigClockSource>:
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d101      	bne.n	80068a8 <HAL_TIM_ConfigClockSource+0x18>
 80068a4:	2302      	movs	r3, #2
 80068a6:	e0b3      	b.n	8006a10 <HAL_TIM_ConfigClockSource+0x180>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	609a      	str	r2, [r3, #8]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e0:	d03e      	beq.n	8006960 <HAL_TIM_ConfigClockSource+0xd0>
 80068e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e6:	f200 8087 	bhi.w	80069f8 <HAL_TIM_ConfigClockSource+0x168>
 80068ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ee:	f000 8085 	beq.w	80069fc <HAL_TIM_ConfigClockSource+0x16c>
 80068f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f6:	d87f      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x168>
 80068f8:	2b70      	cmp	r3, #112	; 0x70
 80068fa:	d01a      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0xa2>
 80068fc:	2b70      	cmp	r3, #112	; 0x70
 80068fe:	d87b      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x168>
 8006900:	2b60      	cmp	r3, #96	; 0x60
 8006902:	d050      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x116>
 8006904:	2b60      	cmp	r3, #96	; 0x60
 8006906:	d877      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x168>
 8006908:	2b50      	cmp	r3, #80	; 0x50
 800690a:	d03c      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0xf6>
 800690c:	2b50      	cmp	r3, #80	; 0x50
 800690e:	d873      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x168>
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d058      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0x136>
 8006914:	2b40      	cmp	r3, #64	; 0x40
 8006916:	d86f      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x168>
 8006918:	2b30      	cmp	r3, #48	; 0x30
 800691a:	d064      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x156>
 800691c:	2b30      	cmp	r3, #48	; 0x30
 800691e:	d86b      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x168>
 8006920:	2b20      	cmp	r3, #32
 8006922:	d060      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x156>
 8006924:	2b20      	cmp	r3, #32
 8006926:	d867      	bhi.n	80069f8 <HAL_TIM_ConfigClockSource+0x168>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d05c      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x156>
 800692c:	2b10      	cmp	r3, #16
 800692e:	d05a      	beq.n	80069e6 <HAL_TIM_ConfigClockSource+0x156>
 8006930:	e062      	b.n	80069f8 <HAL_TIM_ConfigClockSource+0x168>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6818      	ldr	r0, [r3, #0]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	6899      	ldr	r1, [r3, #8]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f000 fb34 	bl	8006fae <TIM_ETR_SetConfig>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	609a      	str	r2, [r3, #8]
 800695e:	e04e      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x16e>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6818      	ldr	r0, [r3, #0]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	6899      	ldr	r1, [r3, #8]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f000 fb1d 	bl	8006fae <TIM_ETR_SetConfig>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006982:	609a      	str	r2, [r3, #8]
 8006984:	e03b      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x16e>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	6859      	ldr	r1, [r3, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	461a      	mov	r2, r3
 8006994:	f000 fa94 	bl	8006ec0 <TIM_TI1_ConfigInputStage>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2150      	movs	r1, #80	; 0x50
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 faeb 	bl	8006f7a <TIM_ITRx_SetConfig>
 80069a4:	e02b      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x16e>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6818      	ldr	r0, [r3, #0]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	6859      	ldr	r1, [r3, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	461a      	mov	r2, r3
 80069b4:	f000 fab2 	bl	8006f1c <TIM_TI2_ConfigInputStage>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2160      	movs	r1, #96	; 0x60
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fadb 	bl	8006f7a <TIM_ITRx_SetConfig>
 80069c4:	e01b      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x16e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6818      	ldr	r0, [r3, #0]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6859      	ldr	r1, [r3, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	461a      	mov	r2, r3
 80069d4:	f000 fa74 	bl	8006ec0 <TIM_TI1_ConfigInputStage>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2140      	movs	r1, #64	; 0x40
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 facb 	bl	8006f7a <TIM_ITRx_SetConfig>
 80069e4:	e00b      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x16e>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4619      	mov	r1, r3
 80069f0:	4610      	mov	r0, r2
 80069f2:	f000 fac2 	bl	8006f7a <TIM_ITRx_SetConfig>
 80069f6:	e002      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x16e>
 80069f8:	bf00      	nop
 80069fa:	e000      	b.n	80069fe <HAL_TIM_ConfigClockSource+0x16e>
 80069fc:	bf00      	nop
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006a0e:	2300      	movs	r3, #0
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_TIM_PeriodElapsedCallback>:
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr

08006a2a <HAL_TIM_OC_DelayElapsedCallback>:
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr

08006a3c <HAL_TIM_IC_CaptureCallback>:
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr

08006a4e <HAL_TIM_PWM_PulseFinishedCallback>:
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bc80      	pop	{r7}
 8006a5e:	4770      	bx	lr

08006a60 <HAL_TIM_TriggerCallback>:
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr
	...

08006a74 <TIM_Base_SetConfig>:
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a33      	ldr	r2, [pc, #204]	; (8006b54 <TIM_Base_SetConfig+0xe0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <TIM_Base_SetConfig+0x40>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a32      	ldr	r2, [pc, #200]	; (8006b58 <TIM_Base_SetConfig+0xe4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00f      	beq.n	8006ab4 <TIM_Base_SetConfig+0x40>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9a:	d00b      	beq.n	8006ab4 <TIM_Base_SetConfig+0x40>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a2f      	ldr	r2, [pc, #188]	; (8006b5c <TIM_Base_SetConfig+0xe8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_Base_SetConfig+0x40>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a2e      	ldr	r2, [pc, #184]	; (8006b60 <TIM_Base_SetConfig+0xec>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_Base_SetConfig+0x40>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a2d      	ldr	r2, [pc, #180]	; (8006b64 <TIM_Base_SetConfig+0xf0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d108      	bne.n	8006ac6 <TIM_Base_SetConfig+0x52>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a22      	ldr	r2, [pc, #136]	; (8006b54 <TIM_Base_SetConfig+0xe0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d013      	beq.n	8006af6 <TIM_Base_SetConfig+0x82>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a21      	ldr	r2, [pc, #132]	; (8006b58 <TIM_Base_SetConfig+0xe4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00f      	beq.n	8006af6 <TIM_Base_SetConfig+0x82>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006adc:	d00b      	beq.n	8006af6 <TIM_Base_SetConfig+0x82>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a1e      	ldr	r2, [pc, #120]	; (8006b5c <TIM_Base_SetConfig+0xe8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d007      	beq.n	8006af6 <TIM_Base_SetConfig+0x82>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a1d      	ldr	r2, [pc, #116]	; (8006b60 <TIM_Base_SetConfig+0xec>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d003      	beq.n	8006af6 <TIM_Base_SetConfig+0x82>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <TIM_Base_SetConfig+0xf0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d108      	bne.n	8006b08 <TIM_Base_SetConfig+0x94>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a09      	ldr	r2, [pc, #36]	; (8006b54 <TIM_Base_SetConfig+0xe0>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d003      	beq.n	8006b3c <TIM_Base_SetConfig+0xc8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a08      	ldr	r2, [pc, #32]	; (8006b58 <TIM_Base_SetConfig+0xe4>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d103      	bne.n	8006b44 <TIM_Base_SetConfig+0xd0>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	691a      	ldr	r2, [r3, #16]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	631a      	str	r2, [r3, #48]	; 0x30
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	615a      	str	r2, [r3, #20]
 8006b4a:	bf00      	nop
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr
 8006b54:	40012c00 	.word	0x40012c00
 8006b58:	40013400 	.word	0x40013400
 8006b5c:	40000400 	.word	0x40000400
 8006b60:	40000800 	.word	0x40000800
 8006b64:	40000c00 	.word	0x40000c00

08006b68 <TIM_OC1_SetConfig>:
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	f023 0201 	bic.w	r2, r3, #1
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	621a      	str	r2, [r3, #32]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0303 	bic.w	r3, r3, #3
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f023 0302 	bic.w	r3, r3, #2
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a20      	ldr	r2, [pc, #128]	; (8006c40 <TIM_OC1_SetConfig+0xd8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_OC1_SetConfig+0x64>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a1f      	ldr	r2, [pc, #124]	; (8006c44 <TIM_OC1_SetConfig+0xdc>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d10c      	bne.n	8006be6 <TIM_OC1_SetConfig+0x7e>
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f023 0308 	bic.w	r3, r3, #8
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f023 0304 	bic.w	r3, r3, #4
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a15      	ldr	r2, [pc, #84]	; (8006c40 <TIM_OC1_SetConfig+0xd8>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_OC1_SetConfig+0x8e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a14      	ldr	r2, [pc, #80]	; (8006c44 <TIM_OC1_SetConfig+0xdc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d111      	bne.n	8006c1a <TIM_OC1_SetConfig+0xb2>
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bfc:	613b      	str	r3, [r7, #16]
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	605a      	str	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	619a      	str	r2, [r3, #24]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	635a      	str	r2, [r3, #52]	; 0x34
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	621a      	str	r2, [r3, #32]
 8006c34:	bf00      	nop
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40013400 	.word	0x40013400

08006c48 <TIM_OC2_SetConfig>:
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	f023 0210 	bic.w	r2, r3, #16
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	621a      	str	r2, [r3, #32]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f023 0320 	bic.w	r3, r3, #32
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a21      	ldr	r2, [pc, #132]	; (8006d28 <TIM_OC2_SetConfig+0xe0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <TIM_OC2_SetConfig+0x68>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a20      	ldr	r2, [pc, #128]	; (8006d2c <TIM_OC2_SetConfig+0xe4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d10d      	bne.n	8006ccc <TIM_OC2_SetConfig+0x84>
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a16      	ldr	r2, [pc, #88]	; (8006d28 <TIM_OC2_SetConfig+0xe0>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d003      	beq.n	8006cdc <TIM_OC2_SetConfig+0x94>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a15      	ldr	r2, [pc, #84]	; (8006d2c <TIM_OC2_SetConfig+0xe4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d113      	bne.n	8006d04 <TIM_OC2_SetConfig+0xbc>
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ce2:	613b      	str	r3, [r7, #16]
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cea:	613b      	str	r3, [r7, #16]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	605a      	str	r2, [r3, #4]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	619a      	str	r2, [r3, #24]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	639a      	str	r2, [r3, #56]	; 0x38
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	621a      	str	r2, [r3, #32]
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bc80      	pop	{r7}
 8006d26:	4770      	bx	lr
 8006d28:	40012c00 	.word	0x40012c00
 8006d2c:	40013400 	.word	0x40013400

08006d30 <TIM_OC3_SetConfig>:
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	621a      	str	r2, [r3, #32]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0303 	bic.w	r3, r3, #3
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a21      	ldr	r2, [pc, #132]	; (8006e10 <TIM_OC3_SetConfig+0xe0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d003      	beq.n	8006d96 <TIM_OC3_SetConfig+0x66>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a20      	ldr	r2, [pc, #128]	; (8006e14 <TIM_OC3_SetConfig+0xe4>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d10d      	bne.n	8006db2 <TIM_OC3_SetConfig+0x82>
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a16      	ldr	r2, [pc, #88]	; (8006e10 <TIM_OC3_SetConfig+0xe0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d003      	beq.n	8006dc2 <TIM_OC3_SetConfig+0x92>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a15      	ldr	r2, [pc, #84]	; (8006e14 <TIM_OC3_SetConfig+0xe4>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d113      	bne.n	8006dea <TIM_OC3_SetConfig+0xba>
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	605a      	str	r2, [r3, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	61da      	str	r2, [r3, #28]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	63da      	str	r2, [r3, #60]	; 0x3c
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	621a      	str	r2, [r3, #32]
 8006e04:	bf00      	nop
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40012c00 	.word	0x40012c00
 8006e14:	40013400 	.word	0x40013400

08006e18 <TIM_OC4_SetConfig>:
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	621a      	str	r2, [r3, #32]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	021b      	lsls	r3, r3, #8
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e62:	613b      	str	r3, [r7, #16]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	031b      	lsls	r3, r3, #12
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a11      	ldr	r2, [pc, #68]	; (8006eb8 <TIM_OC4_SetConfig+0xa0>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d003      	beq.n	8006e80 <TIM_OC4_SetConfig+0x68>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a10      	ldr	r2, [pc, #64]	; (8006ebc <TIM_OC4_SetConfig+0xa4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d109      	bne.n	8006e94 <TIM_OC4_SetConfig+0x7c>
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	019b      	lsls	r3, r3, #6
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	605a      	str	r2, [r3, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	61da      	str	r2, [r3, #28]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	641a      	str	r2, [r3, #64]	; 0x40
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	621a      	str	r2, [r3, #32]
 8006eae:	bf00      	nop
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bc80      	pop	{r7}
 8006eb6:	4770      	bx	lr
 8006eb8:	40012c00 	.word	0x40012c00
 8006ebc:	40013400 	.word	0x40013400

08006ec0 <TIM_TI1_ConfigInputStage>:
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	621a      	str	r2, [r3, #32]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	613b      	str	r3, [r7, #16]
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eea:	613b      	str	r3, [r7, #16]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f023 030a 	bic.w	r3, r3, #10
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	619a      	str	r2, [r3, #24]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	621a      	str	r2, [r3, #32]
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr

08006f1c <TIM_TI2_ConfigInputStage>:
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	f023 0210 	bic.w	r2, r3, #16
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	621a      	str	r2, [r3, #32]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	617b      	str	r3, [r7, #20]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	031b      	lsls	r3, r3, #12
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f58:	613b      	str	r3, [r7, #16]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	619a      	str	r2, [r3, #24]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	621a      	str	r2, [r3, #32]
 8006f70:	bf00      	nop
 8006f72:	371c      	adds	r7, #28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bc80      	pop	{r7}
 8006f78:	4770      	bx	lr

08006f7a <TIM_ITRx_SetConfig>:
 8006f7a:	b480      	push	{r7}
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	f043 0307 	orr.w	r3, r3, #7
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	609a      	str	r2, [r3, #8]
 8006fa4:	bf00      	nop
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bc80      	pop	{r7}
 8006fac:	4770      	bx	lr

08006fae <TIM_ETR_SetConfig>:
 8006fae:	b480      	push	{r7}
 8006fb0:	b087      	sub	sp, #28
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	607a      	str	r2, [r7, #4]
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	021a      	lsls	r2, r3, #8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	609a      	str	r2, [r3, #8]
 8006fe2:	bf00      	nop
 8006fe4:	371c      	adds	r7, #28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr

08006fec <TIM_CCxChannelCmd>:
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f003 031f 	and.w	r3, r3, #31
 8006ffe:	2201      	movs	r2, #1
 8007000:	fa02 f303 	lsl.w	r3, r2, r3
 8007004:	617b      	str	r3, [r7, #20]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6a1a      	ldr	r2, [r3, #32]
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	43db      	mvns	r3, r3
 800700e:	401a      	ands	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	621a      	str	r2, [r3, #32]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a1a      	ldr	r2, [r3, #32]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	fa01 f303 	lsl.w	r3, r1, r3
 8007024:	431a      	orrs	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	621a      	str	r2, [r3, #32]
 800702a:	bf00      	nop
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr

08007034 <HAL_TIMEx_MasterConfigSynchronization>:
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007044:	2b01      	cmp	r3, #1
 8007046:	d101      	bne.n	800704c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007048:	2302      	movs	r3, #2
 800704a:	e050      	b.n	80070ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	60bb      	str	r3, [r7, #8]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	605a      	str	r2, [r3, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a1b      	ldr	r2, [pc, #108]	; (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d018      	beq.n	80070c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a19      	ldr	r2, [pc, #100]	; (80070fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d013      	beq.n	80070c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a2:	d00e      	beq.n	80070c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a15      	ldr	r2, [pc, #84]	; (8007100 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d009      	beq.n	80070c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a14      	ldr	r2, [pc, #80]	; (8007104 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d004      	beq.n	80070c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a12      	ldr	r2, [pc, #72]	; (8007108 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d10c      	bne.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070c8:	60bb      	str	r3, [r7, #8]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	60bb      	str	r3, [r7, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	609a      	str	r2, [r3, #8]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80070ec:	2300      	movs	r3, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr
 80070f8:	40012c00 	.word	0x40012c00
 80070fc:	40013400 	.word	0x40013400
 8007100:	40000400 	.word	0x40000400
 8007104:	40000800 	.word	0x40000800
 8007108:	40000c00 	.word	0x40000c00

0800710c <HAL_TIMEx_CommutCallback>:
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr

0800711e <HAL_TIMEx_BreakCallback>:
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	bc80      	pop	{r7}
 800712e:	4770      	bx	lr

08007130 <osKernelInitialize>:
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	f3ef 8305 	mrs	r3, IPSR
 800713a:	60bb      	str	r3, [r7, #8]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10f      	bne.n	8007162 <osKernelInitialize+0x32>
 8007142:	f3ef 8310 	mrs	r3, PRIMASK
 8007146:	607b      	str	r3, [r7, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d109      	bne.n	8007162 <osKernelInitialize+0x32>
 800714e:	4b10      	ldr	r3, [pc, #64]	; (8007190 <osKernelInitialize+0x60>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b02      	cmp	r3, #2
 8007154:	d109      	bne.n	800716a <osKernelInitialize+0x3a>
 8007156:	f3ef 8311 	mrs	r3, BASEPRI
 800715a:	603b      	str	r3, [r7, #0]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <osKernelInitialize+0x3a>
 8007162:	f06f 0305 	mvn.w	r3, #5
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e00c      	b.n	8007184 <osKernelInitialize+0x54>
 800716a:	4b09      	ldr	r3, [pc, #36]	; (8007190 <osKernelInitialize+0x60>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d105      	bne.n	800717e <osKernelInitialize+0x4e>
 8007172:	4b07      	ldr	r3, [pc, #28]	; (8007190 <osKernelInitialize+0x60>)
 8007174:	2201      	movs	r2, #1
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	e002      	b.n	8007184 <osKernelInitialize+0x54>
 800717e:	f04f 33ff 	mov.w	r3, #4294967295
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr
 8007190:	20000038 	.word	0x20000038

08007194 <osThreadNew>:
 8007194:	b580      	push	{r7, lr}
 8007196:	b092      	sub	sp, #72	; 0x48
 8007198:	af04      	add	r7, sp, #16
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
 80071a0:	2300      	movs	r3, #0
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	f3ef 8305 	mrs	r3, IPSR
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f040 8094 	bne.w	80072da <osThreadNew+0x146>
 80071b2:	f3ef 8310 	mrs	r3, PRIMASK
 80071b6:	623b      	str	r3, [r7, #32]
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f040 808d 	bne.w	80072da <osThreadNew+0x146>
 80071c0:	4b48      	ldr	r3, [pc, #288]	; (80072e4 <osThreadNew+0x150>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d106      	bne.n	80071d6 <osThreadNew+0x42>
 80071c8:	f3ef 8311 	mrs	r3, BASEPRI
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 8082 	bne.w	80072da <osThreadNew+0x146>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d07e      	beq.n	80072da <osThreadNew+0x146>
 80071dc:	2380      	movs	r3, #128	; 0x80
 80071de:	633b      	str	r3, [r7, #48]	; 0x30
 80071e0:	2318      	movs	r3, #24
 80071e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071e4:	2300      	movs	r3, #0
 80071e6:	76fb      	strb	r3, [r7, #27]
 80071e8:	f107 031b 	add.w	r3, r7, #27
 80071ec:	637b      	str	r3, [r7, #52]	; 0x34
 80071ee:	f04f 33ff 	mov.w	r3, #4294967295
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d045      	beq.n	8007286 <osThreadNew+0xf2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <osThreadNew+0x74>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	637b      	str	r3, [r7, #52]	; 0x34
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <osThreadNew+0x82>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <osThreadNew+0x9a>
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721e:	2b38      	cmp	r3, #56	; 0x38
 8007220:	d805      	bhi.n	800722e <osThreadNew+0x9a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <osThreadNew+0x9e>
 800722e:	2300      	movs	r3, #0
 8007230:	e054      	b.n	80072dc <osThreadNew+0x148>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <osThreadNew+0xae>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	089b      	lsrs	r3, r3, #2
 8007240:	633b      	str	r3, [r7, #48]	; 0x30
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00e      	beq.n	8007268 <osThreadNew+0xd4>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	2b5b      	cmp	r3, #91	; 0x5b
 8007250:	d90a      	bls.n	8007268 <osThreadNew+0xd4>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d006      	beq.n	8007268 <osThreadNew+0xd4>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <osThreadNew+0xd4>
 8007262:	2301      	movs	r3, #1
 8007264:	62bb      	str	r3, [r7, #40]	; 0x28
 8007266:	e010      	b.n	800728a <osThreadNew+0xf6>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10c      	bne.n	800728a <osThreadNew+0xf6>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d108      	bne.n	800728a <osThreadNew+0xf6>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d104      	bne.n	800728a <osThreadNew+0xf6>
 8007280:	2300      	movs	r3, #0
 8007282:	62bb      	str	r3, [r7, #40]	; 0x28
 8007284:	e001      	b.n	800728a <osThreadNew+0xf6>
 8007286:	2300      	movs	r3, #0
 8007288:	62bb      	str	r3, [r7, #40]	; 0x28
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728c:	2b01      	cmp	r3, #1
 800728e:	d110      	bne.n	80072b2 <osThreadNew+0x11e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	6892      	ldr	r2, [r2, #8]
 8007298:	9202      	str	r2, [sp, #8]
 800729a:	9301      	str	r3, [sp, #4]
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 fecc 	bl	8008044 <xTaskCreateStatic>
 80072ac:	4603      	mov	r3, r0
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	e013      	b.n	80072da <osThreadNew+0x146>
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d110      	bne.n	80072da <osThreadNew+0x146>
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	f107 0314 	add.w	r3, r7, #20
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 feea 	bl	80080a4 <xTaskCreate>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d001      	beq.n	80072da <osThreadNew+0x146>
 80072d6:	2300      	movs	r3, #0
 80072d8:	617b      	str	r3, [r7, #20]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	4618      	mov	r0, r3
 80072de:	3738      	adds	r7, #56	; 0x38
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000038 	.word	0x20000038

080072e8 <vApplicationGetIdleTaskMemory>:
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4a06      	ldr	r2, [pc, #24]	; (8007310 <vApplicationGetIdleTaskMemory+0x28>)
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	4a05      	ldr	r2, [pc, #20]	; (8007314 <vApplicationGetIdleTaskMemory+0x2c>)
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2280      	movs	r2, #128	; 0x80
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	bf00      	nop
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	bc80      	pop	{r7}
 800730e:	4770      	bx	lr
 8007310:	2000003c 	.word	0x2000003c
 8007314:	20000098 	.word	0x20000098

08007318 <vApplicationGetTimerTaskMemory>:
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4a07      	ldr	r2, [pc, #28]	; (8007344 <vApplicationGetTimerTaskMemory+0x2c>)
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	4a06      	ldr	r2, [pc, #24]	; (8007348 <vApplicationGetTimerTaskMemory+0x30>)
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20000298 	.word	0x20000298
 8007348:	200002f4 	.word	0x200002f4

0800734c <vListInitialise>:
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f103 0208 	add.w	r2, r3, #8
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	605a      	str	r2, [r3, #4]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f04f 32ff 	mov.w	r2, #4294967295
 8007364:	609a      	str	r2, [r3, #8]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f103 0208 	add.w	r2, r3, #8
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	60da      	str	r2, [r3, #12]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f103 0208 	add.w	r2, r3, #8
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	611a      	str	r2, [r3, #16]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	bc80      	pop	{r7}
 8007388:	4770      	bx	lr

0800738a <vListInitialiseItem>:
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	611a      	str	r2, [r3, #16]
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	bc80      	pop	{r7}
 80073a0:	4770      	bx	lr

080073a2 <vListInsertEnd>:
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	605a      	str	r2, [r3, #4]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	609a      	str	r2, [r3, #8]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	605a      	str	r2, [r3, #4]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	609a      	str	r2, [r3, #8]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	611a      	str	r2, [r3, #16]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	bf00      	nop
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr

080073e8 <vListInsert>:
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60bb      	str	r3, [r7, #8]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fe:	d103      	bne.n	8007408 <vListInsert+0x20>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	e00c      	b.n	8007422 <vListInsert+0x3a>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3308      	adds	r3, #8
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	e002      	b.n	8007416 <vListInsert+0x2e>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	429a      	cmp	r2, r3
 8007420:	d2f6      	bcs.n	8007410 <vListInsert+0x28>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	605a      	str	r2, [r3, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	609a      	str	r2, [r3, #8]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	609a      	str	r2, [r3, #8]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	605a      	str	r2, [r3, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	611a      	str	r2, [r3, #16]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	bf00      	nop
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr

08007458 <uxListRemove>:
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	60fb      	str	r3, [r7, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	6892      	ldr	r2, [r2, #8]
 800746e:	609a      	str	r2, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6852      	ldr	r2, [r2, #4]
 8007478:	605a      	str	r2, [r3, #4]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	429a      	cmp	r2, r3
 8007482:	d103      	bne.n	800748c <uxListRemove+0x34>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	605a      	str	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	611a      	str	r2, [r3, #16]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	1e5a      	subs	r2, r3, #1
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr
	...

080074ac <xQueueGenericReset>:
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	f001 ffdd 	bl	8009478 <vPortEnterCritical>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c6:	68f9      	ldr	r1, [r7, #12]
 80074c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074ca:	fb01 f303 	mul.w	r3, r1, r3
 80074ce:	441a      	add	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	605a      	str	r2, [r3, #4]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	639a      	str	r2, [r3, #56]	; 0x38
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	609a      	str	r2, [r3, #8]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ea:	3b01      	subs	r3, #1
 80074ec:	68f9      	ldr	r1, [r7, #12]
 80074ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074f0:	fb01 f303 	mul.w	r3, r1, r3
 80074f4:	441a      	add	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	22ff      	movs	r2, #255	; 0xff
 80074fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	22ff      	movs	r2, #255	; 0xff
 8007506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d114      	bne.n	800753a <xQueueGenericReset+0x8e>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d01a      	beq.n	800754e <xQueueGenericReset+0xa2>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3310      	adds	r3, #16
 800751c:	4618      	mov	r0, r3
 800751e:	f001 f943 	bl	80087a8 <xTaskRemoveFromEventList>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d012      	beq.n	800754e <xQueueGenericReset+0xa2>
 8007528:	4b0c      	ldr	r3, [pc, #48]	; (800755c <xQueueGenericReset+0xb0>)
 800752a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	e009      	b.n	800754e <xQueueGenericReset+0xa2>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3310      	adds	r3, #16
 800753e:	4618      	mov	r0, r3
 8007540:	f7ff ff04 	bl	800734c <vListInitialise>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3324      	adds	r3, #36	; 0x24
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff feff 	bl	800734c <vListInitialise>
 800754e:	f001 ffad 	bl	80094ac <vPortExitCritical>
 8007552:	2301      	movs	r3, #1
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	e000ed04 	.word	0xe000ed04

08007560 <xQueueGenericCreateStatic>:
 8007560:	b580      	push	{r7, lr}
 8007562:	b088      	sub	sp, #32
 8007564:	af02      	add	r7, sp, #8
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00d      	beq.n	8007594 <xQueueGenericCreateStatic+0x34>
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007580:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	4613      	mov	r3, r2
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	68b9      	ldr	r1, [r7, #8]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f835 	bl	80075fe <prvInitialiseNewQueue>
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <xQueueGenericCreate>:
 800759e:	b580      	push	{r7, lr}
 80075a0:	b08a      	sub	sp, #40	; 0x28
 80075a2:	af02      	add	r7, sp, #8
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	4613      	mov	r3, r2
 80075aa:	71fb      	strb	r3, [r7, #7]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <xQueueGenericCreate+0x1a>
 80075b2:	2300      	movs	r3, #0
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	e004      	b.n	80075c2 <xQueueGenericCreate+0x24>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	fb02 f303 	mul.w	r3, r2, r3
 80075c0:	61fb      	str	r3, [r7, #28]
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	3350      	adds	r3, #80	; 0x50
 80075c6:	4618      	mov	r0, r3
 80075c8:	f001 fff2 	bl	80095b0 <pvPortMalloc>
 80075cc:	61b8      	str	r0, [r7, #24]
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00f      	beq.n	80075f4 <xQueueGenericCreate+0x56>
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	3350      	adds	r3, #80	; 0x50
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075e2:	79fa      	ldrb	r2, [r7, #7]
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	4613      	mov	r3, r2
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	68b9      	ldr	r1, [r7, #8]
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 f805 	bl	80075fe <prvInitialiseNewQueue>
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	4618      	mov	r0, r3
 80075f8:	3720      	adds	r7, #32
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <prvInitialiseNewQueue>:
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
 800760a:	70fb      	strb	r3, [r7, #3]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d103      	bne.n	800761a <prvInitialiseNewQueue+0x1c>
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e002      	b.n	8007620 <prvInitialiseNewQueue+0x22>
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	63da      	str	r2, [r3, #60]	; 0x3c
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	641a      	str	r2, [r3, #64]	; 0x40
 800762c:	2101      	movs	r1, #1
 800762e:	69b8      	ldr	r0, [r7, #24]
 8007630:	f7ff ff3c 	bl	80074ac <xQueueGenericReset>
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	78fa      	ldrb	r2, [r7, #3]
 8007638:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <xQueueCreateCountingSemaphore>:
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
 800764e:	2202      	movs	r2, #2
 8007650:	2100      	movs	r1, #0
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff ffa3 	bl	800759e <xQueueGenericCreate>
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <xQueueCreateCountingSemaphore+0x22>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	639a      	str	r2, [r3, #56]	; 0x38
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <xQueueGenericSend>:
 8007670:	b580      	push	{r7, lr}
 8007672:	b08a      	sub	sp, #40	; 0x28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
 800767c:	603b      	str	r3, [r7, #0]
 800767e:	2300      	movs	r3, #0
 8007680:	627b      	str	r3, [r7, #36]	; 0x24
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	623b      	str	r3, [r7, #32]
 8007686:	f001 fef7 	bl	8009478 <vPortEnterCritical>
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007692:	429a      	cmp	r2, r3
 8007694:	d302      	bcc.n	800769c <xQueueGenericSend+0x2c>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b02      	cmp	r3, #2
 800769a:	d129      	bne.n	80076f0 <xQueueGenericSend+0x80>
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	6a38      	ldr	r0, [r7, #32]
 80076a2:	f000 fb62 	bl	8007d6a <prvCopyDataToQueue>
 80076a6:	61f8      	str	r0, [r7, #28]
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d010      	beq.n	80076d2 <xQueueGenericSend+0x62>
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	3324      	adds	r3, #36	; 0x24
 80076b4:	4618      	mov	r0, r3
 80076b6:	f001 f877 	bl	80087a8 <xTaskRemoveFromEventList>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d013      	beq.n	80076e8 <xQueueGenericSend+0x78>
 80076c0:	4b3f      	ldr	r3, [pc, #252]	; (80077c0 <xQueueGenericSend+0x150>)
 80076c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	e00a      	b.n	80076e8 <xQueueGenericSend+0x78>
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <xQueueGenericSend+0x78>
 80076d8:	4b39      	ldr	r3, [pc, #228]	; (80077c0 <xQueueGenericSend+0x150>)
 80076da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f001 fee0 	bl	80094ac <vPortExitCritical>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e063      	b.n	80077b8 <xQueueGenericSend+0x148>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d103      	bne.n	80076fe <xQueueGenericSend+0x8e>
 80076f6:	f001 fed9 	bl	80094ac <vPortExitCritical>
 80076fa:	2300      	movs	r3, #0
 80076fc:	e05c      	b.n	80077b8 <xQueueGenericSend+0x148>
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <xQueueGenericSend+0xa2>
 8007704:	f107 0314 	add.w	r3, r7, #20
 8007708:	4618      	mov	r0, r3
 800770a:	f001 f8a3 	bl	8008854 <vTaskInternalSetTimeOutState>
 800770e:	2301      	movs	r3, #1
 8007710:	627b      	str	r3, [r7, #36]	; 0x24
 8007712:	f001 fecb 	bl	80094ac <vPortExitCritical>
 8007716:	f000 fe6d 	bl	80083f4 <vTaskSuspendAll>
 800771a:	f001 fead 	bl	8009478 <vPortEnterCritical>
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007724:	b25b      	sxtb	r3, r3
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772a:	d103      	bne.n	8007734 <xQueueGenericSend+0xc4>
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800773a:	b25b      	sxtb	r3, r3
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007740:	d103      	bne.n	800774a <xQueueGenericSend+0xda>
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800774a:	f001 feaf 	bl	80094ac <vPortExitCritical>
 800774e:	1d3a      	adds	r2, r7, #4
 8007750:	f107 0314 	add.w	r3, r7, #20
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f001 f892 	bl	8008880 <xTaskCheckForTimeOut>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d124      	bne.n	80077ac <xQueueGenericSend+0x13c>
 8007762:	6a38      	ldr	r0, [r7, #32]
 8007764:	f000 fbf9 	bl	8007f5a <prvIsQueueFull>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d018      	beq.n	80077a0 <xQueueGenericSend+0x130>
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	3310      	adds	r3, #16
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	4611      	mov	r1, r2
 8007776:	4618      	mov	r0, r3
 8007778:	f000 ffe2 	bl	8008740 <vTaskPlaceOnEventList>
 800777c:	6a38      	ldr	r0, [r7, #32]
 800777e:	f000 fb84 	bl	8007e8a <prvUnlockQueue>
 8007782:	f000 fe45 	bl	8008410 <xTaskResumeAll>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	f47f af7c 	bne.w	8007686 <xQueueGenericSend+0x16>
 800778e:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <xQueueGenericSend+0x150>)
 8007790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	e772      	b.n	8007686 <xQueueGenericSend+0x16>
 80077a0:	6a38      	ldr	r0, [r7, #32]
 80077a2:	f000 fb72 	bl	8007e8a <prvUnlockQueue>
 80077a6:	f000 fe33 	bl	8008410 <xTaskResumeAll>
 80077aa:	e76c      	b.n	8007686 <xQueueGenericSend+0x16>
 80077ac:	6a38      	ldr	r0, [r7, #32]
 80077ae:	f000 fb6c 	bl	8007e8a <prvUnlockQueue>
 80077b2:	f000 fe2d 	bl	8008410 <xTaskResumeAll>
 80077b6:	2300      	movs	r3, #0
 80077b8:	4618      	mov	r0, r3
 80077ba:	3728      	adds	r7, #40	; 0x28
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	e000ed04 	.word	0xe000ed04

080077c4 <xQueueGenericSendFromISR>:
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08c      	sub	sp, #48	; 0x30
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80077d6:	f3ef 8211 	mrs	r2, BASEPRI
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	61fa      	str	r2, [r7, #28]
 80077ec:	61bb      	str	r3, [r7, #24]
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
 80077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d302      	bcc.n	8007804 <xQueueGenericSendFromISR+0x40>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d12c      	bne.n	800785e <xQueueGenericSendFromISR+0x9a>
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800780a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	68b9      	ldr	r1, [r7, #8]
 8007812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007814:	f000 faa9 	bl	8007d6a <prvCopyDataToQueue>
 8007818:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800781c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007820:	d112      	bne.n	8007848 <xQueueGenericSendFromISR+0x84>
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	2b00      	cmp	r3, #0
 8007828:	d016      	beq.n	8007858 <xQueueGenericSendFromISR+0x94>
 800782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782c:	3324      	adds	r3, #36	; 0x24
 800782e:	4618      	mov	r0, r3
 8007830:	f000 ffba 	bl	80087a8 <xTaskRemoveFromEventList>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00e      	beq.n	8007858 <xQueueGenericSendFromISR+0x94>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00b      	beq.n	8007858 <xQueueGenericSendFromISR+0x94>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	e007      	b.n	8007858 <xQueueGenericSendFromISR+0x94>
 8007848:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800784c:	3301      	adds	r3, #1
 800784e:	b2db      	uxtb	r3, r3
 8007850:	b25a      	sxtb	r2, r3
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007858:	2301      	movs	r3, #1
 800785a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800785c:	e001      	b.n	8007862 <xQueueGenericSendFromISR+0x9e>
 800785e:	2300      	movs	r3, #0
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	617b      	str	r3, [r7, #20]
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	bf00      	nop
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007870:	4618      	mov	r0, r3
 8007872:	3730      	adds	r7, #48	; 0x30
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <xQueueGiveFromISR>:
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	623b      	str	r3, [r7, #32]
 8007886:	f3ef 8211 	mrs	r2, BASEPRI
 800788a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	613a      	str	r2, [r7, #16]
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	61fb      	str	r3, [r7, #28]
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d229      	bcs.n	8007906 <xQueueGiveFromISR+0x8e>
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078b8:	75fb      	strb	r3, [r7, #23]
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	1c5a      	adds	r2, r3, #1
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	639a      	str	r2, [r3, #56]	; 0x38
 80078c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ca:	d112      	bne.n	80078f2 <xQueueGiveFromISR+0x7a>
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d015      	beq.n	8007900 <xQueueGiveFromISR+0x88>
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	3324      	adds	r3, #36	; 0x24
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 ff65 	bl	80087a8 <xTaskRemoveFromEventList>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00d      	beq.n	8007900 <xQueueGiveFromISR+0x88>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <xQueueGiveFromISR+0x88>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2201      	movs	r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e006      	b.n	8007900 <xQueueGiveFromISR+0x88>
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	3301      	adds	r3, #1
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	b25a      	sxtb	r2, r3
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007900:	2301      	movs	r3, #1
 8007902:	627b      	str	r3, [r7, #36]	; 0x24
 8007904:	e001      	b.n	800790a <xQueueGiveFromISR+0x92>
 8007906:	2300      	movs	r3, #0
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	60bb      	str	r3, [r7, #8]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	bf00      	nop
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	4618      	mov	r0, r3
 800791a:	3728      	adds	r7, #40	; 0x28
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <xQueueReceive>:
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	; 0x28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	2300      	movs	r3, #0
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	623b      	str	r3, [r7, #32]
 8007934:	f001 fda0 	bl	8009478 <vPortEnterCritical>
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	61fb      	str	r3, [r7, #28]
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d01f      	beq.n	8007984 <xQueueReceive+0x64>
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	6a38      	ldr	r0, [r7, #32]
 8007948:	f000 fa79 	bl	8007e3e <prvCopyDataFromQueue>
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	1e5a      	subs	r2, r3, #1
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	639a      	str	r2, [r3, #56]	; 0x38
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00f      	beq.n	800797c <xQueueReceive+0x5c>
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	3310      	adds	r3, #16
 8007960:	4618      	mov	r0, r3
 8007962:	f000 ff21 	bl	80087a8 <xTaskRemoveFromEventList>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <xQueueReceive+0x5c>
 800796c:	4b3c      	ldr	r3, [pc, #240]	; (8007a60 <xQueueReceive+0x140>)
 800796e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f001 fd96 	bl	80094ac <vPortExitCritical>
 8007980:	2301      	movs	r3, #1
 8007982:	e069      	b.n	8007a58 <xQueueReceive+0x138>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d103      	bne.n	8007992 <xQueueReceive+0x72>
 800798a:	f001 fd8f 	bl	80094ac <vPortExitCritical>
 800798e:	2300      	movs	r3, #0
 8007990:	e062      	b.n	8007a58 <xQueueReceive+0x138>
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d106      	bne.n	80079a6 <xQueueReceive+0x86>
 8007998:	f107 0314 	add.w	r3, r7, #20
 800799c:	4618      	mov	r0, r3
 800799e:	f000 ff59 	bl	8008854 <vTaskInternalSetTimeOutState>
 80079a2:	2301      	movs	r3, #1
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
 80079a6:	f001 fd81 	bl	80094ac <vPortExitCritical>
 80079aa:	f000 fd23 	bl	80083f4 <vTaskSuspendAll>
 80079ae:	f001 fd63 	bl	8009478 <vPortEnterCritical>
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079b8:	b25b      	sxtb	r3, r3
 80079ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079be:	d103      	bne.n	80079c8 <xQueueReceive+0xa8>
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079ce:	b25b      	sxtb	r3, r3
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d103      	bne.n	80079de <xQueueReceive+0xbe>
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079de:	f001 fd65 	bl	80094ac <vPortExitCritical>
 80079e2:	1d3a      	adds	r2, r7, #4
 80079e4:	f107 0314 	add.w	r3, r7, #20
 80079e8:	4611      	mov	r1, r2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 ff48 	bl	8008880 <xTaskCheckForTimeOut>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d123      	bne.n	8007a3e <xQueueReceive+0x11e>
 80079f6:	6a38      	ldr	r0, [r7, #32]
 80079f8:	f000 fa99 	bl	8007f2e <prvIsQueueEmpty>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d017      	beq.n	8007a32 <xQueueReceive+0x112>
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	3324      	adds	r3, #36	; 0x24
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	4611      	mov	r1, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fe98 	bl	8008740 <vTaskPlaceOnEventList>
 8007a10:	6a38      	ldr	r0, [r7, #32]
 8007a12:	f000 fa3a 	bl	8007e8a <prvUnlockQueue>
 8007a16:	f000 fcfb 	bl	8008410 <xTaskResumeAll>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d189      	bne.n	8007934 <xQueueReceive+0x14>
 8007a20:	4b0f      	ldr	r3, [pc, #60]	; (8007a60 <xQueueReceive+0x140>)
 8007a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a26:	601a      	str	r2, [r3, #0]
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	e780      	b.n	8007934 <xQueueReceive+0x14>
 8007a32:	6a38      	ldr	r0, [r7, #32]
 8007a34:	f000 fa29 	bl	8007e8a <prvUnlockQueue>
 8007a38:	f000 fcea 	bl	8008410 <xTaskResumeAll>
 8007a3c:	e77a      	b.n	8007934 <xQueueReceive+0x14>
 8007a3e:	6a38      	ldr	r0, [r7, #32]
 8007a40:	f000 fa23 	bl	8007e8a <prvUnlockQueue>
 8007a44:	f000 fce4 	bl	8008410 <xTaskResumeAll>
 8007a48:	6a38      	ldr	r0, [r7, #32]
 8007a4a:	f000 fa70 	bl	8007f2e <prvIsQueueEmpty>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f43f af6f 	beq.w	8007934 <xQueueReceive+0x14>
 8007a56:	2300      	movs	r3, #0
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3728      	adds	r7, #40	; 0x28
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	e000ed04 	.word	0xe000ed04

08007a64 <xQueueSemaphoreTake>:
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08a      	sub	sp, #40	; 0x28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	61fb      	str	r3, [r7, #28]
 8007a76:	2300      	movs	r3, #0
 8007a78:	623b      	str	r3, [r7, #32]
 8007a7a:	f001 fcfd 	bl	8009478 <vPortEnterCritical>
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a82:	61bb      	str	r3, [r7, #24]
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d024      	beq.n	8007ad4 <xQueueSemaphoreTake+0x70>
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	1e5a      	subs	r2, r3, #1
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d104      	bne.n	8007aa4 <xQueueSemaphoreTake+0x40>
 8007a9a:	f001 f949 	bl	8008d30 <pvTaskIncrementMutexHeldCount>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	605a      	str	r2, [r3, #4]
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00f      	beq.n	8007acc <xQueueSemaphoreTake+0x68>
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	3310      	adds	r3, #16
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 fe79 	bl	80087a8 <xTaskRemoveFromEventList>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d007      	beq.n	8007acc <xQueueSemaphoreTake+0x68>
 8007abc:	4b4c      	ldr	r3, [pc, #304]	; (8007bf0 <xQueueSemaphoreTake+0x18c>)
 8007abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f001 fcee 	bl	80094ac <vPortExitCritical>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e089      	b.n	8007be8 <xQueueSemaphoreTake+0x184>
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d103      	bne.n	8007ae2 <xQueueSemaphoreTake+0x7e>
 8007ada:	f001 fce7 	bl	80094ac <vPortExitCritical>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	e082      	b.n	8007be8 <xQueueSemaphoreTake+0x184>
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d106      	bne.n	8007af6 <xQueueSemaphoreTake+0x92>
 8007ae8:	f107 030c 	add.w	r3, r7, #12
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 feb1 	bl	8008854 <vTaskInternalSetTimeOutState>
 8007af2:	2301      	movs	r3, #1
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
 8007af6:	f001 fcd9 	bl	80094ac <vPortExitCritical>
 8007afa:	f000 fc7b 	bl	80083f4 <vTaskSuspendAll>
 8007afe:	f001 fcbb 	bl	8009478 <vPortEnterCritical>
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b08:	b25b      	sxtb	r3, r3
 8007b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0e:	d103      	bne.n	8007b18 <xQueueSemaphoreTake+0xb4>
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b1e:	b25b      	sxtb	r3, r3
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b24:	d103      	bne.n	8007b2e <xQueueSemaphoreTake+0xca>
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b2e:	f001 fcbd 	bl	80094ac <vPortExitCritical>
 8007b32:	463a      	mov	r2, r7
 8007b34:	f107 030c 	add.w	r3, r7, #12
 8007b38:	4611      	mov	r1, r2
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 fea0 	bl	8008880 <xTaskCheckForTimeOut>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d132      	bne.n	8007bac <xQueueSemaphoreTake+0x148>
 8007b46:	69f8      	ldr	r0, [r7, #28]
 8007b48:	f000 f9f1 	bl	8007f2e <prvIsQueueEmpty>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d026      	beq.n	8007ba0 <xQueueSemaphoreTake+0x13c>
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d109      	bne.n	8007b6e <xQueueSemaphoreTake+0x10a>
 8007b5a:	f001 fc8d 	bl	8009478 <vPortEnterCritical>
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 ffc4 	bl	8008af0 <xTaskPriorityInherit>
 8007b68:	6238      	str	r0, [r7, #32]
 8007b6a:	f001 fc9f 	bl	80094ac <vPortExitCritical>
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	3324      	adds	r3, #36	; 0x24
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fde2 	bl	8008740 <vTaskPlaceOnEventList>
 8007b7c:	69f8      	ldr	r0, [r7, #28]
 8007b7e:	f000 f984 	bl	8007e8a <prvUnlockQueue>
 8007b82:	f000 fc45 	bl	8008410 <xTaskResumeAll>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f47f af76 	bne.w	8007a7a <xQueueSemaphoreTake+0x16>
 8007b8e:	4b18      	ldr	r3, [pc, #96]	; (8007bf0 <xQueueSemaphoreTake+0x18c>)
 8007b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	e76c      	b.n	8007a7a <xQueueSemaphoreTake+0x16>
 8007ba0:	69f8      	ldr	r0, [r7, #28]
 8007ba2:	f000 f972 	bl	8007e8a <prvUnlockQueue>
 8007ba6:	f000 fc33 	bl	8008410 <xTaskResumeAll>
 8007baa:	e766      	b.n	8007a7a <xQueueSemaphoreTake+0x16>
 8007bac:	69f8      	ldr	r0, [r7, #28]
 8007bae:	f000 f96c 	bl	8007e8a <prvUnlockQueue>
 8007bb2:	f000 fc2d 	bl	8008410 <xTaskResumeAll>
 8007bb6:	69f8      	ldr	r0, [r7, #28]
 8007bb8:	f000 f9b9 	bl	8007f2e <prvIsQueueEmpty>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f43f af5b 	beq.w	8007a7a <xQueueSemaphoreTake+0x16>
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00d      	beq.n	8007be6 <xQueueSemaphoreTake+0x182>
 8007bca:	f001 fc55 	bl	8009478 <vPortEnterCritical>
 8007bce:	69f8      	ldr	r0, [r7, #28]
 8007bd0:	f000 f8b4 	bl	8007d3c <prvGetDisinheritPriorityAfterTimeout>
 8007bd4:	6178      	str	r0, [r7, #20]
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	6979      	ldr	r1, [r7, #20]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f001 f841 	bl	8008c64 <vTaskPriorityDisinheritAfterTimeout>
 8007be2:	f001 fc63 	bl	80094ac <vPortExitCritical>
 8007be6:	2300      	movs	r3, #0
 8007be8:	4618      	mov	r0, r3
 8007bea:	3728      	adds	r7, #40	; 0x28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	e000ed04 	.word	0xe000ed04

08007bf4 <xQueuePeek>:
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08a      	sub	sp, #40	; 0x28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	2300      	movs	r3, #0
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	623b      	str	r3, [r7, #32]
 8007c08:	f001 fc36 	bl	8009478 <vPortEnterCritical>
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c10:	61fb      	str	r3, [r7, #28]
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d021      	beq.n	8007c5c <xQueuePeek+0x68>
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	61bb      	str	r3, [r7, #24]
 8007c1e:	68b9      	ldr	r1, [r7, #8]
 8007c20:	6a38      	ldr	r0, [r7, #32]
 8007c22:	f000 f90c 	bl	8007e3e <prvCopyDataFromQueue>
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	60da      	str	r2, [r3, #12]
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00f      	beq.n	8007c54 <xQueuePeek+0x60>
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	3324      	adds	r3, #36	; 0x24
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fdb5 	bl	80087a8 <xTaskRemoveFromEventList>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d007      	beq.n	8007c54 <xQueuePeek+0x60>
 8007c44:	4b3c      	ldr	r3, [pc, #240]	; (8007d38 <xQueuePeek+0x144>)
 8007c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f001 fc2a 	bl	80094ac <vPortExitCritical>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e069      	b.n	8007d30 <xQueuePeek+0x13c>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <xQueuePeek+0x76>
 8007c62:	f001 fc23 	bl	80094ac <vPortExitCritical>
 8007c66:	2300      	movs	r3, #0
 8007c68:	e062      	b.n	8007d30 <xQueuePeek+0x13c>
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d106      	bne.n	8007c7e <xQueuePeek+0x8a>
 8007c70:	f107 0310 	add.w	r3, r7, #16
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 fded 	bl	8008854 <vTaskInternalSetTimeOutState>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c7e:	f001 fc15 	bl	80094ac <vPortExitCritical>
 8007c82:	f000 fbb7 	bl	80083f4 <vTaskSuspendAll>
 8007c86:	f001 fbf7 	bl	8009478 <vPortEnterCritical>
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c90:	b25b      	sxtb	r3, r3
 8007c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c96:	d103      	bne.n	8007ca0 <xQueuePeek+0xac>
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ca6:	b25b      	sxtb	r3, r3
 8007ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cac:	d103      	bne.n	8007cb6 <xQueuePeek+0xc2>
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cb6:	f001 fbf9 	bl	80094ac <vPortExitCritical>
 8007cba:	1d3a      	adds	r2, r7, #4
 8007cbc:	f107 0310 	add.w	r3, r7, #16
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 fddc 	bl	8008880 <xTaskCheckForTimeOut>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d123      	bne.n	8007d16 <xQueuePeek+0x122>
 8007cce:	6a38      	ldr	r0, [r7, #32]
 8007cd0:	f000 f92d 	bl	8007f2e <prvIsQueueEmpty>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d017      	beq.n	8007d0a <xQueuePeek+0x116>
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	3324      	adds	r3, #36	; 0x24
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 fd2c 	bl	8008740 <vTaskPlaceOnEventList>
 8007ce8:	6a38      	ldr	r0, [r7, #32]
 8007cea:	f000 f8ce 	bl	8007e8a <prvUnlockQueue>
 8007cee:	f000 fb8f 	bl	8008410 <xTaskResumeAll>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d187      	bne.n	8007c08 <xQueuePeek+0x14>
 8007cf8:	4b0f      	ldr	r3, [pc, #60]	; (8007d38 <xQueuePeek+0x144>)
 8007cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	e77e      	b.n	8007c08 <xQueuePeek+0x14>
 8007d0a:	6a38      	ldr	r0, [r7, #32]
 8007d0c:	f000 f8bd 	bl	8007e8a <prvUnlockQueue>
 8007d10:	f000 fb7e 	bl	8008410 <xTaskResumeAll>
 8007d14:	e778      	b.n	8007c08 <xQueuePeek+0x14>
 8007d16:	6a38      	ldr	r0, [r7, #32]
 8007d18:	f000 f8b7 	bl	8007e8a <prvUnlockQueue>
 8007d1c:	f000 fb78 	bl	8008410 <xTaskResumeAll>
 8007d20:	6a38      	ldr	r0, [r7, #32]
 8007d22:	f000 f904 	bl	8007f2e <prvIsQueueEmpty>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f43f af6d 	beq.w	8007c08 <xQueuePeek+0x14>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	4618      	mov	r0, r3
 8007d32:	3728      	adds	r7, #40	; 0x28
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	e000ed04 	.word	0xe000ed04

08007d3c <prvGetDisinheritPriorityAfterTimeout>:
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d006      	beq.n	8007d5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	e001      	b.n	8007d5e <prvGetDisinheritPriorityAfterTimeout+0x22>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bc80      	pop	{r7}
 8007d68:	4770      	bx	lr

08007d6a <prvCopyDataToQueue>:
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b086      	sub	sp, #24
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	2300      	movs	r3, #0
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	613b      	str	r3, [r7, #16]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10d      	bne.n	8007da4 <prvCopyDataToQueue+0x3a>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d14d      	bne.n	8007e2c <prvCopyDataToQueue+0xc2>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f000 ff19 	bl	8008bcc <xTaskPriorityDisinherit>
 8007d9a:	6178      	str	r0, [r7, #20]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	605a      	str	r2, [r3, #4]
 8007da2:	e043      	b.n	8007e2c <prvCopyDataToQueue+0xc2>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d119      	bne.n	8007dde <prvCopyDataToQueue+0x74>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6898      	ldr	r0, [r3, #8]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	461a      	mov	r2, r3
 8007db4:	68b9      	ldr	r1, [r7, #8]
 8007db6:	f001 fda7 	bl	8009908 <memcpy>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689a      	ldr	r2, [r3, #8]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	441a      	add	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	609a      	str	r2, [r3, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d32b      	bcc.n	8007e2c <prvCopyDataToQueue+0xc2>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	609a      	str	r2, [r3, #8]
 8007ddc:	e026      	b.n	8007e2c <prvCopyDataToQueue+0xc2>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	68d8      	ldr	r0, [r3, #12]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	461a      	mov	r2, r3
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	f001 fd8d 	bl	8009908 <memcpy>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	425b      	negs	r3, r3
 8007df8:	441a      	add	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	60da      	str	r2, [r3, #12]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d207      	bcs.n	8007e1a <prvCopyDataToQueue+0xb0>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	425b      	negs	r3, r3
 8007e14:	441a      	add	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	60da      	str	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d105      	bne.n	8007e2c <prvCopyDataToQueue+0xc2>
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d002      	beq.n	8007e2c <prvCopyDataToQueue+0xc2>
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	613b      	str	r3, [r7, #16]
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	639a      	str	r2, [r3, #56]	; 0x38
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <prvCopyDataFromQueue>:
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	6039      	str	r1, [r7, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d018      	beq.n	8007e82 <prvCopyDataFromQueue+0x44>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	441a      	add	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	60da      	str	r2, [r3, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d303      	bcc.n	8007e72 <prvCopyDataFromQueue+0x34>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	60da      	str	r2, [r3, #12]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68d9      	ldr	r1, [r3, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6838      	ldr	r0, [r7, #0]
 8007e7e:	f001 fd43 	bl	8009908 <memcpy>
 8007e82:	bf00      	nop
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <prvUnlockQueue>:
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	f001 faf1 	bl	8009478 <vPortEnterCritical>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e9c:	73fb      	strb	r3, [r7, #15]
 8007e9e:	e011      	b.n	8007ec4 <prvUnlockQueue+0x3a>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d012      	beq.n	8007ece <prvUnlockQueue+0x44>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3324      	adds	r3, #36	; 0x24
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 fc7b 	bl	80087a8 <xTaskRemoveFromEventList>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <prvUnlockQueue+0x32>
 8007eb8:	f000 fd28 	bl	800890c <vTaskMissedYield>
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	73fb      	strb	r3, [r7, #15]
 8007ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	dce9      	bgt.n	8007ea0 <prvUnlockQueue+0x16>
 8007ecc:	e000      	b.n	8007ed0 <prvUnlockQueue+0x46>
 8007ece:	bf00      	nop
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	22ff      	movs	r2, #255	; 0xff
 8007ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ed8:	f001 fae8 	bl	80094ac <vPortExitCritical>
 8007edc:	f001 facc 	bl	8009478 <vPortEnterCritical>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ee6:	73bb      	strb	r3, [r7, #14]
 8007ee8:	e011      	b.n	8007f0e <prvUnlockQueue+0x84>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d012      	beq.n	8007f18 <prvUnlockQueue+0x8e>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3310      	adds	r3, #16
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fc56 	bl	80087a8 <xTaskRemoveFromEventList>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <prvUnlockQueue+0x7c>
 8007f02:	f000 fd03 	bl	800890c <vTaskMissedYield>
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	73bb      	strb	r3, [r7, #14]
 8007f0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	dce9      	bgt.n	8007eea <prvUnlockQueue+0x60>
 8007f16:	e000      	b.n	8007f1a <prvUnlockQueue+0x90>
 8007f18:	bf00      	nop
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	22ff      	movs	r2, #255	; 0xff
 8007f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f22:	f001 fac3 	bl	80094ac <vPortExitCritical>
 8007f26:	bf00      	nop
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <prvIsQueueEmpty>:
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b084      	sub	sp, #16
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	f001 fa9f 	bl	8009478 <vPortEnterCritical>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d102      	bne.n	8007f48 <prvIsQueueEmpty+0x1a>
 8007f42:	2301      	movs	r3, #1
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	e001      	b.n	8007f4c <prvIsQueueEmpty+0x1e>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	f001 faae 	bl	80094ac <vPortExitCritical>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <prvIsQueueFull>:
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	f001 fa89 	bl	8009478 <vPortEnterCritical>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d102      	bne.n	8007f78 <prvIsQueueFull+0x1e>
 8007f72:	2301      	movs	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]
 8007f76:	e001      	b.n	8007f7c <prvIsQueueFull+0x22>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	f001 fa96 	bl	80094ac <vPortExitCritical>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <vQueueAddToRegistry>:
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
 8007f96:	2300      	movs	r3, #0
 8007f98:	60fb      	str	r3, [r7, #12]
 8007f9a:	e014      	b.n	8007fc6 <vQueueAddToRegistry+0x3a>
 8007f9c:	4a0e      	ldr	r2, [pc, #56]	; (8007fd8 <vQueueAddToRegistry+0x4c>)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10b      	bne.n	8007fc0 <vQueueAddToRegistry+0x34>
 8007fa8:	490b      	ldr	r1, [pc, #44]	; (8007fd8 <vQueueAddToRegistry+0x4c>)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8007fb2:	4a09      	ldr	r2, [pc, #36]	; (8007fd8 <vQueueAddToRegistry+0x4c>)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	00db      	lsls	r3, r3, #3
 8007fb8:	4413      	add	r3, r2
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	605a      	str	r2, [r3, #4]
 8007fbe:	e006      	b.n	8007fce <vQueueAddToRegistry+0x42>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	60fb      	str	r3, [r7, #12]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b07      	cmp	r3, #7
 8007fca:	d9e7      	bls.n	8007f9c <vQueueAddToRegistry+0x10>
 8007fcc:	bf00      	nop
 8007fce:	bf00      	nop
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bc80      	pop	{r7}
 8007fd6:	4770      	bx	lr
 8007fd8:	20003e98 	.word	0x20003e98

08007fdc <vQueueWaitForMessageRestricted>:
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	617b      	str	r3, [r7, #20]
 8007fec:	f001 fa44 	bl	8009478 <vPortEnterCritical>
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ff6:	b25b      	sxtb	r3, r3
 8007ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffc:	d103      	bne.n	8008006 <vQueueWaitForMessageRestricted+0x2a>
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800800c:	b25b      	sxtb	r3, r3
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008012:	d103      	bne.n	800801c <vQueueWaitForMessageRestricted+0x40>
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800801c:	f001 fa46 	bl	80094ac <vPortExitCritical>
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008024:	2b00      	cmp	r3, #0
 8008026:	d106      	bne.n	8008036 <vQueueWaitForMessageRestricted+0x5a>
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	3324      	adds	r3, #36	; 0x24
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	68b9      	ldr	r1, [r7, #8]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fb9b 	bl	800876c <vTaskPlaceOnEventListRestricted>
 8008036:	6978      	ldr	r0, [r7, #20]
 8008038:	f7ff ff27 	bl	8007e8a <prvUnlockQueue>
 800803c:	bf00      	nop
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <xTaskCreateStatic>:
 8008044:	b580      	push	{r7, lr}
 8008046:	b08a      	sub	sp, #40	; 0x28
 8008048:	af04      	add	r7, sp, #16
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]
 8008052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01e      	beq.n	8008096 <xTaskCreateStatic+0x52>
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	2b00      	cmp	r3, #0
 800805c:	d01b      	beq.n	8008096 <xTaskCreateStatic+0x52>
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008066:	631a      	str	r2, [r3, #48]	; 0x30
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8008070:	2300      	movs	r3, #0
 8008072:	9303      	str	r3, [sp, #12]
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	9302      	str	r3, [sp, #8]
 8008078:	f107 0310 	add.w	r3, r7, #16
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	68b9      	ldr	r1, [r7, #8]
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 f850 	bl	800812e <prvInitialiseNewTask>
 800808e:	6978      	ldr	r0, [r7, #20]
 8008090:	f000 f8c4 	bl	800821c <prvAddNewTaskToReadyList>
 8008094:	e001      	b.n	800809a <xTaskCreateStatic+0x56>
 8008096:	2300      	movs	r3, #0
 8008098:	613b      	str	r3, [r7, #16]
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <xTaskCreate>:
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08c      	sub	sp, #48	; 0x30
 80080a8:	af04      	add	r7, sp, #16
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	4613      	mov	r3, r2
 80080b2:	80fb      	strh	r3, [r7, #6]
 80080b4:	88fb      	ldrh	r3, [r7, #6]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f001 fa79 	bl	80095b0 <pvPortMalloc>
 80080be:	6178      	str	r0, [r7, #20]
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00e      	beq.n	80080e4 <xTaskCreate+0x40>
 80080c6:	205c      	movs	r0, #92	; 0x5c
 80080c8:	f001 fa72 	bl	80095b0 <pvPortMalloc>
 80080cc:	61f8      	str	r0, [r7, #28]
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <xTaskCreate+0x38>
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	631a      	str	r2, [r3, #48]	; 0x30
 80080da:	e005      	b.n	80080e8 <xTaskCreate+0x44>
 80080dc:	6978      	ldr	r0, [r7, #20]
 80080de:	f001 fafb 	bl	80096d8 <vPortFree>
 80080e2:	e001      	b.n	80080e8 <xTaskCreate+0x44>
 80080e4:	2300      	movs	r3, #0
 80080e6:	61fb      	str	r3, [r7, #28]
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d017      	beq.n	800811e <xTaskCreate+0x7a>
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80080f6:	88fa      	ldrh	r2, [r7, #6]
 80080f8:	2300      	movs	r3, #0
 80080fa:	9303      	str	r3, [sp, #12]
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	9302      	str	r3, [sp, #8]
 8008100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	68b9      	ldr	r1, [r7, #8]
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 f80e 	bl	800812e <prvInitialiseNewTask>
 8008112:	69f8      	ldr	r0, [r7, #28]
 8008114:	f000 f882 	bl	800821c <prvAddNewTaskToReadyList>
 8008118:	2301      	movs	r3, #1
 800811a:	61bb      	str	r3, [r7, #24]
 800811c:	e002      	b.n	8008124 <xTaskCreate+0x80>
 800811e:	f04f 33ff 	mov.w	r3, #4294967295
 8008122:	61bb      	str	r3, [r7, #24]
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	4618      	mov	r0, r3
 8008128:	3720      	adds	r7, #32
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <prvInitialiseNewTask>:
 800812e:	b580      	push	{r7, lr}
 8008130:	b086      	sub	sp, #24
 8008132:	af00      	add	r7, sp, #0
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	607a      	str	r2, [r7, #4]
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	461a      	mov	r2, r3
 8008146:	21a5      	movs	r1, #165	; 0xa5
 8008148:	f001 fbec 	bl	8009924 <memset>
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008156:	3b01      	subs	r3, #1
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f023 0307 	bic.w	r3, r3, #7
 8008164:	613b      	str	r3, [r7, #16]
 8008166:	2300      	movs	r3, #0
 8008168:	617b      	str	r3, [r7, #20]
 800816a:	e012      	b.n	8008192 <prvInitialiseNewTask+0x64>
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	4413      	add	r3, r2
 8008172:	7819      	ldrb	r1, [r3, #0]
 8008174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	4413      	add	r3, r2
 800817a:	3334      	adds	r3, #52	; 0x34
 800817c:	460a      	mov	r2, r1
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	4413      	add	r3, r2
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d006      	beq.n	800819a <prvInitialiseNewTask+0x6c>
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	3301      	adds	r3, #1
 8008190:	617b      	str	r3, [r7, #20]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b0f      	cmp	r3, #15
 8008196:	d9e9      	bls.n	800816c <prvInitialiseNewTask+0x3e>
 8008198:	e000      	b.n	800819c <prvInitialiseNewTask+0x6e>
 800819a:	bf00      	nop
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	2b37      	cmp	r3, #55	; 0x37
 80081a8:	d901      	bls.n	80081ae <prvInitialiseNewTask+0x80>
 80081aa:	2337      	movs	r3, #55	; 0x37
 80081ac:	623b      	str	r3, [r7, #32]
 80081ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b0:	6a3a      	ldr	r2, [r7, #32]
 80081b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	6a3a      	ldr	r2, [r7, #32]
 80081b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	2200      	movs	r2, #0
 80081be:	651a      	str	r2, [r3, #80]	; 0x50
 80081c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c2:	3304      	adds	r3, #4
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7ff f8e0 	bl	800738a <vListInitialiseItem>
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	3318      	adds	r3, #24
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff f8db 	bl	800738a <vListInitialiseItem>
 80081d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081d8:	611a      	str	r2, [r3, #16]
 80081da:	6a3b      	ldr	r3, [r7, #32]
 80081dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	619a      	str	r2, [r3, #24]
 80081e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081e8:	625a      	str	r2, [r3, #36]	; 0x24
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	2200      	movs	r2, #0
 80081ee:	655a      	str	r2, [r3, #84]	; 0x54
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	68f9      	ldr	r1, [r7, #12]
 80081fc:	6938      	ldr	r0, [r7, #16]
 80081fe:	f001 f8af 	bl	8009360 <pxPortInitialiseStack>
 8008202:	4602      	mov	r2, r0
 8008204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <prvInitialiseNewTask+0xe6>
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	bf00      	nop
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <prvAddNewTaskToReadyList>:
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	f001 f928 	bl	8009478 <vPortEnterCritical>
 8008228:	4b2d      	ldr	r3, [pc, #180]	; (80082e0 <prvAddNewTaskToReadyList+0xc4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3301      	adds	r3, #1
 800822e:	4a2c      	ldr	r2, [pc, #176]	; (80082e0 <prvAddNewTaskToReadyList+0xc4>)
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	4b2c      	ldr	r3, [pc, #176]	; (80082e4 <prvAddNewTaskToReadyList+0xc8>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <prvAddNewTaskToReadyList+0x32>
 800823a:	4a2a      	ldr	r2, [pc, #168]	; (80082e4 <prvAddNewTaskToReadyList+0xc8>)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	4b27      	ldr	r3, [pc, #156]	; (80082e0 <prvAddNewTaskToReadyList+0xc4>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d110      	bne.n	800826a <prvAddNewTaskToReadyList+0x4e>
 8008248:	f000 fb84 	bl	8008954 <prvInitialiseTaskLists>
 800824c:	e00d      	b.n	800826a <prvAddNewTaskToReadyList+0x4e>
 800824e:	4b26      	ldr	r3, [pc, #152]	; (80082e8 <prvAddNewTaskToReadyList+0xcc>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <prvAddNewTaskToReadyList+0x4e>
 8008256:	4b23      	ldr	r3, [pc, #140]	; (80082e4 <prvAddNewTaskToReadyList+0xc8>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	429a      	cmp	r2, r3
 8008262:	d802      	bhi.n	800826a <prvAddNewTaskToReadyList+0x4e>
 8008264:	4a1f      	ldr	r2, [pc, #124]	; (80082e4 <prvAddNewTaskToReadyList+0xc8>)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6013      	str	r3, [r2, #0]
 800826a:	4b20      	ldr	r3, [pc, #128]	; (80082ec <prvAddNewTaskToReadyList+0xd0>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3301      	adds	r3, #1
 8008270:	4a1e      	ldr	r2, [pc, #120]	; (80082ec <prvAddNewTaskToReadyList+0xd0>)
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <prvAddNewTaskToReadyList+0xd0>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	645a      	str	r2, [r3, #68]	; 0x44
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008280:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <prvAddNewTaskToReadyList+0xd4>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	429a      	cmp	r2, r3
 8008286:	d903      	bls.n	8008290 <prvAddNewTaskToReadyList+0x74>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	4a18      	ldr	r2, [pc, #96]	; (80082f0 <prvAddNewTaskToReadyList+0xd4>)
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4a15      	ldr	r2, [pc, #84]	; (80082f4 <prvAddNewTaskToReadyList+0xd8>)
 800829e:	441a      	add	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f7ff f87b 	bl	80073a2 <vListInsertEnd>
 80082ac:	f001 f8fe 	bl	80094ac <vPortExitCritical>
 80082b0:	4b0d      	ldr	r3, [pc, #52]	; (80082e8 <prvAddNewTaskToReadyList+0xcc>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00e      	beq.n	80082d6 <prvAddNewTaskToReadyList+0xba>
 80082b8:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <prvAddNewTaskToReadyList+0xc8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d207      	bcs.n	80082d6 <prvAddNewTaskToReadyList+0xba>
 80082c6:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <prvAddNewTaskToReadyList+0xdc>)
 80082c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	bf00      	nop
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000bc8 	.word	0x20000bc8
 80082e4:	200006f4 	.word	0x200006f4
 80082e8:	20000bd4 	.word	0x20000bd4
 80082ec:	20000be4 	.word	0x20000be4
 80082f0:	20000bd0 	.word	0x20000bd0
 80082f4:	200006f8 	.word	0x200006f8
 80082f8:	e000ed04 	.word	0xe000ed04

080082fc <vTaskDelay>:
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	2300      	movs	r3, #0
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d008      	beq.n	8008320 <vTaskDelay+0x24>
 800830e:	f000 f871 	bl	80083f4 <vTaskSuspendAll>
 8008312:	2100      	movs	r1, #0
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fd1f 	bl	8008d58 <prvAddCurrentTaskToDelayedList>
 800831a:	f000 f879 	bl	8008410 <xTaskResumeAll>
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d107      	bne.n	8008336 <vTaskDelay+0x3a>
 8008326:	4b06      	ldr	r3, [pc, #24]	; (8008340 <vTaskDelay+0x44>)
 8008328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	bf00      	nop
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	e000ed04 	.word	0xe000ed04

08008344 <vTaskStartScheduler>:
 8008344:	b580      	push	{r7, lr}
 8008346:	b08a      	sub	sp, #40	; 0x28
 8008348:	af04      	add	r7, sp, #16
 800834a:	2300      	movs	r3, #0
 800834c:	60fb      	str	r3, [r7, #12]
 800834e:	2300      	movs	r3, #0
 8008350:	60bb      	str	r3, [r7, #8]
 8008352:	1d3a      	adds	r2, r7, #4
 8008354:	f107 0108 	add.w	r1, r7, #8
 8008358:	f107 030c 	add.w	r3, r7, #12
 800835c:	4618      	mov	r0, r3
 800835e:	f7fe ffc3 	bl	80072e8 <vApplicationGetIdleTaskMemory>
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	9202      	str	r2, [sp, #8]
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	2300      	movs	r3, #0
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	2300      	movs	r3, #0
 8008372:	460a      	mov	r2, r1
 8008374:	4919      	ldr	r1, [pc, #100]	; (80083dc <vTaskStartScheduler+0x98>)
 8008376:	481a      	ldr	r0, [pc, #104]	; (80083e0 <vTaskStartScheduler+0x9c>)
 8008378:	f7ff fe64 	bl	8008044 <xTaskCreateStatic>
 800837c:	4603      	mov	r3, r0
 800837e:	4a19      	ldr	r2, [pc, #100]	; (80083e4 <vTaskStartScheduler+0xa0>)
 8008380:	6013      	str	r3, [r2, #0]
 8008382:	4b18      	ldr	r3, [pc, #96]	; (80083e4 <vTaskStartScheduler+0xa0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <vTaskStartScheduler+0x4c>
 800838a:	2301      	movs	r3, #1
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	e001      	b.n	8008394 <vTaskStartScheduler+0x50>
 8008390:	2300      	movs	r3, #0
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d102      	bne.n	80083a0 <vTaskStartScheduler+0x5c>
 800839a:	f000 fd31 	bl	8008e00 <xTimerCreateTimerTask>
 800839e:	6178      	str	r0, [r7, #20]
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d115      	bne.n	80083d2 <vTaskStartScheduler+0x8e>
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	613b      	str	r3, [r7, #16]
 80083b8:	bf00      	nop
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <vTaskStartScheduler+0xa4>)
 80083bc:	f04f 32ff 	mov.w	r2, #4294967295
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	4b0a      	ldr	r3, [pc, #40]	; (80083ec <vTaskStartScheduler+0xa8>)
 80083c4:	2201      	movs	r2, #1
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <vTaskStartScheduler+0xac>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	f001 f833 	bl	8009438 <xPortStartScheduler>
 80083d2:	bf00      	nop
 80083d4:	3718      	adds	r7, #24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	080099d0 	.word	0x080099d0
 80083e0:	08008925 	.word	0x08008925
 80083e4:	20000bec 	.word	0x20000bec
 80083e8:	20000be8 	.word	0x20000be8
 80083ec:	20000bd4 	.word	0x20000bd4
 80083f0:	20000bcc 	.word	0x20000bcc

080083f4 <vTaskSuspendAll>:
 80083f4:	b480      	push	{r7}
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	4b04      	ldr	r3, [pc, #16]	; (800840c <vTaskSuspendAll+0x18>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3301      	adds	r3, #1
 80083fe:	4a03      	ldr	r2, [pc, #12]	; (800840c <vTaskSuspendAll+0x18>)
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	bf00      	nop
 8008404:	46bd      	mov	sp, r7
 8008406:	bc80      	pop	{r7}
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	20000bf0 	.word	0x20000bf0

08008410 <xTaskResumeAll>:
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	2300      	movs	r3, #0
 800841c:	60bb      	str	r3, [r7, #8]
 800841e:	f001 f82b 	bl	8009478 <vPortEnterCritical>
 8008422:	4b39      	ldr	r3, [pc, #228]	; (8008508 <xTaskResumeAll+0xf8>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3b01      	subs	r3, #1
 8008428:	4a37      	ldr	r2, [pc, #220]	; (8008508 <xTaskResumeAll+0xf8>)
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	4b36      	ldr	r3, [pc, #216]	; (8008508 <xTaskResumeAll+0xf8>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d162      	bne.n	80084fa <xTaskResumeAll+0xea>
 8008434:	4b35      	ldr	r3, [pc, #212]	; (800850c <xTaskResumeAll+0xfc>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d05e      	beq.n	80084fa <xTaskResumeAll+0xea>
 800843c:	e02f      	b.n	800849e <xTaskResumeAll+0x8e>
 800843e:	4b34      	ldr	r3, [pc, #208]	; (8008510 <xTaskResumeAll+0x100>)
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3318      	adds	r3, #24
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff f804 	bl	8007458 <uxListRemove>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	3304      	adds	r3, #4
 8008454:	4618      	mov	r0, r3
 8008456:	f7fe ffff 	bl	8007458 <uxListRemove>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845e:	4b2d      	ldr	r3, [pc, #180]	; (8008514 <xTaskResumeAll+0x104>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	429a      	cmp	r2, r3
 8008464:	d903      	bls.n	800846e <xTaskResumeAll+0x5e>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846a:	4a2a      	ldr	r2, [pc, #168]	; (8008514 <xTaskResumeAll+0x104>)
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008472:	4613      	mov	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4a27      	ldr	r2, [pc, #156]	; (8008518 <xTaskResumeAll+0x108>)
 800847c:	441a      	add	r2, r3
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3304      	adds	r3, #4
 8008482:	4619      	mov	r1, r3
 8008484:	4610      	mov	r0, r2
 8008486:	f7fe ff8c 	bl	80073a2 <vListInsertEnd>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848e:	4b23      	ldr	r3, [pc, #140]	; (800851c <xTaskResumeAll+0x10c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008494:	429a      	cmp	r2, r3
 8008496:	d302      	bcc.n	800849e <xTaskResumeAll+0x8e>
 8008498:	4b21      	ldr	r3, [pc, #132]	; (8008520 <xTaskResumeAll+0x110>)
 800849a:	2201      	movs	r2, #1
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	4b1c      	ldr	r3, [pc, #112]	; (8008510 <xTaskResumeAll+0x100>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1cb      	bne.n	800843e <xTaskResumeAll+0x2e>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <xTaskResumeAll+0xa0>
 80084ac:	f000 fade 	bl	8008a6c <prvResetNextTaskUnblockTime>
 80084b0:	4b1c      	ldr	r3, [pc, #112]	; (8008524 <xTaskResumeAll+0x114>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	607b      	str	r3, [r7, #4]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d010      	beq.n	80084de <xTaskResumeAll+0xce>
 80084bc:	f000 f844 	bl	8008548 <xTaskIncrementTick>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <xTaskResumeAll+0xbc>
 80084c6:	4b16      	ldr	r3, [pc, #88]	; (8008520 <xTaskResumeAll+0x110>)
 80084c8:	2201      	movs	r2, #1
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	607b      	str	r3, [r7, #4]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1f1      	bne.n	80084bc <xTaskResumeAll+0xac>
 80084d8:	4b12      	ldr	r3, [pc, #72]	; (8008524 <xTaskResumeAll+0x114>)
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	4b10      	ldr	r3, [pc, #64]	; (8008520 <xTaskResumeAll+0x110>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d009      	beq.n	80084fa <xTaskResumeAll+0xea>
 80084e6:	2301      	movs	r3, #1
 80084e8:	60bb      	str	r3, [r7, #8]
 80084ea:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <xTaskResumeAll+0x118>)
 80084ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f000 ffd7 	bl	80094ac <vPortExitCritical>
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20000bf0 	.word	0x20000bf0
 800850c:	20000bc8 	.word	0x20000bc8
 8008510:	20000b88 	.word	0x20000b88
 8008514:	20000bd0 	.word	0x20000bd0
 8008518:	200006f8 	.word	0x200006f8
 800851c:	200006f4 	.word	0x200006f4
 8008520:	20000bdc 	.word	0x20000bdc
 8008524:	20000bd8 	.word	0x20000bd8
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <xTaskGetTickCount>:
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	4b04      	ldr	r3, [pc, #16]	; (8008544 <xTaskGetTickCount+0x18>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	607b      	str	r3, [r7, #4]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4618      	mov	r0, r3
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	bc80      	pop	{r7}
 8008542:	4770      	bx	lr
 8008544:	20000bcc 	.word	0x20000bcc

08008548 <xTaskIncrementTick>:
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	2300      	movs	r3, #0
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	4b49      	ldr	r3, [pc, #292]	; (8008678 <xTaskIncrementTick+0x130>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d17d      	bne.n	8008656 <xTaskIncrementTick+0x10e>
 800855a:	4b48      	ldr	r3, [pc, #288]	; (800867c <xTaskIncrementTick+0x134>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3301      	adds	r3, #1
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	4a46      	ldr	r2, [pc, #280]	; (800867c <xTaskIncrementTick+0x134>)
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d110      	bne.n	8008590 <xTaskIncrementTick+0x48>
 800856e:	4b44      	ldr	r3, [pc, #272]	; (8008680 <xTaskIncrementTick+0x138>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	4b43      	ldr	r3, [pc, #268]	; (8008684 <xTaskIncrementTick+0x13c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a41      	ldr	r2, [pc, #260]	; (8008680 <xTaskIncrementTick+0x138>)
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	4a41      	ldr	r2, [pc, #260]	; (8008684 <xTaskIncrementTick+0x13c>)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	4b41      	ldr	r3, [pc, #260]	; (8008688 <xTaskIncrementTick+0x140>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3301      	adds	r3, #1
 8008588:	4a3f      	ldr	r2, [pc, #252]	; (8008688 <xTaskIncrementTick+0x140>)
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	f000 fa6e 	bl	8008a6c <prvResetNextTaskUnblockTime>
 8008590:	4b3e      	ldr	r3, [pc, #248]	; (800868c <xTaskIncrementTick+0x144>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	429a      	cmp	r2, r3
 8008598:	d34e      	bcc.n	8008638 <xTaskIncrementTick+0xf0>
 800859a:	4b39      	ldr	r3, [pc, #228]	; (8008680 <xTaskIncrementTick+0x138>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <xTaskIncrementTick+0x60>
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <xTaskIncrementTick+0x62>
 80085a8:	2300      	movs	r3, #0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d004      	beq.n	80085b8 <xTaskIncrementTick+0x70>
 80085ae:	4b37      	ldr	r3, [pc, #220]	; (800868c <xTaskIncrementTick+0x144>)
 80085b0:	f04f 32ff 	mov.w	r2, #4294967295
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	e03f      	b.n	8008638 <xTaskIncrementTick+0xf0>
 80085b8:	4b31      	ldr	r3, [pc, #196]	; (8008680 <xTaskIncrementTick+0x138>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	60bb      	str	r3, [r7, #8]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	607b      	str	r3, [r7, #4]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d203      	bcs.n	80085d8 <xTaskIncrementTick+0x90>
 80085d0:	4a2e      	ldr	r2, [pc, #184]	; (800868c <xTaskIncrementTick+0x144>)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	e02f      	b.n	8008638 <xTaskIncrementTick+0xf0>
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	3304      	adds	r3, #4
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fe ff3b 	bl	8007458 <uxListRemove>
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d004      	beq.n	80085f4 <xTaskIncrementTick+0xac>
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	3318      	adds	r3, #24
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7fe ff32 	bl	8007458 <uxListRemove>
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f8:	4b25      	ldr	r3, [pc, #148]	; (8008690 <xTaskIncrementTick+0x148>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d903      	bls.n	8008608 <xTaskIncrementTick+0xc0>
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	4a22      	ldr	r2, [pc, #136]	; (8008690 <xTaskIncrementTick+0x148>)
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4a1f      	ldr	r2, [pc, #124]	; (8008694 <xTaskIncrementTick+0x14c>)
 8008616:	441a      	add	r2, r3
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7fe febf 	bl	80073a2 <vListInsertEnd>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008628:	4b1b      	ldr	r3, [pc, #108]	; (8008698 <xTaskIncrementTick+0x150>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	429a      	cmp	r2, r3
 8008630:	d3b3      	bcc.n	800859a <xTaskIncrementTick+0x52>
 8008632:	2301      	movs	r3, #1
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	e7b0      	b.n	800859a <xTaskIncrementTick+0x52>
 8008638:	4b17      	ldr	r3, [pc, #92]	; (8008698 <xTaskIncrementTick+0x150>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863e:	4915      	ldr	r1, [pc, #84]	; (8008694 <xTaskIncrementTick+0x14c>)
 8008640:	4613      	mov	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	440b      	add	r3, r1
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d907      	bls.n	8008660 <xTaskIncrementTick+0x118>
 8008650:	2301      	movs	r3, #1
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	e004      	b.n	8008660 <xTaskIncrementTick+0x118>
 8008656:	4b11      	ldr	r3, [pc, #68]	; (800869c <xTaskIncrementTick+0x154>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3301      	adds	r3, #1
 800865c:	4a0f      	ldr	r2, [pc, #60]	; (800869c <xTaskIncrementTick+0x154>)
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	4b0f      	ldr	r3, [pc, #60]	; (80086a0 <xTaskIncrementTick+0x158>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <xTaskIncrementTick+0x124>
 8008668:	2301      	movs	r3, #1
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20000bf0 	.word	0x20000bf0
 800867c:	20000bcc 	.word	0x20000bcc
 8008680:	20000b80 	.word	0x20000b80
 8008684:	20000b84 	.word	0x20000b84
 8008688:	20000be0 	.word	0x20000be0
 800868c:	20000be8 	.word	0x20000be8
 8008690:	20000bd0 	.word	0x20000bd0
 8008694:	200006f8 	.word	0x200006f8
 8008698:	200006f4 	.word	0x200006f4
 800869c:	20000bd8 	.word	0x20000bd8
 80086a0:	20000bdc 	.word	0x20000bdc

080086a4 <vTaskSwitchContext>:
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	4b20      	ldr	r3, [pc, #128]	; (800872c <vTaskSwitchContext+0x88>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <vTaskSwitchContext+0x16>
 80086b2:	4b1f      	ldr	r3, [pc, #124]	; (8008730 <vTaskSwitchContext+0x8c>)
 80086b4:	2201      	movs	r2, #1
 80086b6:	601a      	str	r2, [r3, #0]
 80086b8:	e033      	b.n	8008722 <vTaskSwitchContext+0x7e>
 80086ba:	4b1d      	ldr	r3, [pc, #116]	; (8008730 <vTaskSwitchContext+0x8c>)
 80086bc:	2200      	movs	r2, #0
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	4b1c      	ldr	r3, [pc, #112]	; (8008734 <vTaskSwitchContext+0x90>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	607b      	str	r3, [r7, #4]
 80086c6:	e002      	b.n	80086ce <vTaskSwitchContext+0x2a>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	607b      	str	r3, [r7, #4]
 80086ce:	491a      	ldr	r1, [pc, #104]	; (8008738 <vTaskSwitchContext+0x94>)
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	440b      	add	r3, r1
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0f2      	beq.n	80086c8 <vTaskSwitchContext+0x24>
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4a12      	ldr	r2, [pc, #72]	; (8008738 <vTaskSwitchContext+0x94>)
 80086ee:	4413      	add	r3, r2
 80086f0:	603b      	str	r3, [r7, #0]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	605a      	str	r2, [r3, #4]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	3308      	adds	r3, #8
 8008704:	429a      	cmp	r2, r3
 8008706:	d104      	bne.n	8008712 <vTaskSwitchContext+0x6e>
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	605a      	str	r2, [r3, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	4a08      	ldr	r2, [pc, #32]	; (800873c <vTaskSwitchContext+0x98>)
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	4a05      	ldr	r2, [pc, #20]	; (8008734 <vTaskSwitchContext+0x90>)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	bf00      	nop
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr
 800872c:	20000bf0 	.word	0x20000bf0
 8008730:	20000bdc 	.word	0x20000bdc
 8008734:	20000bd0 	.word	0x20000bd0
 8008738:	200006f8 	.word	0x200006f8
 800873c:	200006f4 	.word	0x200006f4

08008740 <vTaskPlaceOnEventList>:
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
 800874a:	4b07      	ldr	r3, [pc, #28]	; (8008768 <vTaskPlaceOnEventList+0x28>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3318      	adds	r3, #24
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7fe fe48 	bl	80073e8 <vListInsert>
 8008758:	2101      	movs	r1, #1
 800875a:	6838      	ldr	r0, [r7, #0]
 800875c:	f000 fafc 	bl	8008d58 <prvAddCurrentTaskToDelayedList>
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	200006f4 	.word	0x200006f4

0800876c <vTaskPlaceOnEventListRestricted>:
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
 8008778:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <vTaskPlaceOnEventListRestricted+0x38>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3318      	adds	r3, #24
 800877e:	4619      	mov	r1, r3
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f7fe fe0e 	bl	80073a2 <vListInsertEnd>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <vTaskPlaceOnEventListRestricted+0x26>
 800878c:	f04f 33ff 	mov.w	r3, #4294967295
 8008790:	60bb      	str	r3, [r7, #8]
 8008792:	6879      	ldr	r1, [r7, #4]
 8008794:	68b8      	ldr	r0, [r7, #8]
 8008796:	f000 fadf 	bl	8008d58 <prvAddCurrentTaskToDelayedList>
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	200006f4 	.word	0x200006f4

080087a8 <xTaskRemoveFromEventList>:
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	60bb      	str	r3, [r7, #8]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	3318      	adds	r3, #24
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fe fe4b 	bl	8007458 <uxListRemove>
 80087c2:	4b1e      	ldr	r3, [pc, #120]	; (800883c <xTaskRemoveFromEventList+0x94>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d11d      	bne.n	8008806 <xTaskRemoveFromEventList+0x5e>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	3304      	adds	r3, #4
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fe42 	bl	8007458 <uxListRemove>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d8:	4b19      	ldr	r3, [pc, #100]	; (8008840 <xTaskRemoveFromEventList+0x98>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d903      	bls.n	80087e8 <xTaskRemoveFromEventList+0x40>
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	4a16      	ldr	r2, [pc, #88]	; (8008840 <xTaskRemoveFromEventList+0x98>)
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4a13      	ldr	r2, [pc, #76]	; (8008844 <xTaskRemoveFromEventList+0x9c>)
 80087f6:	441a      	add	r2, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	3304      	adds	r3, #4
 80087fc:	4619      	mov	r1, r3
 80087fe:	4610      	mov	r0, r2
 8008800:	f7fe fdcf 	bl	80073a2 <vListInsertEnd>
 8008804:	e005      	b.n	8008812 <xTaskRemoveFromEventList+0x6a>
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	3318      	adds	r3, #24
 800880a:	4619      	mov	r1, r3
 800880c:	480e      	ldr	r0, [pc, #56]	; (8008848 <xTaskRemoveFromEventList+0xa0>)
 800880e:	f7fe fdc8 	bl	80073a2 <vListInsertEnd>
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008816:	4b0d      	ldr	r3, [pc, #52]	; (800884c <xTaskRemoveFromEventList+0xa4>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	429a      	cmp	r2, r3
 800881e:	d905      	bls.n	800882c <xTaskRemoveFromEventList+0x84>
 8008820:	2301      	movs	r3, #1
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	4b0a      	ldr	r3, [pc, #40]	; (8008850 <xTaskRemoveFromEventList+0xa8>)
 8008826:	2201      	movs	r2, #1
 8008828:	601a      	str	r2, [r3, #0]
 800882a:	e001      	b.n	8008830 <xTaskRemoveFromEventList+0x88>
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	20000bf0 	.word	0x20000bf0
 8008840:	20000bd0 	.word	0x20000bd0
 8008844:	200006f8 	.word	0x200006f8
 8008848:	20000b88 	.word	0x20000b88
 800884c:	200006f4 	.word	0x200006f4
 8008850:	20000bdc 	.word	0x20000bdc

08008854 <vTaskInternalSetTimeOutState>:
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	4b06      	ldr	r3, [pc, #24]	; (8008878 <vTaskInternalSetTimeOutState+0x24>)
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	4b05      	ldr	r3, [pc, #20]	; (800887c <vTaskInternalSetTimeOutState+0x28>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	605a      	str	r2, [r3, #4]
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	bc80      	pop	{r7}
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20000be0 	.word	0x20000be0
 800887c:	20000bcc 	.word	0x20000bcc

08008880 <xTaskCheckForTimeOut>:
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	f000 fdf5 	bl	8009478 <vPortEnterCritical>
 800888e:	4b1d      	ldr	r3, [pc, #116]	; (8008904 <xTaskCheckForTimeOut+0x84>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	613b      	str	r3, [r7, #16]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	60fb      	str	r3, [r7, #12]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a6:	d102      	bne.n	80088ae <xTaskCheckForTimeOut+0x2e>
 80088a8:	2300      	movs	r3, #0
 80088aa:	617b      	str	r3, [r7, #20]
 80088ac:	e023      	b.n	80088f6 <xTaskCheckForTimeOut+0x76>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	4b15      	ldr	r3, [pc, #84]	; (8008908 <xTaskCheckForTimeOut+0x88>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d007      	beq.n	80088ca <xTaskCheckForTimeOut+0x4a>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d302      	bcc.n	80088ca <xTaskCheckForTimeOut+0x4a>
 80088c4:	2301      	movs	r3, #1
 80088c6:	617b      	str	r3, [r7, #20]
 80088c8:	e015      	b.n	80088f6 <xTaskCheckForTimeOut+0x76>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d20b      	bcs.n	80088ec <xTaskCheckForTimeOut+0x6c>
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	1ad2      	subs	r2, r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff ffb7 	bl	8008854 <vTaskInternalSetTimeOutState>
 80088e6:	2300      	movs	r3, #0
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	e004      	b.n	80088f6 <xTaskCheckForTimeOut+0x76>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	2200      	movs	r2, #0
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	2301      	movs	r3, #1
 80088f4:	617b      	str	r3, [r7, #20]
 80088f6:	f000 fdd9 	bl	80094ac <vPortExitCritical>
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	4618      	mov	r0, r3
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	20000bcc 	.word	0x20000bcc
 8008908:	20000be0 	.word	0x20000be0

0800890c <vTaskMissedYield>:
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
 8008910:	4b03      	ldr	r3, [pc, #12]	; (8008920 <vTaskMissedYield+0x14>)
 8008912:	2201      	movs	r2, #1
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	bf00      	nop
 8008918:	46bd      	mov	sp, r7
 800891a:	bc80      	pop	{r7}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	20000bdc 	.word	0x20000bdc

08008924 <prvIdleTask>:
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	f000 f852 	bl	80089d4 <prvCheckTasksWaitingTermination>
 8008930:	4b06      	ldr	r3, [pc, #24]	; (800894c <prvIdleTask+0x28>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d9f9      	bls.n	800892c <prvIdleTask+0x8>
 8008938:	4b05      	ldr	r3, [pc, #20]	; (8008950 <prvIdleTask+0x2c>)
 800893a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	e7f0      	b.n	800892c <prvIdleTask+0x8>
 800894a:	bf00      	nop
 800894c:	200006f8 	.word	0x200006f8
 8008950:	e000ed04 	.word	0xe000ed04

08008954 <prvInitialiseTaskLists>:
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	2300      	movs	r3, #0
 800895c:	607b      	str	r3, [r7, #4]
 800895e:	e00c      	b.n	800897a <prvInitialiseTaskLists+0x26>
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	4613      	mov	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4a12      	ldr	r2, [pc, #72]	; (80089b4 <prvInitialiseTaskLists+0x60>)
 800896c:	4413      	add	r3, r2
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe fcec 	bl	800734c <vListInitialise>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3301      	adds	r3, #1
 8008978:	607b      	str	r3, [r7, #4]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b37      	cmp	r3, #55	; 0x37
 800897e:	d9ef      	bls.n	8008960 <prvInitialiseTaskLists+0xc>
 8008980:	480d      	ldr	r0, [pc, #52]	; (80089b8 <prvInitialiseTaskLists+0x64>)
 8008982:	f7fe fce3 	bl	800734c <vListInitialise>
 8008986:	480d      	ldr	r0, [pc, #52]	; (80089bc <prvInitialiseTaskLists+0x68>)
 8008988:	f7fe fce0 	bl	800734c <vListInitialise>
 800898c:	480c      	ldr	r0, [pc, #48]	; (80089c0 <prvInitialiseTaskLists+0x6c>)
 800898e:	f7fe fcdd 	bl	800734c <vListInitialise>
 8008992:	480c      	ldr	r0, [pc, #48]	; (80089c4 <prvInitialiseTaskLists+0x70>)
 8008994:	f7fe fcda 	bl	800734c <vListInitialise>
 8008998:	480b      	ldr	r0, [pc, #44]	; (80089c8 <prvInitialiseTaskLists+0x74>)
 800899a:	f7fe fcd7 	bl	800734c <vListInitialise>
 800899e:	4b0b      	ldr	r3, [pc, #44]	; (80089cc <prvInitialiseTaskLists+0x78>)
 80089a0:	4a05      	ldr	r2, [pc, #20]	; (80089b8 <prvInitialiseTaskLists+0x64>)
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	4b0a      	ldr	r3, [pc, #40]	; (80089d0 <prvInitialiseTaskLists+0x7c>)
 80089a6:	4a05      	ldr	r2, [pc, #20]	; (80089bc <prvInitialiseTaskLists+0x68>)
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	200006f8 	.word	0x200006f8
 80089b8:	20000b58 	.word	0x20000b58
 80089bc:	20000b6c 	.word	0x20000b6c
 80089c0:	20000b88 	.word	0x20000b88
 80089c4:	20000b9c 	.word	0x20000b9c
 80089c8:	20000bb4 	.word	0x20000bb4
 80089cc:	20000b80 	.word	0x20000b80
 80089d0:	20000b84 	.word	0x20000b84

080089d4 <prvCheckTasksWaitingTermination>:
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	e019      	b.n	8008a10 <prvCheckTasksWaitingTermination+0x3c>
 80089dc:	f000 fd4c 	bl	8009478 <vPortEnterCritical>
 80089e0:	4b10      	ldr	r3, [pc, #64]	; (8008a24 <prvCheckTasksWaitingTermination+0x50>)
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	607b      	str	r3, [r7, #4]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3304      	adds	r3, #4
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7fe fd33 	bl	8007458 <uxListRemove>
 80089f2:	4b0d      	ldr	r3, [pc, #52]	; (8008a28 <prvCheckTasksWaitingTermination+0x54>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	4a0b      	ldr	r2, [pc, #44]	; (8008a28 <prvCheckTasksWaitingTermination+0x54>)
 80089fa:	6013      	str	r3, [r2, #0]
 80089fc:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <prvCheckTasksWaitingTermination+0x58>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	4a0a      	ldr	r2, [pc, #40]	; (8008a2c <prvCheckTasksWaitingTermination+0x58>)
 8008a04:	6013      	str	r3, [r2, #0]
 8008a06:	f000 fd51 	bl	80094ac <vPortExitCritical>
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f810 	bl	8008a30 <prvDeleteTCB>
 8008a10:	4b06      	ldr	r3, [pc, #24]	; (8008a2c <prvCheckTasksWaitingTermination+0x58>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e1      	bne.n	80089dc <prvCheckTasksWaitingTermination+0x8>
 8008a18:	bf00      	nop
 8008a1a:	bf00      	nop
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	20000b9c 	.word	0x20000b9c
 8008a28:	20000bc8 	.word	0x20000bc8
 8008a2c:	20000bb0 	.word	0x20000bb0

08008a30 <prvDeleteTCB>:
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d108      	bne.n	8008a54 <prvDeleteTCB+0x24>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 fe46 	bl	80096d8 <vPortFree>
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fe43 	bl	80096d8 <vPortFree>
 8008a52:	e007      	b.n	8008a64 <prvDeleteTCB+0x34>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d102      	bne.n	8008a64 <prvDeleteTCB+0x34>
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fe3a 	bl	80096d8 <vPortFree>
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <prvResetNextTaskUnblockTime>:
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <prvResetNextTaskUnblockTime+0x40>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <prvResetNextTaskUnblockTime+0x14>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e000      	b.n	8008a82 <prvResetNextTaskUnblockTime+0x16>
 8008a80:	2300      	movs	r3, #0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d004      	beq.n	8008a90 <prvResetNextTaskUnblockTime+0x24>
 8008a86:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <prvResetNextTaskUnblockTime+0x44>)
 8008a88:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	e008      	b.n	8008aa2 <prvResetNextTaskUnblockTime+0x36>
 8008a90:	4b06      	ldr	r3, [pc, #24]	; (8008aac <prvResetNextTaskUnblockTime+0x40>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	607b      	str	r3, [r7, #4]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	4a04      	ldr	r2, [pc, #16]	; (8008ab0 <prvResetNextTaskUnblockTime+0x44>)
 8008aa0:	6013      	str	r3, [r2, #0]
 8008aa2:	bf00      	nop
 8008aa4:	370c      	adds	r7, #12
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bc80      	pop	{r7}
 8008aaa:	4770      	bx	lr
 8008aac:	20000b80 	.word	0x20000b80
 8008ab0:	20000be8 	.word	0x20000be8

08008ab4 <xTaskGetSchedulerState>:
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4b0b      	ldr	r3, [pc, #44]	; (8008ae8 <xTaskGetSchedulerState+0x34>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d102      	bne.n	8008ac8 <xTaskGetSchedulerState+0x14>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	607b      	str	r3, [r7, #4]
 8008ac6:	e008      	b.n	8008ada <xTaskGetSchedulerState+0x26>
 8008ac8:	4b08      	ldr	r3, [pc, #32]	; (8008aec <xTaskGetSchedulerState+0x38>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d102      	bne.n	8008ad6 <xTaskGetSchedulerState+0x22>
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	607b      	str	r3, [r7, #4]
 8008ad4:	e001      	b.n	8008ada <xTaskGetSchedulerState+0x26>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	607b      	str	r3, [r7, #4]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bc80      	pop	{r7}
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	20000bd4 	.word	0x20000bd4
 8008aec:	20000bf0 	.word	0x20000bf0

08008af0 <xTaskPriorityInherit>:
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	60bb      	str	r3, [r7, #8]
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d056      	beq.n	8008bb4 <xTaskPriorityInherit+0xc4>
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0a:	4b2d      	ldr	r3, [pc, #180]	; (8008bc0 <xTaskPriorityInherit+0xd0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d246      	bcs.n	8008ba2 <xTaskPriorityInherit+0xb2>
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	db06      	blt.n	8008b2a <xTaskPriorityInherit+0x3a>
 8008b1c:	4b28      	ldr	r3, [pc, #160]	; (8008bc0 <xTaskPriorityInherit+0xd0>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	619a      	str	r2, [r3, #24]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	6959      	ldr	r1, [r3, #20]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b32:	4613      	mov	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4a22      	ldr	r2, [pc, #136]	; (8008bc4 <xTaskPriorityInherit+0xd4>)
 8008b3c:	4413      	add	r3, r2
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	d101      	bne.n	8008b46 <xTaskPriorityInherit+0x56>
 8008b42:	2301      	movs	r3, #1
 8008b44:	e000      	b.n	8008b48 <xTaskPriorityInherit+0x58>
 8008b46:	2300      	movs	r3, #0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d022      	beq.n	8008b92 <xTaskPriorityInherit+0xa2>
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe fc81 	bl	8007458 <uxListRemove>
 8008b56:	4b1a      	ldr	r3, [pc, #104]	; (8008bc0 <xTaskPriorityInherit+0xd0>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b64:	4b18      	ldr	r3, [pc, #96]	; (8008bc8 <xTaskPriorityInherit+0xd8>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d903      	bls.n	8008b74 <xTaskPriorityInherit+0x84>
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b70:	4a15      	ldr	r2, [pc, #84]	; (8008bc8 <xTaskPriorityInherit+0xd8>)
 8008b72:	6013      	str	r3, [r2, #0]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4a10      	ldr	r2, [pc, #64]	; (8008bc4 <xTaskPriorityInherit+0xd4>)
 8008b82:	441a      	add	r2, r3
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	3304      	adds	r3, #4
 8008b88:	4619      	mov	r1, r3
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	f7fe fc09 	bl	80073a2 <vListInsertEnd>
 8008b90:	e004      	b.n	8008b9c <xTaskPriorityInherit+0xac>
 8008b92:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <xTaskPriorityInherit+0xd0>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	e008      	b.n	8008bb4 <xTaskPriorityInherit+0xc4>
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ba6:	4b06      	ldr	r3, [pc, #24]	; (8008bc0 <xTaskPriorityInherit+0xd0>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d201      	bcs.n	8008bb4 <xTaskPriorityInherit+0xc4>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	60fb      	str	r3, [r7, #12]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	200006f4 	.word	0x200006f4
 8008bc4:	200006f8 	.word	0x200006f8
 8008bc8:	20000bd0 	.word	0x20000bd0

08008bcc <xTaskPriorityDisinherit>:
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	60bb      	str	r3, [r7, #8]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d037      	beq.n	8008c52 <xTaskPriorityDisinherit+0x86>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be6:	1e5a      	subs	r2, r3, #1
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	651a      	str	r2, [r3, #80]	; 0x50
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d02c      	beq.n	8008c52 <xTaskPriorityDisinherit+0x86>
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d128      	bne.n	8008c52 <xTaskPriorityDisinherit+0x86>
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	3304      	adds	r3, #4
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fe fc27 	bl	8007458 <uxListRemove>
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	62da      	str	r2, [r3, #44]	; 0x2c
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	619a      	str	r2, [r3, #24]
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c22:	4b0e      	ldr	r3, [pc, #56]	; (8008c5c <xTaskPriorityDisinherit+0x90>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d903      	bls.n	8008c32 <xTaskPriorityDisinherit+0x66>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2e:	4a0b      	ldr	r2, [pc, #44]	; (8008c5c <xTaskPriorityDisinherit+0x90>)
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4a08      	ldr	r2, [pc, #32]	; (8008c60 <xTaskPriorityDisinherit+0x94>)
 8008c40:	441a      	add	r2, r3
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	3304      	adds	r3, #4
 8008c46:	4619      	mov	r1, r3
 8008c48:	4610      	mov	r0, r2
 8008c4a:	f7fe fbaa 	bl	80073a2 <vListInsertEnd>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	20000bd0 	.word	0x20000bd0
 8008c60:	200006f8 	.word	0x200006f8

08008c64 <vTaskPriorityDisinheritAfterTimeout>:
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	613b      	str	r3, [r7, #16]
 8008c72:	2301      	movs	r3, #1
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d050      	beq.n	8008d1e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d902      	bls.n	8008c8c <vTaskPriorityDisinheritAfterTimeout+0x28>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	617b      	str	r3, [r7, #20]
 8008c8a:	e002      	b.n	8008c92 <vTaskPriorityDisinheritAfterTimeout+0x2e>
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c90:	617b      	str	r3, [r7, #20]
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d040      	beq.n	8008d1e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d13b      	bne.n	8008d1e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008caa:	60bb      	str	r3, [r7, #8]
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	db04      	blt.n	8008cc4 <vTaskPriorityDisinheritAfterTimeout+0x60>
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	619a      	str	r2, [r3, #24]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	6959      	ldr	r1, [r3, #20]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4a15      	ldr	r2, [pc, #84]	; (8008d28 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8008cd4:	4413      	add	r3, r2
 8008cd6:	4299      	cmp	r1, r3
 8008cd8:	d101      	bne.n	8008cde <vTaskPriorityDisinheritAfterTimeout+0x7a>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e000      	b.n	8008ce0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d01c      	beq.n	8008d1e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe fbb5 	bl	8007458 <uxListRemove>
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf2:	4b0e      	ldr	r3, [pc, #56]	; (8008d2c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d903      	bls.n	8008d02 <vTaskPriorityDisinheritAfterTimeout+0x9e>
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	4a0b      	ldr	r2, [pc, #44]	; (8008d2c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4a06      	ldr	r2, [pc, #24]	; (8008d28 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8008d10:	441a      	add	r2, r3
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	3304      	adds	r3, #4
 8008d16:	4619      	mov	r1, r3
 8008d18:	4610      	mov	r0, r2
 8008d1a:	f7fe fb42 	bl	80073a2 <vListInsertEnd>
 8008d1e:	bf00      	nop
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200006f8 	.word	0x200006f8
 8008d2c:	20000bd0 	.word	0x20000bd0

08008d30 <pvTaskIncrementMutexHeldCount>:
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d004      	beq.n	8008d46 <pvTaskIncrementMutexHeldCount+0x16>
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d42:	3201      	adds	r2, #1
 8008d44:	651a      	str	r2, [r3, #80]	; 0x50
 8008d46:	4b03      	ldr	r3, [pc, #12]	; (8008d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	200006f4 	.word	0x200006f4

08008d58 <prvAddCurrentTaskToDelayedList>:
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
 8008d62:	4b21      	ldr	r3, [pc, #132]	; (8008de8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	4b20      	ldr	r3, [pc, #128]	; (8008dec <prvAddCurrentTaskToDelayedList+0x94>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fb72 	bl	8007458 <uxListRemove>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7a:	d10a      	bne.n	8008d92 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d007      	beq.n	8008d92 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d82:	4b1a      	ldr	r3, [pc, #104]	; (8008dec <prvAddCurrentTaskToDelayedList+0x94>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3304      	adds	r3, #4
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4819      	ldr	r0, [pc, #100]	; (8008df0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d8c:	f7fe fb09 	bl	80073a2 <vListInsertEnd>
 8008d90:	e026      	b.n	8008de0 <prvAddCurrentTaskToDelayedList+0x88>
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4413      	add	r3, r2
 8008d98:	60bb      	str	r3, [r7, #8]
 8008d9a:	4b14      	ldr	r3, [pc, #80]	; (8008dec <prvAddCurrentTaskToDelayedList+0x94>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	605a      	str	r2, [r3, #4]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d209      	bcs.n	8008dbe <prvAddCurrentTaskToDelayedList+0x66>
 8008daa:	4b12      	ldr	r3, [pc, #72]	; (8008df4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	4b0f      	ldr	r3, [pc, #60]	; (8008dec <prvAddCurrentTaskToDelayedList+0x94>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3304      	adds	r3, #4
 8008db4:	4619      	mov	r1, r3
 8008db6:	4610      	mov	r0, r2
 8008db8:	f7fe fb16 	bl	80073e8 <vListInsert>
 8008dbc:	e010      	b.n	8008de0 <prvAddCurrentTaskToDelayedList+0x88>
 8008dbe:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <prvAddCurrentTaskToDelayedList+0x94>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	4619      	mov	r1, r3
 8008dca:	4610      	mov	r0, r2
 8008dcc:	f7fe fb0c 	bl	80073e8 <vListInsert>
 8008dd0:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d202      	bcs.n	8008de0 <prvAddCurrentTaskToDelayedList+0x88>
 8008dda:	4a08      	ldr	r2, [pc, #32]	; (8008dfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	bf00      	nop
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	20000bcc 	.word	0x20000bcc
 8008dec:	200006f4 	.word	0x200006f4
 8008df0:	20000bb4 	.word	0x20000bb4
 8008df4:	20000b84 	.word	0x20000b84
 8008df8:	20000b80 	.word	0x20000b80
 8008dfc:	20000be8 	.word	0x20000be8

08008e00 <xTimerCreateTimerTask>:
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b088      	sub	sp, #32
 8008e04:	af04      	add	r7, sp, #16
 8008e06:	2300      	movs	r3, #0
 8008e08:	60fb      	str	r3, [r7, #12]
 8008e0a:	f000 fa69 	bl	80092e0 <prvCheckForValidListAndQueue>
 8008e0e:	4b15      	ldr	r3, [pc, #84]	; (8008e64 <xTimerCreateTimerTask+0x64>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d020      	beq.n	8008e58 <xTimerCreateTimerTask+0x58>
 8008e16:	2300      	movs	r3, #0
 8008e18:	60bb      	str	r3, [r7, #8]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	607b      	str	r3, [r7, #4]
 8008e1e:	463a      	mov	r2, r7
 8008e20:	1d39      	adds	r1, r7, #4
 8008e22:	f107 0308 	add.w	r3, r7, #8
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe fa76 	bl	8007318 <vApplicationGetTimerTaskMemory>
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	9202      	str	r2, [sp, #8]
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	2302      	movs	r3, #2
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	460a      	mov	r2, r1
 8008e3e:	490a      	ldr	r1, [pc, #40]	; (8008e68 <xTimerCreateTimerTask+0x68>)
 8008e40:	480a      	ldr	r0, [pc, #40]	; (8008e6c <xTimerCreateTimerTask+0x6c>)
 8008e42:	f7ff f8ff 	bl	8008044 <xTaskCreateStatic>
 8008e46:	4603      	mov	r3, r0
 8008e48:	4a09      	ldr	r2, [pc, #36]	; (8008e70 <xTimerCreateTimerTask+0x70>)
 8008e4a:	6013      	str	r3, [r2, #0]
 8008e4c:	4b08      	ldr	r3, [pc, #32]	; (8008e70 <xTimerCreateTimerTask+0x70>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <xTimerCreateTimerTask+0x58>
 8008e54:	2301      	movs	r3, #1
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20000c24 	.word	0x20000c24
 8008e68:	080099d8 	.word	0x080099d8
 8008e6c:	08008f59 	.word	0x08008f59
 8008e70:	20000c28 	.word	0x20000c28

08008e74 <xTimerGenericCommand>:
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08a      	sub	sp, #40	; 0x28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	603b      	str	r3, [r7, #0]
 8008e82:	2300      	movs	r3, #0
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
 8008e86:	4b1a      	ldr	r3, [pc, #104]	; (8008ef0 <xTimerGenericCommand+0x7c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d02a      	beq.n	8008ee4 <xTimerGenericCommand+0x70>
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	617b      	str	r3, [r7, #20]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	61bb      	str	r3, [r7, #24]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	61fb      	str	r3, [r7, #28]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2b05      	cmp	r3, #5
 8008e9e:	dc18      	bgt.n	8008ed2 <xTimerGenericCommand+0x5e>
 8008ea0:	f7ff fe08 	bl	8008ab4 <xTaskGetSchedulerState>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d109      	bne.n	8008ebe <xTimerGenericCommand+0x4a>
 8008eaa:	4b11      	ldr	r3, [pc, #68]	; (8008ef0 <xTimerGenericCommand+0x7c>)
 8008eac:	6818      	ldr	r0, [r3, #0]
 8008eae:	f107 0114 	add.w	r1, r7, #20
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb6:	f7fe fbdb 	bl	8007670 <xQueueGenericSend>
 8008eba:	6278      	str	r0, [r7, #36]	; 0x24
 8008ebc:	e012      	b.n	8008ee4 <xTimerGenericCommand+0x70>
 8008ebe:	4b0c      	ldr	r3, [pc, #48]	; (8008ef0 <xTimerGenericCommand+0x7c>)
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	f107 0114 	add.w	r1, r7, #20
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f7fe fbd1 	bl	8007670 <xQueueGenericSend>
 8008ece:	6278      	str	r0, [r7, #36]	; 0x24
 8008ed0:	e008      	b.n	8008ee4 <xTimerGenericCommand+0x70>
 8008ed2:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <xTimerGenericCommand+0x7c>)
 8008ed4:	6818      	ldr	r0, [r3, #0]
 8008ed6:	f107 0114 	add.w	r1, r7, #20
 8008eda:	2300      	movs	r3, #0
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	f7fe fc71 	bl	80077c4 <xQueueGenericSendFromISR>
 8008ee2:	6278      	str	r0, [r7, #36]	; 0x24
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3728      	adds	r7, #40	; 0x28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000c24 	.word	0x20000c24

08008ef4 <prvProcessExpiredTimer>:
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af02      	add	r7, sp, #8
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
 8008efe:	4b15      	ldr	r3, [pc, #84]	; (8008f54 <prvProcessExpiredTimer+0x60>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7fe faa3 	bl	8007458 <uxListRemove>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d114      	bne.n	8008f44 <prvProcessExpiredTimer+0x50>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	699a      	ldr	r2, [r3, #24]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	18d1      	adds	r1, r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 f8ba 	bl	80090a0 <prvInsertTimerInActiveList>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d008      	beq.n	8008f44 <prvProcessExpiredTimer+0x50>
 8008f32:	2300      	movs	r3, #0
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	2300      	movs	r3, #0
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f7ff ff99 	bl	8008e74 <xTimerGenericCommand>
 8008f42:	60b8      	str	r0, [r7, #8]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	4798      	blx	r3
 8008f4c:	bf00      	nop
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	20000c1c 	.word	0x20000c1c

08008f58 <prvTimerTask>:
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	f107 0308 	add.w	r3, r7, #8
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 f857 	bl	8009018 <prvGetNextExpireTime>
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 f803 	bl	8008f7c <prvProcessTimerOrBlockTask>
 8008f76:	f000 f8d5 	bl	8009124 <prvProcessReceivedCommands>
 8008f7a:	e7f1      	b.n	8008f60 <prvTimerTask+0x8>

08008f7c <prvProcessTimerOrBlockTask>:
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
 8008f86:	f7ff fa35 	bl	80083f4 <vTaskSuspendAll>
 8008f8a:	f107 0308 	add.w	r3, r7, #8
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 f866 	bl	8009060 <prvSampleTimeNow>
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d130      	bne.n	8008ffe <prvProcessTimerOrBlockTask+0x82>
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10a      	bne.n	8008fb8 <prvProcessTimerOrBlockTask+0x3c>
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d806      	bhi.n	8008fb8 <prvProcessTimerOrBlockTask+0x3c>
 8008faa:	f7ff fa31 	bl	8008410 <xTaskResumeAll>
 8008fae:	68f9      	ldr	r1, [r7, #12]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff ff9f 	bl	8008ef4 <prvProcessExpiredTimer>
 8008fb6:	e024      	b.n	8009002 <prvProcessTimerOrBlockTask+0x86>
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d008      	beq.n	8008fd0 <prvProcessTimerOrBlockTask+0x54>
 8008fbe:	4b13      	ldr	r3, [pc, #76]	; (800900c <prvProcessTimerOrBlockTask+0x90>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	bf0c      	ite	eq
 8008fc8:	2301      	moveq	r3, #1
 8008fca:	2300      	movne	r3, #0
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	603b      	str	r3, [r7, #0]
 8008fd0:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <prvProcessTimerOrBlockTask+0x94>)
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	f7fe fffd 	bl	8007fdc <vQueueWaitForMessageRestricted>
 8008fe2:	f7ff fa15 	bl	8008410 <xTaskResumeAll>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10a      	bne.n	8009002 <prvProcessTimerOrBlockTask+0x86>
 8008fec:	4b09      	ldr	r3, [pc, #36]	; (8009014 <prvProcessTimerOrBlockTask+0x98>)
 8008fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	e001      	b.n	8009002 <prvProcessTimerOrBlockTask+0x86>
 8008ffe:	f7ff fa07 	bl	8008410 <xTaskResumeAll>
 8009002:	bf00      	nop
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	20000c20 	.word	0x20000c20
 8009010:	20000c24 	.word	0x20000c24
 8009014:	e000ed04 	.word	0xe000ed04

08009018 <prvGetNextExpireTime>:
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	4b0e      	ldr	r3, [pc, #56]	; (800905c <prvGetNextExpireTime+0x44>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	bf0c      	ite	eq
 800902a:	2301      	moveq	r3, #1
 800902c:	2300      	movne	r3, #0
 800902e:	b2db      	uxtb	r3, r3
 8009030:	461a      	mov	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d105      	bne.n	800904a <prvGetNextExpireTime+0x32>
 800903e:	4b07      	ldr	r3, [pc, #28]	; (800905c <prvGetNextExpireTime+0x44>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	e001      	b.n	800904e <prvGetNextExpireTime+0x36>
 800904a:	2300      	movs	r3, #0
 800904c:	60fb      	str	r3, [r7, #12]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	bc80      	pop	{r7}
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	20000c1c 	.word	0x20000c1c

08009060 <prvSampleTimeNow>:
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	f7ff fa60 	bl	800852c <xTaskGetTickCount>
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	4b0b      	ldr	r3, [pc, #44]	; (800909c <prvSampleTimeNow+0x3c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	429a      	cmp	r2, r3
 8009076:	d205      	bcs.n	8009084 <prvSampleTimeNow+0x24>
 8009078:	f000 f8de 	bl	8009238 <prvSwitchTimerLists>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	e002      	b.n	800908a <prvSampleTimeNow+0x2a>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	4a04      	ldr	r2, [pc, #16]	; (800909c <prvSampleTimeNow+0x3c>)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20000c2c 	.word	0x20000c2c

080090a0 <prvInsertTimerInActiveList>:
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	603b      	str	r3, [r7, #0]
 80090ae:	2300      	movs	r3, #0
 80090b0:	617b      	str	r3, [r7, #20]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	605a      	str	r2, [r3, #4]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	611a      	str	r2, [r3, #16]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d812      	bhi.n	80090ec <prvInsertTimerInActiveList+0x4c>
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	1ad2      	subs	r2, r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d302      	bcc.n	80090da <prvInsertTimerInActiveList+0x3a>
 80090d4:	2301      	movs	r3, #1
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	e01b      	b.n	8009112 <prvInsertTimerInActiveList+0x72>
 80090da:	4b10      	ldr	r3, [pc, #64]	; (800911c <prvInsertTimerInActiveList+0x7c>)
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3304      	adds	r3, #4
 80090e2:	4619      	mov	r1, r3
 80090e4:	4610      	mov	r0, r2
 80090e6:	f7fe f97f 	bl	80073e8 <vListInsert>
 80090ea:	e012      	b.n	8009112 <prvInsertTimerInActiveList+0x72>
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d206      	bcs.n	8009102 <prvInsertTimerInActiveList+0x62>
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d302      	bcc.n	8009102 <prvInsertTimerInActiveList+0x62>
 80090fc:	2301      	movs	r3, #1
 80090fe:	617b      	str	r3, [r7, #20]
 8009100:	e007      	b.n	8009112 <prvInsertTimerInActiveList+0x72>
 8009102:	4b07      	ldr	r3, [pc, #28]	; (8009120 <prvInsertTimerInActiveList+0x80>)
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	3304      	adds	r3, #4
 800910a:	4619      	mov	r1, r3
 800910c:	4610      	mov	r0, r2
 800910e:	f7fe f96b 	bl	80073e8 <vListInsert>
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	4618      	mov	r0, r3
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	20000c20 	.word	0x20000c20
 8009120:	20000c1c 	.word	0x20000c1c

08009124 <prvProcessReceivedCommands>:
 8009124:	b580      	push	{r7, lr}
 8009126:	b08c      	sub	sp, #48	; 0x30
 8009128:	af02      	add	r7, sp, #8
 800912a:	e073      	b.n	8009214 <prvProcessReceivedCommands+0xf0>
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2b00      	cmp	r3, #0
 8009130:	da0b      	bge.n	800914a <prvProcessReceivedCommands+0x26>
 8009132:	f107 0308 	add.w	r3, r7, #8
 8009136:	3304      	adds	r3, #4
 8009138:	627b      	str	r3, [r7, #36]	; 0x24
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009140:	6850      	ldr	r0, [r2, #4]
 8009142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009144:	6892      	ldr	r2, [r2, #8]
 8009146:	4611      	mov	r1, r2
 8009148:	4798      	blx	r3
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	2b00      	cmp	r3, #0
 800914e:	db60      	blt.n	8009212 <prvProcessReceivedCommands+0xee>
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	623b      	str	r3, [r7, #32]
 8009154:	6a3b      	ldr	r3, [r7, #32]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d004      	beq.n	8009166 <prvProcessReceivedCommands+0x42>
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	3304      	adds	r3, #4
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe f979 	bl	8007458 <uxListRemove>
 8009166:	1d3b      	adds	r3, r7, #4
 8009168:	4618      	mov	r0, r3
 800916a:	f7ff ff79 	bl	8009060 <prvSampleTimeNow>
 800916e:	61f8      	str	r0, [r7, #28]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2b09      	cmp	r3, #9
 8009174:	d84e      	bhi.n	8009214 <prvProcessReceivedCommands+0xf0>
 8009176:	a201      	add	r2, pc, #4	; (adr r2, 800917c <prvProcessReceivedCommands+0x58>)
 8009178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917c:	080091a5 	.word	0x080091a5
 8009180:	080091a5 	.word	0x080091a5
 8009184:	080091a5 	.word	0x080091a5
 8009188:	08009215 	.word	0x08009215
 800918c:	080091e7 	.word	0x080091e7
 8009190:	08009201 	.word	0x08009201
 8009194:	080091a5 	.word	0x080091a5
 8009198:	080091a5 	.word	0x080091a5
 800919c:	08009215 	.word	0x08009215
 80091a0:	080091e7 	.word	0x080091e7
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	18d1      	adds	r1, r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	69fa      	ldr	r2, [r7, #28]
 80091b0:	6a38      	ldr	r0, [r7, #32]
 80091b2:	f7ff ff75 	bl	80090a0 <prvInsertTimerInActiveList>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d02b      	beq.n	8009214 <prvProcessReceivedCommands+0xf0>
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	6a38      	ldr	r0, [r7, #32]
 80091c2:	4798      	blx	r3
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d123      	bne.n	8009214 <prvProcessReceivedCommands+0xf0>
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	441a      	add	r2, r3
 80091d4:	2300      	movs	r3, #0
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	2300      	movs	r3, #0
 80091da:	2100      	movs	r1, #0
 80091dc:	6a38      	ldr	r0, [r7, #32]
 80091de:	f7ff fe49 	bl	8008e74 <xTimerGenericCommand>
 80091e2:	61b8      	str	r0, [r7, #24]
 80091e4:	e016      	b.n	8009214 <prvProcessReceivedCommands+0xf0>
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	619a      	str	r2, [r3, #24]
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	699a      	ldr	r2, [r3, #24]
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	18d1      	adds	r1, r2, r3
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	69fa      	ldr	r2, [r7, #28]
 80091f8:	6a38      	ldr	r0, [r7, #32]
 80091fa:	f7ff ff51 	bl	80090a0 <prvInsertTimerInActiveList>
 80091fe:	e009      	b.n	8009214 <prvProcessReceivedCommands+0xf0>
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d104      	bne.n	8009214 <prvProcessReceivedCommands+0xf0>
 800920a:	6a38      	ldr	r0, [r7, #32]
 800920c:	f000 fa64 	bl	80096d8 <vPortFree>
 8009210:	e000      	b.n	8009214 <prvProcessReceivedCommands+0xf0>
 8009212:	bf00      	nop
 8009214:	4b07      	ldr	r3, [pc, #28]	; (8009234 <prvProcessReceivedCommands+0x110>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f107 0108 	add.w	r1, r7, #8
 800921c:	2200      	movs	r2, #0
 800921e:	4618      	mov	r0, r3
 8009220:	f7fe fb7e 	bl	8007920 <xQueueReceive>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d180      	bne.n	800912c <prvProcessReceivedCommands+0x8>
 800922a:	bf00      	nop
 800922c:	bf00      	nop
 800922e:	3728      	adds	r7, #40	; 0x28
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	20000c24 	.word	0x20000c24

08009238 <prvSwitchTimerLists>:
 8009238:	b580      	push	{r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af02      	add	r7, sp, #8
 800923e:	e037      	b.n	80092b0 <prvSwitchTimerLists+0x78>
 8009240:	4b25      	ldr	r3, [pc, #148]	; (80092d8 <prvSwitchTimerLists+0xa0>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	613b      	str	r3, [r7, #16]
 800924a:	4b23      	ldr	r3, [pc, #140]	; (80092d8 <prvSwitchTimerLists+0xa0>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	3304      	adds	r3, #4
 8009258:	4618      	mov	r0, r3
 800925a:	f7fe f8fd 	bl	8007458 <uxListRemove>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	4798      	blx	r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d120      	bne.n	80092b0 <prvSwitchTimerLists+0x78>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	4413      	add	r3, r2
 8009276:	60bb      	str	r3, [r7, #8]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	429a      	cmp	r2, r3
 800927e:	d90e      	bls.n	800929e <prvSwitchTimerLists+0x66>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	605a      	str	r2, [r3, #4]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	611a      	str	r2, [r3, #16]
 800928c:	4b12      	ldr	r3, [pc, #72]	; (80092d8 <prvSwitchTimerLists+0xa0>)
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3304      	adds	r3, #4
 8009294:	4619      	mov	r1, r3
 8009296:	4610      	mov	r0, r2
 8009298:	f7fe f8a6 	bl	80073e8 <vListInsert>
 800929c:	e008      	b.n	80092b0 <prvSwitchTimerLists+0x78>
 800929e:	2300      	movs	r3, #0
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	2300      	movs	r3, #0
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	2100      	movs	r1, #0
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f7ff fde3 	bl	8008e74 <xTimerGenericCommand>
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	4b09      	ldr	r3, [pc, #36]	; (80092d8 <prvSwitchTimerLists+0xa0>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1c2      	bne.n	8009240 <prvSwitchTimerLists+0x8>
 80092ba:	4b07      	ldr	r3, [pc, #28]	; (80092d8 <prvSwitchTimerLists+0xa0>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	617b      	str	r3, [r7, #20]
 80092c0:	4b06      	ldr	r3, [pc, #24]	; (80092dc <prvSwitchTimerLists+0xa4>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a04      	ldr	r2, [pc, #16]	; (80092d8 <prvSwitchTimerLists+0xa0>)
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	4a04      	ldr	r2, [pc, #16]	; (80092dc <prvSwitchTimerLists+0xa4>)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	bf00      	nop
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20000c1c 	.word	0x20000c1c
 80092dc:	20000c20 	.word	0x20000c20

080092e0 <prvCheckForValidListAndQueue>:
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af02      	add	r7, sp, #8
 80092e6:	f000 f8c7 	bl	8009478 <vPortEnterCritical>
 80092ea:	4b15      	ldr	r3, [pc, #84]	; (8009340 <prvCheckForValidListAndQueue+0x60>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d120      	bne.n	8009334 <prvCheckForValidListAndQueue+0x54>
 80092f2:	4814      	ldr	r0, [pc, #80]	; (8009344 <prvCheckForValidListAndQueue+0x64>)
 80092f4:	f7fe f82a 	bl	800734c <vListInitialise>
 80092f8:	4813      	ldr	r0, [pc, #76]	; (8009348 <prvCheckForValidListAndQueue+0x68>)
 80092fa:	f7fe f827 	bl	800734c <vListInitialise>
 80092fe:	4b13      	ldr	r3, [pc, #76]	; (800934c <prvCheckForValidListAndQueue+0x6c>)
 8009300:	4a10      	ldr	r2, [pc, #64]	; (8009344 <prvCheckForValidListAndQueue+0x64>)
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	4b12      	ldr	r3, [pc, #72]	; (8009350 <prvCheckForValidListAndQueue+0x70>)
 8009306:	4a10      	ldr	r2, [pc, #64]	; (8009348 <prvCheckForValidListAndQueue+0x68>)
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	2300      	movs	r3, #0
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	4b11      	ldr	r3, [pc, #68]	; (8009354 <prvCheckForValidListAndQueue+0x74>)
 8009310:	4a11      	ldr	r2, [pc, #68]	; (8009358 <prvCheckForValidListAndQueue+0x78>)
 8009312:	2110      	movs	r1, #16
 8009314:	200a      	movs	r0, #10
 8009316:	f7fe f923 	bl	8007560 <xQueueGenericCreateStatic>
 800931a:	4603      	mov	r3, r0
 800931c:	4a08      	ldr	r2, [pc, #32]	; (8009340 <prvCheckForValidListAndQueue+0x60>)
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	4b07      	ldr	r3, [pc, #28]	; (8009340 <prvCheckForValidListAndQueue+0x60>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d005      	beq.n	8009334 <prvCheckForValidListAndQueue+0x54>
 8009328:	4b05      	ldr	r3, [pc, #20]	; (8009340 <prvCheckForValidListAndQueue+0x60>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	490b      	ldr	r1, [pc, #44]	; (800935c <prvCheckForValidListAndQueue+0x7c>)
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe fe2c 	bl	8007f8c <vQueueAddToRegistry>
 8009334:	f000 f8ba 	bl	80094ac <vPortExitCritical>
 8009338:	bf00      	nop
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20000c24 	.word	0x20000c24
 8009344:	20000bf4 	.word	0x20000bf4
 8009348:	20000c08 	.word	0x20000c08
 800934c:	20000c1c 	.word	0x20000c1c
 8009350:	20000c20 	.word	0x20000c20
 8009354:	20000cd0 	.word	0x20000cd0
 8009358:	20000c30 	.word	0x20000c30
 800935c:	080099e0 	.word	0x080099e0

08009360 <pxPortInitialiseStack>:
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3b04      	subs	r3, #4
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009378:	601a      	str	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3b04      	subs	r3, #4
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	f023 0201 	bic.w	r2, r3, #1
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	3b04      	subs	r3, #4
 800938e:	60fb      	str	r3, [r7, #12]
 8009390:	4a08      	ldr	r2, [pc, #32]	; (80093b4 <pxPortInitialiseStack+0x54>)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3b14      	subs	r3, #20
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3b20      	subs	r3, #32
 80093a6:	60fb      	str	r3, [r7, #12]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bc80      	pop	{r7}
 80093b2:	4770      	bx	lr
 80093b4:	080093b9 	.word	0x080093b9

080093b8 <prvTaskExitError>:
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	2300      	movs	r3, #0
 80093c0:	603b      	str	r3, [r7, #0]
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	607b      	str	r3, [r7, #4]
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0fc      	beq.n	80093d8 <prvTaskExitError+0x20>
 80093de:	bf00      	nop
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bc80      	pop	{r7}
 80093e8:	4770      	bx	lr
 80093ea:	0000      	movs	r0, r0
 80093ec:	0000      	movs	r0, r0
	...

080093f0 <SVC_Handler>:
 80093f0:	4b07      	ldr	r3, [pc, #28]	; (8009410 <pxCurrentTCBConst2>)
 80093f2:	6819      	ldr	r1, [r3, #0]
 80093f4:	6808      	ldr	r0, [r1, #0]
 80093f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80093fa:	f380 8809 	msr	PSP, r0
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f04f 0000 	mov.w	r0, #0
 8009406:	f380 8811 	msr	BASEPRI, r0
 800940a:	f04e 0e0d 	orr.w	lr, lr, #13
 800940e:	4770      	bx	lr

08009410 <pxCurrentTCBConst2>:
 8009410:	200006f4 	.word	0x200006f4
 8009414:	bf00      	nop
 8009416:	bf00      	nop

08009418 <prvPortStartFirstTask>:
 8009418:	4806      	ldr	r0, [pc, #24]	; (8009434 <prvPortStartFirstTask+0x1c>)
 800941a:	6800      	ldr	r0, [r0, #0]
 800941c:	6800      	ldr	r0, [r0, #0]
 800941e:	f380 8808 	msr	MSP, r0
 8009422:	b662      	cpsie	i
 8009424:	b661      	cpsie	f
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	df00      	svc	0
 8009430:	bf00      	nop
 8009432:	bf00      	nop
 8009434:	e000ed08 	.word	0xe000ed08

08009438 <xPortStartScheduler>:
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
 800943c:	4b0c      	ldr	r3, [pc, #48]	; (8009470 <xPortStartScheduler+0x38>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a0b      	ldr	r2, [pc, #44]	; (8009470 <xPortStartScheduler+0x38>)
 8009442:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	4b09      	ldr	r3, [pc, #36]	; (8009470 <xPortStartScheduler+0x38>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a08      	ldr	r2, [pc, #32]	; (8009470 <xPortStartScheduler+0x38>)
 800944e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009452:	6013      	str	r3, [r2, #0]
 8009454:	f000 f88a 	bl	800956c <vPortSetupTimerInterrupt>
 8009458:	4b06      	ldr	r3, [pc, #24]	; (8009474 <xPortStartScheduler+0x3c>)
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	f7ff ffdb 	bl	8009418 <prvPortStartFirstTask>
 8009462:	f7ff f91f 	bl	80086a4 <vTaskSwitchContext>
 8009466:	f7ff ffa7 	bl	80093b8 <prvTaskExitError>
 800946a:	2300      	movs	r3, #0
 800946c:	4618      	mov	r0, r3
 800946e:	bd80      	pop	{r7, pc}
 8009470:	e000ed20 	.word	0xe000ed20
 8009474:	2000000c 	.word	0x2000000c

08009478 <vPortEnterCritical>:
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	607b      	str	r3, [r7, #4]
 8009490:	bf00      	nop
 8009492:	4b05      	ldr	r3, [pc, #20]	; (80094a8 <vPortEnterCritical+0x30>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3301      	adds	r3, #1
 8009498:	4a03      	ldr	r2, [pc, #12]	; (80094a8 <vPortEnterCritical+0x30>)
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bc80      	pop	{r7}
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	2000000c 	.word	0x2000000c

080094ac <vPortExitCritical>:
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <vPortExitCritical+0x30>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3b01      	subs	r3, #1
 80094b8:	4a08      	ldr	r2, [pc, #32]	; (80094dc <vPortExitCritical+0x30>)
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	4b07      	ldr	r3, [pc, #28]	; (80094dc <vPortExitCritical+0x30>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d105      	bne.n	80094d0 <vPortExitCritical+0x24>
 80094c4:	2300      	movs	r3, #0
 80094c6:	607b      	str	r3, [r7, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	bf00      	nop
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bc80      	pop	{r7}
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	2000000c 	.word	0x2000000c

080094e0 <PendSV_Handler>:
 80094e0:	f3ef 8009 	mrs	r0, PSP
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	4b0d      	ldr	r3, [pc, #52]	; (8009520 <pxCurrentTCBConst>)
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80094f0:	6010      	str	r0, [r2, #0]
 80094f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80094f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80094fa:	f380 8811 	msr	BASEPRI, r0
 80094fe:	f7ff f8d1 	bl	80086a4 <vTaskSwitchContext>
 8009502:	f04f 0000 	mov.w	r0, #0
 8009506:	f380 8811 	msr	BASEPRI, r0
 800950a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800950e:	6819      	ldr	r1, [r3, #0]
 8009510:	6808      	ldr	r0, [r1, #0]
 8009512:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009516:	f380 8809 	msr	PSP, r0
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	4770      	bx	lr

08009520 <pxCurrentTCBConst>:
 8009520:	200006f4 	.word	0x200006f4
 8009524:	bf00      	nop
 8009526:	bf00      	nop

08009528 <xPortSysTickHandler>:
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	607b      	str	r3, [r7, #4]
 8009540:	bf00      	nop
 8009542:	f7ff f801 	bl	8008548 <xTaskIncrementTick>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d003      	beq.n	8009554 <xPortSysTickHandler+0x2c>
 800954c:	4b06      	ldr	r3, [pc, #24]	; (8009568 <xPortSysTickHandler+0x40>)
 800954e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	2300      	movs	r3, #0
 8009556:	603b      	str	r3, [r7, #0]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	bf00      	nop
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	e000ed04 	.word	0xe000ed04

0800956c <vPortSetupTimerInterrupt>:
 800956c:	b480      	push	{r7}
 800956e:	af00      	add	r7, sp, #0
 8009570:	4b0a      	ldr	r3, [pc, #40]	; (800959c <vPortSetupTimerInterrupt+0x30>)
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	4b0a      	ldr	r3, [pc, #40]	; (80095a0 <vPortSetupTimerInterrupt+0x34>)
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <vPortSetupTimerInterrupt+0x38>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a09      	ldr	r2, [pc, #36]	; (80095a8 <vPortSetupTimerInterrupt+0x3c>)
 8009582:	fba2 2303 	umull	r2, r3, r2, r3
 8009586:	099b      	lsrs	r3, r3, #6
 8009588:	4a08      	ldr	r2, [pc, #32]	; (80095ac <vPortSetupTimerInterrupt+0x40>)
 800958a:	3b01      	subs	r3, #1
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	4b03      	ldr	r3, [pc, #12]	; (800959c <vPortSetupTimerInterrupt+0x30>)
 8009590:	2207      	movs	r2, #7
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	bf00      	nop
 8009596:	46bd      	mov	sp, r7
 8009598:	bc80      	pop	{r7}
 800959a:	4770      	bx	lr
 800959c:	e000e010 	.word	0xe000e010
 80095a0:	e000e018 	.word	0xe000e018
 80095a4:	20000000 	.word	0x20000000
 80095a8:	10624dd3 	.word	0x10624dd3
 80095ac:	e000e014 	.word	0xe000e014

080095b0 <pvPortMalloc>:
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	2300      	movs	r3, #0
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	f7fe ff1a 	bl	80083f4 <vTaskSuspendAll>
 80095c0:	4b40      	ldr	r3, [pc, #256]	; (80096c4 <pvPortMalloc+0x114>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <pvPortMalloc+0x1c>
 80095c8:	f000 f8c0 	bl	800974c <prvHeapInit>
 80095cc:	4b3e      	ldr	r3, [pc, #248]	; (80096c8 <pvPortMalloc+0x118>)
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4013      	ands	r3, r2
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d16d      	bne.n	80096b4 <pvPortMalloc+0x104>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00d      	beq.n	80095fa <pvPortMalloc+0x4a>
 80095de:	2208      	movs	r2, #8
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4413      	add	r3, r2
 80095e4:	607b      	str	r3, [r7, #4]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f003 0307 	and.w	r3, r3, #7
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d004      	beq.n	80095fa <pvPortMalloc+0x4a>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f023 0307 	bic.w	r3, r3, #7
 80095f6:	3308      	adds	r3, #8
 80095f8:	607b      	str	r3, [r7, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d059      	beq.n	80096b4 <pvPortMalloc+0x104>
 8009600:	4b32      	ldr	r3, [pc, #200]	; (80096cc <pvPortMalloc+0x11c>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	429a      	cmp	r2, r3
 8009608:	d854      	bhi.n	80096b4 <pvPortMalloc+0x104>
 800960a:	4b31      	ldr	r3, [pc, #196]	; (80096d0 <pvPortMalloc+0x120>)
 800960c:	613b      	str	r3, [r7, #16]
 800960e:	4b30      	ldr	r3, [pc, #192]	; (80096d0 <pvPortMalloc+0x120>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	617b      	str	r3, [r7, #20]
 8009614:	e004      	b.n	8009620 <pvPortMalloc+0x70>
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	613b      	str	r3, [r7, #16]
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	429a      	cmp	r2, r3
 8009628:	d903      	bls.n	8009632 <pvPortMalloc+0x82>
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1f1      	bne.n	8009616 <pvPortMalloc+0x66>
 8009632:	4b24      	ldr	r3, [pc, #144]	; (80096c4 <pvPortMalloc+0x114>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	429a      	cmp	r2, r3
 800963a:	d03b      	beq.n	80096b4 <pvPortMalloc+0x104>
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2208      	movs	r2, #8
 8009642:	4413      	add	r3, r2
 8009644:	60fb      	str	r3, [r7, #12]
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	1ad2      	subs	r2, r2, r3
 8009656:	2308      	movs	r3, #8
 8009658:	005b      	lsls	r3, r3, #1
 800965a:	429a      	cmp	r2, r3
 800965c:	d90f      	bls.n	800967e <pvPortMalloc+0xce>
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4413      	add	r3, r2
 8009664:	60bb      	str	r3, [r7, #8]
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	1ad2      	subs	r2, r2, r3
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	605a      	str	r2, [r3, #4]
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	605a      	str	r2, [r3, #4]
 8009678:	68b8      	ldr	r0, [r7, #8]
 800967a:	f000 f8c9 	bl	8009810 <prvInsertBlockIntoFreeList>
 800967e:	4b13      	ldr	r3, [pc, #76]	; (80096cc <pvPortMalloc+0x11c>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	4a10      	ldr	r2, [pc, #64]	; (80096cc <pvPortMalloc+0x11c>)
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	4b0f      	ldr	r3, [pc, #60]	; (80096cc <pvPortMalloc+0x11c>)
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	4b10      	ldr	r3, [pc, #64]	; (80096d4 <pvPortMalloc+0x124>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d203      	bcs.n	80096a0 <pvPortMalloc+0xf0>
 8009698:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <pvPortMalloc+0x11c>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a0d      	ldr	r2, [pc, #52]	; (80096d4 <pvPortMalloc+0x124>)
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	4b08      	ldr	r3, [pc, #32]	; (80096c8 <pvPortMalloc+0x118>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	431a      	orrs	r2, r3
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	605a      	str	r2, [r3, #4]
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	f7fe feac 	bl	8008410 <xTaskResumeAll>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4618      	mov	r0, r3
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	20003528 	.word	0x20003528
 80096c8:	20003534 	.word	0x20003534
 80096cc:	2000352c 	.word	0x2000352c
 80096d0:	20003520 	.word	0x20003520
 80096d4:	20003530 	.word	0x20003530

080096d8 <vPortFree>:
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d027      	beq.n	800973a <vPortFree+0x62>
 80096ea:	2308      	movs	r3, #8
 80096ec:	425b      	negs	r3, r3
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	4413      	add	r3, r2
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	60bb      	str	r3, [r7, #8]
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	4b11      	ldr	r3, [pc, #68]	; (8009744 <vPortFree+0x6c>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4013      	ands	r3, r2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d019      	beq.n	800973a <vPortFree+0x62>
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d115      	bne.n	800973a <vPortFree+0x62>
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	685a      	ldr	r2, [r3, #4]
 8009712:	4b0c      	ldr	r3, [pc, #48]	; (8009744 <vPortFree+0x6c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	43db      	mvns	r3, r3
 8009718:	401a      	ands	r2, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	605a      	str	r2, [r3, #4]
 800971e:	f7fe fe69 	bl	80083f4 <vTaskSuspendAll>
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	4b08      	ldr	r3, [pc, #32]	; (8009748 <vPortFree+0x70>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4413      	add	r3, r2
 800972c:	4a06      	ldr	r2, [pc, #24]	; (8009748 <vPortFree+0x70>)
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	68b8      	ldr	r0, [r7, #8]
 8009732:	f000 f86d 	bl	8009810 <prvInsertBlockIntoFreeList>
 8009736:	f7fe fe6b 	bl	8008410 <xTaskResumeAll>
 800973a:	bf00      	nop
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20003534 	.word	0x20003534
 8009748:	2000352c 	.word	0x2000352c

0800974c <prvHeapInit>:
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009756:	60bb      	str	r3, [r7, #8]
 8009758:	4b27      	ldr	r3, [pc, #156]	; (80097f8 <prvHeapInit+0xac>)
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f003 0307 	and.w	r3, r3, #7
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00c      	beq.n	8009780 <prvHeapInit+0x34>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3307      	adds	r3, #7
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 0307 	bic.w	r3, r3, #7
 8009772:	60fb      	str	r3, [r7, #12]
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	4a1f      	ldr	r2, [pc, #124]	; (80097f8 <prvHeapInit+0xac>)
 800977c:	4413      	add	r3, r2
 800977e:	60bb      	str	r3, [r7, #8]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	607b      	str	r3, [r7, #4]
 8009784:	4a1d      	ldr	r2, [pc, #116]	; (80097fc <prvHeapInit+0xb0>)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	4b1c      	ldr	r3, [pc, #112]	; (80097fc <prvHeapInit+0xb0>)
 800978c:	2200      	movs	r2, #0
 800978e:	605a      	str	r2, [r3, #4]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	4413      	add	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	2208      	movs	r2, #8
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	1a9b      	subs	r3, r3, r2
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 0307 	bic.w	r3, r3, #7
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	4a15      	ldr	r2, [pc, #84]	; (8009800 <prvHeapInit+0xb4>)
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	4b14      	ldr	r3, [pc, #80]	; (8009800 <prvHeapInit+0xb4>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2200      	movs	r2, #0
 80097b4:	605a      	str	r2, [r3, #4]
 80097b6:	4b12      	ldr	r3, [pc, #72]	; (8009800 <prvHeapInit+0xb4>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2200      	movs	r2, #0
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	603b      	str	r3, [r7, #0]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	1ad2      	subs	r2, r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	605a      	str	r2, [r3, #4]
 80097cc:	4b0c      	ldr	r3, [pc, #48]	; (8009800 <prvHeapInit+0xb4>)
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	4a0a      	ldr	r2, [pc, #40]	; (8009804 <prvHeapInit+0xb8>)
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	4a09      	ldr	r2, [pc, #36]	; (8009808 <prvHeapInit+0xbc>)
 80097e2:	6013      	str	r3, [r2, #0]
 80097e4:	4b09      	ldr	r3, [pc, #36]	; (800980c <prvHeapInit+0xc0>)
 80097e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097ea:	601a      	str	r2, [r3, #0]
 80097ec:	bf00      	nop
 80097ee:	3714      	adds	r7, #20
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bc80      	pop	{r7}
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	20000d20 	.word	0x20000d20
 80097fc:	20003520 	.word	0x20003520
 8009800:	20003528 	.word	0x20003528
 8009804:	20003530 	.word	0x20003530
 8009808:	2000352c 	.word	0x2000352c
 800980c:	20003534 	.word	0x20003534

08009810 <prvInsertBlockIntoFreeList>:
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	4b27      	ldr	r3, [pc, #156]	; (80098b8 <prvInsertBlockIntoFreeList+0xa8>)
 800981a:	60fb      	str	r3, [r7, #12]
 800981c:	e002      	b.n	8009824 <prvInsertBlockIntoFreeList+0x14>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	429a      	cmp	r2, r3
 800982c:	d8f7      	bhi.n	800981e <prvInsertBlockIntoFreeList+0xe>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	60bb      	str	r3, [r7, #8]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	4413      	add	r3, r2
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	429a      	cmp	r2, r3
 800983e:	d108      	bne.n	8009852 <prvInsertBlockIntoFreeList+0x42>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	441a      	add	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	605a      	str	r2, [r3, #4]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	607b      	str	r3, [r7, #4]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	60bb      	str	r3, [r7, #8]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	441a      	add	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	429a      	cmp	r2, r3
 8009864:	d118      	bne.n	8009898 <prvInsertBlockIntoFreeList+0x88>
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	4b14      	ldr	r3, [pc, #80]	; (80098bc <prvInsertBlockIntoFreeList+0xac>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	429a      	cmp	r2, r3
 8009870:	d00d      	beq.n	800988e <prvInsertBlockIntoFreeList+0x7e>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	441a      	add	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	605a      	str	r2, [r3, #4]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	e008      	b.n	80098a0 <prvInsertBlockIntoFreeList+0x90>
 800988e:	4b0b      	ldr	r3, [pc, #44]	; (80098bc <prvInsertBlockIntoFreeList+0xac>)
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	601a      	str	r2, [r3, #0]
 8009896:	e003      	b.n	80098a0 <prvInsertBlockIntoFreeList+0x90>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d002      	beq.n	80098ae <prvInsertBlockIntoFreeList+0x9e>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	bf00      	nop
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bc80      	pop	{r7}
 80098b6:	4770      	bx	lr
 80098b8:	20003520 	.word	0x20003520
 80098bc:	20003528 	.word	0x20003528

080098c0 <__libc_init_array>:
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	2600      	movs	r6, #0
 80098c4:	4d0c      	ldr	r5, [pc, #48]	; (80098f8 <__libc_init_array+0x38>)
 80098c6:	4c0d      	ldr	r4, [pc, #52]	; (80098fc <__libc_init_array+0x3c>)
 80098c8:	1b64      	subs	r4, r4, r5
 80098ca:	10a4      	asrs	r4, r4, #2
 80098cc:	42a6      	cmp	r6, r4
 80098ce:	d109      	bne.n	80098e4 <__libc_init_array+0x24>
 80098d0:	f000 f830 	bl	8009934 <_init>
 80098d4:	2600      	movs	r6, #0
 80098d6:	4d0a      	ldr	r5, [pc, #40]	; (8009900 <__libc_init_array+0x40>)
 80098d8:	4c0a      	ldr	r4, [pc, #40]	; (8009904 <__libc_init_array+0x44>)
 80098da:	1b64      	subs	r4, r4, r5
 80098dc:	10a4      	asrs	r4, r4, #2
 80098de:	42a6      	cmp	r6, r4
 80098e0:	d105      	bne.n	80098ee <__libc_init_array+0x2e>
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
 80098e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80098e8:	4798      	blx	r3
 80098ea:	3601      	adds	r6, #1
 80098ec:	e7ee      	b.n	80098cc <__libc_init_array+0xc>
 80098ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f2:	4798      	blx	r3
 80098f4:	3601      	adds	r6, #1
 80098f6:	e7f2      	b.n	80098de <__libc_init_array+0x1e>
 80098f8:	08009a34 	.word	0x08009a34
 80098fc:	08009a34 	.word	0x08009a34
 8009900:	08009a34 	.word	0x08009a34
 8009904:	08009a38 	.word	0x08009a38

08009908 <memcpy>:
 8009908:	440a      	add	r2, r1
 800990a:	4291      	cmp	r1, r2
 800990c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009910:	d100      	bne.n	8009914 <memcpy+0xc>
 8009912:	4770      	bx	lr
 8009914:	b510      	push	{r4, lr}
 8009916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800991a:	4291      	cmp	r1, r2
 800991c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009920:	d1f9      	bne.n	8009916 <memcpy+0xe>
 8009922:	bd10      	pop	{r4, pc}

08009924 <memset>:
 8009924:	4603      	mov	r3, r0
 8009926:	4402      	add	r2, r0
 8009928:	4293      	cmp	r3, r2
 800992a:	d100      	bne.n	800992e <memset+0xa>
 800992c:	4770      	bx	lr
 800992e:	f803 1b01 	strb.w	r1, [r3], #1
 8009932:	e7f9      	b.n	8009928 <memset+0x4>

08009934 <_init>:
 8009934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009936:	bf00      	nop
 8009938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993a:	bc08      	pop	{r3}
 800993c:	469e      	mov	lr, r3
 800993e:	4770      	bx	lr

08009940 <_fini>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	bf00      	nop
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr
