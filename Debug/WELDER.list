
WELDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000908c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800927c  0800927c  0001927c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009364  08009364  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009364  08009364  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009364  08009364  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009364  08009364  00019364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009368  08009368  00019368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800936c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046c8  20000010  0800937c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  200046d8  0800937c  000246d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bcf4  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d38  00000000  00000000  0003bd2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0003fa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  00041030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8bc  00000000  00000000  00042450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018840  00000000  00000000  0005dd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a265c  00000000  00000000  0007654c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118ba8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac0  00000000  00000000  00118bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08009264 	.word	0x08009264

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08009264 	.word	0x08009264

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <MicrostepDriver_Ini>:
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a12:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <MicrostepDriver_Ini+0x2c>)
 8000a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a26:	635a      	str	r2, [r3, #52]	; 0x34
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <MicrostepDriver_Ini+0x28>)
<<<<<<< HEAD
 8000a2a:	f004 fffb 	bl	8005a24 <HAL_TIM_Base_Init>
}
=======
 8000a2a:	f004 fffd 	bl	8005a28 <HAL_TIM_Base_Init>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200045d4 	.word	0x200045d4
 8000a38:	40000400 	.word	0x40000400

08000a3c <MicrostepDriver_Run>:
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60ba      	str	r2, [r7, #8]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4603      	mov	r3, r0
 8000a48:	81fb      	strh	r3, [r7, #14]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	737b      	strb	r3, [r7, #13]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d023      	beq.n	8000aa0 <MicrostepDriver_Run+0x64>
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MicrostepDriver_Run+0x74>)
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <MicrostepDriver_Run+0x74>)
 8000a64:	60d3      	str	r3, [r2, #12]
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MicrostepDriver_Run+0x74>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a6c:	085b      	lsrs	r3, r3, #1
 8000a6e:	6353      	str	r3, [r2, #52]	; 0x34
 8000a70:	480f      	ldr	r0, [pc, #60]	; (8000ab0 <MicrostepDriver_Run+0x74>)
<<<<<<< HEAD
 8000a72:	f004 ffd7 	bl	8005a24 <HAL_TIM_Base_Init>

	if (dir == 0) // Направление вращения
=======
 8000a72:	f004 ffd9 	bl	8005a28 <HAL_TIM_Base_Init>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8000a76:	7b7b      	ldrb	r3, [r7, #13]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d106      	bne.n	8000a8a <MicrostepDriver_Run+0x4e>
 8000a7c:	8bbb      	ldrh	r3, [r7, #28]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	69b8      	ldr	r0, [r7, #24]
 8000a84:	f003 fd45 	bl	8004512 <HAL_GPIO_WritePin>
 8000a88:	e005      	b.n	8000a96 <MicrostepDriver_Run+0x5a>
 8000a8a:	8bbb      	ldrh	r3, [r7, #28]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4619      	mov	r1, r3
 8000a90:	69b8      	ldr	r0, [r7, #24]
<<<<<<< HEAD
 8000a92:	f003 fd3e 	bl	8004512 <HAL_GPIO_WritePin>
	}


	HAL_TIM_PWM_Start(&htim3, PWM_Channel); // Начало генерации ШИМ сигнала
 8000a96:	6a39      	ldr	r1, [r7, #32]
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MicrostepDriver_Run+0x74>)
 8000a9a:	f005 f86b 	bl	8005b74 <HAL_TIM_PWM_Start>
	else // Если частота задана как 0, то останов ШД
	{
		HAL_TIM_PWM_Stop(&htim3, PWM_Channel);
	}

}
=======
 8000a92:	f003 fd40 	bl	8004516 <HAL_GPIO_WritePin>
 8000a96:	6a39      	ldr	r1, [r7, #32]
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MicrostepDriver_Run+0x74>)
 8000a9a:	f005 f86d 	bl	8005b78 <HAL_TIM_PWM_Start>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8000a9e:	e003      	b.n	8000aa8 <MicrostepDriver_Run+0x6c>
 8000aa0:	6a39      	ldr	r1, [r7, #32]
 8000aa2:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <MicrostepDriver_Run+0x74>)
<<<<<<< HEAD
 8000aa4:	f005 f920 	bl	8005ce8 <HAL_TIM_PWM_Stop>
}
=======
 8000aa4:	f005 f922 	bl	8005cec <HAL_TIM_PWM_Stop>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200045d4 	.word	0x200045d4
 8000ab4:	40000400 	.word	0x40000400

08000ab8 <IndicatorPanel_Ini>:
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	2110      	movs	r1, #16
 8000abe:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <IndicatorPanel_Ini+0x28>)
 8000ac0:	f000 fc1e 	bl	8001300 <STLED316S_Ini>
 8000ac4:	2120      	movs	r1, #32
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <IndicatorPanel_Ini+0x28>)
 8000ac8:	f000 fc1a 	bl	8001300 <STLED316S_Ini>
 8000acc:	2101      	movs	r1, #1
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <IndicatorPanel_Ini+0x2c>)
 8000ad0:	f000 fc16 	bl	8001300 <STLED316S_Ini>
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <IndicatorPanel_Ini+0x30>)
 8000ad8:	f000 fc12 	bl	8001300 <STLED316S_Ini>
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40011000 	.word	0x40011000
 8000ae4:	40010c00 	.word	0x40010c00
 8000ae8:	40010800 	.word	0x40010800

08000aec <IndicatorPanel_SetValue>:
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	2300      	movs	r3, #0
 8000af6:	73bb      	strb	r3, [r7, #14]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	494e      	ldr	r1, [pc, #312]	; (8000c38 <IndicatorPanel_SetValue+0x14c>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f8d8 	bl	8000cb4 <separate>
 8000b04:	4603      	mov	r3, r0
 8000b06:	73fb      	strb	r3, [r7, #15]
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	494b      	ldr	r1, [pc, #300]	; (8000c38 <IndicatorPanel_SetValue+0x14c>)
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 f915 	bl	8000d3c <IndicatorPanel_offset_4dig>
 8000b12:	2310      	movs	r3, #16
 8000b14:	4a49      	ldr	r2, [pc, #292]	; (8000c3c <IndicatorPanel_SetValue+0x150>)
 8000b16:	2104      	movs	r1, #4
 8000b18:	4847      	ldr	r0, [pc, #284]	; (8000c38 <IndicatorPanel_SetValue+0x14c>)
 8000b1a:	f000 fc25 	bl	8001368 <STLED316S_OutData>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	885b      	ldrh	r3, [r3, #2]
 8000b22:	4945      	ldr	r1, [pc, #276]	; (8000c38 <IndicatorPanel_SetValue+0x14c>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f8c5 	bl	8000cb4 <separate>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	73fb      	strb	r3, [r7, #15]
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	4941      	ldr	r1, [pc, #260]	; (8000c38 <IndicatorPanel_SetValue+0x14c>)
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f902 	bl	8000d3c <IndicatorPanel_offset_4dig>
 8000b38:	2320      	movs	r3, #32
 8000b3a:	4a40      	ldr	r2, [pc, #256]	; (8000c3c <IndicatorPanel_SetValue+0x150>)
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	483e      	ldr	r0, [pc, #248]	; (8000c38 <IndicatorPanel_SetValue+0x14c>)
 8000b40:	f000 fc12 	bl	8001368 <STLED316S_OutData>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	791b      	ldrb	r3, [r3, #4]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	493b      	ldr	r1, [pc, #236]	; (8000c38 <IndicatorPanel_SetValue+0x14c>)
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 f8b1 	bl	8000cb4 <separate>
 8000b52:	4603      	mov	r3, r0
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	4937      	ldr	r1, [pc, #220]	; (8000c38 <IndicatorPanel_SetValue+0x14c>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f940 	bl	8000de0 <IndicatorPanel_offset_2dig>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	795b      	ldrb	r3, [r3, #5]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4936      	ldr	r1, [pc, #216]	; (8000c40 <IndicatorPanel_SetValue+0x154>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f8a3 	bl	8000cb4 <separate>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
 8000b74:	4932      	ldr	r1, [pc, #200]	; (8000c40 <IndicatorPanel_SetValue+0x154>)
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f932 	bl	8000de0 <IndicatorPanel_offset_2dig>
 8000b7c:	2340      	movs	r3, #64	; 0x40
 8000b7e:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <IndicatorPanel_SetValue+0x158>)
 8000b80:	2104      	movs	r1, #4
 8000b82:	482d      	ldr	r0, [pc, #180]	; (8000c38 <IndicatorPanel_SetValue+0x14c>)
 8000b84:	f000 fbf0 	bl	8001368 <STLED316S_OutData>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	88db      	ldrh	r3, [r3, #6]
 8000b8c:	492a      	ldr	r1, [pc, #168]	; (8000c38 <IndicatorPanel_SetValue+0x14c>)
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f890 	bl	8000cb4 <separate>
 8000b94:	4603      	mov	r3, r0
 8000b96:	73fb      	strb	r3, [r7, #15]
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	4927      	ldr	r1, [pc, #156]	; (8000c38 <IndicatorPanel_SetValue+0x14c>)
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f93a 	bl	8000e16 <IndicatorPanel_offset_3dig>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	891b      	ldrh	r3, [r3, #8]
 8000ba6:	4928      	ldr	r1, [pc, #160]	; (8000c48 <IndicatorPanel_SetValue+0x15c>)
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 f883 	bl	8000cb4 <separate>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	4924      	ldr	r1, [pc, #144]	; (8000c48 <IndicatorPanel_SetValue+0x15c>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f92d 	bl	8000e16 <IndicatorPanel_offset_3dig>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	4a23      	ldr	r2, [pc, #140]	; (8000c4c <IndicatorPanel_SetValue+0x160>)
 8000bc0:	2106      	movs	r1, #6
 8000bc2:	481d      	ldr	r0, [pc, #116]	; (8000c38 <IndicatorPanel_SetValue+0x14c>)
 8000bc4:	f000 fbd0 	bl	8001368 <STLED316S_OutData>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7bdb      	ldrb	r3, [r3, #15]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d004      	beq.n	8000bde <IndicatorPanel_SetValue+0xf2>
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	73bb      	strb	r3, [r7, #14]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7bdb      	ldrb	r3, [r3, #15]
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d004      	beq.n	8000bf4 <IndicatorPanel_SetValue+0x108>
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	f043 0320 	orr.w	r3, r3, #32
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	73bb      	strb	r3, [r7, #14]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7bdb      	ldrb	r3, [r3, #15]
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d004      	beq.n	8000c0a <IndicatorPanel_SetValue+0x11e>
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	73bb      	strb	r3, [r7, #14]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7bdb      	ldrb	r3, [r3, #15]
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d004      	beq.n	8000c20 <IndicatorPanel_SetValue+0x134>
 8000c16:	7bbb      	ldrb	r3, [r7, #14]
 8000c18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	73bb      	strb	r3, [r7, #14]
 8000c20:	f107 000e 	add.w	r0, r7, #14
 8000c24:	2310      	movs	r3, #16
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <IndicatorPanel_SetValue+0x150>)
 8000c28:	2102      	movs	r1, #2
 8000c2a:	f000 fbfb 	bl	8001424 <STLED316S_Direct_Single_Out>
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200045c8 	.word	0x200045c8
 8000c3c:	40011000 	.word	0x40011000
 8000c40:	200045ca 	.word	0x200045ca
 8000c44:	40010800 	.word	0x40010800
 8000c48:	200045cb 	.word	0x200045cb
 8000c4c:	40010c00 	.word	0x40010c00

08000c50 <IndicatorPanel_SetBrightness>:
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7a9b      	ldrb	r3, [r3, #10]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d902      	bls.n	8000c66 <IndicatorPanel_SetBrightness+0x16>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2207      	movs	r2, #7
 8000c64:	729a      	strb	r2, [r3, #10]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7a9b      	ldrb	r3, [r3, #10]
 8000c6a:	2210      	movs	r2, #16
 8000c6c:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <IndicatorPanel_SetBrightness+0x58>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 fc28 	bl	80014c4 <STLED316S_SetBrightness>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7a9b      	ldrb	r3, [r3, #10]
 8000c78:	2220      	movs	r2, #32
 8000c7a:	490b      	ldr	r1, [pc, #44]	; (8000ca8 <IndicatorPanel_SetBrightness+0x58>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fc21 	bl	80014c4 <STLED316S_SetBrightness>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7a9b      	ldrb	r3, [r3, #10]
 8000c86:	2201      	movs	r2, #1
 8000c88:	4908      	ldr	r1, [pc, #32]	; (8000cac <IndicatorPanel_SetBrightness+0x5c>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fc1a 	bl	80014c4 <STLED316S_SetBrightness>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7a9b      	ldrb	r3, [r3, #10]
 8000c94:	2240      	movs	r2, #64	; 0x40
 8000c96:	4906      	ldr	r1, [pc, #24]	; (8000cb0 <IndicatorPanel_SetBrightness+0x60>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fc13 	bl	80014c4 <STLED316S_SetBrightness>
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40011000 	.word	0x40011000
 8000cac:	40010c00 	.word	0x40010c00
 8000cb0:	40010800 	.word	0x40010800

08000cb4 <separate>:
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	80fb      	strh	r3, [r7, #6]
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	e00a      	b.n	8000ce0 <separate+0x2c>
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <separate+0x80>)
 8000cce:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd2:	1092      	asrs	r2, r2, #2
 8000cd4:	17db      	asrs	r3, r3, #31
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f1      	bne.n	8000cca <separate+0x16>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	e018      	b.n	8000d20 <separate+0x6c>
 8000cee:	88fa      	ldrh	r2, [r7, #6]
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <separate+0x84>)
 8000cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8000cf6:	08d9      	lsrs	r1, r3, #3
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	b299      	uxth	r1, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	4413      	add	r3, r2
 8000d0a:	b2ca      	uxtb	r2, r1
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <separate+0x84>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	08db      	lsrs	r3, r3, #3
 8000d18:	80fb      	strh	r3, [r7, #6]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	dae3      	bge.n	8000cee <separate+0x3a>
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	66666667 	.word	0x66666667
 8000d38:	cccccccd 	.word	0xcccccccd

08000d3c <IndicatorPanel_offset_4dig>:
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d841      	bhi.n	8000dd4 <IndicatorPanel_offset_4dig+0x98>
 8000d50:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <IndicatorPanel_offset_4dig+0x1c>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d69 	.word	0x08000d69
 8000d5c:	08000d8b 	.word	0x08000d8b
 8000d60:	08000daf 	.word	0x08000daf
 8000d64:	08000dd5 	.word	0x08000dd5
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	3303      	adds	r3, #3
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	7812      	ldrb	r2, [r2, #0]
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	3302      	adds	r3, #2
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e025      	b.n	8000dd6 <IndicatorPanel_offset_4dig+0x9a>
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	3303      	adds	r3, #3
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	7852      	ldrb	r2, [r2, #1]
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	3302      	adds	r3, #2
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	7812      	ldrb	r2, [r2, #0]
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	e013      	b.n	8000dd6 <IndicatorPanel_offset_4dig+0x9a>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	3303      	adds	r3, #3
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	7892      	ldrb	r2, [r2, #2]
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	3302      	adds	r3, #2
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	7852      	ldrb	r2, [r2, #1]
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	e000      	b.n	8000dd6 <IndicatorPanel_offset_4dig+0x9a>
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <IndicatorPanel_offset_2dig>:
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d002      	beq.n	8000df8 <IndicatorPanel_offset_2dig+0x18>
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d009      	beq.n	8000e0a <IndicatorPanel_offset_2dig+0x2a>
 8000df6:	e009      	b.n	8000e0c <IndicatorPanel_offset_2dig+0x2c>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	7812      	ldrb	r2, [r2, #0]
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	e000      	b.n	8000e0c <IndicatorPanel_offset_2dig+0x2c>
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <IndicatorPanel_offset_3dig>:
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	6039      	str	r1, [r7, #0]
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d021      	beq.n	8000e6c <IndicatorPanel_offset_3dig+0x56>
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	dc21      	bgt.n	8000e70 <IndicatorPanel_offset_3dig+0x5a>
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d002      	beq.n	8000e36 <IndicatorPanel_offset_3dig+0x20>
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d00d      	beq.n	8000e50 <IndicatorPanel_offset_3dig+0x3a>
 8000e34:	e01c      	b.n	8000e70 <IndicatorPanel_offset_3dig+0x5a>
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	3302      	adds	r3, #2
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	7812      	ldrb	r2, [r2, #0]
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e010      	b.n	8000e72 <IndicatorPanel_offset_3dig+0x5c>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	3302      	adds	r3, #2
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	7852      	ldrb	r2, [r2, #1]
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	701a      	strb	r2, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e002      	b.n	8000e72 <IndicatorPanel_offset_3dig+0x5c>
 8000e6c:	bf00      	nop
 8000e6e:	e000      	b.n	8000e72 <IndicatorPanel_offset_3dig+0x5c>
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <Carriage_Move>:
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af04      	add	r7, sp, #16
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
 8000e86:	460b      	mov	r3, r1
 8000e88:	717b      	strb	r3, [r7, #5]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	713b      	strb	r3, [r7, #4]
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <Carriage_Move+0x7c>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fb1a 	bl	80004d4 <__aeabi_i2d>
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <Carriage_Move+0x80>)
 8000ea6:	f7ff fb7f 	bl	80005a8 <__aeabi_dmul>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <Carriage_Move+0x84>)
 8000eb8:	f7ff fca0 	bl	80007fc <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fd82 	bl	80009cc <__aeabi_d2uiz>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	81fb      	strh	r3, [r7, #14]
 8000ecc:	793b      	ldrb	r3, [r7, #4]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d10d      	bne.n	8000eee <Carriage_Move+0x72>
 8000ed2:	7979      	ldrb	r1, [r7, #5]
 8000ed4:	89f8      	ldrh	r0, [r7, #14]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9302      	str	r3, [sp, #8]
 8000eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <Carriage_Move+0x88>)
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <Carriage_Move+0x8c>)
 8000eea:	f7ff fda7 	bl	8000a3c <MicrostepDriver_Run>
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	aaaaaaab 	.word	0xaaaaaaab
 8000efc:	40690000 	.word	0x40690000
 8000f00:	404e0000 	.word	0x404e0000
 8000f04:	40011000 	.word	0x40011000
 8000f08:	40010800 	.word	0x40010800

08000f0c <PCB_KeyScan>:
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	2240      	movs	r2, #64	; 0x40
 8000f12:	4905      	ldr	r1, [pc, #20]	; (8000f28 <PCB_KeyScan+0x1c>)
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <PCB_KeyScan+0x20>)
 8000f16:	f000 fb2f 	bl	8001578 <STLED316S_ReciveData>
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4904      	ldr	r1, [pc, #16]	; (8000f30 <PCB_KeyScan+0x24>)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <PCB_KeyScan+0x28>)
 8000f20:	f000 fb2a 	bl	8001578 <STLED316S_ReciveData>
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40010800 	.word	0x40010800
 8000f2c:	20003d59 	.word	0x20003d59
 8000f30:	40010c00 	.word	0x40010c00
 8000f34:	20003d5b 	.word	0x20003d5b

08000f38 <PCB_InputsScan>:
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	482e      	ldr	r0, [pc, #184]	; (8000ff8 <PCB_InputsScan+0xc0>)
 8000f40:	f003 fad0 	bl	80044e4 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00c      	beq.n	8000f64 <PCB_InputsScan+0x2c>
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <PCB_InputsScan+0xc4>)
 8000f4c:	7c1b      	ldrb	r3, [r3, #16]
 8000f4e:	f043 0320 	orr.w	r3, r3, #32
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <PCB_InputsScan+0xc4>)
 8000f56:	741a      	strb	r2, [r3, #16]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	4828      	ldr	r0, [pc, #160]	; (8001000 <PCB_InputsScan+0xc8>)
 8000f5e:	f003 fad8 	bl	8004512 <HAL_GPIO_WritePin>
 8000f62:	e00b      	b.n	8000f7c <PCB_InputsScan+0x44>
 8000f64:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <PCB_InputsScan+0xc4>)
 8000f66:	7c1b      	ldrb	r3, [r3, #16]
 8000f68:	f023 0320 	bic.w	r3, r3, #32
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <PCB_InputsScan+0xc4>)
 8000f70:	741a      	strb	r2, [r3, #16]
 8000f72:	2200      	movs	r2, #0
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	4822      	ldr	r0, [pc, #136]	; (8001000 <PCB_InputsScan+0xc8>)
<<<<<<< HEAD
 8000f78:	f003 facb 	bl	8004512 <HAL_GPIO_WritePin>
	}

	if (HAL_GPIO_ReadPin(iPedal_R_GPIO_Port, iPedal_R_Pin)) // Если Нажата педаль для зажима правой части заготовки, то установить бит, иначе сбросить
=======
 8000f78:	f003 facd 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	481e      	ldr	r0, [pc, #120]	; (8000ff8 <PCB_InputsScan+0xc0>)
 8000f80:	f003 fab0 	bl	80044e4 <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00c      	beq.n	8000fa4 <PCB_InputsScan+0x6c>
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <PCB_InputsScan+0xc4>)
 8000f8c:	7c1b      	ldrb	r3, [r3, #16]
 8000f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <PCB_InputsScan+0xc4>)
 8000f96:	741a      	strb	r2, [r3, #16]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2140      	movs	r1, #64	; 0x40
 8000f9c:	4818      	ldr	r0, [pc, #96]	; (8001000 <PCB_InputsScan+0xc8>)
 8000f9e:	f003 fab8 	bl	8004512 <HAL_GPIO_WritePin>
 8000fa2:	e00b      	b.n	8000fbc <PCB_InputsScan+0x84>
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <PCB_InputsScan+0xc4>)
 8000fa6:	7c1b      	ldrb	r3, [r3, #16]
 8000fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <PCB_InputsScan+0xc4>)
 8000fb0:	741a      	strb	r2, [r3, #16]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2140      	movs	r1, #64	; 0x40
 8000fb6:	4812      	ldr	r0, [pc, #72]	; (8001000 <PCB_InputsScan+0xc8>)
<<<<<<< HEAD
 8000fb8:	f003 faab 	bl	8004512 <HAL_GPIO_WritePin>
	}

	if (HAL_GPIO_ReadPin(iBackDoor_GPIO_Port, iBackDoor_Pin)) // Если задняя дверца закрыта, то установить бит, иначе сбросить
=======
 8000fb8:	f003 faad 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8000fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc0:	480f      	ldr	r0, [pc, #60]	; (8001000 <PCB_InputsScan+0xc8>)
 8000fc2:	f003 fa8f 	bl	80044e4 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00c      	beq.n	8000fe6 <PCB_InputsScan+0xae>
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <PCB_InputsScan+0xc4>)
 8000fce:	7c1b      	ldrb	r3, [r3, #16]
 8000fd0:	f043 0310 	orr.w	r3, r3, #16
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <PCB_InputsScan+0xc4>)
 8000fd8:	741a      	strb	r2, [r3, #16]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2106      	movs	r1, #6
 8000fde:	4809      	ldr	r0, [pc, #36]	; (8001004 <PCB_InputsScan+0xcc>)
<<<<<<< HEAD
 8000fe0:	f003 fa97 	bl	8004512 <HAL_GPIO_WritePin>
	}
	else
	{
		WelderUnit.State &= ~WELDER_STATE_BACK_DOOR_CLOSE;
	}
}
=======
 8000fe0:	f003 fa99 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8000fe4:	e006      	b.n	8000ff4 <PCB_InputsScan+0xbc>
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <PCB_InputsScan+0xc4>)
 8000fe8:	7c1b      	ldrb	r3, [r3, #16]
 8000fea:	f023 0310 	bic.w	r3, r3, #16
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <PCB_InputsScan+0xc4>)
 8000ff2:	741a      	strb	r2, [r3, #16]
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40010800 	.word	0x40010800
 8000ffc:	20003d3c 	.word	0x20003d3c
 8001000:	40010c00 	.word	0x40010c00
 8001004:	40011000 	.word	0x40011000

08001008 <HAL_GPIO_EXTI_Callback>:
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
 8001012:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001016:	4822      	ldr	r0, [pc, #136]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x98>)
<<<<<<< HEAD
 8001018:	f003 fa64 	bl	80044e4 <HAL_GPIO_ReadPin>

	}



	if (HAL_GPIO_ReadPin(iFB_STEP1_GPIO_Port, iFB_STEP1_Pin) == GPIO_PIN_SET)
=======
 8001018:	f003 fa66 	bl	80044e8 <HAL_GPIO_ReadPin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800101c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001020:	4820      	ldr	r0, [pc, #128]	; (80010a4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001022:	f003 fa5f 	bl	80044e4 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d10e      	bne.n	800104a <HAL_GPIO_EXTI_Callback+0x42>
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <HAL_GPIO_EXTI_Callback+0xa0>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <HAL_GPIO_EXTI_Callback+0xa4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	491c      	ldr	r1, [pc, #112]	; (80010a8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001038:	4618      	mov	r0, r3
<<<<<<< HEAD
 800103a:	f006 f8b3 	bl	80071a4 <xQueueGiveFromISR>


		if( xHigherPriorityTaskWoken == pdTRUE )
=======
 800103a:	f006 f8b5 	bl	80071a8 <xQueueGiveFromISR>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <HAL_GPIO_EXTI_Callback+0x42>
<<<<<<< HEAD
				вместе с портом FreeRTOS. */
			 //portSWITCH_CONTEXT();
			//vTaskSwitchContext();
			//portYIELD_FROM_ISR(NULL);

			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 8001046:	f007 f8f7 	bl	8008238 <vTaskMissedYield>

		  }
	}

	if (HAL_GPIO_ReadPin(iCarriageStop_GPIO_Port, iCarriageStop_Pin) == GPIO_PIN_SET)
=======
 8001046:	f007 f8f9 	bl	800823c <vTaskMissedYield>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800104a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104e:	4814      	ldr	r0, [pc, #80]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001050:	f003 fa48 	bl	80044e4 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d116      	bne.n	8001088 <HAL_GPIO_EXTI_Callback+0x80>
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4912      	ldr	r1, [pc, #72]	; (80010b0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001066:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001068:	f006 f89c 	bl	80071a4 <xQueueGiveFromISR>

			  WelderUnit.State |= 1<<3; // 3 бит - Состояние вывода iCarriageStop, 1 - коневик нажат кареткой
=======
 8001068:	f006 f89e 	bl	80071a8 <xQueueGiveFromISR>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800106e:	7c1b      	ldrb	r3, [r3, #16]
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001078:	741a      	strb	r2, [r3, #16]
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d109      	bne.n	8001096 <HAL_GPIO_EXTI_Callback+0x8e>
<<<<<<< HEAD
		  {
			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 8001082:	f007 f8d9 	bl	8008238 <vTaskMissedYield>
	{
		WelderUnit.State &= ~0x08; //// 3 бит - Состояние вывода iCarriageStop 0 - коневик отжат.

	}

}
=======
 8001082:	f007 f8db 	bl	800823c <vTaskMissedYield>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001086:	e006      	b.n	8001096 <HAL_GPIO_EXTI_Callback+0x8e>
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800108a:	7c1b      	ldrb	r3, [r3, #16]
 800108c:	f023 0308 	bic.w	r3, r3, #8
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001094:	741a      	strb	r2, [r3, #16]
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	40011000 	.word	0x40011000
 80010a8:	2000002c 	.word	0x2000002c
 80010ac:	20003d60 	.word	0x20003d60
 80010b0:	20000030 	.word	0x20000030
 80010b4:	200045c4 	.word	0x200045c4
 80010b8:	20003d3c 	.word	0x20003d3c

080010bc <SaveProgramToFlash2>:
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	2300      	movs	r3, #0
 80010c4:	80bb      	strh	r3, [r7, #4]
 80010c6:	4b3c      	ldr	r3, [pc, #240]	; (80011b8 <SaveProgramToFlash2+0xfc>)
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	80fb      	strh	r3, [r7, #6]
 80010ce:	e010      	b.n	80010f2 <SaveProgramToFlash2+0x36>
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	88f9      	ldrh	r1, [r7, #6]
 80010dc:	461a      	mov	r2, r3
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	4836      	ldr	r0, [pc, #216]	; (80011bc <SaveProgramToFlash2+0x100>)
 80010e4:	00c9      	lsls	r1, r1, #3
 80010e6:	4401      	add	r1, r0
 80010e8:	e9c1 2300 	strd	r2, r3, [r1]
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	3301      	adds	r3, #1
 80010f0:	80fb      	strh	r3, [r7, #6]
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	2bff      	cmp	r3, #255	; 0xff
 80010f6:	d9eb      	bls.n	80010d0 <SaveProgramToFlash2+0x14>
 80010f8:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <SaveProgramToFlash2+0x104>)
 80010fa:	899b      	ldrh	r3, [r3, #12]
 80010fc:	461a      	mov	r2, r3
 80010fe:	0052      	lsls	r2, r2, #1
 8001100:	4413      	add	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	80bb      	strh	r3, [r7, #4]
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <SaveProgramToFlash2+0x104>)
 8001108:	899b      	ldrh	r3, [r3, #12]
 800110a:	88b9      	ldrh	r1, [r7, #4]
 800110c:	b29a      	uxth	r2, r3
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	482a      	ldr	r0, [pc, #168]	; (80011bc <SaveProgramToFlash2+0x100>)
 8001114:	00c9      	lsls	r1, r1, #3
 8001116:	4401      	add	r1, r0
 8001118:	e9c1 2300 	strd	r2, r3, [r1]
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <SaveProgramToFlash2+0x104>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	88ba      	ldrh	r2, [r7, #4]
 8001122:	1c51      	adds	r1, r2, #1
 8001124:	b29a      	uxth	r2, r3
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	4824      	ldr	r0, [pc, #144]	; (80011bc <SaveProgramToFlash2+0x100>)
 800112c:	00c9      	lsls	r1, r1, #3
 800112e:	4401      	add	r1, r0
 8001130:	e9c1 2300 	strd	r2, r3, [r1]
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <SaveProgramToFlash2+0x104>)
 8001136:	885b      	ldrh	r3, [r3, #2]
 8001138:	88ba      	ldrh	r2, [r7, #4]
 800113a:	1c91      	adds	r1, r2, #2
 800113c:	b29a      	uxth	r2, r3
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	481e      	ldr	r0, [pc, #120]	; (80011bc <SaveProgramToFlash2+0x100>)
 8001144:	00c9      	lsls	r1, r1, #3
 8001146:	4401      	add	r1, r0
 8001148:	e9c1 2300 	strd	r2, r3, [r1]
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <SaveProgramToFlash2+0x104>)
 800114e:	88db      	ldrh	r3, [r3, #6]
 8001150:	88ba      	ldrh	r2, [r7, #4]
 8001152:	1cd1      	adds	r1, r2, #3
 8001154:	b29a      	uxth	r2, r3
 8001156:	f04f 0300 	mov.w	r3, #0
 800115a:	4818      	ldr	r0, [pc, #96]	; (80011bc <SaveProgramToFlash2+0x100>)
 800115c:	00c9      	lsls	r1, r1, #3
 800115e:	4401      	add	r1, r0
 8001160:	e9c1 2300 	strd	r2, r3, [r1]
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <SaveProgramToFlash2+0x104>)
 8001166:	7a9b      	ldrb	r3, [r3, #10]
 8001168:	88ba      	ldrh	r2, [r7, #4]
 800116a:	1d11      	adds	r1, r2, #4
 800116c:	b2da      	uxtb	r2, r3
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	4812      	ldr	r0, [pc, #72]	; (80011bc <SaveProgramToFlash2+0x100>)
 8001174:	00c9      	lsls	r1, r1, #3
 8001176:	4401      	add	r1, r0
 8001178:	e9c1 2300 	strd	r2, r3, [r1]
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <SaveProgramToFlash2+0x104>)
 800117e:	7adb      	ldrb	r3, [r3, #11]
 8001180:	88ba      	ldrh	r2, [r7, #4]
 8001182:	1d51      	adds	r1, r2, #5
 8001184:	b2da      	uxtb	r2, r3
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	480c      	ldr	r0, [pc, #48]	; (80011bc <SaveProgramToFlash2+0x100>)
 800118c:	00c9      	lsls	r1, r1, #3
 800118e:	4401      	add	r1, r0
 8001190:	e9c1 2300 	strd	r2, r3, [r1]
 8001194:	2140      	movs	r1, #64	; 0x40
 8001196:	4809      	ldr	r0, [pc, #36]	; (80011bc <SaveProgramToFlash2+0x100>)
 8001198:	f000 fa6c 	bl	8001674 <STM32_WriteToFlash3>
 800119c:	88bb      	ldrh	r3, [r7, #4]
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011a8:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	0803f800 	.word	0x0803f800
 80011bc:	20003d70 	.word	0x20003d70
 80011c0:	20003d3c 	.word	0x20003d3c

080011c4 <ReadProgramFromFlash2>:
 80011c4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	80bb      	strh	r3, [r7, #4]
 80011d0:	4b48      	ldr	r3, [pc, #288]	; (80012f4 <ReadProgramFromFlash2+0x130>)
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	2300      	movs	r3, #0
 80011d6:	80fb      	strh	r3, [r7, #6]
 80011d8:	e010      	b.n	80011fc <ReadProgramFromFlash2+0x38>
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	88f9      	ldrh	r1, [r7, #6]
 80011e6:	461a      	mov	r2, r3
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	4842      	ldr	r0, [pc, #264]	; (80012f8 <ReadProgramFromFlash2+0x134>)
 80011ee:	00c9      	lsls	r1, r1, #3
 80011f0:	4401      	add	r1, r0
 80011f2:	e9c1 2300 	strd	r2, r3, [r1]
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	3301      	adds	r3, #1
 80011fa:	80fb      	strh	r3, [r7, #6]
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	2bff      	cmp	r3, #255	; 0xff
 8001200:	d9eb      	bls.n	80011da <ReadProgramFromFlash2+0x16>
 8001202:	4b3e      	ldr	r3, [pc, #248]	; (80012fc <ReadProgramFromFlash2+0x138>)
 8001204:	899b      	ldrh	r3, [r3, #12]
 8001206:	461a      	mov	r2, r3
 8001208:	0052      	lsls	r2, r2, #1
 800120a:	4413      	add	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	80bb      	strh	r3, [r7, #4]
 8001210:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <ReadProgramFromFlash2+0x138>)
 8001212:	899b      	ldrh	r3, [r3, #12]
 8001214:	b298      	uxth	r0, r3
 8001216:	f04f 0100 	mov.w	r1, #0
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	4a36      	ldr	r2, [pc, #216]	; (80012f8 <ReadProgramFromFlash2+0x134>)
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4413      	add	r3, r2
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	ebb0 0802 	subs.w	r8, r0, r2
 800122a:	eb61 0903 	sbc.w	r9, r1, r3
 800122e:	f1b9 0f00 	cmp.w	r9, #0
 8001232:	bf08      	it	eq
 8001234:	f1b8 0f02 	cmpeq.w	r8, #2
 8001238:	d311      	bcc.n	800125e <ReadProgramFromFlash2+0x9a>
 800123a:	88bb      	ldrh	r3, [r7, #4]
 800123c:	4a2e      	ldr	r2, [pc, #184]	; (80012f8 <ReadProgramFromFlash2+0x134>)
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4413      	add	r3, r2
 8001242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <ReadProgramFromFlash2+0x138>)
 8001248:	899b      	ldrh	r3, [r3, #12]
 800124a:	b29a      	uxth	r2, r3
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	1a84      	subs	r4, r0, r2
 8001252:	eb61 0503 	sbc.w	r5, r1, r3
 8001256:	2d00      	cmp	r5, #0
 8001258:	bf08      	it	eq
 800125a:	2c02      	cmpeq	r4, #2
 800125c:	d244      	bcs.n	80012e8 <ReadProgramFromFlash2+0x124>
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <ReadProgramFromFlash2+0x134>)
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4413      	add	r3, r2
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf08      	it	eq
 800126e:	2a47      	cmpeq	r2, #71	; 0x47
 8001270:	d23a      	bcs.n	80012e8 <ReadProgramFromFlash2+0x124>
 8001272:	88bb      	ldrh	r3, [r7, #4]
 8001274:	4a20      	ldr	r2, [pc, #128]	; (80012f8 <ReadProgramFromFlash2+0x134>)
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4413      	add	r3, r2
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	b292      	uxth	r2, r2
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <ReadProgramFromFlash2+0x138>)
 8001282:	819a      	strh	r2, [r3, #12]
 8001284:	88bb      	ldrh	r3, [r7, #4]
 8001286:	3301      	adds	r3, #1
 8001288:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <ReadProgramFromFlash2+0x134>)
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4413      	add	r3, r2
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	b292      	uxth	r2, r2
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <ReadProgramFromFlash2+0x138>)
 8001296:	801a      	strh	r2, [r3, #0]
 8001298:	88bb      	ldrh	r3, [r7, #4]
 800129a:	3302      	adds	r3, #2
 800129c:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <ReadProgramFromFlash2+0x134>)
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4413      	add	r3, r2
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	b292      	uxth	r2, r2
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <ReadProgramFromFlash2+0x138>)
 80012aa:	805a      	strh	r2, [r3, #2]
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	3303      	adds	r3, #3
 80012b0:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <ReadProgramFromFlash2+0x134>)
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4413      	add	r3, r2
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	b292      	uxth	r2, r2
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <ReadProgramFromFlash2+0x138>)
 80012be:	80da      	strh	r2, [r3, #6]
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	3304      	adds	r3, #4
 80012c4:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <ReadProgramFromFlash2+0x134>)
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4413      	add	r3, r2
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <ReadProgramFromFlash2+0x138>)
 80012d2:	729a      	strb	r2, [r3, #10]
 80012d4:	88bb      	ldrh	r3, [r7, #4]
 80012d6:	3305      	adds	r3, #5
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <ReadProgramFromFlash2+0x134>)
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4413      	add	r3, r2
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <ReadProgramFromFlash2+0x138>)
 80012e6:	72da      	strb	r2, [r3, #11]
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80012f2:	4770      	bx	lr
 80012f4:	0803f800 	.word	0x0803f800
 80012f8:	20003d70 	.word	0x20003d70
 80012fc:	20003d3c 	.word	0x20003d3c

08001300 <STLED316S_Ini>:
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	461a      	mov	r2, r3
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	2007      	movs	r0, #7
 8001314:	f000 f8d6 	bl	80014c4 <STLED316S_SetBrightness>
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <STLED316S_Ini+0x60>)
 800131a:	220d      	movs	r2, #13
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	2200      	movs	r2, #0
 8001322:	4619      	mov	r1, r3
 8001324:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 8001326:	f003 f8f4 	bl	8004512 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
=======
 8001326:	f003 f8f6 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800132a:	2005      	movs	r0, #5
 800132c:	f000 f984 	bl	8001638 <DelayMicro>
 8001330:	f242 7310 	movw	r3, #10000	; 0x2710
 8001334:	2201      	movs	r2, #1
 8001336:	490a      	ldr	r1, [pc, #40]	; (8001360 <STLED316S_Ini+0x60>)
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <STLED316S_Ini+0x64>)
<<<<<<< HEAD
 800133a:	f003 fd87 	bl	8004e4c <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
=======
 800133a:	f003 fd89 	bl	8004e50 <HAL_SPI_Transmit>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800133e:	2005      	movs	r0, #5
 8001340:	f000 f97a 	bl	8001638 <DelayMicro>
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	2201      	movs	r2, #1
 8001348:	4619      	mov	r1, r3
 800134a:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 800134c:	f003 f8e1 	bl	8004512 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
=======
 800134c:	f003 f8e3 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001350:	2005      	movs	r0, #5
 8001352:	f000 f971 	bl	8001638 <DelayMicro>
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20004598 	.word	0x20004598
 8001364:	2000461c 	.word	0x2000461c

08001368 <STLED316S_OutData>:
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	461a      	mov	r2, r3
 8001374:	460b      	mov	r3, r1
 8001376:	72fb      	strb	r3, [r7, #11]
 8001378:	4613      	mov	r3, r2
 800137a:	813b      	strh	r3, [r7, #8]
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <STLED316S_OutData+0xb0>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <STLED316S_OutData+0xb0>)
 8001384:	2200      	movs	r2, #0
 8001386:	705a      	strb	r2, [r3, #1]
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <STLED316S_OutData+0xb0>)
 800138a:	2200      	movs	r2, #0
 800138c:	709a      	strb	r2, [r3, #2]
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <STLED316S_OutData+0xb0>)
 8001390:	2200      	movs	r2, #0
 8001392:	70da      	strb	r2, [r3, #3]
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <STLED316S_OutData+0xb0>)
 8001396:	2200      	movs	r2, #0
 8001398:	711a      	strb	r2, [r3, #4]
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <STLED316S_OutData+0xb0>)
 800139c:	2200      	movs	r2, #0
 800139e:	715a      	strb	r2, [r3, #5]
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <STLED316S_OutData+0xb0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	719a      	strb	r2, [r3, #6]
 80013a6:	2300      	movs	r3, #0
 80013a8:	75fb      	strb	r3, [r7, #23]
 80013aa:	e00d      	b.n	80013c8 <STLED316S_OutData+0x60>
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	3301      	adds	r3, #1
 80013ba:	4a18      	ldr	r2, [pc, #96]	; (800141c <STLED316S_OutData+0xb4>)
 80013bc:	5c51      	ldrb	r1, [r2, r1]
 80013be:	4a16      	ldr	r2, [pc, #88]	; (8001418 <STLED316S_OutData+0xb0>)
 80013c0:	54d1      	strb	r1, [r2, r3]
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	3301      	adds	r3, #1
 80013c6:	75fb      	strb	r3, [r7, #23]
 80013c8:	7dfa      	ldrb	r2, [r7, #23]
 80013ca:	7afb      	ldrb	r3, [r7, #11]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d3ed      	bcc.n	80013ac <STLED316S_OutData+0x44>
 80013d0:	893b      	ldrh	r3, [r7, #8]
 80013d2:	2200      	movs	r2, #0
 80013d4:	4619      	mov	r1, r3
 80013d6:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 80013d8:	f003 f89b 	bl	8004512 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
=======
 80013d8:	f003 f89d 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80013dc:	2005      	movs	r0, #5
 80013de:	f000 f92b 	bl	8001638 <DelayMicro>
 80013e2:	7afb      	ldrb	r3, [r7, #11]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	3301      	adds	r3, #1
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80013ee:	490a      	ldr	r1, [pc, #40]	; (8001418 <STLED316S_OutData+0xb0>)
 80013f0:	480b      	ldr	r0, [pc, #44]	; (8001420 <STLED316S_OutData+0xb8>)
<<<<<<< HEAD
 80013f2:	f003 fd2b 	bl	8004e4c <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
=======
 80013f2:	f003 fd2d 	bl	8004e50 <HAL_SPI_Transmit>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80013f6:	2005      	movs	r0, #5
 80013f8:	f000 f91e 	bl	8001638 <DelayMicro>
 80013fc:	893b      	ldrh	r3, [r7, #8]
 80013fe:	2201      	movs	r2, #1
 8001400:	4619      	mov	r1, r3
 8001402:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 8001404:	f003 f885 	bl	8004512 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
=======
 8001404:	f003 f887 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001408:	2005      	movs	r0, #5
 800140a:	f000 f915 	bl	8001638 <DelayMicro>
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20004598 	.word	0x20004598
 800141c:	08009318 	.word	0x08009318
 8001420:	2000461c 	.word	0x2000461c

08001424 <STLED316S_Direct_Single_Out>:
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	461a      	mov	r2, r3
 8001430:	460b      	mov	r3, r1
 8001432:	72fb      	strb	r3, [r7, #11]
 8001434:	4613      	mov	r3, r2
 8001436:	813b      	strh	r3, [r7, #8]
 8001438:	4b20      	ldr	r3, [pc, #128]	; (80014bc <STLED316S_Direct_Single_Out+0x98>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <STLED316S_Direct_Single_Out+0x98>)
 8001440:	2200      	movs	r2, #0
 8001442:	705a      	strb	r2, [r3, #1]
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <STLED316S_Direct_Single_Out+0x98>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	f043 0320 	orr.w	r3, r3, #32
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <STLED316S_Direct_Single_Out+0x98>)
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <STLED316S_Direct_Single_Out+0x98>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b25a      	sxtb	r2, r3
 8001458:	7afb      	ldrb	r3, [r7, #11]
 800145a:	f1c3 0306 	rsb	r3, r3, #6
 800145e:	b2db      	uxtb	r3, r3
 8001460:	b25b      	sxtb	r3, r3
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	b25b      	sxtb	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b25b      	sxtb	r3, r3
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <STLED316S_Direct_Single_Out+0x98>)
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <STLED316S_Direct_Single_Out+0x98>)
 8001478:	705a      	strb	r2, [r3, #1]
 800147a:	893b      	ldrh	r3, [r7, #8]
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 8001482:	f003 f846 	bl	8004512 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
=======
 8001482:	f003 f848 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001486:	2005      	movs	r0, #5
 8001488:	f000 f8d6 	bl	8001638 <DelayMicro>
 800148c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001490:	2202      	movs	r2, #2
 8001492:	490a      	ldr	r1, [pc, #40]	; (80014bc <STLED316S_Direct_Single_Out+0x98>)
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <STLED316S_Direct_Single_Out+0x9c>)
<<<<<<< HEAD
 8001496:	f003 fcd9 	bl	8004e4c <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
=======
 8001496:	f003 fcdb 	bl	8004e50 <HAL_SPI_Transmit>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800149a:	2005      	movs	r0, #5
 800149c:	f000 f8cc 	bl	8001638 <DelayMicro>
 80014a0:	893b      	ldrh	r3, [r7, #8]
 80014a2:	2201      	movs	r2, #1
 80014a4:	4619      	mov	r1, r3
 80014a6:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 80014a8:	f003 f833 	bl	8004512 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
=======
 80014a8:	f003 f835 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80014ac:	2005      	movs	r0, #5
 80014ae:	f000 f8c3 	bl	8001638 <DelayMicro>
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20004598 	.word	0x20004598
 80014c0:	2000461c 	.word	0x2000461c

080014c4 <STLED316S_SetBrightness>:
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	4613      	mov	r3, r2
 80014d2:	80bb      	strh	r3, [r7, #4]
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <STLED316S_SetBrightness+0xac>)
 80014d6:	2210      	movs	r2, #16
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <STLED316S_SetBrightness+0xac>)
 80014dc:	22e5      	movs	r2, #229	; 0xe5
 80014de:	705a      	strb	r2, [r3, #1]
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <STLED316S_SetBrightness+0xac>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	709a      	strb	r2, [r3, #2]
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <STLED316S_SetBrightness+0xac>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	70da      	strb	r2, [r3, #3]
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <STLED316S_SetBrightness+0xac>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	711a      	strb	r2, [r3, #4]
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	b25a      	sxtb	r2, r3
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <STLED316S_SetBrightness+0xac>)
 8001504:	709a      	strb	r2, [r3, #2]
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	b25a      	sxtb	r2, r3
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	4313      	orrs	r3, r2
 8001512:	b25b      	sxtb	r3, r3
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <STLED316S_SetBrightness+0xac>)
 8001518:	70da      	strb	r2, [r3, #3]
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	b25a      	sxtb	r2, r3
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	4313      	orrs	r3, r2
 8001526:	b25b      	sxtb	r3, r3
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <STLED316S_SetBrightness+0xac>)
 800152c:	711a      	strb	r2, [r3, #4]
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	4619      	mov	r1, r3
 8001534:	6838      	ldr	r0, [r7, #0]
<<<<<<< HEAD
 8001536:	f002 ffec 	bl	8004512 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
=======
 8001536:	f002 ffee 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800153a:	2005      	movs	r0, #5
 800153c:	f000 f87c 	bl	8001638 <DelayMicro>
 8001540:	f242 7310 	movw	r3, #10000	; 0x2710
 8001544:	2205      	movs	r2, #5
 8001546:	490a      	ldr	r1, [pc, #40]	; (8001570 <STLED316S_SetBrightness+0xac>)
 8001548:	480a      	ldr	r0, [pc, #40]	; (8001574 <STLED316S_SetBrightness+0xb0>)
<<<<<<< HEAD
 800154a:	f003 fc7f 	bl	8004e4c <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
=======
 800154a:	f003 fc81 	bl	8004e50 <HAL_SPI_Transmit>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800154e:	2005      	movs	r0, #5
 8001550:	f000 f872 	bl	8001638 <DelayMicro>
 8001554:	88bb      	ldrh	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	4619      	mov	r1, r3
 800155a:	6838      	ldr	r0, [r7, #0]
<<<<<<< HEAD
 800155c:	f002 ffd9 	bl	8004512 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
=======
 800155c:	f002 ffdb 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001560:	2005      	movs	r0, #5
 8001562:	f000 f869 	bl	8001638 <DelayMicro>
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20004598 	.word	0x20004598
 8001574:	2000461c 	.word	0x2000461c

08001578 <STLED316S_ReciveData>:
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	4613      	mov	r3, r2
 8001584:	80fb      	strh	r3, [r7, #6]
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <STLED316S_ReciveData+0xb4>)
 8001588:	2249      	movs	r2, #73	; 0x49
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	4b27      	ldr	r3, [pc, #156]	; (800162c <STLED316S_ReciveData+0xb4>)
 800158e:	2200      	movs	r2, #0
 8001590:	705a      	strb	r2, [r3, #1]
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <STLED316S_ReciveData+0xb4>)
 8001594:	2200      	movs	r2, #0
 8001596:	709a      	strb	r2, [r3, #2]
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <STLED316S_ReciveData+0xb4>)
 800159a:	2200      	movs	r2, #0
 800159c:	70da      	strb	r2, [r3, #3]
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <STLED316S_ReciveData+0xb8>)
 80015a0:	2249      	movs	r2, #73	; 0x49
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <STLED316S_ReciveData+0xb8>)
 80015a6:	2202      	movs	r2, #2
 80015a8:	705a      	strb	r2, [r3, #1]
 80015aa:	4b21      	ldr	r3, [pc, #132]	; (8001630 <STLED316S_ReciveData+0xb8>)
 80015ac:	2202      	movs	r2, #2
 80015ae:	709a      	strb	r2, [r3, #2]
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <STLED316S_ReciveData+0xb8>)
 80015b2:	2202      	movs	r2, #2
 80015b4:	70da      	strb	r2, [r3, #3]
 80015b6:	2300      	movs	r3, #0
 80015b8:	75fb      	strb	r3, [r7, #23]
 80015ba:	e006      	b.n	80015ca <STLED316S_ReciveData+0x52>
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <STLED316S_ReciveData+0xb8>)
 80015c0:	2100      	movs	r1, #0
 80015c2:	54d1      	strb	r1, [r2, r3]
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	3301      	adds	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
 80015cc:	2b07      	cmp	r3, #7
 80015ce:	d9f5      	bls.n	80015bc <STLED316S_ReciveData+0x44>
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	2200      	movs	r2, #0
 80015d4:	4619      	mov	r1, r3
 80015d6:	68b8      	ldr	r0, [r7, #8]
<<<<<<< HEAD
 80015d8:	f002 ff9b 	bl	8004512 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
=======
 80015d8:	f002 ff9d 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80015dc:	2005      	movs	r0, #5
 80015de:	f000 f82b 	bl	8001638 <DelayMicro>
 80015e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e6:	2201      	movs	r2, #1
 80015e8:	4910      	ldr	r1, [pc, #64]	; (800162c <STLED316S_ReciveData+0xb4>)
 80015ea:	4812      	ldr	r0, [pc, #72]	; (8001634 <STLED316S_ReciveData+0xbc>)
<<<<<<< HEAD
 80015ec:	f003 fc2e 	bl	8004e4c <HAL_SPI_Transmit>
	//SPI1->CR1 &= ~SPI_CR1_BIDIOE; // // Перевод SPI в режим приема
	//HAL_SPI_TransmitReceive(&hspi1, STLED_TxData, STLED_Rx, 1, 1000);
	HAL_SPI_Receive(&hspi1, STLED_Rx, 2, 1000);
=======
 80015ec:	f003 fc30 	bl	8004e50 <HAL_SPI_Transmit>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80015f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f4:	2202      	movs	r2, #2
 80015f6:	490e      	ldr	r1, [pc, #56]	; (8001630 <STLED316S_ReciveData+0xb8>)
 80015f8:	480e      	ldr	r0, [pc, #56]	; (8001634 <STLED316S_ReciveData+0xbc>)
<<<<<<< HEAD
 80015fa:	f003 fd63 	bl	80050c4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
=======
 80015fa:	f003 fd65 	bl	80050c8 <HAL_SPI_Receive>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	2201      	movs	r2, #1
 8001602:	4619      	mov	r1, r3
 8001604:	68b8      	ldr	r0, [r7, #8]
<<<<<<< HEAD
 8001606:	f002 ff84 	bl	8004512 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
=======
 8001606:	f002 ff86 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800160a:	2005      	movs	r0, #5
 800160c:	f000 f814 	bl	8001638 <DelayMicro>
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <STLED316S_ReciveData+0xb8>)
 8001612:	781a      	ldrb	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3301      	adds	r3, #1
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <STLED316S_ReciveData+0xb8>)
 800161e:	7852      	ldrb	r2, [r2, #1]
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20004598 	.word	0x20004598
 8001630:	20003d64 	.word	0x20003d64
 8001634:	2000461c 	.word	0x2000461c

08001638 <DelayMicro>:
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <DelayMicro+0x34>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <DelayMicro+0x38>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	0d5b      	lsrs	r3, r3, #21
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	fb02 f303 	mul.w	r3, r2, r3
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	bf00      	nop
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	1e5a      	subs	r2, r3, #1
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1fa      	bne.n	8001656 <DelayMicro+0x1e>
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	20000000 	.word	0x20000000
 8001670:	6b5fca6b 	.word	0x6b5fca6b

08001674 <STM32_WriteToFlash3>:
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
<<<<<<< HEAD
	   HAL_FLASH_Unlock();
 800167e:	f002 fc0d 	bl	8003e9c <HAL_FLASH_Unlock>

		FLASH_EraseInitTypeDef EraseInitStruct;
	   uint32_t PAGEError = 0;
=======
 800167e:	f002 fc0f 	bl	8003ea0 <HAL_FLASH_Unlock>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <STM32_WriteToFlash3+0x70>)
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	2301      	movs	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	f107 0208 	add.w	r2, r7, #8
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
<<<<<<< HEAD
 800169e:	f002 fce5 	bl	800406c <HAL_FLASHEx_Erase>

	   //Запись начиная с адреса 0x803F800
		 for(uint16_t i = 0; i < Len; i++)
=======
 800169e:	f002 fce7 	bl	8004070 <HAL_FLASHEx_Erase>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80016a2:	2300      	movs	r3, #0
 80016a4:	83fb      	strh	r3, [r7, #30]
 80016a6:	e012      	b.n	80016ce <STM32_WriteToFlash3+0x5a>
 80016a8:	8bfb      	ldrh	r3, [r7, #30]
 80016aa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80016ae:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4619      	mov	r1, r3
 80016b6:	8bfb      	ldrh	r3, [r7, #30]
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	2002      	movs	r0, #2
<<<<<<< HEAD
 80016c4:	f002 fb7a 	bl	8003dbc <HAL_FLASH_Program>
		 for(uint16_t i = 0; i < Len; i++)
=======
 80016c4:	f002 fb7c 	bl	8003dc0 <HAL_FLASH_Program>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80016c8:	8bfb      	ldrh	r3, [r7, #30]
 80016ca:	3301      	adds	r3, #1
 80016cc:	83fb      	strh	r3, [r7, #30]
 80016ce:	8bfb      	ldrh	r3, [r7, #30]
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d8e8      	bhi.n	80016a8 <STM32_WriteToFlash3+0x34>
<<<<<<< HEAD
		 }

		 HAL_FLASH_Lock();
 80016d6:	f002 fc07 	bl	8003ee8 <HAL_FLASH_Lock>
}
=======
 80016d6:	f002 fc09 	bl	8003eec <HAL_FLASH_Lock>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	0803f800 	.word	0x0803f800

080016e8 <freeRTOS_Tasks_Ini>:
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	2100      	movs	r1, #0
 80016f0:	2004      	movs	r0, #4
 80016f2:	f005 fc3d 	bl	8006f70 <xQueueCreateCountingSemaphore>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a4a      	ldr	r2, [pc, #296]	; (8001824 <freeRTOS_Tasks_Ini+0x13c>)
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	2203      	movs	r2, #3
 80016fe:	2100      	movs	r1, #0
 8001700:	2001      	movs	r0, #1
 8001702:	f005 fbe2 	bl	8006eca <xQueueGenericCreate>
 8001706:	4603      	mov	r3, r0
 8001708:	4a47      	ldr	r2, [pc, #284]	; (8001828 <freeRTOS_Tasks_Ini+0x140>)
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b46      	ldr	r3, [pc, #280]	; (8001828 <freeRTOS_Tasks_Ini+0x140>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <freeRTOS_Tasks_Ini+0x3a>
 8001714:	4b44      	ldr	r3, [pc, #272]	; (8001828 <freeRTOS_Tasks_Ini+0x140>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
<<<<<<< HEAD
 800171e:	f005 fc3d 	bl	8006f9c <xQueueGenericSend>

	qBeepMode = xQueueCreate(1, sizeof( uint8_t )); // Очередь для передачи режима работы бипера
=======
 800171e:	f005 fc3f 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001722:	2200      	movs	r2, #0
 8001724:	2101      	movs	r1, #1
 8001726:	2001      	movs	r0, #1
 8001728:	f005 fbcf 	bl	8006eca <xQueueGenericCreate>
 800172c:	4603      	mov	r3, r0
 800172e:	4a3f      	ldr	r2, [pc, #252]	; (800182c <freeRTOS_Tasks_Ini+0x144>)
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	2200      	movs	r2, #0
 8001734:	2101      	movs	r1, #1
 8001736:	2001      	movs	r0, #1
 8001738:	f005 fbc7 	bl	8006eca <xQueueGenericCreate>
 800173c:	4603      	mov	r3, r0
 800173e:	4a3c      	ldr	r2, [pc, #240]	; (8001830 <freeRTOS_Tasks_Ini+0x148>)
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	2200      	movs	r2, #0
 8001744:	2101      	movs	r1, #1
 8001746:	2001      	movs	r0, #1
 8001748:	f005 fbbf 	bl	8006eca <xQueueGenericCreate>
 800174c:	4603      	mov	r3, r0
 800174e:	4a39      	ldr	r2, [pc, #228]	; (8001834 <freeRTOS_Tasks_Ini+0x14c>)
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	2200      	movs	r2, #0
 8001754:	2101      	movs	r1, #1
 8001756:	2001      	movs	r0, #1
 8001758:	f005 fbb7 	bl	8006eca <xQueueGenericCreate>
 800175c:	4603      	mov	r3, r0
 800175e:	4a36      	ldr	r2, [pc, #216]	; (8001838 <freeRTOS_Tasks_Ini+0x150>)
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	2200      	movs	r2, #0
 8001764:	2101      	movs	r1, #1
 8001766:	2001      	movs	r0, #1
 8001768:	f005 fbaf 	bl	8006eca <xQueueGenericCreate>
 800176c:	4603      	mov	r3, r0
 800176e:	4a33      	ldr	r2, [pc, #204]	; (800183c <freeRTOS_Tasks_Ini+0x154>)
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	2200      	movs	r2, #0
 8001774:	2101      	movs	r1, #1
 8001776:	2001      	movs	r0, #1
 8001778:	f005 fba7 	bl	8006eca <xQueueGenericCreate>
 800177c:	4603      	mov	r3, r0
 800177e:	4a30      	ldr	r2, [pc, #192]	; (8001840 <freeRTOS_Tasks_Ini+0x158>)
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	f7ff f943 	bl	8000a0c <MicrostepDriver_Ini>
 8001786:	2300      	movs	r3, #0
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	2302      	movs	r3, #2
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001794:	492b      	ldr	r1, [pc, #172]	; (8001844 <freeRTOS_Tasks_Ini+0x15c>)
 8001796:	482c      	ldr	r0, [pc, #176]	; (8001848 <freeRTOS_Tasks_Ini+0x160>)
<<<<<<< HEAD
 8001798:	f006 f91a 	bl	80079d0 <xTaskCreate>

	xTaskCreate(vKeyScan, "KeyScan", 400, NULL, 2, NULL); // З-а опроса кнопок
=======
 8001798:	f006 f91c 	bl	80079d4 <xTaskCreate>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800179c:	2300      	movs	r3, #0
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	2302      	movs	r3, #2
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2300      	movs	r3, #0
 80017a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80017aa:	4928      	ldr	r1, [pc, #160]	; (800184c <freeRTOS_Tasks_Ini+0x164>)
 80017ac:	4828      	ldr	r0, [pc, #160]	; (8001850 <freeRTOS_Tasks_Ini+0x168>)
<<<<<<< HEAD
 80017ae:	f006 f90f 	bl	80079d0 <xTaskCreate>

	xTaskCreate(vBuzzer_beep, "Buzzer_beep", 100, NULL, 1, NULL); // З-а опроса кнопок
=======
 80017ae:	f006 f911 	bl	80079d4 <xTaskCreate>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80017b2:	2300      	movs	r3, #0
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	2301      	movs	r3, #1
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2300      	movs	r3, #0
 80017bc:	2264      	movs	r2, #100	; 0x64
 80017be:	4925      	ldr	r1, [pc, #148]	; (8001854 <freeRTOS_Tasks_Ini+0x16c>)
 80017c0:	4825      	ldr	r0, [pc, #148]	; (8001858 <freeRTOS_Tasks_Ini+0x170>)
<<<<<<< HEAD
 80017c2:	f006 f905 	bl	80079d0 <xTaskCreate>

	xTaskCreate(vWelder_Run, "Weleder_Run", 250, NULL, 2, NULL);
=======
 80017c2:	f006 f907 	bl	80079d4 <xTaskCreate>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80017c6:	2300      	movs	r3, #0
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	2302      	movs	r3, #2
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2300      	movs	r3, #0
 80017d0:	22fa      	movs	r2, #250	; 0xfa
 80017d2:	4922      	ldr	r1, [pc, #136]	; (800185c <freeRTOS_Tasks_Ini+0x174>)
 80017d4:	4822      	ldr	r0, [pc, #136]	; (8001860 <freeRTOS_Tasks_Ini+0x178>)
<<<<<<< HEAD
 80017d6:	f006 f8fb 	bl	80079d0 <xTaskCreate>

	xTaskCreate(vCarriage_GoTo, "Carriage_GoTo", 400, NULL, 3, NULL); // З-а перемещения каретки в заданную точку
=======
 80017d6:	f006 f8fd 	bl	80079d4 <xTaskCreate>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80017da:	2300      	movs	r3, #0
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	2303      	movs	r3, #3
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2300      	movs	r3, #0
 80017e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80017e8:	491e      	ldr	r1, [pc, #120]	; (8001864 <freeRTOS_Tasks_Ini+0x17c>)
 80017ea:	481f      	ldr	r0, [pc, #124]	; (8001868 <freeRTOS_Tasks_Ini+0x180>)
<<<<<<< HEAD
 80017ec:	f006 f8f0 	bl	80079d0 <xTaskCreate>

	xTaskCreate(vCarriage_Calibration, "Carriage_Calibration", 200, NULL, 2, NULL); // З-а перемещения каретки в заданную точку
=======
 80017ec:	f006 f8f2 	bl	80079d4 <xTaskCreate>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80017f0:	2300      	movs	r3, #0
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	2302      	movs	r3, #2
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2300      	movs	r3, #0
 80017fa:	22c8      	movs	r2, #200	; 0xc8
 80017fc:	491b      	ldr	r1, [pc, #108]	; (800186c <freeRTOS_Tasks_Ini+0x184>)
 80017fe:	481c      	ldr	r0, [pc, #112]	; (8001870 <freeRTOS_Tasks_Ini+0x188>)
<<<<<<< HEAD
 8001800:	f006 f8e6 	bl	80079d0 <xTaskCreate>

	xTaskCreate(vKey_Action, "Key_Action", 200, NULL, 2, NULL); // З-а выполняет дейсвия в зависимости от нажатой кнопки и режима работы устройсво
=======
 8001800:	f006 f8e8 	bl	80079d4 <xTaskCreate>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001804:	2300      	movs	r3, #0
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	2302      	movs	r3, #2
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2300      	movs	r3, #0
 800180e:	22c8      	movs	r2, #200	; 0xc8
 8001810:	4918      	ldr	r1, [pc, #96]	; (8001874 <freeRTOS_Tasks_Ini+0x18c>)
 8001812:	4819      	ldr	r0, [pc, #100]	; (8001878 <freeRTOS_Tasks_Ini+0x190>)
<<<<<<< HEAD
 8001814:	f006 f8dc 	bl	80079d0 <xTaskCreate>

	vTaskStartScheduler();
 8001818:	f006 fa2a 	bl	8007c70 <vTaskStartScheduler>

}
=======
 8001814:	f006 f8de 	bl	80079d4 <xTaskCreate>
 8001818:	f006 fa2c 	bl	8007c74 <vTaskStartScheduler>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20003d60 	.word	0x20003d60
 8001828:	200045c4 	.word	0x200045c4
 800182c:	20003d38 	.word	0x20003d38
 8001830:	20004594 	.word	0x20004594
 8001834:	20004580 	.word	0x20004580
 8001838:	20004588 	.word	0x20004588
 800183c:	2000458c 	.word	0x2000458c
 8001840:	20004590 	.word	0x20004590
 8001844:	0800927c 	.word	0x0800927c
 8001848:	08002f85 	.word	0x08002f85
 800184c:	08009290 	.word	0x08009290
 8001850:	08002559 	.word	0x08002559
 8001854:	08009298 	.word	0x08009298
 8001858:	08003049 	.word	0x08003049
 800185c:	080092a4 	.word	0x080092a4
 8001860:	08002131 	.word	0x08002131
 8001864:	080092b0 	.word	0x080092b0
 8001868:	080023c5 	.word	0x080023c5
 800186c:	080092c0 	.word	0x080092c0
 8001870:	080022e9 	.word	0x080022e9
 8001874:	080092d8 	.word	0x080092d8
 8001878:	0800187d 	.word	0x0800187d

0800187c <vKey_Action>:
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	2301      	movs	r3, #1
 8001886:	73bb      	strb	r3, [r7, #14]
 8001888:	2304      	movs	r3, #4
 800188a:	737b      	strb	r3, [r7, #13]
 800188c:	2301      	movs	r3, #1
 800188e:	72fb      	strb	r3, [r7, #11]
 8001890:	4ba6      	ldr	r3, [pc, #664]	; (8001b2c <vKey_Action+0x2b0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f107 010f 	add.w	r1, r7, #15
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	4618      	mov	r0, r3
<<<<<<< HEAD
 800189e:	f005 fcd5 	bl	800724c <xQueueReceive>

		switch(KeyPressed)
=======
 800189e:	f005 fcd7 	bl	8007250 <xQueueReceive>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b24      	cmp	r3, #36	; 0x24
 80018a6:	d8f3      	bhi.n	8001890 <vKey_Action+0x14>
 80018a8:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <vKey_Action+0x34>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	08001891 	.word	0x08001891
 80018b4:	08001945 	.word	0x08001945
 80018b8:	080019a3 	.word	0x080019a3
 80018bc:	080019cb 	.word	0x080019cb
 80018c0:	08001a39 	.word	0x08001a39
 80018c4:	08001a77 	.word	0x08001a77
 80018c8:	08001aeb 	.word	0x08001aeb
 80018cc:	08001b3d 	.word	0x08001b3d
 80018d0:	08001ba7 	.word	0x08001ba7
 80018d4:	08001bdb 	.word	0x08001bdb
 80018d8:	08001c03 	.word	0x08001c03
 80018dc:	08001c2b 	.word	0x08001c2b
 80018e0:	08001c53 	.word	0x08001c53
 80018e4:	08001c7b 	.word	0x08001c7b
 80018e8:	08001ca3 	.word	0x08001ca3
 80018ec:	08001ccb 	.word	0x08001ccb
 80018f0:	08001cf7 	.word	0x08001cf7
 80018f4:	08001d23 	.word	0x08001d23
 80018f8:	08001d4b 	.word	0x08001d4b
 80018fc:	08001d73 	.word	0x08001d73
 8001900:	08001d9b 	.word	0x08001d9b
 8001904:	08001dc3 	.word	0x08001dc3
 8001908:	08001dfd 	.word	0x08001dfd
 800190c:	08001e25 	.word	0x08001e25
 8001910:	08001e51 	.word	0x08001e51
 8001914:	08001f45 	.word	0x08001f45
 8001918:	08001f71 	.word	0x08001f71
 800191c:	08001f8f 	.word	0x08001f8f
 8001920:	08001fef 	.word	0x08001fef
 8001924:	0800200d 	.word	0x0800200d
 8001928:	08002057 	.word	0x08002057
 800192c:	08002065 	.word	0x08002065
 8001930:	08001891 	.word	0x08001891
 8001934:	08001e79 	.word	0x08001e79
 8001938:	08001ec7 	.word	0x08001ec7
 800193c:	08001ed9 	.word	0x08001ed9
 8001940:	08001f19 	.word	0x08001f19
 8001944:	4b7a      	ldr	r3, [pc, #488]	; (8001b30 <vKey_Action+0x2b4>)
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	f107 010e 	add.w	r1, r7, #14
 800194c:	2300      	movs	r3, #0
 800194e:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001950:	f005 fb24 	bl	8006f9c <xQueueGenericSend>

			if (WelderUnit.Xs > XS_MIN) // Проверка на попадание в допустимый диапазон значений
=======
 8001950:	f005 fb26 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001954:	4b77      	ldr	r3, [pc, #476]	; (8001b34 <vKey_Action+0x2b8>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	2b0a      	cmp	r3, #10
 800195a:	f240 8390 	bls.w	800207e <vKey_Action+0x802>
 800195e:	4b75      	ldr	r3, [pc, #468]	; (8001b34 <vKey_Action+0x2b8>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	3b01      	subs	r3, #1
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <vKey_Action+0x2b8>)
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	4b72      	ldr	r3, [pc, #456]	; (8001b34 <vKey_Action+0x2b8>)
 800196c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001970:	2b02      	cmp	r3, #2
 8001972:	f040 8384 	bne.w	800207e <vKey_Action+0x802>
 8001976:	4b6f      	ldr	r3, [pc, #444]	; (8001b34 <vKey_Action+0x2b8>)
 8001978:	7c1b      	ldrb	r3, [r3, #16]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 837d 	beq.w	800207e <vKey_Action+0x802>
 8001984:	2301      	movs	r3, #1
 8001986:	72fb      	strb	r3, [r7, #11]
 8001988:	4b6a      	ldr	r3, [pc, #424]	; (8001b34 <vKey_Action+0x2b8>)
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <vKey_Action+0x2b8>)
 800198e:	811a      	strh	r2, [r3, #8]
 8001990:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <vKey_Action+0x2bc>)
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	f107 010b 	add.w	r1, r7, #11
 8001998:	2300      	movs	r3, #0
 800199a:	2200      	movs	r2, #0
<<<<<<< HEAD
 800199c:	f005 fafe 	bl	8006f9c <xQueueGenericSend>

				}
			}
			break;
=======
 800199c:	f005 fb00 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80019a0:	e36d      	b.n	800207e <vKey_Action+0x802>
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <vKey_Action+0x2b4>)
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	f107 010e 	add.w	r1, r7, #14
 80019aa:	2300      	movs	r3, #0
 80019ac:	2200      	movs	r2, #0
<<<<<<< HEAD
 80019ae:	f005 faf5 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Xs > XS_MIN + 20) // Проверка на попадание в допустимый диапазон значений
=======
 80019ae:	f005 faf7 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80019b2:	4b60      	ldr	r3, [pc, #384]	; (8001b34 <vKey_Action+0x2b8>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	2b1e      	cmp	r3, #30
 80019b8:	f240 8363 	bls.w	8002082 <vKey_Action+0x806>
 80019bc:	4b5d      	ldr	r3, [pc, #372]	; (8001b34 <vKey_Action+0x2b8>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	3b14      	subs	r3, #20
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	4b5b      	ldr	r3, [pc, #364]	; (8001b34 <vKey_Action+0x2b8>)
 80019c6:	801a      	strh	r2, [r3, #0]
 80019c8:	e35b      	b.n	8002082 <vKey_Action+0x806>
 80019ca:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <vKey_Action+0x2b4>)
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	f107 010e 	add.w	r1, r7, #14
 80019d2:	2300      	movs	r3, #0
 80019d4:	2200      	movs	r2, #0
<<<<<<< HEAD
 80019d6:	f005 fae1 	bl	8006f9c <xQueueGenericSend>
			if ((WelderUnit.Xs < XS_MAX) && (WelderUnit.Xs < WelderUnit.Xf)) // Проверка на попадание в допустимый диапазон значений  и что бы Xs была меньше Xf
=======
 80019d6:	f005 fae3 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80019da:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <vKey_Action+0x2b8>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80019e2:	f080 8350 	bcs.w	8002086 <vKey_Action+0x80a>
 80019e6:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <vKey_Action+0x2b8>)
 80019e8:	881a      	ldrh	r2, [r3, #0]
 80019ea:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <vKey_Action+0x2b8>)
 80019ec:	885b      	ldrh	r3, [r3, #2]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	f080 8349 	bcs.w	8002086 <vKey_Action+0x80a>
 80019f4:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <vKey_Action+0x2b8>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <vKey_Action+0x2b8>)
 80019fe:	801a      	strh	r2, [r3, #0]
 8001a00:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <vKey_Action+0x2b8>)
 8001a02:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	f040 833d 	bne.w	8002086 <vKey_Action+0x80a>
 8001a0c:	4b49      	ldr	r3, [pc, #292]	; (8001b34 <vKey_Action+0x2b8>)
 8001a0e:	7c1b      	ldrb	r3, [r3, #16]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 8336 	beq.w	8002086 <vKey_Action+0x80a>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	72fb      	strb	r3, [r7, #11]
 8001a1e:	4b45      	ldr	r3, [pc, #276]	; (8001b34 <vKey_Action+0x2b8>)
 8001a20:	881a      	ldrh	r2, [r3, #0]
 8001a22:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <vKey_Action+0x2b8>)
 8001a24:	811a      	strh	r2, [r3, #8]
 8001a26:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <vKey_Action+0x2bc>)
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	f107 010b 	add.w	r1, r7, #11
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001a32:	f005 fab3 	bl	8006f9c <xQueueGenericSend>

			}

			}
			break;
=======
 8001a32:	f005 fab5 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001a36:	e326      	b.n	8002086 <vKey_Action+0x80a>
 8001a38:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <vKey_Action+0x2b4>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	f107 010e 	add.w	r1, r7, #14
 8001a40:	2300      	movs	r3, #0
 8001a42:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001a44:	f005 faaa 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Xs < XS_MAX - 20 && WelderUnit.Xs < WelderUnit.Xf - 20) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
=======
 8001a44:	f005 faac 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001a48:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <vKey_Action+0x2b8>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	f240 622b 	movw	r2, #1579	; 0x62b
 8001a50:	4293      	cmp	r3, r2
 8001a52:	f200 831a 	bhi.w	800208a <vKey_Action+0x80e>
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <vKey_Action+0x2b8>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <vKey_Action+0x2b8>)
 8001a5e:	885b      	ldrh	r3, [r3, #2]
 8001a60:	3b14      	subs	r3, #20
 8001a62:	429a      	cmp	r2, r3
 8001a64:	f280 8311 	bge.w	800208a <vKey_Action+0x80e>
 8001a68:	4b32      	ldr	r3, [pc, #200]	; (8001b34 <vKey_Action+0x2b8>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	3314      	adds	r3, #20
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <vKey_Action+0x2b8>)
 8001a72:	801a      	strh	r2, [r3, #0]
 8001a74:	e309      	b.n	800208a <vKey_Action+0x80e>
 8001a76:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <vKey_Action+0x2b4>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	f107 010e 	add.w	r1, r7, #14
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001a82:	f005 fa8b 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN && WelderUnit.Xf > WelderUnit.Xs) // Проверка на попадание в допустимый диапазон значений
=======
 8001a82:	f005 fa8d 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <vKey_Action+0x2b8>)
 8001a88:	885b      	ldrh	r3, [r3, #2]
 8001a8a:	2b14      	cmp	r3, #20
 8001a8c:	f240 82ff 	bls.w	800208e <vKey_Action+0x812>
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <vKey_Action+0x2b8>)
 8001a92:	885a      	ldrh	r2, [r3, #2]
 8001a94:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <vKey_Action+0x2b8>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f240 82f8 	bls.w	800208e <vKey_Action+0x812>
 8001a9e:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <vKey_Action+0x2b8>)
 8001aa0:	885b      	ldrh	r3, [r3, #2]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <vKey_Action+0x2b8>)
 8001aa8:	805a      	strh	r2, [r3, #2]
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <vKey_Action+0x2b8>)
 8001aac:	885a      	ldrh	r2, [r3, #2]
 8001aae:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <vKey_Action+0x2b8>)
 8001ab0:	811a      	strh	r2, [r3, #8]
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <vKey_Action+0x2b8>)
 8001ab4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	f040 82e8 	bne.w	800208e <vKey_Action+0x812>
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <vKey_Action+0x2b8>)
 8001ac0:	7c1b      	ldrb	r3, [r3, #16]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 82e1 	beq.w	800208e <vKey_Action+0x812>
 8001acc:	2301      	movs	r3, #1
 8001ace:	72fb      	strb	r3, [r7, #11]
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <vKey_Action+0x2b8>)
 8001ad2:	885a      	ldrh	r2, [r3, #2]
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <vKey_Action+0x2b8>)
 8001ad6:	811a      	strh	r2, [r3, #8]
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <vKey_Action+0x2bc>)
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	f107 010b 	add.w	r1, r7, #11
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001ae4:	f005 fa5a 	bl	8006f9c <xQueueGenericSend>

				}
			}
			break;
=======
 8001ae4:	f005 fa5c 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001ae8:	e2d1      	b.n	800208e <vKey_Action+0x812>
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <vKey_Action+0x2b4>)
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	f107 010e 	add.w	r1, r7, #14
 8001af2:	2300      	movs	r3, #0
 8001af4:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001af6:	f005 fa51 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN + 20 && WelderUnit.Xf > WelderUnit.Xs + 20 ) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
=======
 8001af6:	f005 fa53 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <vKey_Action+0x2b8>)
 8001afc:	885b      	ldrh	r3, [r3, #2]
 8001afe:	2b28      	cmp	r3, #40	; 0x28
 8001b00:	f240 82c8 	bls.w	8002094 <vKey_Action+0x818>
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <vKey_Action+0x2b8>)
 8001b06:	885b      	ldrh	r3, [r3, #2]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <vKey_Action+0x2b8>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	3314      	adds	r3, #20
 8001b10:	429a      	cmp	r2, r3
 8001b12:	f340 82bf 	ble.w	8002094 <vKey_Action+0x818>
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <vKey_Action+0x2b8>)
 8001b18:	885b      	ldrh	r3, [r3, #2]
 8001b1a:	3b14      	subs	r3, #20
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <vKey_Action+0x2b8>)
 8001b20:	805a      	strh	r2, [r3, #2]
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <vKey_Action+0x2b8>)
 8001b24:	885a      	ldrh	r2, [r3, #2]
 8001b26:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <vKey_Action+0x2b8>)
 8001b28:	811a      	strh	r2, [r3, #8]
 8001b2a:	e2b3      	b.n	8002094 <vKey_Action+0x818>
 8001b2c:	20004590 	.word	0x20004590
 8001b30:	20003d38 	.word	0x20003d38
 8001b34:	20003d3c 	.word	0x20003d3c
 8001b38:	20004594 	.word	0x20004594
 8001b3c:	4bac      	ldr	r3, [pc, #688]	; (8001df0 <vKey_Action+0x574>)
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	f107 010e 	add.w	r1, r7, #14
 8001b44:	2300      	movs	r3, #0
 8001b46:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001b48:	f005 fa28 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX ) // Проверка на попадание в допустимый диапазон значений
=======
 8001b48:	f005 fa2a 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001b4c:	4ba9      	ldr	r3, [pc, #676]	; (8001df4 <vKey_Action+0x578>)
 8001b4e:	885b      	ldrh	r3, [r3, #2]
 8001b50:	f240 6271 	movw	r2, #1649	; 0x671
 8001b54:	4293      	cmp	r3, r2
 8001b56:	f200 82a0 	bhi.w	800209a <vKey_Action+0x81e>
 8001b5a:	4ba6      	ldr	r3, [pc, #664]	; (8001df4 <vKey_Action+0x578>)
 8001b5c:	885b      	ldrh	r3, [r3, #2]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4ba4      	ldr	r3, [pc, #656]	; (8001df4 <vKey_Action+0x578>)
 8001b64:	805a      	strh	r2, [r3, #2]
 8001b66:	4ba3      	ldr	r3, [pc, #652]	; (8001df4 <vKey_Action+0x578>)
 8001b68:	885a      	ldrh	r2, [r3, #2]
 8001b6a:	4ba2      	ldr	r3, [pc, #648]	; (8001df4 <vKey_Action+0x578>)
 8001b6c:	811a      	strh	r2, [r3, #8]
 8001b6e:	4ba1      	ldr	r3, [pc, #644]	; (8001df4 <vKey_Action+0x578>)
 8001b70:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	f040 8290 	bne.w	800209a <vKey_Action+0x81e>
 8001b7a:	4b9e      	ldr	r3, [pc, #632]	; (8001df4 <vKey_Action+0x578>)
 8001b7c:	7c1b      	ldrb	r3, [r3, #16]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8289 	beq.w	800209a <vKey_Action+0x81e>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	72fb      	strb	r3, [r7, #11]
 8001b8c:	4b99      	ldr	r3, [pc, #612]	; (8001df4 <vKey_Action+0x578>)
 8001b8e:	885a      	ldrh	r2, [r3, #2]
 8001b90:	4b98      	ldr	r3, [pc, #608]	; (8001df4 <vKey_Action+0x578>)
 8001b92:	811a      	strh	r2, [r3, #8]
 8001b94:	4b98      	ldr	r3, [pc, #608]	; (8001df8 <vKey_Action+0x57c>)
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	f107 010b 	add.w	r1, r7, #11
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001ba0:	f005 f9fc 	bl	8006f9c <xQueueGenericSend>

				}
			}
			break;
=======
 8001ba0:	f005 f9fe 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001ba4:	e279      	b.n	800209a <vKey_Action+0x81e>
 8001ba6:	4b92      	ldr	r3, [pc, #584]	; (8001df0 <vKey_Action+0x574>)
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	f107 010e 	add.w	r1, r7, #14
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001bb2:	f005 f9f3 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX - 20 ) // Проверка на попадание в допустимый диапазон значений
=======
 8001bb2:	f005 f9f5 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001bb6:	4b8f      	ldr	r3, [pc, #572]	; (8001df4 <vKey_Action+0x578>)
 8001bb8:	885b      	ldrh	r3, [r3, #2]
 8001bba:	f240 625d 	movw	r2, #1629	; 0x65d
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	f200 826e 	bhi.w	80020a0 <vKey_Action+0x824>
 8001bc4:	4b8b      	ldr	r3, [pc, #556]	; (8001df4 <vKey_Action+0x578>)
 8001bc6:	885b      	ldrh	r3, [r3, #2]
 8001bc8:	3314      	adds	r3, #20
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	4b89      	ldr	r3, [pc, #548]	; (8001df4 <vKey_Action+0x578>)
 8001bce:	805a      	strh	r2, [r3, #2]
 8001bd0:	4b88      	ldr	r3, [pc, #544]	; (8001df4 <vKey_Action+0x578>)
 8001bd2:	885a      	ldrh	r2, [r3, #2]
 8001bd4:	4b87      	ldr	r3, [pc, #540]	; (8001df4 <vKey_Action+0x578>)
 8001bd6:	811a      	strh	r2, [r3, #8]
 8001bd8:	e262      	b.n	80020a0 <vKey_Action+0x824>
 8001bda:	4b85      	ldr	r3, [pc, #532]	; (8001df0 <vKey_Action+0x574>)
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	f107 010e 	add.w	r1, r7, #14
 8001be2:	2300      	movs	r3, #0
 8001be4:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001be6:	f005 f9d9 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN) // Проверка на попадание в допустимый диапазон значений
=======
 8001be6:	f005 f9db 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001bea:	4b82      	ldr	r3, [pc, #520]	; (8001df4 <vKey_Action+0x578>)
 8001bec:	7a9b      	ldrb	r3, [r3, #10]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	f240 8259 	bls.w	80020a6 <vKey_Action+0x82a>
 8001bf4:	4b7f      	ldr	r3, [pc, #508]	; (8001df4 <vKey_Action+0x578>)
 8001bf6:	7a9b      	ldrb	r3, [r3, #10]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b7d      	ldr	r3, [pc, #500]	; (8001df4 <vKey_Action+0x578>)
 8001bfe:	729a      	strb	r2, [r3, #10]
 8001c00:	e251      	b.n	80020a6 <vKey_Action+0x82a>
 8001c02:	4b7b      	ldr	r3, [pc, #492]	; (8001df0 <vKey_Action+0x574>)
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	f107 010e 	add.w	r1, r7, #14
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001c0e:	f005 f9c5 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN + 10) // Проверка на попадание в допустимый диапазон значений
=======
 8001c0e:	f005 f9c7 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001c12:	4b78      	ldr	r3, [pc, #480]	; (8001df4 <vKey_Action+0x578>)
 8001c14:	7a9b      	ldrb	r3, [r3, #10]
 8001c16:	2b0b      	cmp	r3, #11
 8001c18:	f240 8248 	bls.w	80020ac <vKey_Action+0x830>
 8001c1c:	4b75      	ldr	r3, [pc, #468]	; (8001df4 <vKey_Action+0x578>)
 8001c1e:	7a9b      	ldrb	r3, [r3, #10]
 8001c20:	3b0a      	subs	r3, #10
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4b73      	ldr	r3, [pc, #460]	; (8001df4 <vKey_Action+0x578>)
 8001c26:	729a      	strb	r2, [r3, #10]
 8001c28:	e240      	b.n	80020ac <vKey_Action+0x830>
 8001c2a:	4b71      	ldr	r3, [pc, #452]	; (8001df0 <vKey_Action+0x574>)
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	f107 010e 	add.w	r1, r7, #14
 8001c32:	2300      	movs	r3, #0
 8001c34:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001c36:	f005 f9b1 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX ) // Проверка на попадание в допустимый диапазон значений
=======
 8001c36:	f005 f9b3 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001c3a:	4b6e      	ldr	r3, [pc, #440]	; (8001df4 <vKey_Action+0x578>)
 8001c3c:	7a9b      	ldrb	r3, [r3, #10]
 8001c3e:	2b31      	cmp	r3, #49	; 0x31
 8001c40:	f200 8237 	bhi.w	80020b2 <vKey_Action+0x836>
 8001c44:	4b6b      	ldr	r3, [pc, #428]	; (8001df4 <vKey_Action+0x578>)
 8001c46:	7a9b      	ldrb	r3, [r3, #10]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	4b69      	ldr	r3, [pc, #420]	; (8001df4 <vKey_Action+0x578>)
 8001c4e:	729a      	strb	r2, [r3, #10]
 8001c50:	e22f      	b.n	80020b2 <vKey_Action+0x836>
 8001c52:	4b67      	ldr	r3, [pc, #412]	; (8001df0 <vKey_Action+0x574>)
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	f107 010e 	add.w	r1, r7, #14
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001c5e:	f005 f99d 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
=======
 8001c5e:	f005 f99f 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001c62:	4b64      	ldr	r3, [pc, #400]	; (8001df4 <vKey_Action+0x578>)
 8001c64:	7a9b      	ldrb	r3, [r3, #10]
 8001c66:	2b27      	cmp	r3, #39	; 0x27
 8001c68:	f200 8226 	bhi.w	80020b8 <vKey_Action+0x83c>
 8001c6c:	4b61      	ldr	r3, [pc, #388]	; (8001df4 <vKey_Action+0x578>)
 8001c6e:	7a9b      	ldrb	r3, [r3, #10]
 8001c70:	330a      	adds	r3, #10
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	4b5f      	ldr	r3, [pc, #380]	; (8001df4 <vKey_Action+0x578>)
 8001c76:	729a      	strb	r2, [r3, #10]
 8001c78:	e21e      	b.n	80020b8 <vKey_Action+0x83c>
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <vKey_Action+0x574>)
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	f107 010e 	add.w	r1, r7, #14
 8001c82:	2300      	movs	r3, #0
 8001c84:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001c86:	f005 f989 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN) // Проверка на попадание в допустимый диапазон значений
=======
 8001c86:	f005 f98b 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001c8a:	4b5a      	ldr	r3, [pc, #360]	; (8001df4 <vKey_Action+0x578>)
 8001c8c:	88db      	ldrh	r3, [r3, #6]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	f240 8215 	bls.w	80020be <vKey_Action+0x842>
 8001c94:	4b57      	ldr	r3, [pc, #348]	; (8001df4 <vKey_Action+0x578>)
 8001c96:	88db      	ldrh	r3, [r3, #6]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <vKey_Action+0x578>)
 8001c9e:	80da      	strh	r2, [r3, #6]
 8001ca0:	e20d      	b.n	80020be <vKey_Action+0x842>
 8001ca2:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <vKey_Action+0x574>)
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f107 010e 	add.w	r1, r7, #14
 8001caa:	2300      	movs	r3, #0
 8001cac:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001cae:	f005 f975 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
=======
 8001cae:	f005 f977 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001cb2:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <vKey_Action+0x578>)
 8001cb4:	88db      	ldrh	r3, [r3, #6]
 8001cb6:	2b15      	cmp	r3, #21
 8001cb8:	f240 8204 	bls.w	80020c4 <vKey_Action+0x848>
 8001cbc:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <vKey_Action+0x578>)
 8001cbe:	88db      	ldrh	r3, [r3, #6]
 8001cc0:	3b14      	subs	r3, #20
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b4b      	ldr	r3, [pc, #300]	; (8001df4 <vKey_Action+0x578>)
 8001cc6:	80da      	strh	r2, [r3, #6]
 8001cc8:	e1fc      	b.n	80020c4 <vKey_Action+0x848>
 8001cca:	4b49      	ldr	r3, [pc, #292]	; (8001df0 <vKey_Action+0x574>)
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	f107 010e 	add.w	r1, r7, #14
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001cd6:	f005 f961 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX ) // Проверка на попадание в допустимый диапазон значений
=======
 8001cd6:	f005 f963 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001cda:	4b46      	ldr	r3, [pc, #280]	; (8001df4 <vKey_Action+0x578>)
 8001cdc:	88db      	ldrh	r3, [r3, #6]
 8001cde:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	f200 81f1 	bhi.w	80020ca <vKey_Action+0x84e>
 8001ce8:	4b42      	ldr	r3, [pc, #264]	; (8001df4 <vKey_Action+0x578>)
 8001cea:	88db      	ldrh	r3, [r3, #6]
 8001cec:	3301      	adds	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b40      	ldr	r3, [pc, #256]	; (8001df4 <vKey_Action+0x578>)
 8001cf2:	80da      	strh	r2, [r3, #6]
 8001cf4:	e1e9      	b.n	80020ca <vKey_Action+0x84e>
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <vKey_Action+0x574>)
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	f107 010e 	add.w	r1, r7, #14
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001d02:	f005 f94b 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
=======
 8001d02:	f005 f94d 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001d06:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <vKey_Action+0x578>)
 8001d08:	88db      	ldrh	r3, [r3, #6]
 8001d0a:	f240 32d2 	movw	r2, #978	; 0x3d2
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	f200 81de 	bhi.w	80020d0 <vKey_Action+0x854>
 8001d14:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <vKey_Action+0x578>)
 8001d16:	88db      	ldrh	r3, [r3, #6]
 8001d18:	3314      	adds	r3, #20
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <vKey_Action+0x578>)
 8001d1e:	80da      	strh	r2, [r3, #6]
 8001d20:	e1d6      	b.n	80020d0 <vKey_Action+0x854>
 8001d22:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <vKey_Action+0x574>)
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	f107 010e 	add.w	r1, r7, #14
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001d2e:	f005 f935 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN) // Проверка на попадание в допустимый диапазон значений
=======
 8001d2e:	f005 f937 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001d32:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <vKey_Action+0x578>)
 8001d34:	7adb      	ldrb	r3, [r3, #11]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	f240 81cd 	bls.w	80020d6 <vKey_Action+0x85a>
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <vKey_Action+0x578>)
 8001d3e:	7adb      	ldrb	r3, [r3, #11]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <vKey_Action+0x578>)
 8001d46:	72da      	strb	r2, [r3, #11]
 8001d48:	e1c5      	b.n	80020d6 <vKey_Action+0x85a>
 8001d4a:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <vKey_Action+0x574>)
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	f107 010e 	add.w	r1, r7, #14
 8001d52:	2300      	movs	r3, #0
 8001d54:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001d56:	f005 f921 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN + 10) // Проверка на попадание в допустимый диапазон значений
=======
 8001d56:	f005 f923 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <vKey_Action+0x578>)
 8001d5c:	7adb      	ldrb	r3, [r3, #11]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	f240 81bc 	bls.w	80020dc <vKey_Action+0x860>
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <vKey_Action+0x578>)
 8001d66:	7adb      	ldrb	r3, [r3, #11]
 8001d68:	3b0a      	subs	r3, #10
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <vKey_Action+0x578>)
 8001d6e:	72da      	strb	r2, [r3, #11]
 8001d70:	e1b4      	b.n	80020dc <vKey_Action+0x860>
 8001d72:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <vKey_Action+0x574>)
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	f107 010e 	add.w	r1, r7, #14
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001d7e:	f005 f90d 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX) // Проверка на попадание в допустимый диапазон значений
=======
 8001d7e:	f005 f90f 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001d82:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <vKey_Action+0x578>)
 8001d84:	7adb      	ldrb	r3, [r3, #11]
 8001d86:	2b45      	cmp	r3, #69	; 0x45
 8001d88:	f200 81ab 	bhi.w	80020e2 <vKey_Action+0x866>
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <vKey_Action+0x578>)
 8001d8e:	7adb      	ldrb	r3, [r3, #11]
 8001d90:	3301      	adds	r3, #1
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <vKey_Action+0x578>)
 8001d96:	72da      	strb	r2, [r3, #11]
 8001d98:	e1a3      	b.n	80020e2 <vKey_Action+0x866>
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <vKey_Action+0x574>)
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	f107 010e 	add.w	r1, r7, #14
 8001da2:	2300      	movs	r3, #0
 8001da4:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001da6:	f005 f8f9 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
=======
 8001da6:	f005 f8fb 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <vKey_Action+0x578>)
 8001dac:	7adb      	ldrb	r3, [r3, #11]
 8001dae:	2b3b      	cmp	r3, #59	; 0x3b
 8001db0:	f200 819a 	bhi.w	80020e8 <vKey_Action+0x86c>
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <vKey_Action+0x578>)
 8001db6:	7adb      	ldrb	r3, [r3, #11]
 8001db8:	330a      	adds	r3, #10
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <vKey_Action+0x578>)
 8001dbe:	72da      	strb	r2, [r3, #11]
 8001dc0:	e192      	b.n	80020e8 <vKey_Action+0x86c>
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <vKey_Action+0x574>)
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	f107 010e 	add.w	r1, r7, #14
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001dce:	f005 f8e5 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN) // Проверка на попадание в допустимый диапазон значений
=======
 8001dce:	f005 f8e7 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <vKey_Action+0x578>)
 8001dd4:	899b      	ldrh	r3, [r3, #12]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	f240 8194 	bls.w	8002104 <vKey_Action+0x888>
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <vKey_Action+0x578>)
 8001dde:	899b      	ldrh	r3, [r3, #12]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <vKey_Action+0x578>)
 8001de6:	819a      	strh	r2, [r3, #12]
 8001de8:	f7ff f9ec 	bl	80011c4 <ReadProgramFromFlash2>
 8001dec:	e18a      	b.n	8002104 <vKey_Action+0x888>
 8001dee:	bf00      	nop
 8001df0:	20003d38 	.word	0x20003d38
 8001df4:	20003d3c 	.word	0x20003d3c
 8001df8:	20004594 	.word	0x20004594
 8001dfc:	4bbc      	ldr	r3, [pc, #752]	; (80020f0 <vKey_Action+0x874>)
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	f107 010e 	add.w	r1, r7, #14
 8001e04:	2300      	movs	r3, #0
 8001e06:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001e08:	f005 f8c8 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN + 20) // Проверка на попадание в допустимый диапазон значений
=======
 8001e08:	f005 f8ca 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001e0c:	4bb9      	ldr	r3, [pc, #740]	; (80020f4 <vKey_Action+0x878>)
 8001e0e:	899b      	ldrh	r3, [r3, #12]
 8001e10:	2b15      	cmp	r3, #21
 8001e12:	f240 817a 	bls.w	800210a <vKey_Action+0x88e>
 8001e16:	4bb7      	ldr	r3, [pc, #732]	; (80020f4 <vKey_Action+0x878>)
 8001e18:	899b      	ldrh	r3, [r3, #12]
 8001e1a:	3b14      	subs	r3, #20
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	4bb5      	ldr	r3, [pc, #724]	; (80020f4 <vKey_Action+0x878>)
 8001e20:	819a      	strh	r2, [r3, #12]
 8001e22:	e172      	b.n	800210a <vKey_Action+0x88e>
 8001e24:	4bb2      	ldr	r3, [pc, #712]	; (80020f0 <vKey_Action+0x874>)
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	f107 010e 	add.w	r1, r7, #14
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001e30:	f005 f8b4 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX) // Проверка на попадание в допустимый диапазон значений
=======
 8001e30:	f005 f8b6 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001e34:	4baf      	ldr	r3, [pc, #700]	; (80020f4 <vKey_Action+0x878>)
 8001e36:	899b      	ldrh	r3, [r3, #12]
 8001e38:	2b45      	cmp	r3, #69	; 0x45
 8001e3a:	f200 8169 	bhi.w	8002110 <vKey_Action+0x894>
 8001e3e:	4bad      	ldr	r3, [pc, #692]	; (80020f4 <vKey_Action+0x878>)
 8001e40:	899b      	ldrh	r3, [r3, #12]
 8001e42:	3301      	adds	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4bab      	ldr	r3, [pc, #684]	; (80020f4 <vKey_Action+0x878>)
 8001e48:	819a      	strh	r2, [r3, #12]
 8001e4a:	f7ff f9bb 	bl	80011c4 <ReadProgramFromFlash2>
 8001e4e:	e15f      	b.n	8002110 <vKey_Action+0x894>
 8001e50:	4ba7      	ldr	r3, [pc, #668]	; (80020f0 <vKey_Action+0x874>)
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	f107 010e 	add.w	r1, r7, #14
 8001e58:	2300      	movs	r3, #0
 8001e5a:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001e5c:	f005 f89e 	bl	8006f9c <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
=======
 8001e5c:	f005 f8a0 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001e60:	4ba4      	ldr	r3, [pc, #656]	; (80020f4 <vKey_Action+0x878>)
 8001e62:	899b      	ldrh	r3, [r3, #12]
 8001e64:	2b31      	cmp	r3, #49	; 0x31
 8001e66:	f200 8156 	bhi.w	8002116 <vKey_Action+0x89a>
 8001e6a:	4ba2      	ldr	r3, [pc, #648]	; (80020f4 <vKey_Action+0x878>)
 8001e6c:	899b      	ldrh	r3, [r3, #12]
 8001e6e:	3314      	adds	r3, #20
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4ba0      	ldr	r3, [pc, #640]	; (80020f4 <vKey_Action+0x878>)
 8001e74:	819a      	strh	r2, [r3, #12]
 8001e76:	e14e      	b.n	8002116 <vKey_Action+0x89a>
 8001e78:	4b9d      	ldr	r3, [pc, #628]	; (80020f0 <vKey_Action+0x874>)
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	f107 010e 	add.w	r1, r7, #14
 8001e80:	2300      	movs	r3, #0
 8001e82:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001e84:	f005 f88a 	bl	8006f9c <xQueueGenericSend>
					if (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) // Если задняя дверца закрыта, то разрешить опускание головки
=======
 8001e84:	f005 f88c 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001e88:	4b9a      	ldr	r3, [pc, #616]	; (80020f4 <vKey_Action+0x878>)
 8001e8a:	7c1b      	ldrb	r3, [r3, #16]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 8143 	beq.w	800211c <vKey_Action+0x8a0>
 8001e96:	2200      	movs	r2, #0
 8001e98:	2106      	movs	r1, #6
 8001e9a:	4897      	ldr	r0, [pc, #604]	; (80020f8 <vKey_Action+0x87c>)
<<<<<<< HEAD
 8001e9c:	f002 fb39 	bl	8004512 <HAL_GPIO_WritePin>
						WelderUnit.IndicatorPanel.LEDsState |= LED_DOWN; // Индикация что головка опущена
=======
 8001e9c:	f002 fb3b 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001ea0:	4b94      	ldr	r3, [pc, #592]	; (80020f4 <vKey_Action+0x878>)
 8001ea2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b91      	ldr	r3, [pc, #580]	; (80020f4 <vKey_Action+0x878>)
 8001eae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001eb2:	4b90      	ldr	r3, [pc, #576]	; (80020f4 <vKey_Action+0x878>)
 8001eb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eb8:	f023 0308 	bic.w	r3, r3, #8
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b8d      	ldr	r3, [pc, #564]	; (80020f4 <vKey_Action+0x878>)
 8001ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001ec4:	e12a      	b.n	800211c <vKey_Action+0x8a0>
 8001ec6:	4b8a      	ldr	r3, [pc, #552]	; (80020f0 <vKey_Action+0x874>)
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	f107 010e 	add.w	r1, r7, #14
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001ed2:	f005 f863 	bl	8006f9c <xQueueGenericSend>
//					if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
//					{
//						WelderUnit.Speed -= 20; // Дейсвия при длинном нажатии
//					}
					break;
=======
 8001ed2:	f005 f865 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001ed6:	e128      	b.n	800212a <vKey_Action+0x8ae>
 8001ed8:	4b85      	ldr	r3, [pc, #532]	; (80020f0 <vKey_Action+0x874>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	f107 010e 	add.w	r1, r7, #14
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001ee4:	f005 f85a 	bl	8006f9c <xQueueGenericSend>
					WELDER_HEAD_UP // Поднять сварочную головку
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2106      	movs	r1, #6
 8001eec:	4882      	ldr	r0, [pc, #520]	; (80020f8 <vKey_Action+0x87c>)
 8001eee:	f002 fb10 	bl	8004512 <HAL_GPIO_WritePin>
					WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация что головка однята
=======
 8001ee4:	f005 f85c 	bl	8006fa0 <xQueueGenericSend>
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2106      	movs	r1, #6
 8001eec:	4882      	ldr	r0, [pc, #520]	; (80020f8 <vKey_Action+0x87c>)
 8001eee:	f002 fb12 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001ef2:	4b80      	ldr	r3, [pc, #512]	; (80020f4 <vKey_Action+0x878>)
 8001ef4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ef8:	f043 0308 	orr.w	r3, r3, #8
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b7d      	ldr	r3, [pc, #500]	; (80020f4 <vKey_Action+0x878>)
 8001f00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001f04:	4b7b      	ldr	r3, [pc, #492]	; (80020f4 <vKey_Action+0x878>)
 8001f06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f0a:	f023 0304 	bic.w	r3, r3, #4
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b78      	ldr	r3, [pc, #480]	; (80020f4 <vKey_Action+0x878>)
 8001f12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001f16:	e108      	b.n	800212a <vKey_Action+0x8ae>
 8001f18:	4b75      	ldr	r3, [pc, #468]	; (80020f0 <vKey_Action+0x874>)
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	f107 010e 	add.w	r1, r7, #14
 8001f20:	2300      	movs	r3, #0
 8001f22:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001f24:	f005 f83a 	bl	8006f9c <xQueueGenericSend>
					if (WelderUnit.Speed < SPEED_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
=======
 8001f24:	f005 f83c 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001f28:	4b72      	ldr	r3, [pc, #456]	; (80020f4 <vKey_Action+0x878>)
 8001f2a:	88db      	ldrh	r3, [r3, #6]
 8001f2c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8001f30:	4293      	cmp	r3, r2
 8001f32:	f200 80f6 	bhi.w	8002122 <vKey_Action+0x8a6>
 8001f36:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <vKey_Action+0x878>)
 8001f38:	88db      	ldrh	r3, [r3, #6]
 8001f3a:	3314      	adds	r3, #20
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	4b6d      	ldr	r3, [pc, #436]	; (80020f4 <vKey_Action+0x878>)
 8001f40:	80da      	strh	r2, [r3, #6]
 8001f42:	e0ee      	b.n	8002122 <vKey_Action+0x8a6>
 8001f44:	4b6a      	ldr	r3, [pc, #424]	; (80020f0 <vKey_Action+0x874>)
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	f107 010e 	add.w	r1, r7, #14
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001f50:	f005 f824 	bl	8006f9c <xQueueGenericSend>

			WelderUnit.Mode = WELDER_MODE_CALIBRATION; //Задать режим работы аппарата - калибровка
=======
 8001f50:	f005 f826 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001f54:	4b67      	ldr	r3, [pc, #412]	; (80020f4 <vKey_Action+0x878>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001f5c:	4b65      	ldr	r3, [pc, #404]	; (80020f4 <vKey_Action+0x878>)
 8001f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b62      	ldr	r3, [pc, #392]	; (80020f4 <vKey_Action+0x878>)
 8001f6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001f6e:	e0dc      	b.n	800212a <vKey_Action+0x8ae>
 8001f70:	4b5f      	ldr	r3, [pc, #380]	; (80020f0 <vKey_Action+0x874>)
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	f107 010e 	add.w	r1, r7, #14
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001f7c:	f005 f80e 	bl	8006f9c <xQueueGenericSend>
			WelderUnit.Xf -= 20; // Дейсвия при длинном нажатии
=======
 8001f7c:	f005 f810 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001f80:	4b5c      	ldr	r3, [pc, #368]	; (80020f4 <vKey_Action+0x878>)
 8001f82:	885b      	ldrh	r3, [r3, #2]
 8001f84:	3b14      	subs	r3, #20
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <vKey_Action+0x878>)
 8001f8a:	805a      	strh	r2, [r3, #2]
 8001f8c:	e0cd      	b.n	800212a <vKey_Action+0x8ae>
 8001f8e:	4b58      	ldr	r3, [pc, #352]	; (80020f0 <vKey_Action+0x874>)
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	f107 010e 	add.w	r1, r7, #14
 8001f96:	2300      	movs	r3, #0
 8001f98:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001f9a:	f004 ffff 	bl	8006f9c <xQueueGenericSend>


			if (WelderUnit.State & WELDER_STATE_CALIBRATED) // Если аппарат откалиброван, то разрешить включение режима АВТО
=======
 8001f9a:	f005 f801 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001f9e:	4b55      	ldr	r3, [pc, #340]	; (80020f4 <vKey_Action+0x878>)
 8001fa0:	7c1b      	ldrb	r3, [r3, #16]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80be 	beq.w	8002128 <vKey_Action+0x8ac>
 8001fac:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <vKey_Action+0x878>)
 8001fae:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d00d      	beq.n	8001fd2 <vKey_Action+0x756>
 8001fb6:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <vKey_Action+0x878>)
 8001fb8:	2203      	movs	r2, #3
 8001fba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001fbe:	4b4d      	ldr	r3, [pc, #308]	; (80020f4 <vKey_Action+0x878>)
 8001fc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <vKey_Action+0x878>)
 8001fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001fd0:	e0aa      	b.n	8002128 <vKey_Action+0x8ac>
 8001fd2:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <vKey_Action+0x878>)
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001fda:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <vKey_Action+0x878>)
 8001fdc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4b43      	ldr	r3, [pc, #268]	; (80020f4 <vKey_Action+0x878>)
 8001fe8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001fec:	e09c      	b.n	8002128 <vKey_Action+0x8ac>
 8001fee:	4b40      	ldr	r3, [pc, #256]	; (80020f0 <vKey_Action+0x874>)
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	f107 010e 	add.w	r1, r7, #14
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	2200      	movs	r2, #0
<<<<<<< HEAD
 8001ffa:	f004 ffcf 	bl	8006f9c <xQueueGenericSend>
			WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
=======
 8001ffa:	f004 ffd1 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8001ffe:	4b3d      	ldr	r3, [pc, #244]	; (80020f4 <vKey_Action+0x878>)
 8002000:	885b      	ldrh	r3, [r3, #2]
 8002002:	3314      	adds	r3, #20
 8002004:	b29a      	uxth	r2, r3
 8002006:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <vKey_Action+0x878>)
 8002008:	805a      	strh	r2, [r3, #2]
 800200a:	e08e      	b.n	800212a <vKey_Action+0x8ae>
 800200c:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <vKey_Action+0x874>)
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	f107 010e 	add.w	r1, r7, #14
 8002014:	2300      	movs	r3, #0
 8002016:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002018:	f004 ffc0 	bl	8006f9c <xQueueGenericSend>

			// Дейсвия при нажатии на кнопку СТАРТ/СТОП в зависимости от установленного режима работы аппарата
			switch(WelderUnit.Mode)
=======
 8002018:	f004 ffc2 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800201c:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <vKey_Action+0x878>)
 800201e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002022:	2b01      	cmp	r3, #1
 8002024:	d002      	beq.n	800202c <vKey_Action+0x7b0>
 8002026:	2b03      	cmp	r3, #3
 8002028:	d009      	beq.n	800203e <vKey_Action+0x7c2>
 800202a:	e07e      	b.n	800212a <vKey_Action+0x8ae>
 800202c:	4b33      	ldr	r3, [pc, #204]	; (80020fc <vKey_Action+0x880>)
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	f107 010d 	add.w	r1, r7, #13
 8002034:	2300      	movs	r3, #0
 8002036:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002038:	f004 ffb0 	bl	8006f9c <xQueueGenericSend>
				break;
=======
 8002038:	f004 ffb2 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800203c:	e00a      	b.n	8002054 <vKey_Action+0x7d8>
 800203e:	2303      	movs	r3, #3
 8002040:	733b      	strb	r3, [r7, #12]
 8002042:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <vKey_Action+0x884>)
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	f107 010c 	add.w	r1, r7, #12
 800204a:	2300      	movs	r3, #0
 800204c:	2200      	movs	r2, #0
<<<<<<< HEAD
 800204e:	f004 ffa5 	bl	8006f9c <xQueueGenericSend>
				break;
=======
 800204e:	f004 ffa7 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002052:	bf00      	nop
 8002054:	e069      	b.n	800212a <vKey_Action+0x8ae>
 8002056:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <vKey_Action+0x878>)
 8002058:	885b      	ldrh	r3, [r3, #2]
 800205a:	3314      	adds	r3, #20
 800205c:	b29a      	uxth	r2, r3
 800205e:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <vKey_Action+0x878>)
 8002060:	805a      	strh	r2, [r3, #2]
 8002062:	e062      	b.n	800212a <vKey_Action+0x8ae>
 8002064:	2305      	movs	r3, #5
 8002066:	73bb      	strb	r3, [r7, #14]
 8002068:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <vKey_Action+0x874>)
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	f107 010e 	add.w	r1, r7, #14
 8002070:	2300      	movs	r3, #0
 8002072:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002074:	f004 ff92 	bl	8006f9c <xQueueGenericSend>
			SaveProgramToFlash2();
=======
 8002074:	f004 ff94 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002078:	f7ff f820 	bl	80010bc <SaveProgramToFlash2>
 800207c:	e055      	b.n	800212a <vKey_Action+0x8ae>
 800207e:	bf00      	nop
 8002080:	e406      	b.n	8001890 <vKey_Action+0x14>
 8002082:	bf00      	nop
 8002084:	e404      	b.n	8001890 <vKey_Action+0x14>
 8002086:	bf00      	nop
 8002088:	e402      	b.n	8001890 <vKey_Action+0x14>
 800208a:	bf00      	nop
 800208c:	e400      	b.n	8001890 <vKey_Action+0x14>
 800208e:	bf00      	nop
 8002090:	f7ff bbfe 	b.w	8001890 <vKey_Action+0x14>
 8002094:	bf00      	nop
 8002096:	f7ff bbfb 	b.w	8001890 <vKey_Action+0x14>
 800209a:	bf00      	nop
 800209c:	f7ff bbf8 	b.w	8001890 <vKey_Action+0x14>
 80020a0:	bf00      	nop
 80020a2:	f7ff bbf5 	b.w	8001890 <vKey_Action+0x14>
 80020a6:	bf00      	nop
 80020a8:	f7ff bbf2 	b.w	8001890 <vKey_Action+0x14>
 80020ac:	bf00      	nop
 80020ae:	f7ff bbef 	b.w	8001890 <vKey_Action+0x14>
 80020b2:	bf00      	nop
 80020b4:	f7ff bbec 	b.w	8001890 <vKey_Action+0x14>
 80020b8:	bf00      	nop
 80020ba:	f7ff bbe9 	b.w	8001890 <vKey_Action+0x14>
 80020be:	bf00      	nop
 80020c0:	f7ff bbe6 	b.w	8001890 <vKey_Action+0x14>
 80020c4:	bf00      	nop
 80020c6:	f7ff bbe3 	b.w	8001890 <vKey_Action+0x14>
 80020ca:	bf00      	nop
 80020cc:	f7ff bbe0 	b.w	8001890 <vKey_Action+0x14>
 80020d0:	bf00      	nop
 80020d2:	f7ff bbdd 	b.w	8001890 <vKey_Action+0x14>
 80020d6:	bf00      	nop
 80020d8:	f7ff bbda 	b.w	8001890 <vKey_Action+0x14>
 80020dc:	bf00      	nop
 80020de:	f7ff bbd7 	b.w	8001890 <vKey_Action+0x14>
 80020e2:	bf00      	nop
 80020e4:	f7ff bbd4 	b.w	8001890 <vKey_Action+0x14>
 80020e8:	bf00      	nop
 80020ea:	f7ff bbd1 	b.w	8001890 <vKey_Action+0x14>
 80020ee:	bf00      	nop
 80020f0:	20003d38 	.word	0x20003d38
 80020f4:	20003d3c 	.word	0x20003d3c
 80020f8:	40011000 	.word	0x40011000
 80020fc:	2000458c 	.word	0x2000458c
 8002100:	20004588 	.word	0x20004588
 8002104:	bf00      	nop
 8002106:	f7ff bbc3 	b.w	8001890 <vKey_Action+0x14>
 800210a:	bf00      	nop
 800210c:	f7ff bbc0 	b.w	8001890 <vKey_Action+0x14>
 8002110:	bf00      	nop
 8002112:	f7ff bbbd 	b.w	8001890 <vKey_Action+0x14>
 8002116:	bf00      	nop
 8002118:	f7ff bbba 	b.w	8001890 <vKey_Action+0x14>
 800211c:	bf00      	nop
 800211e:	f7ff bbb7 	b.w	8001890 <vKey_Action+0x14>
 8002122:	bf00      	nop
 8002124:	f7ff bbb4 	b.w	8001890 <vKey_Action+0x14>
 8002128:	bf00      	nop
 800212a:	f7ff bbb1 	b.w	8001890 <vKey_Action+0x14>
 800212e:	bf00      	nop

08002130 <vWelder_Run>:
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	4b64      	ldr	r3, [pc, #400]	; (80022cc <vWelder_Run+0x19c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f107 010e 	add.w	r1, r7, #14
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	4618      	mov	r0, r3
<<<<<<< HEAD
 8002146:	f005 f881 	bl	800724c <xQueueReceive>

		if (lReceivedValue == Welder_Run && ((WelderUnit.State & 0x02) == 0x02) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) ) // Если пришла команда на начло варки и каретка откалибрована и задняя дверца закрыта
=======
 8002146:	f005 f883 	bl	8007250 <xQueueReceive>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800214a:	7bbb      	ldrb	r3, [r7, #14]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d1f3      	bne.n	8002138 <vWelder_Run+0x8>
 8002150:	4b5f      	ldr	r3, [pc, #380]	; (80022d0 <vWelder_Run+0x1a0>)
 8002152:	7c1b      	ldrb	r3, [r3, #16]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ed      	beq.n	8002138 <vWelder_Run+0x8>
 800215c:	4b5c      	ldr	r3, [pc, #368]	; (80022d0 <vWelder_Run+0x1a0>)
 800215e:	7c1b      	ldrb	r3, [r3, #16]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0e7      	beq.n	8002138 <vWelder_Run+0x8>
 8002168:	2305      	movs	r3, #5
 800216a:	737b      	strb	r3, [r7, #13]
 800216c:	4b59      	ldr	r3, [pc, #356]	; (80022d4 <vWelder_Run+0x1a4>)
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	f107 010d 	add.w	r1, r7, #13
 8002174:	2300      	movs	r3, #0
 8002176:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002178:	f004 ff10 	bl	8006f9c <xQueueGenericSend>

		if (WelderUnit.Position != WelderUnit.Xs) // Если текущая позиция каретки не равна стартовой позиции, то занять её
=======
 8002178:	f004 ff12 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800217c:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <vWelder_Run+0x1a0>)
 800217e:	889a      	ldrh	r2, [r3, #4]
 8002180:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <vWelder_Run+0x1a0>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d02e      	beq.n	80021e6 <vWelder_Run+0xb6>
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <vWelder_Run+0x1a0>)
 800218e:	881a      	ldrh	r2, [r3, #0]
 8002190:	4b4f      	ldr	r3, [pc, #316]	; (80022d0 <vWelder_Run+0x1a0>)
 8002192:	811a      	strh	r2, [r3, #8]
 8002194:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <vWelder_Run+0x1a8>)
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	f107 010f 	add.w	r1, r7, #15
 800219c:	2300      	movs	r3, #0
 800219e:	2200      	movs	r2, #0
<<<<<<< HEAD
 80021a0:	f004 fefc 	bl	8006f9c <xQueueGenericSend>

			xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Юез этого не работает. В очереди откуда то берутся данные
=======
 80021a0:	f004 fefe 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80021a4:	4b4d      	ldr	r3, [pc, #308]	; (80022dc <vWelder_Run+0x1ac>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f107 010e 	add.w	r1, r7, #14
 80021ac:	2200      	movs	r2, #0
 80021ae:	4618      	mov	r0, r3
<<<<<<< HEAD
 80021b0:	f005 f84c 	bl	800724c <xQueueReceive>
			xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Юез этого не работает. В очереди откуда то берутся данные
=======
 80021b0:	f005 f84e 	bl	8007250 <xQueueReceive>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80021b4:	4b49      	ldr	r3, [pc, #292]	; (80022dc <vWelder_Run+0x1ac>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f107 010e 	add.w	r1, r7, #14
 80021bc:	2200      	movs	r2, #0
 80021be:	4618      	mov	r0, r3
<<<<<<< HEAD
 80021c0:	f005 f844 	bl	800724c <xQueueReceive>
			xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Юез этого не работает. В очереди откуда то берутся данные
=======
 80021c0:	f005 f846 	bl	8007250 <xQueueReceive>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80021c4:	4b45      	ldr	r3, [pc, #276]	; (80022dc <vWelder_Run+0x1ac>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f107 010e 	add.w	r1, r7, #14
 80021cc:	2200      	movs	r2, #0
 80021ce:	4618      	mov	r0, r3
<<<<<<< HEAD
 80021d0:	f005 f83c 	bl	800724c <xQueueReceive>
			xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
=======
 80021d0:	f005 f83e 	bl	8007250 <xQueueReceive>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80021d4:	4b41      	ldr	r3, [pc, #260]	; (80022dc <vWelder_Run+0x1ac>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f107 010e 	add.w	r1, r7, #14
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295
 80021e0:	4618      	mov	r0, r3
<<<<<<< HEAD
 80021e2:	f005 f833 	bl	800724c <xQueueReceive>
		}

		if (lReceivedValue == Carriage_Done) // Если каретка на заданной позиции
=======
 80021e2:	f005 f835 	bl	8007250 <xQueueReceive>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80021e6:	7bbb      	ldrb	r3, [r7, #14]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d1a5      	bne.n	8002138 <vWelder_Run+0x8>
 80021ec:	2200      	movs	r2, #0
 80021ee:	2106      	movs	r1, #6
 80021f0:	483b      	ldr	r0, [pc, #236]	; (80022e0 <vWelder_Run+0x1b0>)
<<<<<<< HEAD
 80021f2:	f002 f98e 	bl	8004512 <HAL_GPIO_WritePin>
		vTaskDelay(WelderUnit.Delay_s * 100 / portTICK_RATE_MS);
=======
 80021f2:	f002 f990 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80021f6:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <vWelder_Run+0x1a0>)
 80021f8:	7a9b      	ldrb	r3, [r3, #10]
 80021fa:	461a      	mov	r2, r3
 80021fc:	2364      	movs	r3, #100	; 0x64
 80021fe:	fb03 f302 	mul.w	r3, r3, r2
 8002202:	4618      	mov	r0, r3
<<<<<<< HEAD
 8002204:	f005 fd10 	bl	8007c28 <vTaskDelay>
		SYNC_ARC_ON
 8002208:	2201      	movs	r2, #1
 800220a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800220e:	4835      	ldr	r0, [pc, #212]	; (80022e4 <vWelder_Run+0x1b4>)
 8002210:	f002 f97f 	bl	8004512 <HAL_GPIO_WritePin>

		vTaskDelay(WelderUnit.Delay_s * 100 / portTICK_RATE_MS);
=======
 8002204:	f005 fd12 	bl	8007c2c <vTaskDelay>
 8002208:	2201      	movs	r2, #1
 800220a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800220e:	4835      	ldr	r0, [pc, #212]	; (80022e4 <vWelder_Run+0x1b4>)
 8002210:	f002 f981 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002214:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <vWelder_Run+0x1a0>)
 8002216:	7a9b      	ldrb	r3, [r3, #10]
 8002218:	461a      	mov	r2, r3
 800221a:	2364      	movs	r3, #100	; 0x64
 800221c:	fb03 f302 	mul.w	r3, r3, r2
 8002220:	4618      	mov	r0, r3
<<<<<<< HEAD
 8002222:	f005 fd01 	bl	8007c28 <vTaskDelay>

		WelderUnit.GoTo = WelderUnit.Xf;
=======
 8002222:	f005 fd03 	bl	8007c2c <vTaskDelay>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002226:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <vWelder_Run+0x1a0>)
 8002228:	885a      	ldrh	r2, [r3, #2]
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <vWelder_Run+0x1a0>)
 800222c:	811a      	strh	r2, [r3, #8]
 800222e:	2301      	movs	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <vWelder_Run+0x1a8>)
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	f107 010f 	add.w	r1, r7, #15
 800223a:	2300      	movs	r3, #0
 800223c:	2200      	movs	r2, #0
<<<<<<< HEAD
 800223e:	f004 fead 	bl	8006f9c <xQueueGenericSend>

		xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
=======
 800223e:	f004 feaf 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <vWelder_Run+0x1ac>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f107 010e 	add.w	r1, r7, #14
 800224a:	f04f 32ff 	mov.w	r2, #4294967295
 800224e:	4618      	mov	r0, r3
<<<<<<< HEAD
 8002250:	f004 fffc 	bl	800724c <xQueueReceive>

		vTaskDelay(WelderUnit.Delay_f * 100 / portTICK_RATE_MS);
=======
 8002250:	f004 fffe 	bl	8007250 <xQueueReceive>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <vWelder_Run+0x1a0>)
 8002256:	7adb      	ldrb	r3, [r3, #11]
 8002258:	461a      	mov	r2, r3
 800225a:	2364      	movs	r3, #100	; 0x64
 800225c:	fb03 f302 	mul.w	r3, r3, r2
 8002260:	4618      	mov	r0, r3
<<<<<<< HEAD
 8002262:	f005 fce1 	bl	8007c28 <vTaskDelay>

		SYNC_ARC_OFF
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800226c:	481d      	ldr	r0, [pc, #116]	; (80022e4 <vWelder_Run+0x1b4>)
 800226e:	f002 f950 	bl	8004512 <HAL_GPIO_WritePin>

		beep = beep_3short;
=======
 8002262:	f005 fce3 	bl	8007c2c <vTaskDelay>
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800226c:	481d      	ldr	r0, [pc, #116]	; (80022e4 <vWelder_Run+0x1b4>)
 800226e:	f002 f952 	bl	8004516 <HAL_GPIO_WritePin>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002272:	2304      	movs	r3, #4
 8002274:	737b      	strb	r3, [r7, #13]
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <vWelder_Run+0x1a4>)
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	f107 010d 	add.w	r1, r7, #13
 800227e:	2300      	movs	r3, #0
 8002280:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002282:	f004 fe8b 	bl	8006f9c <xQueueGenericSend>

		// Откат каретки

		if (WelderUnit.Position > KICKBACK)
=======
 8002282:	f004 fe8d 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <vWelder_Run+0x1a0>)
 8002288:	889b      	ldrh	r3, [r3, #4]
 800228a:	2bc8      	cmp	r3, #200	; 0xc8
 800228c:	d906      	bls.n	800229c <vWelder_Run+0x16c>
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <vWelder_Run+0x1a0>)
 8002290:	889b      	ldrh	r3, [r3, #4]
 8002292:	3bc8      	subs	r3, #200	; 0xc8
 8002294:	b29a      	uxth	r2, r3
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <vWelder_Run+0x1a0>)
 8002298:	811a      	strh	r2, [r3, #8]
 800229a:	e002      	b.n	80022a2 <vWelder_Run+0x172>
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <vWelder_Run+0x1a0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	811a      	strh	r2, [r3, #8]
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <vWelder_Run+0x1a8>)
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	f107 010f 	add.w	r1, r7, #15
 80022ae:	2300      	movs	r3, #0
 80022b0:	2200      	movs	r2, #0
<<<<<<< HEAD
 80022b2:	f004 fe73 	bl	8006f9c <xQueueGenericSend>
		xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
=======
 80022b2:	f004 fe75 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <vWelder_Run+0x1ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f107 010e 	add.w	r1, r7, #14
 80022be:	f04f 32ff 	mov.w	r2, #4294967295
 80022c2:	4618      	mov	r0, r3
<<<<<<< HEAD
 80022c4:	f004 ffc2 	bl	800724c <xQueueReceive>
		xQueueReceive(qWelderRun, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
=======
 80022c4:	f004 ffc4 	bl	8007250 <xQueueReceive>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80022c8:	e736      	b.n	8002138 <vWelder_Run+0x8>
 80022ca:	bf00      	nop
 80022cc:	20004588 	.word	0x20004588
 80022d0:	20003d3c 	.word	0x20003d3c
 80022d4:	20003d38 	.word	0x20003d38
 80022d8:	20004594 	.word	0x20004594
 80022dc:	20004580 	.word	0x20004580
 80022e0:	40011000 	.word	0x40011000
 80022e4:	40010800 	.word	0x40010800

080022e8 <vCarriage_Calibration>:
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <vCarriage_Calibration+0xcc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f107 010f 	add.w	r1, r7, #15
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	4618      	mov	r0, r3
<<<<<<< HEAD
 80022fe:	f004 ffa5 	bl	800724c <xQueueReceive>



		if (lReceivedValue == Calibrated)
=======
 80022fe:	f004 ffa7 	bl	8007250 <xQueueReceive>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	2b04      	cmp	r3, #4
 8002306:	d1f3      	bne.n	80022f0 <vCarriage_Calibration+0x8>
 8002308:	2201      	movs	r2, #1
 800230a:	2106      	movs	r1, #6
 800230c:	482a      	ldr	r0, [pc, #168]	; (80023b8 <vCarriage_Calibration+0xd0>)
<<<<<<< HEAD
 800230e:	f002 f900 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8002312:	2064      	movs	r0, #100	; 0x64
 8002314:	f005 fc88 	bl	8007c28 <vTaskDelay>

			Carriage_Move(400, 0, 1); // Начать перемещение каретки в сторону концевика
=======
 800230e:	f002 f902 	bl	8004516 <HAL_GPIO_WritePin>
 8002312:	2064      	movs	r0, #100	; 0x64
 8002314:	f005 fc8a 	bl	8007c2c <vTaskDelay>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002318:	2201      	movs	r2, #1
 800231a:	2100      	movs	r1, #0
 800231c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002320:	f7fe fdac 	bl	8000e7c <Carriage_Move>
 8002324:	4b25      	ldr	r3, [pc, #148]	; (80023bc <vCarriage_Calibration+0xd4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f04f 31ff 	mov.w	r1, #4294967295
 800232c:	4618      	mov	r0, r3
<<<<<<< HEAD
 800232e:	f005 f82f 	bl	8007390 <xQueueSemaphoreTake>
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
=======
 800232e:	f005 f831 	bl	8007394 <xQueueSemaphoreTake>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002332:	4b22      	ldr	r3, [pc, #136]	; (80023bc <vCarriage_Calibration+0xd4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f04f 31ff 	mov.w	r1, #4294967295
 800233a:	4618      	mov	r0, r3
<<<<<<< HEAD
 800233c:	f005 f828 	bl	8007390 <xQueueSemaphoreTake>

			Carriage_Move(0, 0, 1); // Стоп
=======
 800233c:	f005 f82a 	bl	8007394 <xQueueSemaphoreTake>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002340:	2201      	movs	r2, #1
 8002342:	2100      	movs	r1, #0
 8002344:	2000      	movs	r0, #0
 8002346:	f7fe fd99 	bl	8000e7c <Carriage_Move>
 800234a:	2201      	movs	r2, #1
 800234c:	2101      	movs	r1, #1
 800234e:	20c8      	movs	r0, #200	; 0xc8
 8002350:	f7fe fd94 	bl	8000e7c <Carriage_Move>
 8002354:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
<<<<<<< HEAD
 8002358:	f005 fc66 	bl	8007c28 <vTaskDelay>

			Carriage_Move(0, 0, 1); // Стоп
=======
 8002358:	f005 fc68 	bl	8007c2c <vTaskDelay>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800235c:	2201      	movs	r2, #1
 800235e:	2100      	movs	r1, #0
 8002360:	2000      	movs	r0, #0
 8002362:	f7fe fd8b 	bl	8000e7c <Carriage_Move>
 8002366:	2064      	movs	r0, #100	; 0x64
<<<<<<< HEAD
 8002368:	f005 fc5e 	bl	8007c28 <vTaskDelay>

			Carriage_Move(24, 0, 1); // Начать перемещение каретки в сторону концевика
=======
 8002368:	f005 fc60 	bl	8007c2c <vTaskDelay>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800236c:	2201      	movs	r2, #1
 800236e:	2100      	movs	r1, #0
 8002370:	2018      	movs	r0, #24
 8002372:	f7fe fd83 	bl	8000e7c <Carriage_Move>
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <vCarriage_Calibration+0xd4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f04f 31ff 	mov.w	r1, #4294967295
 800237e:	4618      	mov	r0, r3
<<<<<<< HEAD
 8002380:	f005 f806 	bl	8007390 <xQueueSemaphoreTake>
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
=======
 8002380:	f005 f808 	bl	8007394 <xQueueSemaphoreTake>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <vCarriage_Calibration+0xd4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	4618      	mov	r0, r3
<<<<<<< HEAD
 800238e:	f004 ffff 	bl	8007390 <xQueueSemaphoreTake>

			Carriage_Move(0, 0, 1); // Стоп
=======
 800238e:	f005 f801 	bl	8007394 <xQueueSemaphoreTake>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002392:	2201      	movs	r2, #1
 8002394:	2100      	movs	r1, #0
 8002396:	2000      	movs	r0, #0
 8002398:	f7fe fd70 	bl	8000e7c <Carriage_Move>
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <vCarriage_Calibration+0xd8>)
 800239e:	7c1b      	ldrb	r3, [r3, #16]
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <vCarriage_Calibration+0xd8>)
 80023a8:	741a      	strb	r2, [r3, #16]
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <vCarriage_Calibration+0xd8>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	809a      	strh	r2, [r3, #4]
 80023b0:	e79e      	b.n	80022f0 <vCarriage_Calibration+0x8>
 80023b2:	bf00      	nop
 80023b4:	2000458c 	.word	0x2000458c
 80023b8:	40011000 	.word	0x40011000
 80023bc:	200045c4 	.word	0x200045c4
 80023c0:	20003d3c 	.word	0x20003d3c

080023c4 <vCarriage_GoTo>:
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <vCarriage_GoTo+0x180>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f107 010b 	add.w	r1, r7, #11
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	4618      	mov	r0, r3
<<<<<<< HEAD
 80023da:	f005 f8a1 	bl	8007520 <xQueuePeek>

		if (lReceivedValue == Cmd_CarriageGoTo)
=======
 80023da:	f005 f8a3 	bl	8007524 <xQueuePeek>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80023de:	7afb      	ldrb	r3, [r7, #11]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d1f3      	bne.n	80023cc <vCarriage_GoTo+0x8>
 80023e4:	4b58      	ldr	r3, [pc, #352]	; (8002548 <vCarriage_GoTo+0x184>)
 80023e6:	89db      	ldrh	r3, [r3, #14]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f86e 	bl	80004d4 <__aeabi_i2d>
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <vCarriage_GoTo+0x188>)
 80023fe:	f7fe f9fd 	bl	80007fc <__aeabi_ddiv>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f7fe fadf 	bl	80009cc <__aeabi_d2uiz>
 800240e:	4603      	mov	r3, r0
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b4d      	ldr	r3, [pc, #308]	; (8002548 <vCarriage_GoTo+0x184>)
 8002414:	809a      	strh	r2, [r3, #4]
 8002416:	4b4c      	ldr	r3, [pc, #304]	; (8002548 <vCarriage_GoTo+0x184>)
 8002418:	891b      	ldrh	r3, [r3, #8]
 800241a:	461a      	mov	r2, r3
 800241c:	4b4a      	ldr	r3, [pc, #296]	; (8002548 <vCarriage_GoTo+0x184>)
 800241e:	889b      	ldrh	r3, [r3, #4]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d11e      	bne.n	8002468 <vCarriage_GoTo+0xa4>
 800242a:	2201      	movs	r2, #1
 800242c:	2101      	movs	r1, #1
 800242e:	2000      	movs	r0, #0
 8002430:	f7fe fd24 	bl	8000e7c <Carriage_Move>
 8002434:	4b44      	ldr	r3, [pc, #272]	; (8002548 <vCarriage_GoTo+0x184>)
 8002436:	7c1b      	ldrb	r3, [r3, #16]
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b42      	ldr	r3, [pc, #264]	; (8002548 <vCarriage_GoTo+0x184>)
 8002440:	741a      	strb	r2, [r3, #16]
 8002442:	2302      	movs	r3, #2
 8002444:	72bb      	strb	r3, [r7, #10]
 8002446:	4b42      	ldr	r3, [pc, #264]	; (8002550 <vCarriage_GoTo+0x18c>)
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	f107 010a 	add.w	r1, r7, #10
 800244e:	2300      	movs	r3, #0
 8002450:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002452:	f004 fda3 	bl	8006f9c <xQueueGenericSend>

			//xQueueSendToBack( qDebug, &SendVal, 0 );

			xQueueReceive(qWelderCmd, &lReceivedValue, portMAX_DELAY );
=======
 8002452:	f004 fda5 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <vCarriage_GoTo+0x180>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f107 010b 	add.w	r1, r7, #11
 800245e:	f04f 32ff 	mov.w	r2, #4294967295
 8002462:	4618      	mov	r0, r3
<<<<<<< HEAD
 8002464:	f004 fef2 	bl	800724c <xQueueReceive>

		}

		if (dX > 0) // Если двигать в сторону концевика
=======
 8002464:	f004 fef4 	bl	8007250 <xQueueReceive>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	dd20      	ble.n	80024b0 <vCarriage_GoTo+0xec>
 800246e:	4b36      	ldr	r3, [pc, #216]	; (8002548 <vCarriage_GoTo+0x184>)
 8002470:	889a      	ldrh	r2, [r3, #4]
 8002472:	4b35      	ldr	r3, [pc, #212]	; (8002548 <vCarriage_GoTo+0x184>)
 8002474:	891b      	ldrh	r3, [r3, #8]
 8002476:	429a      	cmp	r2, r3
 8002478:	d81a      	bhi.n	80024b0 <vCarriage_GoTo+0xec>
 800247a:	4b33      	ldr	r3, [pc, #204]	; (8002548 <vCarriage_GoTo+0x184>)
 800247c:	7c1b      	ldrb	r3, [r3, #16]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d114      	bne.n	80024b0 <vCarriage_GoTo+0xec>
 8002486:	4b30      	ldr	r3, [pc, #192]	; (8002548 <vCarriage_GoTo+0x184>)
 8002488:	88db      	ldrh	r3, [r3, #6]
 800248a:	2201      	movs	r2, #1
 800248c:	2101      	movs	r1, #1
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fcf4 	bl	8000e7c <Carriage_Move>
 8002494:	4b2c      	ldr	r3, [pc, #176]	; (8002548 <vCarriage_GoTo+0x184>)
 8002496:	7c1b      	ldrb	r3, [r3, #16]
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <vCarriage_GoTo+0x184>)
 80024a0:	741a      	strb	r2, [r3, #16]
 80024a2:	4b29      	ldr	r3, [pc, #164]	; (8002548 <vCarriage_GoTo+0x184>)
 80024a4:	7c1b      	ldrb	r3, [r3, #16]
 80024a6:	f023 0304 	bic.w	r3, r3, #4
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b26      	ldr	r3, [pc, #152]	; (8002548 <vCarriage_GoTo+0x184>)
 80024ae:	741a      	strb	r2, [r3, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	da20      	bge.n	80024f8 <vCarriage_GoTo+0x134>
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <vCarriage_GoTo+0x184>)
 80024b8:	889a      	ldrh	r2, [r3, #4]
 80024ba:	4b23      	ldr	r3, [pc, #140]	; (8002548 <vCarriage_GoTo+0x184>)
 80024bc:	891b      	ldrh	r3, [r3, #8]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d31a      	bcc.n	80024f8 <vCarriage_GoTo+0x134>
 80024c2:	4b21      	ldr	r3, [pc, #132]	; (8002548 <vCarriage_GoTo+0x184>)
 80024c4:	7c1b      	ldrb	r3, [r3, #16]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d114      	bne.n	80024f8 <vCarriage_GoTo+0x134>
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <vCarriage_GoTo+0x184>)
 80024d0:	88db      	ldrh	r3, [r3, #6]
 80024d2:	2201      	movs	r2, #1
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fcd0 	bl	8000e7c <Carriage_Move>
 80024dc:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <vCarriage_GoTo+0x184>)
 80024de:	7c1b      	ldrb	r3, [r3, #16]
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <vCarriage_GoTo+0x184>)
 80024e8:	741a      	strb	r2, [r3, #16]
 80024ea:	4b17      	ldr	r3, [pc, #92]	; (8002548 <vCarriage_GoTo+0x184>)
 80024ec:	7c1b      	ldrb	r3, [r3, #16]
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <vCarriage_GoTo+0x184>)
 80024f6:	741a      	strb	r2, [r3, #16]
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <vCarriage_GoTo+0x190>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002500:	4618      	mov	r0, r3
 8002502:	f004 ff45 	bl	8007390 <xQueueSemaphoreTake>
 8002506:	4603      	mov	r3, r0
 8002508:	2b01      	cmp	r3, #1
 800250a:	f47f af5f 	bne.w	80023cc <vCarriage_GoTo+0x8>
 800250e:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <vCarriage_GoTo+0x184>)
 8002510:	7c1b      	ldrb	r3, [r3, #16]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <vCarriage_GoTo+0x162>
 800251a:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <vCarriage_GoTo+0x184>)
 800251c:	89db      	ldrh	r3, [r3, #14]
 800251e:	3301      	adds	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <vCarriage_GoTo+0x184>)
 8002524:	81da      	strh	r2, [r3, #14]
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <vCarriage_GoTo+0x184>)
 8002528:	7c1b      	ldrb	r3, [r3, #16]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	f43f af4c 	beq.w	80023cc <vCarriage_GoTo+0x8>
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <vCarriage_GoTo+0x184>)
 8002536:	89db      	ldrh	r3, [r3, #14]
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	4b02      	ldr	r3, [pc, #8]	; (8002548 <vCarriage_GoTo+0x184>)
 800253e:	81da      	strh	r2, [r3, #14]
 8002540:	e744      	b.n	80023cc <vCarriage_GoTo+0x8>
 8002542:	bf00      	nop
 8002544:	20004594 	.word	0x20004594
 8002548:	20003d3c 	.word	0x20003d3c
 800254c:	40690000 	.word	0x40690000
 8002550:	20004580 	.word	0x20004580
 8002554:	20003d60 	.word	0x20003d60

08002558 <vKeyScan>:
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	2064      	movs	r0, #100	; 0x64
<<<<<<< HEAD
 8002562:	f005 fb61 	bl	8007c28 <vTaskDelay>

	for(;;)
	{
		PCB_KeyScan();
=======
 8002562:	f005 fb63 	bl	8007c2c <vTaskDelay>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002566:	f7fe fcd1 	bl	8000f0c <PCB_KeyScan>
 800256a:	f7fe fce5 	bl	8000f38 <PCB_InputsScan>
 800256e:	4ba9      	ldr	r3, [pc, #676]	; (8002814 <vKeyScan+0x2bc>)
 8002570:	7f5b      	ldrb	r3, [r3, #29]
 8002572:	2b80      	cmp	r3, #128	; 0x80
 8002574:	d12f      	bne.n	80025d6 <vKeyScan+0x7e>
 8002576:	4ba8      	ldr	r3, [pc, #672]	; (8002818 <vKeyScan+0x2c0>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b04      	cmp	r3, #4
 800257c:	d906      	bls.n	800258c <vKeyScan+0x34>
 800257e:	4ba6      	ldr	r3, [pc, #664]	; (8002818 <vKeyScan+0x2c0>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b06      	cmp	r3, #6
 8002584:	d002      	beq.n	800258c <vKeyScan+0x34>
 8002586:	4ba4      	ldr	r3, [pc, #656]	; (8002818 <vKeyScan+0x2c0>)
 8002588:	2207      	movs	r2, #7
 800258a:	701a      	strb	r2, [r3, #0]
 800258c:	4ba2      	ldr	r3, [pc, #648]	; (8002818 <vKeyScan+0x2c0>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b06      	cmp	r3, #6
 8002592:	d005      	beq.n	80025a0 <vKeyScan+0x48>
 8002594:	4ba0      	ldr	r3, [pc, #640]	; (8002818 <vKeyScan+0x2c0>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b9e      	ldr	r3, [pc, #632]	; (8002818 <vKeyScan+0x2c0>)
 800259e:	701a      	strb	r2, [r3, #0]
 80025a0:	4b9d      	ldr	r3, [pc, #628]	; (8002818 <vKeyScan+0x2c0>)
 80025a2:	789b      	ldrb	r3, [r3, #2]
 80025a4:	3301      	adds	r3, #1
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	4b9b      	ldr	r3, [pc, #620]	; (8002818 <vKeyScan+0x2c0>)
 80025aa:	709a      	strb	r2, [r3, #2]
 80025ac:	4b9a      	ldr	r3, [pc, #616]	; (8002818 <vKeyScan+0x2c0>)
 80025ae:	789b      	ldrb	r3, [r3, #2]
 80025b0:	2b32      	cmp	r3, #50	; 0x32
 80025b2:	d924      	bls.n	80025fe <vKeyScan+0xa6>
 80025b4:	2302      	movs	r3, #2
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	4b98      	ldr	r3, [pc, #608]	; (800281c <vKeyScan+0x2c4>)
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	f107 010f 	add.w	r1, r7, #15
 80025c0:	2300      	movs	r3, #0
 80025c2:	2200      	movs	r2, #0
<<<<<<< HEAD
 80025c4:	f004 fcea 	bl	8006f9c <xQueueGenericSend>


				Key.Xs_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 80025c4:	f004 fcec 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80025c8:	4b93      	ldr	r3, [pc, #588]	; (8002818 <vKeyScan+0x2c0>)
 80025ca:	2206      	movs	r2, #6
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	4b92      	ldr	r3, [pc, #584]	; (8002818 <vKeyScan+0x2c0>)
 80025d0:	2225      	movs	r2, #37	; 0x25
 80025d2:	709a      	strb	r2, [r3, #2]
 80025d4:	e013      	b.n	80025fe <vKeyScan+0xa6>
 80025d6:	4b90      	ldr	r3, [pc, #576]	; (8002818 <vKeyScan+0x2c0>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d909      	bls.n	80025f2 <vKeyScan+0x9a>
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
 80025e2:	4b8e      	ldr	r3, [pc, #568]	; (800281c <vKeyScan+0x2c4>)
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	f107 010f 	add.w	r1, r7, #15
 80025ea:	2300      	movs	r3, #0
 80025ec:	2200      	movs	r2, #0
<<<<<<< HEAD
 80025ee:	f004 fcd5 	bl	8006f9c <xQueueGenericSend>
			}

			Key.Xs_ShortPress_L = 0;
=======
 80025ee:	f004 fcd7 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80025f2:	4b89      	ldr	r3, [pc, #548]	; (8002818 <vKeyScan+0x2c0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	4b87      	ldr	r3, [pc, #540]	; (8002818 <vKeyScan+0x2c0>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	709a      	strb	r2, [r3, #2]
 80025fe:	4b85      	ldr	r3, [pc, #532]	; (8002814 <vKeyScan+0x2bc>)
 8002600:	7f5b      	ldrb	r3, [r3, #29]
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	d139      	bne.n	800267a <vKeyScan+0x122>
 8002606:	4b84      	ldr	r3, [pc, #528]	; (8002818 <vKeyScan+0x2c0>)
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	2b04      	cmp	r3, #4
 800260c:	d910      	bls.n	8002630 <vKeyScan+0xd8>
 800260e:	4b82      	ldr	r3, [pc, #520]	; (8002818 <vKeyScan+0x2c0>)
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	2b06      	cmp	r3, #6
 8002614:	d00c      	beq.n	8002630 <vKeyScan+0xd8>
 8002616:	2303      	movs	r3, #3
 8002618:	73fb      	strb	r3, [r7, #15]
 800261a:	4b80      	ldr	r3, [pc, #512]	; (800281c <vKeyScan+0x2c4>)
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	f107 010f 	add.w	r1, r7, #15
 8002622:	2300      	movs	r3, #0
 8002624:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002626:	f004 fcb9 	bl	8006f9c <xQueueGenericSend>

				Key.Xs_ShortPress_R = 0; // Сброс счетика выдержки
=======
 8002626:	f004 fcbb 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800262a:	4b7b      	ldr	r3, [pc, #492]	; (8002818 <vKeyScan+0x2c0>)
 800262c:	2200      	movs	r2, #0
 800262e:	705a      	strb	r2, [r3, #1]
 8002630:	4b79      	ldr	r3, [pc, #484]	; (8002818 <vKeyScan+0x2c0>)
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	2b06      	cmp	r3, #6
 8002636:	d005      	beq.n	8002644 <vKeyScan+0xec>
 8002638:	4b77      	ldr	r3, [pc, #476]	; (8002818 <vKeyScan+0x2c0>)
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	3301      	adds	r3, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b75      	ldr	r3, [pc, #468]	; (8002818 <vKeyScan+0x2c0>)
 8002642:	705a      	strb	r2, [r3, #1]
 8002644:	4b74      	ldr	r3, [pc, #464]	; (8002818 <vKeyScan+0x2c0>)
 8002646:	78db      	ldrb	r3, [r3, #3]
 8002648:	3301      	adds	r3, #1
 800264a:	b2da      	uxtb	r2, r3
 800264c:	4b72      	ldr	r3, [pc, #456]	; (8002818 <vKeyScan+0x2c0>)
 800264e:	70da      	strb	r2, [r3, #3]
 8002650:	4b71      	ldr	r3, [pc, #452]	; (8002818 <vKeyScan+0x2c0>)
 8002652:	78db      	ldrb	r3, [r3, #3]
 8002654:	2b32      	cmp	r3, #50	; 0x32
 8002656:	d916      	bls.n	8002686 <vKeyScan+0x12e>
 8002658:	2304      	movs	r3, #4
 800265a:	73fb      	strb	r3, [r7, #15]
 800265c:	4b6f      	ldr	r3, [pc, #444]	; (800281c <vKeyScan+0x2c4>)
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	f107 010f 	add.w	r1, r7, #15
 8002664:	2300      	movs	r3, #0
 8002666:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002668:	f004 fc98 	bl	8006f9c <xQueueGenericSend>

				Key.Xs_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 8002668:	f004 fc9a 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800266c:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <vKeyScan+0x2c0>)
 800266e:	2206      	movs	r2, #6
 8002670:	705a      	strb	r2, [r3, #1]
 8002672:	4b69      	ldr	r3, [pc, #420]	; (8002818 <vKeyScan+0x2c0>)
 8002674:	2225      	movs	r2, #37	; 0x25
 8002676:	70da      	strb	r2, [r3, #3]
 8002678:	e005      	b.n	8002686 <vKeyScan+0x12e>
 800267a:	4b67      	ldr	r3, [pc, #412]	; (8002818 <vKeyScan+0x2c0>)
 800267c:	2200      	movs	r2, #0
 800267e:	705a      	strb	r2, [r3, #1]
 8002680:	4b65      	ldr	r3, [pc, #404]	; (8002818 <vKeyScan+0x2c0>)
 8002682:	2200      	movs	r2, #0
 8002684:	70da      	strb	r2, [r3, #3]
 8002686:	4b63      	ldr	r3, [pc, #396]	; (8002814 <vKeyScan+0x2bc>)
 8002688:	7f5b      	ldrb	r3, [r3, #29]
 800268a:	2b10      	cmp	r3, #16
 800268c:	d139      	bne.n	8002702 <vKeyScan+0x1aa>
 800268e:	4b62      	ldr	r3, [pc, #392]	; (8002818 <vKeyScan+0x2c0>)
 8002690:	791b      	ldrb	r3, [r3, #4]
 8002692:	2b04      	cmp	r3, #4
 8002694:	d910      	bls.n	80026b8 <vKeyScan+0x160>
 8002696:	4b60      	ldr	r3, [pc, #384]	; (8002818 <vKeyScan+0x2c0>)
 8002698:	791b      	ldrb	r3, [r3, #4]
 800269a:	2b06      	cmp	r3, #6
 800269c:	d00c      	beq.n	80026b8 <vKeyScan+0x160>
 800269e:	2305      	movs	r3, #5
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	4b5e      	ldr	r3, [pc, #376]	; (800281c <vKeyScan+0x2c4>)
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	f107 010f 	add.w	r1, r7, #15
 80026aa:	2300      	movs	r3, #0
 80026ac:	2200      	movs	r2, #0
<<<<<<< HEAD
 80026ae:	f004 fc75 	bl	8006f9c <xQueueGenericSend>


				Key.Xf_ShortPress_L = 0; // Сброс счетика выдержки
=======
 80026ae:	f004 fc77 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80026b2:	4b59      	ldr	r3, [pc, #356]	; (8002818 <vKeyScan+0x2c0>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	711a      	strb	r2, [r3, #4]
 80026b8:	4b57      	ldr	r3, [pc, #348]	; (8002818 <vKeyScan+0x2c0>)
 80026ba:	791b      	ldrb	r3, [r3, #4]
 80026bc:	2b06      	cmp	r3, #6
 80026be:	d005      	beq.n	80026cc <vKeyScan+0x174>
 80026c0:	4b55      	ldr	r3, [pc, #340]	; (8002818 <vKeyScan+0x2c0>)
 80026c2:	791b      	ldrb	r3, [r3, #4]
 80026c4:	3301      	adds	r3, #1
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b53      	ldr	r3, [pc, #332]	; (8002818 <vKeyScan+0x2c0>)
 80026ca:	711a      	strb	r2, [r3, #4]
 80026cc:	4b52      	ldr	r3, [pc, #328]	; (8002818 <vKeyScan+0x2c0>)
 80026ce:	799b      	ldrb	r3, [r3, #6]
 80026d0:	3301      	adds	r3, #1
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	4b50      	ldr	r3, [pc, #320]	; (8002818 <vKeyScan+0x2c0>)
 80026d6:	719a      	strb	r2, [r3, #6]
 80026d8:	4b4f      	ldr	r3, [pc, #316]	; (8002818 <vKeyScan+0x2c0>)
 80026da:	799b      	ldrb	r3, [r3, #6]
 80026dc:	2b32      	cmp	r3, #50	; 0x32
 80026de:	d916      	bls.n	800270e <vKeyScan+0x1b6>
 80026e0:	2306      	movs	r3, #6
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	4b4d      	ldr	r3, [pc, #308]	; (800281c <vKeyScan+0x2c4>)
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	f107 010f 	add.w	r1, r7, #15
 80026ec:	2300      	movs	r3, #0
 80026ee:	2200      	movs	r2, #0
<<<<<<< HEAD
 80026f0:	f004 fc54 	bl	8006f9c <xQueueGenericSend>


				Key.Xf_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 80026f0:	f004 fc56 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80026f4:	4b48      	ldr	r3, [pc, #288]	; (8002818 <vKeyScan+0x2c0>)
 80026f6:	2206      	movs	r2, #6
 80026f8:	711a      	strb	r2, [r3, #4]
 80026fa:	4b47      	ldr	r3, [pc, #284]	; (8002818 <vKeyScan+0x2c0>)
 80026fc:	2225      	movs	r2, #37	; 0x25
 80026fe:	719a      	strb	r2, [r3, #6]
 8002700:	e005      	b.n	800270e <vKeyScan+0x1b6>
 8002702:	4b45      	ldr	r3, [pc, #276]	; (8002818 <vKeyScan+0x2c0>)
 8002704:	2200      	movs	r2, #0
 8002706:	711a      	strb	r2, [r3, #4]
 8002708:	4b43      	ldr	r3, [pc, #268]	; (8002818 <vKeyScan+0x2c0>)
 800270a:	2200      	movs	r2, #0
 800270c:	719a      	strb	r2, [r3, #6]
 800270e:	4b41      	ldr	r3, [pc, #260]	; (8002814 <vKeyScan+0x2bc>)
 8002710:	7f5b      	ldrb	r3, [r3, #29]
 8002712:	2b20      	cmp	r3, #32
 8002714:	d139      	bne.n	800278a <vKeyScan+0x232>
 8002716:	4b40      	ldr	r3, [pc, #256]	; (8002818 <vKeyScan+0x2c0>)
 8002718:	795b      	ldrb	r3, [r3, #5]
 800271a:	2b04      	cmp	r3, #4
 800271c:	d910      	bls.n	8002740 <vKeyScan+0x1e8>
 800271e:	4b3e      	ldr	r3, [pc, #248]	; (8002818 <vKeyScan+0x2c0>)
 8002720:	795b      	ldrb	r3, [r3, #5]
 8002722:	2b06      	cmp	r3, #6
 8002724:	d00c      	beq.n	8002740 <vKeyScan+0x1e8>
 8002726:	2307      	movs	r3, #7
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	4b3c      	ldr	r3, [pc, #240]	; (800281c <vKeyScan+0x2c4>)
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	f107 010f 	add.w	r1, r7, #15
 8002732:	2300      	movs	r3, #0
 8002734:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002736:	f004 fc31 	bl	8006f9c <xQueueGenericSend>


				Key.Xf_ShortPress_R = 0; // Сброс счетика выдержки
=======
 8002736:	f004 fc33 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800273a:	4b37      	ldr	r3, [pc, #220]	; (8002818 <vKeyScan+0x2c0>)
 800273c:	2200      	movs	r2, #0
 800273e:	715a      	strb	r2, [r3, #5]
 8002740:	4b35      	ldr	r3, [pc, #212]	; (8002818 <vKeyScan+0x2c0>)
 8002742:	795b      	ldrb	r3, [r3, #5]
 8002744:	2b06      	cmp	r3, #6
 8002746:	d005      	beq.n	8002754 <vKeyScan+0x1fc>
 8002748:	4b33      	ldr	r3, [pc, #204]	; (8002818 <vKeyScan+0x2c0>)
 800274a:	795b      	ldrb	r3, [r3, #5]
 800274c:	3301      	adds	r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	4b31      	ldr	r3, [pc, #196]	; (8002818 <vKeyScan+0x2c0>)
 8002752:	715a      	strb	r2, [r3, #5]
 8002754:	4b30      	ldr	r3, [pc, #192]	; (8002818 <vKeyScan+0x2c0>)
 8002756:	79db      	ldrb	r3, [r3, #7]
 8002758:	3301      	adds	r3, #1
 800275a:	b2da      	uxtb	r2, r3
 800275c:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <vKeyScan+0x2c0>)
 800275e:	71da      	strb	r2, [r3, #7]
 8002760:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <vKeyScan+0x2c0>)
 8002762:	79db      	ldrb	r3, [r3, #7]
 8002764:	2b32      	cmp	r3, #50	; 0x32
 8002766:	d916      	bls.n	8002796 <vKeyScan+0x23e>
 8002768:	2308      	movs	r3, #8
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <vKeyScan+0x2c4>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	f107 010f 	add.w	r1, r7, #15
 8002774:	2300      	movs	r3, #0
 8002776:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002778:	f004 fc10 	bl	8006f9c <xQueueGenericSend>

				Key.Xf_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 8002778:	f004 fc12 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800277c:	4b26      	ldr	r3, [pc, #152]	; (8002818 <vKeyScan+0x2c0>)
 800277e:	2206      	movs	r2, #6
 8002780:	715a      	strb	r2, [r3, #5]
 8002782:	4b25      	ldr	r3, [pc, #148]	; (8002818 <vKeyScan+0x2c0>)
 8002784:	2225      	movs	r2, #37	; 0x25
 8002786:	71da      	strb	r2, [r3, #7]
 8002788:	e005      	b.n	8002796 <vKeyScan+0x23e>
 800278a:	4b23      	ldr	r3, [pc, #140]	; (8002818 <vKeyScan+0x2c0>)
 800278c:	2200      	movs	r2, #0
 800278e:	715a      	strb	r2, [r3, #5]
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <vKeyScan+0x2c0>)
 8002792:	2200      	movs	r2, #0
 8002794:	71da      	strb	r2, [r3, #7]
 8002796:	4b1f      	ldr	r3, [pc, #124]	; (8002814 <vKeyScan+0x2bc>)
 8002798:	7f5b      	ldrb	r3, [r3, #29]
 800279a:	2b08      	cmp	r3, #8
 800279c:	d140      	bne.n	8002820 <vKeyScan+0x2c8>
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <vKeyScan+0x2c0>)
 80027a0:	7a1b      	ldrb	r3, [r3, #8]
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d910      	bls.n	80027c8 <vKeyScan+0x270>
 80027a6:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <vKeyScan+0x2c0>)
 80027a8:	7a1b      	ldrb	r3, [r3, #8]
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d00c      	beq.n	80027c8 <vKeyScan+0x270>
 80027ae:	2309      	movs	r3, #9
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	4b1a      	ldr	r3, [pc, #104]	; (800281c <vKeyScan+0x2c4>)
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	f107 010f 	add.w	r1, r7, #15
 80027ba:	2300      	movs	r3, #0
 80027bc:	2200      	movs	r2, #0
<<<<<<< HEAD
 80027be:	f004 fbed 	bl	8006f9c <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = 0; // Сброс счетика выдержки
=======
 80027be:	f004 fbef 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <vKeyScan+0x2c0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	721a      	strb	r2, [r3, #8]
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <vKeyScan+0x2c0>)
 80027ca:	7a1b      	ldrb	r3, [r3, #8]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d005      	beq.n	80027dc <vKeyScan+0x284>
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <vKeyScan+0x2c0>)
 80027d2:	7a1b      	ldrb	r3, [r3, #8]
 80027d4:	3301      	adds	r3, #1
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <vKeyScan+0x2c0>)
 80027da:	721a      	strb	r2, [r3, #8]
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <vKeyScan+0x2c0>)
 80027de:	7a9b      	ldrb	r3, [r3, #10]
 80027e0:	3301      	adds	r3, #1
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <vKeyScan+0x2c0>)
 80027e6:	729a      	strb	r2, [r3, #10]
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <vKeyScan+0x2c0>)
 80027ea:	7a9b      	ldrb	r3, [r3, #10]
 80027ec:	2b32      	cmp	r3, #50	; 0x32
 80027ee:	d91d      	bls.n	800282c <vKeyScan+0x2d4>
 80027f0:	230a      	movs	r3, #10
 80027f2:	73fb      	strb	r3, [r7, #15]
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <vKeyScan+0x2c4>)
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	f107 010f 	add.w	r1, r7, #15
 80027fc:	2300      	movs	r3, #0
 80027fe:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002800:	f004 fbcc 	bl	8006f9c <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 8002800:	f004 fbce 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <vKeyScan+0x2c0>)
 8002806:	2206      	movs	r2, #6
 8002808:	721a      	strb	r2, [r3, #8]
 800280a:	4b03      	ldr	r3, [pc, #12]	; (8002818 <vKeyScan+0x2c0>)
 800280c:	2225      	movs	r2, #37	; 0x25
 800280e:	729a      	strb	r2, [r3, #10]
 8002810:	e00c      	b.n	800282c <vKeyScan+0x2d4>
 8002812:	bf00      	nop
 8002814:	20003d3c 	.word	0x20003d3c
 8002818:	200045a0 	.word	0x200045a0
 800281c:	20004590 	.word	0x20004590
 8002820:	4ba9      	ldr	r3, [pc, #676]	; (8002ac8 <vKeyScan+0x570>)
 8002822:	2200      	movs	r2, #0
 8002824:	721a      	strb	r2, [r3, #8]
 8002826:	4ba8      	ldr	r3, [pc, #672]	; (8002ac8 <vKeyScan+0x570>)
 8002828:	2200      	movs	r2, #0
 800282a:	729a      	strb	r2, [r3, #10]
 800282c:	4ba7      	ldr	r3, [pc, #668]	; (8002acc <vKeyScan+0x574>)
 800282e:	7f5b      	ldrb	r3, [r3, #29]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d139      	bne.n	80028a8 <vKeyScan+0x350>
 8002834:	4ba4      	ldr	r3, [pc, #656]	; (8002ac8 <vKeyScan+0x570>)
 8002836:	7a5b      	ldrb	r3, [r3, #9]
 8002838:	2b04      	cmp	r3, #4
 800283a:	d910      	bls.n	800285e <vKeyScan+0x306>
 800283c:	4ba2      	ldr	r3, [pc, #648]	; (8002ac8 <vKeyScan+0x570>)
 800283e:	7a5b      	ldrb	r3, [r3, #9]
 8002840:	2b06      	cmp	r3, #6
 8002842:	d00c      	beq.n	800285e <vKeyScan+0x306>
 8002844:	230b      	movs	r3, #11
 8002846:	73fb      	strb	r3, [r7, #15]
 8002848:	4ba1      	ldr	r3, [pc, #644]	; (8002ad0 <vKeyScan+0x578>)
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	f107 010f 	add.w	r1, r7, #15
 8002850:	2300      	movs	r3, #0
 8002852:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002854:	f004 fba2 	bl	8006f9c <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = 0; // Сброс счетика выдержки
=======
 8002854:	f004 fba4 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002858:	4b9b      	ldr	r3, [pc, #620]	; (8002ac8 <vKeyScan+0x570>)
 800285a:	2200      	movs	r2, #0
 800285c:	725a      	strb	r2, [r3, #9]
 800285e:	4b9a      	ldr	r3, [pc, #616]	; (8002ac8 <vKeyScan+0x570>)
 8002860:	7a5b      	ldrb	r3, [r3, #9]
 8002862:	2b06      	cmp	r3, #6
 8002864:	d005      	beq.n	8002872 <vKeyScan+0x31a>
 8002866:	4b98      	ldr	r3, [pc, #608]	; (8002ac8 <vKeyScan+0x570>)
 8002868:	7a5b      	ldrb	r3, [r3, #9]
 800286a:	3301      	adds	r3, #1
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4b96      	ldr	r3, [pc, #600]	; (8002ac8 <vKeyScan+0x570>)
 8002870:	725a      	strb	r2, [r3, #9]
 8002872:	4b95      	ldr	r3, [pc, #596]	; (8002ac8 <vKeyScan+0x570>)
 8002874:	7adb      	ldrb	r3, [r3, #11]
 8002876:	3301      	adds	r3, #1
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b93      	ldr	r3, [pc, #588]	; (8002ac8 <vKeyScan+0x570>)
 800287c:	72da      	strb	r2, [r3, #11]
 800287e:	4b92      	ldr	r3, [pc, #584]	; (8002ac8 <vKeyScan+0x570>)
 8002880:	7adb      	ldrb	r3, [r3, #11]
 8002882:	2b32      	cmp	r3, #50	; 0x32
 8002884:	d916      	bls.n	80028b4 <vKeyScan+0x35c>
 8002886:	230c      	movs	r3, #12
 8002888:	73fb      	strb	r3, [r7, #15]
 800288a:	4b91      	ldr	r3, [pc, #580]	; (8002ad0 <vKeyScan+0x578>)
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	f107 010f 	add.w	r1, r7, #15
 8002892:	2300      	movs	r3, #0
 8002894:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002896:	f004 fb81 	bl	8006f9c <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 8002896:	f004 fb83 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800289a:	4b8b      	ldr	r3, [pc, #556]	; (8002ac8 <vKeyScan+0x570>)
 800289c:	2206      	movs	r2, #6
 800289e:	725a      	strb	r2, [r3, #9]
 80028a0:	4b89      	ldr	r3, [pc, #548]	; (8002ac8 <vKeyScan+0x570>)
 80028a2:	2225      	movs	r2, #37	; 0x25
 80028a4:	72da      	strb	r2, [r3, #11]
 80028a6:	e005      	b.n	80028b4 <vKeyScan+0x35c>
 80028a8:	4b87      	ldr	r3, [pc, #540]	; (8002ac8 <vKeyScan+0x570>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	725a      	strb	r2, [r3, #9]
 80028ae:	4b86      	ldr	r3, [pc, #536]	; (8002ac8 <vKeyScan+0x570>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	72da      	strb	r2, [r3, #11]
 80028b4:	4b85      	ldr	r3, [pc, #532]	; (8002acc <vKeyScan+0x574>)
 80028b6:	7f5b      	ldrb	r3, [r3, #29]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d139      	bne.n	8002930 <vKeyScan+0x3d8>
 80028bc:	4b82      	ldr	r3, [pc, #520]	; (8002ac8 <vKeyScan+0x570>)
 80028be:	7b1b      	ldrb	r3, [r3, #12]
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d910      	bls.n	80028e6 <vKeyScan+0x38e>
 80028c4:	4b80      	ldr	r3, [pc, #512]	; (8002ac8 <vKeyScan+0x570>)
 80028c6:	7b1b      	ldrb	r3, [r3, #12]
 80028c8:	2b06      	cmp	r3, #6
 80028ca:	d00c      	beq.n	80028e6 <vKeyScan+0x38e>
 80028cc:	230d      	movs	r3, #13
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	4b7f      	ldr	r3, [pc, #508]	; (8002ad0 <vKeyScan+0x578>)
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	f107 010f 	add.w	r1, r7, #15
 80028d8:	2300      	movs	r3, #0
 80028da:	2200      	movs	r2, #0
<<<<<<< HEAD
 80028dc:	f004 fb5e 	bl	8006f9c <xQueueGenericSend>

				Key.Speed_ShortPress_L = 0; // Сброс счетика выдержки
=======
 80028dc:	f004 fb60 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80028e0:	4b79      	ldr	r3, [pc, #484]	; (8002ac8 <vKeyScan+0x570>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	731a      	strb	r2, [r3, #12]
 80028e6:	4b78      	ldr	r3, [pc, #480]	; (8002ac8 <vKeyScan+0x570>)
 80028e8:	7b1b      	ldrb	r3, [r3, #12]
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d005      	beq.n	80028fa <vKeyScan+0x3a2>
 80028ee:	4b76      	ldr	r3, [pc, #472]	; (8002ac8 <vKeyScan+0x570>)
 80028f0:	7b1b      	ldrb	r3, [r3, #12]
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4b74      	ldr	r3, [pc, #464]	; (8002ac8 <vKeyScan+0x570>)
 80028f8:	731a      	strb	r2, [r3, #12]
 80028fa:	4b73      	ldr	r3, [pc, #460]	; (8002ac8 <vKeyScan+0x570>)
 80028fc:	7b9b      	ldrb	r3, [r3, #14]
 80028fe:	3301      	adds	r3, #1
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b71      	ldr	r3, [pc, #452]	; (8002ac8 <vKeyScan+0x570>)
 8002904:	739a      	strb	r2, [r3, #14]
 8002906:	4b70      	ldr	r3, [pc, #448]	; (8002ac8 <vKeyScan+0x570>)
 8002908:	7b9b      	ldrb	r3, [r3, #14]
 800290a:	2b32      	cmp	r3, #50	; 0x32
 800290c:	d916      	bls.n	800293c <vKeyScan+0x3e4>
 800290e:	230e      	movs	r3, #14
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	4b6f      	ldr	r3, [pc, #444]	; (8002ad0 <vKeyScan+0x578>)
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	f107 010f 	add.w	r1, r7, #15
 800291a:	2300      	movs	r3, #0
 800291c:	2200      	movs	r2, #0
<<<<<<< HEAD
 800291e:	f004 fb3d 	bl	8006f9c <xQueueGenericSend>

				Key.Speed_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 800291e:	f004 fb3f 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002922:	4b69      	ldr	r3, [pc, #420]	; (8002ac8 <vKeyScan+0x570>)
 8002924:	2206      	movs	r2, #6
 8002926:	731a      	strb	r2, [r3, #12]
 8002928:	4b67      	ldr	r3, [pc, #412]	; (8002ac8 <vKeyScan+0x570>)
 800292a:	2225      	movs	r2, #37	; 0x25
 800292c:	739a      	strb	r2, [r3, #14]
 800292e:	e005      	b.n	800293c <vKeyScan+0x3e4>
 8002930:	4b65      	ldr	r3, [pc, #404]	; (8002ac8 <vKeyScan+0x570>)
 8002932:	2200      	movs	r2, #0
 8002934:	731a      	strb	r2, [r3, #12]
 8002936:	4b64      	ldr	r3, [pc, #400]	; (8002ac8 <vKeyScan+0x570>)
 8002938:	2200      	movs	r2, #0
 800293a:	739a      	strb	r2, [r3, #14]
 800293c:	4b63      	ldr	r3, [pc, #396]	; (8002acc <vKeyScan+0x574>)
 800293e:	7f5b      	ldrb	r3, [r3, #29]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d139      	bne.n	80029b8 <vKeyScan+0x460>
 8002944:	4b60      	ldr	r3, [pc, #384]	; (8002ac8 <vKeyScan+0x570>)
 8002946:	7b5b      	ldrb	r3, [r3, #13]
 8002948:	2b04      	cmp	r3, #4
 800294a:	d910      	bls.n	800296e <vKeyScan+0x416>
 800294c:	4b5e      	ldr	r3, [pc, #376]	; (8002ac8 <vKeyScan+0x570>)
 800294e:	7b5b      	ldrb	r3, [r3, #13]
 8002950:	2b06      	cmp	r3, #6
 8002952:	d00c      	beq.n	800296e <vKeyScan+0x416>
 8002954:	230f      	movs	r3, #15
 8002956:	73fb      	strb	r3, [r7, #15]
 8002958:	4b5d      	ldr	r3, [pc, #372]	; (8002ad0 <vKeyScan+0x578>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	f107 010f 	add.w	r1, r7, #15
 8002960:	2300      	movs	r3, #0
 8002962:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002964:	f004 fb1a 	bl	8006f9c <xQueueGenericSend>

				Key.Speed_ShortPress_R = 0; // Сброс счетика выдержки
=======
 8002964:	f004 fb1c 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002968:	4b57      	ldr	r3, [pc, #348]	; (8002ac8 <vKeyScan+0x570>)
 800296a:	2200      	movs	r2, #0
 800296c:	735a      	strb	r2, [r3, #13]
 800296e:	4b56      	ldr	r3, [pc, #344]	; (8002ac8 <vKeyScan+0x570>)
 8002970:	7b5b      	ldrb	r3, [r3, #13]
 8002972:	2b06      	cmp	r3, #6
 8002974:	d005      	beq.n	8002982 <vKeyScan+0x42a>
 8002976:	4b54      	ldr	r3, [pc, #336]	; (8002ac8 <vKeyScan+0x570>)
 8002978:	7b5b      	ldrb	r3, [r3, #13]
 800297a:	3301      	adds	r3, #1
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4b52      	ldr	r3, [pc, #328]	; (8002ac8 <vKeyScan+0x570>)
 8002980:	735a      	strb	r2, [r3, #13]
 8002982:	4b51      	ldr	r3, [pc, #324]	; (8002ac8 <vKeyScan+0x570>)
 8002984:	7bdb      	ldrb	r3, [r3, #15]
 8002986:	3301      	adds	r3, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b4f      	ldr	r3, [pc, #316]	; (8002ac8 <vKeyScan+0x570>)
 800298c:	73da      	strb	r2, [r3, #15]
 800298e:	4b4e      	ldr	r3, [pc, #312]	; (8002ac8 <vKeyScan+0x570>)
 8002990:	7bdb      	ldrb	r3, [r3, #15]
 8002992:	2b32      	cmp	r3, #50	; 0x32
 8002994:	d916      	bls.n	80029c4 <vKeyScan+0x46c>
 8002996:	2310      	movs	r3, #16
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	4b4d      	ldr	r3, [pc, #308]	; (8002ad0 <vKeyScan+0x578>)
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	f107 010f 	add.w	r1, r7, #15
 80029a2:	2300      	movs	r3, #0
 80029a4:	2200      	movs	r2, #0
<<<<<<< HEAD
 80029a6:	f004 faf9 	bl	8006f9c <xQueueGenericSend>

				Key.Speed_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 80029a6:	f004 fafb 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <vKeyScan+0x570>)
 80029ac:	2206      	movs	r2, #6
 80029ae:	735a      	strb	r2, [r3, #13]
 80029b0:	4b45      	ldr	r3, [pc, #276]	; (8002ac8 <vKeyScan+0x570>)
 80029b2:	2225      	movs	r2, #37	; 0x25
 80029b4:	73da      	strb	r2, [r3, #15]
 80029b6:	e005      	b.n	80029c4 <vKeyScan+0x46c>
 80029b8:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <vKeyScan+0x570>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	735a      	strb	r2, [r3, #13]
 80029be:	4b42      	ldr	r3, [pc, #264]	; (8002ac8 <vKeyScan+0x570>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	73da      	strb	r2, [r3, #15]
 80029c4:	4b41      	ldr	r3, [pc, #260]	; (8002acc <vKeyScan+0x574>)
 80029c6:	7f9b      	ldrb	r3, [r3, #30]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d139      	bne.n	8002a40 <vKeyScan+0x4e8>
 80029cc:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <vKeyScan+0x570>)
 80029ce:	7c1b      	ldrb	r3, [r3, #16]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d910      	bls.n	80029f6 <vKeyScan+0x49e>
 80029d4:	4b3c      	ldr	r3, [pc, #240]	; (8002ac8 <vKeyScan+0x570>)
 80029d6:	7c1b      	ldrb	r3, [r3, #16]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d00c      	beq.n	80029f6 <vKeyScan+0x49e>
 80029dc:	2311      	movs	r3, #17
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <vKeyScan+0x578>)
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	f107 010f 	add.w	r1, r7, #15
 80029e8:	2300      	movs	r3, #0
 80029ea:	2200      	movs	r2, #0
<<<<<<< HEAD
 80029ec:	f004 fad6 	bl	8006f9c <xQueueGenericSend>

				Key.Delay_f_ShortPress_L = 0; // Сброс счетика выдержки
=======
 80029ec:	f004 fad8 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80029f0:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <vKeyScan+0x570>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	741a      	strb	r2, [r3, #16]
 80029f6:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <vKeyScan+0x570>)
 80029f8:	7c1b      	ldrb	r3, [r3, #16]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d005      	beq.n	8002a0a <vKeyScan+0x4b2>
 80029fe:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <vKeyScan+0x570>)
 8002a00:	7c1b      	ldrb	r3, [r3, #16]
 8002a02:	3301      	adds	r3, #1
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <vKeyScan+0x570>)
 8002a08:	741a      	strb	r2, [r3, #16]
 8002a0a:	4b2f      	ldr	r3, [pc, #188]	; (8002ac8 <vKeyScan+0x570>)
 8002a0c:	7c9b      	ldrb	r3, [r3, #18]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <vKeyScan+0x570>)
 8002a14:	749a      	strb	r2, [r3, #18]
 8002a16:	4b2c      	ldr	r3, [pc, #176]	; (8002ac8 <vKeyScan+0x570>)
 8002a18:	7c9b      	ldrb	r3, [r3, #18]
 8002a1a:	2b32      	cmp	r3, #50	; 0x32
 8002a1c:	d916      	bls.n	8002a4c <vKeyScan+0x4f4>
 8002a1e:	2312      	movs	r3, #18
 8002a20:	73fb      	strb	r3, [r7, #15]
 8002a22:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <vKeyScan+0x578>)
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	f107 010f 	add.w	r1, r7, #15
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002a2e:	f004 fab5 	bl	8006f9c <xQueueGenericSend>


				Key.Delay_f_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 8002a2e:	f004 fab7 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002a32:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <vKeyScan+0x570>)
 8002a34:	2206      	movs	r2, #6
 8002a36:	741a      	strb	r2, [r3, #16]
 8002a38:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <vKeyScan+0x570>)
 8002a3a:	2225      	movs	r2, #37	; 0x25
 8002a3c:	749a      	strb	r2, [r3, #18]
 8002a3e:	e005      	b.n	8002a4c <vKeyScan+0x4f4>
 8002a40:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <vKeyScan+0x570>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	741a      	strb	r2, [r3, #16]
 8002a46:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <vKeyScan+0x570>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	749a      	strb	r2, [r3, #18]
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <vKeyScan+0x574>)
 8002a4e:	7f9b      	ldrb	r3, [r3, #30]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d13f      	bne.n	8002ad4 <vKeyScan+0x57c>
 8002a54:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <vKeyScan+0x570>)
 8002a56:	7c5b      	ldrb	r3, [r3, #17]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d910      	bls.n	8002a7e <vKeyScan+0x526>
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <vKeyScan+0x570>)
 8002a5e:	7c5b      	ldrb	r3, [r3, #17]
 8002a60:	2b06      	cmp	r3, #6
 8002a62:	d00c      	beq.n	8002a7e <vKeyScan+0x526>
 8002a64:	2313      	movs	r3, #19
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <vKeyScan+0x578>)
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	f107 010f 	add.w	r1, r7, #15
 8002a70:	2300      	movs	r3, #0
 8002a72:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002a74:	f004 fa92 	bl	8006f9c <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = 0; // Сброс счетика выдержки
=======
 8002a74:	f004 fa94 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002a78:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <vKeyScan+0x570>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	745a      	strb	r2, [r3, #17]
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <vKeyScan+0x570>)
 8002a80:	7c5b      	ldrb	r3, [r3, #17]
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d005      	beq.n	8002a92 <vKeyScan+0x53a>
 8002a86:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <vKeyScan+0x570>)
 8002a88:	7c5b      	ldrb	r3, [r3, #17]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <vKeyScan+0x570>)
 8002a90:	745a      	strb	r2, [r3, #17]
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <vKeyScan+0x570>)
 8002a94:	7cdb      	ldrb	r3, [r3, #19]
 8002a96:	3301      	adds	r3, #1
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <vKeyScan+0x570>)
 8002a9c:	74da      	strb	r2, [r3, #19]
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <vKeyScan+0x570>)
 8002aa0:	7cdb      	ldrb	r3, [r3, #19]
 8002aa2:	2b32      	cmp	r3, #50	; 0x32
 8002aa4:	d91c      	bls.n	8002ae0 <vKeyScan+0x588>
 8002aa6:	2314      	movs	r3, #20
 8002aa8:	73fb      	strb	r3, [r7, #15]
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <vKeyScan+0x578>)
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	f107 010f 	add.w	r1, r7, #15
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002ab6:	f004 fa71 	bl	8006f9c <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 8002ab6:	f004 fa73 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002aba:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <vKeyScan+0x570>)
 8002abc:	2206      	movs	r2, #6
 8002abe:	745a      	strb	r2, [r3, #17]
 8002ac0:	4b01      	ldr	r3, [pc, #4]	; (8002ac8 <vKeyScan+0x570>)
 8002ac2:	2225      	movs	r2, #37	; 0x25
 8002ac4:	74da      	strb	r2, [r3, #19]
 8002ac6:	e00b      	b.n	8002ae0 <vKeyScan+0x588>
 8002ac8:	200045a0 	.word	0x200045a0
 8002acc:	20003d3c 	.word	0x20003d3c
 8002ad0:	20004590 	.word	0x20004590
 8002ad4:	4b90      	ldr	r3, [pc, #576]	; (8002d18 <vKeyScan+0x7c0>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	745a      	strb	r2, [r3, #17]
 8002ada:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <vKeyScan+0x7c0>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	74da      	strb	r2, [r3, #19]
 8002ae0:	4b8e      	ldr	r3, [pc, #568]	; (8002d1c <vKeyScan+0x7c4>)
 8002ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d133      	bne.n	8002b52 <vKeyScan+0x5fa>
 8002aea:	4b8c      	ldr	r3, [pc, #560]	; (8002d1c <vKeyScan+0x7c4>)
 8002aec:	7f9b      	ldrb	r3, [r3, #30]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d02f      	beq.n	8002b52 <vKeyScan+0x5fa>
 8002af2:	4b89      	ldr	r3, [pc, #548]	; (8002d18 <vKeyScan+0x7c0>)
 8002af4:	7d1b      	ldrb	r3, [r3, #20]
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d906      	bls.n	8002b08 <vKeyScan+0x5b0>
 8002afa:	4b87      	ldr	r3, [pc, #540]	; (8002d18 <vKeyScan+0x7c0>)
 8002afc:	7d1b      	ldrb	r3, [r3, #20]
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d002      	beq.n	8002b08 <vKeyScan+0x5b0>
 8002b02:	4b85      	ldr	r3, [pc, #532]	; (8002d18 <vKeyScan+0x7c0>)
 8002b04:	2207      	movs	r2, #7
 8002b06:	751a      	strb	r2, [r3, #20]
 8002b08:	4b83      	ldr	r3, [pc, #524]	; (8002d18 <vKeyScan+0x7c0>)
 8002b0a:	7d1b      	ldrb	r3, [r3, #20]
 8002b0c:	2b06      	cmp	r3, #6
 8002b0e:	d005      	beq.n	8002b1c <vKeyScan+0x5c4>
 8002b10:	4b81      	ldr	r3, [pc, #516]	; (8002d18 <vKeyScan+0x7c0>)
 8002b12:	7d1b      	ldrb	r3, [r3, #20]
 8002b14:	3301      	adds	r3, #1
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	4b7f      	ldr	r3, [pc, #508]	; (8002d18 <vKeyScan+0x7c0>)
 8002b1a:	751a      	strb	r2, [r3, #20]
 8002b1c:	4b7e      	ldr	r3, [pc, #504]	; (8002d18 <vKeyScan+0x7c0>)
 8002b1e:	7d9b      	ldrb	r3, [r3, #22]
 8002b20:	3301      	adds	r3, #1
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	4b7c      	ldr	r3, [pc, #496]	; (8002d18 <vKeyScan+0x7c0>)
 8002b26:	759a      	strb	r2, [r3, #22]
 8002b28:	4b7b      	ldr	r3, [pc, #492]	; (8002d18 <vKeyScan+0x7c0>)
 8002b2a:	7d9b      	ldrb	r3, [r3, #22]
 8002b2c:	2b32      	cmp	r3, #50	; 0x32
 8002b2e:	d924      	bls.n	8002b7a <vKeyScan+0x622>
 8002b30:	2316      	movs	r3, #22
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	4b7a      	ldr	r3, [pc, #488]	; (8002d20 <vKeyScan+0x7c8>)
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	f107 010f 	add.w	r1, r7, #15
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002b40:	f004 fa2c 	bl	8006f9c <xQueueGenericSend>

				Key.Program_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 8002b40:	f004 fa2e 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002b44:	4b74      	ldr	r3, [pc, #464]	; (8002d18 <vKeyScan+0x7c0>)
 8002b46:	2206      	movs	r2, #6
 8002b48:	751a      	strb	r2, [r3, #20]
 8002b4a:	4b73      	ldr	r3, [pc, #460]	; (8002d18 <vKeyScan+0x7c0>)
 8002b4c:	2225      	movs	r2, #37	; 0x25
 8002b4e:	759a      	strb	r2, [r3, #22]
 8002b50:	e013      	b.n	8002b7a <vKeyScan+0x622>
 8002b52:	4b71      	ldr	r3, [pc, #452]	; (8002d18 <vKeyScan+0x7c0>)
 8002b54:	7d1b      	ldrb	r3, [r3, #20]
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d909      	bls.n	8002b6e <vKeyScan+0x616>
 8002b5a:	2315      	movs	r3, #21
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	4b70      	ldr	r3, [pc, #448]	; (8002d20 <vKeyScan+0x7c8>)
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	f107 010f 	add.w	r1, r7, #15
 8002b66:	2300      	movs	r3, #0
 8002b68:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002b6a:	f004 fa17 	bl	8006f9c <xQueueGenericSend>
			}

			Key.Program_ShortPress_L = 0;
=======
 8002b6a:	f004 fa19 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002b6e:	4b6a      	ldr	r3, [pc, #424]	; (8002d18 <vKeyScan+0x7c0>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	751a      	strb	r2, [r3, #20]
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <vKeyScan+0x7c0>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	759a      	strb	r2, [r3, #22]
 8002b7a:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <vKeyScan+0x7c4>)
 8002b7c:	7f9b      	ldrb	r3, [r3, #30]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d134      	bne.n	8002bec <vKeyScan+0x694>
 8002b82:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <vKeyScan+0x7c4>)
 8002b84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d02f      	beq.n	8002bec <vKeyScan+0x694>
 8002b8c:	4b62      	ldr	r3, [pc, #392]	; (8002d18 <vKeyScan+0x7c0>)
 8002b8e:	7d5b      	ldrb	r3, [r3, #21]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d906      	bls.n	8002ba2 <vKeyScan+0x64a>
 8002b94:	4b60      	ldr	r3, [pc, #384]	; (8002d18 <vKeyScan+0x7c0>)
 8002b96:	7d5b      	ldrb	r3, [r3, #21]
 8002b98:	2b06      	cmp	r3, #6
 8002b9a:	d002      	beq.n	8002ba2 <vKeyScan+0x64a>
 8002b9c:	4b5e      	ldr	r3, [pc, #376]	; (8002d18 <vKeyScan+0x7c0>)
 8002b9e:	2207      	movs	r2, #7
 8002ba0:	755a      	strb	r2, [r3, #21]
 8002ba2:	4b5d      	ldr	r3, [pc, #372]	; (8002d18 <vKeyScan+0x7c0>)
 8002ba4:	7d5b      	ldrb	r3, [r3, #21]
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d005      	beq.n	8002bb6 <vKeyScan+0x65e>
 8002baa:	4b5b      	ldr	r3, [pc, #364]	; (8002d18 <vKeyScan+0x7c0>)
 8002bac:	7d5b      	ldrb	r3, [r3, #21]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b59      	ldr	r3, [pc, #356]	; (8002d18 <vKeyScan+0x7c0>)
 8002bb4:	755a      	strb	r2, [r3, #21]
 8002bb6:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <vKeyScan+0x7c0>)
 8002bb8:	7ddb      	ldrb	r3, [r3, #23]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4b56      	ldr	r3, [pc, #344]	; (8002d18 <vKeyScan+0x7c0>)
 8002bc0:	75da      	strb	r2, [r3, #23]
 8002bc2:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <vKeyScan+0x7c0>)
 8002bc4:	7ddb      	ldrb	r3, [r3, #23]
 8002bc6:	2b32      	cmp	r3, #50	; 0x32
 8002bc8:	d924      	bls.n	8002c14 <vKeyScan+0x6bc>
 8002bca:	2318      	movs	r3, #24
 8002bcc:	73fb      	strb	r3, [r7, #15]
 8002bce:	4b54      	ldr	r3, [pc, #336]	; (8002d20 <vKeyScan+0x7c8>)
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	f107 010f 	add.w	r1, r7, #15
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002bda:	f004 f9df 	bl	8006f9c <xQueueGenericSend>

				Key.Program_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 8002bda:	f004 f9e1 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002bde:	4b4e      	ldr	r3, [pc, #312]	; (8002d18 <vKeyScan+0x7c0>)
 8002be0:	2206      	movs	r2, #6
 8002be2:	755a      	strb	r2, [r3, #21]
 8002be4:	4b4c      	ldr	r3, [pc, #304]	; (8002d18 <vKeyScan+0x7c0>)
 8002be6:	2225      	movs	r2, #37	; 0x25
 8002be8:	75da      	strb	r2, [r3, #23]
 8002bea:	e013      	b.n	8002c14 <vKeyScan+0x6bc>
 8002bec:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <vKeyScan+0x7c0>)
 8002bee:	7d5b      	ldrb	r3, [r3, #21]
 8002bf0:	2b06      	cmp	r3, #6
 8002bf2:	d909      	bls.n	8002c08 <vKeyScan+0x6b0>
 8002bf4:	2317      	movs	r3, #23
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <vKeyScan+0x7c8>)
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	f107 010f 	add.w	r1, r7, #15
 8002c00:	2300      	movs	r3, #0
 8002c02:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002c04:	f004 f9ca 	bl	8006f9c <xQueueGenericSend>
			}

			Key.Program_ShortPress_R = 0;
=======
 8002c04:	f004 f9cc 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002c08:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <vKeyScan+0x7c0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	755a      	strb	r2, [r3, #21]
 8002c0e:	4b42      	ldr	r3, [pc, #264]	; (8002d18 <vKeyScan+0x7c0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	75da      	strb	r2, [r3, #23]
 8002c14:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <vKeyScan+0x7c4>)
 8002c16:	7f9b      	ldrb	r3, [r3, #30]
 8002c18:	2b80      	cmp	r3, #128	; 0x80
 8002c1a:	d139      	bne.n	8002c90 <vKeyScan+0x738>
 8002c1c:	4b3e      	ldr	r3, [pc, #248]	; (8002d18 <vKeyScan+0x7c0>)
 8002c1e:	7e9b      	ldrb	r3, [r3, #26]
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d910      	bls.n	8002c46 <vKeyScan+0x6ee>
 8002c24:	4b3c      	ldr	r3, [pc, #240]	; (8002d18 <vKeyScan+0x7c0>)
 8002c26:	7e9b      	ldrb	r3, [r3, #26]
 8002c28:	2b06      	cmp	r3, #6
 8002c2a:	d00c      	beq.n	8002c46 <vKeyScan+0x6ee>
 8002c2c:	2323      	movs	r3, #35	; 0x23
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <vKeyScan+0x7c8>)
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	f107 010f 	add.w	r1, r7, #15
 8002c38:	2300      	movs	r3, #0
 8002c3a:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002c3c:	f004 f9ae 	bl	8006f9c <xQueueGenericSend>

				Key.Up_ShortPress = 0; // Сброс счетика выдержки
=======
 8002c3c:	f004 f9b0 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002c40:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <vKeyScan+0x7c0>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	769a      	strb	r2, [r3, #26]
 8002c46:	4b34      	ldr	r3, [pc, #208]	; (8002d18 <vKeyScan+0x7c0>)
 8002c48:	7e9b      	ldrb	r3, [r3, #26]
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d005      	beq.n	8002c5a <vKeyScan+0x702>
 8002c4e:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <vKeyScan+0x7c0>)
 8002c50:	7e9b      	ldrb	r3, [r3, #26]
 8002c52:	3301      	adds	r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b30      	ldr	r3, [pc, #192]	; (8002d18 <vKeyScan+0x7c0>)
 8002c58:	769a      	strb	r2, [r3, #26]
 8002c5a:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <vKeyScan+0x7c0>)
 8002c5c:	7edb      	ldrb	r3, [r3, #27]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <vKeyScan+0x7c0>)
 8002c64:	76da      	strb	r2, [r3, #27]
 8002c66:	4b2c      	ldr	r3, [pc, #176]	; (8002d18 <vKeyScan+0x7c0>)
 8002c68:	7edb      	ldrb	r3, [r3, #27]
 8002c6a:	2b32      	cmp	r3, #50	; 0x32
 8002c6c:	d916      	bls.n	8002c9c <vKeyScan+0x744>
 8002c6e:	2324      	movs	r3, #36	; 0x24
 8002c70:	73fb      	strb	r3, [r7, #15]
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <vKeyScan+0x7c8>)
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	f107 010f 	add.w	r1, r7, #15
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002c7e:	f004 f98d 	bl	8006f9c <xQueueGenericSend>


				Key.Up_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 8002c7e:	f004 f98f 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002c82:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <vKeyScan+0x7c0>)
 8002c84:	2206      	movs	r2, #6
 8002c86:	769a      	strb	r2, [r3, #26]
 8002c88:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <vKeyScan+0x7c0>)
 8002c8a:	2225      	movs	r2, #37	; 0x25
 8002c8c:	76da      	strb	r2, [r3, #27]
 8002c8e:	e005      	b.n	8002c9c <vKeyScan+0x744>
 8002c90:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <vKeyScan+0x7c0>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	769a      	strb	r2, [r3, #26]
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <vKeyScan+0x7c0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	76da      	strb	r2, [r3, #27]
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <vKeyScan+0x7c4>)
 8002c9e:	7f9b      	ldrb	r3, [r3, #30]
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d13f      	bne.n	8002d24 <vKeyScan+0x7cc>
 8002ca4:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <vKeyScan+0x7c0>)
 8002ca6:	7f1b      	ldrb	r3, [r3, #28]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d910      	bls.n	8002cce <vKeyScan+0x776>
 8002cac:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <vKeyScan+0x7c0>)
 8002cae:	7f1b      	ldrb	r3, [r3, #28]
 8002cb0:	2b06      	cmp	r3, #6
 8002cb2:	d00c      	beq.n	8002cce <vKeyScan+0x776>
 8002cb4:	2321      	movs	r3, #33	; 0x21
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <vKeyScan+0x7c8>)
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	f107 010f 	add.w	r1, r7, #15
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002cc4:	f004 f96a 	bl	8006f9c <xQueueGenericSend>

				Key.Down_ShortPress = 0; // Сброс счетика выдержки
=======
 8002cc4:	f004 f96c 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <vKeyScan+0x7c0>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	771a      	strb	r2, [r3, #28]
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <vKeyScan+0x7c0>)
 8002cd0:	7f1b      	ldrb	r3, [r3, #28]
 8002cd2:	2b06      	cmp	r3, #6
 8002cd4:	d005      	beq.n	8002ce2 <vKeyScan+0x78a>
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <vKeyScan+0x7c0>)
 8002cd8:	7f1b      	ldrb	r3, [r3, #28]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <vKeyScan+0x7c0>)
 8002ce0:	771a      	strb	r2, [r3, #28]
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <vKeyScan+0x7c0>)
 8002ce4:	7f5b      	ldrb	r3, [r3, #29]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <vKeyScan+0x7c0>)
 8002cec:	775a      	strb	r2, [r3, #29]
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <vKeyScan+0x7c0>)
 8002cf0:	7f5b      	ldrb	r3, [r3, #29]
 8002cf2:	2b32      	cmp	r3, #50	; 0x32
 8002cf4:	d91c      	bls.n	8002d30 <vKeyScan+0x7d8>
 8002cf6:	2322      	movs	r3, #34	; 0x22
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <vKeyScan+0x7c8>)
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	f107 010f 	add.w	r1, r7, #15
 8002d02:	2300      	movs	r3, #0
 8002d04:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002d06:	f004 f949 	bl	8006f9c <xQueueGenericSend>


				Key.Down_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 8002d06:	f004 f94b 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002d0a:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <vKeyScan+0x7c0>)
 8002d0c:	2206      	movs	r2, #6
 8002d0e:	771a      	strb	r2, [r3, #28]
 8002d10:	4b01      	ldr	r3, [pc, #4]	; (8002d18 <vKeyScan+0x7c0>)
 8002d12:	2225      	movs	r2, #37	; 0x25
 8002d14:	775a      	strb	r2, [r3, #29]
 8002d16:	e00b      	b.n	8002d30 <vKeyScan+0x7d8>
 8002d18:	200045a0 	.word	0x200045a0
 8002d1c:	20003d3c 	.word	0x20003d3c
 8002d20:	20004590 	.word	0x20004590
 8002d24:	4b94      	ldr	r3, [pc, #592]	; (8002f78 <vKeyScan+0xa20>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	771a      	strb	r2, [r3, #28]
 8002d2a:	4b93      	ldr	r3, [pc, #588]	; (8002f78 <vKeyScan+0xa20>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	775a      	strb	r2, [r3, #29]
 8002d30:	4b92      	ldr	r3, [pc, #584]	; (8002f7c <vKeyScan+0xa24>)
 8002d32:	7f9b      	ldrb	r3, [r3, #30]
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d139      	bne.n	8002dac <vKeyScan+0x854>
 8002d38:	4b8f      	ldr	r3, [pc, #572]	; (8002f78 <vKeyScan+0xa20>)
 8002d3a:	7f9b      	ldrb	r3, [r3, #30]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d910      	bls.n	8002d62 <vKeyScan+0x80a>
 8002d40:	4b8d      	ldr	r3, [pc, #564]	; (8002f78 <vKeyScan+0xa20>)
 8002d42:	7f9b      	ldrb	r3, [r3, #30]
 8002d44:	2b06      	cmp	r3, #6
 8002d46:	d00c      	beq.n	8002d62 <vKeyScan+0x80a>
 8002d48:	2319      	movs	r3, #25
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	4b8c      	ldr	r3, [pc, #560]	; (8002f80 <vKeyScan+0xa28>)
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	f107 010f 	add.w	r1, r7, #15
 8002d54:	2300      	movs	r3, #0
 8002d56:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002d58:	f004 f920 	bl	8006f9c <xQueueGenericSend>


				Key.Parking_ShortPress = 0; // Сброс счетика выдержки
=======
 8002d58:	f004 f922 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002d5c:	4b86      	ldr	r3, [pc, #536]	; (8002f78 <vKeyScan+0xa20>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	779a      	strb	r2, [r3, #30]
 8002d62:	4b85      	ldr	r3, [pc, #532]	; (8002f78 <vKeyScan+0xa20>)
 8002d64:	7f9b      	ldrb	r3, [r3, #30]
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d005      	beq.n	8002d76 <vKeyScan+0x81e>
 8002d6a:	4b83      	ldr	r3, [pc, #524]	; (8002f78 <vKeyScan+0xa20>)
 8002d6c:	7f9b      	ldrb	r3, [r3, #30]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b81      	ldr	r3, [pc, #516]	; (8002f78 <vKeyScan+0xa20>)
 8002d74:	779a      	strb	r2, [r3, #30]
 8002d76:	4b80      	ldr	r3, [pc, #512]	; (8002f78 <vKeyScan+0xa20>)
 8002d78:	7fdb      	ldrb	r3, [r3, #31]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b7e      	ldr	r3, [pc, #504]	; (8002f78 <vKeyScan+0xa20>)
 8002d80:	77da      	strb	r2, [r3, #31]
 8002d82:	4b7d      	ldr	r3, [pc, #500]	; (8002f78 <vKeyScan+0xa20>)
 8002d84:	7fdb      	ldrb	r3, [r3, #31]
 8002d86:	2b32      	cmp	r3, #50	; 0x32
 8002d88:	d916      	bls.n	8002db8 <vKeyScan+0x860>
 8002d8a:	231a      	movs	r3, #26
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	4b7c      	ldr	r3, [pc, #496]	; (8002f80 <vKeyScan+0xa28>)
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	f107 010f 	add.w	r1, r7, #15
 8002d96:	2300      	movs	r3, #0
 8002d98:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002d9a:	f004 f8ff 	bl	8006f9c <xQueueGenericSend>

				Key.Parking_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 8002d9a:	f004 f901 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002d9e:	4b76      	ldr	r3, [pc, #472]	; (8002f78 <vKeyScan+0xa20>)
 8002da0:	2206      	movs	r2, #6
 8002da2:	779a      	strb	r2, [r3, #30]
 8002da4:	4b74      	ldr	r3, [pc, #464]	; (8002f78 <vKeyScan+0xa20>)
 8002da6:	2225      	movs	r2, #37	; 0x25
 8002da8:	77da      	strb	r2, [r3, #31]
 8002daa:	e005      	b.n	8002db8 <vKeyScan+0x860>
 8002dac:	4b72      	ldr	r3, [pc, #456]	; (8002f78 <vKeyScan+0xa20>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	779a      	strb	r2, [r3, #30]
 8002db2:	4b71      	ldr	r3, [pc, #452]	; (8002f78 <vKeyScan+0xa20>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	77da      	strb	r2, [r3, #31]
 8002db8:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <vKeyScan+0xa24>)
 8002dba:	7f9b      	ldrb	r3, [r3, #30]
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d144      	bne.n	8002e4a <vKeyScan+0x8f2>
 8002dc0:	4b6d      	ldr	r3, [pc, #436]	; (8002f78 <vKeyScan+0xa20>)
 8002dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d912      	bls.n	8002df0 <vKeyScan+0x898>
 8002dca:	4b6b      	ldr	r3, [pc, #428]	; (8002f78 <vKeyScan+0xa20>)
 8002dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd0:	2b06      	cmp	r3, #6
 8002dd2:	d00d      	beq.n	8002df0 <vKeyScan+0x898>
 8002dd4:	231b      	movs	r3, #27
 8002dd6:	73fb      	strb	r3, [r7, #15]
 8002dd8:	4b69      	ldr	r3, [pc, #420]	; (8002f80 <vKeyScan+0xa28>)
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	f107 010f 	add.w	r1, r7, #15
 8002de0:	2300      	movs	r3, #0
 8002de2:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002de4:	f004 f8da 	bl	8006f9c <xQueueGenericSend>

				Key.Auto_ShortPress = 0; // Сброс счетика выдержки
=======
 8002de4:	f004 f8dc 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002de8:	4b63      	ldr	r3, [pc, #396]	; (8002f78 <vKeyScan+0xa20>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2020 	strb.w	r2, [r3, #32]
 8002df0:	4b61      	ldr	r3, [pc, #388]	; (8002f78 <vKeyScan+0xa20>)
 8002df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d007      	beq.n	8002e0a <vKeyScan+0x8b2>
 8002dfa:	4b5f      	ldr	r3, [pc, #380]	; (8002f78 <vKeyScan+0xa20>)
 8002dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e00:	3301      	adds	r3, #1
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	4b5c      	ldr	r3, [pc, #368]	; (8002f78 <vKeyScan+0xa20>)
 8002e06:	f883 2020 	strb.w	r2, [r3, #32]
 8002e0a:	4b5b      	ldr	r3, [pc, #364]	; (8002f78 <vKeyScan+0xa20>)
 8002e0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e10:	3301      	adds	r3, #1
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	4b58      	ldr	r3, [pc, #352]	; (8002f78 <vKeyScan+0xa20>)
 8002e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002e1a:	4b57      	ldr	r3, [pc, #348]	; (8002f78 <vKeyScan+0xa20>)
 8002e1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e20:	2b32      	cmp	r3, #50	; 0x32
 8002e22:	d91a      	bls.n	8002e5a <vKeyScan+0x902>
 8002e24:	231c      	movs	r3, #28
 8002e26:	73fb      	strb	r3, [r7, #15]
 8002e28:	4b55      	ldr	r3, [pc, #340]	; (8002f80 <vKeyScan+0xa28>)
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	f107 010f 	add.w	r1, r7, #15
 8002e30:	2300      	movs	r3, #0
 8002e32:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002e34:	f004 f8b2 	bl	8006f9c <xQueueGenericSend>

				Key.Auto_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 8002e34:	f004 f8b4 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002e38:	4b4f      	ldr	r3, [pc, #316]	; (8002f78 <vKeyScan+0xa20>)
 8002e3a:	2206      	movs	r2, #6
 8002e3c:	f883 2020 	strb.w	r2, [r3, #32]
 8002e40:	4b4d      	ldr	r3, [pc, #308]	; (8002f78 <vKeyScan+0xa20>)
 8002e42:	2225      	movs	r2, #37	; 0x25
 8002e44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002e48:	e007      	b.n	8002e5a <vKeyScan+0x902>
 8002e4a:	4b4b      	ldr	r3, [pc, #300]	; (8002f78 <vKeyScan+0xa20>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2020 	strb.w	r2, [r3, #32]
 8002e52:	4b49      	ldr	r3, [pc, #292]	; (8002f78 <vKeyScan+0xa20>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002e5a:	4b48      	ldr	r3, [pc, #288]	; (8002f7c <vKeyScan+0xa24>)
 8002e5c:	7f9b      	ldrb	r3, [r3, #30]
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d144      	bne.n	8002eec <vKeyScan+0x994>
 8002e62:	4b45      	ldr	r3, [pc, #276]	; (8002f78 <vKeyScan+0xa20>)
 8002e64:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d912      	bls.n	8002e92 <vKeyScan+0x93a>
 8002e6c:	4b42      	ldr	r3, [pc, #264]	; (8002f78 <vKeyScan+0xa20>)
 8002e6e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d00d      	beq.n	8002e92 <vKeyScan+0x93a>
 8002e76:	231d      	movs	r3, #29
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <vKeyScan+0xa28>)
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	f107 010f 	add.w	r1, r7, #15
 8002e82:	2300      	movs	r3, #0
 8002e84:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002e86:	f004 f889 	bl	8006f9c <xQueueGenericSend>

				Key.StartStop_ShortPress = 0; // Сброс счетика выдержки
=======
 8002e86:	f004 f88b 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <vKeyScan+0xa20>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002e92:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <vKeyScan+0xa20>)
 8002e94:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e98:	2b06      	cmp	r3, #6
 8002e9a:	d007      	beq.n	8002eac <vKeyScan+0x954>
 8002e9c:	4b36      	ldr	r3, [pc, #216]	; (8002f78 <vKeyScan+0xa20>)
 8002e9e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4b34      	ldr	r3, [pc, #208]	; (8002f78 <vKeyScan+0xa20>)
 8002ea8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002eac:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <vKeyScan+0xa20>)
 8002eae:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <vKeyScan+0xa20>)
 8002eb8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8002ebc:	4b2e      	ldr	r3, [pc, #184]	; (8002f78 <vKeyScan+0xa20>)
 8002ebe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002ec2:	2b32      	cmp	r3, #50	; 0x32
 8002ec4:	d91a      	bls.n	8002efc <vKeyScan+0x9a4>
 8002ec6:	231e      	movs	r3, #30
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <vKeyScan+0xa28>)
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	f107 010f 	add.w	r1, r7, #15
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002ed6:	f004 f861 	bl	8006f9c <xQueueGenericSend>

				Key.StartStop_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
=======
 8002ed6:	f004 f863 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002eda:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <vKeyScan+0xa20>)
 8002edc:	2206      	movs	r2, #6
 8002ede:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002ee2:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <vKeyScan+0xa20>)
 8002ee4:	2225      	movs	r2, #37	; 0x25
 8002ee6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8002eea:	e007      	b.n	8002efc <vKeyScan+0x9a4>
 8002eec:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <vKeyScan+0xa20>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <vKeyScan+0xa20>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8002efc:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <vKeyScan+0xa24>)
 8002efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d11f      	bne.n	8002f46 <vKeyScan+0x9ee>
 8002f06:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <vKeyScan+0xa24>)
 8002f08:	7f9b      	ldrb	r3, [r3, #30]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d11b      	bne.n	8002f46 <vKeyScan+0x9ee>
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <vKeyScan+0xa20>)
 8002f10:	7e1b      	ldrb	r3, [r3, #24]
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d906      	bls.n	8002f24 <vKeyScan+0x9cc>
 8002f16:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <vKeyScan+0xa20>)
 8002f18:	7e1b      	ldrb	r3, [r3, #24]
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d002      	beq.n	8002f24 <vKeyScan+0x9cc>
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <vKeyScan+0xa20>)
 8002f20:	2207      	movs	r2, #7
 8002f22:	761a      	strb	r2, [r3, #24]
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <vKeyScan+0xa20>)
 8002f26:	7e1b      	ldrb	r3, [r3, #24]
 8002f28:	2b06      	cmp	r3, #6
 8002f2a:	d005      	beq.n	8002f38 <vKeyScan+0x9e0>
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <vKeyScan+0xa20>)
 8002f2e:	7e1b      	ldrb	r3, [r3, #24]
 8002f30:	3301      	adds	r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <vKeyScan+0xa20>)
 8002f36:	761a      	strb	r2, [r3, #24]
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <vKeyScan+0xa20>)
 8002f3a:	7e5b      	ldrb	r3, [r3, #25]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <vKeyScan+0xa20>)
 8002f42:	765a      	strb	r2, [r3, #25]
 8002f44:	e013      	b.n	8002f6e <vKeyScan+0xa16>
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <vKeyScan+0xa20>)
 8002f48:	7e1b      	ldrb	r3, [r3, #24]
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d909      	bls.n	8002f62 <vKeyScan+0xa0a>
 8002f4e:	231f      	movs	r3, #31
 8002f50:	73fb      	strb	r3, [r7, #15]
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <vKeyScan+0xa28>)
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	f107 010f 	add.w	r1, r7, #15
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2200      	movs	r2, #0
<<<<<<< HEAD
 8002f5e:	f004 f81d 	bl	8006f9c <xQueueGenericSend>
//
//				Key.Program_ShortPress_R = 0;
//				Key.Program_LongPress_R = 0;
			}

			Key.Program_ShortPress_L_and_R = 0;
=======
 8002f5e:	f004 f81f 	bl	8006fa0 <xQueueGenericSend>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <vKeyScan+0xa20>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	761a      	strb	r2, [r3, #24]
 8002f68:	4b03      	ldr	r3, [pc, #12]	; (8002f78 <vKeyScan+0xa20>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	765a      	strb	r2, [r3, #25]
 8002f6e:	2014      	movs	r0, #20
<<<<<<< HEAD
 8002f70:	f004 fe5a 	bl	8007c28 <vTaskDelay>
		PCB_KeyScan();
=======
 8002f70:	f004 fe5c 	bl	8007c2c <vTaskDelay>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002f74:	f7ff baf7 	b.w	8002566 <vKeyScan+0xe>
 8002f78:	200045a0 	.word	0x200045a0
 8002f7c:	20003d3c 	.word	0x20003d3c
 8002f80:	20004590 	.word	0x20004590

08002f84 <vIndicatorPanel_Out>:
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
<<<<<<< HEAD
	WelderUnit.Xs = 10;
 8002f8c:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002f8e:	220a      	movs	r2, #10
 8002f90:	801a      	strh	r2, [r3, #0]
	WelderUnit.Xf = 30;
 8002f92:	4b2b      	ldr	r3, [pc, #172]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002f94:	221e      	movs	r2, #30
 8002f96:	805a      	strh	r2, [r3, #2]
	WelderUnit.Steps = 0;
 8002f98:	4b29      	ldr	r3, [pc, #164]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	81da      	strh	r2, [r3, #14]
	WelderUnit.Delay_s = 10;
 8002f9e:	4b28      	ldr	r3, [pc, #160]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002fa0:	220a      	movs	r2, #10
 8002fa2:	729a      	strb	r2, [r3, #10]
	WelderUnit.Speed = 120;
 8002fa4:	4b26      	ldr	r3, [pc, #152]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002fa6:	2278      	movs	r2, #120	; 0x78
 8002fa8:	80da      	strh	r2, [r3, #6]
	WelderUnit.Delay_f = 20;
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002fac:	2214      	movs	r2, #20
 8002fae:	72da      	strb	r2, [r3, #11]
	WelderUnit.Program = 4;
 8002fb0:	4b23      	ldr	r3, [pc, #140]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	819a      	strh	r2, [r3, #12]

	WelderUnit.GoTo = WelderUnit.Xf;
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <vIndicatorPanel_Out+0xbc>)
=======
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8002f8e:	220a      	movs	r2, #10
 8002f90:	801a      	strh	r2, [r3, #0]
 8002f92:	4b2c      	ldr	r3, [pc, #176]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8002f94:	221e      	movs	r2, #30
 8002f96:	805a      	strh	r2, [r3, #2]
 8002f98:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	81da      	strh	r2, [r3, #14]
 8002f9e:	4b29      	ldr	r3, [pc, #164]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8002fa0:	220a      	movs	r2, #10
 8002fa2:	729a      	strb	r2, [r3, #10]
 8002fa4:	4b27      	ldr	r3, [pc, #156]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8002fa6:	2278      	movs	r2, #120	; 0x78
 8002fa8:	80da      	strh	r2, [r3, #6]
 8002faa:	4b26      	ldr	r3, [pc, #152]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8002fac:	2214      	movs	r2, #20
 8002fae:	72da      	strb	r2, [r3, #11]
 8002fb0:	4b24      	ldr	r3, [pc, #144]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	819a      	strh	r2, [r3, #12]
 8002fb6:	4b23      	ldr	r3, [pc, #140]	; (8003044 <vIndicatorPanel_Out+0xc0>)
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002fb8:	885a      	ldrh	r2, [r3, #2]
 8002fba:	4b21      	ldr	r3, [pc, #132]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002fbc:	811a      	strh	r2, [r3, #8]
<<<<<<< HEAD
	WelderUnit.Position = 0;
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	809a      	strh	r2, [r3, #4]
	WelderUnit.State = 0;
 8002fc4:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	741a      	strb	r2, [r3, #16]

	WelderUnit.IndicatorPanel.Brightness = 2;
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <vIndicatorPanel_Out+0xbc>)
=======
 8002fbe:	4b21      	ldr	r3, [pc, #132]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	809a      	strh	r2, [r3, #4]
 8002fc4:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	741a      	strb	r2, [r3, #16]
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <vIndicatorPanel_Out+0xc0>)
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002fcc:	2202      	movs	r2, #2
 8002fce:	771a      	strb	r2, [r3, #28]
 8002fd0:	f7fd fd72 	bl	8000ab8 <IndicatorPanel_Ini>
<<<<<<< HEAD

	IndicatorPanel_SetBrightness(&WelderUnit.IndicatorPanel);
 8002fd4:	481b      	ldr	r0, [pc, #108]	; (8003044 <vIndicatorPanel_Out+0xc0>)
=======
 8002fd4:	481c      	ldr	r0, [pc, #112]	; (8003048 <vIndicatorPanel_Out+0xc4>)
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8002fd6:	f7fd fe3b 	bl	8000c50 <IndicatorPanel_SetBrightness>
 8002fda:	2064      	movs	r0, #100	; 0x64
<<<<<<< HEAD
 8002fdc:	f004 fe24 	bl	8007c28 <vTaskDelay>

		//PCB_LEDs_OUT(PCB_LEDs_OUT(LEDs_val))



		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002fe2:	7c1b      	ldrb	r3, [r3, #16]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <vIndicatorPanel_Out+0x70>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Position;
 8002fec:	4b14      	ldr	r3, [pc, #80]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002fee:	889a      	ldrh	r2, [r3, #4]
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002ff2:	825a      	strh	r2, [r3, #18]
		}

		if (!(WelderUnit.State & 0x01)) // Если каретка не в движении то отображать точку начала варки
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8002ff6:	7c1b      	ldrb	r3, [r3, #16]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d103      	bne.n	8003008 <vIndicatorPanel_Out+0x84>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Xs;
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8003002:	881a      	ldrh	r2, [r3, #0]
 8003004:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8003006:	825a      	strh	r2, [r3, #18]
		}

		WelderUnit.IndicatorPanel.Xf = WelderUnit.Xf;
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 800300a:	885a      	ldrh	r2, [r3, #2]
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 800300e:	829a      	strh	r2, [r3, #20]
		WelderUnit.IndicatorPanel.Delay_s = WelderUnit.Delay_s;
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8003012:	7a9a      	ldrb	r2, [r3, #10]
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8003016:	759a      	strb	r2, [r3, #22]
		WelderUnit.IndicatorPanel.Speed = WelderUnit.Speed;
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 800301a:	88da      	ldrh	r2, [r3, #6]
 800301c:	4b08      	ldr	r3, [pc, #32]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 800301e:	831a      	strh	r2, [r3, #24]
		WelderUnit.IndicatorPanel.Delay_f = WelderUnit.Delay_f;
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8003022:	7ada      	ldrb	r2, [r3, #11]
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 8003026:	75da      	strb	r2, [r3, #23]
		WelderUnit.IndicatorPanel.Program = WelderUnit.Program;
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 800302a:	899a      	ldrh	r2, [r3, #12]
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <vIndicatorPanel_Out+0xbc>)
 800302e:	835a      	strh	r2, [r3, #26]


		IndicatorPanel_SetValue(&WelderUnit.IndicatorPanel);
 8003030:	4804      	ldr	r0, [pc, #16]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8003032:	f7fd fd5b 	bl	8000aec <IndicatorPanel_SetValue>

		vTaskDelay(100 / portTICK_RATE_MS);
 8003036:	2064      	movs	r0, #100	; 0x64
 8003038:	f004 fdf6 	bl	8007c28 <vTaskDelay>
		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 800303c:	e7d0      	b.n	8002fe0 <vIndicatorPanel_Out+0x5c>
 800303e:	bf00      	nop
 8003040:	20003d3c 	.word	0x20003d3c
 8003044:	20003d4e 	.word	0x20003d4e

08003048 <vBuzzer_beep>:
	vTaskDelete(NULL);
}


void vBuzzer_beep(void *pvParameters)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	uint8_t lReceivedValue;
	portBASE_TYPE xStatus;

	for(;;)
	{
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 8003050:	4b58      	ldr	r3, [pc, #352]	; (80031b4 <vBuzzer_beep+0x16c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f107 010b 	add.w	r1, r7, #11
 8003058:	f04f 32ff 	mov.w	r2, #4294967295
 800305c:	4618      	mov	r0, r3
 800305e:	f004 f8f5 	bl	800724c <xQueueReceive>
 8003062:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS ) // Если данные были успешно приняты из очереди
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	f040 80a0 	bne.w	80031ac <vBuzzer_beep+0x164>
		{

		switch(lReceivedValue)
 800306c:	7afb      	ldrb	r3, [r7, #11]
 800306e:	2b05      	cmp	r3, #5
 8003070:	f200 809d 	bhi.w	80031ae <vBuzzer_beep+0x166>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <vBuzzer_beep+0x34>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	08003095 	.word	0x08003095
 8003080:	080030a1 	.word	0x080030a1
 8003084:	080030c3 	.word	0x080030c3
 8003088:	080030e5 	.word	0x080030e5
 800308c:	08003127 	.word	0x08003127
 8003090:	08003189 	.word	0x08003189
		{
		case beep_off:
		{
			BUZZER_OFF
 8003094:	2200      	movs	r2, #0
 8003096:	2110      	movs	r1, #16
 8003098:	4847      	ldr	r0, [pc, #284]	; (80031b8 <vBuzzer_beep+0x170>)
 800309a:	f001 fa3a 	bl	8004512 <HAL_GPIO_WritePin>
			break;
 800309e:	e086      	b.n	80031ae <vBuzzer_beep+0x166>
		}

		case beep_click:
		{
			BUZZER_ON
 80030a0:	2201      	movs	r2, #1
 80030a2:	2110      	movs	r1, #16
 80030a4:	4844      	ldr	r0, [pc, #272]	; (80031b8 <vBuzzer_beep+0x170>)
 80030a6:	f001 fa34 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(10 / portTICK_RATE_MS);
 80030aa:	200a      	movs	r0, #10
 80030ac:	f004 fdbc 	bl	8007c28 <vTaskDelay>
			BUZZER_OFF
 80030b0:	2200      	movs	r2, #0
 80030b2:	2110      	movs	r1, #16
 80030b4:	4840      	ldr	r0, [pc, #256]	; (80031b8 <vBuzzer_beep+0x170>)
 80030b6:	f001 fa2c 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(50 / portTICK_RATE_MS);
 80030ba:	2032      	movs	r0, #50	; 0x32
 80030bc:	f004 fdb4 	bl	8007c28 <vTaskDelay>
			break;
 80030c0:	e075      	b.n	80031ae <vBuzzer_beep+0x166>
		}

		case beep_1short:
		{
			BUZZER_ON
 80030c2:	2201      	movs	r2, #1
 80030c4:	2110      	movs	r1, #16
 80030c6:	483c      	ldr	r0, [pc, #240]	; (80031b8 <vBuzzer_beep+0x170>)
 80030c8:	f001 fa23 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80030cc:	2064      	movs	r0, #100	; 0x64
 80030ce:	f004 fdab 	bl	8007c28 <vTaskDelay>
			BUZZER_OFF
 80030d2:	2200      	movs	r2, #0
 80030d4:	2110      	movs	r1, #16
 80030d6:	4838      	ldr	r0, [pc, #224]	; (80031b8 <vBuzzer_beep+0x170>)
 80030d8:	f001 fa1b 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80030dc:	2064      	movs	r0, #100	; 0x64
 80030de:	f004 fda3 	bl	8007c28 <vTaskDelay>
			break;
 80030e2:	e064      	b.n	80031ae <vBuzzer_beep+0x166>
		}

		case beep_2short:
		{
			BUZZER_ON
 80030e4:	2201      	movs	r2, #1
 80030e6:	2110      	movs	r1, #16
 80030e8:	4833      	ldr	r0, [pc, #204]	; (80031b8 <vBuzzer_beep+0x170>)
 80030ea:	f001 fa12 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80030ee:	2064      	movs	r0, #100	; 0x64
 80030f0:	f004 fd9a 	bl	8007c28 <vTaskDelay>
			BUZZER_OFF
 80030f4:	2200      	movs	r2, #0
 80030f6:	2110      	movs	r1, #16
 80030f8:	482f      	ldr	r0, [pc, #188]	; (80031b8 <vBuzzer_beep+0x170>)
 80030fa:	f001 fa0a 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80030fe:	2064      	movs	r0, #100	; 0x64
 8003100:	f004 fd92 	bl	8007c28 <vTaskDelay>

			BUZZER_ON
 8003104:	2201      	movs	r2, #1
 8003106:	2110      	movs	r1, #16
 8003108:	482b      	ldr	r0, [pc, #172]	; (80031b8 <vBuzzer_beep+0x170>)
 800310a:	f001 fa02 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 800310e:	2064      	movs	r0, #100	; 0x64
 8003110:	f004 fd8a 	bl	8007c28 <vTaskDelay>
			BUZZER_OFF
 8003114:	2200      	movs	r2, #0
 8003116:	2110      	movs	r1, #16
 8003118:	4827      	ldr	r0, [pc, #156]	; (80031b8 <vBuzzer_beep+0x170>)
 800311a:	f001 f9fa 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 800311e:	2064      	movs	r0, #100	; 0x64
 8003120:	f004 fd82 	bl	8007c28 <vTaskDelay>
			break;
 8003124:	e043      	b.n	80031ae <vBuzzer_beep+0x166>
		}

		case beep_3short:
		{
			BUZZER_ON
 8003126:	2201      	movs	r2, #1
 8003128:	2110      	movs	r1, #16
 800312a:	4823      	ldr	r0, [pc, #140]	; (80031b8 <vBuzzer_beep+0x170>)
 800312c:	f001 f9f1 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003130:	2064      	movs	r0, #100	; 0x64
 8003132:	f004 fd79 	bl	8007c28 <vTaskDelay>
			BUZZER_OFF
 8003136:	2200      	movs	r2, #0
 8003138:	2110      	movs	r1, #16
 800313a:	481f      	ldr	r0, [pc, #124]	; (80031b8 <vBuzzer_beep+0x170>)
 800313c:	f001 f9e9 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003140:	2064      	movs	r0, #100	; 0x64
 8003142:	f004 fd71 	bl	8007c28 <vTaskDelay>

			BUZZER_ON
 8003146:	2201      	movs	r2, #1
 8003148:	2110      	movs	r1, #16
 800314a:	481b      	ldr	r0, [pc, #108]	; (80031b8 <vBuzzer_beep+0x170>)
 800314c:	f001 f9e1 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003150:	2064      	movs	r0, #100	; 0x64
 8003152:	f004 fd69 	bl	8007c28 <vTaskDelay>
			BUZZER_OFF
 8003156:	2200      	movs	r2, #0
 8003158:	2110      	movs	r1, #16
 800315a:	4817      	ldr	r0, [pc, #92]	; (80031b8 <vBuzzer_beep+0x170>)
 800315c:	f001 f9d9 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003160:	2064      	movs	r0, #100	; 0x64
 8003162:	f004 fd61 	bl	8007c28 <vTaskDelay>

			BUZZER_ON
 8003166:	2201      	movs	r2, #1
 8003168:	2110      	movs	r1, #16
 800316a:	4813      	ldr	r0, [pc, #76]	; (80031b8 <vBuzzer_beep+0x170>)
 800316c:	f001 f9d1 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003170:	2064      	movs	r0, #100	; 0x64
 8003172:	f004 fd59 	bl	8007c28 <vTaskDelay>
			BUZZER_OFF
 8003176:	2200      	movs	r2, #0
 8003178:	2110      	movs	r1, #16
 800317a:	480f      	ldr	r0, [pc, #60]	; (80031b8 <vBuzzer_beep+0x170>)
 800317c:	f001 f9c9 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003180:	2064      	movs	r0, #100	; 0x64
 8003182:	f004 fd51 	bl	8007c28 <vTaskDelay>
			break;
 8003186:	e012      	b.n	80031ae <vBuzzer_beep+0x166>
		}

		case beep_long:
		{
			BUZZER_ON
 8003188:	2201      	movs	r2, #1
 800318a:	2110      	movs	r1, #16
 800318c:	480a      	ldr	r0, [pc, #40]	; (80031b8 <vBuzzer_beep+0x170>)
 800318e:	f001 f9c0 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(500 / portTICK_RATE_MS);
 8003192:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003196:	f004 fd47 	bl	8007c28 <vTaskDelay>
			BUZZER_OFF
 800319a:	2200      	movs	r2, #0
 800319c:	2110      	movs	r1, #16
 800319e:	4806      	ldr	r0, [pc, #24]	; (80031b8 <vBuzzer_beep+0x170>)
 80031a0:	f001 f9b7 	bl	8004512 <HAL_GPIO_WritePin>
			vTaskDelay(200 / portTICK_RATE_MS);
 80031a4:	20c8      	movs	r0, #200	; 0xc8
 80031a6:	f004 fd3f 	bl	8007c28 <vTaskDelay>
			break;
 80031aa:	e000      	b.n	80031ae <vBuzzer_beep+0x166>
		}

		}

		}
 80031ac:	bf00      	nop

		vTaskMissedYield(); // Переключение контекста.
 80031ae:	f005 f843 	bl	8008238 <vTaskMissedYield>
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 80031b2:	e74d      	b.n	8003050 <vBuzzer_beep+0x8>
 80031b4:	20003d38 	.word	0x20003d38
 80031b8:	40010800 	.word	0x40010800

080031bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031c0:	f000 fb84 	bl	80038cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031c4:	f000 f81c 	bl	8003200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031c8:	f000 f90e 	bl	80033e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80031cc:	f000 f85e 	bl	800328c <MX_SPI1_Init>
  MX_TIM3_Init();
 80031d0:	f000 f894 	bl	80032fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80031d4:	f003 fc0e 	bl	80069f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80031d8:	4a06      	ldr	r2, [pc, #24]	; (80031f4 <main+0x38>)
 80031da:	2100      	movs	r1, #0
 80031dc:	4806      	ldr	r0, [pc, #24]	; (80031f8 <main+0x3c>)
 80031de:	f003 fc6f 	bl	8006ac0 <osThreadNew>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4a05      	ldr	r2, [pc, #20]	; (80031fc <main+0x40>)
 80031e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  freeRTOS_Tasks_Ini();
 80031e8:	f7fe fa7e 	bl	80016e8 <freeRTOS_Tasks_Ini>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80031ec:	f003 fc34 	bl	8006a58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80031f0:	e7fe      	b.n	80031f0 <main+0x34>
 80031f2:	bf00      	nop
 80031f4:	08009330 	.word	0x08009330
 80031f8:	080035e1 	.word	0x080035e1
 80031fc:	200045d0 	.word	0x200045d0

08003200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b090      	sub	sp, #64	; 0x40
 8003204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003206:	f107 0318 	add.w	r3, r7, #24
 800320a:	2228      	movs	r2, #40	; 0x28
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f006 f820 	bl	8009254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	60da      	str	r2, [r3, #12]
 8003220:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003222:	2301      	movs	r3, #1
 8003224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800322a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800322c:	2300      	movs	r3, #0
 800322e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003230:	2301      	movs	r3, #1
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003234:	2302      	movs	r3, #2
 8003236:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800323c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800323e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003244:	f107 0318 	add.w	r3, r7, #24
 8003248:	4618      	mov	r0, r3
 800324a:	f001 f993 	bl	8004574 <HAL_RCC_OscConfig>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003254:	f000 f9cd 	bl	80035f2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003258:	230f      	movs	r3, #15
 800325a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800325c:	2302      	movs	r3, #2
 800325e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	2102      	movs	r1, #2
 8003272:	4618      	mov	r0, r3
 8003274:	f001 fbfe 	bl	8004a74 <HAL_RCC_ClockConfig>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800327e:	f000 f9b8 	bl	80035f2 <Error_Handler>
  }
}
 8003282:	bf00      	nop
 8003284:	3740      	adds	r7, #64	; 0x40
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003290:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <MX_SPI1_Init+0x68>)
 8003292:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <MX_SPI1_Init+0x6c>)
 8003294:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003296:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <MX_SPI1_Init+0x68>)
 8003298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800329c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800329e:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <MX_SPI1_Init+0x68>)
 80032a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032a4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <MX_SPI1_Init+0x68>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80032ac:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <MX_SPI1_Init+0x68>)
 80032ae:	2202      	movs	r2, #2
 80032b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <MX_SPI1_Init+0x68>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032b8:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <MX_SPI1_Init+0x68>)
 80032ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <MX_SPI1_Init+0x68>)
 80032c2:	2238      	movs	r2, #56	; 0x38
 80032c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <MX_SPI1_Init+0x68>)
 80032c8:	2280      	movs	r2, #128	; 0x80
 80032ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <MX_SPI1_Init+0x68>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d2:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <MX_SPI1_Init+0x68>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <MX_SPI1_Init+0x68>)
 80032da:	220a      	movs	r2, #10
 80032dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032de:	4805      	ldr	r0, [pc, #20]	; (80032f4 <MX_SPI1_Init+0x68>)
 80032e0:	f001 fd30 	bl	8004d44 <HAL_SPI_Init>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80032ea:	f000 f982 	bl	80035f2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
=======
 8002fdc:	f004 fe26 	bl	8007c2c <vTaskDelay>
 8002fe0:	f7fe f86c 	bl	80010bc <SaveProgramToFlash2>
 8002fe4:	4b17      	ldr	r3, [pc, #92]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8002fe6:	7c1b      	ldrb	r3, [r3, #16]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <vIndicatorPanel_Out+0x74>
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8002ff2:	889a      	ldrh	r2, [r3, #4]
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8002ff6:	825a      	strh	r2, [r3, #18]
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8002ffa:	7c1b      	ldrb	r3, [r3, #16]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <vIndicatorPanel_Out+0x88>
 8003004:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8003006:	881a      	ldrh	r2, [r3, #0]
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 800300a:	825a      	strh	r2, [r3, #18]
 800300c:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 800300e:	885a      	ldrh	r2, [r3, #2]
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8003012:	829a      	strh	r2, [r3, #20]
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8003016:	7a9a      	ldrb	r2, [r3, #10]
 8003018:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 800301a:	759a      	strb	r2, [r3, #22]
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 800301e:	88da      	ldrh	r2, [r3, #6]
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8003022:	831a      	strh	r2, [r3, #24]
 8003024:	4b07      	ldr	r3, [pc, #28]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8003026:	7ada      	ldrb	r2, [r3, #11]
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 800302a:	75da      	strb	r2, [r3, #23]
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 800302e:	899a      	ldrh	r2, [r3, #12]
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <vIndicatorPanel_Out+0xc0>)
 8003032:	835a      	strh	r2, [r3, #26]
 8003034:	4804      	ldr	r0, [pc, #16]	; (8003048 <vIndicatorPanel_Out+0xc4>)
 8003036:	f7fd fd59 	bl	8000aec <IndicatorPanel_SetValue>
 800303a:	2064      	movs	r0, #100	; 0x64
 800303c:	f004 fdf6 	bl	8007c2c <vTaskDelay>
 8003040:	e7d0      	b.n	8002fe4 <vIndicatorPanel_Out+0x60>
 8003042:	bf00      	nop
 8003044:	20003d3c 	.word	0x20003d3c
 8003048:	20003d4e 	.word	0x20003d4e

0800304c <vBuzzer_beep>:
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	4b58      	ldr	r3, [pc, #352]	; (80031b8 <vBuzzer_beep+0x16c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f107 010b 	add.w	r1, r7, #11
 800305c:	f04f 32ff 	mov.w	r2, #4294967295
 8003060:	4618      	mov	r0, r3
 8003062:	f004 f8f5 	bl	8007250 <xQueueReceive>
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b01      	cmp	r3, #1
 800306c:	f040 80a0 	bne.w	80031b0 <vBuzzer_beep+0x164>
 8003070:	7afb      	ldrb	r3, [r7, #11]
 8003072:	2b05      	cmp	r3, #5
 8003074:	f200 809d 	bhi.w	80031b2 <vBuzzer_beep+0x166>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <vBuzzer_beep+0x34>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	08003099 	.word	0x08003099
 8003084:	080030a5 	.word	0x080030a5
 8003088:	080030c7 	.word	0x080030c7
 800308c:	080030e9 	.word	0x080030e9
 8003090:	0800312b 	.word	0x0800312b
 8003094:	0800318d 	.word	0x0800318d
 8003098:	2200      	movs	r2, #0
 800309a:	2110      	movs	r1, #16
 800309c:	4847      	ldr	r0, [pc, #284]	; (80031bc <vBuzzer_beep+0x170>)
 800309e:	f001 fa3a 	bl	8004516 <HAL_GPIO_WritePin>
 80030a2:	e086      	b.n	80031b2 <vBuzzer_beep+0x166>
 80030a4:	2201      	movs	r2, #1
 80030a6:	2110      	movs	r1, #16
 80030a8:	4844      	ldr	r0, [pc, #272]	; (80031bc <vBuzzer_beep+0x170>)
 80030aa:	f001 fa34 	bl	8004516 <HAL_GPIO_WritePin>
 80030ae:	200a      	movs	r0, #10
 80030b0:	f004 fdbc 	bl	8007c2c <vTaskDelay>
 80030b4:	2200      	movs	r2, #0
 80030b6:	2110      	movs	r1, #16
 80030b8:	4840      	ldr	r0, [pc, #256]	; (80031bc <vBuzzer_beep+0x170>)
 80030ba:	f001 fa2c 	bl	8004516 <HAL_GPIO_WritePin>
 80030be:	2032      	movs	r0, #50	; 0x32
 80030c0:	f004 fdb4 	bl	8007c2c <vTaskDelay>
 80030c4:	e075      	b.n	80031b2 <vBuzzer_beep+0x166>
 80030c6:	2201      	movs	r2, #1
 80030c8:	2110      	movs	r1, #16
 80030ca:	483c      	ldr	r0, [pc, #240]	; (80031bc <vBuzzer_beep+0x170>)
 80030cc:	f001 fa23 	bl	8004516 <HAL_GPIO_WritePin>
 80030d0:	2064      	movs	r0, #100	; 0x64
 80030d2:	f004 fdab 	bl	8007c2c <vTaskDelay>
 80030d6:	2200      	movs	r2, #0
 80030d8:	2110      	movs	r1, #16
 80030da:	4838      	ldr	r0, [pc, #224]	; (80031bc <vBuzzer_beep+0x170>)
 80030dc:	f001 fa1b 	bl	8004516 <HAL_GPIO_WritePin>
 80030e0:	2064      	movs	r0, #100	; 0x64
 80030e2:	f004 fda3 	bl	8007c2c <vTaskDelay>
 80030e6:	e064      	b.n	80031b2 <vBuzzer_beep+0x166>
 80030e8:	2201      	movs	r2, #1
 80030ea:	2110      	movs	r1, #16
 80030ec:	4833      	ldr	r0, [pc, #204]	; (80031bc <vBuzzer_beep+0x170>)
 80030ee:	f001 fa12 	bl	8004516 <HAL_GPIO_WritePin>
 80030f2:	2064      	movs	r0, #100	; 0x64
 80030f4:	f004 fd9a 	bl	8007c2c <vTaskDelay>
 80030f8:	2200      	movs	r2, #0
 80030fa:	2110      	movs	r1, #16
 80030fc:	482f      	ldr	r0, [pc, #188]	; (80031bc <vBuzzer_beep+0x170>)
 80030fe:	f001 fa0a 	bl	8004516 <HAL_GPIO_WritePin>
 8003102:	2064      	movs	r0, #100	; 0x64
 8003104:	f004 fd92 	bl	8007c2c <vTaskDelay>
 8003108:	2201      	movs	r2, #1
 800310a:	2110      	movs	r1, #16
 800310c:	482b      	ldr	r0, [pc, #172]	; (80031bc <vBuzzer_beep+0x170>)
 800310e:	f001 fa02 	bl	8004516 <HAL_GPIO_WritePin>
 8003112:	2064      	movs	r0, #100	; 0x64
 8003114:	f004 fd8a 	bl	8007c2c <vTaskDelay>
 8003118:	2200      	movs	r2, #0
 800311a:	2110      	movs	r1, #16
 800311c:	4827      	ldr	r0, [pc, #156]	; (80031bc <vBuzzer_beep+0x170>)
 800311e:	f001 f9fa 	bl	8004516 <HAL_GPIO_WritePin>
 8003122:	2064      	movs	r0, #100	; 0x64
 8003124:	f004 fd82 	bl	8007c2c <vTaskDelay>
 8003128:	e043      	b.n	80031b2 <vBuzzer_beep+0x166>
 800312a:	2201      	movs	r2, #1
 800312c:	2110      	movs	r1, #16
 800312e:	4823      	ldr	r0, [pc, #140]	; (80031bc <vBuzzer_beep+0x170>)
 8003130:	f001 f9f1 	bl	8004516 <HAL_GPIO_WritePin>
 8003134:	2064      	movs	r0, #100	; 0x64
 8003136:	f004 fd79 	bl	8007c2c <vTaskDelay>
 800313a:	2200      	movs	r2, #0
 800313c:	2110      	movs	r1, #16
 800313e:	481f      	ldr	r0, [pc, #124]	; (80031bc <vBuzzer_beep+0x170>)
 8003140:	f001 f9e9 	bl	8004516 <HAL_GPIO_WritePin>
 8003144:	2064      	movs	r0, #100	; 0x64
 8003146:	f004 fd71 	bl	8007c2c <vTaskDelay>
 800314a:	2201      	movs	r2, #1
 800314c:	2110      	movs	r1, #16
 800314e:	481b      	ldr	r0, [pc, #108]	; (80031bc <vBuzzer_beep+0x170>)
 8003150:	f001 f9e1 	bl	8004516 <HAL_GPIO_WritePin>
 8003154:	2064      	movs	r0, #100	; 0x64
 8003156:	f004 fd69 	bl	8007c2c <vTaskDelay>
 800315a:	2200      	movs	r2, #0
 800315c:	2110      	movs	r1, #16
 800315e:	4817      	ldr	r0, [pc, #92]	; (80031bc <vBuzzer_beep+0x170>)
 8003160:	f001 f9d9 	bl	8004516 <HAL_GPIO_WritePin>
 8003164:	2064      	movs	r0, #100	; 0x64
 8003166:	f004 fd61 	bl	8007c2c <vTaskDelay>
 800316a:	2201      	movs	r2, #1
 800316c:	2110      	movs	r1, #16
 800316e:	4813      	ldr	r0, [pc, #76]	; (80031bc <vBuzzer_beep+0x170>)
 8003170:	f001 f9d1 	bl	8004516 <HAL_GPIO_WritePin>
 8003174:	2064      	movs	r0, #100	; 0x64
 8003176:	f004 fd59 	bl	8007c2c <vTaskDelay>
 800317a:	2200      	movs	r2, #0
 800317c:	2110      	movs	r1, #16
 800317e:	480f      	ldr	r0, [pc, #60]	; (80031bc <vBuzzer_beep+0x170>)
 8003180:	f001 f9c9 	bl	8004516 <HAL_GPIO_WritePin>
 8003184:	2064      	movs	r0, #100	; 0x64
 8003186:	f004 fd51 	bl	8007c2c <vTaskDelay>
 800318a:	e012      	b.n	80031b2 <vBuzzer_beep+0x166>
 800318c:	2201      	movs	r2, #1
 800318e:	2110      	movs	r1, #16
 8003190:	480a      	ldr	r0, [pc, #40]	; (80031bc <vBuzzer_beep+0x170>)
 8003192:	f001 f9c0 	bl	8004516 <HAL_GPIO_WritePin>
 8003196:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800319a:	f004 fd47 	bl	8007c2c <vTaskDelay>
 800319e:	2200      	movs	r2, #0
 80031a0:	2110      	movs	r1, #16
 80031a2:	4806      	ldr	r0, [pc, #24]	; (80031bc <vBuzzer_beep+0x170>)
 80031a4:	f001 f9b7 	bl	8004516 <HAL_GPIO_WritePin>
 80031a8:	20c8      	movs	r0, #200	; 0xc8
 80031aa:	f004 fd3f 	bl	8007c2c <vTaskDelay>
 80031ae:	e000      	b.n	80031b2 <vBuzzer_beep+0x166>
 80031b0:	bf00      	nop
 80031b2:	f005 f843 	bl	800823c <vTaskMissedYield>
 80031b6:	e74d      	b.n	8003054 <vBuzzer_beep+0x8>
 80031b8:	20003d38 	.word	0x20003d38
 80031bc:	40010800 	.word	0x40010800

080031c0 <main>:
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	f000 fb84 	bl	80038d0 <HAL_Init>
 80031c8:	f000 f81c 	bl	8003204 <SystemClock_Config>
 80031cc:	f000 f90e 	bl	80033ec <MX_GPIO_Init>
 80031d0:	f000 f85e 	bl	8003290 <MX_SPI1_Init>
 80031d4:	f000 f894 	bl	8003300 <MX_TIM3_Init>
 80031d8:	f003 fc0e 	bl	80069f8 <osKernelInitialize>
 80031dc:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <main+0x38>)
 80031de:	2100      	movs	r1, #0
 80031e0:	4806      	ldr	r0, [pc, #24]	; (80031fc <main+0x3c>)
 80031e2:	f003 fc6f 	bl	8006ac4 <osThreadNew>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4a05      	ldr	r2, [pc, #20]	; (8003200 <main+0x40>)
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	f7fe fa7c 	bl	80016e8 <freeRTOS_Tasks_Ini>
 80031f0:	f003 fc34 	bl	8006a5c <osKernelStart>
 80031f4:	e7fe      	b.n	80031f4 <main+0x34>
 80031f6:	bf00      	nop
 80031f8:	08009330 	.word	0x08009330
 80031fc:	080035e5 	.word	0x080035e5
 8003200:	200045d0 	.word	0x200045d0

08003204 <SystemClock_Config>:
 8003204:	b580      	push	{r7, lr}
 8003206:	b090      	sub	sp, #64	; 0x40
 8003208:	af00      	add	r7, sp, #0
 800320a:	f107 0318 	add.w	r3, r7, #24
 800320e:	2228      	movs	r2, #40	; 0x28
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f006 f81e 	bl	8009254 <memset>
 8003218:	1d3b      	adds	r3, r7, #4
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	605a      	str	r2, [r3, #4]
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	60da      	str	r2, [r3, #12]
 8003224:	611a      	str	r2, [r3, #16]
 8003226:	2301      	movs	r3, #1
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	2300      	movs	r3, #0
 8003232:	623b      	str	r3, [r7, #32]
 8003234:	2301      	movs	r3, #1
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
 8003238:	2302      	movs	r3, #2
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
 800323c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003240:	63bb      	str	r3, [r7, #56]	; 0x38
 8003242:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003248:	f107 0318 	add.w	r3, r7, #24
 800324c:	4618      	mov	r0, r3
 800324e:	f001 f993 	bl	8004578 <HAL_RCC_OscConfig>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <SystemClock_Config+0x58>
 8003258:	f000 f9cd 	bl	80035f6 <Error_Handler>
 800325c:	230f      	movs	r3, #15
 800325e:	607b      	str	r3, [r7, #4]
 8003260:	2302      	movs	r3, #2
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	2102      	movs	r1, #2
 8003276:	4618      	mov	r0, r3
 8003278:	f001 fbfe 	bl	8004a78 <HAL_RCC_ClockConfig>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <SystemClock_Config+0x82>
 8003282:	f000 f9b8 	bl	80035f6 <Error_Handler>
 8003286:	bf00      	nop
 8003288:	3740      	adds	r7, #64	; 0x40
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <MX_SPI1_Init>:
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
 8003294:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <MX_SPI1_Init+0x68>)
 8003296:	4a19      	ldr	r2, [pc, #100]	; (80032fc <MX_SPI1_Init+0x6c>)
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <MX_SPI1_Init+0x68>)
 800329c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <MX_SPI1_Init+0x68>)
 80032a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032a8:	609a      	str	r2, [r3, #8]
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <MX_SPI1_Init+0x68>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	60da      	str	r2, [r3, #12]
 80032b0:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <MX_SPI1_Init+0x68>)
 80032b2:	2202      	movs	r2, #2
 80032b4:	611a      	str	r2, [r3, #16]
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <MX_SPI1_Init+0x68>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	615a      	str	r2, [r3, #20]
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <MX_SPI1_Init+0x68>)
 80032be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c2:	619a      	str	r2, [r3, #24]
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <MX_SPI1_Init+0x68>)
 80032c6:	2238      	movs	r2, #56	; 0x38
 80032c8:	61da      	str	r2, [r3, #28]
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <MX_SPI1_Init+0x68>)
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	621a      	str	r2, [r3, #32]
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <MX_SPI1_Init+0x68>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <MX_SPI1_Init+0x68>)
 80032d8:	2200      	movs	r2, #0
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <MX_SPI1_Init+0x68>)
 80032de:	220a      	movs	r2, #10
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032e2:	4805      	ldr	r0, [pc, #20]	; (80032f8 <MX_SPI1_Init+0x68>)
 80032e4:	f001 fd30 	bl	8004d48 <HAL_SPI_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_SPI1_Init+0x62>
 80032ee:	f000 f982 	bl	80035f6 <Error_Handler>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80032f2:	bf00      	nop
 80032f4:	2000461c 	.word	0x2000461c
 80032f8:	40013000 	.word	0x40013000

<<<<<<< HEAD
080032fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08e      	sub	sp, #56	; 0x38
 8003300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003310:	f107 0320 	add.w	r3, r7, #32
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800331a:	1d3b      	adds	r3, r7, #4
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
 8003326:	611a      	str	r2, [r3, #16]
 8003328:	615a      	str	r2, [r3, #20]
 800332a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800332c:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <MX_TIM3_Init+0xe4>)
 800332e:	4a2d      	ldr	r2, [pc, #180]	; (80033e4 <MX_TIM3_Init+0xe8>)
 8003330:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8003332:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <MX_TIM3_Init+0xe4>)
 8003334:	2247      	movs	r2, #71	; 0x47
 8003336:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003338:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <MX_TIM3_Init+0xe4>)
 800333a:	2200      	movs	r2, #0
 800333c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800333e:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <MX_TIM3_Init+0xe4>)
 8003340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003344:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003346:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <MX_TIM3_Init+0xe4>)
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800334c:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <MX_TIM3_Init+0xe4>)
 800334e:	2200      	movs	r2, #0
 8003350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003352:	4823      	ldr	r0, [pc, #140]	; (80033e0 <MX_TIM3_Init+0xe4>)
 8003354:	f002 fb66 	bl	8005a24 <HAL_TIM_Base_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800335e:	f000 f948 	bl	80035f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800336c:	4619      	mov	r1, r3
 800336e:	481c      	ldr	r0, [pc, #112]	; (80033e0 <MX_TIM3_Init+0xe4>)
 8003370:	f002 fef0 	bl	8006154 <HAL_TIM_ConfigClockSource>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800337a:	f000 f93a 	bl	80035f2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800337e:	4818      	ldr	r0, [pc, #96]	; (80033e0 <MX_TIM3_Init+0xe4>)
 8003380:	f002 fb9f 	bl	8005ac2 <HAL_TIM_PWM_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800338a:	f000 f932 	bl	80035f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003392:	2300      	movs	r3, #0
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003396:	f107 0320 	add.w	r3, r7, #32
 800339a:	4619      	mov	r1, r3
 800339c:	4810      	ldr	r0, [pc, #64]	; (80033e0 <MX_TIM3_Init+0xe4>)
 800339e:	f003 faab 	bl	80068f8 <HAL_TIMEx_MasterConfigSynchronization>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80033a8:	f000 f923 	bl	80035f2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033ac:	2360      	movs	r3, #96	; 0x60
 80033ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033bc:	1d3b      	adds	r3, r7, #4
 80033be:	2200      	movs	r2, #0
 80033c0:	4619      	mov	r1, r3
 80033c2:	4807      	ldr	r0, [pc, #28]	; (80033e0 <MX_TIM3_Init+0xe4>)
 80033c4:	f002 fe08 	bl	8005fd8 <HAL_TIM_PWM_ConfigChannel>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80033ce:	f000 f910 	bl	80035f2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80033d2:	4803      	ldr	r0, [pc, #12]	; (80033e0 <MX_TIM3_Init+0xe4>)
 80033d4:	f000 f9b6 	bl	8003744 <HAL_TIM_MspPostInit>

}
 80033d8:	bf00      	nop
 80033da:	3738      	adds	r7, #56	; 0x38
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	200045d4 	.word	0x200045d4
 80033e4:	40000400 	.word	0x40000400

080033e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ee:	f107 0310 	add.w	r3, r7, #16
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033fc:	4b71      	ldr	r3, [pc, #452]	; (80035c4 <MX_GPIO_Init+0x1dc>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	4a70      	ldr	r2, [pc, #448]	; (80035c4 <MX_GPIO_Init+0x1dc>)
 8003402:	f043 0320 	orr.w	r3, r3, #32
 8003406:	6193      	str	r3, [r2, #24]
 8003408:	4b6e      	ldr	r3, [pc, #440]	; (80035c4 <MX_GPIO_Init+0x1dc>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003414:	4b6b      	ldr	r3, [pc, #428]	; (80035c4 <MX_GPIO_Init+0x1dc>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4a6a      	ldr	r2, [pc, #424]	; (80035c4 <MX_GPIO_Init+0x1dc>)
 800341a:	f043 0310 	orr.w	r3, r3, #16
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <MX_GPIO_Init+0x1dc>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800342c:	4b65      	ldr	r3, [pc, #404]	; (80035c4 <MX_GPIO_Init+0x1dc>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	4a64      	ldr	r2, [pc, #400]	; (80035c4 <MX_GPIO_Init+0x1dc>)
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	6193      	str	r3, [r2, #24]
 8003438:	4b62      	ldr	r3, [pc, #392]	; (80035c4 <MX_GPIO_Init+0x1dc>)
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003444:	4b5f      	ldr	r3, [pc, #380]	; (80035c4 <MX_GPIO_Init+0x1dc>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	4a5e      	ldr	r2, [pc, #376]	; (80035c4 <MX_GPIO_Init+0x1dc>)
 800344a:	f043 0308 	orr.w	r3, r3, #8
 800344e:	6193      	str	r3, [r2, #24]
 8003450:	4b5c      	ldr	r3, [pc, #368]	; (80035c4 <MX_GPIO_Init+0x1dc>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oDIR1_Pin, GPIO_PIN_RESET);
 800345c:	2200      	movs	r2, #0
 800345e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003462:	4859      	ldr	r0, [pc, #356]	; (80035c8 <MX_GPIO_Init+0x1e0>)
 8003464:	f001 f855 	bl	8004512 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, oBuzer_Pin|oSyncArc_Pin|oSMD_EN1_Pin, GPIO_PIN_RESET);
 8003468:	2200      	movs	r2, #0
 800346a:	f44f 6111 	mov.w	r1, #2320	; 0x910
 800346e:	4857      	ldr	r0, [pc, #348]	; (80035cc <MX_GPIO_Init+0x1e4>)
 8003470:	f001 f84f 	bl	8004512 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin, GPIO_PIN_SET);
 8003474:	2201      	movs	r2, #1
 8003476:	2140      	movs	r1, #64	; 0x40
 8003478:	4854      	ldr	r0, [pc, #336]	; (80035cc <MX_GPIO_Init+0x1e4>)
 800347a:	f001 f84a 	bl	8004512 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin, GPIO_PIN_SET);
 800347e:	2201      	movs	r2, #1
 8003480:	2130      	movs	r1, #48	; 0x30
 8003482:	4851      	ldr	r0, [pc, #324]	; (80035c8 <MX_GPIO_Init+0x1e0>)
 8003484:	f001 f845 	bl	8004512 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin, GPIO_PIN_SET);
 8003488:	2201      	movs	r2, #1
 800348a:	2103      	movs	r1, #3
 800348c:	4850      	ldr	r0, [pc, #320]	; (80035d0 <MX_GPIO_Init+0x1e8>)
 800348e:	f001 f840 	bl	8004512 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSolenoidValve2_Pin|oSolenoidValve1_Pin, GPIO_PIN_RESET);
 8003492:	2200      	movs	r2, #0
 8003494:	21c0      	movs	r1, #192	; 0xc0
 8003496:	484e      	ldr	r0, [pc, #312]	; (80035d0 <MX_GPIO_Init+0x1e8>)
 8003498:	f001 f83b 	bl	8004512 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : oSol_Valve_b_Heade_Pin oSol_Valve_a_Heade_Pin oSTLED316S_STB1_Pin oSTLED316S_STB2_Pin
                           oDIR1_Pin */
  GPIO_InitStruct.Pin = oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin
 800349c:	f44f 739b 	mov.w	r3, #310	; 0x136
 80034a0:	613b      	str	r3, [r7, #16]
                          |oDIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a2:	2301      	movs	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034aa:	2302      	movs	r3, #2
 80034ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ae:	f107 0310 	add.w	r3, r7, #16
 80034b2:	4619      	mov	r1, r3
 80034b4:	4844      	ldr	r0, [pc, #272]	; (80035c8 <MX_GPIO_Init+0x1e0>)
 80034b6:	f000 fe81 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pins : iPedal_L_Pin iPedal_R_Pin */
  GPIO_InitStruct.Pin = iPedal_L_Pin|iPedal_R_Pin;
 80034ba:	2305      	movs	r3, #5
 80034bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c6:	f107 0310 	add.w	r3, r7, #16
 80034ca:	4619      	mov	r1, r3
 80034cc:	483f      	ldr	r0, [pc, #252]	; (80035cc <MX_GPIO_Init+0x1e4>)
 80034ce:	f000 fe75 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pins : oBuzer_Pin oSTLED316S_STB5_Pin oSyncArc_Pin oSMD_EN1_Pin */
  GPIO_InitStruct.Pin = oBuzer_Pin|oSTLED316S_STB5_Pin|oSyncArc_Pin|oSMD_EN1_Pin;
 80034d2:	f44f 6315 	mov.w	r3, #2384	; 0x950
 80034d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d8:	2301      	movs	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e0:	2302      	movs	r3, #2
 80034e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	f107 0310 	add.w	r3, r7, #16
 80034e8:	4619      	mov	r1, r3
 80034ea:	4838      	ldr	r0, [pc, #224]	; (80035cc <MX_GPIO_Init+0x1e4>)
 80034ec:	f000 fe66 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pins : oSTLED316S_STB3_Pin oSTLED316S_STB4_Pin oSolenoidValve2_Pin oSolenoidValve1_Pin */
  GPIO_InitStruct.Pin = oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin|oSolenoidValve2_Pin|oSolenoidValve1_Pin;
 80034f0:	23c3      	movs	r3, #195	; 0xc3
 80034f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f4:	2301      	movs	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fc:	2302      	movs	r3, #2
 80034fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003500:	f107 0310 	add.w	r3, r7, #16
 8003504:	4619      	mov	r1, r3
 8003506:	4832      	ldr	r0, [pc, #200]	; (80035d0 <MX_GPIO_Init+0x1e8>)
 8003508:	f000 fe58 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN5_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN5_Pin;
 800350c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003512:	4b30      	ldr	r3, [pc, #192]	; (80035d4 <MX_GPIO_Init+0x1ec>)
 8003514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN5_GPIO_Port, &GPIO_InitStruct);
 800351a:	f107 0310 	add.w	r3, r7, #16
 800351e:	4619      	mov	r1, r3
 8003520:	482b      	ldr	r0, [pc, #172]	; (80035d0 <MX_GPIO_Init+0x1e8>)
 8003522:	f000 fe4b 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pin : iBackDoor_Pin */
  GPIO_InitStruct.Pin = iBackDoor_Pin;
 8003526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800352a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iBackDoor_GPIO_Port, &GPIO_InitStruct);
 8003534:	f107 0310 	add.w	r3, r7, #16
 8003538:	4619      	mov	r1, r3
 800353a:	4825      	ldr	r0, [pc, #148]	; (80035d0 <MX_GPIO_Init+0x1e8>)
 800353c:	f000 fe3e 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pin : iFB_STEP1_Pin */
  GPIO_InitStruct.Pin = iFB_STEP1_Pin;
 8003540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <MX_GPIO_Init+0x1f0>)
 8003548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iFB_STEP1_GPIO_Port, &GPIO_InitStruct);
 800354e:	f107 0310 	add.w	r3, r7, #16
 8003552:	4619      	mov	r1, r3
 8003554:	481c      	ldr	r0, [pc, #112]	; (80035c8 <MX_GPIO_Init+0x1e0>)
 8003556:	f000 fe31 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN3_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN3_Pin;
 800355a:	2304      	movs	r3, #4
 800355c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <MX_GPIO_Init+0x1ec>)
 8003560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003562:	2301      	movs	r3, #1
 8003564:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN3_GPIO_Port, &GPIO_InitStruct);
 8003566:	f107 0310 	add.w	r3, r7, #16
 800356a:	4619      	mov	r1, r3
 800356c:	481b      	ldr	r0, [pc, #108]	; (80035dc <MX_GPIO_Init+0x1f4>)
 800356e:	f000 fe25 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pin : iCarriageStop_Pin */
  GPIO_InitStruct.Pin = iCarriageStop_Pin;
 8003572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003578:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <MX_GPIO_Init+0x1f0>)
 800357a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iCarriageStop_GPIO_Port, &GPIO_InitStruct);
 8003580:	f107 0310 	add.w	r3, r7, #16
 8003584:	4619      	mov	r1, r3
 8003586:	4812      	ldr	r0, [pc, #72]	; (80035d0 <MX_GPIO_Init+0x1e8>)
 8003588:	f000 fe18 	bl	80041bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800358c:	2200      	movs	r2, #0
 800358e:	2105      	movs	r1, #5
 8003590:	2008      	movs	r0, #8
 8003592:	f000 fad4 	bl	8003b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003596:	2008      	movs	r0, #8
 8003598:	f000 faed 	bl	8003b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800359c:	2200      	movs	r2, #0
 800359e:	2105      	movs	r1, #5
 80035a0:	2017      	movs	r0, #23
 80035a2:	f000 facc 	bl	8003b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80035a6:	2017      	movs	r0, #23
 80035a8:	f000 fae5 	bl	8003b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80035ac:	2200      	movs	r2, #0
 80035ae:	2105      	movs	r1, #5
 80035b0:	2028      	movs	r0, #40	; 0x28
 80035b2:	f000 fac4 	bl	8003b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80035b6:	2028      	movs	r0, #40	; 0x28
 80035b8:	f000 fadd 	bl	8003b76 <HAL_NVIC_EnableIRQ>

}
 80035bc:	bf00      	nop
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40011000 	.word	0x40011000
 80035cc:	40010800 	.word	0x40010800
 80035d0:	40010c00 	.word	0x40010c00
 80035d4:	10210000 	.word	0x10210000
 80035d8:	10110000 	.word	0x10110000
 80035dc:	40011400 	.word	0x40011400

080035e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	vTaskDelay(1000);
 80035e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035ec:	f004 fb1c 	bl	8007c28 <vTaskDelay>
 80035f0:	e7fa      	b.n	80035e8 <StartDefaultTask+0x8>

080035f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035f6:	b672      	cpsid	i
}
 80035f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035fa:	e7fe      	b.n	80035fa <Error_Handler+0x8>

080035fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003602:	4b18      	ldr	r3, [pc, #96]	; (8003664 <HAL_MspInit+0x68>)
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	4a17      	ldr	r2, [pc, #92]	; (8003664 <HAL_MspInit+0x68>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6193      	str	r3, [r2, #24]
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_MspInit+0x68>)
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_MspInit+0x68>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	4a11      	ldr	r2, [pc, #68]	; (8003664 <HAL_MspInit+0x68>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003624:	61d3      	str	r3, [r2, #28]
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <HAL_MspInit+0x68>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	210f      	movs	r1, #15
 8003636:	f06f 0001 	mvn.w	r0, #1
 800363a:	f000 fa80 	bl	8003b3e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_MspInit+0x6c>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <HAL_MspInit+0x6c>)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	40010000 	.word	0x40010000

0800366c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003674:	f107 0310 	add.w	r3, r7, #16
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a19      	ldr	r2, [pc, #100]	; (80036ec <HAL_SPI_MspInit+0x80>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d12b      	bne.n	80036e4 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800368c:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <HAL_SPI_MspInit+0x84>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	4a17      	ldr	r2, [pc, #92]	; (80036f0 <HAL_SPI_MspInit+0x84>)
 8003692:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003696:	6193      	str	r3, [r2, #24]
 8003698:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <HAL_SPI_MspInit+0x84>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_SPI_MspInit+0x84>)
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <HAL_SPI_MspInit+0x84>)
 80036aa:	f043 0304 	orr.w	r3, r3, #4
 80036ae:	6193      	str	r3, [r2, #24]
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <HAL_SPI_MspInit+0x84>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80036bc:	23a0      	movs	r3, #160	; 0xa0
 80036be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c0:	2302      	movs	r3, #2
 80036c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036c4:	2303      	movs	r3, #3
 80036c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c8:	f107 0310 	add.w	r3, r7, #16
 80036cc:	4619      	mov	r1, r3
 80036ce:	4809      	ldr	r0, [pc, #36]	; (80036f4 <HAL_SPI_MspInit+0x88>)
 80036d0:	f000 fd74 	bl	80041bc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80036d4:	2200      	movs	r2, #0
 80036d6:	2105      	movs	r1, #5
 80036d8:	2023      	movs	r0, #35	; 0x23
 80036da:	f000 fa30 	bl	8003b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80036de:	2023      	movs	r0, #35	; 0x23
 80036e0:	f000 fa49 	bl	8003b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80036e4:	bf00      	nop
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40013000 	.word	0x40013000
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40010800 	.word	0x40010800

080036f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <HAL_TIM_Base_MspInit+0x44>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d113      	bne.n	8003732 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <HAL_TIM_Base_MspInit+0x48>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4a0c      	ldr	r2, [pc, #48]	; (8003740 <HAL_TIM_Base_MspInit+0x48>)
 8003710:	f043 0302 	orr.w	r3, r3, #2
 8003714:	61d3      	str	r3, [r2, #28]
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_TIM_Base_MspInit+0x48>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2105      	movs	r1, #5
 8003726:	201d      	movs	r0, #29
 8003728:	f000 fa09 	bl	8003b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800372c:	201d      	movs	r0, #29
 800372e:	f000 fa22 	bl	8003b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40000400 	.word	0x40000400
 8003740:	40021000 	.word	0x40021000

08003744 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374c:	f107 030c 	add.w	r3, r7, #12
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <HAL_TIM_MspPostInit+0x7c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d129      	bne.n	80037b8 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003764:	4b17      	ldr	r3, [pc, #92]	; (80037c4 <HAL_TIM_MspPostInit+0x80>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <HAL_TIM_MspPostInit+0x80>)
 800376a:	f043 0310 	orr.w	r3, r3, #16
 800376e:	6193      	str	r3, [r2, #24]
 8003770:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <HAL_TIM_MspPostInit+0x80>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = oPWM_STEP1_Pin;
 800377c:	2340      	movs	r3, #64	; 0x40
 800377e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003784:	2302      	movs	r3, #2
 8003786:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(oPWM_STEP1_GPIO_Port, &GPIO_InitStruct);
 8003788:	f107 030c 	add.w	r3, r7, #12
 800378c:	4619      	mov	r1, r3
 800378e:	480e      	ldr	r0, [pc, #56]	; (80037c8 <HAL_TIM_MspPostInit+0x84>)
 8003790:	f000 fd14 	bl	80041bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <HAL_TIM_MspPostInit+0x88>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	61fb      	str	r3, [r7, #28]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	4a06      	ldr	r2, [pc, #24]	; (80037cc <HAL_TIM_MspPostInit+0x88>)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037b8:	bf00      	nop
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40000400 	.word	0x40000400
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40011000 	.word	0x40011000
 80037cc:	40010000 	.word	0x40010000

080037d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037d4:	e7fe      	b.n	80037d4 <NMI_Handler+0x4>

080037d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037da:	e7fe      	b.n	80037da <HardFault_Handler+0x4>

080037dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037e0:	e7fe      	b.n	80037e0 <MemManage_Handler+0x4>

080037e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037e2:	b480      	push	{r7}
 80037e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037e6:	e7fe      	b.n	80037e6 <BusFault_Handler+0x4>

080037e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037ec:	e7fe      	b.n	80037ec <UsageFault_Handler+0x4>

080037ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037ee:	b480      	push	{r7}
 80037f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr

080037fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037fe:	f000 f8ab 	bl	8003958 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003802:	f004 fded 	bl	80083e0 <xTaskGetSchedulerState>
 8003806:	4603      	mov	r3, r0
 8003808:	2b01      	cmp	r3, #1
 800380a:	d001      	beq.n	8003810 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800380c:	f005 fb24 	bl	8008e58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003810:	bf00      	nop
 8003812:	bd80      	pop	{r7, pc}

08003814 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003818:	2004      	movs	r0, #4
 800381a:	f000 fe93 	bl	8004544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}

08003822 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003826:	f44f 7000 	mov.w	r0, #512	; 0x200
 800382a:	f000 fe8b 	bl	8004544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003838:	4802      	ldr	r0, [pc, #8]	; (8003844 <TIM3_IRQHandler+0x10>)
 800383a:	f002 fac5 	bl	8005dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
=======
08003300 <MX_TIM3_Init>:
 8003300:	b580      	push	{r7, lr}
 8003302:	b08e      	sub	sp, #56	; 0x38
 8003304:	af00      	add	r7, sp, #0
 8003306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	f107 0320 	add.w	r3, r7, #32
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
 800332c:	615a      	str	r2, [r3, #20]
 800332e:	619a      	str	r2, [r3, #24]
 8003330:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <MX_TIM3_Init+0xe4>)
 8003332:	4a2d      	ldr	r2, [pc, #180]	; (80033e8 <MX_TIM3_Init+0xe8>)
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <MX_TIM3_Init+0xe4>)
 8003338:	2247      	movs	r2, #71	; 0x47
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	4b29      	ldr	r3, [pc, #164]	; (80033e4 <MX_TIM3_Init+0xe4>)
 800333e:	2200      	movs	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <MX_TIM3_Init+0xe4>)
 8003344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <MX_TIM3_Init+0xe4>)
 800334c:	2200      	movs	r2, #0
 800334e:	611a      	str	r2, [r3, #16]
 8003350:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <MX_TIM3_Init+0xe4>)
 8003352:	2200      	movs	r2, #0
 8003354:	619a      	str	r2, [r3, #24]
 8003356:	4823      	ldr	r0, [pc, #140]	; (80033e4 <MX_TIM3_Init+0xe4>)
 8003358:	f002 fb66 	bl	8005a28 <HAL_TIM_Base_Init>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <MX_TIM3_Init+0x66>
 8003362:	f000 f948 	bl	80035f6 <Error_Handler>
 8003366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
 800336c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003370:	4619      	mov	r1, r3
 8003372:	481c      	ldr	r0, [pc, #112]	; (80033e4 <MX_TIM3_Init+0xe4>)
 8003374:	f002 fef0 	bl	8006158 <HAL_TIM_ConfigClockSource>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_TIM3_Init+0x82>
 800337e:	f000 f93a 	bl	80035f6 <Error_Handler>
 8003382:	4818      	ldr	r0, [pc, #96]	; (80033e4 <MX_TIM3_Init+0xe4>)
 8003384:	f002 fb9f 	bl	8005ac6 <HAL_TIM_PWM_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM3_Init+0x92>
 800338e:	f000 f932 	bl	80035f6 <Error_Handler>
 8003392:	2300      	movs	r3, #0
 8003394:	623b      	str	r3, [r7, #32]
 8003396:	2300      	movs	r3, #0
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
 800339a:	f107 0320 	add.w	r3, r7, #32
 800339e:	4619      	mov	r1, r3
 80033a0:	4810      	ldr	r0, [pc, #64]	; (80033e4 <MX_TIM3_Init+0xe4>)
 80033a2:	f003 faab 	bl	80068fc <HAL_TIMEx_MasterConfigSynchronization>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM3_Init+0xb0>
 80033ac:	f000 f923 	bl	80035f6 <Error_Handler>
 80033b0:	2360      	movs	r3, #96	; 0x60
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	2300      	movs	r3, #0
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	1d3b      	adds	r3, r7, #4
 80033c2:	2200      	movs	r2, #0
 80033c4:	4619      	mov	r1, r3
 80033c6:	4807      	ldr	r0, [pc, #28]	; (80033e4 <MX_TIM3_Init+0xe4>)
 80033c8:	f002 fe08 	bl	8005fdc <HAL_TIM_PWM_ConfigChannel>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_TIM3_Init+0xd6>
 80033d2:	f000 f910 	bl	80035f6 <Error_Handler>
 80033d6:	4803      	ldr	r0, [pc, #12]	; (80033e4 <MX_TIM3_Init+0xe4>)
 80033d8:	f000 f9b6 	bl	8003748 <HAL_TIM_MspPostInit>
 80033dc:	bf00      	nop
 80033de:	3738      	adds	r7, #56	; 0x38
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	200045d4 	.word	0x200045d4
 80033e8:	40000400 	.word	0x40000400

080033ec <MX_GPIO_Init>:
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	f107 0310 	add.w	r3, r7, #16
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	609a      	str	r2, [r3, #8]
 80033fe:	60da      	str	r2, [r3, #12]
 8003400:	4b71      	ldr	r3, [pc, #452]	; (80035c8 <MX_GPIO_Init+0x1dc>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	4a70      	ldr	r2, [pc, #448]	; (80035c8 <MX_GPIO_Init+0x1dc>)
 8003406:	f043 0320 	orr.w	r3, r3, #32
 800340a:	6193      	str	r3, [r2, #24]
 800340c:	4b6e      	ldr	r3, [pc, #440]	; (80035c8 <MX_GPIO_Init+0x1dc>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4b6b      	ldr	r3, [pc, #428]	; (80035c8 <MX_GPIO_Init+0x1dc>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	4a6a      	ldr	r2, [pc, #424]	; (80035c8 <MX_GPIO_Init+0x1dc>)
 800341e:	f043 0310 	orr.w	r3, r3, #16
 8003422:	6193      	str	r3, [r2, #24]
 8003424:	4b68      	ldr	r3, [pc, #416]	; (80035c8 <MX_GPIO_Init+0x1dc>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	4b65      	ldr	r3, [pc, #404]	; (80035c8 <MX_GPIO_Init+0x1dc>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	4a64      	ldr	r2, [pc, #400]	; (80035c8 <MX_GPIO_Init+0x1dc>)
 8003436:	f043 0304 	orr.w	r3, r3, #4
 800343a:	6193      	str	r3, [r2, #24]
 800343c:	4b62      	ldr	r3, [pc, #392]	; (80035c8 <MX_GPIO_Init+0x1dc>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	607b      	str	r3, [r7, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4b5f      	ldr	r3, [pc, #380]	; (80035c8 <MX_GPIO_Init+0x1dc>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	4a5e      	ldr	r2, [pc, #376]	; (80035c8 <MX_GPIO_Init+0x1dc>)
 800344e:	f043 0308 	orr.w	r3, r3, #8
 8003452:	6193      	str	r3, [r2, #24]
 8003454:	4b5c      	ldr	r3, [pc, #368]	; (80035c8 <MX_GPIO_Init+0x1dc>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	603b      	str	r3, [r7, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2200      	movs	r2, #0
 8003462:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003466:	4859      	ldr	r0, [pc, #356]	; (80035cc <MX_GPIO_Init+0x1e0>)
 8003468:	f001 f855 	bl	8004516 <HAL_GPIO_WritePin>
 800346c:	2200      	movs	r2, #0
 800346e:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8003472:	4857      	ldr	r0, [pc, #348]	; (80035d0 <MX_GPIO_Init+0x1e4>)
 8003474:	f001 f84f 	bl	8004516 <HAL_GPIO_WritePin>
 8003478:	2201      	movs	r2, #1
 800347a:	2140      	movs	r1, #64	; 0x40
 800347c:	4854      	ldr	r0, [pc, #336]	; (80035d0 <MX_GPIO_Init+0x1e4>)
 800347e:	f001 f84a 	bl	8004516 <HAL_GPIO_WritePin>
 8003482:	2201      	movs	r2, #1
 8003484:	2130      	movs	r1, #48	; 0x30
 8003486:	4851      	ldr	r0, [pc, #324]	; (80035cc <MX_GPIO_Init+0x1e0>)
 8003488:	f001 f845 	bl	8004516 <HAL_GPIO_WritePin>
 800348c:	2201      	movs	r2, #1
 800348e:	2103      	movs	r1, #3
 8003490:	4850      	ldr	r0, [pc, #320]	; (80035d4 <MX_GPIO_Init+0x1e8>)
 8003492:	f001 f840 	bl	8004516 <HAL_GPIO_WritePin>
 8003496:	2200      	movs	r2, #0
 8003498:	21c0      	movs	r1, #192	; 0xc0
 800349a:	484e      	ldr	r0, [pc, #312]	; (80035d4 <MX_GPIO_Init+0x1e8>)
 800349c:	f001 f83b 	bl	8004516 <HAL_GPIO_WritePin>
 80034a0:	f44f 739b 	mov.w	r3, #310	; 0x136
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	2301      	movs	r3, #1
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	2302      	movs	r3, #2
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	f107 0310 	add.w	r3, r7, #16
 80034b6:	4619      	mov	r1, r3
 80034b8:	4844      	ldr	r0, [pc, #272]	; (80035cc <MX_GPIO_Init+0x1e0>)
 80034ba:	f000 fe81 	bl	80041c0 <HAL_GPIO_Init>
 80034be:	2305      	movs	r3, #5
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	2300      	movs	r3, #0
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	f107 0310 	add.w	r3, r7, #16
 80034ce:	4619      	mov	r1, r3
 80034d0:	483f      	ldr	r0, [pc, #252]	; (80035d0 <MX_GPIO_Init+0x1e4>)
 80034d2:	f000 fe75 	bl	80041c0 <HAL_GPIO_Init>
 80034d6:	f44f 6315 	mov.w	r3, #2384	; 0x950
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	2301      	movs	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	2302      	movs	r3, #2
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	f107 0310 	add.w	r3, r7, #16
 80034ec:	4619      	mov	r1, r3
 80034ee:	4838      	ldr	r0, [pc, #224]	; (80035d0 <MX_GPIO_Init+0x1e4>)
 80034f0:	f000 fe66 	bl	80041c0 <HAL_GPIO_Init>
 80034f4:	23c3      	movs	r3, #195	; 0xc3
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	2301      	movs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	2302      	movs	r3, #2
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	f107 0310 	add.w	r3, r7, #16
 8003508:	4619      	mov	r1, r3
 800350a:	4832      	ldr	r0, [pc, #200]	; (80035d4 <MX_GPIO_Init+0x1e8>)
 800350c:	f000 fe58 	bl	80041c0 <HAL_GPIO_Init>
 8003510:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <MX_GPIO_Init+0x1ec>)
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	f107 0310 	add.w	r3, r7, #16
 8003522:	4619      	mov	r1, r3
 8003524:	482b      	ldr	r0, [pc, #172]	; (80035d4 <MX_GPIO_Init+0x1e8>)
 8003526:	f000 fe4b 	bl	80041c0 <HAL_GPIO_Init>
 800352a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	2300      	movs	r3, #0
 8003536:	61bb      	str	r3, [r7, #24]
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	4619      	mov	r1, r3
 800353e:	4825      	ldr	r0, [pc, #148]	; (80035d4 <MX_GPIO_Init+0x1e8>)
 8003540:	f000 fe3e 	bl	80041c0 <HAL_GPIO_Init>
 8003544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	4b24      	ldr	r3, [pc, #144]	; (80035dc <MX_GPIO_Init+0x1f0>)
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	2300      	movs	r3, #0
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	f107 0310 	add.w	r3, r7, #16
 8003556:	4619      	mov	r1, r3
 8003558:	481c      	ldr	r0, [pc, #112]	; (80035cc <MX_GPIO_Init+0x1e0>)
 800355a:	f000 fe31 	bl	80041c0 <HAL_GPIO_Init>
 800355e:	2304      	movs	r3, #4
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <MX_GPIO_Init+0x1ec>)
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	2301      	movs	r3, #1
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	f107 0310 	add.w	r3, r7, #16
 800356e:	4619      	mov	r1, r3
 8003570:	481b      	ldr	r0, [pc, #108]	; (80035e0 <MX_GPIO_Init+0x1f4>)
 8003572:	f000 fe25 	bl	80041c0 <HAL_GPIO_Init>
 8003576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	4b17      	ldr	r3, [pc, #92]	; (80035dc <MX_GPIO_Init+0x1f0>)
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	2300      	movs	r3, #0
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	f107 0310 	add.w	r3, r7, #16
 8003588:	4619      	mov	r1, r3
 800358a:	4812      	ldr	r0, [pc, #72]	; (80035d4 <MX_GPIO_Init+0x1e8>)
 800358c:	f000 fe18 	bl	80041c0 <HAL_GPIO_Init>
 8003590:	2200      	movs	r2, #0
 8003592:	2105      	movs	r1, #5
 8003594:	2008      	movs	r0, #8
 8003596:	f000 fad4 	bl	8003b42 <HAL_NVIC_SetPriority>
 800359a:	2008      	movs	r0, #8
 800359c:	f000 faed 	bl	8003b7a <HAL_NVIC_EnableIRQ>
 80035a0:	2200      	movs	r2, #0
 80035a2:	2105      	movs	r1, #5
 80035a4:	2017      	movs	r0, #23
 80035a6:	f000 facc 	bl	8003b42 <HAL_NVIC_SetPriority>
 80035aa:	2017      	movs	r0, #23
 80035ac:	f000 fae5 	bl	8003b7a <HAL_NVIC_EnableIRQ>
 80035b0:	2200      	movs	r2, #0
 80035b2:	2105      	movs	r1, #5
 80035b4:	2028      	movs	r0, #40	; 0x28
 80035b6:	f000 fac4 	bl	8003b42 <HAL_NVIC_SetPriority>
 80035ba:	2028      	movs	r0, #40	; 0x28
 80035bc:	f000 fadd 	bl	8003b7a <HAL_NVIC_EnableIRQ>
 80035c0:	bf00      	nop
 80035c2:	3720      	adds	r7, #32
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40011000 	.word	0x40011000
 80035d0:	40010800 	.word	0x40010800
 80035d4:	40010c00 	.word	0x40010c00
 80035d8:	10210000 	.word	0x10210000
 80035dc:	10110000 	.word	0x10110000
 80035e0:	40011400 	.word	0x40011400

080035e4 <StartDefaultTask>:
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035f0:	f004 fb1c 	bl	8007c2c <vTaskDelay>
 80035f4:	e7fa      	b.n	80035ec <StartDefaultTask+0x8>

080035f6 <Error_Handler>:
 80035f6:	b480      	push	{r7}
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	b672      	cpsid	i
 80035fc:	bf00      	nop
 80035fe:	e7fe      	b.n	80035fe <Error_Handler+0x8>

08003600 <HAL_MspInit>:
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	4b18      	ldr	r3, [pc, #96]	; (8003668 <HAL_MspInit+0x68>)
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	4a17      	ldr	r2, [pc, #92]	; (8003668 <HAL_MspInit+0x68>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6193      	str	r3, [r2, #24]
 8003612:	4b15      	ldr	r3, [pc, #84]	; (8003668 <HAL_MspInit+0x68>)
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_MspInit+0x68>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	4a11      	ldr	r2, [pc, #68]	; (8003668 <HAL_MspInit+0x68>)
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	61d3      	str	r3, [r2, #28]
 800362a:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <HAL_MspInit+0x68>)
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	210f      	movs	r1, #15
 800363a:	f06f 0001 	mvn.w	r0, #1
 800363e:	f000 fa80 	bl	8003b42 <HAL_NVIC_SetPriority>
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <HAL_MspInit+0x6c>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	4a04      	ldr	r2, [pc, #16]	; (800366c <HAL_MspInit+0x6c>)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6053      	str	r3, [r2, #4]
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	40010000 	.word	0x40010000

08003670 <HAL_SPI_MspInit>:
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	f107 0310 	add.w	r3, r7, #16
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <HAL_SPI_MspInit+0x80>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d12b      	bne.n	80036e8 <HAL_SPI_MspInit+0x78>
 8003690:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <HAL_SPI_MspInit+0x84>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	4a17      	ldr	r2, [pc, #92]	; (80036f4 <HAL_SPI_MspInit+0x84>)
 8003696:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800369a:	6193      	str	r3, [r2, #24]
 800369c:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <HAL_SPI_MspInit+0x84>)
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_SPI_MspInit+0x84>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	4a11      	ldr	r2, [pc, #68]	; (80036f4 <HAL_SPI_MspInit+0x84>)
 80036ae:	f043 0304 	orr.w	r3, r3, #4
 80036b2:	6193      	str	r3, [r2, #24]
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <HAL_SPI_MspInit+0x84>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	23a0      	movs	r3, #160	; 0xa0
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	2302      	movs	r3, #2
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	2303      	movs	r3, #3
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	f107 0310 	add.w	r3, r7, #16
 80036d0:	4619      	mov	r1, r3
 80036d2:	4809      	ldr	r0, [pc, #36]	; (80036f8 <HAL_SPI_MspInit+0x88>)
 80036d4:	f000 fd74 	bl	80041c0 <HAL_GPIO_Init>
 80036d8:	2200      	movs	r2, #0
 80036da:	2105      	movs	r1, #5
 80036dc:	2023      	movs	r0, #35	; 0x23
 80036de:	f000 fa30 	bl	8003b42 <HAL_NVIC_SetPriority>
 80036e2:	2023      	movs	r0, #35	; 0x23
 80036e4:	f000 fa49 	bl	8003b7a <HAL_NVIC_EnableIRQ>
 80036e8:	bf00      	nop
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40013000 	.word	0x40013000
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40010800 	.word	0x40010800

080036fc <HAL_TIM_Base_MspInit>:
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a0d      	ldr	r2, [pc, #52]	; (8003740 <HAL_TIM_Base_MspInit+0x44>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d113      	bne.n	8003736 <HAL_TIM_Base_MspInit+0x3a>
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_TIM_Base_MspInit+0x48>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <HAL_TIM_Base_MspInit+0x48>)
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	61d3      	str	r3, [r2, #28]
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <HAL_TIM_Base_MspInit+0x48>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	2105      	movs	r1, #5
 800372a:	201d      	movs	r0, #29
 800372c:	f000 fa09 	bl	8003b42 <HAL_NVIC_SetPriority>
 8003730:	201d      	movs	r0, #29
 8003732:	f000 fa22 	bl	8003b7a <HAL_NVIC_EnableIRQ>
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40000400 	.word	0x40000400
 8003744:	40021000 	.word	0x40021000

08003748 <HAL_TIM_MspPostInit>:
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	f107 030c 	add.w	r3, r7, #12
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <HAL_TIM_MspPostInit+0x7c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d129      	bne.n	80037bc <HAL_TIM_MspPostInit+0x74>
 8003768:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <HAL_TIM_MspPostInit+0x80>)
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <HAL_TIM_MspPostInit+0x80>)
 800376e:	f043 0310 	orr.w	r3, r3, #16
 8003772:	6193      	str	r3, [r2, #24]
 8003774:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <HAL_TIM_MspPostInit+0x80>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2340      	movs	r3, #64	; 0x40
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	2302      	movs	r3, #2
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	2302      	movs	r3, #2
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	f107 030c 	add.w	r3, r7, #12
 8003790:	4619      	mov	r1, r3
 8003792:	480e      	ldr	r0, [pc, #56]	; (80037cc <HAL_TIM_MspPostInit+0x84>)
 8003794:	f000 fd14 	bl	80041c0 <HAL_GPIO_Init>
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <HAL_TIM_MspPostInit+0x88>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	4a06      	ldr	r2, [pc, #24]	; (80037d0 <HAL_TIM_MspPostInit+0x88>)
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	6053      	str	r3, [r2, #4]
 80037bc:	bf00      	nop
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40011000 	.word	0x40011000
 80037d0:	40010000 	.word	0x40010000

080037d4 <NMI_Handler>:
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	e7fe      	b.n	80037d8 <NMI_Handler+0x4>

080037da <HardFault_Handler>:
 80037da:	b480      	push	{r7}
 80037dc:	af00      	add	r7, sp, #0
 80037de:	e7fe      	b.n	80037de <HardFault_Handler+0x4>

080037e0 <MemManage_Handler>:
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	e7fe      	b.n	80037e4 <MemManage_Handler+0x4>

080037e6 <BusFault_Handler>:
 80037e6:	b480      	push	{r7}
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	e7fe      	b.n	80037ea <BusFault_Handler+0x4>

080037ec <UsageFault_Handler>:
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	e7fe      	b.n	80037f0 <UsageFault_Handler+0x4>

080037f2 <DebugMon_Handler>:
 80037f2:	b480      	push	{r7}
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	bf00      	nop
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr

080037fe <SysTick_Handler>:
 80037fe:	b580      	push	{r7, lr}
 8003800:	af00      	add	r7, sp, #0
 8003802:	f000 f8ab 	bl	800395c <HAL_IncTick>
 8003806:	f004 fded 	bl	80083e4 <xTaskGetSchedulerState>
 800380a:	4603      	mov	r3, r0
 800380c:	2b01      	cmp	r3, #1
 800380e:	d001      	beq.n	8003814 <SysTick_Handler+0x16>
 8003810:	f005 fb22 	bl	8008e58 <xPortSysTickHandler>
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}

08003818 <EXTI2_IRQHandler>:
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
 800381c:	2004      	movs	r0, #4
 800381e:	f000 fe93 	bl	8004548 <HAL_GPIO_EXTI_IRQHandler>
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}

08003826 <EXTI9_5_IRQHandler>:
 8003826:	b580      	push	{r7, lr}
 8003828:	af00      	add	r7, sp, #0
 800382a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800382e:	f000 fe8b 	bl	8004548 <HAL_GPIO_EXTI_IRQHandler>
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <TIM3_IRQHandler>:
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
 800383c:	4802      	ldr	r0, [pc, #8]	; (8003848 <TIM3_IRQHandler+0x10>)
 800383e:	f002 fac5 	bl	8005dcc <HAL_TIM_IRQHandler>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8003842:	bf00      	nop
 8003844:	200045d4 	.word	0x200045d4

<<<<<<< HEAD
08003848 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800384c:	4802      	ldr	r0, [pc, #8]	; (8003858 <SPI1_IRQHandler+0x10>)
 800384e:	f001 feed 	bl	800562c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
=======
0800384c <SPI1_IRQHandler>:
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
 8003850:	4802      	ldr	r0, [pc, #8]	; (800385c <SPI1_IRQHandler+0x10>)
 8003852:	f001 feed 	bl	8005630 <HAL_SPI_IRQHandler>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8003856:	bf00      	nop
 8003858:	2000461c 	.word	0x2000461c

<<<<<<< HEAD
0800385c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003860:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003864:	f000 fe6e 	bl	8004544 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003868:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800386c:	f000 fe6a 	bl	8004544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003870:	bf00      	nop
 8003872:	bd80      	pop	{r7, pc}

08003874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003880:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003882:	e003      	b.n	800388c <LoopCopyDataInit>

08003884 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003886:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003888:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800388a:	3104      	adds	r1, #4

0800388c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800388c:	480a      	ldr	r0, [pc, #40]	; (80038b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800388e:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003890:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003892:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003894:	d3f6      	bcc.n	8003884 <CopyDataInit>
  ldr r2, =_sbss
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003898:	e002      	b.n	80038a0 <LoopFillZerobss>

0800389a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800389a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800389c:	f842 3b04 	str.w	r3, [r2], #4

080038a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80038a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80038a4:	d3f9      	bcc.n	800389a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038a6:	f7ff ffe5 	bl	8003874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038aa:	f005 fca1 	bl	80091f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038ae:	f7ff fc85 	bl	80031bc <main>
  bx lr
 80038b2:	4770      	bx	lr
  ldr r3, =_sidata
 80038b4:	0800936c 	.word	0x0800936c
  ldr r0, =_sdata
 80038b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80038bc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80038c0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80038c4:	200046d8 	.word	0x200046d8

080038c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038c8:	e7fe      	b.n	80038c8 <ADC1_2_IRQHandler>
	...

080038cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038d0:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <HAL_Init+0x28>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <HAL_Init+0x28>)
 80038d6:	f043 0310 	orr.w	r3, r3, #16
 80038da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038dc:	2003      	movs	r0, #3
 80038de:	f000 f923 	bl	8003b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038e2:	200f      	movs	r0, #15
 80038e4:	f000 f808 	bl	80038f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038e8:	f7ff fe88 	bl	80035fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40022000 	.word	0x40022000

080038f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_InitTick+0x54>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_InitTick+0x58>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	4619      	mov	r1, r3
 800390a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800390e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003912:	fbb2 f3f3 	udiv	r3, r2, r3
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f93b 	bl	8003b92 <HAL_SYSTICK_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e00e      	b.n	8003944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b0f      	cmp	r3, #15
 800392a:	d80a      	bhi.n	8003942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800392c:	2200      	movs	r2, #0
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	f000 f903 	bl	8003b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003938:	4a06      	ldr	r2, [pc, #24]	; (8003954 <HAL_InitTick+0x5c>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	e000      	b.n	8003944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000000 	.word	0x20000000
 8003950:	20000008 	.word	0x20000008
 8003954:	20000004 	.word	0x20000004

08003958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_IncTick+0x1c>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_IncTick+0x20>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4413      	add	r3, r2
 8003968:	4a03      	ldr	r2, [pc, #12]	; (8003978 <HAL_IncTick+0x20>)
 800396a:	6013      	str	r3, [r2, #0]
}
 800396c:	bf00      	nop
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr
 8003974:	20000008 	.word	0x20000008
 8003978:	20004674 	.word	0x20004674

0800397c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return uwTick;
 8003980:	4b02      	ldr	r3, [pc, #8]	; (800398c <HAL_GetTick+0x10>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr
 800398c:	20004674 	.word	0x20004674

08003990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ac:	4013      	ands	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c2:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	60d3      	str	r3, [r2, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <__NVIC_GetPriorityGrouping+0x18>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 0307 	and.w	r3, r3, #7
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	db0b      	blt.n	8003a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	f003 021f 	and.w	r2, r3, #31
 8003a0c:	4906      	ldr	r1, [pc, #24]	; (8003a28 <__NVIC_EnableIRQ+0x34>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2001      	movs	r0, #1
 8003a16:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	e000e100 	.word	0xe000e100

08003a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	6039      	str	r1, [r7, #0]
 8003a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	db0a      	blt.n	8003a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	490c      	ldr	r1, [pc, #48]	; (8003a78 <__NVIC_SetPriority+0x4c>)
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	0112      	lsls	r2, r2, #4
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	440b      	add	r3, r1
 8003a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a54:	e00a      	b.n	8003a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4908      	ldr	r1, [pc, #32]	; (8003a7c <__NVIC_SetPriority+0x50>)
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	3b04      	subs	r3, #4
 8003a64:	0112      	lsls	r2, r2, #4
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	440b      	add	r3, r1
 8003a6a:	761a      	strb	r2, [r3, #24]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	e000e100 	.word	0xe000e100
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	; 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f1c3 0307 	rsb	r3, r3, #7
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	bf28      	it	cs
 8003a9e:	2304      	movcs	r3, #4
 8003aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	2b06      	cmp	r3, #6
 8003aa8:	d902      	bls.n	8003ab0 <NVIC_EncodePriority+0x30>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3b03      	subs	r3, #3
 8003aae:	e000      	b.n	8003ab2 <NVIC_EncodePriority+0x32>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad2:	43d9      	mvns	r1, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	4313      	orrs	r3, r2
         );
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3724      	adds	r7, #36	; 0x24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af4:	d301      	bcc.n	8003afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003af6:	2301      	movs	r3, #1
 8003af8:	e00f      	b.n	8003b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <SysTick_Config+0x40>)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b02:	210f      	movs	r1, #15
 8003b04:	f04f 30ff 	mov.w	r0, #4294967295
 8003b08:	f7ff ff90 	bl	8003a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <SysTick_Config+0x40>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b12:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <SysTick_Config+0x40>)
 8003b14:	2207      	movs	r2, #7
 8003b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	e000e010 	.word	0xe000e010

08003b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff ff2d 	bl	8003990 <__NVIC_SetPriorityGrouping>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b086      	sub	sp, #24
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	4603      	mov	r3, r0
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b50:	f7ff ff42 	bl	80039d8 <__NVIC_GetPriorityGrouping>
 8003b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	6978      	ldr	r0, [r7, #20]
 8003b5c:	f7ff ff90 	bl	8003a80 <NVIC_EncodePriority>
 8003b60:	4602      	mov	r2, r0
 8003b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff ff5f 	bl	8003a2c <__NVIC_SetPriority>
}
 8003b6e:	bf00      	nop
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff ff35 	bl	80039f4 <__NVIC_EnableIRQ>
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff ffa2 	bl	8003ae4 <SysTick_Config>
 8003ba0:	4603      	mov	r3, r0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d005      	beq.n	8003bce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
 8003bcc:	e0d6      	b.n	8003d7c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 020e 	bic.w	r2, r2, #14
 8003bdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b64      	ldr	r3, [pc, #400]	; (8003d88 <HAL_DMA_Abort_IT+0x1dc>)
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d958      	bls.n	8003cac <HAL_DMA_Abort_IT+0x100>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a63      	ldr	r2, [pc, #396]	; (8003d8c <HAL_DMA_Abort_IT+0x1e0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d04f      	beq.n	8003ca4 <HAL_DMA_Abort_IT+0xf8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a61      	ldr	r2, [pc, #388]	; (8003d90 <HAL_DMA_Abort_IT+0x1e4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d048      	beq.n	8003ca0 <HAL_DMA_Abort_IT+0xf4>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a60      	ldr	r2, [pc, #384]	; (8003d94 <HAL_DMA_Abort_IT+0x1e8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d040      	beq.n	8003c9a <HAL_DMA_Abort_IT+0xee>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a5e      	ldr	r2, [pc, #376]	; (8003d98 <HAL_DMA_Abort_IT+0x1ec>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d038      	beq.n	8003c94 <HAL_DMA_Abort_IT+0xe8>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a5d      	ldr	r2, [pc, #372]	; (8003d9c <HAL_DMA_Abort_IT+0x1f0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d030      	beq.n	8003c8e <HAL_DMA_Abort_IT+0xe2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a5b      	ldr	r2, [pc, #364]	; (8003da0 <HAL_DMA_Abort_IT+0x1f4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d028      	beq.n	8003c88 <HAL_DMA_Abort_IT+0xdc>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a53      	ldr	r2, [pc, #332]	; (8003d88 <HAL_DMA_Abort_IT+0x1dc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d020      	beq.n	8003c82 <HAL_DMA_Abort_IT+0xd6>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a57      	ldr	r2, [pc, #348]	; (8003da4 <HAL_DMA_Abort_IT+0x1f8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d019      	beq.n	8003c7e <HAL_DMA_Abort_IT+0xd2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a56      	ldr	r2, [pc, #344]	; (8003da8 <HAL_DMA_Abort_IT+0x1fc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d012      	beq.n	8003c7a <HAL_DMA_Abort_IT+0xce>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a54      	ldr	r2, [pc, #336]	; (8003dac <HAL_DMA_Abort_IT+0x200>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00a      	beq.n	8003c74 <HAL_DMA_Abort_IT+0xc8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a53      	ldr	r2, [pc, #332]	; (8003db0 <HAL_DMA_Abort_IT+0x204>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d102      	bne.n	8003c6e <HAL_DMA_Abort_IT+0xc2>
 8003c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c6c:	e01b      	b.n	8003ca6 <HAL_DMA_Abort_IT+0xfa>
 8003c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c72:	e018      	b.n	8003ca6 <HAL_DMA_Abort_IT+0xfa>
 8003c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c78:	e015      	b.n	8003ca6 <HAL_DMA_Abort_IT+0xfa>
 8003c7a:	2310      	movs	r3, #16
 8003c7c:	e013      	b.n	8003ca6 <HAL_DMA_Abort_IT+0xfa>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e011      	b.n	8003ca6 <HAL_DMA_Abort_IT+0xfa>
 8003c82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c86:	e00e      	b.n	8003ca6 <HAL_DMA_Abort_IT+0xfa>
 8003c88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c8c:	e00b      	b.n	8003ca6 <HAL_DMA_Abort_IT+0xfa>
 8003c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c92:	e008      	b.n	8003ca6 <HAL_DMA_Abort_IT+0xfa>
 8003c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c98:	e005      	b.n	8003ca6 <HAL_DMA_Abort_IT+0xfa>
 8003c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c9e:	e002      	b.n	8003ca6 <HAL_DMA_Abort_IT+0xfa>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	e000      	b.n	8003ca6 <HAL_DMA_Abort_IT+0xfa>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	4a43      	ldr	r2, [pc, #268]	; (8003db4 <HAL_DMA_Abort_IT+0x208>)
 8003ca8:	6053      	str	r3, [r2, #4]
 8003caa:	e057      	b.n	8003d5c <HAL_DMA_Abort_IT+0x1b0>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a36      	ldr	r2, [pc, #216]	; (8003d8c <HAL_DMA_Abort_IT+0x1e0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d04f      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x1aa>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a35      	ldr	r2, [pc, #212]	; (8003d90 <HAL_DMA_Abort_IT+0x1e4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d048      	beq.n	8003d52 <HAL_DMA_Abort_IT+0x1a6>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a33      	ldr	r2, [pc, #204]	; (8003d94 <HAL_DMA_Abort_IT+0x1e8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d040      	beq.n	8003d4c <HAL_DMA_Abort_IT+0x1a0>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a32      	ldr	r2, [pc, #200]	; (8003d98 <HAL_DMA_Abort_IT+0x1ec>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d038      	beq.n	8003d46 <HAL_DMA_Abort_IT+0x19a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a30      	ldr	r2, [pc, #192]	; (8003d9c <HAL_DMA_Abort_IT+0x1f0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d030      	beq.n	8003d40 <HAL_DMA_Abort_IT+0x194>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2f      	ldr	r2, [pc, #188]	; (8003da0 <HAL_DMA_Abort_IT+0x1f4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d028      	beq.n	8003d3a <HAL_DMA_Abort_IT+0x18e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a26      	ldr	r2, [pc, #152]	; (8003d88 <HAL_DMA_Abort_IT+0x1dc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d020      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x188>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2b      	ldr	r2, [pc, #172]	; (8003da4 <HAL_DMA_Abort_IT+0x1f8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d019      	beq.n	8003d30 <HAL_DMA_Abort_IT+0x184>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a29      	ldr	r2, [pc, #164]	; (8003da8 <HAL_DMA_Abort_IT+0x1fc>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d012      	beq.n	8003d2c <HAL_DMA_Abort_IT+0x180>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a28      	ldr	r2, [pc, #160]	; (8003dac <HAL_DMA_Abort_IT+0x200>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00a      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x17a>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a26      	ldr	r2, [pc, #152]	; (8003db0 <HAL_DMA_Abort_IT+0x204>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d102      	bne.n	8003d20 <HAL_DMA_Abort_IT+0x174>
 8003d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d1e:	e01b      	b.n	8003d58 <HAL_DMA_Abort_IT+0x1ac>
 8003d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d24:	e018      	b.n	8003d58 <HAL_DMA_Abort_IT+0x1ac>
 8003d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d2a:	e015      	b.n	8003d58 <HAL_DMA_Abort_IT+0x1ac>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	e013      	b.n	8003d58 <HAL_DMA_Abort_IT+0x1ac>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e011      	b.n	8003d58 <HAL_DMA_Abort_IT+0x1ac>
 8003d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d38:	e00e      	b.n	8003d58 <HAL_DMA_Abort_IT+0x1ac>
 8003d3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d3e:	e00b      	b.n	8003d58 <HAL_DMA_Abort_IT+0x1ac>
 8003d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d44:	e008      	b.n	8003d58 <HAL_DMA_Abort_IT+0x1ac>
 8003d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d4a:	e005      	b.n	8003d58 <HAL_DMA_Abort_IT+0x1ac>
 8003d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d50:	e002      	b.n	8003d58 <HAL_DMA_Abort_IT+0x1ac>
 8003d52:	2310      	movs	r3, #16
 8003d54:	e000      	b.n	8003d58 <HAL_DMA_Abort_IT+0x1ac>
 8003d56:	2301      	movs	r3, #1
 8003d58:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_DMA_Abort_IT+0x20c>)
 8003d5a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
    } 
  }
  return status;
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40020080 	.word	0x40020080
 8003d8c:	40020008 	.word	0x40020008
 8003d90:	4002001c 	.word	0x4002001c
 8003d94:	40020030 	.word	0x40020030
 8003d98:	40020044 	.word	0x40020044
 8003d9c:	40020058 	.word	0x40020058
 8003da0:	4002006c 	.word	0x4002006c
 8003da4:	40020408 	.word	0x40020408
 8003da8:	4002041c 	.word	0x4002041c
 8003dac:	40020430 	.word	0x40020430
 8003db0:	40020444 	.word	0x40020444
 8003db4:	40020400 	.word	0x40020400
 8003db8:	40020000 	.word	0x40020000

08003dbc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003dd6:	4b2f      	ldr	r3, [pc, #188]	; (8003e94 <HAL_FLASH_Program+0xd8>)
 8003dd8:	7e1b      	ldrb	r3, [r3, #24]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_FLASH_Program+0x26>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e054      	b.n	8003e8c <HAL_FLASH_Program+0xd0>
 8003de2:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <HAL_FLASH_Program+0xd8>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003de8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dec:	f000 f8a8 	bl	8003f40 <FLASH_WaitForLastOperation>
 8003df0:	4603      	mov	r3, r0
 8003df2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d144      	bne.n	8003e84 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003e00:	2301      	movs	r3, #1
 8003e02:	757b      	strb	r3, [r7, #21]
 8003e04:	e007      	b.n	8003e16 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d102      	bne.n	8003e12 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	757b      	strb	r3, [r7, #21]
 8003e10:	e001      	b.n	8003e16 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003e12:	2304      	movs	r3, #4
 8003e14:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	75bb      	strb	r3, [r7, #22]
 8003e1a:	e02d      	b.n	8003e78 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003e1c:	7dbb      	ldrb	r3, [r7, #22]
 8003e1e:	005a      	lsls	r2, r3, #1
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	eb02 0c03 	add.w	ip, r2, r3
 8003e26:	7dbb      	ldrb	r3, [r7, #22]
 8003e28:	0119      	lsls	r1, r3, #4
 8003e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e2e:	f1c1 0620 	rsb	r6, r1, #32
 8003e32:	f1a1 0020 	sub.w	r0, r1, #32
 8003e36:	fa22 f401 	lsr.w	r4, r2, r1
 8003e3a:	fa03 f606 	lsl.w	r6, r3, r6
 8003e3e:	4334      	orrs	r4, r6
 8003e40:	fa23 f000 	lsr.w	r0, r3, r0
 8003e44:	4304      	orrs	r4, r0
 8003e46:	fa23 f501 	lsr.w	r5, r3, r1
 8003e4a:	b2a3      	uxth	r3, r4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4660      	mov	r0, ip
 8003e50:	f000 f85a 	bl	8003f08 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003e54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e58:	f000 f872 	bl	8003f40 <FLASH_WaitForLastOperation>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003e60:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <HAL_FLASH_Program+0xdc>)
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	4a0c      	ldr	r2, [pc, #48]	; (8003e98 <HAL_FLASH_Program+0xdc>)
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d107      	bne.n	8003e82 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003e72:	7dbb      	ldrb	r3, [r7, #22]
 8003e74:	3301      	adds	r3, #1
 8003e76:	75bb      	strb	r3, [r7, #22]
 8003e78:	7dba      	ldrb	r2, [r7, #22]
 8003e7a:	7d7b      	ldrb	r3, [r7, #21]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d3cd      	bcc.n	8003e1c <HAL_FLASH_Program+0x60>
 8003e80:	e000      	b.n	8003e84 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003e82:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <HAL_FLASH_Program+0xd8>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	761a      	strb	r2, [r3, #24]

  return status;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e94:	20004678 	.word	0x20004678
 8003e98:	40022000 	.word	0x40022000

08003e9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <HAL_FLASH_Unlock+0x40>)
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <HAL_FLASH_Unlock+0x40>)
 8003eb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <HAL_FLASH_Unlock+0x44>)
 8003eb6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <HAL_FLASH_Unlock+0x40>)
 8003eba:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <HAL_FLASH_Unlock+0x48>)
 8003ebc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ebe:	4b07      	ldr	r3, [pc, #28]	; (8003edc <HAL_FLASH_Unlock+0x40>)
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003ece:	79fb      	ldrb	r3, [r7, #7]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40022000 	.word	0x40022000
 8003ee0:	45670123 	.word	0x45670123
 8003ee4:	cdef89ab 	.word	0xcdef89ab

08003ee8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_FLASH_Lock+0x1c>)
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	4a04      	ldr	r2, [pc, #16]	; (8003f04 <HAL_FLASH_Lock+0x1c>)
 8003ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40022000 	.word	0x40022000

08003f08 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f14:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <FLASH_Program_HalfWord+0x30>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003f1a:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <FLASH_Program_HalfWord+0x34>)
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	4a07      	ldr	r2, [pc, #28]	; (8003f3c <FLASH_Program_HalfWord+0x34>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	887a      	ldrh	r2, [r7, #2]
 8003f2a:	801a      	strh	r2, [r3, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20004678 	.word	0x20004678
 8003f3c:	40022000 	.word	0x40022000

08003f40 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003f48:	f7ff fd18 	bl	800397c <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f4e:	e010      	b.n	8003f72 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d00c      	beq.n	8003f72 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <FLASH_WaitForLastOperation+0x2e>
 8003f5e:	f7ff fd0d 	bl	800397c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d201      	bcs.n	8003f72 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e025      	b.n	8003fbe <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f72:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <FLASH_WaitForLastOperation+0x88>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e8      	bne.n	8003f50 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <FLASH_WaitForLastOperation+0x88>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <FLASH_WaitForLastOperation+0x88>)
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003f90:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <FLASH_WaitForLastOperation+0x88>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10b      	bne.n	8003fb4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <FLASH_WaitForLastOperation+0x88>)
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d105      	bne.n	8003fb4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <FLASH_WaitForLastOperation+0x88>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003fb4:	f000 f80a 	bl	8003fcc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40022000 	.word	0x40022000

08003fcc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003fd6:	4b23      	ldr	r3, [pc, #140]	; (8004064 <FLASH_SetErrorCode+0x98>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003fe2:	4b21      	ldr	r3, [pc, #132]	; (8004068 <FLASH_SetErrorCode+0x9c>)
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f043 0302 	orr.w	r3, r3, #2
 8003fea:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <FLASH_SetErrorCode+0x9c>)
 8003fec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f043 0310 	orr.w	r3, r3, #16
 8003ff4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ff6:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <FLASH_SetErrorCode+0x98>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004002:	4b19      	ldr	r3, [pc, #100]	; (8004068 <FLASH_SetErrorCode+0x9c>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	4a17      	ldr	r2, [pc, #92]	; (8004068 <FLASH_SetErrorCode+0x9c>)
 800400c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f043 0304 	orr.w	r3, r3, #4
 8004014:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004016:	4b13      	ldr	r3, [pc, #76]	; (8004064 <FLASH_SetErrorCode+0x98>)
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004022:	4b11      	ldr	r3, [pc, #68]	; (8004068 <FLASH_SetErrorCode+0x9c>)
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	4a0f      	ldr	r2, [pc, #60]	; (8004068 <FLASH_SetErrorCode+0x9c>)
 800402c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800402e:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <FLASH_SetErrorCode+0x98>)
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <FLASH_SetErrorCode+0x98>)
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f240 1201 	movw	r2, #257	; 0x101
 8004040:	4293      	cmp	r3, r2
 8004042:	d106      	bne.n	8004052 <FLASH_SetErrorCode+0x86>
 8004044:	4b07      	ldr	r3, [pc, #28]	; (8004064 <FLASH_SetErrorCode+0x98>)
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	4a06      	ldr	r2, [pc, #24]	; (8004064 <FLASH_SetErrorCode+0x98>)
 800404a:	f023 0301 	bic.w	r3, r3, #1
 800404e:	61d3      	str	r3, [r2, #28]
}  
 8004050:	e002      	b.n	8004058 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004052:	4a04      	ldr	r2, [pc, #16]	; (8004064 <FLASH_SetErrorCode+0x98>)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60d3      	str	r3, [r2, #12]
}  
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40022000 	.word	0x40022000
 8004068:	20004678 	.word	0x20004678

0800406c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800407e:	4b2f      	ldr	r3, [pc, #188]	; (800413c <HAL_FLASHEx_Erase+0xd0>)
 8004080:	7e1b      	ldrb	r3, [r3, #24]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_FLASHEx_Erase+0x1e>
 8004086:	2302      	movs	r3, #2
 8004088:	e053      	b.n	8004132 <HAL_FLASHEx_Erase+0xc6>
 800408a:	4b2c      	ldr	r3, [pc, #176]	; (800413c <HAL_FLASHEx_Erase+0xd0>)
 800408c:	2201      	movs	r2, #1
 800408e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d116      	bne.n	80040c6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004098:	f24c 3050 	movw	r0, #50000	; 0xc350
 800409c:	f7ff ff50 	bl	8003f40 <FLASH_WaitForLastOperation>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d141      	bne.n	800412a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80040a6:	2001      	movs	r0, #1
 80040a8:	f000 f84c 	bl	8004144 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040b0:	f7ff ff46 	bl	8003f40 <FLASH_WaitForLastOperation>
 80040b4:	4603      	mov	r3, r0
 80040b6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80040b8:	4b21      	ldr	r3, [pc, #132]	; (8004140 <HAL_FLASHEx_Erase+0xd4>)
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	4a20      	ldr	r2, [pc, #128]	; (8004140 <HAL_FLASHEx_Erase+0xd4>)
 80040be:	f023 0304 	bic.w	r3, r3, #4
 80040c2:	6113      	str	r3, [r2, #16]
 80040c4:	e031      	b.n	800412a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80040c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040ca:	f7ff ff39 	bl	8003f40 <FLASH_WaitForLastOperation>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d12a      	bne.n	800412a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	f04f 32ff 	mov.w	r2, #4294967295
 80040da:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	e019      	b.n	8004118 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80040e4:	68b8      	ldr	r0, [r7, #8]
 80040e6:	f000 f849 	bl	800417c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040ee:	f7ff ff27 	bl	8003f40 <FLASH_WaitForLastOperation>
 80040f2:	4603      	mov	r3, r0
 80040f4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <HAL_FLASHEx_Erase+0xd4>)
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	4a11      	ldr	r2, [pc, #68]	; (8004140 <HAL_FLASHEx_Erase+0xd4>)
 80040fc:	f023 0302 	bic.w	r3, r3, #2
 8004100:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	601a      	str	r2, [r3, #0]
            break;
 800410e:	e00c      	b.n	800412a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004116:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	02da      	lsls	r2, r3, #11
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	429a      	cmp	r2, r3
 8004128:	d3dc      	bcc.n	80040e4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800412a:	4b04      	ldr	r3, [pc, #16]	; (800413c <HAL_FLASHEx_Erase+0xd0>)
 800412c:	2200      	movs	r2, #0
 800412e:	761a      	strb	r2, [r3, #24]

  return status;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20004678 	.word	0x20004678
 8004140:	40022000 	.word	0x40022000

08004144 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <FLASH_MassErase+0x30>)
 800414e:	2200      	movs	r2, #0
 8004150:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <FLASH_MassErase+0x34>)
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	4a08      	ldr	r2, [pc, #32]	; (8004178 <FLASH_MassErase+0x34>)
 8004158:	f043 0304 	orr.w	r3, r3, #4
 800415c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <FLASH_MassErase+0x34>)
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	4a05      	ldr	r2, [pc, #20]	; (8004178 <FLASH_MassErase+0x34>)
 8004164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004168:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr
 8004174:	20004678 	.word	0x20004678
 8004178:	40022000 	.word	0x40022000

0800417c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <FLASH_PageErase+0x38>)
 8004186:	2200      	movs	r2, #0
 8004188:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <FLASH_PageErase+0x3c>)
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <FLASH_PageErase+0x3c>)
 8004190:	f043 0302 	orr.w	r3, r3, #2
 8004194:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004196:	4a08      	ldr	r2, [pc, #32]	; (80041b8 <FLASH_PageErase+0x3c>)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <FLASH_PageErase+0x3c>)
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <FLASH_PageErase+0x3c>)
 80041a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20004678 	.word	0x20004678
 80041b8:	40022000 	.word	0x40022000

080041bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041bc:	b480      	push	{r7}
 80041be:	b08b      	sub	sp, #44	; 0x2c
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041c6:	2300      	movs	r3, #0
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80041ca:	2300      	movs	r3, #0
 80041cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041ce:	e179      	b.n	80044c4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80041d0:	2201      	movs	r2, #1
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	f040 8168 	bne.w	80044be <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4aa0      	ldr	r2, [pc, #640]	; (8004474 <HAL_GPIO_Init+0x2b8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d05e      	beq.n	80042b6 <HAL_GPIO_Init+0xfa>
 80041f8:	4a9e      	ldr	r2, [pc, #632]	; (8004474 <HAL_GPIO_Init+0x2b8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d875      	bhi.n	80042ea <HAL_GPIO_Init+0x12e>
 80041fe:	4a9e      	ldr	r2, [pc, #632]	; (8004478 <HAL_GPIO_Init+0x2bc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d058      	beq.n	80042b6 <HAL_GPIO_Init+0xfa>
 8004204:	4a9c      	ldr	r2, [pc, #624]	; (8004478 <HAL_GPIO_Init+0x2bc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d86f      	bhi.n	80042ea <HAL_GPIO_Init+0x12e>
 800420a:	4a9c      	ldr	r2, [pc, #624]	; (800447c <HAL_GPIO_Init+0x2c0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d052      	beq.n	80042b6 <HAL_GPIO_Init+0xfa>
 8004210:	4a9a      	ldr	r2, [pc, #616]	; (800447c <HAL_GPIO_Init+0x2c0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d869      	bhi.n	80042ea <HAL_GPIO_Init+0x12e>
 8004216:	4a9a      	ldr	r2, [pc, #616]	; (8004480 <HAL_GPIO_Init+0x2c4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d04c      	beq.n	80042b6 <HAL_GPIO_Init+0xfa>
 800421c:	4a98      	ldr	r2, [pc, #608]	; (8004480 <HAL_GPIO_Init+0x2c4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d863      	bhi.n	80042ea <HAL_GPIO_Init+0x12e>
 8004222:	4a98      	ldr	r2, [pc, #608]	; (8004484 <HAL_GPIO_Init+0x2c8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d046      	beq.n	80042b6 <HAL_GPIO_Init+0xfa>
 8004228:	4a96      	ldr	r2, [pc, #600]	; (8004484 <HAL_GPIO_Init+0x2c8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d85d      	bhi.n	80042ea <HAL_GPIO_Init+0x12e>
 800422e:	2b12      	cmp	r3, #18
 8004230:	d82a      	bhi.n	8004288 <HAL_GPIO_Init+0xcc>
 8004232:	2b12      	cmp	r3, #18
 8004234:	d859      	bhi.n	80042ea <HAL_GPIO_Init+0x12e>
 8004236:	a201      	add	r2, pc, #4	; (adr r2, 800423c <HAL_GPIO_Init+0x80>)
 8004238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423c:	080042b7 	.word	0x080042b7
 8004240:	08004291 	.word	0x08004291
 8004244:	080042a3 	.word	0x080042a3
 8004248:	080042e5 	.word	0x080042e5
 800424c:	080042eb 	.word	0x080042eb
 8004250:	080042eb 	.word	0x080042eb
 8004254:	080042eb 	.word	0x080042eb
 8004258:	080042eb 	.word	0x080042eb
 800425c:	080042eb 	.word	0x080042eb
 8004260:	080042eb 	.word	0x080042eb
 8004264:	080042eb 	.word	0x080042eb
 8004268:	080042eb 	.word	0x080042eb
 800426c:	080042eb 	.word	0x080042eb
 8004270:	080042eb 	.word	0x080042eb
 8004274:	080042eb 	.word	0x080042eb
 8004278:	080042eb 	.word	0x080042eb
 800427c:	080042eb 	.word	0x080042eb
 8004280:	08004299 	.word	0x08004299
 8004284:	080042ad 	.word	0x080042ad
 8004288:	4a7f      	ldr	r2, [pc, #508]	; (8004488 <HAL_GPIO_Init+0x2cc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800428e:	e02c      	b.n	80042ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	623b      	str	r3, [r7, #32]
          break;
 8004296:	e029      	b.n	80042ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	3304      	adds	r3, #4
 800429e:	623b      	str	r3, [r7, #32]
          break;
 80042a0:	e024      	b.n	80042ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	3308      	adds	r3, #8
 80042a8:	623b      	str	r3, [r7, #32]
          break;
 80042aa:	e01f      	b.n	80042ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	330c      	adds	r3, #12
 80042b2:	623b      	str	r3, [r7, #32]
          break;
 80042b4:	e01a      	b.n	80042ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80042be:	2304      	movs	r3, #4
 80042c0:	623b      	str	r3, [r7, #32]
          break;
 80042c2:	e013      	b.n	80042ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d105      	bne.n	80042d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042cc:	2308      	movs	r3, #8
 80042ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	611a      	str	r2, [r3, #16]
          break;
 80042d6:	e009      	b.n	80042ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042d8:	2308      	movs	r3, #8
 80042da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	615a      	str	r2, [r3, #20]
          break;
 80042e2:	e003      	b.n	80042ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80042e4:	2300      	movs	r3, #0
 80042e6:	623b      	str	r3, [r7, #32]
          break;
 80042e8:	e000      	b.n	80042ec <HAL_GPIO_Init+0x130>
          break;
 80042ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2bff      	cmp	r3, #255	; 0xff
 80042f0:	d801      	bhi.n	80042f6 <HAL_GPIO_Init+0x13a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	e001      	b.n	80042fa <HAL_GPIO_Init+0x13e>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3304      	adds	r3, #4
 80042fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2bff      	cmp	r3, #255	; 0xff
 8004300:	d802      	bhi.n	8004308 <HAL_GPIO_Init+0x14c>
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	e002      	b.n	800430e <HAL_GPIO_Init+0x152>
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	3b08      	subs	r3, #8
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	210f      	movs	r1, #15
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	401a      	ands	r2, r3
 8004320:	6a39      	ldr	r1, [r7, #32]
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	fa01 f303 	lsl.w	r3, r1, r3
 8004328:	431a      	orrs	r2, r3
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80c1 	beq.w	80044be <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800433c:	4b53      	ldr	r3, [pc, #332]	; (800448c <HAL_GPIO_Init+0x2d0>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	4a52      	ldr	r2, [pc, #328]	; (800448c <HAL_GPIO_Init+0x2d0>)
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	6193      	str	r3, [r2, #24]
 8004348:	4b50      	ldr	r3, [pc, #320]	; (800448c <HAL_GPIO_Init+0x2d0>)
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004354:	4a4e      	ldr	r2, [pc, #312]	; (8004490 <HAL_GPIO_Init+0x2d4>)
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	089b      	lsrs	r3, r3, #2
 800435a:	3302      	adds	r3, #2
 800435c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004360:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	220f      	movs	r2, #15
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4013      	ands	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a46      	ldr	r2, [pc, #280]	; (8004494 <HAL_GPIO_Init+0x2d8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d01f      	beq.n	80043c0 <HAL_GPIO_Init+0x204>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a45      	ldr	r2, [pc, #276]	; (8004498 <HAL_GPIO_Init+0x2dc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d019      	beq.n	80043bc <HAL_GPIO_Init+0x200>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a44      	ldr	r2, [pc, #272]	; (800449c <HAL_GPIO_Init+0x2e0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d013      	beq.n	80043b8 <HAL_GPIO_Init+0x1fc>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a43      	ldr	r2, [pc, #268]	; (80044a0 <HAL_GPIO_Init+0x2e4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00d      	beq.n	80043b4 <HAL_GPIO_Init+0x1f8>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a42      	ldr	r2, [pc, #264]	; (80044a4 <HAL_GPIO_Init+0x2e8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d007      	beq.n	80043b0 <HAL_GPIO_Init+0x1f4>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a41      	ldr	r2, [pc, #260]	; (80044a8 <HAL_GPIO_Init+0x2ec>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d101      	bne.n	80043ac <HAL_GPIO_Init+0x1f0>
 80043a8:	2305      	movs	r3, #5
 80043aa:	e00a      	b.n	80043c2 <HAL_GPIO_Init+0x206>
 80043ac:	2306      	movs	r3, #6
 80043ae:	e008      	b.n	80043c2 <HAL_GPIO_Init+0x206>
 80043b0:	2304      	movs	r3, #4
 80043b2:	e006      	b.n	80043c2 <HAL_GPIO_Init+0x206>
 80043b4:	2303      	movs	r3, #3
 80043b6:	e004      	b.n	80043c2 <HAL_GPIO_Init+0x206>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e002      	b.n	80043c2 <HAL_GPIO_Init+0x206>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <HAL_GPIO_Init+0x206>
 80043c0:	2300      	movs	r3, #0
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	f002 0203 	and.w	r2, r2, #3
 80043c8:	0092      	lsls	r2, r2, #2
 80043ca:	4093      	lsls	r3, r2
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80043d2:	492f      	ldr	r1, [pc, #188]	; (8004490 <HAL_GPIO_Init+0x2d4>)
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	089b      	lsrs	r3, r3, #2
 80043d8:	3302      	adds	r3, #2
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d006      	beq.n	80043fa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043ec:	4b2f      	ldr	r3, [pc, #188]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	492e      	ldr	r1, [pc, #184]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]
 80043f8:	e006      	b.n	8004408 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043fa:	4b2c      	ldr	r3, [pc, #176]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	43db      	mvns	r3, r3
 8004402:	492a      	ldr	r1, [pc, #168]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 8004404:	4013      	ands	r3, r2
 8004406:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d006      	beq.n	8004422 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004414:	4b25      	ldr	r3, [pc, #148]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	4924      	ldr	r1, [pc, #144]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	4313      	orrs	r3, r2
 800441e:	604b      	str	r3, [r1, #4]
 8004420:	e006      	b.n	8004430 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004422:	4b22      	ldr	r3, [pc, #136]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	43db      	mvns	r3, r3
 800442a:	4920      	ldr	r1, [pc, #128]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 800442c:	4013      	ands	r3, r2
 800442e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d006      	beq.n	800444a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	491a      	ldr	r1, [pc, #104]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4313      	orrs	r3, r2
 8004446:	608b      	str	r3, [r1, #8]
 8004448:	e006      	b.n	8004458 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800444a:	4b18      	ldr	r3, [pc, #96]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	43db      	mvns	r3, r3
 8004452:	4916      	ldr	r1, [pc, #88]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 8004454:	4013      	ands	r3, r2
 8004456:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d025      	beq.n	80044b0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004464:	4b11      	ldr	r3, [pc, #68]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	4910      	ldr	r1, [pc, #64]	; (80044ac <HAL_GPIO_Init+0x2f0>)
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	4313      	orrs	r3, r2
 800446e:	60cb      	str	r3, [r1, #12]
 8004470:	e025      	b.n	80044be <HAL_GPIO_Init+0x302>
 8004472:	bf00      	nop
 8004474:	10320000 	.word	0x10320000
 8004478:	10310000 	.word	0x10310000
 800447c:	10220000 	.word	0x10220000
 8004480:	10210000 	.word	0x10210000
 8004484:	10120000 	.word	0x10120000
 8004488:	10110000 	.word	0x10110000
 800448c:	40021000 	.word	0x40021000
 8004490:	40010000 	.word	0x40010000
 8004494:	40010800 	.word	0x40010800
 8004498:	40010c00 	.word	0x40010c00
 800449c:	40011000 	.word	0x40011000
 80044a0:	40011400 	.word	0x40011400
 80044a4:	40011800 	.word	0x40011800
 80044a8:	40011c00 	.word	0x40011c00
 80044ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_GPIO_Init+0x324>)
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	43db      	mvns	r3, r3
 80044b8:	4909      	ldr	r1, [pc, #36]	; (80044e0 <HAL_GPIO_Init+0x324>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	3301      	adds	r3, #1
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	fa22 f303 	lsr.w	r3, r2, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f47f ae7e 	bne.w	80041d0 <HAL_GPIO_Init+0x14>
  }
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	372c      	adds	r7, #44	; 0x2c
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr
 80044e0:	40010400 	.word	0x40010400

080044e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	887b      	ldrh	r3, [r7, #2]
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
 8004500:	e001      	b.n	8004506 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004502:	2300      	movs	r3, #0
 8004504:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr

08004512 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	460b      	mov	r3, r1
 800451c:	807b      	strh	r3, [r7, #2]
 800451e:	4613      	mov	r3, r2
 8004520:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004522:	787b      	ldrb	r3, [r7, #1]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004528:	887a      	ldrh	r2, [r7, #2]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800452e:	e003      	b.n	8004538 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004530:	887b      	ldrh	r3, [r7, #2]
 8004532:	041a      	lsls	r2, r3, #16
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	611a      	str	r2, [r3, #16]
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr
	...

08004544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	4013      	ands	r3, r2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d006      	beq.n	8004568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800455a:	4a05      	ldr	r2, [pc, #20]	; (8004570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	4618      	mov	r0, r3
 8004564:	f7fc fd50 	bl	8001008 <HAL_GPIO_EXTI_Callback>
  }
}
 8004568:	bf00      	nop
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40010400 	.word	0x40010400

08004574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e26c      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 8087 	beq.w	80046a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004594:	4b92      	ldr	r3, [pc, #584]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b04      	cmp	r3, #4
 800459e:	d00c      	beq.n	80045ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045a0:	4b8f      	ldr	r3, [pc, #572]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 030c 	and.w	r3, r3, #12
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d112      	bne.n	80045d2 <HAL_RCC_OscConfig+0x5e>
 80045ac:	4b8c      	ldr	r3, [pc, #560]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b8:	d10b      	bne.n	80045d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ba:	4b89      	ldr	r3, [pc, #548]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d06c      	beq.n	80046a0 <HAL_RCC_OscConfig+0x12c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d168      	bne.n	80046a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e246      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045da:	d106      	bne.n	80045ea <HAL_RCC_OscConfig+0x76>
 80045dc:	4b80      	ldr	r3, [pc, #512]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a7f      	ldr	r2, [pc, #508]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	e02e      	b.n	8004648 <HAL_RCC_OscConfig+0xd4>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0x98>
 80045f2:	4b7b      	ldr	r3, [pc, #492]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a7a      	ldr	r2, [pc, #488]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80045f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b78      	ldr	r3, [pc, #480]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a77      	ldr	r2, [pc, #476]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e01d      	b.n	8004648 <HAL_RCC_OscConfig+0xd4>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0xbc>
 8004616:	4b72      	ldr	r3, [pc, #456]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a71      	ldr	r2, [pc, #452]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 800461c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	4b6f      	ldr	r3, [pc, #444]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a6e      	ldr	r2, [pc, #440]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e00b      	b.n	8004648 <HAL_RCC_OscConfig+0xd4>
 8004630:	4b6b      	ldr	r3, [pc, #428]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a6a      	ldr	r2, [pc, #424]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b68      	ldr	r3, [pc, #416]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a67      	ldr	r2, [pc, #412]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004646:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d013      	beq.n	8004678 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7ff f994 	bl	800397c <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7ff f990 	bl	800397c <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e1fa      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	4b5d      	ldr	r3, [pc, #372]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0xe4>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7ff f980 	bl	800397c <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004680:	f7ff f97c 	bl	800397c <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e1e6      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004692:	4b53      	ldr	r3, [pc, #332]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x10c>
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d063      	beq.n	8004776 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ae:	4b4c      	ldr	r3, [pc, #304]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046ba:	4b49      	ldr	r3, [pc, #292]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d11c      	bne.n	8004700 <HAL_RCC_OscConfig+0x18c>
 80046c6:	4b46      	ldr	r3, [pc, #280]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d116      	bne.n	8004700 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d2:	4b43      	ldr	r3, [pc, #268]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_RCC_OscConfig+0x176>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d001      	beq.n	80046ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e1ba      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ea:	4b3d      	ldr	r3, [pc, #244]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4939      	ldr	r1, [pc, #228]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fe:	e03a      	b.n	8004776 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d020      	beq.n	800474a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004708:	4b36      	ldr	r3, [pc, #216]	; (80047e4 <HAL_RCC_OscConfig+0x270>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470e:	f7ff f935 	bl	800397c <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004716:	f7ff f931 	bl	800397c <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e19b      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004728:	4b2d      	ldr	r3, [pc, #180]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004734:	4b2a      	ldr	r3, [pc, #168]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4927      	ldr	r1, [pc, #156]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 8004744:	4313      	orrs	r3, r2
 8004746:	600b      	str	r3, [r1, #0]
 8004748:	e015      	b.n	8004776 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800474a:	4b26      	ldr	r3, [pc, #152]	; (80047e4 <HAL_RCC_OscConfig+0x270>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7ff f914 	bl	800397c <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004758:	f7ff f910 	bl	800397c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e17a      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476a:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d03a      	beq.n	80047f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d019      	beq.n	80047be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478a:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <HAL_RCC_OscConfig+0x274>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004790:	f7ff f8f4 	bl	800397c <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004798:	f7ff f8f0 	bl	800397c <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e15a      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047aa:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047b6:	2001      	movs	r0, #1
 80047b8:	f000 faa6 	bl	8004d08 <RCC_Delay>
 80047bc:	e01c      	b.n	80047f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <HAL_RCC_OscConfig+0x274>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c4:	f7ff f8da 	bl	800397c <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ca:	e00f      	b.n	80047ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047cc:	f7ff f8d6 	bl	800397c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d908      	bls.n	80047ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e140      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000
 80047e4:	42420000 	.word	0x42420000
 80047e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ec:	4b9e      	ldr	r3, [pc, #632]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e9      	bne.n	80047cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80a6 	beq.w	8004952 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004806:	2300      	movs	r3, #0
 8004808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480a:	4b97      	ldr	r3, [pc, #604]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10d      	bne.n	8004832 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004816:	4b94      	ldr	r3, [pc, #592]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	4a93      	ldr	r2, [pc, #588]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800481c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004820:	61d3      	str	r3, [r2, #28]
 8004822:	4b91      	ldr	r3, [pc, #580]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482a:	60bb      	str	r3, [r7, #8]
 800482c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800482e:	2301      	movs	r3, #1
 8004830:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004832:	4b8e      	ldr	r3, [pc, #568]	; (8004a6c <HAL_RCC_OscConfig+0x4f8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d118      	bne.n	8004870 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483e:	4b8b      	ldr	r3, [pc, #556]	; (8004a6c <HAL_RCC_OscConfig+0x4f8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a8a      	ldr	r2, [pc, #552]	; (8004a6c <HAL_RCC_OscConfig+0x4f8>)
 8004844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800484a:	f7ff f897 	bl	800397c <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004852:	f7ff f893 	bl	800397c <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b64      	cmp	r3, #100	; 0x64
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e0fd      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004864:	4b81      	ldr	r3, [pc, #516]	; (8004a6c <HAL_RCC_OscConfig+0x4f8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d106      	bne.n	8004886 <HAL_RCC_OscConfig+0x312>
 8004878:	4b7b      	ldr	r3, [pc, #492]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	4a7a      	ldr	r2, [pc, #488]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6213      	str	r3, [r2, #32]
 8004884:	e02d      	b.n	80048e2 <HAL_RCC_OscConfig+0x36e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10c      	bne.n	80048a8 <HAL_RCC_OscConfig+0x334>
 800488e:	4b76      	ldr	r3, [pc, #472]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	4a75      	ldr	r2, [pc, #468]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	6213      	str	r3, [r2, #32]
 800489a:	4b73      	ldr	r3, [pc, #460]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	4a72      	ldr	r2, [pc, #456]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048a0:	f023 0304 	bic.w	r3, r3, #4
 80048a4:	6213      	str	r3, [r2, #32]
 80048a6:	e01c      	b.n	80048e2 <HAL_RCC_OscConfig+0x36e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	d10c      	bne.n	80048ca <HAL_RCC_OscConfig+0x356>
 80048b0:	4b6d      	ldr	r3, [pc, #436]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4a6c      	ldr	r2, [pc, #432]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048b6:	f043 0304 	orr.w	r3, r3, #4
 80048ba:	6213      	str	r3, [r2, #32]
 80048bc:	4b6a      	ldr	r3, [pc, #424]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	4a69      	ldr	r2, [pc, #420]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6213      	str	r3, [r2, #32]
 80048c8:	e00b      	b.n	80048e2 <HAL_RCC_OscConfig+0x36e>
 80048ca:	4b67      	ldr	r3, [pc, #412]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	4a66      	ldr	r2, [pc, #408]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	6213      	str	r3, [r2, #32]
 80048d6:	4b64      	ldr	r3, [pc, #400]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	4a63      	ldr	r2, [pc, #396]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80048dc:	f023 0304 	bic.w	r3, r3, #4
 80048e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d015      	beq.n	8004916 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ea:	f7ff f847 	bl	800397c <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f0:	e00a      	b.n	8004908 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f2:	f7ff f843 	bl	800397c <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004900:	4293      	cmp	r3, r2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e0ab      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004908:	4b57      	ldr	r3, [pc, #348]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0ee      	beq.n	80048f2 <HAL_RCC_OscConfig+0x37e>
 8004914:	e014      	b.n	8004940 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004916:	f7ff f831 	bl	800397c <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800491c:	e00a      	b.n	8004934 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491e:	f7ff f82d 	bl	800397c <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	f241 3288 	movw	r2, #5000	; 0x1388
 800492c:	4293      	cmp	r3, r2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e095      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004934:	4b4c      	ldr	r3, [pc, #304]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ee      	bne.n	800491e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d105      	bne.n	8004952 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004946:	4b48      	ldr	r3, [pc, #288]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	4a47      	ldr	r2, [pc, #284]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800494c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004950:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8081 	beq.w	8004a5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800495c:	4b42      	ldr	r3, [pc, #264]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	2b08      	cmp	r3, #8
 8004966:	d061      	beq.n	8004a2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d146      	bne.n	80049fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004970:	4b3f      	ldr	r3, [pc, #252]	; (8004a70 <HAL_RCC_OscConfig+0x4fc>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004976:	f7ff f801 	bl	800397c <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497e:	f7fe fffd 	bl	800397c <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e067      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004990:	4b35      	ldr	r3, [pc, #212]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f0      	bne.n	800497e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a4:	d108      	bne.n	80049b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049a6:	4b30      	ldr	r3, [pc, #192]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	492d      	ldr	r1, [pc, #180]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049b8:	4b2b      	ldr	r3, [pc, #172]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a19      	ldr	r1, [r3, #32]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	430b      	orrs	r3, r1
 80049ca:	4927      	ldr	r1, [pc, #156]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049d0:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <HAL_RCC_OscConfig+0x4fc>)
 80049d2:	2201      	movs	r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d6:	f7fe ffd1 	bl	800397c <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049de:	f7fe ffcd 	bl	800397c <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e037      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049f0:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCC_OscConfig+0x46a>
 80049fc:	e02f      	b.n	8004a5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fe:	4b1c      	ldr	r3, [pc, #112]	; (8004a70 <HAL_RCC_OscConfig+0x4fc>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a04:	f7fe ffba 	bl	800397c <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fe ffb6 	bl	800397c <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e020      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a1e:	4b12      	ldr	r3, [pc, #72]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x498>
 8004a2a:	e018      	b.n	8004a5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e013      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_RCC_OscConfig+0x4f4>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d106      	bne.n	8004a5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d001      	beq.n	8004a5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40007000 	.word	0x40007000
 8004a70:	42420060 	.word	0x42420060

08004a74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0d0      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a88:	4b6a      	ldr	r3, [pc, #424]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d910      	bls.n	8004ab8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a96:	4b67      	ldr	r3, [pc, #412]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f023 0207 	bic.w	r2, r3, #7
 8004a9e:	4965      	ldr	r1, [pc, #404]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b63      	ldr	r3, [pc, #396]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e0b8      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d020      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ad0:	4b59      	ldr	r3, [pc, #356]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4a58      	ldr	r2, [pc, #352]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ada:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ae8:	4b53      	ldr	r3, [pc, #332]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	4a52      	ldr	r2, [pc, #328]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004aee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004af2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af4:	4b50      	ldr	r3, [pc, #320]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	494d      	ldr	r1, [pc, #308]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d040      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d107      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1a:	4b47      	ldr	r3, [pc, #284]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d115      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e07f      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d107      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b32:	4b41      	ldr	r3, [pc, #260]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e073      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b42:	4b3d      	ldr	r3, [pc, #244]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e06b      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b52:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f023 0203 	bic.w	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4936      	ldr	r1, [pc, #216]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b64:	f7fe ff0a 	bl	800397c <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6c:	f7fe ff06 	bl	800397c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e053      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b82:	4b2d      	ldr	r3, [pc, #180]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 020c 	and.w	r2, r3, #12
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d1eb      	bne.n	8004b6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b94:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d210      	bcs.n	8004bc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b24      	ldr	r3, [pc, #144]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 0207 	bic.w	r2, r3, #7
 8004baa:	4922      	ldr	r1, [pc, #136]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e032      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd0:	4b19      	ldr	r3, [pc, #100]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4916      	ldr	r1, [pc, #88]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bee:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	490e      	ldr	r1, [pc, #56]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c02:	f000 f821 	bl	8004c48 <HAL_RCC_GetSysClockFreq>
 8004c06:	4602      	mov	r2, r0
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	490a      	ldr	r1, [pc, #40]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004c14:	5ccb      	ldrb	r3, [r1, r3]
 8004c16:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1a:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <HAL_RCC_ClockConfig+0x1cc>)
 8004c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <HAL_RCC_ClockConfig+0x1d0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe fe68 	bl	80038f8 <HAL_InitTick>

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40022000 	.word	0x40022000
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	08009354 	.word	0x08009354
 8004c40:	20000000 	.word	0x20000000
 8004c44:	20000004 	.word	0x20000004

08004c48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c48:	b490      	push	{r4, r7}
 8004c4a:	b08a      	sub	sp, #40	; 0x28
 8004c4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c4e:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c50:	1d3c      	adds	r4, r7, #4
 8004c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c58:	f240 2301 	movw	r3, #513	; 0x201
 8004c5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
=======
08003860 <EXTI15_10_IRQHandler>:
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
 8003864:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003868:	f000 fe6e 	bl	8004548 <HAL_GPIO_EXTI_IRQHandler>
 800386c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003870:	f000 fe6a 	bl	8004548 <HAL_GPIO_EXTI_IRQHandler>
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}

08003878 <SystemInit>:
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <Reset_Handler>:
 8003884:	2100      	movs	r1, #0
 8003886:	e003      	b.n	8003890 <LoopCopyDataInit>

08003888 <CopyDataInit>:
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <LoopFillZerobss+0x14>)
 800388a:	585b      	ldr	r3, [r3, r1]
 800388c:	5043      	str	r3, [r0, r1]
 800388e:	3104      	adds	r1, #4

08003890 <LoopCopyDataInit>:
 8003890:	480a      	ldr	r0, [pc, #40]	; (80038bc <LoopFillZerobss+0x18>)
 8003892:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <LoopFillZerobss+0x1c>)
 8003894:	1842      	adds	r2, r0, r1
 8003896:	429a      	cmp	r2, r3
 8003898:	d3f6      	bcc.n	8003888 <CopyDataInit>
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <LoopFillZerobss+0x20>)
 800389c:	e002      	b.n	80038a4 <LoopFillZerobss>

0800389e <FillZerobss>:
 800389e:	2300      	movs	r3, #0
 80038a0:	f842 3b04 	str.w	r3, [r2], #4

080038a4 <LoopFillZerobss>:
 80038a4:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <LoopFillZerobss+0x24>)
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d3f9      	bcc.n	800389e <FillZerobss>
 80038aa:	f7ff ffe5 	bl	8003878 <SystemInit>
 80038ae:	f005 fc9f 	bl	80091f0 <__libc_init_array>
 80038b2:	f7ff fc85 	bl	80031c0 <main>
 80038b6:	4770      	bx	lr
 80038b8:	0800936c 	.word	0x0800936c
 80038bc:	20000000 	.word	0x20000000
 80038c0:	20000010 	.word	0x20000010
 80038c4:	20000010 	.word	0x20000010
 80038c8:	200046d8 	.word	0x200046d8

080038cc <ADC1_2_IRQHandler>:
 80038cc:	e7fe      	b.n	80038cc <ADC1_2_IRQHandler>
	...

080038d0 <HAL_Init>:
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <HAL_Init+0x28>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <HAL_Init+0x28>)
 80038da:	f043 0310 	orr.w	r3, r3, #16
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	2003      	movs	r0, #3
 80038e2:	f000 f923 	bl	8003b2c <HAL_NVIC_SetPriorityGrouping>
 80038e6:	200f      	movs	r0, #15
 80038e8:	f000 f808 	bl	80038fc <HAL_InitTick>
 80038ec:	f7ff fe88 	bl	8003600 <HAL_MspInit>
 80038f0:	2300      	movs	r3, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40022000 	.word	0x40022000

080038fc <HAL_InitTick>:
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_InitTick+0x54>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b12      	ldr	r3, [pc, #72]	; (8003954 <HAL_InitTick+0x58>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	4619      	mov	r1, r3
 800390e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003912:	fbb3 f3f1 	udiv	r3, r3, r1
 8003916:	fbb2 f3f3 	udiv	r3, r2, r3
 800391a:	4618      	mov	r0, r3
 800391c:	f000 f93b 	bl	8003b96 <HAL_SYSTICK_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_InitTick+0x2e>
 8003926:	2301      	movs	r3, #1
 8003928:	e00e      	b.n	8003948 <HAL_InitTick+0x4c>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b0f      	cmp	r3, #15
 800392e:	d80a      	bhi.n	8003946 <HAL_InitTick+0x4a>
 8003930:	2200      	movs	r2, #0
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	f04f 30ff 	mov.w	r0, #4294967295
 8003938:	f000 f903 	bl	8003b42 <HAL_NVIC_SetPriority>
 800393c:	4a06      	ldr	r2, [pc, #24]	; (8003958 <HAL_InitTick+0x5c>)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <HAL_InitTick+0x4c>
 8003946:	2301      	movs	r3, #1
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20000000 	.word	0x20000000
 8003954:	20000008 	.word	0x20000008
 8003958:	20000004 	.word	0x20000004

0800395c <HAL_IncTick>:
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_IncTick+0x1c>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_IncTick+0x20>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4413      	add	r3, r2
 800396c:	4a03      	ldr	r2, [pc, #12]	; (800397c <HAL_IncTick+0x20>)
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	20000008 	.word	0x20000008
 800397c:	20004674 	.word	0x20004674

08003980 <HAL_GetTick>:
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
 8003984:	4b02      	ldr	r3, [pc, #8]	; (8003990 <HAL_GetTick+0x10>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	20004674 	.word	0x20004674

08003994 <__NVIC_SetPriorityGrouping>:
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <__NVIC_SetPriorityGrouping+0x44>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039b0:	4013      	ands	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	021a      	lsls	r2, r3, #8
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <__NVIC_SetPriorityGrouping+0x44>)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	60d3      	str	r3, [r2, #12]
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <__NVIC_GetPriorityGrouping>:
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <__NVIC_GetPriorityGrouping+0x18>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_EnableIRQ>:
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	db0b      	blt.n	8003a22 <__NVIC_EnableIRQ+0x2a>
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	f003 021f 	and.w	r2, r3, #31
 8003a10:	4906      	ldr	r1, [pc, #24]	; (8003a2c <__NVIC_EnableIRQ+0x34>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	2001      	movs	r0, #1
 8003a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	e000e100 	.word	0xe000e100

08003a30 <__NVIC_SetPriority>:
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	6039      	str	r1, [r7, #0]
 8003a3a:	71fb      	strb	r3, [r7, #7]
 8003a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	db0a      	blt.n	8003a5a <__NVIC_SetPriority+0x2a>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	490c      	ldr	r1, [pc, #48]	; (8003a7c <__NVIC_SetPriority+0x4c>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	440b      	add	r3, r1
 8003a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003a58:	e00a      	b.n	8003a70 <__NVIC_SetPriority+0x40>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4908      	ldr	r1, [pc, #32]	; (8003a80 <__NVIC_SetPriority+0x50>)
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	3b04      	subs	r3, #4
 8003a68:	0112      	lsls	r2, r2, #4
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	761a      	strb	r2, [r3, #24]
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	e000e100 	.word	0xe000e100
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <NVIC_EncodePriority>:
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	; 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	61fb      	str	r3, [r7, #28]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f1c3 0307 	rsb	r3, r3, #7
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	bf28      	it	cs
 8003aa2:	2304      	movcs	r3, #4
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d902      	bls.n	8003ab4 <NVIC_EncodePriority+0x30>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3b03      	subs	r3, #3
 8003ab2:	e000      	b.n	8003ab6 <NVIC_EncodePriority+0x32>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	409a      	lsls	r2, r3
 8003acc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	43d9      	mvns	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	400b      	ands	r3, r1
 8003adc:	4313      	orrs	r3, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <SysTick_Config>:
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af8:	d301      	bcc.n	8003afe <SysTick_Config+0x16>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e00f      	b.n	8003b1e <SysTick_Config+0x36>
 8003afe:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <SysTick_Config+0x40>)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	6053      	str	r3, [r2, #4]
 8003b06:	210f      	movs	r1, #15
 8003b08:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0c:	f7ff ff90 	bl	8003a30 <__NVIC_SetPriority>
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <SysTick_Config+0x40>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	609a      	str	r2, [r3, #8]
 8003b16:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <SysTick_Config+0x40>)
 8003b18:	2207      	movs	r2, #7
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	e000e010 	.word	0xe000e010

08003b2c <HAL_NVIC_SetPriorityGrouping>:
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff ff2d 	bl	8003994 <__NVIC_SetPriorityGrouping>
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_NVIC_SetPriority>:
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b086      	sub	sp, #24
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	4603      	mov	r3, r0
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	f7ff ff42 	bl	80039dc <__NVIC_GetPriorityGrouping>
 8003b58:	6178      	str	r0, [r7, #20]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	6978      	ldr	r0, [r7, #20]
 8003b60:	f7ff ff90 	bl	8003a84 <NVIC_EncodePriority>
 8003b64:	4602      	mov	r2, r0
 8003b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff5f 	bl	8003a30 <__NVIC_SetPriority>
 8003b72:	bf00      	nop
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_NVIC_EnableIRQ>:
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	71fb      	strb	r3, [r7, #7]
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ff35 	bl	80039f8 <__NVIC_EnableIRQ>
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_SYSTICK_Config>:
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ffa2 	bl	8003ae8 <SysTick_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_DMA_Abort_IT>:
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	73fb      	strb	r3, [r7, #15]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d005      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x22>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
 8003bd0:	e0d6      	b.n	8003d80 <HAL_DMA_Abort_IT+0x1d0>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 020e 	bic.w	r2, r2, #14
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0201 	bic.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b64      	ldr	r3, [pc, #400]	; (8003d8c <HAL_DMA_Abort_IT+0x1dc>)
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d958      	bls.n	8003cb0 <HAL_DMA_Abort_IT+0x100>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a63      	ldr	r2, [pc, #396]	; (8003d90 <HAL_DMA_Abort_IT+0x1e0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d04f      	beq.n	8003ca8 <HAL_DMA_Abort_IT+0xf8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a61      	ldr	r2, [pc, #388]	; (8003d94 <HAL_DMA_Abort_IT+0x1e4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d048      	beq.n	8003ca4 <HAL_DMA_Abort_IT+0xf4>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a60      	ldr	r2, [pc, #384]	; (8003d98 <HAL_DMA_Abort_IT+0x1e8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d040      	beq.n	8003c9e <HAL_DMA_Abort_IT+0xee>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a5e      	ldr	r2, [pc, #376]	; (8003d9c <HAL_DMA_Abort_IT+0x1ec>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d038      	beq.n	8003c98 <HAL_DMA_Abort_IT+0xe8>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a5d      	ldr	r2, [pc, #372]	; (8003da0 <HAL_DMA_Abort_IT+0x1f0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d030      	beq.n	8003c92 <HAL_DMA_Abort_IT+0xe2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a5b      	ldr	r2, [pc, #364]	; (8003da4 <HAL_DMA_Abort_IT+0x1f4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d028      	beq.n	8003c8c <HAL_DMA_Abort_IT+0xdc>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a53      	ldr	r2, [pc, #332]	; (8003d8c <HAL_DMA_Abort_IT+0x1dc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d020      	beq.n	8003c86 <HAL_DMA_Abort_IT+0xd6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a57      	ldr	r2, [pc, #348]	; (8003da8 <HAL_DMA_Abort_IT+0x1f8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d019      	beq.n	8003c82 <HAL_DMA_Abort_IT+0xd2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a56      	ldr	r2, [pc, #344]	; (8003dac <HAL_DMA_Abort_IT+0x1fc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d012      	beq.n	8003c7e <HAL_DMA_Abort_IT+0xce>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a54      	ldr	r2, [pc, #336]	; (8003db0 <HAL_DMA_Abort_IT+0x200>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00a      	beq.n	8003c78 <HAL_DMA_Abort_IT+0xc8>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a53      	ldr	r2, [pc, #332]	; (8003db4 <HAL_DMA_Abort_IT+0x204>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d102      	bne.n	8003c72 <HAL_DMA_Abort_IT+0xc2>
 8003c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c70:	e01b      	b.n	8003caa <HAL_DMA_Abort_IT+0xfa>
 8003c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c76:	e018      	b.n	8003caa <HAL_DMA_Abort_IT+0xfa>
 8003c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c7c:	e015      	b.n	8003caa <HAL_DMA_Abort_IT+0xfa>
 8003c7e:	2310      	movs	r3, #16
 8003c80:	e013      	b.n	8003caa <HAL_DMA_Abort_IT+0xfa>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e011      	b.n	8003caa <HAL_DMA_Abort_IT+0xfa>
 8003c86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c8a:	e00e      	b.n	8003caa <HAL_DMA_Abort_IT+0xfa>
 8003c8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c90:	e00b      	b.n	8003caa <HAL_DMA_Abort_IT+0xfa>
 8003c92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c96:	e008      	b.n	8003caa <HAL_DMA_Abort_IT+0xfa>
 8003c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c9c:	e005      	b.n	8003caa <HAL_DMA_Abort_IT+0xfa>
 8003c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ca2:	e002      	b.n	8003caa <HAL_DMA_Abort_IT+0xfa>
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	e000      	b.n	8003caa <HAL_DMA_Abort_IT+0xfa>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	4a43      	ldr	r2, [pc, #268]	; (8003db8 <HAL_DMA_Abort_IT+0x208>)
 8003cac:	6053      	str	r3, [r2, #4]
 8003cae:	e057      	b.n	8003d60 <HAL_DMA_Abort_IT+0x1b0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a36      	ldr	r2, [pc, #216]	; (8003d90 <HAL_DMA_Abort_IT+0x1e0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d04f      	beq.n	8003d5a <HAL_DMA_Abort_IT+0x1aa>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a35      	ldr	r2, [pc, #212]	; (8003d94 <HAL_DMA_Abort_IT+0x1e4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d048      	beq.n	8003d56 <HAL_DMA_Abort_IT+0x1a6>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a33      	ldr	r2, [pc, #204]	; (8003d98 <HAL_DMA_Abort_IT+0x1e8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d040      	beq.n	8003d50 <HAL_DMA_Abort_IT+0x1a0>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a32      	ldr	r2, [pc, #200]	; (8003d9c <HAL_DMA_Abort_IT+0x1ec>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d038      	beq.n	8003d4a <HAL_DMA_Abort_IT+0x19a>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a30      	ldr	r2, [pc, #192]	; (8003da0 <HAL_DMA_Abort_IT+0x1f0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d030      	beq.n	8003d44 <HAL_DMA_Abort_IT+0x194>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a2f      	ldr	r2, [pc, #188]	; (8003da4 <HAL_DMA_Abort_IT+0x1f4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d028      	beq.n	8003d3e <HAL_DMA_Abort_IT+0x18e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <HAL_DMA_Abort_IT+0x1dc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d020      	beq.n	8003d38 <HAL_DMA_Abort_IT+0x188>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a2b      	ldr	r2, [pc, #172]	; (8003da8 <HAL_DMA_Abort_IT+0x1f8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d019      	beq.n	8003d34 <HAL_DMA_Abort_IT+0x184>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a29      	ldr	r2, [pc, #164]	; (8003dac <HAL_DMA_Abort_IT+0x1fc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d012      	beq.n	8003d30 <HAL_DMA_Abort_IT+0x180>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a28      	ldr	r2, [pc, #160]	; (8003db0 <HAL_DMA_Abort_IT+0x200>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00a      	beq.n	8003d2a <HAL_DMA_Abort_IT+0x17a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a26      	ldr	r2, [pc, #152]	; (8003db4 <HAL_DMA_Abort_IT+0x204>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d102      	bne.n	8003d24 <HAL_DMA_Abort_IT+0x174>
 8003d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d22:	e01b      	b.n	8003d5c <HAL_DMA_Abort_IT+0x1ac>
 8003d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d28:	e018      	b.n	8003d5c <HAL_DMA_Abort_IT+0x1ac>
 8003d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d2e:	e015      	b.n	8003d5c <HAL_DMA_Abort_IT+0x1ac>
 8003d30:	2310      	movs	r3, #16
 8003d32:	e013      	b.n	8003d5c <HAL_DMA_Abort_IT+0x1ac>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e011      	b.n	8003d5c <HAL_DMA_Abort_IT+0x1ac>
 8003d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d3c:	e00e      	b.n	8003d5c <HAL_DMA_Abort_IT+0x1ac>
 8003d3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d42:	e00b      	b.n	8003d5c <HAL_DMA_Abort_IT+0x1ac>
 8003d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d48:	e008      	b.n	8003d5c <HAL_DMA_Abort_IT+0x1ac>
 8003d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d4e:	e005      	b.n	8003d5c <HAL_DMA_Abort_IT+0x1ac>
 8003d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d54:	e002      	b.n	8003d5c <HAL_DMA_Abort_IT+0x1ac>
 8003d56:	2310      	movs	r3, #16
 8003d58:	e000      	b.n	8003d5c <HAL_DMA_Abort_IT+0x1ac>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <HAL_DMA_Abort_IT+0x20c>)
 8003d5e:	6053      	str	r3, [r2, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2020 	strb.w	r2, [r3, #32]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_DMA_Abort_IT+0x1d0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40020080 	.word	0x40020080
 8003d90:	40020008 	.word	0x40020008
 8003d94:	4002001c 	.word	0x4002001c
 8003d98:	40020030 	.word	0x40020030
 8003d9c:	40020044 	.word	0x40020044
 8003da0:	40020058 	.word	0x40020058
 8003da4:	4002006c 	.word	0x4002006c
 8003da8:	40020408 	.word	0x40020408
 8003dac:	4002041c 	.word	0x4002041c
 8003db0:	40020430 	.word	0x40020430
 8003db4:	40020444 	.word	0x40020444
 8003db8:	40020400 	.word	0x40020400
 8003dbc:	40020000 	.word	0x40020000

08003dc0 <HAL_FLASH_Program>:
 8003dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	e9c7 2300 	strd	r2, r3, [r7]
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	75bb      	strb	r3, [r7, #22]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	757b      	strb	r3, [r7, #21]
 8003dda:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <HAL_FLASH_Program+0xd8>)
 8003ddc:	7e1b      	ldrb	r3, [r3, #24]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_FLASH_Program+0x26>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e054      	b.n	8003e90 <HAL_FLASH_Program+0xd0>
 8003de6:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <HAL_FLASH_Program+0xd8>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	761a      	strb	r2, [r3, #24]
 8003dec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003df0:	f000 f8a8 	bl	8003f44 <FLASH_WaitForLastOperation>
 8003df4:	4603      	mov	r3, r0
 8003df6:	75fb      	strb	r3, [r7, #23]
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d144      	bne.n	8003e88 <HAL_FLASH_Program+0xc8>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d102      	bne.n	8003e0a <HAL_FLASH_Program+0x4a>
 8003e04:	2301      	movs	r3, #1
 8003e06:	757b      	strb	r3, [r7, #21]
 8003e08:	e007      	b.n	8003e1a <HAL_FLASH_Program+0x5a>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d102      	bne.n	8003e16 <HAL_FLASH_Program+0x56>
 8003e10:	2302      	movs	r3, #2
 8003e12:	757b      	strb	r3, [r7, #21]
 8003e14:	e001      	b.n	8003e1a <HAL_FLASH_Program+0x5a>
 8003e16:	2304      	movs	r3, #4
 8003e18:	757b      	strb	r3, [r7, #21]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	75bb      	strb	r3, [r7, #22]
 8003e1e:	e02d      	b.n	8003e7c <HAL_FLASH_Program+0xbc>
 8003e20:	7dbb      	ldrb	r3, [r7, #22]
 8003e22:	005a      	lsls	r2, r3, #1
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	eb02 0c03 	add.w	ip, r2, r3
 8003e2a:	7dbb      	ldrb	r3, [r7, #22]
 8003e2c:	0119      	lsls	r1, r3, #4
 8003e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e32:	f1c1 0620 	rsb	r6, r1, #32
 8003e36:	f1a1 0020 	sub.w	r0, r1, #32
 8003e3a:	fa22 f401 	lsr.w	r4, r2, r1
 8003e3e:	fa03 f606 	lsl.w	r6, r3, r6
 8003e42:	4334      	orrs	r4, r6
 8003e44:	fa23 f000 	lsr.w	r0, r3, r0
 8003e48:	4304      	orrs	r4, r0
 8003e4a:	fa23 f501 	lsr.w	r5, r3, r1
 8003e4e:	b2a3      	uxth	r3, r4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4660      	mov	r0, ip
 8003e54:	f000 f85a 	bl	8003f0c <FLASH_Program_HalfWord>
 8003e58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e5c:	f000 f872 	bl	8003f44 <FLASH_WaitForLastOperation>
 8003e60:	4603      	mov	r3, r0
 8003e62:	75fb      	strb	r3, [r7, #23]
 8003e64:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <HAL_FLASH_Program+0xdc>)
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	4a0c      	ldr	r2, [pc, #48]	; (8003e9c <HAL_FLASH_Program+0xdc>)
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	6113      	str	r3, [r2, #16]
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <HAL_FLASH_Program+0xc6>
 8003e76:	7dbb      	ldrb	r3, [r7, #22]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	75bb      	strb	r3, [r7, #22]
 8003e7c:	7dba      	ldrb	r2, [r7, #22]
 8003e7e:	7d7b      	ldrb	r3, [r7, #21]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d3cd      	bcc.n	8003e20 <HAL_FLASH_Program+0x60>
 8003e84:	e000      	b.n	8003e88 <HAL_FLASH_Program+0xc8>
 8003e86:	bf00      	nop
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <HAL_FLASH_Program+0xd8>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	761a      	strb	r2, [r3, #24]
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
 8003e90:	4618      	mov	r0, r3
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e98:	20004678 	.word	0x20004678
 8003e9c:	40022000 	.word	0x40022000

08003ea0 <HAL_FLASH_Unlock>:
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	71fb      	strb	r3, [r7, #7]
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <HAL_FLASH_Unlock+0x40>)
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_FLASH_Unlock+0x32>
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_FLASH_Unlock+0x40>)
 8003eb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <HAL_FLASH_Unlock+0x44>)
 8003eba:	605a      	str	r2, [r3, #4]
 8003ebc:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <HAL_FLASH_Unlock+0x40>)
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <HAL_FLASH_Unlock+0x48>)
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <HAL_FLASH_Unlock+0x40>)
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_FLASH_Unlock+0x32>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	71fb      	strb	r3, [r7, #7]
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40022000 	.word	0x40022000
 8003ee4:	45670123 	.word	0x45670123
 8003ee8:	cdef89ab 	.word	0xcdef89ab

08003eec <HAL_FLASH_Lock>:
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_FLASH_Lock+0x1c>)
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <HAL_FLASH_Lock+0x1c>)
 8003ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efa:	6113      	str	r3, [r2, #16]
 8003efc:	2300      	movs	r3, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40022000 	.word	0x40022000

08003f0c <FLASH_Program_HalfWord>:
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	807b      	strh	r3, [r7, #2]
 8003f18:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <FLASH_Program_HalfWord+0x30>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	61da      	str	r2, [r3, #28]
 8003f1e:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <FLASH_Program_HalfWord+0x34>)
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	4a07      	ldr	r2, [pc, #28]	; (8003f40 <FLASH_Program_HalfWord+0x34>)
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	6113      	str	r3, [r2, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	887a      	ldrh	r2, [r7, #2]
 8003f2e:	801a      	strh	r2, [r3, #0]
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20004678 	.word	0x20004678
 8003f40:	40022000 	.word	0x40022000

08003f44 <FLASH_WaitForLastOperation>:
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	f7ff fd18 	bl	8003980 <HAL_GetTick>
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	e010      	b.n	8003f76 <FLASH_WaitForLastOperation+0x32>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5a:	d00c      	beq.n	8003f76 <FLASH_WaitForLastOperation+0x32>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <FLASH_WaitForLastOperation+0x2e>
 8003f62:	f7ff fd0d 	bl	8003980 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d201      	bcs.n	8003f76 <FLASH_WaitForLastOperation+0x32>
 8003f72:	2303      	movs	r3, #3
 8003f74:	e025      	b.n	8003fc2 <FLASH_WaitForLastOperation+0x7e>
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <FLASH_WaitForLastOperation+0x88>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e8      	bne.n	8003f54 <FLASH_WaitForLastOperation+0x10>
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <FLASH_WaitForLastOperation+0x88>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <FLASH_WaitForLastOperation+0x50>
 8003f8e:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <FLASH_WaitForLastOperation+0x88>)
 8003f90:	2220      	movs	r2, #32
 8003f92:	60da      	str	r2, [r3, #12]
 8003f94:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <FLASH_WaitForLastOperation+0x88>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <FLASH_WaitForLastOperation+0x74>
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <FLASH_WaitForLastOperation+0x88>)
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <FLASH_WaitForLastOperation+0x74>
 8003fac:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <FLASH_WaitForLastOperation+0x88>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <FLASH_WaitForLastOperation+0x7c>
 8003fb8:	f000 f80a 	bl	8003fd0 <FLASH_SetErrorCode>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <FLASH_WaitForLastOperation+0x7e>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40022000 	.word	0x40022000

08003fd0 <FLASH_SetErrorCode>:
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	607b      	str	r3, [r7, #4]
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <FLASH_SetErrorCode+0x98>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <FLASH_SetErrorCode+0x2a>
 8003fe6:	4b21      	ldr	r3, [pc, #132]	; (800406c <FLASH_SetErrorCode+0x9c>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f043 0302 	orr.w	r3, r3, #2
 8003fee:	4a1f      	ldr	r2, [pc, #124]	; (800406c <FLASH_SetErrorCode+0x9c>)
 8003ff0:	61d3      	str	r3, [r2, #28]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f043 0310 	orr.w	r3, r3, #16
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <FLASH_SetErrorCode+0x98>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <FLASH_SetErrorCode+0x4a>
 8004006:	4b19      	ldr	r3, [pc, #100]	; (800406c <FLASH_SetErrorCode+0x9c>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	4a17      	ldr	r2, [pc, #92]	; (800406c <FLASH_SetErrorCode+0x9c>)
 8004010:	61d3      	str	r3, [r2, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <FLASH_SetErrorCode+0x98>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <FLASH_SetErrorCode+0x6e>
 8004026:	4b11      	ldr	r3, [pc, #68]	; (800406c <FLASH_SetErrorCode+0x9c>)
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	4a0f      	ldr	r2, [pc, #60]	; (800406c <FLASH_SetErrorCode+0x9c>)
 8004030:	61d3      	str	r3, [r2, #28]
 8004032:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <FLASH_SetErrorCode+0x98>)
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	4a0c      	ldr	r2, [pc, #48]	; (8004068 <FLASH_SetErrorCode+0x98>)
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	61d3      	str	r3, [r2, #28]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f240 1201 	movw	r2, #257	; 0x101
 8004044:	4293      	cmp	r3, r2
 8004046:	d106      	bne.n	8004056 <FLASH_SetErrorCode+0x86>
 8004048:	4b07      	ldr	r3, [pc, #28]	; (8004068 <FLASH_SetErrorCode+0x98>)
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	4a06      	ldr	r2, [pc, #24]	; (8004068 <FLASH_SetErrorCode+0x98>)
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	61d3      	str	r3, [r2, #28]
 8004054:	e002      	b.n	800405c <FLASH_SetErrorCode+0x8c>
 8004056:	4a04      	ldr	r2, [pc, #16]	; (8004068 <FLASH_SetErrorCode+0x98>)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	60d3      	str	r3, [r2, #12]
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40022000 	.word	0x40022000
 800406c:	20004678 	.word	0x20004678

08004070 <HAL_FLASHEx_Erase>:
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
 800407a:	2301      	movs	r3, #1
 800407c:	73fb      	strb	r3, [r7, #15]
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	4b2f      	ldr	r3, [pc, #188]	; (8004140 <HAL_FLASHEx_Erase+0xd0>)
 8004084:	7e1b      	ldrb	r3, [r3, #24]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_FLASHEx_Erase+0x1e>
 800408a:	2302      	movs	r3, #2
 800408c:	e053      	b.n	8004136 <HAL_FLASHEx_Erase+0xc6>
 800408e:	4b2c      	ldr	r3, [pc, #176]	; (8004140 <HAL_FLASHEx_Erase+0xd0>)
 8004090:	2201      	movs	r2, #1
 8004092:	761a      	strb	r2, [r3, #24]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d116      	bne.n	80040ca <HAL_FLASHEx_Erase+0x5a>
 800409c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040a0:	f7ff ff50 	bl	8003f44 <FLASH_WaitForLastOperation>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d141      	bne.n	800412e <HAL_FLASHEx_Erase+0xbe>
 80040aa:	2001      	movs	r0, #1
 80040ac:	f000 f84c 	bl	8004148 <FLASH_MassErase>
 80040b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040b4:	f7ff ff46 	bl	8003f44 <FLASH_WaitForLastOperation>
 80040b8:	4603      	mov	r3, r0
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	4b21      	ldr	r3, [pc, #132]	; (8004144 <HAL_FLASHEx_Erase+0xd4>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	4a20      	ldr	r2, [pc, #128]	; (8004144 <HAL_FLASHEx_Erase+0xd4>)
 80040c2:	f023 0304 	bic.w	r3, r3, #4
 80040c6:	6113      	str	r3, [r2, #16]
 80040c8:	e031      	b.n	800412e <HAL_FLASHEx_Erase+0xbe>
 80040ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040ce:	f7ff ff39 	bl	8003f44 <FLASH_WaitForLastOperation>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d12a      	bne.n	800412e <HAL_FLASHEx_Erase+0xbe>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f04f 32ff 	mov.w	r2, #4294967295
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	e019      	b.n	800411c <HAL_FLASHEx_Erase+0xac>
 80040e8:	68b8      	ldr	r0, [r7, #8]
 80040ea:	f000 f849 	bl	8004180 <FLASH_PageErase>
 80040ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040f2:	f7ff ff27 	bl	8003f44 <FLASH_WaitForLastOperation>
 80040f6:	4603      	mov	r3, r0
 80040f8:	73fb      	strb	r3, [r7, #15]
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_FLASHEx_Erase+0xd4>)
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	4a11      	ldr	r2, [pc, #68]	; (8004144 <HAL_FLASHEx_Erase+0xd4>)
 8004100:	f023 0302 	bic.w	r3, r3, #2
 8004104:	6113      	str	r3, [r2, #16]
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_FLASHEx_Erase+0xa4>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e00c      	b.n	800412e <HAL_FLASHEx_Erase+0xbe>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	02da      	lsls	r2, r3, #11
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	4413      	add	r3, r2
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	429a      	cmp	r2, r3
 800412c:	d3dc      	bcc.n	80040e8 <HAL_FLASHEx_Erase+0x78>
 800412e:	4b04      	ldr	r3, [pc, #16]	; (8004140 <HAL_FLASHEx_Erase+0xd0>)
 8004130:	2200      	movs	r2, #0
 8004132:	761a      	strb	r2, [r3, #24]
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20004678 	.word	0x20004678
 8004144:	40022000 	.word	0x40022000

08004148 <FLASH_MassErase>:
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <FLASH_MassErase+0x30>)
 8004152:	2200      	movs	r2, #0
 8004154:	61da      	str	r2, [r3, #28]
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <FLASH_MassErase+0x34>)
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	4a08      	ldr	r2, [pc, #32]	; (800417c <FLASH_MassErase+0x34>)
 800415c:	f043 0304 	orr.w	r3, r3, #4
 8004160:	6113      	str	r3, [r2, #16]
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <FLASH_MassErase+0x34>)
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	4a05      	ldr	r2, [pc, #20]	; (800417c <FLASH_MassErase+0x34>)
 8004168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800416c:	6113      	str	r3, [r2, #16]
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr
 8004178:	20004678 	.word	0x20004678
 800417c:	40022000 	.word	0x40022000

08004180 <FLASH_PageErase>:
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <FLASH_PageErase+0x38>)
 800418a:	2200      	movs	r2, #0
 800418c:	61da      	str	r2, [r3, #28]
 800418e:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <FLASH_PageErase+0x3c>)
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <FLASH_PageErase+0x3c>)
 8004194:	f043 0302 	orr.w	r3, r3, #2
 8004198:	6113      	str	r3, [r2, #16]
 800419a:	4a08      	ldr	r2, [pc, #32]	; (80041bc <FLASH_PageErase+0x3c>)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6153      	str	r3, [r2, #20]
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <FLASH_PageErase+0x3c>)
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	4a05      	ldr	r2, [pc, #20]	; (80041bc <FLASH_PageErase+0x3c>)
 80041a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041aa:	6113      	str	r3, [r2, #16]
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20004678 	.word	0x20004678
 80041bc:	40022000 	.word	0x40022000

080041c0 <HAL_GPIO_Init>:
 80041c0:	b480      	push	{r7}
 80041c2:	b08b      	sub	sp, #44	; 0x2c
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
 80041ca:	2300      	movs	r3, #0
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
 80041ce:	2300      	movs	r3, #0
 80041d0:	623b      	str	r3, [r7, #32]
 80041d2:	e179      	b.n	80044c8 <HAL_GPIO_Init+0x308>
 80041d4:	2201      	movs	r2, #1
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	f040 8168 	bne.w	80044c2 <HAL_GPIO_Init+0x302>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	4aa0      	ldr	r2, [pc, #640]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d05e      	beq.n	80042ba <HAL_GPIO_Init+0xfa>
 80041fc:	4a9e      	ldr	r2, [pc, #632]	; (8004478 <HAL_GPIO_Init+0x2b8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d875      	bhi.n	80042ee <HAL_GPIO_Init+0x12e>
 8004202:	4a9e      	ldr	r2, [pc, #632]	; (800447c <HAL_GPIO_Init+0x2bc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d058      	beq.n	80042ba <HAL_GPIO_Init+0xfa>
 8004208:	4a9c      	ldr	r2, [pc, #624]	; (800447c <HAL_GPIO_Init+0x2bc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d86f      	bhi.n	80042ee <HAL_GPIO_Init+0x12e>
 800420e:	4a9c      	ldr	r2, [pc, #624]	; (8004480 <HAL_GPIO_Init+0x2c0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d052      	beq.n	80042ba <HAL_GPIO_Init+0xfa>
 8004214:	4a9a      	ldr	r2, [pc, #616]	; (8004480 <HAL_GPIO_Init+0x2c0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d869      	bhi.n	80042ee <HAL_GPIO_Init+0x12e>
 800421a:	4a9a      	ldr	r2, [pc, #616]	; (8004484 <HAL_GPIO_Init+0x2c4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d04c      	beq.n	80042ba <HAL_GPIO_Init+0xfa>
 8004220:	4a98      	ldr	r2, [pc, #608]	; (8004484 <HAL_GPIO_Init+0x2c4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d863      	bhi.n	80042ee <HAL_GPIO_Init+0x12e>
 8004226:	4a98      	ldr	r2, [pc, #608]	; (8004488 <HAL_GPIO_Init+0x2c8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d046      	beq.n	80042ba <HAL_GPIO_Init+0xfa>
 800422c:	4a96      	ldr	r2, [pc, #600]	; (8004488 <HAL_GPIO_Init+0x2c8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d85d      	bhi.n	80042ee <HAL_GPIO_Init+0x12e>
 8004232:	2b12      	cmp	r3, #18
 8004234:	d82a      	bhi.n	800428c <HAL_GPIO_Init+0xcc>
 8004236:	2b12      	cmp	r3, #18
 8004238:	d859      	bhi.n	80042ee <HAL_GPIO_Init+0x12e>
 800423a:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <HAL_GPIO_Init+0x80>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	080042bb 	.word	0x080042bb
 8004244:	08004295 	.word	0x08004295
 8004248:	080042a7 	.word	0x080042a7
 800424c:	080042e9 	.word	0x080042e9
 8004250:	080042ef 	.word	0x080042ef
 8004254:	080042ef 	.word	0x080042ef
 8004258:	080042ef 	.word	0x080042ef
 800425c:	080042ef 	.word	0x080042ef
 8004260:	080042ef 	.word	0x080042ef
 8004264:	080042ef 	.word	0x080042ef
 8004268:	080042ef 	.word	0x080042ef
 800426c:	080042ef 	.word	0x080042ef
 8004270:	080042ef 	.word	0x080042ef
 8004274:	080042ef 	.word	0x080042ef
 8004278:	080042ef 	.word	0x080042ef
 800427c:	080042ef 	.word	0x080042ef
 8004280:	080042ef 	.word	0x080042ef
 8004284:	0800429d 	.word	0x0800429d
 8004288:	080042b1 	.word	0x080042b1
 800428c:	4a7f      	ldr	r2, [pc, #508]	; (800448c <HAL_GPIO_Init+0x2cc>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_GPIO_Init+0xfa>
 8004292:	e02c      	b.n	80042ee <HAL_GPIO_Init+0x12e>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	623b      	str	r3, [r7, #32]
 800429a:	e029      	b.n	80042f0 <HAL_GPIO_Init+0x130>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	3304      	adds	r3, #4
 80042a2:	623b      	str	r3, [r7, #32]
 80042a4:	e024      	b.n	80042f0 <HAL_GPIO_Init+0x130>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	3308      	adds	r3, #8
 80042ac:	623b      	str	r3, [r7, #32]
 80042ae:	e01f      	b.n	80042f0 <HAL_GPIO_Init+0x130>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	330c      	adds	r3, #12
 80042b6:	623b      	str	r3, [r7, #32]
 80042b8:	e01a      	b.n	80042f0 <HAL_GPIO_Init+0x130>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d102      	bne.n	80042c8 <HAL_GPIO_Init+0x108>
 80042c2:	2304      	movs	r3, #4
 80042c4:	623b      	str	r3, [r7, #32]
 80042c6:	e013      	b.n	80042f0 <HAL_GPIO_Init+0x130>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d105      	bne.n	80042dc <HAL_GPIO_Init+0x11c>
 80042d0:	2308      	movs	r3, #8
 80042d2:	623b      	str	r3, [r7, #32]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	611a      	str	r2, [r3, #16]
 80042da:	e009      	b.n	80042f0 <HAL_GPIO_Init+0x130>
 80042dc:	2308      	movs	r3, #8
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	615a      	str	r2, [r3, #20]
 80042e6:	e003      	b.n	80042f0 <HAL_GPIO_Init+0x130>
 80042e8:	2300      	movs	r3, #0
 80042ea:	623b      	str	r3, [r7, #32]
 80042ec:	e000      	b.n	80042f0 <HAL_GPIO_Init+0x130>
 80042ee:	bf00      	nop
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2bff      	cmp	r3, #255	; 0xff
 80042f4:	d801      	bhi.n	80042fa <HAL_GPIO_Init+0x13a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	e001      	b.n	80042fe <HAL_GPIO_Init+0x13e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3304      	adds	r3, #4
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2bff      	cmp	r3, #255	; 0xff
 8004304:	d802      	bhi.n	800430c <HAL_GPIO_Init+0x14c>
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	e002      	b.n	8004312 <HAL_GPIO_Init+0x152>
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	3b08      	subs	r3, #8
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	210f      	movs	r1, #15
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	401a      	ands	r2, r3
 8004324:	6a39      	ldr	r1, [r7, #32]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	431a      	orrs	r2, r3
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80c1 	beq.w	80044c2 <HAL_GPIO_Init+0x302>
 8004340:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	4a52      	ldr	r2, [pc, #328]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6193      	str	r3, [r2, #24]
 800434c:	4b50      	ldr	r3, [pc, #320]	; (8004490 <HAL_GPIO_Init+0x2d0>)
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4a4e      	ldr	r2, [pc, #312]	; (8004494 <HAL_GPIO_Init+0x2d4>)
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	089b      	lsrs	r3, r3, #2
 800435e:	3302      	adds	r3, #2
 8004360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	220f      	movs	r2, #15
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4013      	ands	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a46      	ldr	r2, [pc, #280]	; (8004498 <HAL_GPIO_Init+0x2d8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d01f      	beq.n	80043c4 <HAL_GPIO_Init+0x204>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a45      	ldr	r2, [pc, #276]	; (800449c <HAL_GPIO_Init+0x2dc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d019      	beq.n	80043c0 <HAL_GPIO_Init+0x200>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a44      	ldr	r2, [pc, #272]	; (80044a0 <HAL_GPIO_Init+0x2e0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <HAL_GPIO_Init+0x1fc>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a43      	ldr	r2, [pc, #268]	; (80044a4 <HAL_GPIO_Init+0x2e4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00d      	beq.n	80043b8 <HAL_GPIO_Init+0x1f8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a42      	ldr	r2, [pc, #264]	; (80044a8 <HAL_GPIO_Init+0x2e8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d007      	beq.n	80043b4 <HAL_GPIO_Init+0x1f4>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a41      	ldr	r2, [pc, #260]	; (80044ac <HAL_GPIO_Init+0x2ec>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d101      	bne.n	80043b0 <HAL_GPIO_Init+0x1f0>
 80043ac:	2305      	movs	r3, #5
 80043ae:	e00a      	b.n	80043c6 <HAL_GPIO_Init+0x206>
 80043b0:	2306      	movs	r3, #6
 80043b2:	e008      	b.n	80043c6 <HAL_GPIO_Init+0x206>
 80043b4:	2304      	movs	r3, #4
 80043b6:	e006      	b.n	80043c6 <HAL_GPIO_Init+0x206>
 80043b8:	2303      	movs	r3, #3
 80043ba:	e004      	b.n	80043c6 <HAL_GPIO_Init+0x206>
 80043bc:	2302      	movs	r3, #2
 80043be:	e002      	b.n	80043c6 <HAL_GPIO_Init+0x206>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <HAL_GPIO_Init+0x206>
 80043c4:	2300      	movs	r3, #0
 80043c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c8:	f002 0203 	and.w	r2, r2, #3
 80043cc:	0092      	lsls	r2, r2, #2
 80043ce:	4093      	lsls	r3, r2
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	492f      	ldr	r1, [pc, #188]	; (8004494 <HAL_GPIO_Init+0x2d4>)
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	089b      	lsrs	r3, r3, #2
 80043dc:	3302      	adds	r3, #2
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d006      	beq.n	80043fe <HAL_GPIO_Init+0x23e>
 80043f0:	4b2f      	ldr	r3, [pc, #188]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	492e      	ldr	r1, [pc, #184]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	600b      	str	r3, [r1, #0]
 80043fc:	e006      	b.n	800440c <HAL_GPIO_Init+0x24c>
 80043fe:	4b2c      	ldr	r3, [pc, #176]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	43db      	mvns	r3, r3
 8004406:	492a      	ldr	r1, [pc, #168]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 8004408:	4013      	ands	r3, r2
 800440a:	600b      	str	r3, [r1, #0]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d006      	beq.n	8004426 <HAL_GPIO_Init+0x266>
 8004418:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	4924      	ldr	r1, [pc, #144]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]
 8004424:	e006      	b.n	8004434 <HAL_GPIO_Init+0x274>
 8004426:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	43db      	mvns	r3, r3
 800442e:	4920      	ldr	r1, [pc, #128]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 8004430:	4013      	ands	r3, r2
 8004432:	604b      	str	r3, [r1, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <HAL_GPIO_Init+0x28e>
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	491a      	ldr	r1, [pc, #104]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	4313      	orrs	r3, r2
 800444a:	608b      	str	r3, [r1, #8]
 800444c:	e006      	b.n	800445c <HAL_GPIO_Init+0x29c>
 800444e:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	43db      	mvns	r3, r3
 8004456:	4916      	ldr	r1, [pc, #88]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 8004458:	4013      	ands	r3, r2
 800445a:	608b      	str	r3, [r1, #8]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d025      	beq.n	80044b4 <HAL_GPIO_Init+0x2f4>
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	4910      	ldr	r1, [pc, #64]	; (80044b0 <HAL_GPIO_Init+0x2f0>)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	4313      	orrs	r3, r2
 8004472:	60cb      	str	r3, [r1, #12]
 8004474:	e025      	b.n	80044c2 <HAL_GPIO_Init+0x302>
 8004476:	bf00      	nop
 8004478:	10320000 	.word	0x10320000
 800447c:	10310000 	.word	0x10310000
 8004480:	10220000 	.word	0x10220000
 8004484:	10210000 	.word	0x10210000
 8004488:	10120000 	.word	0x10120000
 800448c:	10110000 	.word	0x10110000
 8004490:	40021000 	.word	0x40021000
 8004494:	40010000 	.word	0x40010000
 8004498:	40010800 	.word	0x40010800
 800449c:	40010c00 	.word	0x40010c00
 80044a0:	40011000 	.word	0x40011000
 80044a4:	40011400 	.word	0x40011400
 80044a8:	40011800 	.word	0x40011800
 80044ac:	40011c00 	.word	0x40011c00
 80044b0:	40010400 	.word	0x40010400
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_GPIO_Init+0x324>)
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	43db      	mvns	r3, r3
 80044bc:	4909      	ldr	r1, [pc, #36]	; (80044e4 <HAL_GPIO_Init+0x324>)
 80044be:	4013      	ands	r3, r2
 80044c0:	60cb      	str	r3, [r1, #12]
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	3301      	adds	r3, #1
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	fa22 f303 	lsr.w	r3, r2, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f47f ae7e 	bne.w	80041d4 <HAL_GPIO_Init+0x14>
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	372c      	adds	r7, #44	; 0x2c
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	40010400 	.word	0x40010400

080044e8 <HAL_GPIO_ReadPin>:
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	887b      	ldrh	r3, [r7, #2]
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_GPIO_ReadPin+0x1e>
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
 8004504:	e001      	b.n	800450a <HAL_GPIO_ReadPin+0x22>
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <HAL_GPIO_WritePin>:
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	460b      	mov	r3, r1
 8004520:	807b      	strh	r3, [r7, #2]
 8004522:	4613      	mov	r3, r2
 8004524:	707b      	strb	r3, [r7, #1]
 8004526:	787b      	ldrb	r3, [r7, #1]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_GPIO_WritePin+0x1e>
 800452c:	887a      	ldrh	r2, [r7, #2]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	611a      	str	r2, [r3, #16]
 8004532:	e003      	b.n	800453c <HAL_GPIO_WritePin+0x26>
 8004534:	887b      	ldrh	r3, [r7, #2]
 8004536:	041a      	lsls	r2, r3, #16
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	611a      	str	r2, [r3, #16]
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr
	...

08004548 <HAL_GPIO_EXTI_IRQHandler>:
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	80fb      	strh	r3, [r7, #6]
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d006      	beq.n	800456c <HAL_GPIO_EXTI_IRQHandler+0x24>
 800455e:	4a05      	ldr	r2, [pc, #20]	; (8004574 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	6153      	str	r3, [r2, #20]
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	4618      	mov	r0, r3
 8004568:	f7fc fd4e 	bl	8001008 <HAL_GPIO_EXTI_Callback>
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40010400 	.word	0x40010400

08004578 <HAL_RCC_OscConfig>:
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RCC_OscConfig+0x12>
 8004586:	2301      	movs	r3, #1
 8004588:	e26c      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8087 	beq.w	80046a6 <HAL_RCC_OscConfig+0x12e>
 8004598:	4b92      	ldr	r3, [pc, #584]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 030c 	and.w	r3, r3, #12
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d00c      	beq.n	80045be <HAL_RCC_OscConfig+0x46>
 80045a4:	4b8f      	ldr	r3, [pc, #572]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 030c 	and.w	r3, r3, #12
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d112      	bne.n	80045d6 <HAL_RCC_OscConfig+0x5e>
 80045b0:	4b8c      	ldr	r3, [pc, #560]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045bc:	d10b      	bne.n	80045d6 <HAL_RCC_OscConfig+0x5e>
 80045be:	4b89      	ldr	r3, [pc, #548]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d06c      	beq.n	80046a4 <HAL_RCC_OscConfig+0x12c>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d168      	bne.n	80046a4 <HAL_RCC_OscConfig+0x12c>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e246      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045de:	d106      	bne.n	80045ee <HAL_RCC_OscConfig+0x76>
 80045e0:	4b80      	ldr	r3, [pc, #512]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a7f      	ldr	r2, [pc, #508]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80045e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	e02e      	b.n	800464c <HAL_RCC_OscConfig+0xd4>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10c      	bne.n	8004610 <HAL_RCC_OscConfig+0x98>
 80045f6:	4b7b      	ldr	r3, [pc, #492]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a7a      	ldr	r2, [pc, #488]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80045fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	4b78      	ldr	r3, [pc, #480]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a77      	ldr	r2, [pc, #476]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 8004608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	e01d      	b.n	800464c <HAL_RCC_OscConfig+0xd4>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004618:	d10c      	bne.n	8004634 <HAL_RCC_OscConfig+0xbc>
 800461a:	4b72      	ldr	r3, [pc, #456]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a71      	ldr	r2, [pc, #452]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 8004620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	4b6f      	ldr	r3, [pc, #444]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a6e      	ldr	r2, [pc, #440]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 800462c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e00b      	b.n	800464c <HAL_RCC_OscConfig+0xd4>
 8004634:	4b6b      	ldr	r3, [pc, #428]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a6a      	ldr	r2, [pc, #424]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 800463a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	4b68      	ldr	r3, [pc, #416]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a67      	ldr	r2, [pc, #412]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 8004646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d013      	beq.n	800467c <HAL_RCC_OscConfig+0x104>
 8004654:	f7ff f994 	bl	8003980 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0xf6>
 800465c:	f7ff f990 	bl	8003980 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	; 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0xf6>
 800466a:	2303      	movs	r3, #3
 800466c:	e1fa      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 800466e:	4b5d      	ldr	r3, [pc, #372]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0xe4>
 800467a:	e014      	b.n	80046a6 <HAL_RCC_OscConfig+0x12e>
 800467c:	f7ff f980 	bl	8003980 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x11e>
 8004684:	f7ff f97c 	bl	8003980 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	; 0x64
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x11e>
 8004692:	2303      	movs	r3, #3
 8004694:	e1e6      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 8004696:	4b53      	ldr	r3, [pc, #332]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x10c>
 80046a2:	e000      	b.n	80046a6 <HAL_RCC_OscConfig+0x12e>
 80046a4:	bf00      	nop
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d063      	beq.n	800477a <HAL_RCC_OscConfig+0x202>
 80046b2:	4b4c      	ldr	r3, [pc, #304]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00b      	beq.n	80046d6 <HAL_RCC_OscConfig+0x15e>
 80046be:	4b49      	ldr	r3, [pc, #292]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d11c      	bne.n	8004704 <HAL_RCC_OscConfig+0x18c>
 80046ca:	4b46      	ldr	r3, [pc, #280]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d116      	bne.n	8004704 <HAL_RCC_OscConfig+0x18c>
 80046d6:	4b43      	ldr	r3, [pc, #268]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <HAL_RCC_OscConfig+0x176>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d001      	beq.n	80046ee <HAL_RCC_OscConfig+0x176>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e1ba      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 80046ee:	4b3d      	ldr	r3, [pc, #244]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4939      	ldr	r1, [pc, #228]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	600b      	str	r3, [r1, #0]
 8004702:	e03a      	b.n	800477a <HAL_RCC_OscConfig+0x202>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d020      	beq.n	800474e <HAL_RCC_OscConfig+0x1d6>
 800470c:	4b36      	ldr	r3, [pc, #216]	; (80047e8 <HAL_RCC_OscConfig+0x270>)
 800470e:	2201      	movs	r2, #1
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	f7ff f935 	bl	8003980 <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x1b4>
 800471a:	f7ff f931 	bl	8003980 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x1b4>
 8004728:	2303      	movs	r3, #3
 800472a:	e19b      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 800472c:	4b2d      	ldr	r3, [pc, #180]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f0      	beq.n	800471a <HAL_RCC_OscConfig+0x1a2>
 8004738:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	4927      	ldr	r1, [pc, #156]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 8004748:	4313      	orrs	r3, r2
 800474a:	600b      	str	r3, [r1, #0]
 800474c:	e015      	b.n	800477a <HAL_RCC_OscConfig+0x202>
 800474e:	4b26      	ldr	r3, [pc, #152]	; (80047e8 <HAL_RCC_OscConfig+0x270>)
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	f7ff f914 	bl	8003980 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x1f6>
 800475c:	f7ff f910 	bl	8003980 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x1f6>
 800476a:	2303      	movs	r3, #3
 800476c:	e17a      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 800476e:	4b1d      	ldr	r3, [pc, #116]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x1e4>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d03a      	beq.n	80047fc <HAL_RCC_OscConfig+0x284>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d019      	beq.n	80047c2 <HAL_RCC_OscConfig+0x24a>
 800478e:	4b17      	ldr	r3, [pc, #92]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 8004790:	2201      	movs	r2, #1
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	f7ff f8f4 	bl	8003980 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x236>
 800479c:	f7ff f8f0 	bl	8003980 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x236>
 80047aa:	2303      	movs	r3, #3
 80047ac:	e15a      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <HAL_RCC_OscConfig+0x26c>)
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x224>
 80047ba:	2001      	movs	r0, #1
 80047bc:	f000 faa6 	bl	8004d0c <RCC_Delay>
 80047c0:	e01c      	b.n	80047fc <HAL_RCC_OscConfig+0x284>
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <HAL_RCC_OscConfig+0x274>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	f7ff f8da 	bl	8003980 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]
 80047ce:	e00f      	b.n	80047f0 <HAL_RCC_OscConfig+0x278>
 80047d0:	f7ff f8d6 	bl	8003980 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d908      	bls.n	80047f0 <HAL_RCC_OscConfig+0x278>
 80047de:	2303      	movs	r3, #3
 80047e0:	e140      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	42420000 	.word	0x42420000
 80047ec:	42420480 	.word	0x42420480
 80047f0:	4b9e      	ldr	r3, [pc, #632]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e9      	bne.n	80047d0 <HAL_RCC_OscConfig+0x258>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80a6 	beq.w	8004956 <HAL_RCC_OscConfig+0x3de>
 800480a:	2300      	movs	r3, #0
 800480c:	75fb      	strb	r3, [r7, #23]
 800480e:	4b97      	ldr	r3, [pc, #604]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10d      	bne.n	8004836 <HAL_RCC_OscConfig+0x2be>
 800481a:	4b94      	ldr	r3, [pc, #592]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	4a93      	ldr	r2, [pc, #588]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 8004820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004824:	61d3      	str	r3, [r2, #28]
 8004826:	4b91      	ldr	r3, [pc, #580]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2301      	movs	r3, #1
 8004834:	75fb      	strb	r3, [r7, #23]
 8004836:	4b8e      	ldr	r3, [pc, #568]	; (8004a70 <HAL_RCC_OscConfig+0x4f8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483e:	2b00      	cmp	r3, #0
 8004840:	d118      	bne.n	8004874 <HAL_RCC_OscConfig+0x2fc>
 8004842:	4b8b      	ldr	r3, [pc, #556]	; (8004a70 <HAL_RCC_OscConfig+0x4f8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a8a      	ldr	r2, [pc, #552]	; (8004a70 <HAL_RCC_OscConfig+0x4f8>)
 8004848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	f7ff f897 	bl	8003980 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x2f0>
 8004856:	f7ff f893 	bl	8003980 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b64      	cmp	r3, #100	; 0x64
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x2f0>
 8004864:	2303      	movs	r3, #3
 8004866:	e0fd      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 8004868:	4b81      	ldr	r3, [pc, #516]	; (8004a70 <HAL_RCC_OscConfig+0x4f8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x2de>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d106      	bne.n	800488a <HAL_RCC_OscConfig+0x312>
 800487c:	4b7b      	ldr	r3, [pc, #492]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	4a7a      	ldr	r2, [pc, #488]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	6213      	str	r3, [r2, #32]
 8004888:	e02d      	b.n	80048e6 <HAL_RCC_OscConfig+0x36e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10c      	bne.n	80048ac <HAL_RCC_OscConfig+0x334>
 8004892:	4b76      	ldr	r3, [pc, #472]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	4a75      	ldr	r2, [pc, #468]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	6213      	str	r3, [r2, #32]
 800489e:	4b73      	ldr	r3, [pc, #460]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	4a72      	ldr	r2, [pc, #456]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80048a4:	f023 0304 	bic.w	r3, r3, #4
 80048a8:	6213      	str	r3, [r2, #32]
 80048aa:	e01c      	b.n	80048e6 <HAL_RCC_OscConfig+0x36e>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	2b05      	cmp	r3, #5
 80048b2:	d10c      	bne.n	80048ce <HAL_RCC_OscConfig+0x356>
 80048b4:	4b6d      	ldr	r3, [pc, #436]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	4a6c      	ldr	r2, [pc, #432]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80048ba:	f043 0304 	orr.w	r3, r3, #4
 80048be:	6213      	str	r3, [r2, #32]
 80048c0:	4b6a      	ldr	r3, [pc, #424]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	4a69      	ldr	r2, [pc, #420]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	6213      	str	r3, [r2, #32]
 80048cc:	e00b      	b.n	80048e6 <HAL_RCC_OscConfig+0x36e>
 80048ce:	4b67      	ldr	r3, [pc, #412]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	4a66      	ldr	r2, [pc, #408]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	6213      	str	r3, [r2, #32]
 80048da:	4b64      	ldr	r3, [pc, #400]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	4a63      	ldr	r2, [pc, #396]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80048e0:	f023 0304 	bic.w	r3, r3, #4
 80048e4:	6213      	str	r3, [r2, #32]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d015      	beq.n	800491a <HAL_RCC_OscConfig+0x3a2>
 80048ee:	f7ff f847 	bl	8003980 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]
 80048f4:	e00a      	b.n	800490c <HAL_RCC_OscConfig+0x394>
 80048f6:	f7ff f843 	bl	8003980 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f241 3288 	movw	r2, #5000	; 0x1388
 8004904:	4293      	cmp	r3, r2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x394>
 8004908:	2303      	movs	r3, #3
 800490a:	e0ab      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 800490c:	4b57      	ldr	r3, [pc, #348]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0ee      	beq.n	80048f6 <HAL_RCC_OscConfig+0x37e>
 8004918:	e014      	b.n	8004944 <HAL_RCC_OscConfig+0x3cc>
 800491a:	f7ff f831 	bl	8003980 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]
 8004920:	e00a      	b.n	8004938 <HAL_RCC_OscConfig+0x3c0>
 8004922:	f7ff f82d 	bl	8003980 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004930:	4293      	cmp	r3, r2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x3c0>
 8004934:	2303      	movs	r3, #3
 8004936:	e095      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 8004938:	4b4c      	ldr	r3, [pc, #304]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1ee      	bne.n	8004922 <HAL_RCC_OscConfig+0x3aa>
 8004944:	7dfb      	ldrb	r3, [r7, #23]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d105      	bne.n	8004956 <HAL_RCC_OscConfig+0x3de>
 800494a:	4b48      	ldr	r3, [pc, #288]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	4a47      	ldr	r2, [pc, #284]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 8004950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004954:	61d3      	str	r3, [r2, #28]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8081 	beq.w	8004a62 <HAL_RCC_OscConfig+0x4ea>
 8004960:	4b42      	ldr	r3, [pc, #264]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	2b08      	cmp	r3, #8
 800496a:	d061      	beq.n	8004a30 <HAL_RCC_OscConfig+0x4b8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d146      	bne.n	8004a02 <HAL_RCC_OscConfig+0x48a>
 8004974:	4b3f      	ldr	r3, [pc, #252]	; (8004a74 <HAL_RCC_OscConfig+0x4fc>)
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	f7ff f801 	bl	8003980 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x41c>
 8004982:	f7fe fffd 	bl	8003980 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x41c>
 8004990:	2303      	movs	r3, #3
 8004992:	e067      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 8004994:	4b35      	ldr	r3, [pc, #212]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f0      	bne.n	8004982 <HAL_RCC_OscConfig+0x40a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a8:	d108      	bne.n	80049bc <HAL_RCC_OscConfig+0x444>
 80049aa:	4b30      	ldr	r3, [pc, #192]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	492d      	ldr	r1, [pc, #180]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	604b      	str	r3, [r1, #4]
 80049bc:	4b2b      	ldr	r3, [pc, #172]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a19      	ldr	r1, [r3, #32]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	430b      	orrs	r3, r1
 80049ce:	4927      	ldr	r1, [pc, #156]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	604b      	str	r3, [r1, #4]
 80049d4:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <HAL_RCC_OscConfig+0x4fc>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	f7fe ffd1 	bl	8003980 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x47c>
 80049e2:	f7fe ffcd 	bl	8003980 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x47c>
 80049f0:	2303      	movs	r3, #3
 80049f2:	e037      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 80049f4:	4b1d      	ldr	r3, [pc, #116]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x46a>
 8004a00:	e02f      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ea>
 8004a02:	4b1c      	ldr	r3, [pc, #112]	; (8004a74 <HAL_RCC_OscConfig+0x4fc>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f7fe ffba 	bl	8003980 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x4aa>
 8004a10:	f7fe ffb6 	bl	8003980 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x4aa>
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e020      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 8004a22:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0x498>
 8004a2e:	e018      	b.n	8004a62 <HAL_RCC_OscConfig+0x4ea>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_RCC_OscConfig+0x4c4>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e013      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_RCC_OscConfig+0x4f4>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d106      	bne.n	8004a5e <HAL_RCC_OscConfig+0x4e6>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d001      	beq.n	8004a62 <HAL_RCC_OscConfig+0x4ea>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <HAL_RCC_OscConfig+0x4ec>
 8004a62:	2300      	movs	r3, #0
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	40007000 	.word	0x40007000
 8004a74:	42420060 	.word	0x42420060

08004a78 <HAL_RCC_ClockConfig>:
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x14>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0d0      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1b6>
 8004a8c:	4b6a      	ldr	r3, [pc, #424]	; (8004c38 <HAL_RCC_ClockConfig+0x1c0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d910      	bls.n	8004abc <HAL_RCC_ClockConfig+0x44>
 8004a9a:	4b67      	ldr	r3, [pc, #412]	; (8004c38 <HAL_RCC_ClockConfig+0x1c0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 0207 	bic.w	r2, r3, #7
 8004aa2:	4965      	ldr	r1, [pc, #404]	; (8004c38 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]
 8004aaa:	4b63      	ldr	r3, [pc, #396]	; (8004c38 <HAL_RCC_ClockConfig+0x1c0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x44>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0b8      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1b6>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d020      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x92>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x68>
 8004ad4:	4b59      	ldr	r3, [pc, #356]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	4a58      	ldr	r2, [pc, #352]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004ada:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ade:	6053      	str	r3, [r2, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x80>
 8004aec:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a52      	ldr	r2, [pc, #328]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004af2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004af6:	6053      	str	r3, [r2, #4]
 8004af8:	4b50      	ldr	r3, [pc, #320]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	494d      	ldr	r1, [pc, #308]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	604b      	str	r3, [r1, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d040      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x120>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xb6>
 8004b1e:	4b47      	ldr	r3, [pc, #284]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d115      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xde>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e07f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1b6>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d107      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xce>
 8004b36:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xde>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e073      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1b6>
 8004b46:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xde>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e06b      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1b6>
 8004b56:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f023 0203 	bic.w	r2, r3, #3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4936      	ldr	r1, [pc, #216]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	604b      	str	r3, [r1, #4]
 8004b68:	f7fe ff0a 	bl	8003980 <HAL_GetTick>
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_ClockConfig+0x10e>
 8004b70:	f7fe ff06 	bl	8003980 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_ClockConfig+0x10e>
 8004b82:	2303      	movs	r3, #3
 8004b84:	e053      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1b6>
 8004b86:	4b2d      	ldr	r3, [pc, #180]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f003 020c 	and.w	r2, r3, #12
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d1eb      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xf8>
 8004b98:	4b27      	ldr	r3, [pc, #156]	; (8004c38 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d210      	bcs.n	8004bc8 <HAL_RCC_ClockConfig+0x150>
 8004ba6:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 0207 	bic.w	r2, r3, #7
 8004bae:	4922      	ldr	r1, [pc, #136]	; (8004c38 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
 8004bb6:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x150>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e032      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1b6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x16e>
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4916      	ldr	r1, [pc, #88]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	604b      	str	r3, [r1, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x18e>
 8004bf2:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	490e      	ldr	r1, [pc, #56]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	604b      	str	r3, [r1, #4]
 8004c06:	f000 f821 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	490a      	ldr	r1, [pc, #40]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004c18:	5ccb      	ldrb	r3, [r1, r3]
 8004c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <HAL_RCC_ClockConfig+0x1cc>)
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCC_ClockConfig+0x1d0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fe fe68 	bl	80038fc <HAL_InitTick>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40022000 	.word	0x40022000
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	08009354 	.word	0x08009354
 8004c44:	20000000 	.word	0x20000000
 8004c48:	20000004 	.word	0x20000004

08004c4c <HAL_RCC_GetSysClockFreq>:
 8004c4c:	b490      	push	{r4, r7}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4b2a      	ldr	r3, [pc, #168]	; (8004cfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c54:	1d3c      	adds	r4, r7, #4
 8004c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004c5c:	f240 2301 	movw	r3, #513	; 0x201
 8004c60:	803b      	strh	r3, [r7, #0]
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8004c62:	2300      	movs	r3, #0
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	2300      	movs	r3, #0
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6a:	2300      	movs	r3, #0
<<<<<<< HEAD
 8004c6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c72:	4b22      	ldr	r3, [pc, #136]	; (8004cfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d002      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x40>
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d003      	beq.n	8004c8e <HAL_RCC_GetSysClockFreq+0x46>
 8004c86:	e02d      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c88:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c8a:	623b      	str	r3, [r7, #32]
      break;
 8004c8c:	e02d      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	0c9b      	lsrs	r3, r3, #18
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ca0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d013      	beq.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cac:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	0c5b      	lsrs	r3, r3, #17
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cba:	4413      	add	r3, r2
 8004cbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004cc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	4a0e      	ldr	r2, [pc, #56]	; (8004d00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc6:	fb02 f203 	mul.w	r2, r2, r3
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd2:	e004      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	4a0b      	ldr	r2, [pc, #44]	; (8004d04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cd8:	fb02 f303 	mul.w	r3, r2, r3
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	623b      	str	r3, [r7, #32]
      break;
 8004ce2:	e002      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ce4:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ce6:	623b      	str	r3, [r7, #32]
      break;
 8004ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cea:	6a3b      	ldr	r3, [r7, #32]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3728      	adds	r7, #40	; 0x28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc90      	pop	{r4, r7}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	080092f0 	.word	0x080092f0
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	007a1200 	.word	0x007a1200
 8004d04:	003d0900 	.word	0x003d0900

08004d08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d10:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <RCC_Delay+0x34>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <RCC_Delay+0x38>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	0a5b      	lsrs	r3, r3, #9
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d24:	bf00      	nop
  }
  while (Delay --);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1e5a      	subs	r2, r3, #1
 8004d2a:	60fa      	str	r2, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f9      	bne.n	8004d24 <RCC_Delay+0x1c>
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	20000000 	.word	0x20000000
 8004d40:	10624dd3 	.word	0x10624dd3

08004d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e076      	b.n	8004e44 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d108      	bne.n	8004d70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d66:	d009      	beq.n	8004d7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	61da      	str	r2, [r3, #28]
 8004d6e:	e005      	b.n	8004d7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fe fc68 	bl	800366c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e00:	ea42 0103 	orr.w	r1, r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	0c1a      	lsrs	r2, r3, #16
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f002 0204 	and.w	r2, r2, #4
 8004e22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69da      	ldr	r2, [r3, #28]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_SPI_Transmit+0x22>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	e126      	b.n	80050bc <HAL_SPI_Transmit+0x270>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e76:	f7fe fd81 	bl	800397c <HAL_GetTick>
 8004e7a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d002      	beq.n	8004e92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e90:	e10b      	b.n	80050aa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_SPI_Transmit+0x52>
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d102      	bne.n	8004ea4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ea2:	e102      	b.n	80050aa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eea:	d10f      	bne.n	8004f0c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004efa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	d007      	beq.n	8004f2a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f32:	d14b      	bne.n	8004fcc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <HAL_SPI_Transmit+0xf6>
 8004f3c:	8afb      	ldrh	r3, [r7, #22]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d13e      	bne.n	8004fc0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	881a      	ldrh	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	1c9a      	adds	r2, r3, #2
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f66:	e02b      	b.n	8004fc0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d112      	bne.n	8004f9c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	881a      	ldrh	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	1c9a      	adds	r2, r3, #2
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f9a:	e011      	b.n	8004fc0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f9c:	f7fe fcee 	bl	800397c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d803      	bhi.n	8004fb4 <HAL_SPI_Transmit+0x168>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d102      	bne.n	8004fba <HAL_SPI_Transmit+0x16e>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d102      	bne.n	8004fc0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fbe:	e074      	b.n	80050aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1ce      	bne.n	8004f68 <HAL_SPI_Transmit+0x11c>
 8004fca:	e04c      	b.n	8005066 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_SPI_Transmit+0x18e>
 8004fd4:	8afb      	ldrh	r3, [r7, #22]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d140      	bne.n	800505c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	330c      	adds	r3, #12
 8004fe4:	7812      	ldrb	r2, [r2, #0]
 8004fe6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005000:	e02c      	b.n	800505c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d113      	bne.n	8005038 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	330c      	adds	r3, #12
 800501a:	7812      	ldrb	r2, [r2, #0]
 800501c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	86da      	strh	r2, [r3, #54]	; 0x36
 8005036:	e011      	b.n	800505c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005038:	f7fe fca0 	bl	800397c <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d803      	bhi.n	8005050 <HAL_SPI_Transmit+0x204>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d102      	bne.n	8005056 <HAL_SPI_Transmit+0x20a>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	77fb      	strb	r3, [r7, #31]
          goto error;
 800505a:	e026      	b.n	80050aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1cd      	bne.n	8005002 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fcbc 	bl	80059e8 <SPI_EndRxTxTransaction>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005084:	2300      	movs	r3, #0
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	77fb      	strb	r3, [r7, #31]
 80050a6:	e000      	b.n	80050aa <HAL_SPI_Transmit+0x25e>
  }

error:
 80050a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4613      	mov	r3, r2
 80050d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e0:	d112      	bne.n	8005108 <HAL_SPI_Receive+0x44>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10e      	bne.n	8005108 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2204      	movs	r2, #4
 80050ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80050f2:	88fa      	ldrh	r2, [r7, #6]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f8f1 	bl	80052e6 <HAL_SPI_TransmitReceive>
 8005104:	4603      	mov	r3, r0
 8005106:	e0ea      	b.n	80052de <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_SPI_Receive+0x52>
 8005112:	2302      	movs	r3, #2
 8005114:	e0e3      	b.n	80052de <HAL_SPI_Receive+0x21a>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800511e:	f7fe fc2d 	bl	800397c <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	d002      	beq.n	8005136 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005130:	2302      	movs	r3, #2
 8005132:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005134:	e0ca      	b.n	80052cc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <HAL_SPI_Receive+0x7e>
 800513c:	88fb      	ldrh	r3, [r7, #6]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005146:	e0c1      	b.n	80052cc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2204      	movs	r2, #4
 800514c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	88fa      	ldrh	r2, [r7, #6]
 8005160:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	88fa      	ldrh	r2, [r7, #6]
 8005166:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518e:	d10f      	bne.n	80051b0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051ae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	2b40      	cmp	r3, #64	; 0x40
 80051bc:	d007      	beq.n	80051ce <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051cc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d162      	bne.n	800529c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051d6:	e02e      	b.n	8005236 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d115      	bne.n	8005212 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f103 020c 	add.w	r2, r3, #12
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	7812      	ldrb	r2, [r2, #0]
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005210:	e011      	b.n	8005236 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005212:	f7fe fbb3 	bl	800397c <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d803      	bhi.n	800522a <HAL_SPI_Receive+0x166>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005228:	d102      	bne.n	8005230 <HAL_SPI_Receive+0x16c>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005234:	e04a      	b.n	80052cc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1cb      	bne.n	80051d8 <HAL_SPI_Receive+0x114>
 8005240:	e031      	b.n	80052a6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b01      	cmp	r3, #1
 800524e:	d113      	bne.n	8005278 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	b292      	uxth	r2, r2
 800525c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	1c9a      	adds	r2, r3, #2
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005276:	e011      	b.n	800529c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005278:	f7fe fb80 	bl	800397c <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d803      	bhi.n	8005290 <HAL_SPI_Receive+0x1cc>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d102      	bne.n	8005296 <HAL_SPI_Receive+0x1d2>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d102      	bne.n	800529c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	75fb      	strb	r3, [r7, #23]
          goto error;
 800529a:	e017      	b.n	80052cc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1cd      	bne.n	8005242 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	6839      	ldr	r1, [r7, #0]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fb4a 	bl	8005944 <SPI_EndRxTransaction>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	75fb      	strb	r3, [r7, #23]
 80052c8:	e000      	b.n	80052cc <HAL_SPI_Receive+0x208>
  }

error :
 80052ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b08c      	sub	sp, #48	; 0x30
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	607a      	str	r2, [r7, #4]
 80052f2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052f4:	2301      	movs	r3, #1
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_SPI_TransmitReceive+0x26>
 8005308:	2302      	movs	r3, #2
 800530a:	e18a      	b.n	8005622 <HAL_SPI_TransmitReceive+0x33c>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005314:	f7fe fb32 	bl	800397c <HAL_GetTick>
 8005318:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800532a:	887b      	ldrh	r3, [r7, #2]
 800532c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800532e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005332:	2b01      	cmp	r3, #1
 8005334:	d00f      	beq.n	8005356 <HAL_SPI_TransmitReceive+0x70>
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533c:	d107      	bne.n	800534e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <HAL_SPI_TransmitReceive+0x68>
 8005346:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800534a:	2b04      	cmp	r3, #4
 800534c:	d003      	beq.n	8005356 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800534e:	2302      	movs	r3, #2
 8005350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005354:	e15b      	b.n	800560e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <HAL_SPI_TransmitReceive+0x82>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_SPI_TransmitReceive+0x82>
 8005362:	887b      	ldrh	r3, [r7, #2]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d103      	bne.n	8005370 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800536e:	e14e      	b.n	800560e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b04      	cmp	r3, #4
 800537a:	d003      	beq.n	8005384 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2205      	movs	r2, #5
 8005380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	887a      	ldrh	r2, [r7, #2]
 8005394:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	887a      	ldrh	r2, [r7, #2]
 800539a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	887a      	ldrh	r2, [r7, #2]
 80053a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	887a      	ldrh	r2, [r7, #2]
 80053ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	d007      	beq.n	80053d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e0:	d178      	bne.n	80054d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_SPI_TransmitReceive+0x10a>
 80053ea:	8b7b      	ldrh	r3, [r7, #26]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d166      	bne.n	80054be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	881a      	ldrh	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	1c9a      	adds	r2, r3, #2
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005414:	e053      	b.n	80054be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b02      	cmp	r3, #2
 8005422:	d11b      	bne.n	800545c <HAL_SPI_TransmitReceive+0x176>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d016      	beq.n	800545c <HAL_SPI_TransmitReceive+0x176>
 800542e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005430:	2b01      	cmp	r3, #1
 8005432:	d113      	bne.n	800545c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b01      	cmp	r3, #1
 8005468:	d119      	bne.n	800549e <HAL_SPI_TransmitReceive+0x1b8>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d014      	beq.n	800549e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	b292      	uxth	r2, r2
 8005480:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005486:	1c9a      	adds	r2, r3, #2
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005490:	b29b      	uxth	r3, r3
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800549a:	2301      	movs	r3, #1
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800549e:	f7fe fa6d 	bl	800397c <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d807      	bhi.n	80054be <HAL_SPI_TransmitReceive+0x1d8>
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d003      	beq.n	80054be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054bc:	e0a7      	b.n	800560e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1a6      	bne.n	8005416 <HAL_SPI_TransmitReceive+0x130>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1a1      	bne.n	8005416 <HAL_SPI_TransmitReceive+0x130>
 80054d2:	e07c      	b.n	80055ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <HAL_SPI_TransmitReceive+0x1fc>
 80054dc:	8b7b      	ldrh	r3, [r7, #26]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d16b      	bne.n	80055ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	330c      	adds	r3, #12
 80054ec:	7812      	ldrb	r2, [r2, #0]
 80054ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005508:	e057      	b.n	80055ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b02      	cmp	r3, #2
 8005516:	d11c      	bne.n	8005552 <HAL_SPI_TransmitReceive+0x26c>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d017      	beq.n	8005552 <HAL_SPI_TransmitReceive+0x26c>
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	2b01      	cmp	r3, #1
 8005526:	d114      	bne.n	8005552 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	7812      	ldrb	r2, [r2, #0]
 8005534:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b01      	cmp	r3, #1
 800555e:	d119      	bne.n	8005594 <HAL_SPI_TransmitReceive+0x2ae>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d014      	beq.n	8005594 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005590:	2301      	movs	r3, #1
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005594:	f7fe f9f2 	bl	800397c <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d803      	bhi.n	80055ac <HAL_SPI_TransmitReceive+0x2c6>
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055aa:	d102      	bne.n	80055b2 <HAL_SPI_TransmitReceive+0x2cc>
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d103      	bne.n	80055ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055b8:	e029      	b.n	800560e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1a2      	bne.n	800550a <HAL_SPI_TransmitReceive+0x224>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d19d      	bne.n	800550a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fa08 	bl	80059e8 <SPI_EndRxTxTransaction>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d006      	beq.n	80055ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80055ea:	e010      	b.n	800560e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10b      	bne.n	800560c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	e000      	b.n	800560e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800560c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800561e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005622:	4618      	mov	r0, r3
 8005624:	3730      	adds	r7, #48	; 0x30
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	099b      	lsrs	r3, r3, #6
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10f      	bne.n	8005670 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	099b      	lsrs	r3, r3, #6
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	4798      	blx	r3
    return;
 800566e:	e0be      	b.n	80057ee <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <HAL_SPI_IRQHandler+0x66>
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	09db      	lsrs	r3, r3, #7
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	4798      	blx	r3
    return;
 8005690:	e0ad      	b.n	80057ee <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d106      	bne.n	80056ac <HAL_SPI_IRQHandler+0x80>
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	099b      	lsrs	r3, r3, #6
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 80a1 	beq.w	80057ee <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 809a 	beq.w	80057ee <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	099b      	lsrs	r3, r3, #6
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d023      	beq.n	800570e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d011      	beq.n	80056f6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d6:	f043 0204 	orr.w	r2, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	e00b      	b.n	800570e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056f6:	2300      	movs	r3, #0
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	693b      	ldr	r3, [r7, #16]
        return;
 800570c:	e06f      	b.n	80057ee <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d014      	beq.n	8005744 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571e:	f043 0201 	orr.w	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005748:	2b00      	cmp	r3, #0
 800574a:	d04f      	beq.n	80057ec <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800575a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <HAL_SPI_IRQHandler+0x14c>
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d034      	beq.n	80057e2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0203 	bic.w	r2, r2, #3
 8005786:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d011      	beq.n	80057b4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005794:	4a17      	ldr	r2, [pc, #92]	; (80057f4 <HAL_SPI_IRQHandler+0x1c8>)
 8005796:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579c:	4618      	mov	r0, r3
 800579e:	f7fe fa05 	bl	8003bac <HAL_DMA_Abort_IT>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d016      	beq.n	80057ea <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c0:	4a0c      	ldr	r2, [pc, #48]	; (80057f4 <HAL_SPI_IRQHandler+0x1c8>)
 80057c2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fe f9ef 	bl	8003bac <HAL_DMA_Abort_IT>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80057e0:	e003      	b.n	80057ea <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f808 	bl	80057f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80057e8:	e000      	b.n	80057ec <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80057ea:	bf00      	nop
    return;
 80057ec:	bf00      	nop
  }
}
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	0800580b 	.word	0x0800580b

080057f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f7ff ffe7 	bl	80057f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800582a:	bf00      	nop
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	4613      	mov	r3, r2
 8005842:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005844:	f7fe f89a 	bl	800397c <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	4413      	add	r3, r2
 8005852:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005854:	f7fe f892 	bl	800397c <HAL_GetTick>
 8005858:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800585a:	4b39      	ldr	r3, [pc, #228]	; (8005940 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	015b      	lsls	r3, r3, #5
 8005860:	0d1b      	lsrs	r3, r3, #20
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	fb02 f303 	mul.w	r3, r2, r3
 8005868:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800586a:	e054      	b.n	8005916 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005872:	d050      	beq.n	8005916 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005874:	f7fe f882 	bl	800397c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	429a      	cmp	r2, r3
 8005882:	d902      	bls.n	800588a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d13d      	bne.n	8005906 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005898:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a2:	d111      	bne.n	80058c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ac:	d004      	beq.n	80058b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b6:	d107      	bne.n	80058c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d0:	d10f      	bne.n	80058f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e017      	b.n	8005936 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	3b01      	subs	r3, #1
 8005914:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4013      	ands	r3, r2
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	429a      	cmp	r2, r3
 8005932:	d19b      	bne.n	800586c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3720      	adds	r7, #32
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000000 	.word	0x20000000

08005944 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005958:	d111      	bne.n	800597e <SPI_EndRxTransaction+0x3a>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005962:	d004      	beq.n	800596e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596c:	d107      	bne.n	800597e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005986:	d117      	bne.n	80059b8 <SPI_EndRxTransaction+0x74>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005990:	d112      	bne.n	80059b8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2200      	movs	r2, #0
 800599a:	2101      	movs	r1, #1
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff ff49 	bl	8005834 <SPI_WaitFlagStateUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01a      	beq.n	80059de <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ac:	f043 0220 	orr.w	r2, r3, #32
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e013      	b.n	80059e0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2200      	movs	r2, #0
 80059c0:	2180      	movs	r1, #128	; 0x80
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f7ff ff36 	bl	8005834 <SPI_WaitFlagStateUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d007      	beq.n	80059de <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	f043 0220 	orr.w	r2, r3, #32
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e000      	b.n	80059e0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2200      	movs	r2, #0
 80059fc:	2180      	movs	r1, #128	; 0x80
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7ff ff18 	bl	8005834 <SPI_WaitFlagStateUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	f043 0220 	orr.w	r2, r3, #32
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e000      	b.n	8005a1c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e041      	b.n	8005aba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fd fe54 	bl	80036f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	4619      	mov	r1, r3
 8005a62:	4610      	mov	r0, r2
 8005a64:	f000 fc68 	bl	8006338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e041      	b.n	8005b58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f839 	bl	8005b60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2202      	movs	r2, #2
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4619      	mov	r1, r3
 8005b00:	4610      	mov	r0, r2
 8005b02:	f000 fc19 	bl	8006338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr
	...

08005b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d109      	bne.n	8005b98 <HAL_TIM_PWM_Start+0x24>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	bf14      	ite	ne
 8005b90:	2301      	movne	r3, #1
 8005b92:	2300      	moveq	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	e022      	b.n	8005bde <HAL_TIM_PWM_Start+0x6a>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d109      	bne.n	8005bb2 <HAL_TIM_PWM_Start+0x3e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	bf14      	ite	ne
 8005baa:	2301      	movne	r3, #1
 8005bac:	2300      	moveq	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	e015      	b.n	8005bde <HAL_TIM_PWM_Start+0x6a>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d109      	bne.n	8005bcc <HAL_TIM_PWM_Start+0x58>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	bf14      	ite	ne
 8005bc4:	2301      	movne	r3, #1
 8005bc6:	2300      	moveq	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	e008      	b.n	8005bde <HAL_TIM_PWM_Start+0x6a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	bf14      	ite	ne
 8005bd8:	2301      	movne	r3, #1
 8005bda:	2300      	moveq	r3, #0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e072      	b.n	8005ccc <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <HAL_TIM_PWM_Start+0x82>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf4:	e013      	b.n	8005c1e <HAL_TIM_PWM_Start+0xaa>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d104      	bne.n	8005c06 <HAL_TIM_PWM_Start+0x92>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c04:	e00b      	b.n	8005c1e <HAL_TIM_PWM_Start+0xaa>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d104      	bne.n	8005c16 <HAL_TIM_PWM_Start+0xa2>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c14:	e003      	b.n	8005c1e <HAL_TIM_PWM_Start+0xaa>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2201      	movs	r2, #1
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fe42 	bl	80068b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a28      	ldr	r2, [pc, #160]	; (8005cd4 <HAL_TIM_PWM_Start+0x160>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <HAL_TIM_PWM_Start+0xcc>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a27      	ldr	r2, [pc, #156]	; (8005cd8 <HAL_TIM_PWM_Start+0x164>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d101      	bne.n	8005c44 <HAL_TIM_PWM_Start+0xd0>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <HAL_TIM_PWM_Start+0xd2>
 8005c44:	2300      	movs	r3, #0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <HAL_TIM_PWM_Start+0x160>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_TIM_PWM_Start+0x122>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1b      	ldr	r2, [pc, #108]	; (8005cd8 <HAL_TIM_PWM_Start+0x164>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <HAL_TIM_PWM_Start+0x122>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c76:	d00e      	beq.n	8005c96 <HAL_TIM_PWM_Start+0x122>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <HAL_TIM_PWM_Start+0x168>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_TIM_PWM_Start+0x122>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a16      	ldr	r2, [pc, #88]	; (8005ce0 <HAL_TIM_PWM_Start+0x16c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_TIM_PWM_Start+0x122>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a14      	ldr	r2, [pc, #80]	; (8005ce4 <HAL_TIM_PWM_Start+0x170>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d111      	bne.n	8005cba <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b06      	cmp	r3, #6
 8005ca6:	d010      	beq.n	8005cca <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0201 	orr.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb8:	e007      	b.n	8005cca <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 0201 	orr.w	r2, r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40013400 	.word	0x40013400
 8005cdc:	40000400 	.word	0x40000400
 8005ce0:	40000800 	.word	0x40000800
 8005ce4:	40000c00 	.word	0x40000c00

08005ce8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fdd8 	bl	80068b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a2e      	ldr	r2, [pc, #184]	; (8005dc0 <HAL_TIM_PWM_Stop+0xd8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <HAL_TIM_PWM_Stop+0x2c>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a2d      	ldr	r2, [pc, #180]	; (8005dc4 <HAL_TIM_PWM_Stop+0xdc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d101      	bne.n	8005d18 <HAL_TIM_PWM_Stop+0x30>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <HAL_TIM_PWM_Stop+0x32>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d017      	beq.n	8005d4e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6a1a      	ldr	r2, [r3, #32]
 8005d24:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10f      	bne.n	8005d4e <HAL_TIM_PWM_Stop+0x66>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	f240 4344 	movw	r3, #1092	; 0x444
 8005d38:	4013      	ands	r3, r2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d107      	bne.n	8005d4e <HAL_TIM_PWM_Stop+0x66>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a1a      	ldr	r2, [r3, #32]
 8005d54:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d58:	4013      	ands	r3, r2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10f      	bne.n	8005d7e <HAL_TIM_PWM_Stop+0x96>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6a1a      	ldr	r2, [r3, #32]
 8005d64:	f240 4344 	movw	r3, #1092	; 0x444
 8005d68:	4013      	ands	r3, r2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d107      	bne.n	8005d7e <HAL_TIM_PWM_Stop+0x96>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0201 	bic.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d104      	bne.n	8005d8e <HAL_TIM_PWM_Stop+0xa6>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d8c:	e013      	b.n	8005db6 <HAL_TIM_PWM_Stop+0xce>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d104      	bne.n	8005d9e <HAL_TIM_PWM_Stop+0xb6>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d9c:	e00b      	b.n	8005db6 <HAL_TIM_PWM_Stop+0xce>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d104      	bne.n	8005dae <HAL_TIM_PWM_Stop+0xc6>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dac:	e003      	b.n	8005db6 <HAL_TIM_PWM_Stop+0xce>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40012c00 	.word	0x40012c00
 8005dc4:	40013400 	.word	0x40013400

08005dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d122      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d11b      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0202 	mvn.w	r2, #2
 8005df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fa78 	bl	8006300 <HAL_TIM_IC_CaptureCallback>
 8005e10:	e005      	b.n	8005e1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fa6b 	bl	80062ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fa7a 	bl	8006312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d122      	bne.n	8005e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d11b      	bne.n	8005e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0204 	mvn.w	r2, #4
 8005e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa4e 	bl	8006300 <HAL_TIM_IC_CaptureCallback>
 8005e64:	e005      	b.n	8005e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fa41 	bl	80062ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fa50 	bl	8006312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d122      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d11b      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0208 	mvn.w	r2, #8
 8005e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2204      	movs	r2, #4
 8005ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fa24 	bl	8006300 <HAL_TIM_IC_CaptureCallback>
 8005eb8:	e005      	b.n	8005ec6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fa17 	bl	80062ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fa26 	bl	8006312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	2b10      	cmp	r3, #16
 8005ed8:	d122      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b10      	cmp	r3, #16
 8005ee6:	d11b      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0210 	mvn.w	r2, #16
 8005ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f9fa 	bl	8006300 <HAL_TIM_IC_CaptureCallback>
 8005f0c:	e005      	b.n	8005f1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f9ed 	bl	80062ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f9fc 	bl	8006312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d10e      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d107      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0201 	mvn.w	r2, #1
 8005f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9c8 	bl	80062dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f56:	2b80      	cmp	r3, #128	; 0x80
 8005f58:	d10e      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f64:	2b80      	cmp	r3, #128	; 0x80
 8005f66:	d107      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fd35 	bl	80069e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f82:	2b40      	cmp	r3, #64	; 0x40
 8005f84:	d10e      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d107      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f9c0 	bl	8006324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d10e      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d107      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0220 	mvn.w	r2, #32
 8005fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fd00 	bl	80069d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e0ac      	b.n	800614c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b0c      	cmp	r3, #12
 8005ffe:	f200 809f 	bhi.w	8006140 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006002:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	0800603d 	.word	0x0800603d
 800600c:	08006141 	.word	0x08006141
 8006010:	08006141 	.word	0x08006141
 8006014:	08006141 	.word	0x08006141
 8006018:	0800607d 	.word	0x0800607d
 800601c:	08006141 	.word	0x08006141
 8006020:	08006141 	.word	0x08006141
 8006024:	08006141 	.word	0x08006141
 8006028:	080060bf 	.word	0x080060bf
 800602c:	08006141 	.word	0x08006141
 8006030:	08006141 	.word	0x08006141
 8006034:	08006141 	.word	0x08006141
 8006038:	080060ff 	.word	0x080060ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68b9      	ldr	r1, [r7, #8]
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f9f2 	bl	800642c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699a      	ldr	r2, [r3, #24]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0208 	orr.w	r2, r2, #8
 8006056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0204 	bic.w	r2, r2, #4
 8006066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6999      	ldr	r1, [r3, #24]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	619a      	str	r2, [r3, #24]
      break;
 800607a:	e062      	b.n	8006142 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68b9      	ldr	r1, [r7, #8]
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fa42 	bl	800650c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6999      	ldr	r1, [r3, #24]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	021a      	lsls	r2, r3, #8
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	619a      	str	r2, [r3, #24]
      break;
 80060bc:	e041      	b.n	8006142 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fa95 	bl	80065f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0208 	orr.w	r2, r2, #8
 80060d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0204 	bic.w	r2, r2, #4
 80060e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69d9      	ldr	r1, [r3, #28]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	61da      	str	r2, [r3, #28]
      break;
 80060fc:	e021      	b.n	8006142 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68b9      	ldr	r1, [r7, #8]
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fae9 	bl	80066dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69da      	ldr	r2, [r3, #28]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69d9      	ldr	r1, [r3, #28]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	021a      	lsls	r2, r3, #8
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	61da      	str	r2, [r3, #28]
      break;
 800613e:	e000      	b.n	8006142 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006140:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_TIM_ConfigClockSource+0x18>
 8006168:	2302      	movs	r3, #2
 800616a:	e0b3      	b.n	80062d4 <HAL_TIM_ConfigClockSource+0x180>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800618a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006192:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a4:	d03e      	beq.n	8006224 <HAL_TIM_ConfigClockSource+0xd0>
 80061a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061aa:	f200 8087 	bhi.w	80062bc <HAL_TIM_ConfigClockSource+0x168>
 80061ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b2:	f000 8085 	beq.w	80062c0 <HAL_TIM_ConfigClockSource+0x16c>
 80061b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ba:	d87f      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x168>
 80061bc:	2b70      	cmp	r3, #112	; 0x70
 80061be:	d01a      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0xa2>
=======
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	2300      	movs	r3, #0
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	61fb      	str	r3, [r7, #28]
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d002      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0x40>
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d003      	beq.n	8004c92 <HAL_RCC_GetSysClockFreq+0x46>
 8004c8a:	e02d      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x9c>
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c8e:	623b      	str	r3, [r7, #32]
 8004c90:	e02d      	b.n	8004cee <HAL_RCC_GetSysClockFreq+0xa2>
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	0c9b      	lsrs	r3, r3, #18
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d013      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x8c>
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	0c5b      	lsrs	r3, r3, #17
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	4a0e      	ldr	r2, [pc, #56]	; (8004d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cca:	fb02 f203 	mul.w	r2, r2, r3
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd6:	e004      	b.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x96>
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4a0b      	ldr	r2, [pc, #44]	; (8004d08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cdc:	fb02 f303 	mul.w	r3, r2, r3
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	623b      	str	r3, [r7, #32]
 8004ce6:	e002      	b.n	8004cee <HAL_RCC_GetSysClockFreq+0xa2>
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cea:	623b      	str	r3, [r7, #32]
 8004cec:	bf00      	nop
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3728      	adds	r7, #40	; 0x28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc90      	pop	{r4, r7}
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	080092f0 	.word	0x080092f0
 8004d00:	40021000 	.word	0x40021000
 8004d04:	007a1200 	.word	0x007a1200
 8004d08:	003d0900 	.word	0x003d0900

08004d0c <RCC_Delay>:
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <RCC_Delay+0x34>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a0a      	ldr	r2, [pc, #40]	; (8004d44 <RCC_Delay+0x38>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	0a5b      	lsrs	r3, r3, #9
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	bf00      	nop
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1e5a      	subs	r2, r3, #1
 8004d2e:	60fa      	str	r2, [r7, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f9      	bne.n	8004d28 <RCC_Delay+0x1c>
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr
 8004d40:	20000000 	.word	0x20000000
 8004d44:	10624dd3 	.word	0x10624dd3

08004d48 <HAL_SPI_Init>:
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_SPI_Init+0x12>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e076      	b.n	8004e48 <HAL_SPI_Init+0x100>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d108      	bne.n	8004d74 <HAL_SPI_Init+0x2c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d6a:	d009      	beq.n	8004d80 <HAL_SPI_Init+0x38>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	61da      	str	r2, [r3, #28]
 8004d72:	e005      	b.n	8004d80 <HAL_SPI_Init+0x38>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	611a      	str	r2, [r3, #16]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	615a      	str	r2, [r3, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	629a      	str	r2, [r3, #40]	; 0x28
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_SPI_Init+0x58>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fe fc68 	bl	8003670 <HAL_SPI_MspInit>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e04:	ea42 0103 	orr.w	r1, r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	0c1a      	lsrs	r2, r3, #16
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f002 0204 	and.w	r2, r2, #4
 8004e26:	605a      	str	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e36:	61da      	str	r2, [r3, #28]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004e46:	2300      	movs	r3, #0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <HAL_SPI_Transmit>:
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	80fb      	strh	r3, [r7, #6]
 8004e60:	2300      	movs	r3, #0
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_SPI_Transmit+0x22>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e126      	b.n	80050c0 <HAL_SPI_Transmit+0x270>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004e7a:	f7fe fd81 	bl	8003980 <HAL_GetTick>
 8004e7e:	61b8      	str	r0, [r7, #24]
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	82fb      	strh	r3, [r7, #22]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d002      	beq.n	8004e96 <HAL_SPI_Transmit+0x46>
 8004e90:	2302      	movs	r3, #2
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e10b      	b.n	80050ae <HAL_SPI_Transmit+0x25e>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_SPI_Transmit+0x52>
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <HAL_SPI_Transmit+0x58>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e102      	b.n	80050ae <HAL_SPI_Transmit+0x25e>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	869a      	strh	r2, [r3, #52]	; 0x34
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	88fa      	ldrh	r2, [r7, #6]
 8004ec6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	645a      	str	r2, [r3, #68]	; 0x44
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eee:	d10f      	bne.n	8004f10 <HAL_SPI_Transmit+0xc0>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	d007      	beq.n	8004f2e <HAL_SPI_Transmit+0xde>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f36:	d14b      	bne.n	8004fd0 <HAL_SPI_Transmit+0x180>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_SPI_Transmit+0xf6>
 8004f40:	8afb      	ldrh	r3, [r7, #22]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d13e      	bne.n	8004fc4 <HAL_SPI_Transmit+0x174>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	881a      	ldrh	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	1c9a      	adds	r2, r3, #2
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f6a:	e02b      	b.n	8004fc4 <HAL_SPI_Transmit+0x174>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d112      	bne.n	8004fa0 <HAL_SPI_Transmit+0x150>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	881a      	ldrh	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60da      	str	r2, [r3, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	1c9a      	adds	r2, r3, #2
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f9e:	e011      	b.n	8004fc4 <HAL_SPI_Transmit+0x174>
 8004fa0:	f7fe fcee 	bl	8003980 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d803      	bhi.n	8004fb8 <HAL_SPI_Transmit+0x168>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d102      	bne.n	8004fbe <HAL_SPI_Transmit+0x16e>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <HAL_SPI_Transmit+0x174>
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	77fb      	strb	r3, [r7, #31]
 8004fc2:	e074      	b.n	80050ae <HAL_SPI_Transmit+0x25e>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1ce      	bne.n	8004f6c <HAL_SPI_Transmit+0x11c>
 8004fce:	e04c      	b.n	800506a <HAL_SPI_Transmit+0x21a>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <HAL_SPI_Transmit+0x18e>
 8004fd8:	8afb      	ldrh	r3, [r7, #22]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d140      	bne.n	8005060 <HAL_SPI_Transmit+0x210>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	7812      	ldrb	r2, [r2, #0]
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	86da      	strh	r2, [r3, #54]	; 0x36
 8005004:	e02c      	b.n	8005060 <HAL_SPI_Transmit+0x210>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b02      	cmp	r3, #2
 8005012:	d113      	bne.n	800503c <HAL_SPI_Transmit+0x1ec>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	7812      	ldrb	r2, [r2, #0]
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	631a      	str	r2, [r3, #48]	; 0x30
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	86da      	strh	r2, [r3, #54]	; 0x36
 800503a:	e011      	b.n	8005060 <HAL_SPI_Transmit+0x210>
 800503c:	f7fe fca0 	bl	8003980 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d803      	bhi.n	8005054 <HAL_SPI_Transmit+0x204>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005052:	d102      	bne.n	800505a <HAL_SPI_Transmit+0x20a>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d102      	bne.n	8005060 <HAL_SPI_Transmit+0x210>
 800505a:	2303      	movs	r3, #3
 800505c:	77fb      	strb	r3, [r7, #31]
 800505e:	e026      	b.n	80050ae <HAL_SPI_Transmit+0x25e>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1cd      	bne.n	8005006 <HAL_SPI_Transmit+0x1b6>
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 fcbc 	bl	80059ec <SPI_EndRxTxTransaction>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <HAL_SPI_Transmit+0x230>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	655a      	str	r2, [r3, #84]	; 0x54
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <HAL_SPI_Transmit+0x24e>
 8005088:	2300      	movs	r3, #0
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_SPI_Transmit+0x25c>
 80050a6:	2301      	movs	r3, #1
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e000      	b.n	80050ae <HAL_SPI_Transmit+0x25e>
 80050ac:	bf00      	nop
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80050be:	7ffb      	ldrb	r3, [r7, #31]
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_SPI_Receive>:
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	4613      	mov	r3, r2
 80050d6:	80fb      	strh	r3, [r7, #6]
 80050d8:	2300      	movs	r3, #0
 80050da:	75fb      	strb	r3, [r7, #23]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e4:	d112      	bne.n	800510c <HAL_SPI_Receive+0x44>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10e      	bne.n	800510c <HAL_SPI_Receive+0x44>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2204      	movs	r2, #4
 80050f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80050f6:	88fa      	ldrh	r2, [r7, #6]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f8f1 	bl	80052ea <HAL_SPI_TransmitReceive>
 8005108:	4603      	mov	r3, r0
 800510a:	e0ea      	b.n	80052e2 <HAL_SPI_Receive+0x21a>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_SPI_Receive+0x52>
 8005116:	2302      	movs	r3, #2
 8005118:	e0e3      	b.n	80052e2 <HAL_SPI_Receive+0x21a>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005122:	f7fe fc2d 	bl	8003980 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b01      	cmp	r3, #1
 8005132:	d002      	beq.n	800513a <HAL_SPI_Receive+0x72>
 8005134:	2302      	movs	r3, #2
 8005136:	75fb      	strb	r3, [r7, #23]
 8005138:	e0ca      	b.n	80052d0 <HAL_SPI_Receive+0x208>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <HAL_SPI_Receive+0x7e>
 8005140:	88fb      	ldrh	r3, [r7, #6]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d102      	bne.n	800514c <HAL_SPI_Receive+0x84>
 8005146:	2301      	movs	r3, #1
 8005148:	75fb      	strb	r3, [r7, #23]
 800514a:	e0c1      	b.n	80052d0 <HAL_SPI_Receive+0x208>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2204      	movs	r2, #4
 8005150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	655a      	str	r2, [r3, #84]	; 0x54
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	639a      	str	r2, [r3, #56]	; 0x38
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	88fa      	ldrh	r2, [r7, #6]
 800516a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	631a      	str	r2, [r3, #48]	; 0x30
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	869a      	strh	r2, [r3, #52]	; 0x34
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	86da      	strh	r2, [r3, #54]	; 0x36
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	641a      	str	r2, [r3, #64]	; 0x40
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	645a      	str	r2, [r3, #68]	; 0x44
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005192:	d10f      	bne.n	80051b4 <HAL_SPI_Receive+0xec>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051be:	2b40      	cmp	r3, #64	; 0x40
 80051c0:	d007      	beq.n	80051d2 <HAL_SPI_Receive+0x10a>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d162      	bne.n	80052a0 <HAL_SPI_Receive+0x1d8>
 80051da:	e02e      	b.n	800523a <HAL_SPI_Receive+0x172>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d115      	bne.n	8005216 <HAL_SPI_Receive+0x14e>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f103 020c 	add.w	r2, r3, #12
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	7812      	ldrb	r2, [r2, #0]
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	639a      	str	r2, [r3, #56]	; 0x38
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005214:	e011      	b.n	800523a <HAL_SPI_Receive+0x172>
 8005216:	f7fe fbb3 	bl	8003980 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d803      	bhi.n	800522e <HAL_SPI_Receive+0x166>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522c:	d102      	bne.n	8005234 <HAL_SPI_Receive+0x16c>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d102      	bne.n	800523a <HAL_SPI_Receive+0x172>
 8005234:	2303      	movs	r3, #3
 8005236:	75fb      	strb	r3, [r7, #23]
 8005238:	e04a      	b.n	80052d0 <HAL_SPI_Receive+0x208>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1cb      	bne.n	80051dc <HAL_SPI_Receive+0x114>
 8005244:	e031      	b.n	80052aa <HAL_SPI_Receive+0x1e2>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b01      	cmp	r3, #1
 8005252:	d113      	bne.n	800527c <HAL_SPI_Receive+0x1b4>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	b292      	uxth	r2, r2
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	1c9a      	adds	r2, r3, #2
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	639a      	str	r2, [r3, #56]	; 0x38
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	87da      	strh	r2, [r3, #62]	; 0x3e
 800527a:	e011      	b.n	80052a0 <HAL_SPI_Receive+0x1d8>
 800527c:	f7fe fb80 	bl	8003980 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d803      	bhi.n	8005294 <HAL_SPI_Receive+0x1cc>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005292:	d102      	bne.n	800529a <HAL_SPI_Receive+0x1d2>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d102      	bne.n	80052a0 <HAL_SPI_Receive+0x1d8>
 800529a:	2303      	movs	r3, #3
 800529c:	75fb      	strb	r3, [r7, #23]
 800529e:	e017      	b.n	80052d0 <HAL_SPI_Receive+0x208>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1cd      	bne.n	8005246 <HAL_SPI_Receive+0x17e>
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	6839      	ldr	r1, [r7, #0]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fb4a 	bl	8005948 <SPI_EndRxTransaction>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_SPI_Receive+0x1f8>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	655a      	str	r2, [r3, #84]	; 0x54
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_SPI_Receive+0x206>
 80052c8:	2301      	movs	r3, #1
 80052ca:	75fb      	strb	r3, [r7, #23]
 80052cc:	e000      	b.n	80052d0 <HAL_SPI_Receive+0x208>
 80052ce:	bf00      	nop
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_SPI_TransmitReceive>:
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b08c      	sub	sp, #48	; 0x30
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	607a      	str	r2, [r7, #4]
 80052f6:	807b      	strh	r3, [r7, #2]
 80052f8:	2301      	movs	r3, #1
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052fc:	2300      	movs	r3, #0
 80052fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_SPI_TransmitReceive+0x26>
 800530c:	2302      	movs	r3, #2
 800530e:	e18a      	b.n	8005626 <HAL_SPI_TransmitReceive+0x33c>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005318:	f7fe fb32 	bl	8003980 <HAL_GetTick>
 800531c:	6278      	str	r0, [r7, #36]	; 0x24
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	61fb      	str	r3, [r7, #28]
 800532e:	887b      	ldrh	r3, [r7, #2]
 8005330:	837b      	strh	r3, [r7, #26]
 8005332:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005336:	2b01      	cmp	r3, #1
 8005338:	d00f      	beq.n	800535a <HAL_SPI_TransmitReceive+0x70>
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005340:	d107      	bne.n	8005352 <HAL_SPI_TransmitReceive+0x68>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d103      	bne.n	8005352 <HAL_SPI_TransmitReceive+0x68>
 800534a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800534e:	2b04      	cmp	r3, #4
 8005350:	d003      	beq.n	800535a <HAL_SPI_TransmitReceive+0x70>
 8005352:	2302      	movs	r3, #2
 8005354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005358:	e15b      	b.n	8005612 <HAL_SPI_TransmitReceive+0x328>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d005      	beq.n	800536c <HAL_SPI_TransmitReceive+0x82>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <HAL_SPI_TransmitReceive+0x82>
 8005366:	887b      	ldrh	r3, [r7, #2]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x8a>
 800536c:	2301      	movs	r3, #1
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005372:	e14e      	b.n	8005612 <HAL_SPI_TransmitReceive+0x328>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b04      	cmp	r3, #4
 800537e:	d003      	beq.n	8005388 <HAL_SPI_TransmitReceive+0x9e>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2205      	movs	r2, #5
 8005384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	655a      	str	r2, [r3, #84]	; 0x54
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	887a      	ldrh	r2, [r7, #2]
 8005398:	87da      	strh	r2, [r3, #62]	; 0x3e
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	887a      	ldrh	r2, [r7, #2]
 800539e:	879a      	strh	r2, [r3, #60]	; 0x3c
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	887a      	ldrh	r2, [r7, #2]
 80053aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	887a      	ldrh	r2, [r7, #2]
 80053b0:	869a      	strh	r2, [r3, #52]	; 0x34
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	645a      	str	r2, [r3, #68]	; 0x44
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d007      	beq.n	80053dc <HAL_SPI_TransmitReceive+0xf2>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e4:	d178      	bne.n	80054d8 <HAL_SPI_TransmitReceive+0x1ee>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_SPI_TransmitReceive+0x10a>
 80053ee:	8b7b      	ldrh	r3, [r7, #26]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d166      	bne.n	80054c2 <HAL_SPI_TransmitReceive+0x1d8>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	881a      	ldrh	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60da      	str	r2, [r3, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	1c9a      	adds	r2, r3, #2
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540e:	b29b      	uxth	r3, r3
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	86da      	strh	r2, [r3, #54]	; 0x36
 8005418:	e053      	b.n	80054c2 <HAL_SPI_TransmitReceive+0x1d8>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b02      	cmp	r3, #2
 8005426:	d11b      	bne.n	8005460 <HAL_SPI_TransmitReceive+0x176>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d016      	beq.n	8005460 <HAL_SPI_TransmitReceive+0x176>
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d113      	bne.n	8005460 <HAL_SPI_TransmitReceive+0x176>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	881a      	ldrh	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60da      	str	r2, [r3, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	1c9a      	adds	r2, r3, #2
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	631a      	str	r2, [r3, #48]	; 0x30
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	86da      	strh	r2, [r3, #54]	; 0x36
 800545c:	2300      	movs	r3, #0
 800545e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b01      	cmp	r3, #1
 800546c:	d119      	bne.n	80054a2 <HAL_SPI_TransmitReceive+0x1b8>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d014      	beq.n	80054a2 <HAL_SPI_TransmitReceive+0x1b8>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	b292      	uxth	r2, r2
 8005484:	801a      	strh	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	1c9a      	adds	r2, r3, #2
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	639a      	str	r2, [r3, #56]	; 0x38
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800549e:	2301      	movs	r3, #1
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054a2:	f7fe fa6d 	bl	8003980 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d807      	bhi.n	80054c2 <HAL_SPI_TransmitReceive+0x1d8>
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d003      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x1d8>
 80054ba:	2303      	movs	r3, #3
 80054bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054c0:	e0a7      	b.n	8005612 <HAL_SPI_TransmitReceive+0x328>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1a6      	bne.n	800541a <HAL_SPI_TransmitReceive+0x130>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1a1      	bne.n	800541a <HAL_SPI_TransmitReceive+0x130>
 80054d6:	e07c      	b.n	80055d2 <HAL_SPI_TransmitReceive+0x2e8>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <HAL_SPI_TransmitReceive+0x1fc>
 80054e0:	8b7b      	ldrh	r3, [r7, #26]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d16b      	bne.n	80055be <HAL_SPI_TransmitReceive+0x2d4>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	86da      	strh	r2, [r3, #54]	; 0x36
 800550c:	e057      	b.n	80055be <HAL_SPI_TransmitReceive+0x2d4>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b02      	cmp	r3, #2
 800551a:	d11c      	bne.n	8005556 <HAL_SPI_TransmitReceive+0x26c>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d017      	beq.n	8005556 <HAL_SPI_TransmitReceive+0x26c>
 8005526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d114      	bne.n	8005556 <HAL_SPI_TransmitReceive+0x26c>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	330c      	adds	r3, #12
 8005536:	7812      	ldrb	r2, [r2, #0]
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	86da      	strh	r2, [r3, #54]	; 0x36
 8005552:	2300      	movs	r3, #0
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d119      	bne.n	8005598 <HAL_SPI_TransmitReceive+0x2ae>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d014      	beq.n	8005598 <HAL_SPI_TransmitReceive+0x2ae>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005594:	2301      	movs	r3, #1
 8005596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005598:	f7fe f9f2 	bl	8003980 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d803      	bhi.n	80055b0 <HAL_SPI_TransmitReceive+0x2c6>
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	d102      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x2cc>
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d103      	bne.n	80055be <HAL_SPI_TransmitReceive+0x2d4>
 80055b6:	2303      	movs	r3, #3
 80055b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055bc:	e029      	b.n	8005612 <HAL_SPI_TransmitReceive+0x328>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1a2      	bne.n	800550e <HAL_SPI_TransmitReceive+0x224>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d19d      	bne.n	800550e <HAL_SPI_TransmitReceive+0x224>
 80055d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fa08 	bl	80059ec <SPI_EndRxTxTransaction>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d006      	beq.n	80055f0 <HAL_SPI_TransmitReceive+0x306>
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	655a      	str	r2, [r3, #84]	; 0x54
 80055ee:	e010      	b.n	8005612 <HAL_SPI_TransmitReceive+0x328>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10b      	bne.n	8005610 <HAL_SPI_TransmitReceive+0x326>
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	e000      	b.n	8005612 <HAL_SPI_TransmitReceive+0x328>
 8005610:	bf00      	nop
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005622:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005626:	4618      	mov	r0, r3
 8005628:	3730      	adds	r7, #48	; 0x30
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_SPI_IRQHandler>:
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	61bb      	str	r3, [r7, #24]
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	099b      	lsrs	r3, r3, #6
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10f      	bne.n	8005674 <HAL_SPI_IRQHandler+0x44>
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_SPI_IRQHandler+0x44>
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	099b      	lsrs	r3, r3, #6
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d004      	beq.n	8005674 <HAL_SPI_IRQHandler+0x44>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	4798      	blx	r3
 8005672:	e0be      	b.n	80057f2 <HAL_SPI_IRQHandler+0x1c2>
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	085b      	lsrs	r3, r3, #1
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_SPI_IRQHandler+0x66>
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	09db      	lsrs	r3, r3, #7
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <HAL_SPI_IRQHandler+0x66>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	4798      	blx	r3
 8005694:	e0ad      	b.n	80057f2 <HAL_SPI_IRQHandler+0x1c2>
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <HAL_SPI_IRQHandler+0x80>
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	099b      	lsrs	r3, r3, #6
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80a1 	beq.w	80057f2 <HAL_SPI_IRQHandler+0x1c2>
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 809a 	beq.w	80057f2 <HAL_SPI_IRQHandler+0x1c2>
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	099b      	lsrs	r3, r3, #6
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d023      	beq.n	8005712 <HAL_SPI_IRQHandler+0xe2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	d011      	beq.n	80056fa <HAL_SPI_IRQHandler+0xca>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	f043 0204 	orr.w	r2, r3, #4
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	655a      	str	r2, [r3, #84]	; 0x54
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	e00b      	b.n	8005712 <HAL_SPI_IRQHandler+0xe2>
 80056fa:	2300      	movs	r3, #0
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	e06f      	b.n	80057f2 <HAL_SPI_IRQHandler+0x1c2>
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d014      	beq.n	8005748 <HAL_SPI_IRQHandler+0x118>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	f043 0201 	orr.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	655a      	str	r2, [r3, #84]	; 0x54
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574c:	2b00      	cmp	r3, #0
 800574e:	d04f      	beq.n	80057f0 <HAL_SPI_IRQHandler+0x1c0>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800575e:	605a      	str	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d104      	bne.n	800577c <HAL_SPI_IRQHandler+0x14c>
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d034      	beq.n	80057e6 <HAL_SPI_IRQHandler+0x1b6>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0203 	bic.w	r2, r2, #3
 800578a:	605a      	str	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d011      	beq.n	80057b8 <HAL_SPI_IRQHandler+0x188>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005798:	4a17      	ldr	r2, [pc, #92]	; (80057f8 <HAL_SPI_IRQHandler+0x1c8>)
 800579a:	635a      	str	r2, [r3, #52]	; 0x34
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fe fa05 	bl	8003bb0 <HAL_DMA_Abort_IT>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <HAL_SPI_IRQHandler+0x188>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d016      	beq.n	80057ee <HAL_SPI_IRQHandler+0x1be>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c4:	4a0c      	ldr	r2, [pc, #48]	; (80057f8 <HAL_SPI_IRQHandler+0x1c8>)
 80057c6:	635a      	str	r2, [r3, #52]	; 0x34
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fe f9ef 	bl	8003bb0 <HAL_DMA_Abort_IT>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <HAL_SPI_IRQHandler+0x1be>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54
 80057e4:	e003      	b.n	80057ee <HAL_SPI_IRQHandler+0x1be>
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f808 	bl	80057fc <HAL_SPI_ErrorCallback>
 80057ec:	e000      	b.n	80057f0 <HAL_SPI_IRQHandler+0x1c0>
 80057ee:	bf00      	nop
 80057f0:	bf00      	nop
 80057f2:	3720      	adds	r7, #32
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	0800580f 	.word	0x0800580f

080057fc <HAL_SPI_ErrorCallback>:
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr

0800580e <SPI_DMAAbortOnError>:
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	86da      	strh	r2, [r3, #54]	; 0x36
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff ffe7 	bl	80057fc <HAL_SPI_ErrorCallback>
 800582e:	bf00      	nop
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <SPI_WaitFlagStateUntilTimeout>:
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	4613      	mov	r3, r2
 8005846:	71fb      	strb	r3, [r7, #7]
 8005848:	f7fe f89a 	bl	8003980 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	4413      	add	r3, r2
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	f7fe f892 	bl	8003980 <HAL_GetTick>
 800585c:	61b8      	str	r0, [r7, #24]
 800585e:	4b39      	ldr	r3, [pc, #228]	; (8005944 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	015b      	lsls	r3, r3, #5
 8005864:	0d1b      	lsrs	r3, r3, #20
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	fb02 f303 	mul.w	r3, r2, r3
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	e054      	b.n	800591a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005876:	d050      	beq.n	800591a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005878:	f7fe f882 	bl	8003980 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	429a      	cmp	r2, r3
 8005886:	d902      	bls.n	800588e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d13d      	bne.n	800590a <SPI_WaitFlagStateUntilTimeout+0xd2>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800589c:	605a      	str	r2, [r3, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a6:	d111      	bne.n	80058cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058b0:	d004      	beq.n	80058bc <SPI_WaitFlagStateUntilTimeout+0x84>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ba:	d107      	bne.n	80058cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d4:	d10f      	bne.n	80058f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005906:	2303      	movs	r3, #3
 8005908:	e017      	b.n	800593a <SPI_WaitFlagStateUntilTimeout+0x102>
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	3b01      	subs	r3, #1
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4013      	ands	r3, r2
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	429a      	cmp	r2, r3
 8005928:	bf0c      	ite	eq
 800592a:	2301      	moveq	r3, #1
 800592c:	2300      	movne	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	429a      	cmp	r2, r3
 8005936:	d19b      	bne.n	8005870 <SPI_WaitFlagStateUntilTimeout+0x38>
 8005938:	2300      	movs	r3, #0
 800593a:	4618      	mov	r0, r3
 800593c:	3720      	adds	r7, #32
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000000 	.word	0x20000000

08005948 <SPI_EndRxTransaction>:
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800595c:	d111      	bne.n	8005982 <SPI_EndRxTransaction+0x3a>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005966:	d004      	beq.n	8005972 <SPI_EndRxTransaction+0x2a>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005970:	d107      	bne.n	8005982 <SPI_EndRxTransaction+0x3a>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800598a:	d117      	bne.n	80059bc <SPI_EndRxTransaction+0x74>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005994:	d112      	bne.n	80059bc <SPI_EndRxTransaction+0x74>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2200      	movs	r2, #0
 800599e:	2101      	movs	r1, #1
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7ff ff49 	bl	8005838 <SPI_WaitFlagStateUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01a      	beq.n	80059e2 <SPI_EndRxTransaction+0x9a>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b0:	f043 0220 	orr.w	r2, r3, #32
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	655a      	str	r2, [r3, #84]	; 0x54
 80059b8:	2303      	movs	r3, #3
 80059ba:	e013      	b.n	80059e4 <SPI_EndRxTransaction+0x9c>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2200      	movs	r2, #0
 80059c4:	2180      	movs	r1, #128	; 0x80
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7ff ff36 	bl	8005838 <SPI_WaitFlagStateUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d007      	beq.n	80059e2 <SPI_EndRxTransaction+0x9a>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d6:	f043 0220 	orr.w	r2, r3, #32
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	655a      	str	r2, [r3, #84]	; 0x54
 80059de:	2303      	movs	r3, #3
 80059e0:	e000      	b.n	80059e4 <SPI_EndRxTransaction+0x9c>
 80059e2:	2300      	movs	r3, #0
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <SPI_EndRxTxTransaction>:
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2200      	movs	r2, #0
 8005a00:	2180      	movs	r1, #128	; 0x80
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f7ff ff18 	bl	8005838 <SPI_WaitFlagStateUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <SPI_EndRxTxTransaction+0x32>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a12:	f043 0220 	orr.w	r2, r3, #32
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	655a      	str	r2, [r3, #84]	; 0x54
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e000      	b.n	8005a20 <SPI_EndRxTxTransaction+0x34>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_TIM_Base_Init>:
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_TIM_Base_Init+0x12>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e041      	b.n	8005abe <HAL_TIM_Base_Init+0x96>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_TIM_Base_Init+0x2c>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fd fe54 	bl	80036fc <HAL_TIM_Base_MspInit>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f000 fc68 	bl	800633c <TIM_Base_SetConfig>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005abc:	2300      	movs	r3, #0
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_TIM_PWM_Init>:
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b082      	sub	sp, #8
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_TIM_PWM_Init+0x12>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e041      	b.n	8005b5c <HAL_TIM_PWM_Init+0x96>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <HAL_TIM_PWM_Init+0x2c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f839 	bl	8005b64 <HAL_TIM_PWM_MspInit>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3304      	adds	r3, #4
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f000 fc19 	bl	800633c <TIM_Base_SetConfig>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_TIM_PWM_MspInit>:
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr
	...

08005b78 <HAL_TIM_PWM_Start>:
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d109      	bne.n	8005b9c <HAL_TIM_PWM_Start+0x24>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	bf14      	ite	ne
 8005b94:	2301      	movne	r3, #1
 8005b96:	2300      	moveq	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	e022      	b.n	8005be2 <HAL_TIM_PWM_Start+0x6a>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d109      	bne.n	8005bb6 <HAL_TIM_PWM_Start+0x3e>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	bf14      	ite	ne
 8005bae:	2301      	movne	r3, #1
 8005bb0:	2300      	moveq	r3, #0
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	e015      	b.n	8005be2 <HAL_TIM_PWM_Start+0x6a>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	d109      	bne.n	8005bd0 <HAL_TIM_PWM_Start+0x58>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	bf14      	ite	ne
 8005bc8:	2301      	movne	r3, #1
 8005bca:	2300      	moveq	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	e008      	b.n	8005be2 <HAL_TIM_PWM_Start+0x6a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	bf14      	ite	ne
 8005bdc:	2301      	movne	r3, #1
 8005bde:	2300      	moveq	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_TIM_PWM_Start+0x72>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e072      	b.n	8005cd0 <HAL_TIM_PWM_Start+0x158>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_PWM_Start+0x82>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf8:	e013      	b.n	8005c22 <HAL_TIM_PWM_Start+0xaa>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_PWM_Start+0x92>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c08:	e00b      	b.n	8005c22 <HAL_TIM_PWM_Start+0xaa>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d104      	bne.n	8005c1a <HAL_TIM_PWM_Start+0xa2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c18:	e003      	b.n	8005c22 <HAL_TIM_PWM_Start+0xaa>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2201      	movs	r2, #1
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fe42 	bl	80068b4 <TIM_CCxChannelCmd>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a28      	ldr	r2, [pc, #160]	; (8005cd8 <HAL_TIM_PWM_Start+0x160>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d004      	beq.n	8005c44 <HAL_TIM_PWM_Start+0xcc>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a27      	ldr	r2, [pc, #156]	; (8005cdc <HAL_TIM_PWM_Start+0x164>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d101      	bne.n	8005c48 <HAL_TIM_PWM_Start+0xd0>
 8005c44:	2301      	movs	r3, #1
 8005c46:	e000      	b.n	8005c4a <HAL_TIM_PWM_Start+0xd2>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d007      	beq.n	8005c5e <HAL_TIM_PWM_Start+0xe6>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c5c:	645a      	str	r2, [r3, #68]	; 0x44
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1d      	ldr	r2, [pc, #116]	; (8005cd8 <HAL_TIM_PWM_Start+0x160>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d018      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x122>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a1b      	ldr	r2, [pc, #108]	; (8005cdc <HAL_TIM_PWM_Start+0x164>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x122>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7a:	d00e      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x122>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a17      	ldr	r2, [pc, #92]	; (8005ce0 <HAL_TIM_PWM_Start+0x168>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d009      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x122>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a16      	ldr	r2, [pc, #88]	; (8005ce4 <HAL_TIM_PWM_Start+0x16c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d004      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x122>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a14      	ldr	r2, [pc, #80]	; (8005ce8 <HAL_TIM_PWM_Start+0x170>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d111      	bne.n	8005cbe <HAL_TIM_PWM_Start+0x146>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b06      	cmp	r3, #6
 8005caa:	d010      	beq.n	8005cce <HAL_TIM_PWM_Start+0x156>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	e007      	b.n	8005cce <HAL_TIM_PWM_Start+0x156>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0201 	orr.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	40012c00 	.word	0x40012c00
 8005cdc:	40013400 	.word	0x40013400
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800
 8005ce8:	40000c00 	.word	0x40000c00

08005cec <HAL_TIM_PWM_Stop>:
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fdd8 	bl	80068b4 <TIM_CCxChannelCmd>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a2e      	ldr	r2, [pc, #184]	; (8005dc4 <HAL_TIM_PWM_Stop+0xd8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d004      	beq.n	8005d18 <HAL_TIM_PWM_Stop+0x2c>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a2d      	ldr	r2, [pc, #180]	; (8005dc8 <HAL_TIM_PWM_Stop+0xdc>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d101      	bne.n	8005d1c <HAL_TIM_PWM_Stop+0x30>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <HAL_TIM_PWM_Stop+0x32>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d017      	beq.n	8005d52 <HAL_TIM_PWM_Stop+0x66>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6a1a      	ldr	r2, [r3, #32]
 8005d28:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10f      	bne.n	8005d52 <HAL_TIM_PWM_Stop+0x66>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6a1a      	ldr	r2, [r3, #32]
 8005d38:	f240 4344 	movw	r3, #1092	; 0x444
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d107      	bne.n	8005d52 <HAL_TIM_PWM_Stop+0x66>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d50:	645a      	str	r2, [r3, #68]	; 0x44
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6a1a      	ldr	r2, [r3, #32]
 8005d58:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10f      	bne.n	8005d82 <HAL_TIM_PWM_Stop+0x96>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6a1a      	ldr	r2, [r3, #32]
 8005d68:	f240 4344 	movw	r3, #1092	; 0x444
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d107      	bne.n	8005d82 <HAL_TIM_PWM_Stop+0x96>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0201 	bic.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d104      	bne.n	8005d92 <HAL_TIM_PWM_Stop+0xa6>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d90:	e013      	b.n	8005dba <HAL_TIM_PWM_Stop+0xce>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d104      	bne.n	8005da2 <HAL_TIM_PWM_Stop+0xb6>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da0:	e00b      	b.n	8005dba <HAL_TIM_PWM_Stop+0xce>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d104      	bne.n	8005db2 <HAL_TIM_PWM_Stop+0xc6>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db0:	e003      	b.n	8005dba <HAL_TIM_PWM_Stop+0xce>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	40013400 	.word	0x40013400

08005dcc <HAL_TIM_IRQHandler>:
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d122      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x5c>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d11b      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x5c>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f06f 0202 	mvn.w	r2, #2
 8005df8:	611a      	str	r2, [r3, #16]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	771a      	strb	r2, [r3, #28]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_TIM_IRQHandler+0x4a>
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa78 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 8005e14:	e005      	b.n	8005e22 <HAL_TIM_IRQHandler+0x56>
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fa6b 	bl	80062f2 <HAL_TIM_OC_DelayElapsedCallback>
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fa7a 	bl	8006316 <HAL_TIM_PWM_PulseFinishedCallback>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	771a      	strb	r2, [r3, #28]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d122      	bne.n	8005e7c <HAL_TIM_IRQHandler+0xb0>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d11b      	bne.n	8005e7c <HAL_TIM_IRQHandler+0xb0>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0204 	mvn.w	r2, #4
 8005e4c:	611a      	str	r2, [r3, #16]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	771a      	strb	r2, [r3, #28]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_TIM_IRQHandler+0x9e>
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fa4e 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 8005e68:	e005      	b.n	8005e76 <HAL_TIM_IRQHandler+0xaa>
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fa41 	bl	80062f2 <HAL_TIM_OC_DelayElapsedCallback>
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fa50 	bl	8006316 <HAL_TIM_PWM_PulseFinishedCallback>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	771a      	strb	r2, [r3, #28]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0308 	and.w	r3, r3, #8
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	d122      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x104>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d11b      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x104>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0208 	mvn.w	r2, #8
 8005ea0:	611a      	str	r2, [r3, #16]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	771a      	strb	r2, [r3, #28]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_TIM_IRQHandler+0xf2>
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fa24 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 8005ebc:	e005      	b.n	8005eca <HAL_TIM_IRQHandler+0xfe>
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fa17 	bl	80062f2 <HAL_TIM_OC_DelayElapsedCallback>
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fa26 	bl	8006316 <HAL_TIM_PWM_PulseFinishedCallback>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	771a      	strb	r2, [r3, #28]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	2b10      	cmp	r3, #16
 8005edc:	d122      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x158>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2b10      	cmp	r3, #16
 8005eea:	d11b      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x158>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0210 	mvn.w	r2, #16
 8005ef4:	611a      	str	r2, [r3, #16]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2208      	movs	r2, #8
 8005efa:	771a      	strb	r2, [r3, #28]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_TIM_IRQHandler+0x146>
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f9fa 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 8005f10:	e005      	b.n	8005f1e <HAL_TIM_IRQHandler+0x152>
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f9ed 	bl	80062f2 <HAL_TIM_OC_DelayElapsedCallback>
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f9fc 	bl	8006316 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	771a      	strb	r2, [r3, #28]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d10e      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x184>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d107      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x184>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0201 	mvn.w	r2, #1
 8005f48:	611a      	str	r2, [r3, #16]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f9c8 	bl	80062e0 <HAL_TIM_PeriodElapsedCallback>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5a:	2b80      	cmp	r3, #128	; 0x80
 8005f5c:	d10e      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x1b0>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f68:	2b80      	cmp	r3, #128	; 0x80
 8005f6a:	d107      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x1b0>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f74:	611a      	str	r2, [r3, #16]
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fd35 	bl	80069e6 <HAL_TIMEx_BreakCallback>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f86:	2b40      	cmp	r3, #64	; 0x40
 8005f88:	d10e      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x1dc>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d107      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x1dc>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fa0:	611a      	str	r2, [r3, #16]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9c0 	bl	8006328 <HAL_TIM_TriggerCallback>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d10e      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x208>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0320 	and.w	r3, r3, #32
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d107      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x208>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0220 	mvn.w	r2, #32
 8005fcc:	611a      	str	r2, [r3, #16]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fd00 	bl	80069d4 <HAL_TIMEx_CommutCallback>
 8005fd4:	bf00      	nop
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_TIM_PWM_ConfigChannel>:
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e0ac      	b.n	8006150 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b0c      	cmp	r3, #12
 8006002:	f200 809f 	bhi.w	8006144 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	08006041 	.word	0x08006041
 8006010:	08006145 	.word	0x08006145
 8006014:	08006145 	.word	0x08006145
 8006018:	08006145 	.word	0x08006145
 800601c:	08006081 	.word	0x08006081
 8006020:	08006145 	.word	0x08006145
 8006024:	08006145 	.word	0x08006145
 8006028:	08006145 	.word	0x08006145
 800602c:	080060c3 	.word	0x080060c3
 8006030:	08006145 	.word	0x08006145
 8006034:	08006145 	.word	0x08006145
 8006038:	08006145 	.word	0x08006145
 800603c:	08006103 	.word	0x08006103
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	4618      	mov	r0, r3
 8006048:	f000 f9f2 	bl	8006430 <TIM_OC1_SetConfig>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0208 	orr.w	r2, r2, #8
 800605a:	619a      	str	r2, [r3, #24]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0204 	bic.w	r2, r2, #4
 800606a:	619a      	str	r2, [r3, #24]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6999      	ldr	r1, [r3, #24]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	691a      	ldr	r2, [r3, #16]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	619a      	str	r2, [r3, #24]
 800607e:	e062      	b.n	8006146 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fa42 	bl	8006510 <TIM_OC2_SetConfig>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800609a:	619a      	str	r2, [r3, #24]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060aa:	619a      	str	r2, [r3, #24]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6999      	ldr	r1, [r3, #24]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	021a      	lsls	r2, r3, #8
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	619a      	str	r2, [r3, #24]
 80060c0:	e041      	b.n	8006146 <HAL_TIM_PWM_ConfigChannel+0x16a>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68b9      	ldr	r1, [r7, #8]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fa95 	bl	80065f8 <TIM_OC3_SetConfig>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69da      	ldr	r2, [r3, #28]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0208 	orr.w	r2, r2, #8
 80060dc:	61da      	str	r2, [r3, #28]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69da      	ldr	r2, [r3, #28]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0204 	bic.w	r2, r2, #4
 80060ec:	61da      	str	r2, [r3, #28]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69d9      	ldr	r1, [r3, #28]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	61da      	str	r2, [r3, #28]
 8006100:	e021      	b.n	8006146 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	4618      	mov	r0, r3
 800610a:	f000 fae9 	bl	80066e0 <TIM_OC4_SetConfig>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800611c:	61da      	str	r2, [r3, #28]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69da      	ldr	r2, [r3, #28]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612c:	61da      	str	r2, [r3, #28]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69d9      	ldr	r1, [r3, #28]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	021a      	lsls	r2, r3, #8
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	61da      	str	r2, [r3, #28]
 8006142:	e000      	b.n	8006146 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8006144:	bf00      	nop
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800614e:	2300      	movs	r3, #0
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_TIM_ConfigClockSource>:
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_TIM_ConfigClockSource+0x18>
 800616c:	2302      	movs	r3, #2
 800616e:	e0b3      	b.n	80062d8 <HAL_TIM_ConfigClockSource+0x180>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	609a      	str	r2, [r3, #8]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a8:	d03e      	beq.n	8006228 <HAL_TIM_ConfigClockSource+0xd0>
 80061aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ae:	f200 8087 	bhi.w	80062c0 <HAL_TIM_ConfigClockSource+0x168>
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b6:	f000 8085 	beq.w	80062c4 <HAL_TIM_ConfigClockSource+0x16c>
 80061ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061be:	d87f      	bhi.n	80062c0 <HAL_TIM_ConfigClockSource+0x168>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80061c0:	2b70      	cmp	r3, #112	; 0x70
 80061c2:	d87b      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x168>
 80061c4:	2b60      	cmp	r3, #96	; 0x60
 80061c6:	d050      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x116>
 80061c8:	2b60      	cmp	r3, #96	; 0x60
 80061ca:	d877      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x168>
 80061cc:	2b50      	cmp	r3, #80	; 0x50
 80061ce:	d03c      	beq.n	800624a <HAL_TIM_ConfigClockSource+0xf6>
 80061d0:	2b50      	cmp	r3, #80	; 0x50
 80061d2:	d873      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x168>
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	d058      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x136>
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d86f      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x168>
 80061dc:	2b30      	cmp	r3, #48	; 0x30
 80061de:	d064      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x156>
 80061e0:	2b30      	cmp	r3, #48	; 0x30
 80061e2:	d86b      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x168>
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d060      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x156>
 80061e8:	2b20      	cmp	r3, #32
<<<<<<< HEAD
 80061ea:	d867      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x168>
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d05c      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x156>
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d05a      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80061f4:	e062      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6899      	ldr	r1, [r3, #8]
=======
 80061ea:	d060      	beq.n	80062ae <HAL_TIM_ConfigClockSource+0x156>
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	d867      	bhi.n	80062c0 <HAL_TIM_ConfigClockSource+0x168>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d05c      	beq.n	80062ae <HAL_TIM_ConfigClockSource+0x156>
 80061f4:	2b10      	cmp	r3, #16
 80061f6:	d05a      	beq.n	80062ae <HAL_TIM_ConfigClockSource+0x156>
 80061f8:	e062      	b.n	80062c0 <HAL_TIM_ConfigClockSource+0x168>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
<<<<<<< HEAD
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f000 fb34 	bl	8006872 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006218:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	609a      	str	r2, [r3, #8]
      break;
 8006222:	e04e      	b.n	80062c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	6899      	ldr	r1, [r3, #8]
=======
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f000 fb34 	bl	8006876 <TIM_ETR_SetConfig>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	609a      	str	r2, [r3, #8]
 8006226:	e04e      	b.n	80062c6 <HAL_TIM_ConfigClockSource+0x16e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6818      	ldr	r0, [r3, #0]
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
<<<<<<< HEAD
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f000 fb1d 	bl	8006872 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006246:	609a      	str	r2, [r3, #8]
      break;
 8006248:	e03b      	b.n	80062c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6859      	ldr	r1, [r3, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	461a      	mov	r2, r3
 8006258:	f000 fa94 	bl	8006784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2150      	movs	r1, #80	; 0x50
 8006262:	4618      	mov	r0, r3
 8006264:	f000 faeb 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 8006268:	e02b      	b.n	80062c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6859      	ldr	r1, [r3, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	461a      	mov	r2, r3
 8006278:	f000 fab2 	bl	80067e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2160      	movs	r1, #96	; 0x60
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fadb 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 8006288:	e01b      	b.n	80062c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6859      	ldr	r1, [r3, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	461a      	mov	r2, r3
 8006298:	f000 fa74 	bl	8006784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2140      	movs	r1, #64	; 0x40
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 facb 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 80062a8:	e00b      	b.n	80062c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4619      	mov	r1, r3
 80062b4:	4610      	mov	r0, r2
 80062b6:	f000 fac2 	bl	800683e <TIM_ITRx_SetConfig>
        break;
 80062ba:	e002      	b.n	80062c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80062bc:	bf00      	nop
 80062be:	e000      	b.n	80062c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80062c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr

080062ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	4770      	bx	lr

08006300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	bc80      	pop	{r7}
 8006310:	4770      	bx	lr

08006312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr

08006324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr
	...

08006338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a33      	ldr	r2, [pc, #204]	; (8006418 <TIM_Base_SetConfig+0xe0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d013      	beq.n	8006378 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a32      	ldr	r2, [pc, #200]	; (800641c <TIM_Base_SetConfig+0xe4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00f      	beq.n	8006378 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635e:	d00b      	beq.n	8006378 <TIM_Base_SetConfig+0x40>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a2f      	ldr	r2, [pc, #188]	; (8006420 <TIM_Base_SetConfig+0xe8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d007      	beq.n	8006378 <TIM_Base_SetConfig+0x40>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a2e      	ldr	r2, [pc, #184]	; (8006424 <TIM_Base_SetConfig+0xec>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d003      	beq.n	8006378 <TIM_Base_SetConfig+0x40>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a2d      	ldr	r2, [pc, #180]	; (8006428 <TIM_Base_SetConfig+0xf0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d108      	bne.n	800638a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a22      	ldr	r2, [pc, #136]	; (8006418 <TIM_Base_SetConfig+0xe0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d013      	beq.n	80063ba <TIM_Base_SetConfig+0x82>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a21      	ldr	r2, [pc, #132]	; (800641c <TIM_Base_SetConfig+0xe4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00f      	beq.n	80063ba <TIM_Base_SetConfig+0x82>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a0:	d00b      	beq.n	80063ba <TIM_Base_SetConfig+0x82>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a1e      	ldr	r2, [pc, #120]	; (8006420 <TIM_Base_SetConfig+0xe8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d007      	beq.n	80063ba <TIM_Base_SetConfig+0x82>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <TIM_Base_SetConfig+0xec>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d003      	beq.n	80063ba <TIM_Base_SetConfig+0x82>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a1c      	ldr	r2, [pc, #112]	; (8006428 <TIM_Base_SetConfig+0xf0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d108      	bne.n	80063cc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a09      	ldr	r2, [pc, #36]	; (8006418 <TIM_Base_SetConfig+0xe0>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_Base_SetConfig+0xc8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a08      	ldr	r2, [pc, #32]	; (800641c <TIM_Base_SetConfig+0xe4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d103      	bne.n	8006408 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	615a      	str	r2, [r3, #20]
}
 800640e:	bf00      	nop
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr
 8006418:	40012c00 	.word	0x40012c00
 800641c:	40013400 	.word	0x40013400
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40000c00 	.word	0x40000c00

0800642c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	f023 0201 	bic.w	r2, r3, #1
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0303 	bic.w	r3, r3, #3
 8006462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f023 0302 	bic.w	r3, r3, #2
 8006474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	4313      	orrs	r3, r2
 800647e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a20      	ldr	r2, [pc, #128]	; (8006504 <TIM_OC1_SetConfig+0xd8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d003      	beq.n	8006490 <TIM_OC1_SetConfig+0x64>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a1f      	ldr	r2, [pc, #124]	; (8006508 <TIM_OC1_SetConfig+0xdc>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d10c      	bne.n	80064aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f023 0308 	bic.w	r3, r3, #8
 8006496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f023 0304 	bic.w	r3, r3, #4
 80064a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a15      	ldr	r2, [pc, #84]	; (8006504 <TIM_OC1_SetConfig+0xd8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d003      	beq.n	80064ba <TIM_OC1_SetConfig+0x8e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a14      	ldr	r2, [pc, #80]	; (8006508 <TIM_OC1_SetConfig+0xdc>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d111      	bne.n	80064de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	621a      	str	r2, [r3, #32]
}
 80064f8:	bf00      	nop
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40012c00 	.word	0x40012c00
 8006508:	40013400 	.word	0x40013400

0800650c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f023 0210 	bic.w	r2, r3, #16
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	021b      	lsls	r3, r3, #8
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	4313      	orrs	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f023 0320 	bic.w	r3, r3, #32
 8006556:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a21      	ldr	r2, [pc, #132]	; (80065ec <TIM_OC2_SetConfig+0xe0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d003      	beq.n	8006574 <TIM_OC2_SetConfig+0x68>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a20      	ldr	r2, [pc, #128]	; (80065f0 <TIM_OC2_SetConfig+0xe4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d10d      	bne.n	8006590 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800657a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800658e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a16      	ldr	r2, [pc, #88]	; (80065ec <TIM_OC2_SetConfig+0xe0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC2_SetConfig+0x94>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a15      	ldr	r2, [pc, #84]	; (80065f0 <TIM_OC2_SetConfig+0xe4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d113      	bne.n	80065c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	621a      	str	r2, [r3, #32]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc80      	pop	{r7}
 80065ea:	4770      	bx	lr
 80065ec:	40012c00 	.word	0x40012c00
 80065f0:	40013400 	.word	0x40013400

080065f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0303 	bic.w	r3, r3, #3
 800662a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800663c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a21      	ldr	r2, [pc, #132]	; (80066d4 <TIM_OC3_SetConfig+0xe0>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d003      	beq.n	800665a <TIM_OC3_SetConfig+0x66>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a20      	ldr	r2, [pc, #128]	; (80066d8 <TIM_OC3_SetConfig+0xe4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d10d      	bne.n	8006676 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a16      	ldr	r2, [pc, #88]	; (80066d4 <TIM_OC3_SetConfig+0xe0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d003      	beq.n	8006686 <TIM_OC3_SetConfig+0x92>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <TIM_OC3_SetConfig+0xe4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d113      	bne.n	80066ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800668c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40013400 	.word	0x40013400

080066dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	021b      	lsls	r3, r3, #8
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	031b      	lsls	r3, r3, #12
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a11      	ldr	r2, [pc, #68]	; (800677c <TIM_OC4_SetConfig+0xa0>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d003      	beq.n	8006744 <TIM_OC4_SetConfig+0x68>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a10      	ldr	r2, [pc, #64]	; (8006780 <TIM_OC4_SetConfig+0xa4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d109      	bne.n	8006758 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800674a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	019b      	lsls	r3, r3, #6
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	bc80      	pop	{r7}
 800677a:	4770      	bx	lr
 800677c:	40012c00 	.word	0x40012c00
 8006780:	40013400 	.word	0x40013400

08006784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f023 0201 	bic.w	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f023 030a 	bic.w	r3, r3, #10
 80067c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr

080067e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	f023 0210 	bic.w	r2, r3, #16
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800680a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	031b      	lsls	r3, r3, #12
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800681c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	621a      	str	r2, [r3, #32]
}
 8006834:	bf00      	nop
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr

0800683e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4313      	orrs	r3, r2
 800685c:	f043 0307 	orr.w	r3, r3, #7
 8006860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	609a      	str	r2, [r3, #8]
}
 8006868:	bf00      	nop
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	bc80      	pop	{r7}
 8006870:	4770      	bx	lr

08006872 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006872:	b480      	push	{r7}
 8006874:	b087      	sub	sp, #28
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	607a      	str	r2, [r7, #4]
 800687e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800688c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	021a      	lsls	r2, r3, #8
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	431a      	orrs	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4313      	orrs	r3, r2
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	609a      	str	r2, [r3, #8]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr

080068b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2201      	movs	r2, #1
 80068c4:	fa02 f303 	lsl.w	r3, r2, r3
 80068c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a1a      	ldr	r2, [r3, #32]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	43db      	mvns	r3, r3
 80068d2:	401a      	ands	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a1a      	ldr	r2, [r3, #32]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f003 031f 	and.w	r3, r3, #31
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	fa01 f303 	lsl.w	r3, r1, r3
 80068e8:	431a      	orrs	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	621a      	str	r2, [r3, #32]
}
 80068ee:	bf00      	nop
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800690c:	2302      	movs	r3, #2
 800690e:	e050      	b.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1b      	ldr	r2, [pc, #108]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d018      	beq.n	8006986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a19      	ldr	r2, [pc, #100]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d013      	beq.n	8006986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006966:	d00e      	beq.n	8006986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a15      	ldr	r2, [pc, #84]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d009      	beq.n	8006986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d004      	beq.n	8006986 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a12      	ldr	r2, [pc, #72]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d10c      	bne.n	80069a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800698c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	4313      	orrs	r3, r2
 8006996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr
 80069bc:	40012c00 	.word	0x40012c00
 80069c0:	40013400 	.word	0x40013400
 80069c4:	40000400 	.word	0x40000400
 80069c8:	40000800 	.word	0x40000800
 80069cc:	40000c00 	.word	0x40000c00

080069d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	bc80      	pop	{r7}
 80069e0:	4770      	bx	lr

080069e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr

080069f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069fa:	f3ef 8305 	mrs	r3, IPSR
 80069fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10f      	bne.n	8006a26 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a06:	f3ef 8310 	mrs	r3, PRIMASK
 8006a0a:	607b      	str	r3, [r7, #4]
  return(result);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d109      	bne.n	8006a26 <osKernelInitialize+0x32>
 8006a12:	4b10      	ldr	r3, [pc, #64]	; (8006a54 <osKernelInitialize+0x60>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d109      	bne.n	8006a2e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006a26:	f06f 0305 	mvn.w	r3, #5
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	e00c      	b.n	8006a48 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a2e:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <osKernelInitialize+0x60>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d105      	bne.n	8006a42 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006a36:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <osKernelInitialize+0x60>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	e002      	b.n	8006a48 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006a42:	f04f 33ff 	mov.w	r3, #4294967295
 8006a46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a48:	68fb      	ldr	r3, [r7, #12]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bc80      	pop	{r7}
 8006a52:	4770      	bx	lr
 8006a54:	20000034 	.word	0x20000034

08006a58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a5e:	f3ef 8305 	mrs	r3, IPSR
 8006a62:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10f      	bne.n	8006a8a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a6e:	607b      	str	r3, [r7, #4]
  return(result);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <osKernelStart+0x32>
 8006a76:	4b11      	ldr	r3, [pc, #68]	; (8006abc <osKernelStart+0x64>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d109      	bne.n	8006a92 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a82:	603b      	str	r3, [r7, #0]
  return(result);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006a8a:	f06f 0305 	mvn.w	r3, #5
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	e00e      	b.n	8006ab0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <osKernelStart+0x64>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d107      	bne.n	8006aaa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006a9a:	4b08      	ldr	r3, [pc, #32]	; (8006abc <osKernelStart+0x64>)
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006aa0:	f001 f8e6 	bl	8007c70 <vTaskStartScheduler>
      stat = osOK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	e002      	b.n	8006ab0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8006aae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000034 	.word	0x20000034

08006ac0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b092      	sub	sp, #72	; 0x48
 8006ac4:	af04      	add	r7, sp, #16
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ad0:	f3ef 8305 	mrs	r3, IPSR
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f040 8094 	bne.w	8006c06 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ade:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae2:	623b      	str	r3, [r7, #32]
  return(result);
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f040 808d 	bne.w	8006c06 <osThreadNew+0x146>
 8006aec:	4b48      	ldr	r3, [pc, #288]	; (8006c10 <osThreadNew+0x150>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d106      	bne.n	8006b02 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006af4:	f3ef 8311 	mrs	r3, BASEPRI
 8006af8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f040 8082 	bne.w	8006c06 <osThreadNew+0x146>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d07e      	beq.n	8006c06 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006b08:	2380      	movs	r3, #128	; 0x80
 8006b0a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006b0c:	2318      	movs	r3, #24
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006b10:	2300      	movs	r3, #0
 8006b12:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006b14:	f107 031b 	add.w	r3, r7, #27
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d045      	beq.n	8006bb2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d002      	beq.n	8006b34 <osThreadNew+0x74>
        name = attr->name;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <osThreadNew+0x9a>
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	2b38      	cmp	r3, #56	; 0x38
 8006b4c:	d805      	bhi.n	8006b5a <osThreadNew+0x9a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <osThreadNew+0x9e>
        return (NULL);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e054      	b.n	8006c08 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	089b      	lsrs	r3, r3, #2
 8006b6c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00e      	beq.n	8006b94 <osThreadNew+0xd4>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	2b5b      	cmp	r3, #91	; 0x5b
 8006b7c:	d90a      	bls.n	8006b94 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d006      	beq.n	8006b94 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <osThreadNew+0xd4>
        mem = 1;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b92:	e010      	b.n	8006bb6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10c      	bne.n	8006bb6 <osThreadNew+0xf6>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d108      	bne.n	8006bb6 <osThreadNew+0xf6>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <osThreadNew+0xf6>
          mem = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb0:	e001      	b.n	8006bb6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d110      	bne.n	8006bde <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bc4:	9202      	str	r2, [sp, #8]
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 fecc 	bl	8007970 <xTaskCreateStatic>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	617b      	str	r3, [r7, #20]
 8006bdc:	e013      	b.n	8006c06 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d110      	bne.n	8006c06 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	f107 0314 	add.w	r3, r7, #20
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 feea 	bl	80079d0 <xTaskCreate>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d001      	beq.n	8006c06 <osThreadNew+0x146>
          hTask = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c06:	697b      	ldr	r3, [r7, #20]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3738      	adds	r7, #56	; 0x38
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000034 	.word	0x20000034

08006c14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4a06      	ldr	r2, [pc, #24]	; (8006c3c <vApplicationGetIdleTaskMemory+0x28>)
 8006c24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	4a05      	ldr	r2, [pc, #20]	; (8006c40 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2280      	movs	r2, #128	; 0x80
 8006c30:	601a      	str	r2, [r3, #0]
}
 8006c32:	bf00      	nop
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr
 8006c3c:	20000038 	.word	0x20000038
 8006c40:	20000094 	.word	0x20000094

08006c44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a07      	ldr	r2, [pc, #28]	; (8006c70 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	4a06      	ldr	r2, [pc, #24]	; (8006c74 <vApplicationGetTimerTaskMemory+0x30>)
 8006c5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c62:	601a      	str	r2, [r3, #0]
}
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	20000294 	.word	0x20000294
 8006c74:	200002f0 	.word	0x200002f0

08006c78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f103 0208 	add.w	r2, r3, #8
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f103 0208 	add.w	r2, r3, #8
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f103 0208 	add.w	r2, r3, #8
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr

08006cb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr

08006cce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	601a      	str	r2, [r3, #0]
}
 8006d0a:	bf00      	nop
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2a:	d103      	bne.n	8006d34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	e00c      	b.n	8006d4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3308      	adds	r3, #8
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	e002      	b.n	8006d42 <vListInsert+0x2e>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d2f6      	bcs.n	8006d3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	601a      	str	r2, [r3, #0]
}
 8006d7a:	bf00      	nop
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bc80      	pop	{r7}
 8006d82:	4770      	bx	lr

08006d84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6892      	ldr	r2, [r2, #8]
 8006d9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6852      	ldr	r2, [r2, #4]
 8006da4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d103      	bne.n	8006db8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	1e5a      	subs	r2, r3, #1
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr
	...

08006dd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8006de6:	f001 ffdf 	bl	8008da8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df2:	68f9      	ldr	r1, [r7, #12]
 8006df4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006df6:	fb01 f303 	mul.w	r3, r1, r3
 8006dfa:	441a      	add	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e16:	3b01      	subs	r3, #1
 8006e18:	68f9      	ldr	r1, [r7, #12]
 8006e1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e1c:	fb01 f303 	mul.w	r3, r1, r3
 8006e20:	441a      	add	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	22ff      	movs	r2, #255	; 0xff
 8006e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	22ff      	movs	r2, #255	; 0xff
 8006e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d114      	bne.n	8006e66 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01a      	beq.n	8006e7a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3310      	adds	r3, #16
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 f943 	bl	80080d4 <xTaskRemoveFromEventList>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d012      	beq.n	8006e7a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e54:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <xQueueGenericReset+0xb0>)
 8006e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	e009      	b.n	8006e7a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3310      	adds	r3, #16
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff ff04 	bl	8006c78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3324      	adds	r3, #36	; 0x24
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff feff 	bl	8006c78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e7a:	f001 ffaf 	bl	8008ddc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e7e:	2301      	movs	r3, #1
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00d      	beq.n	8006ec0 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006eac:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	68b9      	ldr	r1, [r7, #8]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 f835 	bl	8006f2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006ec0:	697b      	ldr	r3, [r7, #20]
	}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b08a      	sub	sp, #40	; 0x28
 8006ece:	af02      	add	r7, sp, #8
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d102      	bne.n	8006ee4 <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
 8006ee2:	e004      	b.n	8006eee <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	fb02 f303 	mul.w	r3, r2, r3
 8006eec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	3350      	adds	r3, #80	; 0x50
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 fff4 	bl	8008ee0 <pvPortMalloc>
 8006ef8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00f      	beq.n	8006f20 <xQueueGenericCreate+0x56>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	3350      	adds	r3, #80	; 0x50
 8006f04:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f0e:	79fa      	ldrb	r2, [r7, #7]
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	4613      	mov	r3, r2
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 f805 	bl	8006f2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006f20:	69bb      	ldr	r3, [r7, #24]
	}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3720      	adds	r7, #32
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d103      	bne.n	8006f46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	e002      	b.n	8006f4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f58:	2101      	movs	r1, #1
 8006f5a:	69b8      	ldr	r0, [r7, #24]
 8006f5c:	f7ff ff3c 	bl	8006dd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	78fa      	ldrb	r2, [r7, #3]
 8006f64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff ffa3 	bl	8006eca <xQueueGenericCreate>
 8006f84:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006f92:	68fb      	ldr	r3, [r7, #12]
	}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	; 0x28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006faa:	2300      	movs	r3, #0
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fb2:	f001 fef9 	bl	8008da8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d302      	bcc.n	8006fc8 <xQueueGenericSend+0x2c>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d129      	bne.n	800701c <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	6a38      	ldr	r0, [r7, #32]
 8006fce:	f000 fb62 	bl	8007696 <prvCopyDataToQueue>
 8006fd2:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d010      	beq.n	8006ffe <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	3324      	adds	r3, #36	; 0x24
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f001 f877 	bl	80080d4 <xTaskRemoveFromEventList>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d013      	beq.n	8007014 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006fec:	4b3f      	ldr	r3, [pc, #252]	; (80070ec <xQueueGenericSend+0x150>)
 8006fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	e00a      	b.n	8007014 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007004:	4b39      	ldr	r3, [pc, #228]	; (80070ec <xQueueGenericSend+0x150>)
 8007006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007014:	f001 fee2 	bl	8008ddc <vPortExitCritical>
				return pdPASS;
 8007018:	2301      	movs	r3, #1
 800701a:	e063      	b.n	80070e4 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d103      	bne.n	800702a <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007022:	f001 fedb 	bl	8008ddc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007026:	2300      	movs	r3, #0
 8007028:	e05c      	b.n	80070e4 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007030:	f107 0314 	add.w	r3, r7, #20
 8007034:	4618      	mov	r0, r3
 8007036:	f001 f8a3 	bl	8008180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800703a:	2301      	movs	r3, #1
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800703e:	f001 fecd 	bl	8008ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007042:	f000 fe6d 	bl	8007d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007046:	f001 feaf 	bl	8008da8 <vPortEnterCritical>
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007050:	b25b      	sxtb	r3, r3
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007056:	d103      	bne.n	8007060 <xQueueGenericSend+0xc4>
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007066:	b25b      	sxtb	r3, r3
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d103      	bne.n	8007076 <xQueueGenericSend+0xda>
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007076:	f001 feb1 	bl	8008ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800707a:	1d3a      	adds	r2, r7, #4
 800707c:	f107 0314 	add.w	r3, r7, #20
 8007080:	4611      	mov	r1, r2
 8007082:	4618      	mov	r0, r3
 8007084:	f001 f892 	bl	80081ac <xTaskCheckForTimeOut>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d124      	bne.n	80070d8 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800708e:	6a38      	ldr	r0, [r7, #32]
 8007090:	f000 fbf9 	bl	8007886 <prvIsQueueFull>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d018      	beq.n	80070cc <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	3310      	adds	r3, #16
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	4611      	mov	r1, r2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 ffe2 	bl	800806c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070a8:	6a38      	ldr	r0, [r7, #32]
 80070aa:	f000 fb84 	bl	80077b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80070ae:	f000 fe45 	bl	8007d3c <xTaskResumeAll>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f47f af7c 	bne.w	8006fb2 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 80070ba:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <xQueueGenericSend+0x150>)
 80070bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	e772      	b.n	8006fb2 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80070cc:	6a38      	ldr	r0, [r7, #32]
 80070ce:	f000 fb72 	bl	80077b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070d2:	f000 fe33 	bl	8007d3c <xTaskResumeAll>
 80070d6:	e76c      	b.n	8006fb2 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80070d8:	6a38      	ldr	r0, [r7, #32]
 80070da:	f000 fb6c 	bl	80077b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070de:	f000 fe2d 	bl	8007d3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80070e2:	2300      	movs	r3, #0
		}
	}
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3728      	adds	r7, #40	; 0x28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	e000ed04 	.word	0xe000ed04

080070f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08c      	sub	sp, #48	; 0x30
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007102:	f3ef 8211 	mrs	r2, BASEPRI
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	61fa      	str	r2, [r7, #28]
 8007118:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800711a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	429a      	cmp	r2, r3
 8007128:	d302      	bcc.n	8007130 <xQueueGenericSendFromISR+0x40>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d12c      	bne.n	800718a <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007140:	f000 faa9 	bl	8007696 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007144:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714c:	d112      	bne.n	8007174 <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	2b00      	cmp	r3, #0
 8007154:	d016      	beq.n	8007184 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007158:	3324      	adds	r3, #36	; 0x24
 800715a:	4618      	mov	r0, r3
 800715c:	f000 ffba 	bl	80080d4 <xTaskRemoveFromEventList>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00e      	beq.n	8007184 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00b      	beq.n	8007184 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	e007      	b.n	8007184 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007178:	3301      	adds	r3, #1
 800717a:	b2db      	uxtb	r3, r3
 800717c:	b25a      	sxtb	r2, r3
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007184:	2301      	movs	r3, #1
 8007186:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 8007188:	e001      	b.n	800718e <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800718a:	2300      	movs	r3, #0
 800718c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007198:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800719c:	4618      	mov	r0, r3
 800719e:	3730      	adds	r7, #48	; 0x30
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	; 0x28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	623b      	str	r3, [r7, #32]
	__asm volatile
 80071b2:	f3ef 8211 	mrs	r2, BASEPRI
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	613a      	str	r2, [r7, #16]
 80071c8:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 80071ca:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071cc:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d2:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d229      	bcs.n	8007232 <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071e4:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80071ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f6:	d112      	bne.n	800721e <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d015      	beq.n	800722c <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	3324      	adds	r3, #36	; 0x24
 8007204:	4618      	mov	r0, r3
 8007206:	f000 ff65 	bl	80080d4 <xTaskRemoveFromEventList>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00d      	beq.n	800722c <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2201      	movs	r2, #1
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	e006      	b.n	800722c <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	3301      	adds	r3, #1
 8007222:	b2db      	uxtb	r3, r3
 8007224:	b25a      	sxtb	r2, r3
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800722c:	2301      	movs	r3, #1
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
 8007230:	e001      	b.n	8007236 <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007232:	2300      	movs	r3, #0
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f383 8811 	msr	BASEPRI, r3
}
 8007240:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007244:	4618      	mov	r0, r3
 8007246:	3728      	adds	r7, #40	; 0x28
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	; 0x28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007258:	2300      	movs	r3, #0
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007260:	f001 fda2 	bl	8008da8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01f      	beq.n	80072b0 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	6a38      	ldr	r0, [r7, #32]
 8007274:	f000 fa79 	bl	800776a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	1e5a      	subs	r2, r3, #1
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00f      	beq.n	80072a8 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	3310      	adds	r3, #16
 800728c:	4618      	mov	r0, r3
 800728e:	f000 ff21 	bl	80080d4 <xTaskRemoveFromEventList>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d007      	beq.n	80072a8 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007298:	4b3c      	ldr	r3, [pc, #240]	; (800738c <xQueueReceive+0x140>)
 800729a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072a8:	f001 fd98 	bl	8008ddc <vPortExitCritical>
				return pdPASS;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e069      	b.n	8007384 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d103      	bne.n	80072be <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072b6:	f001 fd91 	bl	8008ddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072ba:	2300      	movs	r3, #0
 80072bc:	e062      	b.n	8007384 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d106      	bne.n	80072d2 <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072c4:	f107 0314 	add.w	r3, r7, #20
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 ff59 	bl	8008180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072ce:	2301      	movs	r3, #1
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072d2:	f001 fd83 	bl	8008ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072d6:	f000 fd23 	bl	8007d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072da:	f001 fd65 	bl	8008da8 <vPortEnterCritical>
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072e4:	b25b      	sxtb	r3, r3
 80072e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ea:	d103      	bne.n	80072f4 <xQueueReceive+0xa8>
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072fa:	b25b      	sxtb	r3, r3
 80072fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007300:	d103      	bne.n	800730a <xQueueReceive+0xbe>
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800730a:	f001 fd67 	bl	8008ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800730e:	1d3a      	adds	r2, r7, #4
 8007310:	f107 0314 	add.w	r3, r7, #20
 8007314:	4611      	mov	r1, r2
 8007316:	4618      	mov	r0, r3
 8007318:	f000 ff48 	bl	80081ac <xTaskCheckForTimeOut>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d123      	bne.n	800736a <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007322:	6a38      	ldr	r0, [r7, #32]
 8007324:	f000 fa99 	bl	800785a <prvIsQueueEmpty>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d017      	beq.n	800735e <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	3324      	adds	r3, #36	; 0x24
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	4611      	mov	r1, r2
 8007336:	4618      	mov	r0, r3
 8007338:	f000 fe98 	bl	800806c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800733c:	6a38      	ldr	r0, [r7, #32]
 800733e:	f000 fa3a 	bl	80077b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007342:	f000 fcfb 	bl	8007d3c <xTaskResumeAll>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d189      	bne.n	8007260 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 800734c:	4b0f      	ldr	r3, [pc, #60]	; (800738c <xQueueReceive+0x140>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	e780      	b.n	8007260 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800735e:	6a38      	ldr	r0, [r7, #32]
 8007360:	f000 fa29 	bl	80077b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007364:	f000 fcea 	bl	8007d3c <xTaskResumeAll>
 8007368:	e77a      	b.n	8007260 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800736a:	6a38      	ldr	r0, [r7, #32]
 800736c:	f000 fa23 	bl	80077b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007370:	f000 fce4 	bl	8007d3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007374:	6a38      	ldr	r0, [r7, #32]
 8007376:	f000 fa70 	bl	800785a <prvIsQueueEmpty>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	f43f af6f 	beq.w	8007260 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007382:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007384:	4618      	mov	r0, r3
 8007386:	3728      	adds	r7, #40	; 0x28
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	e000ed04 	.word	0xe000ed04

08007390 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08a      	sub	sp, #40	; 0x28
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800739a:	2300      	movs	r3, #0
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80073a2:	2300      	movs	r3, #0
 80073a4:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80073a6:	f001 fcff 	bl	8008da8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d024      	beq.n	8007400 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	1e5a      	subs	r2, r3, #1
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d104      	bne.n	80073d0 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80073c6:	f001 f949 	bl	800865c <pvTaskIncrementMutexHeldCount>
 80073ca:	4602      	mov	r2, r0
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00f      	beq.n	80073f8 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	3310      	adds	r3, #16
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fe79 	bl	80080d4 <xTaskRemoveFromEventList>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d007      	beq.n	80073f8 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073e8:	4b4c      	ldr	r3, [pc, #304]	; (800751c <xQueueSemaphoreTake+0x18c>)
 80073ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073f8:	f001 fcf0 	bl	8008ddc <vPortExitCritical>
				return pdPASS;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e089      	b.n	8007514 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d103      	bne.n	800740e <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007406:	f001 fce9 	bl	8008ddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800740a:	2300      	movs	r3, #0
 800740c:	e082      	b.n	8007514 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	d106      	bne.n	8007422 <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007414:	f107 030c 	add.w	r3, r7, #12
 8007418:	4618      	mov	r0, r3
 800741a:	f000 feb1 	bl	8008180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800741e:	2301      	movs	r3, #1
 8007420:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007422:	f001 fcdb 	bl	8008ddc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007426:	f000 fc7b 	bl	8007d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800742a:	f001 fcbd 	bl	8008da8 <vPortEnterCritical>
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007434:	b25b      	sxtb	r3, r3
 8007436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743a:	d103      	bne.n	8007444 <xQueueSemaphoreTake+0xb4>
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800744a:	b25b      	sxtb	r3, r3
 800744c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007450:	d103      	bne.n	800745a <xQueueSemaphoreTake+0xca>
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800745a:	f001 fcbf 	bl	8008ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800745e:	463a      	mov	r2, r7
 8007460:	f107 030c 	add.w	r3, r7, #12
 8007464:	4611      	mov	r1, r2
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fea0 	bl	80081ac <xTaskCheckForTimeOut>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d132      	bne.n	80074d8 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007472:	69f8      	ldr	r0, [r7, #28]
 8007474:	f000 f9f1 	bl	800785a <prvIsQueueEmpty>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d026      	beq.n	80074cc <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d109      	bne.n	800749a <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 8007486:	f001 fc8f 	bl	8008da8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	4618      	mov	r0, r3
 8007490:	f000 ffc4 	bl	800841c <xTaskPriorityInherit>
 8007494:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8007496:	f001 fca1 	bl	8008ddc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	3324      	adds	r3, #36	; 0x24
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	4611      	mov	r1, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fde2 	bl	800806c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074a8:	69f8      	ldr	r0, [r7, #28]
 80074aa:	f000 f984 	bl	80077b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074ae:	f000 fc45 	bl	8007d3c <xTaskResumeAll>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f47f af76 	bne.w	80073a6 <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 80074ba:	4b18      	ldr	r3, [pc, #96]	; (800751c <xQueueSemaphoreTake+0x18c>)
 80074bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	e76c      	b.n	80073a6 <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80074cc:	69f8      	ldr	r0, [r7, #28]
 80074ce:	f000 f972 	bl	80077b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074d2:	f000 fc33 	bl	8007d3c <xTaskResumeAll>
 80074d6:	e766      	b.n	80073a6 <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80074d8:	69f8      	ldr	r0, [r7, #28]
 80074da:	f000 f96c 	bl	80077b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074de:	f000 fc2d 	bl	8007d3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074e2:	69f8      	ldr	r0, [r7, #28]
 80074e4:	f000 f9b9 	bl	800785a <prvIsQueueEmpty>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f43f af5b 	beq.w	80073a6 <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00d      	beq.n	8007512 <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 80074f6:	f001 fc57 	bl	8008da8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80074fa:	69f8      	ldr	r0, [r7, #28]
 80074fc:	f000 f8b4 	bl	8007668 <prvGetDisinheritPriorityAfterTimeout>
 8007500:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	6979      	ldr	r1, [r7, #20]
 8007508:	4618      	mov	r0, r3
 800750a:	f001 f841 	bl	8008590 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800750e:	f001 fc65 	bl	8008ddc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007512:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007514:	4618      	mov	r0, r3
 8007516:	3728      	adds	r7, #40	; 0x28
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	e000ed04 	.word	0xe000ed04

08007520 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08a      	sub	sp, #40	; 0x28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800752c:	2300      	movs	r3, #0
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007534:	f001 fc38 	bl	8008da8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d021      	beq.n	8007588 <xQueuePeek+0x68>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	6a38      	ldr	r0, [r7, #32]
 800754e:	f000 f90c 	bl	800776a <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00f      	beq.n	8007580 <xQueuePeek+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	3324      	adds	r3, #36	; 0x24
 8007564:	4618      	mov	r0, r3
 8007566:	f000 fdb5 	bl	80080d4 <xTaskRemoveFromEventList>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d007      	beq.n	8007580 <xQueuePeek+0x60>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8007570:	4b3c      	ldr	r3, [pc, #240]	; (8007664 <xQueuePeek+0x144>)
 8007572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007580:	f001 fc2c 	bl	8008ddc <vPortExitCritical>
				return pdPASS;
 8007584:	2301      	movs	r3, #1
 8007586:	e069      	b.n	800765c <xQueuePeek+0x13c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d103      	bne.n	8007596 <xQueuePeek+0x76>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800758e:	f001 fc25 	bl	8008ddc <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007592:	2300      	movs	r3, #0
 8007594:	e062      	b.n	800765c <xQueuePeek+0x13c>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	2b00      	cmp	r3, #0
 800759a:	d106      	bne.n	80075aa <xQueuePeek+0x8a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800759c:	f107 0310 	add.w	r3, r7, #16
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fded 	bl	8008180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075a6:	2301      	movs	r3, #1
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075aa:	f001 fc17 	bl	8008ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075ae:	f000 fbb7 	bl	8007d20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075b2:	f001 fbf9 	bl	8008da8 <vPortEnterCritical>
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075bc:	b25b      	sxtb	r3, r3
 80075be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c2:	d103      	bne.n	80075cc <xQueuePeek+0xac>
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075d2:	b25b      	sxtb	r3, r3
 80075d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d8:	d103      	bne.n	80075e2 <xQueuePeek+0xc2>
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075e2:	f001 fbfb 	bl	8008ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075e6:	1d3a      	adds	r2, r7, #4
 80075e8:	f107 0310 	add.w	r3, r7, #16
 80075ec:	4611      	mov	r1, r2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 fddc 	bl	80081ac <xTaskCheckForTimeOut>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d123      	bne.n	8007642 <xQueuePeek+0x122>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075fa:	6a38      	ldr	r0, [r7, #32]
 80075fc:	f000 f92d 	bl	800785a <prvIsQueueEmpty>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d017      	beq.n	8007636 <xQueuePeek+0x116>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	3324      	adds	r3, #36	; 0x24
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	4611      	mov	r1, r2
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fd2c 	bl	800806c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007614:	6a38      	ldr	r0, [r7, #32]
 8007616:	f000 f8ce 	bl	80077b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800761a:	f000 fb8f 	bl	8007d3c <xTaskResumeAll>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d187      	bne.n	8007534 <xQueuePeek+0x14>
				{
					portYIELD_WITHIN_API();
 8007624:	4b0f      	ldr	r3, [pc, #60]	; (8007664 <xQueuePeek+0x144>)
 8007626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	e77e      	b.n	8007534 <xQueuePeek+0x14>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8007636:	6a38      	ldr	r0, [r7, #32]
 8007638:	f000 f8bd 	bl	80077b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800763c:	f000 fb7e 	bl	8007d3c <xTaskResumeAll>
 8007640:	e778      	b.n	8007534 <xQueuePeek+0x14>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8007642:	6a38      	ldr	r0, [r7, #32]
 8007644:	f000 f8b7 	bl	80077b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007648:	f000 fb78 	bl	8007d3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800764c:	6a38      	ldr	r0, [r7, #32]
 800764e:	f000 f904 	bl	800785a <prvIsQueueEmpty>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	f43f af6d 	beq.w	8007534 <xQueuePeek+0x14>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800765a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800765c:	4618      	mov	r0, r3
 800765e:	3728      	adds	r7, #40	; 0x28
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	e000ed04 	.word	0xe000ed04

08007668 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	2b00      	cmp	r3, #0
 8007676:	d006      	beq.n	8007686 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	e001      	b.n	800768a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800768a:	68fb      	ldr	r3, [r7, #12]
	}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	bc80      	pop	{r7}
 8007694:	4770      	bx	lr

08007696 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b086      	sub	sp, #24
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076a2:	2300      	movs	r3, #0
 80076a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10d      	bne.n	80076d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d14d      	bne.n	8007758 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 ff19 	bl	80084f8 <xTaskPriorityDisinherit>
 80076c6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	605a      	str	r2, [r3, #4]
 80076ce:	e043      	b.n	8007758 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d119      	bne.n	800770a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6898      	ldr	r0, [r3, #8]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	461a      	mov	r2, r3
 80076e0:	68b9      	ldr	r1, [r7, #8]
 80076e2:	f001 fda9 	bl	8009238 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	441a      	add	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d32b      	bcc.n	8007758 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	609a      	str	r2, [r3, #8]
 8007708:	e026      	b.n	8007758 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	68d8      	ldr	r0, [r3, #12]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	461a      	mov	r2, r3
 8007714:	68b9      	ldr	r1, [r7, #8]
 8007716:	f001 fd8f 	bl	8009238 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	425b      	negs	r3, r3
 8007724:	441a      	add	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	429a      	cmp	r2, r3
 8007734:	d207      	bcs.n	8007746 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	425b      	negs	r3, r3
 8007740:	441a      	add	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d105      	bne.n	8007758 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	3b01      	subs	r3, #1
 8007756:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007760:	697b      	ldr	r3, [r7, #20]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b082      	sub	sp, #8
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d018      	beq.n	80077ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	441a      	add	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	429a      	cmp	r2, r3
 8007794:	d303      	bcc.n	800779e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68d9      	ldr	r1, [r3, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	461a      	mov	r2, r3
 80077a8:	6838      	ldr	r0, [r7, #0]
 80077aa:	f001 fd45 	bl	8009238 <memcpy>
	}
}
 80077ae:	bf00      	nop
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077be:	f001 faf3 	bl	8008da8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077ca:	e011      	b.n	80077f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d012      	beq.n	80077fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3324      	adds	r3, #36	; 0x24
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fc7b 	bl	80080d4 <xTaskRemoveFromEventList>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80077e4:	f000 fd28 	bl	8008238 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	dce9      	bgt.n	80077cc <prvUnlockQueue+0x16>
 80077f8:	e000      	b.n	80077fc <prvUnlockQueue+0x46>
					break;
 80077fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	22ff      	movs	r2, #255	; 0xff
 8007800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007804:	f001 faea 	bl	8008ddc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007808:	f001 face 	bl	8008da8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007812:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007814:	e011      	b.n	800783a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d012      	beq.n	8007844 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3310      	adds	r3, #16
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fc56 	bl	80080d4 <xTaskRemoveFromEventList>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800782e:	f000 fd03 	bl	8008238 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	3b01      	subs	r3, #1
 8007836:	b2db      	uxtb	r3, r3
 8007838:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800783a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800783e:	2b00      	cmp	r3, #0
 8007840:	dce9      	bgt.n	8007816 <prvUnlockQueue+0x60>
 8007842:	e000      	b.n	8007846 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007844:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	22ff      	movs	r2, #255	; 0xff
 800784a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800784e:	f001 fac5 	bl	8008ddc <vPortExitCritical>
}
 8007852:	bf00      	nop
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007862:	f001 faa1 	bl	8008da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	2b00      	cmp	r3, #0
 800786c:	d102      	bne.n	8007874 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800786e:	2301      	movs	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	e001      	b.n	8007878 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007878:	f001 fab0 	bl	8008ddc <vPortExitCritical>

	return xReturn;
 800787c:	68fb      	ldr	r3, [r7, #12]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800788e:	f001 fa8b 	bl	8008da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	429a      	cmp	r2, r3
 800789c:	d102      	bne.n	80078a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800789e:	2301      	movs	r3, #1
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	e001      	b.n	80078a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078a8:	f001 fa98 	bl	8008ddc <vPortExitCritical>

	return xReturn;
 80078ac:	68fb      	ldr	r3, [r7, #12]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078c2:	2300      	movs	r3, #0
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	e014      	b.n	80078f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078c8:	4a0e      	ldr	r2, [pc, #56]	; (8007904 <vQueueAddToRegistry+0x4c>)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10b      	bne.n	80078ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80078d4:	490b      	ldr	r1, [pc, #44]	; (8007904 <vQueueAddToRegistry+0x4c>)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80078de:	4a09      	ldr	r2, [pc, #36]	; (8007904 <vQueueAddToRegistry+0x4c>)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	4413      	add	r3, r2
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80078ea:	e006      	b.n	80078fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3301      	adds	r3, #1
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b07      	cmp	r3, #7
 80078f6:	d9e7      	bls.n	80078c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	bc80      	pop	{r7}
 8007902:	4770      	bx	lr
 8007904:	20004698 	.word	0x20004698

08007908 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007918:	f001 fa46 	bl	8008da8 <vPortEnterCritical>
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007922:	b25b      	sxtb	r3, r3
 8007924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007928:	d103      	bne.n	8007932 <vQueueWaitForMessageRestricted+0x2a>
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007938:	b25b      	sxtb	r3, r3
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793e:	d103      	bne.n	8007948 <vQueueWaitForMessageRestricted+0x40>
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007948:	f001 fa48 	bl	8008ddc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	2b00      	cmp	r3, #0
 8007952:	d106      	bne.n	8007962 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	3324      	adds	r3, #36	; 0x24
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	68b9      	ldr	r1, [r7, #8]
 800795c:	4618      	mov	r0, r3
 800795e:	f000 fb9b 	bl	8008098 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007962:	6978      	ldr	r0, [r7, #20]
 8007964:	f7ff ff27 	bl	80077b6 <prvUnlockQueue>
	}
 8007968:	bf00      	nop
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08a      	sub	sp, #40	; 0x28
 8007974:	af04      	add	r7, sp, #16
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
			configASSERT( xSize == sizeof( TCB_t ) );
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007980:	2b00      	cmp	r3, #0
 8007982:	d01e      	beq.n	80079c2 <xTaskCreateStatic+0x52>
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d01b      	beq.n	80079c2 <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007992:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800799c:	2300      	movs	r3, #0
 800799e:	9303      	str	r3, [sp, #12]
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	9302      	str	r3, [sp, #8]
 80079a4:	f107 0310 	add.w	r3, r7, #16
 80079a8:	9301      	str	r3, [sp, #4]
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	68b9      	ldr	r1, [r7, #8]
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f850 	bl	8007a5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079ba:	6978      	ldr	r0, [r7, #20]
 80079bc:	f000 f8c4 	bl	8007b48 <prvAddNewTaskToReadyList>
 80079c0:	e001      	b.n	80079c6 <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 80079c6:	693b      	ldr	r3, [r7, #16]
	}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b08c      	sub	sp, #48	; 0x30
 80079d4:	af04      	add	r7, sp, #16
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	4613      	mov	r3, r2
 80079de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e0:	88fb      	ldrh	r3, [r7, #6]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 fa7b 	bl	8008ee0 <pvPortMalloc>
 80079ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00e      	beq.n	8007a10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80079f2:	205c      	movs	r0, #92	; 0x5c
 80079f4:	f001 fa74 	bl	8008ee0 <pvPortMalloc>
 80079f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30
 8007a06:	e005      	b.n	8007a14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a08:	6978      	ldr	r0, [r7, #20]
 8007a0a:	f001 fafd 	bl	8009008 <vPortFree>
 8007a0e:	e001      	b.n	8007a14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a10:	2300      	movs	r3, #0
 8007a12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d017      	beq.n	8007a4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a22:	88fa      	ldrh	r2, [r7, #6]
 8007a24:	2300      	movs	r3, #0
 8007a26:	9303      	str	r3, [sp, #12]
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	9302      	str	r3, [sp, #8]
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	9301      	str	r3, [sp, #4]
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	68b9      	ldr	r1, [r7, #8]
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 f80e 	bl	8007a5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a3e:	69f8      	ldr	r0, [r7, #28]
 8007a40:	f000 f882 	bl	8007b48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a44:	2301      	movs	r3, #1
 8007a46:	61bb      	str	r3, [r7, #24]
 8007a48:	e002      	b.n	8007a50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a50:	69bb      	ldr	r3, [r7, #24]
	}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3720      	adds	r7, #32
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b086      	sub	sp, #24
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	607a      	str	r2, [r7, #4]
 8007a66:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	461a      	mov	r2, r3
 8007a72:	21a5      	movs	r1, #165	; 0xa5
 8007a74:	f001 fbee 	bl	8009254 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a82:	3b01      	subs	r3, #1
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f023 0307 	bic.w	r3, r3, #7
 8007a90:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a92:	2300      	movs	r3, #0
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	e012      	b.n	8007abe <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	7819      	ldrb	r1, [r3, #0]
 8007aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	3334      	adds	r3, #52	; 0x34
 8007aa8:	460a      	mov	r2, r1
 8007aaa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d006      	beq.n	8007ac6 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	3301      	adds	r3, #1
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2b0f      	cmp	r3, #15
 8007ac2:	d9e9      	bls.n	8007a98 <prvInitialiseNewTask+0x3e>
 8007ac4:	e000      	b.n	8007ac8 <prvInitialiseNewTask+0x6e>
		{
			break;
 8007ac6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	2b37      	cmp	r3, #55	; 0x37
 8007ad4:	d901      	bls.n	8007ada <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ad6:	2337      	movs	r3, #55	; 0x37
 8007ad8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007adc:	6a3a      	ldr	r2, [r7, #32]
 8007ade:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae2:	6a3a      	ldr	r2, [r7, #32]
 8007ae4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	2200      	movs	r2, #0
 8007aea:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	3304      	adds	r3, #4
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7ff f8e0 	bl	8006cb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	3318      	adds	r3, #24
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff f8db 	bl	8006cb6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b14:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	2200      	movs	r2, #0
 8007b1a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	68f9      	ldr	r1, [r7, #12]
 8007b28:	6938      	ldr	r0, [r7, #16]
 8007b2a:	f001 f8af 	bl	8008c8c <pxPortInitialiseStack>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b32:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b40:	bf00      	nop
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b50:	f001 f92a 	bl	8008da8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b54:	4b2d      	ldr	r3, [pc, #180]	; (8007c0c <prvAddNewTaskToReadyList+0xc4>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	4a2c      	ldr	r2, [pc, #176]	; (8007c0c <prvAddNewTaskToReadyList+0xc4>)
 8007b5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b5e:	4b2c      	ldr	r3, [pc, #176]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b66:	4a2a      	ldr	r2, [pc, #168]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b6c:	4b27      	ldr	r3, [pc, #156]	; (8007c0c <prvAddNewTaskToReadyList+0xc4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d110      	bne.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b74:	f000 fb84 	bl	8008280 <prvInitialiseTaskLists>
 8007b78:	e00d      	b.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b7a:	4b26      	ldr	r3, [pc, #152]	; (8007c14 <prvAddNewTaskToReadyList+0xcc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b82:	4b23      	ldr	r3, [pc, #140]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d802      	bhi.n	8007b96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b90:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b96:	4b20      	ldr	r3, [pc, #128]	; (8007c18 <prvAddNewTaskToReadyList+0xd0>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	4a1e      	ldr	r2, [pc, #120]	; (8007c18 <prvAddNewTaskToReadyList+0xd0>)
 8007b9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ba0:	4b1d      	ldr	r3, [pc, #116]	; (8007c18 <prvAddNewTaskToReadyList+0xd0>)
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bac:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <prvAddNewTaskToReadyList+0xd4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d903      	bls.n	8007bbc <prvAddNewTaskToReadyList+0x74>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a18      	ldr	r2, [pc, #96]	; (8007c1c <prvAddNewTaskToReadyList+0xd4>)
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4a15      	ldr	r2, [pc, #84]	; (8007c20 <prvAddNewTaskToReadyList+0xd8>)
 8007bca:	441a      	add	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	f7ff f87b 	bl	8006cce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bd8:	f001 f900 	bl	8008ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <prvAddNewTaskToReadyList+0xcc>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00e      	beq.n	8007c02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <prvAddNewTaskToReadyList+0xc8>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d207      	bcs.n	8007c02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bf2:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <prvAddNewTaskToReadyList+0xdc>)
 8007bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000bc4 	.word	0x20000bc4
 8007c10:	200006f0 	.word	0x200006f0
 8007c14:	20000bd0 	.word	0x20000bd0
 8007c18:	20000be0 	.word	0x20000be0
 8007c1c:	20000bcc 	.word	0x20000bcc
 8007c20:	200006f4 	.word	0x200006f4
 8007c24:	e000ed04 	.word	0xe000ed04

08007c28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d008      	beq.n	8007c4c <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8007c3a:	f000 f871 	bl	8007d20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c3e:	2100      	movs	r1, #0
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fd1f 	bl	8008684 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c46:	f000 f879 	bl	8007d3c <xTaskResumeAll>
 8007c4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d107      	bne.n	8007c62 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8007c52:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <vTaskDelay+0x44>)
 8007c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c62:	bf00      	nop
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	e000ed04 	.word	0xe000ed04

08007c70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08a      	sub	sp, #40	; 0x28
 8007c74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c7e:	1d3a      	adds	r2, r7, #4
 8007c80:	f107 0108 	add.w	r1, r7, #8
 8007c84:	f107 030c 	add.w	r3, r7, #12
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fe ffc3 	bl	8006c14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	9202      	str	r2, [sp, #8]
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	460a      	mov	r2, r1
 8007ca0:	4919      	ldr	r1, [pc, #100]	; (8007d08 <vTaskStartScheduler+0x98>)
 8007ca2:	481a      	ldr	r0, [pc, #104]	; (8007d0c <vTaskStartScheduler+0x9c>)
 8007ca4:	f7ff fe64 	bl	8007970 <xTaskCreateStatic>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	4a19      	ldr	r2, [pc, #100]	; (8007d10 <vTaskStartScheduler+0xa0>)
 8007cac:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007cae:	4b18      	ldr	r3, [pc, #96]	; (8007d10 <vTaskStartScheduler+0xa0>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	617b      	str	r3, [r7, #20]
 8007cba:	e001      	b.n	8007cc0 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d102      	bne.n	8007ccc <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8007cc6:	f000 fd31 	bl	800872c <xTimerCreateTimerTask>
 8007cca:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d115      	bne.n	8007cfe <vTaskStartScheduler+0x8e>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	613b      	str	r3, [r7, #16]
}
 8007ce4:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <vTaskStartScheduler+0xa4>)
 8007ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007cee:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <vTaskStartScheduler+0xa8>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007cf4:	4b09      	ldr	r3, [pc, #36]	; (8007d1c <vTaskStartScheduler+0xac>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cfa:	f001 f835 	bl	8008d68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cfe:	bf00      	nop
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	08009300 	.word	0x08009300
 8007d0c:	08008251 	.word	0x08008251
 8007d10:	20000be8 	.word	0x20000be8
 8007d14:	20000be4 	.word	0x20000be4
 8007d18:	20000bd0 	.word	0x20000bd0
 8007d1c:	20000bc8 	.word	0x20000bc8

08007d20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d24:	4b04      	ldr	r3, [pc, #16]	; (8007d38 <vTaskSuspendAll+0x18>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	4a03      	ldr	r2, [pc, #12]	; (8007d38 <vTaskSuspendAll+0x18>)
 8007d2c:	6013      	str	r3, [r2, #0]
}
 8007d2e:	bf00      	nop
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	20000bec 	.word	0x20000bec

08007d3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d4a:	f001 f82d 	bl	8008da8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d4e:	4b39      	ldr	r3, [pc, #228]	; (8007e34 <xTaskResumeAll+0xf8>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	4a37      	ldr	r2, [pc, #220]	; (8007e34 <xTaskResumeAll+0xf8>)
 8007d56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d58:	4b36      	ldr	r3, [pc, #216]	; (8007e34 <xTaskResumeAll+0xf8>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d162      	bne.n	8007e26 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d60:	4b35      	ldr	r3, [pc, #212]	; (8007e38 <xTaskResumeAll+0xfc>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d05e      	beq.n	8007e26 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d68:	e02f      	b.n	8007dca <xTaskResumeAll+0x8e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007d6a:	4b34      	ldr	r3, [pc, #208]	; (8007e3c <xTaskResumeAll+0x100>)
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3318      	adds	r3, #24
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff f804 	bl	8006d84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fe ffff 	bl	8006d84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8a:	4b2d      	ldr	r3, [pc, #180]	; (8007e40 <xTaskResumeAll+0x104>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d903      	bls.n	8007d9a <xTaskResumeAll+0x5e>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d96:	4a2a      	ldr	r2, [pc, #168]	; (8007e40 <xTaskResumeAll+0x104>)
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4a27      	ldr	r2, [pc, #156]	; (8007e44 <xTaskResumeAll+0x108>)
 8007da8:	441a      	add	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3304      	adds	r3, #4
 8007dae:	4619      	mov	r1, r3
 8007db0:	4610      	mov	r0, r2
 8007db2:	f7fe ff8c 	bl	8006cce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dba:	4b23      	ldr	r3, [pc, #140]	; (8007e48 <xTaskResumeAll+0x10c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d302      	bcc.n	8007dca <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 8007dc4:	4b21      	ldr	r3, [pc, #132]	; (8007e4c <xTaskResumeAll+0x110>)
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dca:	4b1c      	ldr	r3, [pc, #112]	; (8007e3c <xTaskResumeAll+0x100>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1cb      	bne.n	8007d6a <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007dd8:	f000 fade 	bl	8008398 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007ddc:	4b1c      	ldr	r3, [pc, #112]	; (8007e50 <xTaskResumeAll+0x114>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d010      	beq.n	8007e0a <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007de8:	f000 f844 	bl	8007e74 <xTaskIncrementTick>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 8007df2:	4b16      	ldr	r3, [pc, #88]	; (8007e4c <xTaskResumeAll+0x110>)
 8007df4:	2201      	movs	r2, #1
 8007df6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1f1      	bne.n	8007de8 <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
 8007e04:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <xTaskResumeAll+0x114>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e0a:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <xTaskResumeAll+0x110>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d009      	beq.n	8007e26 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e12:	2301      	movs	r3, #1
 8007e14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <xTaskResumeAll+0x118>)
 8007e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e26:	f000 ffd9 	bl	8008ddc <vPortExitCritical>

	return xAlreadyYielded;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20000bec 	.word	0x20000bec
 8007e38:	20000bc4 	.word	0x20000bc4
 8007e3c:	20000b84 	.word	0x20000b84
 8007e40:	20000bcc 	.word	0x20000bcc
 8007e44:	200006f4 	.word	0x200006f4
 8007e48:	200006f0 	.word	0x200006f0
 8007e4c:	20000bd8 	.word	0x20000bd8
 8007e50:	20000bd4 	.word	0x20000bd4
 8007e54:	e000ed04 	.word	0xe000ed04

08007e58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e5e:	4b04      	ldr	r3, [pc, #16]	; (8007e70 <xTaskGetTickCount+0x18>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e64:	687b      	ldr	r3, [r7, #4]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bc80      	pop	{r7}
 8007e6e:	4770      	bx	lr
 8007e70:	20000bc8 	.word	0x20000bc8

08007e74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e7e:	4b49      	ldr	r3, [pc, #292]	; (8007fa4 <xTaskIncrementTick+0x130>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d17d      	bne.n	8007f82 <xTaskIncrementTick+0x10e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e86:	4b48      	ldr	r3, [pc, #288]	; (8007fa8 <xTaskIncrementTick+0x134>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e8e:	4a46      	ldr	r2, [pc, #280]	; (8007fa8 <xTaskIncrementTick+0x134>)
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d110      	bne.n	8007ebc <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e9a:	4b44      	ldr	r3, [pc, #272]	; (8007fac <xTaskIncrementTick+0x138>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	4b43      	ldr	r3, [pc, #268]	; (8007fb0 <xTaskIncrementTick+0x13c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a41      	ldr	r2, [pc, #260]	; (8007fac <xTaskIncrementTick+0x138>)
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	4a41      	ldr	r2, [pc, #260]	; (8007fb0 <xTaskIncrementTick+0x13c>)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	4b41      	ldr	r3, [pc, #260]	; (8007fb4 <xTaskIncrementTick+0x140>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	4a3f      	ldr	r2, [pc, #252]	; (8007fb4 <xTaskIncrementTick+0x140>)
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	f000 fa6e 	bl	8008398 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ebc:	4b3e      	ldr	r3, [pc, #248]	; (8007fb8 <xTaskIncrementTick+0x144>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d34e      	bcc.n	8007f64 <xTaskIncrementTick+0xf0>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ec6:	4b39      	ldr	r3, [pc, #228]	; (8007fac <xTaskIncrementTick+0x138>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <xTaskIncrementTick+0x60>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e000      	b.n	8007ed6 <xTaskIncrementTick+0x62>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d004      	beq.n	8007ee4 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eda:	4b37      	ldr	r3, [pc, #220]	; (8007fb8 <xTaskIncrementTick+0x144>)
 8007edc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee0:	601a      	str	r2, [r3, #0]
					break;
 8007ee2:	e03f      	b.n	8007f64 <xTaskIncrementTick+0xf0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ee4:	4b31      	ldr	r3, [pc, #196]	; (8007fac <xTaskIncrementTick+0x138>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d203      	bcs.n	8007f04 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007efc:	4a2e      	ldr	r2, [pc, #184]	; (8007fb8 <xTaskIncrementTick+0x144>)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6013      	str	r3, [r2, #0]
						break;
 8007f02:	e02f      	b.n	8007f64 <xTaskIncrementTick+0xf0>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	3304      	adds	r3, #4
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fe ff3b 	bl	8006d84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d004      	beq.n	8007f20 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	3318      	adds	r3, #24
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe ff32 	bl	8006d84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f24:	4b25      	ldr	r3, [pc, #148]	; (8007fbc <xTaskIncrementTick+0x148>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d903      	bls.n	8007f34 <xTaskIncrementTick+0xc0>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	4a22      	ldr	r2, [pc, #136]	; (8007fbc <xTaskIncrementTick+0x148>)
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <xTaskIncrementTick+0x14c>)
 8007f42:	441a      	add	r2, r3
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	3304      	adds	r3, #4
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	f7fe febf 	bl	8006cce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f54:	4b1b      	ldr	r3, [pc, #108]	; (8007fc4 <xTaskIncrementTick+0x150>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d3b3      	bcc.n	8007ec6 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f62:	e7b0      	b.n	8007ec6 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f64:	4b17      	ldr	r3, [pc, #92]	; (8007fc4 <xTaskIncrementTick+0x150>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6a:	4915      	ldr	r1, [pc, #84]	; (8007fc0 <xTaskIncrementTick+0x14c>)
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d907      	bls.n	8007f8c <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	e004      	b.n	8007f8c <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f82:	4b11      	ldr	r3, [pc, #68]	; (8007fc8 <xTaskIncrementTick+0x154>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3301      	adds	r3, #1
 8007f88:	4a0f      	ldr	r2, [pc, #60]	; (8007fc8 <xTaskIncrementTick+0x154>)
 8007f8a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f8c:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <xTaskIncrementTick+0x158>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <xTaskIncrementTick+0x124>
		{
			xSwitchRequired = pdTRUE;
 8007f94:	2301      	movs	r3, #1
 8007f96:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007f98:	697b      	ldr	r3, [r7, #20]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000bec 	.word	0x20000bec
 8007fa8:	20000bc8 	.word	0x20000bc8
 8007fac:	20000b7c 	.word	0x20000b7c
 8007fb0:	20000b80 	.word	0x20000b80
 8007fb4:	20000bdc 	.word	0x20000bdc
 8007fb8:	20000be4 	.word	0x20000be4
 8007fbc:	20000bcc 	.word	0x20000bcc
 8007fc0:	200006f4 	.word	0x200006f4
 8007fc4:	200006f0 	.word	0x200006f0
 8007fc8:	20000bd4 	.word	0x20000bd4
 8007fcc:	20000bd8 	.word	0x20000bd8

08007fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fd6:	4b20      	ldr	r3, [pc, #128]	; (8008058 <vTaskSwitchContext+0x88>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fde:	4b1f      	ldr	r3, [pc, #124]	; (800805c <vTaskSwitchContext+0x8c>)
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fe4:	e033      	b.n	800804e <vTaskSwitchContext+0x7e>
		xYieldPending = pdFALSE;
 8007fe6:	4b1d      	ldr	r3, [pc, #116]	; (800805c <vTaskSwitchContext+0x8c>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007fec:	4b1c      	ldr	r3, [pc, #112]	; (8008060 <vTaskSwitchContext+0x90>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	607b      	str	r3, [r7, #4]
 8007ff2:	e002      	b.n	8007ffa <vTaskSwitchContext+0x2a>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	607b      	str	r3, [r7, #4]
 8007ffa:	491a      	ldr	r1, [pc, #104]	; (8008064 <vTaskSwitchContext+0x94>)
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
=======
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f000 fb1d 	bl	8006876 <TIM_ETR_SetConfig>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800624a:	609a      	str	r2, [r3, #8]
 800624c:	e03b      	b.n	80062c6 <HAL_TIM_ConfigClockSource+0x16e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	6859      	ldr	r1, [r3, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	461a      	mov	r2, r3
 800625c:	f000 fa94 	bl	8006788 <TIM_TI1_ConfigInputStage>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2150      	movs	r1, #80	; 0x50
 8006266:	4618      	mov	r0, r3
 8006268:	f000 faeb 	bl	8006842 <TIM_ITRx_SetConfig>
 800626c:	e02b      	b.n	80062c6 <HAL_TIM_ConfigClockSource+0x16e>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6859      	ldr	r1, [r3, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	461a      	mov	r2, r3
 800627c:	f000 fab2 	bl	80067e4 <TIM_TI2_ConfigInputStage>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2160      	movs	r1, #96	; 0x60
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fadb 	bl	8006842 <TIM_ITRx_SetConfig>
 800628c:	e01b      	b.n	80062c6 <HAL_TIM_ConfigClockSource+0x16e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	6859      	ldr	r1, [r3, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	461a      	mov	r2, r3
 800629c:	f000 fa74 	bl	8006788 <TIM_TI1_ConfigInputStage>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2140      	movs	r1, #64	; 0x40
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 facb 	bl	8006842 <TIM_ITRx_SetConfig>
 80062ac:	e00b      	b.n	80062c6 <HAL_TIM_ConfigClockSource+0x16e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f000 fac2 	bl	8006842 <TIM_ITRx_SetConfig>
 80062be:	e002      	b.n	80062c6 <HAL_TIM_ConfigClockSource+0x16e>
 80062c0:	bf00      	nop
 80062c2:	e000      	b.n	80062c6 <HAL_TIM_ConfigClockSource+0x16e>
 80062c4:	bf00      	nop
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062d6:	2300      	movs	r3, #0
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_TIM_PeriodElapsedCallback>:
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr

080062f2 <HAL_TIM_OC_DelayElapsedCallback>:
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <HAL_TIM_IC_CaptureCallback>:
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	bc80      	pop	{r7}
 8006314:	4770      	bx	lr

08006316 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr

08006328 <HAL_TIM_TriggerCallback>:
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	bc80      	pop	{r7}
 8006338:	4770      	bx	lr
	...

0800633c <TIM_Base_SetConfig>:
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a33      	ldr	r2, [pc, #204]	; (800641c <TIM_Base_SetConfig+0xe0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d013      	beq.n	800637c <TIM_Base_SetConfig+0x40>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a32      	ldr	r2, [pc, #200]	; (8006420 <TIM_Base_SetConfig+0xe4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00f      	beq.n	800637c <TIM_Base_SetConfig+0x40>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006362:	d00b      	beq.n	800637c <TIM_Base_SetConfig+0x40>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a2f      	ldr	r2, [pc, #188]	; (8006424 <TIM_Base_SetConfig+0xe8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d007      	beq.n	800637c <TIM_Base_SetConfig+0x40>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a2e      	ldr	r2, [pc, #184]	; (8006428 <TIM_Base_SetConfig+0xec>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d003      	beq.n	800637c <TIM_Base_SetConfig+0x40>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a2d      	ldr	r2, [pc, #180]	; (800642c <TIM_Base_SetConfig+0xf0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d108      	bne.n	800638e <TIM_Base_SetConfig+0x52>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a22      	ldr	r2, [pc, #136]	; (800641c <TIM_Base_SetConfig+0xe0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d013      	beq.n	80063be <TIM_Base_SetConfig+0x82>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a21      	ldr	r2, [pc, #132]	; (8006420 <TIM_Base_SetConfig+0xe4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00f      	beq.n	80063be <TIM_Base_SetConfig+0x82>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a4:	d00b      	beq.n	80063be <TIM_Base_SetConfig+0x82>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a1e      	ldr	r2, [pc, #120]	; (8006424 <TIM_Base_SetConfig+0xe8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d007      	beq.n	80063be <TIM_Base_SetConfig+0x82>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a1d      	ldr	r2, [pc, #116]	; (8006428 <TIM_Base_SetConfig+0xec>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_Base_SetConfig+0x82>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a1c      	ldr	r2, [pc, #112]	; (800642c <TIM_Base_SetConfig+0xf0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d108      	bne.n	80063d0 <TIM_Base_SetConfig+0x94>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	629a      	str	r2, [r3, #40]	; 0x28
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a09      	ldr	r2, [pc, #36]	; (800641c <TIM_Base_SetConfig+0xe0>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_Base_SetConfig+0xc8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a08      	ldr	r2, [pc, #32]	; (8006420 <TIM_Base_SetConfig+0xe4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d103      	bne.n	800640c <TIM_Base_SetConfig+0xd0>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	615a      	str	r2, [r3, #20]
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr
 800641c:	40012c00 	.word	0x40012c00
 8006420:	40013400 	.word	0x40013400
 8006424:	40000400 	.word	0x40000400
 8006428:	40000800 	.word	0x40000800
 800642c:	40000c00 	.word	0x40000c00

08006430 <TIM_OC1_SetConfig>:
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f023 0201 	bic.w	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	621a      	str	r2, [r3, #32]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	613b      	str	r3, [r7, #16]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f023 0302 	bic.w	r3, r3, #2
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a20      	ldr	r2, [pc, #128]	; (8006508 <TIM_OC1_SetConfig+0xd8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d003      	beq.n	8006494 <TIM_OC1_SetConfig+0x64>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a1f      	ldr	r2, [pc, #124]	; (800650c <TIM_OC1_SetConfig+0xdc>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d10c      	bne.n	80064ae <TIM_OC1_SetConfig+0x7e>
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f023 0308 	bic.w	r3, r3, #8
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f023 0304 	bic.w	r3, r3, #4
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a15      	ldr	r2, [pc, #84]	; (8006508 <TIM_OC1_SetConfig+0xd8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d003      	beq.n	80064be <TIM_OC1_SetConfig+0x8e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a14      	ldr	r2, [pc, #80]	; (800650c <TIM_OC1_SetConfig+0xdc>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d111      	bne.n	80064e2 <TIM_OC1_SetConfig+0xb2>
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	605a      	str	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	619a      	str	r2, [r3, #24]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	635a      	str	r2, [r3, #52]	; 0x34
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	621a      	str	r2, [r3, #32]
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40012c00 	.word	0x40012c00
 800650c:	40013400 	.word	0x40013400

08006510 <TIM_OC2_SetConfig>:
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f023 0210 	bic.w	r2, r3, #16
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	621a      	str	r2, [r3, #32]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	613b      	str	r3, [r7, #16]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	021b      	lsls	r3, r3, #8
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f023 0320 	bic.w	r3, r3, #32
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a21      	ldr	r2, [pc, #132]	; (80065f0 <TIM_OC2_SetConfig+0xe0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d003      	beq.n	8006578 <TIM_OC2_SetConfig+0x68>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a20      	ldr	r2, [pc, #128]	; (80065f4 <TIM_OC2_SetConfig+0xe4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d10d      	bne.n	8006594 <TIM_OC2_SetConfig+0x84>
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	4313      	orrs	r3, r2
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <TIM_OC2_SetConfig+0xe0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <TIM_OC2_SetConfig+0x94>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a15      	ldr	r2, [pc, #84]	; (80065f4 <TIM_OC2_SetConfig+0xe4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d113      	bne.n	80065cc <TIM_OC2_SetConfig+0xbc>
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065b2:	613b      	str	r3, [r7, #16]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	605a      	str	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	619a      	str	r2, [r3, #24]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	621a      	str	r2, [r3, #32]
 80065e6:	bf00      	nop
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bc80      	pop	{r7}
 80065ee:	4770      	bx	lr
 80065f0:	40012c00 	.word	0x40012c00
 80065f4:	40013400 	.word	0x40013400

080065f8 <TIM_OC3_SetConfig>:
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	621a      	str	r2, [r3, #32]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0303 	bic.w	r3, r3, #3
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a21      	ldr	r2, [pc, #132]	; (80066d8 <TIM_OC3_SetConfig+0xe0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d003      	beq.n	800665e <TIM_OC3_SetConfig+0x66>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a20      	ldr	r2, [pc, #128]	; (80066dc <TIM_OC3_SetConfig+0xe4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d10d      	bne.n	800667a <TIM_OC3_SetConfig+0x82>
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a16      	ldr	r2, [pc, #88]	; (80066d8 <TIM_OC3_SetConfig+0xe0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_OC3_SetConfig+0x92>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a15      	ldr	r2, [pc, #84]	; (80066dc <TIM_OC3_SetConfig+0xe4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d113      	bne.n	80066b2 <TIM_OC3_SetConfig+0xba>
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	605a      	str	r2, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	61da      	str	r2, [r3, #28]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	621a      	str	r2, [r3, #32]
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40013400 	.word	0x40013400

080066e0 <TIM_OC4_SetConfig>:
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	621a      	str	r2, [r3, #32]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	613b      	str	r3, [r7, #16]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	031b      	lsls	r3, r3, #12
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a11      	ldr	r2, [pc, #68]	; (8006780 <TIM_OC4_SetConfig+0xa0>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_OC4_SetConfig+0x68>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a10      	ldr	r2, [pc, #64]	; (8006784 <TIM_OC4_SetConfig+0xa4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d109      	bne.n	800675c <TIM_OC4_SetConfig+0x7c>
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	019b      	lsls	r3, r3, #6
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	605a      	str	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	61da      	str	r2, [r3, #28]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	641a      	str	r2, [r3, #64]	; 0x40
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	621a      	str	r2, [r3, #32]
 8006776:	bf00      	nop
 8006778:	371c      	adds	r7, #28
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr
 8006780:	40012c00 	.word	0x40012c00
 8006784:	40013400 	.word	0x40013400

08006788 <TIM_TI1_ConfigInputStage>:
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f023 0201 	bic.w	r2, r3, #1
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	621a      	str	r2, [r3, #32]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067b2:	613b      	str	r3, [r7, #16]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f023 030a 	bic.w	r3, r3, #10
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	619a      	str	r2, [r3, #24]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	621a      	str	r2, [r3, #32]
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	bc80      	pop	{r7}
 80067e2:	4770      	bx	lr

080067e4 <TIM_TI2_ConfigInputStage>:
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	f023 0210 	bic.w	r2, r3, #16
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	621a      	str	r2, [r3, #32]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	031b      	lsls	r3, r3, #12
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	619a      	str	r2, [r3, #24]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	621a      	str	r2, [r3, #32]
 8006838:	bf00      	nop
 800683a:	371c      	adds	r7, #28
 800683c:	46bd      	mov	sp, r7
 800683e:	bc80      	pop	{r7}
 8006840:	4770      	bx	lr

08006842 <TIM_ITRx_SetConfig>:
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	6039      	str	r1, [r7, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	683a      	ldr	r2, [r7, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	f043 0307 	orr.w	r3, r3, #7
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	609a      	str	r2, [r3, #8]
 800686c:	bf00      	nop
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr

08006876 <TIM_ETR_SetConfig>:
 8006876:	b480      	push	{r7}
 8006878:	b087      	sub	sp, #28
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	607a      	str	r2, [r7, #4]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	021a      	lsls	r2, r3, #8
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	431a      	orrs	r2, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	4313      	orrs	r3, r2
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	609a      	str	r2, [r3, #8]
 80068aa:	bf00      	nop
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bc80      	pop	{r7}
 80068b2:	4770      	bx	lr

080068b4 <TIM_CCxChannelCmd>:
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f003 031f 	and.w	r3, r3, #31
 80068c6:	2201      	movs	r2, #1
 80068c8:	fa02 f303 	lsl.w	r3, r2, r3
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1a      	ldr	r2, [r3, #32]
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	43db      	mvns	r3, r3
 80068d6:	401a      	ands	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	621a      	str	r2, [r3, #32]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a1a      	ldr	r2, [r3, #32]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 031f 	and.w	r3, r3, #31
 80068e6:	6879      	ldr	r1, [r7, #4]
 80068e8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ec:	431a      	orrs	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	621a      	str	r2, [r3, #32]
 80068f2:	bf00      	nop
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr

080068fc <HAL_TIMEx_MasterConfigSynchronization>:
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006910:	2302      	movs	r3, #2
 8006912:	e050      	b.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	60bb      	str	r3, [r7, #8]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	605a      	str	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d018      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a19      	ldr	r2, [pc, #100]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d013      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696a:	d00e      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a15      	ldr	r2, [pc, #84]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d009      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a14      	ldr	r2, [pc, #80]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d004      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a12      	ldr	r2, [pc, #72]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d10c      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006990:	60bb      	str	r3, [r7, #8]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	609a      	str	r2, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80069b4:	2300      	movs	r3, #0
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bc80      	pop	{r7}
 80069be:	4770      	bx	lr
 80069c0:	40012c00 	.word	0x40012c00
 80069c4:	40013400 	.word	0x40013400
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00

080069d4 <HAL_TIMEx_CommutCallback>:
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bc80      	pop	{r7}
 80069e4:	4770      	bx	lr

080069e6 <HAL_TIMEx_BreakCallback>:
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr

080069f8 <osKernelInitialize>:
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	f3ef 8305 	mrs	r3, IPSR
 8006a02:	60bb      	str	r3, [r7, #8]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10f      	bne.n	8006a2a <osKernelInitialize+0x32>
 8006a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a0e:	607b      	str	r3, [r7, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <osKernelInitialize+0x32>
 8006a16:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <osKernelInitialize+0x60>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d109      	bne.n	8006a32 <osKernelInitialize+0x3a>
 8006a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <osKernelInitialize+0x3a>
 8006a2a:	f06f 0305 	mvn.w	r3, #5
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	e00c      	b.n	8006a4c <osKernelInitialize+0x54>
 8006a32:	4b09      	ldr	r3, [pc, #36]	; (8006a58 <osKernelInitialize+0x60>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d105      	bne.n	8006a46 <osKernelInitialize+0x4e>
 8006a3a:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <osKernelInitialize+0x60>)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e002      	b.n	8006a4c <osKernelInitialize+0x54>
 8006a46:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bc80      	pop	{r7}
 8006a56:	4770      	bx	lr
 8006a58:	20000034 	.word	0x20000034

08006a5c <osKernelStart>:
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	f3ef 8305 	mrs	r3, IPSR
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10f      	bne.n	8006a8e <osKernelStart+0x32>
 8006a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a72:	607b      	str	r3, [r7, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d109      	bne.n	8006a8e <osKernelStart+0x32>
 8006a7a:	4b11      	ldr	r3, [pc, #68]	; (8006ac0 <osKernelStart+0x64>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d109      	bne.n	8006a96 <osKernelStart+0x3a>
 8006a82:	f3ef 8311 	mrs	r3, BASEPRI
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <osKernelStart+0x3a>
 8006a8e:	f06f 0305 	mvn.w	r3, #5
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	e00e      	b.n	8006ab4 <osKernelStart+0x58>
 8006a96:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <osKernelStart+0x64>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d107      	bne.n	8006aae <osKernelStart+0x52>
 8006a9e:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <osKernelStart+0x64>)
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	f001 f8e6 	bl	8007c74 <vTaskStartScheduler>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	e002      	b.n	8006ab4 <osKernelStart+0x58>
 8006aae:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20000034 	.word	0x20000034

08006ac4 <osThreadNew>:
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b092      	sub	sp, #72	; 0x48
 8006ac8:	af04      	add	r7, sp, #16
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	f3ef 8305 	mrs	r3, IPSR
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f040 8094 	bne.w	8006c0a <osThreadNew+0x146>
 8006ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae6:	623b      	str	r3, [r7, #32]
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f040 808d 	bne.w	8006c0a <osThreadNew+0x146>
 8006af0:	4b48      	ldr	r3, [pc, #288]	; (8006c14 <osThreadNew+0x150>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d106      	bne.n	8006b06 <osThreadNew+0x42>
 8006af8:	f3ef 8311 	mrs	r3, BASEPRI
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f040 8082 	bne.w	8006c0a <osThreadNew+0x146>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d07e      	beq.n	8006c0a <osThreadNew+0x146>
 8006b0c:	2380      	movs	r3, #128	; 0x80
 8006b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b10:	2318      	movs	r3, #24
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b14:	2300      	movs	r3, #0
 8006b16:	76fb      	strb	r3, [r7, #27]
 8006b18:	f107 031b 	add.w	r3, r7, #27
 8006b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d045      	beq.n	8006bb6 <osThreadNew+0xf2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <osThreadNew+0x74>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	637b      	str	r3, [r7, #52]	; 0x34
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <osThreadNew+0x82>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d008      	beq.n	8006b5e <osThreadNew+0x9a>
 8006b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4e:	2b38      	cmp	r3, #56	; 0x38
 8006b50:	d805      	bhi.n	8006b5e <osThreadNew+0x9a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <osThreadNew+0x9e>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	e054      	b.n	8006c0c <osThreadNew+0x148>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <osThreadNew+0xae>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	089b      	lsrs	r3, r3, #2
 8006b70:	633b      	str	r3, [r7, #48]	; 0x30
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00e      	beq.n	8006b98 <osThreadNew+0xd4>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2b5b      	cmp	r3, #91	; 0x5b
 8006b80:	d90a      	bls.n	8006b98 <osThreadNew+0xd4>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d006      	beq.n	8006b98 <osThreadNew+0xd4>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <osThreadNew+0xd4>
 8006b92:	2301      	movs	r3, #1
 8006b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b96:	e010      	b.n	8006bba <osThreadNew+0xf6>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10c      	bne.n	8006bba <osThreadNew+0xf6>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d108      	bne.n	8006bba <osThreadNew+0xf6>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <osThreadNew+0xf6>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb4:	e001      	b.n	8006bba <osThreadNew+0xf6>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d110      	bne.n	8006be2 <osThreadNew+0x11e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6892      	ldr	r2, [r2, #8]
 8006bc8:	9202      	str	r2, [sp, #8]
 8006bca:	9301      	str	r3, [sp, #4]
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 fecc 	bl	8007974 <xTaskCreateStatic>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e013      	b.n	8006c0a <osThreadNew+0x146>
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d110      	bne.n	8006c0a <osThreadNew+0x146>
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	f107 0314 	add.w	r3, r7, #20
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 feea 	bl	80079d4 <xTaskCreate>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d001      	beq.n	8006c0a <osThreadNew+0x146>
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3738      	adds	r7, #56	; 0x38
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	20000034 	.word	0x20000034

08006c18 <vApplicationGetIdleTaskMemory>:
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4a06      	ldr	r2, [pc, #24]	; (8006c40 <vApplicationGetIdleTaskMemory+0x28>)
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	4a05      	ldr	r2, [pc, #20]	; (8006c44 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2280      	movs	r2, #128	; 0x80
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr
 8006c40:	20000038 	.word	0x20000038
 8006c44:	20000094 	.word	0x20000094

08006c48 <vApplicationGetTimerTaskMemory>:
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4a07      	ldr	r2, [pc, #28]	; (8006c74 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	4a06      	ldr	r2, [pc, #24]	; (8006c78 <vApplicationGetTimerTaskMemory+0x30>)
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	bf00      	nop
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	20000294 	.word	0x20000294
 8006c78:	200002f0 	.word	0x200002f0

08006c7c <vListInitialise>:
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f103 0208 	add.w	r2, r3, #8
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	605a      	str	r2, [r3, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f04f 32ff 	mov.w	r2, #4294967295
 8006c94:	609a      	str	r2, [r3, #8]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f103 0208 	add.w	r2, r3, #8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	60da      	str	r2, [r3, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f103 0208 	add.w	r2, r3, #8
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	611a      	str	r2, [r3, #16]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bc80      	pop	{r7}
 8006cb8:	4770      	bx	lr

08006cba <vListInitialiseItem>:
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	611a      	str	r2, [r3, #16]
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr

08006cd2 <vListInsertEnd>:
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	6039      	str	r1, [r7, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	605a      	str	r2, [r3, #4]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	609a      	str	r2, [r3, #8]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	605a      	str	r2, [r3, #4]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	609a      	str	r2, [r3, #8]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	611a      	str	r2, [r3, #16]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	bf00      	nop
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bc80      	pop	{r7}
 8006d16:	4770      	bx	lr

08006d18 <vListInsert>:
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60bb      	str	r3, [r7, #8]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d2e:	d103      	bne.n	8006d38 <vListInsert+0x20>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	e00c      	b.n	8006d52 <vListInsert+0x3a>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	e002      	b.n	8006d46 <vListInsert+0x2e>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d2f6      	bcs.n	8006d40 <vListInsert+0x28>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	605a      	str	r2, [r3, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	609a      	str	r2, [r3, #8]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	609a      	str	r2, [r3, #8]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	605a      	str	r2, [r3, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	611a      	str	r2, [r3, #16]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	bf00      	nop
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bc80      	pop	{r7}
 8006d86:	4770      	bx	lr

08006d88 <uxListRemove>:
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6892      	ldr	r2, [r2, #8]
 8006d9e:	609a      	str	r2, [r3, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6852      	ldr	r2, [r2, #4]
 8006da8:	605a      	str	r2, [r3, #4]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d103      	bne.n	8006dbc <uxListRemove+0x34>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	605a      	str	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	611a      	str	r2, [r3, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	1e5a      	subs	r2, r3, #1
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr
	...

08006ddc <xQueueGenericReset>:
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	f001 ffdd 	bl	8008da8 <vPortEnterCritical>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df6:	68f9      	ldr	r1, [r7, #12]
 8006df8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006dfa:	fb01 f303 	mul.w	r3, r1, r3
 8006dfe:	441a      	add	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	605a      	str	r2, [r3, #4]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	639a      	str	r2, [r3, #56]	; 0x38
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	609a      	str	r2, [r3, #8]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	68f9      	ldr	r1, [r7, #12]
 8006e1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e20:	fb01 f303 	mul.w	r3, r1, r3
 8006e24:	441a      	add	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	60da      	str	r2, [r3, #12]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	22ff      	movs	r2, #255	; 0xff
 8006e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	22ff      	movs	r2, #255	; 0xff
 8006e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d114      	bne.n	8006e6a <xQueueGenericReset+0x8e>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01a      	beq.n	8006e7e <xQueueGenericReset+0xa2>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3310      	adds	r3, #16
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 f943 	bl	80080d8 <xTaskRemoveFromEventList>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d012      	beq.n	8006e7e <xQueueGenericReset+0xa2>
 8006e58:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <xQueueGenericReset+0xb0>)
 8006e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	e009      	b.n	8006e7e <xQueueGenericReset+0xa2>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3310      	adds	r3, #16
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff ff04 	bl	8006c7c <vListInitialise>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3324      	adds	r3, #36	; 0x24
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7ff feff 	bl	8006c7c <vListInitialise>
 8006e7e:	f001 ffad 	bl	8008ddc <vPortExitCritical>
 8006e82:	2301      	movs	r3, #1
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	e000ed04 	.word	0xe000ed04

08006e90 <xQueueGenericCreateStatic>:
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00d      	beq.n	8006ec4 <xQueueGenericCreateStatic+0x34>
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006eb0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f835 	bl	8006f2e <prvInitialiseNewQueue>
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <xQueueGenericCreate>:
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b08a      	sub	sp, #40	; 0x28
 8006ed2:	af02      	add	r7, sp, #8
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	71fb      	strb	r3, [r7, #7]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d102      	bne.n	8006ee8 <xQueueGenericCreate+0x1a>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	61fb      	str	r3, [r7, #28]
 8006ee6:	e004      	b.n	8006ef2 <xQueueGenericCreate+0x24>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	fb02 f303 	mul.w	r3, r2, r3
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	3350      	adds	r3, #80	; 0x50
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f001 fff2 	bl	8008ee0 <pvPortMalloc>
 8006efc:	61b8      	str	r0, [r7, #24]
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00f      	beq.n	8006f24 <xQueueGenericCreate+0x56>
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	3350      	adds	r3, #80	; 0x50
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f12:	79fa      	ldrb	r2, [r7, #7]
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 f805 	bl	8006f2e <prvInitialiseNewQueue>
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	4618      	mov	r0, r3
 8006f28:	3720      	adds	r7, #32
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <prvInitialiseNewQueue>:
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	70fb      	strb	r3, [r7, #3]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d103      	bne.n	8006f4a <prvInitialiseNewQueue+0x1c>
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	e002      	b.n	8006f50 <prvInitialiseNewQueue+0x22>
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	641a      	str	r2, [r3, #64]	; 0x40
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	69b8      	ldr	r0, [r7, #24]
 8006f60:	f7ff ff3c 	bl	8006ddc <xQueueGenericReset>
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	78fa      	ldrb	r2, [r7, #3]
 8006f68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8006f6c:	bf00      	nop
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <xQueueCreateCountingSemaphore>:
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	2100      	movs	r1, #0
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff ffa3 	bl	8006ece <xQueueGenericCreate>
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <xQueueCreateCountingSemaphore+0x22>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <xQueueGenericSend>:
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08a      	sub	sp, #40	; 0x28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	603b      	str	r3, [r7, #0]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	623b      	str	r3, [r7, #32]
 8006fb6:	f001 fef7 	bl	8008da8 <vPortEnterCritical>
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d302      	bcc.n	8006fcc <xQueueGenericSend+0x2c>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d129      	bne.n	8007020 <xQueueGenericSend+0x80>
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	6a38      	ldr	r0, [r7, #32]
 8006fd2:	f000 fb62 	bl	800769a <prvCopyDataToQueue>
 8006fd6:	61f8      	str	r0, [r7, #28]
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d010      	beq.n	8007002 <xQueueGenericSend+0x62>
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	3324      	adds	r3, #36	; 0x24
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f001 f877 	bl	80080d8 <xTaskRemoveFromEventList>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d013      	beq.n	8007018 <xQueueGenericSend+0x78>
 8006ff0:	4b3f      	ldr	r3, [pc, #252]	; (80070f0 <xQueueGenericSend+0x150>)
 8006ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	e00a      	b.n	8007018 <xQueueGenericSend+0x78>
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d007      	beq.n	8007018 <xQueueGenericSend+0x78>
 8007008:	4b39      	ldr	r3, [pc, #228]	; (80070f0 <xQueueGenericSend+0x150>)
 800700a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f001 fee0 	bl	8008ddc <vPortExitCritical>
 800701c:	2301      	movs	r3, #1
 800701e:	e063      	b.n	80070e8 <xQueueGenericSend+0x148>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d103      	bne.n	800702e <xQueueGenericSend+0x8e>
 8007026:	f001 fed9 	bl	8008ddc <vPortExitCritical>
 800702a:	2300      	movs	r3, #0
 800702c:	e05c      	b.n	80070e8 <xQueueGenericSend+0x148>
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	2b00      	cmp	r3, #0
 8007032:	d106      	bne.n	8007042 <xQueueGenericSend+0xa2>
 8007034:	f107 0314 	add.w	r3, r7, #20
 8007038:	4618      	mov	r0, r3
 800703a:	f001 f8a3 	bl	8008184 <vTaskInternalSetTimeOutState>
 800703e:	2301      	movs	r3, #1
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
 8007042:	f001 fecb 	bl	8008ddc <vPortExitCritical>
 8007046:	f000 fe6d 	bl	8007d24 <vTaskSuspendAll>
 800704a:	f001 fead 	bl	8008da8 <vPortEnterCritical>
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007054:	b25b      	sxtb	r3, r3
 8007056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705a:	d103      	bne.n	8007064 <xQueueGenericSend+0xc4>
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800706a:	b25b      	sxtb	r3, r3
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d103      	bne.n	800707a <xQueueGenericSend+0xda>
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800707a:	f001 feaf 	bl	8008ddc <vPortExitCritical>
 800707e:	1d3a      	adds	r2, r7, #4
 8007080:	f107 0314 	add.w	r3, r7, #20
 8007084:	4611      	mov	r1, r2
 8007086:	4618      	mov	r0, r3
 8007088:	f001 f892 	bl	80081b0 <xTaskCheckForTimeOut>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d124      	bne.n	80070dc <xQueueGenericSend+0x13c>
 8007092:	6a38      	ldr	r0, [r7, #32]
 8007094:	f000 fbf9 	bl	800788a <prvIsQueueFull>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d018      	beq.n	80070d0 <xQueueGenericSend+0x130>
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	3310      	adds	r3, #16
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	4611      	mov	r1, r2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 ffe2 	bl	8008070 <vTaskPlaceOnEventList>
 80070ac:	6a38      	ldr	r0, [r7, #32]
 80070ae:	f000 fb84 	bl	80077ba <prvUnlockQueue>
 80070b2:	f000 fe45 	bl	8007d40 <xTaskResumeAll>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f47f af7c 	bne.w	8006fb6 <xQueueGenericSend+0x16>
 80070be:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <xQueueGenericSend+0x150>)
 80070c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	e772      	b.n	8006fb6 <xQueueGenericSend+0x16>
 80070d0:	6a38      	ldr	r0, [r7, #32]
 80070d2:	f000 fb72 	bl	80077ba <prvUnlockQueue>
 80070d6:	f000 fe33 	bl	8007d40 <xTaskResumeAll>
 80070da:	e76c      	b.n	8006fb6 <xQueueGenericSend+0x16>
 80070dc:	6a38      	ldr	r0, [r7, #32]
 80070de:	f000 fb6c 	bl	80077ba <prvUnlockQueue>
 80070e2:	f000 fe2d 	bl	8007d40 <xTaskResumeAll>
 80070e6:	2300      	movs	r3, #0
 80070e8:	4618      	mov	r0, r3
 80070ea:	3728      	adds	r7, #40	; 0x28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	e000ed04 	.word	0xe000ed04

080070f4 <xQueueGenericSendFromISR>:
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08c      	sub	sp, #48	; 0x30
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	603b      	str	r3, [r7, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	62bb      	str	r3, [r7, #40]	; 0x28
 8007106:	f3ef 8211 	mrs	r2, BASEPRI
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	61fa      	str	r2, [r7, #28]
 800711c:	61bb      	str	r3, [r7, #24]
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
 8007122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712a:	429a      	cmp	r2, r3
 800712c:	d302      	bcc.n	8007134 <xQueueGenericSendFromISR+0x40>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d12c      	bne.n	800718e <xQueueGenericSendFromISR+0x9a>
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800713a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007144:	f000 faa9 	bl	800769a <prvCopyDataToQueue>
 8007148:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007150:	d112      	bne.n	8007178 <xQueueGenericSendFromISR+0x84>
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	2b00      	cmp	r3, #0
 8007158:	d016      	beq.n	8007188 <xQueueGenericSendFromISR+0x94>
 800715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715c:	3324      	adds	r3, #36	; 0x24
 800715e:	4618      	mov	r0, r3
 8007160:	f000 ffba 	bl	80080d8 <xTaskRemoveFromEventList>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00e      	beq.n	8007188 <xQueueGenericSendFromISR+0x94>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <xQueueGenericSendFromISR+0x94>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	e007      	b.n	8007188 <xQueueGenericSendFromISR+0x94>
 8007178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800717c:	3301      	adds	r3, #1
 800717e:	b2db      	uxtb	r3, r3
 8007180:	b25a      	sxtb	r2, r3
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007188:	2301      	movs	r3, #1
 800718a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800718c:	e001      	b.n	8007192 <xQueueGenericSendFromISR+0x9e>
 800718e:	2300      	movs	r3, #0
 8007190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	617b      	str	r3, [r7, #20]
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	bf00      	nop
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	4618      	mov	r0, r3
 80071a2:	3730      	adds	r7, #48	; 0x30
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <xQueueGiveFromISR>:
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08a      	sub	sp, #40	; 0x28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	623b      	str	r3, [r7, #32]
 80071b6:	f3ef 8211 	mrs	r2, BASEPRI
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	613a      	str	r2, [r7, #16]
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	61fb      	str	r3, [r7, #28]
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	61bb      	str	r3, [r7, #24]
 80071d8:	6a3b      	ldr	r3, [r7, #32]
 80071da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d229      	bcs.n	8007236 <xQueueGiveFromISR+0x8e>
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071e8:	75fb      	strb	r3, [r7, #23]
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	639a      	str	r2, [r3, #56]	; 0x38
 80071f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fa:	d112      	bne.n	8007222 <xQueueGiveFromISR+0x7a>
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	2b00      	cmp	r3, #0
 8007202:	d015      	beq.n	8007230 <xQueueGiveFromISR+0x88>
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	3324      	adds	r3, #36	; 0x24
 8007208:	4618      	mov	r0, r3
 800720a:	f000 ff65 	bl	80080d8 <xTaskRemoveFromEventList>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00d      	beq.n	8007230 <xQueueGiveFromISR+0x88>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <xQueueGiveFromISR+0x88>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2201      	movs	r2, #1
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	e006      	b.n	8007230 <xQueueGiveFromISR+0x88>
 8007222:	7dfb      	ldrb	r3, [r7, #23]
 8007224:	3301      	adds	r3, #1
 8007226:	b2db      	uxtb	r3, r3
 8007228:	b25a      	sxtb	r2, r3
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007230:	2301      	movs	r3, #1
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
 8007234:	e001      	b.n	800723a <xQueueGiveFromISR+0x92>
 8007236:	2300      	movs	r3, #0
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	60bb      	str	r3, [r7, #8]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	bf00      	nop
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	4618      	mov	r0, r3
 800724a:	3728      	adds	r7, #40	; 0x28
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <xQueueReceive>:
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	; 0x28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	2300      	movs	r3, #0
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	623b      	str	r3, [r7, #32]
 8007264:	f001 fda0 	bl	8008da8 <vPortEnterCritical>
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	61fb      	str	r3, [r7, #28]
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d01f      	beq.n	80072b4 <xQueueReceive+0x64>
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	6a38      	ldr	r0, [r7, #32]
 8007278:	f000 fa79 	bl	800776e <prvCopyDataFromQueue>
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	1e5a      	subs	r2, r3, #1
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	639a      	str	r2, [r3, #56]	; 0x38
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00f      	beq.n	80072ac <xQueueReceive+0x5c>
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	3310      	adds	r3, #16
 8007290:	4618      	mov	r0, r3
 8007292:	f000 ff21 	bl	80080d8 <xTaskRemoveFromEventList>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d007      	beq.n	80072ac <xQueueReceive+0x5c>
 800729c:	4b3c      	ldr	r3, [pc, #240]	; (8007390 <xQueueReceive+0x140>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f001 fd96 	bl	8008ddc <vPortExitCritical>
 80072b0:	2301      	movs	r3, #1
 80072b2:	e069      	b.n	8007388 <xQueueReceive+0x138>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d103      	bne.n	80072c2 <xQueueReceive+0x72>
 80072ba:	f001 fd8f 	bl	8008ddc <vPortExitCritical>
 80072be:	2300      	movs	r3, #0
 80072c0:	e062      	b.n	8007388 <xQueueReceive+0x138>
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d106      	bne.n	80072d6 <xQueueReceive+0x86>
 80072c8:	f107 0314 	add.w	r3, r7, #20
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 ff59 	bl	8008184 <vTaskInternalSetTimeOutState>
 80072d2:	2301      	movs	r3, #1
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
 80072d6:	f001 fd81 	bl	8008ddc <vPortExitCritical>
 80072da:	f000 fd23 	bl	8007d24 <vTaskSuspendAll>
 80072de:	f001 fd63 	bl	8008da8 <vPortEnterCritical>
 80072e2:	6a3b      	ldr	r3, [r7, #32]
 80072e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072e8:	b25b      	sxtb	r3, r3
 80072ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ee:	d103      	bne.n	80072f8 <xQueueReceive+0xa8>
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072fe:	b25b      	sxtb	r3, r3
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	d103      	bne.n	800730e <xQueueReceive+0xbe>
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800730e:	f001 fd65 	bl	8008ddc <vPortExitCritical>
 8007312:	1d3a      	adds	r2, r7, #4
 8007314:	f107 0314 	add.w	r3, r7, #20
 8007318:	4611      	mov	r1, r2
 800731a:	4618      	mov	r0, r3
 800731c:	f000 ff48 	bl	80081b0 <xTaskCheckForTimeOut>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d123      	bne.n	800736e <xQueueReceive+0x11e>
 8007326:	6a38      	ldr	r0, [r7, #32]
 8007328:	f000 fa99 	bl	800785e <prvIsQueueEmpty>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d017      	beq.n	8007362 <xQueueReceive+0x112>
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	3324      	adds	r3, #36	; 0x24
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	4611      	mov	r1, r2
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fe98 	bl	8008070 <vTaskPlaceOnEventList>
 8007340:	6a38      	ldr	r0, [r7, #32]
 8007342:	f000 fa3a 	bl	80077ba <prvUnlockQueue>
 8007346:	f000 fcfb 	bl	8007d40 <xTaskResumeAll>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d189      	bne.n	8007264 <xQueueReceive+0x14>
 8007350:	4b0f      	ldr	r3, [pc, #60]	; (8007390 <xQueueReceive+0x140>)
 8007352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	e780      	b.n	8007264 <xQueueReceive+0x14>
 8007362:	6a38      	ldr	r0, [r7, #32]
 8007364:	f000 fa29 	bl	80077ba <prvUnlockQueue>
 8007368:	f000 fcea 	bl	8007d40 <xTaskResumeAll>
 800736c:	e77a      	b.n	8007264 <xQueueReceive+0x14>
 800736e:	6a38      	ldr	r0, [r7, #32]
 8007370:	f000 fa23 	bl	80077ba <prvUnlockQueue>
 8007374:	f000 fce4 	bl	8007d40 <xTaskResumeAll>
 8007378:	6a38      	ldr	r0, [r7, #32]
 800737a:	f000 fa70 	bl	800785e <prvIsQueueEmpty>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	f43f af6f 	beq.w	8007264 <xQueueReceive+0x14>
 8007386:	2300      	movs	r3, #0
 8007388:	4618      	mov	r0, r3
 800738a:	3728      	adds	r7, #40	; 0x28
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	e000ed04 	.word	0xe000ed04

08007394 <xQueueSemaphoreTake>:
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	; 0x28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
 800739e:	2300      	movs	r3, #0
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	61fb      	str	r3, [r7, #28]
 80073a6:	2300      	movs	r3, #0
 80073a8:	623b      	str	r3, [r7, #32]
 80073aa:	f001 fcfd 	bl	8008da8 <vPortEnterCritical>
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b2:	61bb      	str	r3, [r7, #24]
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d024      	beq.n	8007404 <xQueueSemaphoreTake+0x70>
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	1e5a      	subs	r2, r3, #1
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d104      	bne.n	80073d4 <xQueueSemaphoreTake+0x40>
 80073ca:	f001 f949 	bl	8008660 <pvTaskIncrementMutexHeldCount>
 80073ce:	4602      	mov	r2, r0
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	605a      	str	r2, [r3, #4]
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00f      	beq.n	80073fc <xQueueSemaphoreTake+0x68>
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	3310      	adds	r3, #16
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fe79 	bl	80080d8 <xTaskRemoveFromEventList>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d007      	beq.n	80073fc <xQueueSemaphoreTake+0x68>
 80073ec:	4b4c      	ldr	r3, [pc, #304]	; (8007520 <xQueueSemaphoreTake+0x18c>)
 80073ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f001 fcee 	bl	8008ddc <vPortExitCritical>
 8007400:	2301      	movs	r3, #1
 8007402:	e089      	b.n	8007518 <xQueueSemaphoreTake+0x184>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d103      	bne.n	8007412 <xQueueSemaphoreTake+0x7e>
 800740a:	f001 fce7 	bl	8008ddc <vPortExitCritical>
 800740e:	2300      	movs	r3, #0
 8007410:	e082      	b.n	8007518 <xQueueSemaphoreTake+0x184>
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	d106      	bne.n	8007426 <xQueueSemaphoreTake+0x92>
 8007418:	f107 030c 	add.w	r3, r7, #12
 800741c:	4618      	mov	r0, r3
 800741e:	f000 feb1 	bl	8008184 <vTaskInternalSetTimeOutState>
 8007422:	2301      	movs	r3, #1
 8007424:	627b      	str	r3, [r7, #36]	; 0x24
 8007426:	f001 fcd9 	bl	8008ddc <vPortExitCritical>
 800742a:	f000 fc7b 	bl	8007d24 <vTaskSuspendAll>
 800742e:	f001 fcbb 	bl	8008da8 <vPortEnterCritical>
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007438:	b25b      	sxtb	r3, r3
 800743a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743e:	d103      	bne.n	8007448 <xQueueSemaphoreTake+0xb4>
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800744e:	b25b      	sxtb	r3, r3
 8007450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007454:	d103      	bne.n	800745e <xQueueSemaphoreTake+0xca>
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800745e:	f001 fcbd 	bl	8008ddc <vPortExitCritical>
 8007462:	463a      	mov	r2, r7
 8007464:	f107 030c 	add.w	r3, r7, #12
 8007468:	4611      	mov	r1, r2
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fea0 	bl	80081b0 <xTaskCheckForTimeOut>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d132      	bne.n	80074dc <xQueueSemaphoreTake+0x148>
 8007476:	69f8      	ldr	r0, [r7, #28]
 8007478:	f000 f9f1 	bl	800785e <prvIsQueueEmpty>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d026      	beq.n	80074d0 <xQueueSemaphoreTake+0x13c>
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <xQueueSemaphoreTake+0x10a>
 800748a:	f001 fc8d 	bl	8008da8 <vPortEnterCritical>
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	4618      	mov	r0, r3
 8007494:	f000 ffc4 	bl	8008420 <xTaskPriorityInherit>
 8007498:	6238      	str	r0, [r7, #32]
 800749a:	f001 fc9f 	bl	8008ddc <vPortExitCritical>
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	3324      	adds	r3, #36	; 0x24
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	4611      	mov	r1, r2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fde2 	bl	8008070 <vTaskPlaceOnEventList>
 80074ac:	69f8      	ldr	r0, [r7, #28]
 80074ae:	f000 f984 	bl	80077ba <prvUnlockQueue>
 80074b2:	f000 fc45 	bl	8007d40 <xTaskResumeAll>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f47f af76 	bne.w	80073aa <xQueueSemaphoreTake+0x16>
 80074be:	4b18      	ldr	r3, [pc, #96]	; (8007520 <xQueueSemaphoreTake+0x18c>)
 80074c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	e76c      	b.n	80073aa <xQueueSemaphoreTake+0x16>
 80074d0:	69f8      	ldr	r0, [r7, #28]
 80074d2:	f000 f972 	bl	80077ba <prvUnlockQueue>
 80074d6:	f000 fc33 	bl	8007d40 <xTaskResumeAll>
 80074da:	e766      	b.n	80073aa <xQueueSemaphoreTake+0x16>
 80074dc:	69f8      	ldr	r0, [r7, #28]
 80074de:	f000 f96c 	bl	80077ba <prvUnlockQueue>
 80074e2:	f000 fc2d 	bl	8007d40 <xTaskResumeAll>
 80074e6:	69f8      	ldr	r0, [r7, #28]
 80074e8:	f000 f9b9 	bl	800785e <prvIsQueueEmpty>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f43f af5b 	beq.w	80073aa <xQueueSemaphoreTake+0x16>
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00d      	beq.n	8007516 <xQueueSemaphoreTake+0x182>
 80074fa:	f001 fc55 	bl	8008da8 <vPortEnterCritical>
 80074fe:	69f8      	ldr	r0, [r7, #28]
 8007500:	f000 f8b4 	bl	800766c <prvGetDisinheritPriorityAfterTimeout>
 8007504:	6178      	str	r0, [r7, #20]
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	6979      	ldr	r1, [r7, #20]
 800750c:	4618      	mov	r0, r3
 800750e:	f001 f841 	bl	8008594 <vTaskPriorityDisinheritAfterTimeout>
 8007512:	f001 fc63 	bl	8008ddc <vPortExitCritical>
 8007516:	2300      	movs	r3, #0
 8007518:	4618      	mov	r0, r3
 800751a:	3728      	adds	r7, #40	; 0x28
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <xQueuePeek>:
 8007524:	b580      	push	{r7, lr}
 8007526:	b08a      	sub	sp, #40	; 0x28
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	2300      	movs	r3, #0
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	623b      	str	r3, [r7, #32]
 8007538:	f001 fc36 	bl	8008da8 <vPortEnterCritical>
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	61fb      	str	r3, [r7, #28]
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d021      	beq.n	800758c <xQueuePeek+0x68>
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	6a38      	ldr	r0, [r7, #32]
 8007552:	f000 f90c 	bl	800776e <prvCopyDataFromQueue>
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	60da      	str	r2, [r3, #12]
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00f      	beq.n	8007584 <xQueuePeek+0x60>
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	3324      	adds	r3, #36	; 0x24
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fdb5 	bl	80080d8 <xTaskRemoveFromEventList>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d007      	beq.n	8007584 <xQueuePeek+0x60>
 8007574:	4b3c      	ldr	r3, [pc, #240]	; (8007668 <xQueuePeek+0x144>)
 8007576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f001 fc2a 	bl	8008ddc <vPortExitCritical>
 8007588:	2301      	movs	r3, #1
 800758a:	e069      	b.n	8007660 <xQueuePeek+0x13c>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d103      	bne.n	800759a <xQueuePeek+0x76>
 8007592:	f001 fc23 	bl	8008ddc <vPortExitCritical>
 8007596:	2300      	movs	r3, #0
 8007598:	e062      	b.n	8007660 <xQueuePeek+0x13c>
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	d106      	bne.n	80075ae <xQueuePeek+0x8a>
 80075a0:	f107 0310 	add.w	r3, r7, #16
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 fded 	bl	8008184 <vTaskInternalSetTimeOutState>
 80075aa:	2301      	movs	r3, #1
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
 80075ae:	f001 fc15 	bl	8008ddc <vPortExitCritical>
 80075b2:	f000 fbb7 	bl	8007d24 <vTaskSuspendAll>
 80075b6:	f001 fbf7 	bl	8008da8 <vPortEnterCritical>
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075c0:	b25b      	sxtb	r3, r3
 80075c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c6:	d103      	bne.n	80075d0 <xQueuePeek+0xac>
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075d6:	b25b      	sxtb	r3, r3
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075dc:	d103      	bne.n	80075e6 <xQueuePeek+0xc2>
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075e6:	f001 fbf9 	bl	8008ddc <vPortExitCritical>
 80075ea:	1d3a      	adds	r2, r7, #4
 80075ec:	f107 0310 	add.w	r3, r7, #16
 80075f0:	4611      	mov	r1, r2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fddc 	bl	80081b0 <xTaskCheckForTimeOut>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d123      	bne.n	8007646 <xQueuePeek+0x122>
 80075fe:	6a38      	ldr	r0, [r7, #32]
 8007600:	f000 f92d 	bl	800785e <prvIsQueueEmpty>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d017      	beq.n	800763a <xQueuePeek+0x116>
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	3324      	adds	r3, #36	; 0x24
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	4611      	mov	r1, r2
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fd2c 	bl	8008070 <vTaskPlaceOnEventList>
 8007618:	6a38      	ldr	r0, [r7, #32]
 800761a:	f000 f8ce 	bl	80077ba <prvUnlockQueue>
 800761e:	f000 fb8f 	bl	8007d40 <xTaskResumeAll>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d187      	bne.n	8007538 <xQueuePeek+0x14>
 8007628:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <xQueuePeek+0x144>)
 800762a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	e77e      	b.n	8007538 <xQueuePeek+0x14>
 800763a:	6a38      	ldr	r0, [r7, #32]
 800763c:	f000 f8bd 	bl	80077ba <prvUnlockQueue>
 8007640:	f000 fb7e 	bl	8007d40 <xTaskResumeAll>
 8007644:	e778      	b.n	8007538 <xQueuePeek+0x14>
 8007646:	6a38      	ldr	r0, [r7, #32]
 8007648:	f000 f8b7 	bl	80077ba <prvUnlockQueue>
 800764c:	f000 fb78 	bl	8007d40 <xTaskResumeAll>
 8007650:	6a38      	ldr	r0, [r7, #32]
 8007652:	f000 f904 	bl	800785e <prvIsQueueEmpty>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	f43f af6d 	beq.w	8007538 <xQueuePeek+0x14>
 800765e:	2300      	movs	r3, #0
 8007660:	4618      	mov	r0, r3
 8007662:	3728      	adds	r7, #40	; 0x28
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <prvGetDisinheritPriorityAfterTimeout>:
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	d006      	beq.n	800768a <prvGetDisinheritPriorityAfterTimeout+0x1e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	e001      	b.n	800768e <prvGetDisinheritPriorityAfterTimeout+0x22>
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr

0800769a <prvCopyDataToQueue>:
 800769a:	b580      	push	{r7, lr}
 800769c:	b086      	sub	sp, #24
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	2300      	movs	r3, #0
 80076a8:	617b      	str	r3, [r7, #20]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	613b      	str	r3, [r7, #16]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10d      	bne.n	80076d4 <prvCopyDataToQueue+0x3a>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d14d      	bne.n	800775c <prvCopyDataToQueue+0xc2>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 ff19 	bl	80084fc <xTaskPriorityDisinherit>
 80076ca:	6178      	str	r0, [r7, #20]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	605a      	str	r2, [r3, #4]
 80076d2:	e043      	b.n	800775c <prvCopyDataToQueue+0xc2>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d119      	bne.n	800770e <prvCopyDataToQueue+0x74>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6898      	ldr	r0, [r3, #8]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	461a      	mov	r2, r3
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	f001 fda7 	bl	8009238 <memcpy>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	441a      	add	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	609a      	str	r2, [r3, #8]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	429a      	cmp	r2, r3
 8007702:	d32b      	bcc.n	800775c <prvCopyDataToQueue+0xc2>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	609a      	str	r2, [r3, #8]
 800770c:	e026      	b.n	800775c <prvCopyDataToQueue+0xc2>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	68d8      	ldr	r0, [r3, #12]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	461a      	mov	r2, r3
 8007718:	68b9      	ldr	r1, [r7, #8]
 800771a:	f001 fd8d 	bl	8009238 <memcpy>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	425b      	negs	r3, r3
 8007728:	441a      	add	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	60da      	str	r2, [r3, #12]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d207      	bcs.n	800774a <prvCopyDataToQueue+0xb0>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	425b      	negs	r3, r3
 8007744:	441a      	add	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	60da      	str	r2, [r3, #12]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b02      	cmp	r3, #2
 800774e:	d105      	bne.n	800775c <prvCopyDataToQueue+0xc2>
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <prvCopyDataToQueue+0xc2>
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	3b01      	subs	r3, #1
 800775a:	613b      	str	r3, [r7, #16]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	639a      	str	r2, [r3, #56]	; 0x38
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	4618      	mov	r0, r3
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <prvCopyDataFromQueue>:
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	2b00      	cmp	r3, #0
 800777e:	d018      	beq.n	80077b2 <prvCopyDataFromQueue+0x44>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	441a      	add	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60da      	str	r2, [r3, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	429a      	cmp	r2, r3
 8007798:	d303      	bcc.n	80077a2 <prvCopyDataFromQueue+0x34>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	60da      	str	r2, [r3, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68d9      	ldr	r1, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	461a      	mov	r2, r3
 80077ac:	6838      	ldr	r0, [r7, #0]
 80077ae:	f001 fd43 	bl	8009238 <memcpy>
 80077b2:	bf00      	nop
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <prvUnlockQueue>:
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	f001 faf1 	bl	8008da8 <vPortEnterCritical>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077cc:	73fb      	strb	r3, [r7, #15]
 80077ce:	e011      	b.n	80077f4 <prvUnlockQueue+0x3a>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d012      	beq.n	80077fe <prvUnlockQueue+0x44>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3324      	adds	r3, #36	; 0x24
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 fc7b 	bl	80080d8 <xTaskRemoveFromEventList>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <prvUnlockQueue+0x32>
 80077e8:	f000 fd28 	bl	800823c <vTaskMissedYield>
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	73fb      	strb	r3, [r7, #15]
 80077f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	dce9      	bgt.n	80077d0 <prvUnlockQueue+0x16>
 80077fc:	e000      	b.n	8007800 <prvUnlockQueue+0x46>
 80077fe:	bf00      	nop
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	22ff      	movs	r2, #255	; 0xff
 8007804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007808:	f001 fae8 	bl	8008ddc <vPortExitCritical>
 800780c:	f001 facc 	bl	8008da8 <vPortEnterCritical>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007816:	73bb      	strb	r3, [r7, #14]
 8007818:	e011      	b.n	800783e <prvUnlockQueue+0x84>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d012      	beq.n	8007848 <prvUnlockQueue+0x8e>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	3310      	adds	r3, #16
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fc56 	bl	80080d8 <xTaskRemoveFromEventList>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <prvUnlockQueue+0x7c>
 8007832:	f000 fd03 	bl	800823c <vTaskMissedYield>
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	3b01      	subs	r3, #1
 800783a:	b2db      	uxtb	r3, r3
 800783c:	73bb      	strb	r3, [r7, #14]
 800783e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007842:	2b00      	cmp	r3, #0
 8007844:	dce9      	bgt.n	800781a <prvUnlockQueue+0x60>
 8007846:	e000      	b.n	800784a <prvUnlockQueue+0x90>
 8007848:	bf00      	nop
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	22ff      	movs	r2, #255	; 0xff
 800784e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007852:	f001 fac3 	bl	8008ddc <vPortExitCritical>
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <prvIsQueueEmpty>:
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	f001 fa9f 	bl	8008da8 <vPortEnterCritical>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786e:	2b00      	cmp	r3, #0
 8007870:	d102      	bne.n	8007878 <prvIsQueueEmpty+0x1a>
 8007872:	2301      	movs	r3, #1
 8007874:	60fb      	str	r3, [r7, #12]
 8007876:	e001      	b.n	800787c <prvIsQueueEmpty+0x1e>
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	f001 faae 	bl	8008ddc <vPortExitCritical>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <prvIsQueueFull>:
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	f001 fa89 	bl	8008da8 <vPortEnterCritical>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789e:	429a      	cmp	r2, r3
 80078a0:	d102      	bne.n	80078a8 <prvIsQueueFull+0x1e>
 80078a2:	2301      	movs	r3, #1
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	e001      	b.n	80078ac <prvIsQueueFull+0x22>
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	f001 fa96 	bl	8008ddc <vPortExitCritical>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <vQueueAddToRegistry>:
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	e014      	b.n	80078f6 <vQueueAddToRegistry+0x3a>
 80078cc:	4a0e      	ldr	r2, [pc, #56]	; (8007908 <vQueueAddToRegistry+0x4c>)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10b      	bne.n	80078f0 <vQueueAddToRegistry+0x34>
 80078d8:	490b      	ldr	r1, [pc, #44]	; (8007908 <vQueueAddToRegistry+0x4c>)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80078e2:	4a09      	ldr	r2, [pc, #36]	; (8007908 <vQueueAddToRegistry+0x4c>)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	4413      	add	r3, r2
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	605a      	str	r2, [r3, #4]
 80078ee:	e006      	b.n	80078fe <vQueueAddToRegistry+0x42>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3301      	adds	r3, #1
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b07      	cmp	r3, #7
 80078fa:	d9e7      	bls.n	80078cc <vQueueAddToRegistry+0x10>
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr
 8007908:	20004698 	.word	0x20004698

0800790c <vQueueWaitForMessageRestricted>:
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	f001 fa44 	bl	8008da8 <vPortEnterCritical>
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007926:	b25b      	sxtb	r3, r3
 8007928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792c:	d103      	bne.n	8007936 <vQueueWaitForMessageRestricted+0x2a>
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800793c:	b25b      	sxtb	r3, r3
 800793e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007942:	d103      	bne.n	800794c <vQueueWaitForMessageRestricted+0x40>
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800794c:	f001 fa46 	bl	8008ddc <vPortExitCritical>
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007954:	2b00      	cmp	r3, #0
 8007956:	d106      	bne.n	8007966 <vQueueWaitForMessageRestricted+0x5a>
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	3324      	adds	r3, #36	; 0x24
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	68b9      	ldr	r1, [r7, #8]
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fb9b 	bl	800809c <vTaskPlaceOnEventListRestricted>
 8007966:	6978      	ldr	r0, [r7, #20]
 8007968:	f7ff ff27 	bl	80077ba <prvUnlockQueue>
 800796c:	bf00      	nop
 800796e:	3718      	adds	r7, #24
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <xTaskCreateStatic>:
 8007974:	b580      	push	{r7, lr}
 8007976:	b08a      	sub	sp, #40	; 0x28
 8007978:	af04      	add	r7, sp, #16
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01e      	beq.n	80079c6 <xTaskCreateStatic+0x52>
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01b      	beq.n	80079c6 <xTaskCreateStatic+0x52>
 800798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007990:	617b      	str	r3, [r7, #20]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007996:	631a      	str	r2, [r3, #48]	; 0x30
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80079a0:	2300      	movs	r3, #0
 80079a2:	9303      	str	r3, [sp, #12]
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	9302      	str	r3, [sp, #8]
 80079a8:	f107 0310 	add.w	r3, r7, #16
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 f850 	bl	8007a5e <prvInitialiseNewTask>
 80079be:	6978      	ldr	r0, [r7, #20]
 80079c0:	f000 f8c4 	bl	8007b4c <prvAddNewTaskToReadyList>
 80079c4:	e001      	b.n	80079ca <xTaskCreateStatic+0x56>
 80079c6:	2300      	movs	r3, #0
 80079c8:	613b      	str	r3, [r7, #16]
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	4618      	mov	r0, r3
 80079ce:	3718      	adds	r7, #24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <xTaskCreate>:
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08c      	sub	sp, #48	; 0x30
 80079d8:	af04      	add	r7, sp, #16
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	4613      	mov	r3, r2
 80079e2:	80fb      	strh	r3, [r7, #6]
 80079e4:	88fb      	ldrh	r3, [r7, #6]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 fa79 	bl	8008ee0 <pvPortMalloc>
 80079ee:	6178      	str	r0, [r7, #20]
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00e      	beq.n	8007a14 <xTaskCreate+0x40>
 80079f6:	205c      	movs	r0, #92	; 0x5c
 80079f8:	f001 fa72 	bl	8008ee0 <pvPortMalloc>
 80079fc:	61f8      	str	r0, [r7, #28]
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <xTaskCreate+0x38>
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30
 8007a0a:	e005      	b.n	8007a18 <xTaskCreate+0x44>
 8007a0c:	6978      	ldr	r0, [r7, #20]
 8007a0e:	f001 fafb 	bl	8009008 <vPortFree>
 8007a12:	e001      	b.n	8007a18 <xTaskCreate+0x44>
 8007a14:	2300      	movs	r3, #0
 8007a16:	61fb      	str	r3, [r7, #28]
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d017      	beq.n	8007a4e <xTaskCreate+0x7a>
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8007a26:	88fa      	ldrh	r2, [r7, #6]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	9303      	str	r3, [sp, #12]
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	9302      	str	r3, [sp, #8]
 8007a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a32:	9301      	str	r3, [sp, #4]
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68b9      	ldr	r1, [r7, #8]
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f80e 	bl	8007a5e <prvInitialiseNewTask>
 8007a42:	69f8      	ldr	r0, [r7, #28]
 8007a44:	f000 f882 	bl	8007b4c <prvAddNewTaskToReadyList>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	61bb      	str	r3, [r7, #24]
 8007a4c:	e002      	b.n	8007a54 <xTaskCreate+0x80>
 8007a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a52:	61bb      	str	r3, [r7, #24]
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	4618      	mov	r0, r3
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <prvInitialiseNewTask>:
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b086      	sub	sp, #24
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	461a      	mov	r2, r3
 8007a76:	21a5      	movs	r1, #165	; 0xa5
 8007a78:	f001 fbec 	bl	8009254 <memset>
 8007a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a86:	3b01      	subs	r3, #1
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	613b      	str	r3, [r7, #16]
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f023 0307 	bic.w	r3, r3, #7
 8007a94:	613b      	str	r3, [r7, #16]
 8007a96:	2300      	movs	r3, #0
 8007a98:	617b      	str	r3, [r7, #20]
 8007a9a:	e012      	b.n	8007ac2 <prvInitialiseNewTask+0x64>
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	7819      	ldrb	r1, [r3, #0]
 8007aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	3334      	adds	r3, #52	; 0x34
 8007aac:	460a      	mov	r2, r1
 8007aae:	701a      	strb	r2, [r3, #0]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d006      	beq.n	8007aca <prvInitialiseNewTask+0x6c>
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	617b      	str	r3, [r7, #20]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b0f      	cmp	r3, #15
 8007ac6:	d9e9      	bls.n	8007a9c <prvInitialiseNewTask+0x3e>
 8007ac8:	e000      	b.n	8007acc <prvInitialiseNewTask+0x6e>
 8007aca:	bf00      	nop
 8007acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	2b37      	cmp	r3, #55	; 0x37
 8007ad8:	d901      	bls.n	8007ade <prvInitialiseNewTask+0x80>
 8007ada:	2337      	movs	r3, #55	; 0x37
 8007adc:	623b      	str	r3, [r7, #32]
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	6a3a      	ldr	r2, [r7, #32]
 8007ae2:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	6a3a      	ldr	r2, [r7, #32]
 8007ae8:	64da      	str	r2, [r3, #76]	; 0x4c
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	2200      	movs	r2, #0
 8007aee:	651a      	str	r2, [r3, #80]	; 0x50
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	3304      	adds	r3, #4
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff f8e0 	bl	8006cba <vListInitialiseItem>
 8007afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afc:	3318      	adds	r3, #24
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff f8db 	bl	8006cba <vListInitialiseItem>
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b08:	611a      	str	r2, [r3, #16]
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b12:	619a      	str	r2, [r3, #24]
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b18:	625a      	str	r2, [r3, #36]	; 0x24
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	655a      	str	r2, [r3, #84]	; 0x54
 8007b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	68f9      	ldr	r1, [r7, #12]
 8007b2c:	6938      	ldr	r0, [r7, #16]
 8007b2e:	f001 f8af 	bl	8008c90 <pxPortInitialiseStack>
 8007b32:	4602      	mov	r2, r0
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <prvInitialiseNewTask+0xe6>
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	bf00      	nop
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <prvAddNewTaskToReadyList>:
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	f001 f928 	bl	8008da8 <vPortEnterCritical>
 8007b58:	4b2d      	ldr	r3, [pc, #180]	; (8007c10 <prvAddNewTaskToReadyList+0xc4>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	4a2c      	ldr	r2, [pc, #176]	; (8007c10 <prvAddNewTaskToReadyList+0xc4>)
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	4b2c      	ldr	r3, [pc, #176]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d109      	bne.n	8007b7e <prvAddNewTaskToReadyList+0x32>
 8007b6a:	4a2a      	ldr	r2, [pc, #168]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	4b27      	ldr	r3, [pc, #156]	; (8007c10 <prvAddNewTaskToReadyList+0xc4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d110      	bne.n	8007b9a <prvAddNewTaskToReadyList+0x4e>
 8007b78:	f000 fb84 	bl	8008284 <prvInitialiseTaskLists>
 8007b7c:	e00d      	b.n	8007b9a <prvAddNewTaskToReadyList+0x4e>
 8007b7e:	4b26      	ldr	r3, [pc, #152]	; (8007c18 <prvAddNewTaskToReadyList+0xcc>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <prvAddNewTaskToReadyList+0x4e>
 8007b86:	4b23      	ldr	r3, [pc, #140]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d802      	bhi.n	8007b9a <prvAddNewTaskToReadyList+0x4e>
 8007b94:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	4b20      	ldr	r3, [pc, #128]	; (8007c1c <prvAddNewTaskToReadyList+0xd0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	4a1e      	ldr	r2, [pc, #120]	; (8007c1c <prvAddNewTaskToReadyList+0xd0>)
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	4b1d      	ldr	r3, [pc, #116]	; (8007c1c <prvAddNewTaskToReadyList+0xd0>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	645a      	str	r2, [r3, #68]	; 0x44
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb0:	4b1b      	ldr	r3, [pc, #108]	; (8007c20 <prvAddNewTaskToReadyList+0xd4>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d903      	bls.n	8007bc0 <prvAddNewTaskToReadyList+0x74>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	4a18      	ldr	r2, [pc, #96]	; (8007c20 <prvAddNewTaskToReadyList+0xd4>)
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4a15      	ldr	r2, [pc, #84]	; (8007c24 <prvAddNewTaskToReadyList+0xd8>)
 8007bce:	441a      	add	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f7ff f87b 	bl	8006cd2 <vListInsertEnd>
 8007bdc:	f001 f8fe 	bl	8008ddc <vPortExitCritical>
 8007be0:	4b0d      	ldr	r3, [pc, #52]	; (8007c18 <prvAddNewTaskToReadyList+0xcc>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00e      	beq.n	8007c06 <prvAddNewTaskToReadyList+0xba>
 8007be8:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d207      	bcs.n	8007c06 <prvAddNewTaskToReadyList+0xba>
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <prvAddNewTaskToReadyList+0xdc>)
 8007bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20000bc4 	.word	0x20000bc4
 8007c14:	200006f0 	.word	0x200006f0
 8007c18:	20000bd0 	.word	0x20000bd0
 8007c1c:	20000be0 	.word	0x20000be0
 8007c20:	20000bcc 	.word	0x20000bcc
 8007c24:	200006f4 	.word	0x200006f4
 8007c28:	e000ed04 	.word	0xe000ed04

08007c2c <vTaskDelay>:
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d008      	beq.n	8007c50 <vTaskDelay+0x24>
 8007c3e:	f000 f871 	bl	8007d24 <vTaskSuspendAll>
 8007c42:	2100      	movs	r1, #0
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fd1f 	bl	8008688 <prvAddCurrentTaskToDelayedList>
 8007c4a:	f000 f879 	bl	8007d40 <xTaskResumeAll>
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d107      	bne.n	8007c66 <vTaskDelay+0x3a>
 8007c56:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <vTaskDelay+0x44>)
 8007c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	e000ed04 	.word	0xe000ed04

08007c74 <vTaskStartScheduler>:
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08a      	sub	sp, #40	; 0x28
 8007c78:	af04      	add	r7, sp, #16
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60bb      	str	r3, [r7, #8]
 8007c82:	1d3a      	adds	r2, r7, #4
 8007c84:	f107 0108 	add.w	r1, r7, #8
 8007c88:	f107 030c 	add.w	r3, r7, #12
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe ffc3 	bl	8006c18 <vApplicationGetIdleTaskMemory>
 8007c92:	6879      	ldr	r1, [r7, #4]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	9202      	str	r2, [sp, #8]
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	460a      	mov	r2, r1
 8007ca4:	4919      	ldr	r1, [pc, #100]	; (8007d0c <vTaskStartScheduler+0x98>)
 8007ca6:	481a      	ldr	r0, [pc, #104]	; (8007d10 <vTaskStartScheduler+0x9c>)
 8007ca8:	f7ff fe64 	bl	8007974 <xTaskCreateStatic>
 8007cac:	4603      	mov	r3, r0
 8007cae:	4a19      	ldr	r2, [pc, #100]	; (8007d14 <vTaskStartScheduler+0xa0>)
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	4b18      	ldr	r3, [pc, #96]	; (8007d14 <vTaskStartScheduler+0xa0>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <vTaskStartScheduler+0x4c>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	617b      	str	r3, [r7, #20]
 8007cbe:	e001      	b.n	8007cc4 <vTaskStartScheduler+0x50>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d102      	bne.n	8007cd0 <vTaskStartScheduler+0x5c>
 8007cca:	f000 fd31 	bl	8008730 <xTimerCreateTimerTask>
 8007cce:	6178      	str	r0, [r7, #20]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d115      	bne.n	8007d02 <vTaskStartScheduler+0x8e>
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
 8007ce6:	613b      	str	r3, [r7, #16]
 8007ce8:	bf00      	nop
 8007cea:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <vTaskStartScheduler+0xa4>)
 8007cec:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <vTaskStartScheduler+0xa8>)
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]
 8007cf8:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <vTaskStartScheduler+0xac>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	f001 f833 	bl	8008d68 <xPortStartScheduler>
 8007d02:	bf00      	nop
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	08009300 	.word	0x08009300
 8007d10:	08008255 	.word	0x08008255
 8007d14:	20000be8 	.word	0x20000be8
 8007d18:	20000be4 	.word	0x20000be4
 8007d1c:	20000bd0 	.word	0x20000bd0
 8007d20:	20000bc8 	.word	0x20000bc8

08007d24 <vTaskSuspendAll>:
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	4b04      	ldr	r3, [pc, #16]	; (8007d3c <vTaskSuspendAll+0x18>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	4a03      	ldr	r2, [pc, #12]	; (8007d3c <vTaskSuspendAll+0x18>)
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	bf00      	nop
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bc80      	pop	{r7}
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	20000bec 	.word	0x20000bec

08007d40 <xTaskResumeAll>:
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60bb      	str	r3, [r7, #8]
 8007d4e:	f001 f82b 	bl	8008da8 <vPortEnterCritical>
 8007d52:	4b39      	ldr	r3, [pc, #228]	; (8007e38 <xTaskResumeAll+0xf8>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	4a37      	ldr	r2, [pc, #220]	; (8007e38 <xTaskResumeAll+0xf8>)
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	4b36      	ldr	r3, [pc, #216]	; (8007e38 <xTaskResumeAll+0xf8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d162      	bne.n	8007e2a <xTaskResumeAll+0xea>
 8007d64:	4b35      	ldr	r3, [pc, #212]	; (8007e3c <xTaskResumeAll+0xfc>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d05e      	beq.n	8007e2a <xTaskResumeAll+0xea>
 8007d6c:	e02f      	b.n	8007dce <xTaskResumeAll+0x8e>
 8007d6e:	4b34      	ldr	r3, [pc, #208]	; (8007e40 <xTaskResumeAll+0x100>)
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3318      	adds	r3, #24
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7ff f804 	bl	8006d88 <uxListRemove>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fe ffff 	bl	8006d88 <uxListRemove>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8e:	4b2d      	ldr	r3, [pc, #180]	; (8007e44 <xTaskResumeAll+0x104>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d903      	bls.n	8007d9e <xTaskResumeAll+0x5e>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	4a2a      	ldr	r2, [pc, #168]	; (8007e44 <xTaskResumeAll+0x104>)
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da2:	4613      	mov	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4a27      	ldr	r2, [pc, #156]	; (8007e48 <xTaskResumeAll+0x108>)
 8007dac:	441a      	add	r2, r3
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4619      	mov	r1, r3
 8007db4:	4610      	mov	r0, r2
 8007db6:	f7fe ff8c 	bl	8006cd2 <vListInsertEnd>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbe:	4b23      	ldr	r3, [pc, #140]	; (8007e4c <xTaskResumeAll+0x10c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d302      	bcc.n	8007dce <xTaskResumeAll+0x8e>
 8007dc8:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <xTaskResumeAll+0x110>)
 8007dca:	2201      	movs	r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	4b1c      	ldr	r3, [pc, #112]	; (8007e40 <xTaskResumeAll+0x100>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1cb      	bne.n	8007d6e <xTaskResumeAll+0x2e>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <xTaskResumeAll+0xa0>
 8007ddc:	f000 fade 	bl	800839c <prvResetNextTaskUnblockTime>
 8007de0:	4b1c      	ldr	r3, [pc, #112]	; (8007e54 <xTaskResumeAll+0x114>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	607b      	str	r3, [r7, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d010      	beq.n	8007e0e <xTaskResumeAll+0xce>
 8007dec:	f000 f844 	bl	8007e78 <xTaskIncrementTick>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d002      	beq.n	8007dfc <xTaskResumeAll+0xbc>
 8007df6:	4b16      	ldr	r3, [pc, #88]	; (8007e50 <xTaskResumeAll+0x110>)
 8007df8:	2201      	movs	r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	607b      	str	r3, [r7, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1f1      	bne.n	8007dec <xTaskResumeAll+0xac>
 8007e08:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <xTaskResumeAll+0x114>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	4b10      	ldr	r3, [pc, #64]	; (8007e50 <xTaskResumeAll+0x110>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d009      	beq.n	8007e2a <xTaskResumeAll+0xea>
 8007e16:	2301      	movs	r3, #1
 8007e18:	60bb      	str	r3, [r7, #8]
 8007e1a:	4b0f      	ldr	r3, [pc, #60]	; (8007e58 <xTaskResumeAll+0x118>)
 8007e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f000 ffd7 	bl	8008ddc <vPortExitCritical>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	20000bec 	.word	0x20000bec
 8007e3c:	20000bc4 	.word	0x20000bc4
 8007e40:	20000b84 	.word	0x20000b84
 8007e44:	20000bcc 	.word	0x20000bcc
 8007e48:	200006f4 	.word	0x200006f4
 8007e4c:	200006f0 	.word	0x200006f0
 8007e50:	20000bd8 	.word	0x20000bd8
 8007e54:	20000bd4 	.word	0x20000bd4
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <xTaskGetTickCount>:
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4b04      	ldr	r3, [pc, #16]	; (8007e74 <xTaskGetTickCount+0x18>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	607b      	str	r3, [r7, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr
 8007e74:	20000bc8 	.word	0x20000bc8

08007e78 <xTaskIncrementTick>:
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	2300      	movs	r3, #0
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	4b49      	ldr	r3, [pc, #292]	; (8007fa8 <xTaskIncrementTick+0x130>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d17d      	bne.n	8007f86 <xTaskIncrementTick+0x10e>
 8007e8a:	4b48      	ldr	r3, [pc, #288]	; (8007fac <xTaskIncrementTick+0x134>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	613b      	str	r3, [r7, #16]
 8007e92:	4a46      	ldr	r2, [pc, #280]	; (8007fac <xTaskIncrementTick+0x134>)
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d110      	bne.n	8007ec0 <xTaskIncrementTick+0x48>
 8007e9e:	4b44      	ldr	r3, [pc, #272]	; (8007fb0 <xTaskIncrementTick+0x138>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	4b43      	ldr	r3, [pc, #268]	; (8007fb4 <xTaskIncrementTick+0x13c>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a41      	ldr	r2, [pc, #260]	; (8007fb0 <xTaskIncrementTick+0x138>)
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	4a41      	ldr	r2, [pc, #260]	; (8007fb4 <xTaskIncrementTick+0x13c>)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	4b41      	ldr	r3, [pc, #260]	; (8007fb8 <xTaskIncrementTick+0x140>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	4a3f      	ldr	r2, [pc, #252]	; (8007fb8 <xTaskIncrementTick+0x140>)
 8007eba:	6013      	str	r3, [r2, #0]
 8007ebc:	f000 fa6e 	bl	800839c <prvResetNextTaskUnblockTime>
 8007ec0:	4b3e      	ldr	r3, [pc, #248]	; (8007fbc <xTaskIncrementTick+0x144>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d34e      	bcc.n	8007f68 <xTaskIncrementTick+0xf0>
 8007eca:	4b39      	ldr	r3, [pc, #228]	; (8007fb0 <xTaskIncrementTick+0x138>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <xTaskIncrementTick+0x60>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e000      	b.n	8007eda <xTaskIncrementTick+0x62>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d004      	beq.n	8007ee8 <xTaskIncrementTick+0x70>
 8007ede:	4b37      	ldr	r3, [pc, #220]	; (8007fbc <xTaskIncrementTick+0x144>)
 8007ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	e03f      	b.n	8007f68 <xTaskIncrementTick+0xf0>
 8007ee8:	4b31      	ldr	r3, [pc, #196]	; (8007fb0 <xTaskIncrementTick+0x138>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	60bb      	str	r3, [r7, #8]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	607b      	str	r3, [r7, #4]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d203      	bcs.n	8007f08 <xTaskIncrementTick+0x90>
 8007f00:	4a2e      	ldr	r2, [pc, #184]	; (8007fbc <xTaskIncrementTick+0x144>)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	e02f      	b.n	8007f68 <xTaskIncrementTick+0xf0>
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe ff3b 	bl	8006d88 <uxListRemove>
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d004      	beq.n	8007f24 <xTaskIncrementTick+0xac>
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	3318      	adds	r3, #24
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe ff32 	bl	8006d88 <uxListRemove>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f28:	4b25      	ldr	r3, [pc, #148]	; (8007fc0 <xTaskIncrementTick+0x148>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d903      	bls.n	8007f38 <xTaskIncrementTick+0xc0>
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	4a22      	ldr	r2, [pc, #136]	; (8007fc0 <xTaskIncrementTick+0x148>)
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4a1f      	ldr	r2, [pc, #124]	; (8007fc4 <xTaskIncrementTick+0x14c>)
 8007f46:	441a      	add	r2, r3
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	f7fe febf 	bl	8006cd2 <vListInsertEnd>
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f58:	4b1b      	ldr	r3, [pc, #108]	; (8007fc8 <xTaskIncrementTick+0x150>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d3b3      	bcc.n	8007eca <xTaskIncrementTick+0x52>
 8007f62:	2301      	movs	r3, #1
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	e7b0      	b.n	8007eca <xTaskIncrementTick+0x52>
 8007f68:	4b17      	ldr	r3, [pc, #92]	; (8007fc8 <xTaskIncrementTick+0x150>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6e:	4915      	ldr	r1, [pc, #84]	; (8007fc4 <xTaskIncrementTick+0x14c>)
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d907      	bls.n	8007f90 <xTaskIncrementTick+0x118>
 8007f80:	2301      	movs	r3, #1
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	e004      	b.n	8007f90 <xTaskIncrementTick+0x118>
 8007f86:	4b11      	ldr	r3, [pc, #68]	; (8007fcc <xTaskIncrementTick+0x154>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	4a0f      	ldr	r2, [pc, #60]	; (8007fcc <xTaskIncrementTick+0x154>)
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <xTaskIncrementTick+0x158>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <xTaskIncrementTick+0x124>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	617b      	str	r3, [r7, #20]
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000bec 	.word	0x20000bec
 8007fac:	20000bc8 	.word	0x20000bc8
 8007fb0:	20000b7c 	.word	0x20000b7c
 8007fb4:	20000b80 	.word	0x20000b80
 8007fb8:	20000bdc 	.word	0x20000bdc
 8007fbc:	20000be4 	.word	0x20000be4
 8007fc0:	20000bcc 	.word	0x20000bcc
 8007fc4:	200006f4 	.word	0x200006f4
 8007fc8:	200006f0 	.word	0x200006f0
 8007fcc:	20000bd4 	.word	0x20000bd4
 8007fd0:	20000bd8 	.word	0x20000bd8

08007fd4 <vTaskSwitchContext>:
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4b20      	ldr	r3, [pc, #128]	; (800805c <vTaskSwitchContext+0x88>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <vTaskSwitchContext+0x16>
 8007fe2:	4b1f      	ldr	r3, [pc, #124]	; (8008060 <vTaskSwitchContext+0x8c>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	e033      	b.n	8008052 <vTaskSwitchContext+0x7e>
 8007fea:	4b1d      	ldr	r3, [pc, #116]	; (8008060 <vTaskSwitchContext+0x8c>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <vTaskSwitchContext+0x90>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	607b      	str	r3, [r7, #4]
 8007ff6:	e002      	b.n	8007ffe <vTaskSwitchContext+0x2a>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	607b      	str	r3, [r7, #4]
 8007ffe:	491a      	ldr	r1, [pc, #104]	; (8008068 <vTaskSwitchContext+0x94>)
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	4613      	mov	r3, r2
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0f2      	beq.n	8007ff4 <vTaskSwitchContext+0x24>
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4a12      	ldr	r2, [pc, #72]	; (8008064 <vTaskSwitchContext+0x94>)
 800801a:	4413      	add	r3, r2
 800801c:	603b      	str	r3, [r7, #0]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	605a      	str	r2, [r3, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	3308      	adds	r3, #8
 8008030:	429a      	cmp	r2, r3
 8008032:	d104      	bne.n	800803e <vTaskSwitchContext+0x6e>
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	605a      	str	r2, [r3, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
<<<<<<< HEAD
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	4a08      	ldr	r2, [pc, #32]	; (8008068 <vTaskSwitchContext+0x98>)
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	4a05      	ldr	r2, [pc, #20]	; (8008060 <vTaskSwitchContext+0x90>)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6013      	str	r3, [r2, #0]
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	bc80      	pop	{r7}
 8008056:	4770      	bx	lr
 8008058:	20000bec 	.word	0x20000bec
 800805c:	20000bd8 	.word	0x20000bd8
 8008060:	20000bcc 	.word	0x20000bcc
 8008064:	200006f4 	.word	0x200006f4
 8008068:	200006f0 	.word	0x200006f0

0800806c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008076:	4b07      	ldr	r3, [pc, #28]	; (8008094 <vTaskPlaceOnEventList+0x28>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3318      	adds	r3, #24
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7fe fe48 	bl	8006d14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008084:	2101      	movs	r1, #1
 8008086:	6838      	ldr	r0, [r7, #0]
 8008088:	f000 fafc 	bl	8008684 <prvAddCurrentTaskToDelayedList>
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	200006f0 	.word	0x200006f0

08008098 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080a4:	4b0a      	ldr	r3, [pc, #40]	; (80080d0 <vTaskPlaceOnEventListRestricted+0x38>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3318      	adds	r3, #24
 80080aa:	4619      	mov	r1, r3
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f7fe fe0e 	bl	8006cce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 80080b8:	f04f 33ff 	mov.w	r3, #4294967295
 80080bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	68b8      	ldr	r0, [r7, #8]
 80080c2:	f000 fadf 	bl	8008684 <prvAddCurrentTaskToDelayedList>
	}
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	200006f0 	.word	0x200006f0

080080d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	3318      	adds	r3, #24
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fe fe4b 	bl	8006d84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ee:	4b1e      	ldr	r3, [pc, #120]	; (8008168 <xTaskRemoveFromEventList+0x94>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d11d      	bne.n	8008132 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe fe42 	bl	8006d84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008104:	4b19      	ldr	r3, [pc, #100]	; (800816c <xTaskRemoveFromEventList+0x98>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d903      	bls.n	8008114 <xTaskRemoveFromEventList+0x40>
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008110:	4a16      	ldr	r2, [pc, #88]	; (800816c <xTaskRemoveFromEventList+0x98>)
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4a13      	ldr	r2, [pc, #76]	; (8008170 <xTaskRemoveFromEventList+0x9c>)
 8008122:	441a      	add	r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	3304      	adds	r3, #4
 8008128:	4619      	mov	r1, r3
 800812a:	4610      	mov	r0, r2
 800812c:	f7fe fdcf 	bl	8006cce <vListInsertEnd>
 8008130:	e005      	b.n	800813e <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	3318      	adds	r3, #24
 8008136:	4619      	mov	r1, r3
 8008138:	480e      	ldr	r0, [pc, #56]	; (8008174 <xTaskRemoveFromEventList+0xa0>)
 800813a:	f7fe fdc8 	bl	8006cce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008142:	4b0d      	ldr	r3, [pc, #52]	; (8008178 <xTaskRemoveFromEventList+0xa4>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	429a      	cmp	r2, r3
 800814a:	d905      	bls.n	8008158 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800814c:	2301      	movs	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008150:	4b0a      	ldr	r3, [pc, #40]	; (800817c <xTaskRemoveFromEventList+0xa8>)
 8008152:	2201      	movs	r2, #1
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	e001      	b.n	800815c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800815c:	68fb      	ldr	r3, [r7, #12]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000bec 	.word	0x20000bec
 800816c:	20000bcc 	.word	0x20000bcc
 8008170:	200006f4 	.word	0x200006f4
 8008174:	20000b84 	.word	0x20000b84
 8008178:	200006f0 	.word	0x200006f0
 800817c:	20000bd8 	.word	0x20000bd8

08008180 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008188:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <vTaskInternalSetTimeOutState+0x24>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008190:	4b05      	ldr	r3, [pc, #20]	; (80081a8 <vTaskInternalSetTimeOutState+0x28>)
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	605a      	str	r2, [r3, #4]
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	bc80      	pop	{r7}
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	20000bdc 	.word	0x20000bdc
 80081a8:	20000bc8 	.word	0x20000bc8

080081ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 80081b6:	f000 fdf7 	bl	8008da8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80081ba:	4b1d      	ldr	r3, [pc, #116]	; (8008230 <xTaskCheckForTimeOut+0x84>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d2:	d102      	bne.n	80081da <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	e023      	b.n	8008222 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4b15      	ldr	r3, [pc, #84]	; (8008234 <xTaskCheckForTimeOut+0x88>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d007      	beq.n	80081f6 <xTaskCheckForTimeOut+0x4a>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d302      	bcc.n	80081f6 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80081f0:	2301      	movs	r3, #1
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	e015      	b.n	8008222 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d20b      	bcs.n	8008218 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	1ad2      	subs	r2, r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7ff ffb7 	bl	8008180 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008212:	2300      	movs	r3, #0
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e004      	b.n	8008222 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800821e:	2301      	movs	r3, #1
 8008220:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008222:	f000 fddb 	bl	8008ddc <vPortExitCritical>

	return xReturn;
 8008226:	697b      	ldr	r3, [r7, #20]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20000bc8 	.word	0x20000bc8
 8008234:	20000bdc 	.word	0x20000bdc

08008238 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008238:	b480      	push	{r7}
 800823a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800823c:	4b03      	ldr	r3, [pc, #12]	; (800824c <vTaskMissedYield+0x14>)
 800823e:	2201      	movs	r2, #1
 8008240:	601a      	str	r2, [r3, #0]
}
 8008242:	bf00      	nop
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	20000bd8 	.word	0x20000bd8

08008250 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008258:	f000 f852 	bl	8008300 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800825c:	4b06      	ldr	r3, [pc, #24]	; (8008278 <prvIdleTask+0x28>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d9f9      	bls.n	8008258 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008264:	4b05      	ldr	r3, [pc, #20]	; (800827c <prvIdleTask+0x2c>)
 8008266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008274:	e7f0      	b.n	8008258 <prvIdleTask+0x8>
 8008276:	bf00      	nop
 8008278:	200006f4 	.word	0x200006f4
 800827c:	e000ed04 	.word	0xe000ed04

08008280 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008286:	2300      	movs	r3, #0
 8008288:	607b      	str	r3, [r7, #4]
 800828a:	e00c      	b.n	80082a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	4613      	mov	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4a12      	ldr	r2, [pc, #72]	; (80082e0 <prvInitialiseTaskLists+0x60>)
 8008298:	4413      	add	r3, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fcec 	bl	8006c78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3301      	adds	r3, #1
 80082a4:	607b      	str	r3, [r7, #4]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b37      	cmp	r3, #55	; 0x37
 80082aa:	d9ef      	bls.n	800828c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082ac:	480d      	ldr	r0, [pc, #52]	; (80082e4 <prvInitialiseTaskLists+0x64>)
 80082ae:	f7fe fce3 	bl	8006c78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082b2:	480d      	ldr	r0, [pc, #52]	; (80082e8 <prvInitialiseTaskLists+0x68>)
 80082b4:	f7fe fce0 	bl	8006c78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082b8:	480c      	ldr	r0, [pc, #48]	; (80082ec <prvInitialiseTaskLists+0x6c>)
 80082ba:	f7fe fcdd 	bl	8006c78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082be:	480c      	ldr	r0, [pc, #48]	; (80082f0 <prvInitialiseTaskLists+0x70>)
 80082c0:	f7fe fcda 	bl	8006c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082c4:	480b      	ldr	r0, [pc, #44]	; (80082f4 <prvInitialiseTaskLists+0x74>)
 80082c6:	f7fe fcd7 	bl	8006c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082ca:	4b0b      	ldr	r3, [pc, #44]	; (80082f8 <prvInitialiseTaskLists+0x78>)
 80082cc:	4a05      	ldr	r2, [pc, #20]	; (80082e4 <prvInitialiseTaskLists+0x64>)
 80082ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082d0:	4b0a      	ldr	r3, [pc, #40]	; (80082fc <prvInitialiseTaskLists+0x7c>)
 80082d2:	4a05      	ldr	r2, [pc, #20]	; (80082e8 <prvInitialiseTaskLists+0x68>)
 80082d4:	601a      	str	r2, [r3, #0]
}
 80082d6:	bf00      	nop
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	200006f4 	.word	0x200006f4
 80082e4:	20000b54 	.word	0x20000b54
 80082e8:	20000b68 	.word	0x20000b68
 80082ec:	20000b84 	.word	0x20000b84
 80082f0:	20000b98 	.word	0x20000b98
 80082f4:	20000bb0 	.word	0x20000bb0
 80082f8:	20000b7c 	.word	0x20000b7c
 80082fc:	20000b80 	.word	0x20000b80

08008300 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008306:	e019      	b.n	800833c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008308:	f000 fd4e 	bl	8008da8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800830c:	4b10      	ldr	r3, [pc, #64]	; (8008350 <prvCheckTasksWaitingTermination+0x50>)
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3304      	adds	r3, #4
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe fd33 	bl	8006d84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800831e:	4b0d      	ldr	r3, [pc, #52]	; (8008354 <prvCheckTasksWaitingTermination+0x54>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3b01      	subs	r3, #1
 8008324:	4a0b      	ldr	r2, [pc, #44]	; (8008354 <prvCheckTasksWaitingTermination+0x54>)
 8008326:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008328:	4b0b      	ldr	r3, [pc, #44]	; (8008358 <prvCheckTasksWaitingTermination+0x58>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3b01      	subs	r3, #1
 800832e:	4a0a      	ldr	r2, [pc, #40]	; (8008358 <prvCheckTasksWaitingTermination+0x58>)
 8008330:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008332:	f000 fd53 	bl	8008ddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f810 	bl	800835c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800833c:	4b06      	ldr	r3, [pc, #24]	; (8008358 <prvCheckTasksWaitingTermination+0x58>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1e1      	bne.n	8008308 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20000b98 	.word	0x20000b98
 8008354:	20000bc4 	.word	0x20000bc4
 8008358:	20000bac 	.word	0x20000bac

0800835c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800836a:	2b00      	cmp	r3, #0
 800836c:	d108      	bne.n	8008380 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fe48 	bl	8009008 <vPortFree>
				vPortFree( pxTCB );
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fe45 	bl	8009008 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800837e:	e007      	b.n	8008390 <prvDeleteTCB+0x34>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008386:	2b01      	cmp	r3, #1
 8008388:	d102      	bne.n	8008390 <prvDeleteTCB+0x34>
				vPortFree( pxTCB );
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fe3c 	bl	8009008 <vPortFree>
	}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800839e:	4b0e      	ldr	r3, [pc, #56]	; (80083d8 <prvResetNextTaskUnblockTime+0x40>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d101      	bne.n	80083ac <prvResetNextTaskUnblockTime+0x14>
 80083a8:	2301      	movs	r3, #1
 80083aa:	e000      	b.n	80083ae <prvResetNextTaskUnblockTime+0x16>
 80083ac:	2300      	movs	r3, #0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d004      	beq.n	80083bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083b2:	4b0a      	ldr	r3, [pc, #40]	; (80083dc <prvResetNextTaskUnblockTime+0x44>)
 80083b4:	f04f 32ff 	mov.w	r2, #4294967295
 80083b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083ba:	e008      	b.n	80083ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80083bc:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <prvResetNextTaskUnblockTime+0x40>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	4a04      	ldr	r2, [pc, #16]	; (80083dc <prvResetNextTaskUnblockTime+0x44>)
 80083cc:	6013      	str	r3, [r2, #0]
}
 80083ce:	bf00      	nop
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bc80      	pop	{r7}
 80083d6:	4770      	bx	lr
 80083d8:	20000b7c 	.word	0x20000b7c
 80083dc:	20000be4 	.word	0x20000be4

080083e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80083e6:	4b0b      	ldr	r3, [pc, #44]	; (8008414 <xTaskGetSchedulerState+0x34>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d102      	bne.n	80083f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083ee:	2301      	movs	r3, #1
 80083f0:	607b      	str	r3, [r7, #4]
 80083f2:	e008      	b.n	8008406 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083f4:	4b08      	ldr	r3, [pc, #32]	; (8008418 <xTaskGetSchedulerState+0x38>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d102      	bne.n	8008402 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083fc:	2302      	movs	r3, #2
 80083fe:	607b      	str	r3, [r7, #4]
 8008400:	e001      	b.n	8008406 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008402:	2300      	movs	r3, #0
 8008404:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008406:	687b      	ldr	r3, [r7, #4]
	}
 8008408:	4618      	mov	r0, r3
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	bc80      	pop	{r7}
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	20000bd0 	.word	0x20000bd0
 8008418:	20000bec 	.word	0x20000bec

0800841c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d056      	beq.n	80084e0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008436:	4b2d      	ldr	r3, [pc, #180]	; (80084ec <xTaskPriorityInherit+0xd0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	429a      	cmp	r2, r3
 800843e:	d246      	bcs.n	80084ce <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	2b00      	cmp	r3, #0
 8008446:	db06      	blt.n	8008456 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008448:	4b28      	ldr	r3, [pc, #160]	; (80084ec <xTaskPriorityInherit+0xd0>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	6959      	ldr	r1, [r3, #20]
=======
 8008040:	605a      	str	r2, [r3, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	4a08      	ldr	r2, [pc, #32]	; (800806c <vTaskSwitchContext+0x98>)
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	4a05      	ldr	r2, [pc, #20]	; (8008064 <vTaskSwitchContext+0x90>)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	bf00      	nop
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	bc80      	pop	{r7}
 800805a:	4770      	bx	lr
 800805c:	20000bec 	.word	0x20000bec
 8008060:	20000bd8 	.word	0x20000bd8
 8008064:	20000bcc 	.word	0x20000bcc
 8008068:	200006f4 	.word	0x200006f4
 800806c:	200006f0 	.word	0x200006f0

08008070 <vTaskPlaceOnEventList>:
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
 800807a:	4b07      	ldr	r3, [pc, #28]	; (8008098 <vTaskPlaceOnEventList+0x28>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3318      	adds	r3, #24
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7fe fe48 	bl	8006d18 <vListInsert>
 8008088:	2101      	movs	r1, #1
 800808a:	6838      	ldr	r0, [r7, #0]
 800808c:	f000 fafc 	bl	8008688 <prvAddCurrentTaskToDelayedList>
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	200006f0 	.word	0x200006f0

0800809c <vTaskPlaceOnEventListRestricted>:
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <vTaskPlaceOnEventListRestricted+0x38>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3318      	adds	r3, #24
 80080ae:	4619      	mov	r1, r3
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f7fe fe0e 	bl	8006cd2 <vListInsertEnd>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <vTaskPlaceOnEventListRestricted+0x26>
 80080bc:	f04f 33ff 	mov.w	r3, #4294967295
 80080c0:	60bb      	str	r3, [r7, #8]
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	68b8      	ldr	r0, [r7, #8]
 80080c6:	f000 fadf 	bl	8008688 <prvAddCurrentTaskToDelayedList>
 80080ca:	bf00      	nop
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	200006f0 	.word	0x200006f0

080080d8 <xTaskRemoveFromEventList>:
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	60bb      	str	r3, [r7, #8]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	3318      	adds	r3, #24
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fe fe4b 	bl	8006d88 <uxListRemove>
 80080f2:	4b1e      	ldr	r3, [pc, #120]	; (800816c <xTaskRemoveFromEventList+0x94>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d11d      	bne.n	8008136 <xTaskRemoveFromEventList+0x5e>
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	3304      	adds	r3, #4
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fe42 	bl	8006d88 <uxListRemove>
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008108:	4b19      	ldr	r3, [pc, #100]	; (8008170 <xTaskRemoveFromEventList+0x98>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	429a      	cmp	r2, r3
 800810e:	d903      	bls.n	8008118 <xTaskRemoveFromEventList+0x40>
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	4a16      	ldr	r2, [pc, #88]	; (8008170 <xTaskRemoveFromEventList+0x98>)
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811c:	4613      	mov	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4a13      	ldr	r2, [pc, #76]	; (8008174 <xTaskRemoveFromEventList+0x9c>)
 8008126:	441a      	add	r2, r3
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	3304      	adds	r3, #4
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f7fe fdcf 	bl	8006cd2 <vListInsertEnd>
 8008134:	e005      	b.n	8008142 <xTaskRemoveFromEventList+0x6a>
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	3318      	adds	r3, #24
 800813a:	4619      	mov	r1, r3
 800813c:	480e      	ldr	r0, [pc, #56]	; (8008178 <xTaskRemoveFromEventList+0xa0>)
 800813e:	f7fe fdc8 	bl	8006cd2 <vListInsertEnd>
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008146:	4b0d      	ldr	r3, [pc, #52]	; (800817c <xTaskRemoveFromEventList+0xa4>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814c:	429a      	cmp	r2, r3
 800814e:	d905      	bls.n	800815c <xTaskRemoveFromEventList+0x84>
 8008150:	2301      	movs	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	4b0a      	ldr	r3, [pc, #40]	; (8008180 <xTaskRemoveFromEventList+0xa8>)
 8008156:	2201      	movs	r2, #1
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	e001      	b.n	8008160 <xTaskRemoveFromEventList+0x88>
 800815c:	2300      	movs	r3, #0
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000bec 	.word	0x20000bec
 8008170:	20000bcc 	.word	0x20000bcc
 8008174:	200006f4 	.word	0x200006f4
 8008178:	20000b84 	.word	0x20000b84
 800817c:	200006f0 	.word	0x200006f0
 8008180:	20000bd8 	.word	0x20000bd8

08008184 <vTaskInternalSetTimeOutState>:
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <vTaskInternalSetTimeOutState+0x24>)
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	4b05      	ldr	r3, [pc, #20]	; (80081ac <vTaskInternalSetTimeOutState+0x28>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	605a      	str	r2, [r3, #4]
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	20000bdc 	.word	0x20000bdc
 80081ac:	20000bc8 	.word	0x20000bc8

080081b0 <xTaskCheckForTimeOut>:
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
 80081ba:	f000 fdf5 	bl	8008da8 <vPortEnterCritical>
 80081be:	4b1d      	ldr	r3, [pc, #116]	; (8008234 <xTaskCheckForTimeOut+0x84>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	d102      	bne.n	80081de <xTaskCheckForTimeOut+0x2e>
 80081d8:	2300      	movs	r3, #0
 80081da:	617b      	str	r3, [r7, #20]
 80081dc:	e023      	b.n	8008226 <xTaskCheckForTimeOut+0x76>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	4b15      	ldr	r3, [pc, #84]	; (8008238 <xTaskCheckForTimeOut+0x88>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d007      	beq.n	80081fa <xTaskCheckForTimeOut+0x4a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	693a      	ldr	r2, [r7, #16]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d302      	bcc.n	80081fa <xTaskCheckForTimeOut+0x4a>
 80081f4:	2301      	movs	r3, #1
 80081f6:	617b      	str	r3, [r7, #20]
 80081f8:	e015      	b.n	8008226 <xTaskCheckForTimeOut+0x76>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	429a      	cmp	r2, r3
 8008202:	d20b      	bcs.n	800821c <xTaskCheckForTimeOut+0x6c>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	1ad2      	subs	r2, r2, r3
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff ffb7 	bl	8008184 <vTaskInternalSetTimeOutState>
 8008216:	2300      	movs	r3, #0
 8008218:	617b      	str	r3, [r7, #20]
 800821a:	e004      	b.n	8008226 <xTaskCheckForTimeOut+0x76>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	2301      	movs	r3, #1
 8008224:	617b      	str	r3, [r7, #20]
 8008226:	f000 fdd9 	bl	8008ddc <vPortExitCritical>
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	4618      	mov	r0, r3
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	20000bc8 	.word	0x20000bc8
 8008238:	20000bdc 	.word	0x20000bdc

0800823c <vTaskMissedYield>:
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
 8008240:	4b03      	ldr	r3, [pc, #12]	; (8008250 <vTaskMissedYield+0x14>)
 8008242:	2201      	movs	r2, #1
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	bf00      	nop
 8008248:	46bd      	mov	sp, r7
 800824a:	bc80      	pop	{r7}
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	20000bd8 	.word	0x20000bd8

08008254 <prvIdleTask>:
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	f000 f852 	bl	8008304 <prvCheckTasksWaitingTermination>
 8008260:	4b06      	ldr	r3, [pc, #24]	; (800827c <prvIdleTask+0x28>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d9f9      	bls.n	800825c <prvIdleTask+0x8>
 8008268:	4b05      	ldr	r3, [pc, #20]	; (8008280 <prvIdleTask+0x2c>)
 800826a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	e7f0      	b.n	800825c <prvIdleTask+0x8>
 800827a:	bf00      	nop
 800827c:	200006f4 	.word	0x200006f4
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <prvInitialiseTaskLists>:
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	2300      	movs	r3, #0
 800828c:	607b      	str	r3, [r7, #4]
 800828e:	e00c      	b.n	80082aa <prvInitialiseTaskLists+0x26>
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4a12      	ldr	r2, [pc, #72]	; (80082e4 <prvInitialiseTaskLists+0x60>)
 800829c:	4413      	add	r3, r2
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fe fcec 	bl	8006c7c <vListInitialise>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3301      	adds	r3, #1
 80082a8:	607b      	str	r3, [r7, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b37      	cmp	r3, #55	; 0x37
 80082ae:	d9ef      	bls.n	8008290 <prvInitialiseTaskLists+0xc>
 80082b0:	480d      	ldr	r0, [pc, #52]	; (80082e8 <prvInitialiseTaskLists+0x64>)
 80082b2:	f7fe fce3 	bl	8006c7c <vListInitialise>
 80082b6:	480d      	ldr	r0, [pc, #52]	; (80082ec <prvInitialiseTaskLists+0x68>)
 80082b8:	f7fe fce0 	bl	8006c7c <vListInitialise>
 80082bc:	480c      	ldr	r0, [pc, #48]	; (80082f0 <prvInitialiseTaskLists+0x6c>)
 80082be:	f7fe fcdd 	bl	8006c7c <vListInitialise>
 80082c2:	480c      	ldr	r0, [pc, #48]	; (80082f4 <prvInitialiseTaskLists+0x70>)
 80082c4:	f7fe fcda 	bl	8006c7c <vListInitialise>
 80082c8:	480b      	ldr	r0, [pc, #44]	; (80082f8 <prvInitialiseTaskLists+0x74>)
 80082ca:	f7fe fcd7 	bl	8006c7c <vListInitialise>
 80082ce:	4b0b      	ldr	r3, [pc, #44]	; (80082fc <prvInitialiseTaskLists+0x78>)
 80082d0:	4a05      	ldr	r2, [pc, #20]	; (80082e8 <prvInitialiseTaskLists+0x64>)
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	4b0a      	ldr	r3, [pc, #40]	; (8008300 <prvInitialiseTaskLists+0x7c>)
 80082d6:	4a05      	ldr	r2, [pc, #20]	; (80082ec <prvInitialiseTaskLists+0x68>)
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	bf00      	nop
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	200006f4 	.word	0x200006f4
 80082e8:	20000b54 	.word	0x20000b54
 80082ec:	20000b68 	.word	0x20000b68
 80082f0:	20000b84 	.word	0x20000b84
 80082f4:	20000b98 	.word	0x20000b98
 80082f8:	20000bb0 	.word	0x20000bb0
 80082fc:	20000b7c 	.word	0x20000b7c
 8008300:	20000b80 	.word	0x20000b80

08008304 <prvCheckTasksWaitingTermination>:
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	e019      	b.n	8008340 <prvCheckTasksWaitingTermination+0x3c>
 800830c:	f000 fd4c 	bl	8008da8 <vPortEnterCritical>
 8008310:	4b10      	ldr	r3, [pc, #64]	; (8008354 <prvCheckTasksWaitingTermination+0x50>)
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	607b      	str	r3, [r7, #4]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	3304      	adds	r3, #4
 800831c:	4618      	mov	r0, r3
 800831e:	f7fe fd33 	bl	8006d88 <uxListRemove>
 8008322:	4b0d      	ldr	r3, [pc, #52]	; (8008358 <prvCheckTasksWaitingTermination+0x54>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3b01      	subs	r3, #1
 8008328:	4a0b      	ldr	r2, [pc, #44]	; (8008358 <prvCheckTasksWaitingTermination+0x54>)
 800832a:	6013      	str	r3, [r2, #0]
 800832c:	4b0b      	ldr	r3, [pc, #44]	; (800835c <prvCheckTasksWaitingTermination+0x58>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3b01      	subs	r3, #1
 8008332:	4a0a      	ldr	r2, [pc, #40]	; (800835c <prvCheckTasksWaitingTermination+0x58>)
 8008334:	6013      	str	r3, [r2, #0]
 8008336:	f000 fd51 	bl	8008ddc <vPortExitCritical>
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f810 	bl	8008360 <prvDeleteTCB>
 8008340:	4b06      	ldr	r3, [pc, #24]	; (800835c <prvCheckTasksWaitingTermination+0x58>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1e1      	bne.n	800830c <prvCheckTasksWaitingTermination+0x8>
 8008348:	bf00      	nop
 800834a:	bf00      	nop
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20000b98 	.word	0x20000b98
 8008358:	20000bc4 	.word	0x20000bc4
 800835c:	20000bac 	.word	0x20000bac

08008360 <prvDeleteTCB>:
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800836e:	2b00      	cmp	r3, #0
 8008370:	d108      	bne.n	8008384 <prvDeleteTCB+0x24>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fe46 	bl	8009008 <vPortFree>
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fe43 	bl	8009008 <vPortFree>
 8008382:	e007      	b.n	8008394 <prvDeleteTCB+0x34>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800838a:	2b01      	cmp	r3, #1
 800838c:	d102      	bne.n	8008394 <prvDeleteTCB+0x34>
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fe3a 	bl	8009008 <vPortFree>
 8008394:	bf00      	nop
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <prvResetNextTaskUnblockTime>:
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4b0e      	ldr	r3, [pc, #56]	; (80083dc <prvResetNextTaskUnblockTime+0x40>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <prvResetNextTaskUnblockTime+0x14>
 80083ac:	2301      	movs	r3, #1
 80083ae:	e000      	b.n	80083b2 <prvResetNextTaskUnblockTime+0x16>
 80083b0:	2300      	movs	r3, #0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d004      	beq.n	80083c0 <prvResetNextTaskUnblockTime+0x24>
 80083b6:	4b0a      	ldr	r3, [pc, #40]	; (80083e0 <prvResetNextTaskUnblockTime+0x44>)
 80083b8:	f04f 32ff 	mov.w	r2, #4294967295
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	e008      	b.n	80083d2 <prvResetNextTaskUnblockTime+0x36>
 80083c0:	4b06      	ldr	r3, [pc, #24]	; (80083dc <prvResetNextTaskUnblockTime+0x40>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	607b      	str	r3, [r7, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	4a04      	ldr	r2, [pc, #16]	; (80083e0 <prvResetNextTaskUnblockTime+0x44>)
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	bf00      	nop
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bc80      	pop	{r7}
 80083da:	4770      	bx	lr
 80083dc:	20000b7c 	.word	0x20000b7c
 80083e0:	20000be4 	.word	0x20000be4

080083e4 <xTaskGetSchedulerState>:
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4b0b      	ldr	r3, [pc, #44]	; (8008418 <xTaskGetSchedulerState+0x34>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d102      	bne.n	80083f8 <xTaskGetSchedulerState+0x14>
 80083f2:	2301      	movs	r3, #1
 80083f4:	607b      	str	r3, [r7, #4]
 80083f6:	e008      	b.n	800840a <xTaskGetSchedulerState+0x26>
 80083f8:	4b08      	ldr	r3, [pc, #32]	; (800841c <xTaskGetSchedulerState+0x38>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d102      	bne.n	8008406 <xTaskGetSchedulerState+0x22>
 8008400:	2302      	movs	r3, #2
 8008402:	607b      	str	r3, [r7, #4]
 8008404:	e001      	b.n	800840a <xTaskGetSchedulerState+0x26>
 8008406:	2300      	movs	r3, #0
 8008408:	607b      	str	r3, [r7, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4618      	mov	r0, r3
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	bc80      	pop	{r7}
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	20000bd0 	.word	0x20000bd0
 800841c:	20000bec 	.word	0x20000bec

08008420 <xTaskPriorityInherit>:
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	60bb      	str	r3, [r7, #8]
 800842c:	2300      	movs	r3, #0
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d056      	beq.n	80084e4 <xTaskPriorityInherit+0xc4>
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843a:	4b2d      	ldr	r3, [pc, #180]	; (80084f0 <xTaskPriorityInherit+0xd0>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008440:	429a      	cmp	r2, r3
 8008442:	d246      	bcs.n	80084d2 <xTaskPriorityInherit+0xb2>
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	db06      	blt.n	800845a <xTaskPriorityInherit+0x3a>
 800844c:	4b28      	ldr	r3, [pc, #160]	; (80084f0 <xTaskPriorityInherit+0xd0>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008452:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	619a      	str	r2, [r3, #24]
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
<<<<<<< HEAD
 8008466:	4a22      	ldr	r2, [pc, #136]	; (80084f0 <xTaskPriorityInherit+0xd4>)
 8008468:	4413      	add	r3, r2
 800846a:	4299      	cmp	r1, r3
 800846c:	d101      	bne.n	8008472 <xTaskPriorityInherit+0x56>
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <xTaskPriorityInherit+0x58>
 8008472:	2300      	movs	r3, #0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d022      	beq.n	80084be <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	3304      	adds	r3, #4
 800847c:	4618      	mov	r0, r3
 800847e:	f7fe fc81 	bl	8006d84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008482:	4b1a      	ldr	r3, [pc, #104]	; (80084ec <xTaskPriorityInherit+0xd0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008490:	4b18      	ldr	r3, [pc, #96]	; (80084f4 <xTaskPriorityInherit+0xd8>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d903      	bls.n	80084a0 <xTaskPriorityInherit+0x84>
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849c:	4a15      	ldr	r2, [pc, #84]	; (80084f4 <xTaskPriorityInherit+0xd8>)
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4a10      	ldr	r2, [pc, #64]	; (80084f0 <xTaskPriorityInherit+0xd4>)
 80084ae:	441a      	add	r2, r3
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4619      	mov	r1, r3
 80084b6:	4610      	mov	r0, r2
 80084b8:	f7fe fc09 	bl	8006cce <vListInsertEnd>
 80084bc:	e004      	b.n	80084c8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80084be:	4b0b      	ldr	r3, [pc, #44]	; (80084ec <xTaskPriorityInherit+0xd0>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80084c8:	2301      	movs	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	e008      	b.n	80084e0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084d2:	4b06      	ldr	r3, [pc, #24]	; (80084ec <xTaskPriorityInherit+0xd0>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	429a      	cmp	r2, r3
 80084da:	d201      	bcs.n	80084e0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80084dc:	2301      	movs	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084e0:	68fb      	ldr	r3, [r7, #12]
	}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	200006f0 	.word	0x200006f0
 80084f0:	200006f4 	.word	0x200006f4
 80084f4:	20000bcc 	.word	0x20000bcc

080084f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008504:	2300      	movs	r3, #0
 8008506:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d037      	beq.n	800857e <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008512:	1e5a      	subs	r2, r3, #1
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008520:	429a      	cmp	r2, r3
 8008522:	d02c      	beq.n	800857e <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008528:	2b00      	cmp	r3, #0
 800852a:	d128      	bne.n	800857e <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	3304      	adds	r3, #4
 8008530:	4618      	mov	r0, r3
 8008532:	f7fe fc27 	bl	8006d84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008542:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854e:	4b0e      	ldr	r3, [pc, #56]	; (8008588 <xTaskPriorityDisinherit+0x90>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	429a      	cmp	r2, r3
 8008554:	d903      	bls.n	800855e <xTaskPriorityDisinherit+0x66>
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	4a0b      	ldr	r2, [pc, #44]	; (8008588 <xTaskPriorityDisinherit+0x90>)
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008562:	4613      	mov	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4a08      	ldr	r2, [pc, #32]	; (800858c <xTaskPriorityDisinherit+0x94>)
 800856c:	441a      	add	r2, r3
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	3304      	adds	r3, #4
 8008572:	4619      	mov	r1, r3
 8008574:	4610      	mov	r0, r2
 8008576:	f7fe fbaa 	bl	8006cce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800857a:	2301      	movs	r3, #1
 800857c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800857e:	68fb      	ldr	r3, [r7, #12]
	}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	20000bcc 	.word	0x20000bcc
 800858c:	200006f4 	.word	0x200006f4

08008590 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800859e:	2301      	movs	r3, #1
 80085a0:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d050      	beq.n	800864a <vTaskPriorityDisinheritAfterTimeout+0xba>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d902      	bls.n	80085b8 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	e002      	b.n	80085be <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085bc:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d040      	beq.n	800864a <vTaskPriorityDisinheritAfterTimeout+0xba>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d13b      	bne.n	800864a <vTaskPriorityDisinheritAfterTimeout+0xba>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d6:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	db04      	blt.n	80085f0 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	6959      	ldr	r1, [r3, #20]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4a15      	ldr	r2, [pc, #84]	; (8008654 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8008600:	4413      	add	r3, r2
 8008602:	4299      	cmp	r1, r3
 8008604:	d101      	bne.n	800860a <vTaskPriorityDisinheritAfterTimeout+0x7a>
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800860a:	2300      	movs	r3, #0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d01c      	beq.n	800864a <vTaskPriorityDisinheritAfterTimeout+0xba>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	3304      	adds	r3, #4
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe fbb5 	bl	8006d84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861e:	4b0e      	ldr	r3, [pc, #56]	; (8008658 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	429a      	cmp	r2, r3
 8008624:	d903      	bls.n	800862e <vTaskPriorityDisinheritAfterTimeout+0x9e>
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862a:	4a0b      	ldr	r2, [pc, #44]	; (8008658 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 800862c:	6013      	str	r3, [r2, #0]
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008632:	4613      	mov	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4a06      	ldr	r2, [pc, #24]	; (8008654 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 800863c:	441a      	add	r2, r3
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	3304      	adds	r3, #4
 8008642:	4619      	mov	r1, r3
 8008644:	4610      	mov	r0, r2
 8008646:	f7fe fb42 	bl	8006cce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800864a:	bf00      	nop
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	200006f4 	.word	0x200006f4
 8008658:	20000bcc 	.word	0x20000bcc

0800865c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008660:	4b07      	ldr	r3, [pc, #28]	; (8008680 <pvTaskIncrementMutexHeldCount+0x24>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d004      	beq.n	8008672 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008668:	4b05      	ldr	r3, [pc, #20]	; (8008680 <pvTaskIncrementMutexHeldCount+0x24>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800866e:	3201      	adds	r2, #1
 8008670:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008672:	4b03      	ldr	r3, [pc, #12]	; (8008680 <pvTaskIncrementMutexHeldCount+0x24>)
 8008674:	681b      	ldr	r3, [r3, #0]
	}
 8008676:	4618      	mov	r0, r3
 8008678:	46bd      	mov	sp, r7
 800867a:	bc80      	pop	{r7}
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	200006f0 	.word	0x200006f0

08008684 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800868e:	4b21      	ldr	r3, [pc, #132]	; (8008714 <prvAddCurrentTaskToDelayedList+0x90>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008694:	4b20      	ldr	r3, [pc, #128]	; (8008718 <prvAddCurrentTaskToDelayedList+0x94>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3304      	adds	r3, #4
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe fb72 	bl	8006d84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a6:	d10a      	bne.n	80086be <prvAddCurrentTaskToDelayedList+0x3a>
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d007      	beq.n	80086be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086ae:	4b1a      	ldr	r3, [pc, #104]	; (8008718 <prvAddCurrentTaskToDelayedList+0x94>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3304      	adds	r3, #4
 80086b4:	4619      	mov	r1, r3
 80086b6:	4819      	ldr	r0, [pc, #100]	; (800871c <prvAddCurrentTaskToDelayedList+0x98>)
 80086b8:	f7fe fb09 	bl	8006cce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086bc:	e026      	b.n	800870c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4413      	add	r3, r2
 80086c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086c6:	4b14      	ldr	r3, [pc, #80]	; (8008718 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d209      	bcs.n	80086ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086d6:	4b12      	ldr	r3, [pc, #72]	; (8008720 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	4b0f      	ldr	r3, [pc, #60]	; (8008718 <prvAddCurrentTaskToDelayedList+0x94>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3304      	adds	r3, #4
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f7fe fb16 	bl	8006d14 <vListInsert>
}
 80086e8:	e010      	b.n	800870c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086ea:	4b0e      	ldr	r3, [pc, #56]	; (8008724 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <prvAddCurrentTaskToDelayedList+0x94>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4619      	mov	r1, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	f7fe fb0c 	bl	8006d14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086fc:	4b0a      	ldr	r3, [pc, #40]	; (8008728 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	429a      	cmp	r2, r3
 8008704:	d202      	bcs.n	800870c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008706:	4a08      	ldr	r2, [pc, #32]	; (8008728 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	6013      	str	r3, [r2, #0]
}
 800870c:	bf00      	nop
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	20000bc8 	.word	0x20000bc8
 8008718:	200006f0 	.word	0x200006f0
 800871c:	20000bb0 	.word	0x20000bb0
 8008720:	20000b80 	.word	0x20000b80
 8008724:	20000b7c 	.word	0x20000b7c
 8008728:	20000be4 	.word	0x20000be4

0800872c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008732:	2300      	movs	r3, #0
 8008734:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008736:	f000 fa69 	bl	8008c0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800873a:	4b15      	ldr	r3, [pc, #84]	; (8008790 <xTimerCreateTimerTask+0x64>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d020      	beq.n	8008784 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008742:	2300      	movs	r3, #0
 8008744:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008746:	2300      	movs	r3, #0
 8008748:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800874a:	463a      	mov	r2, r7
 800874c:	1d39      	adds	r1, r7, #4
 800874e:	f107 0308 	add.w	r3, r7, #8
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe fa76 	bl	8006c44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	9202      	str	r2, [sp, #8]
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	2302      	movs	r3, #2
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	2300      	movs	r3, #0
 8008768:	460a      	mov	r2, r1
 800876a:	490a      	ldr	r1, [pc, #40]	; (8008794 <xTimerCreateTimerTask+0x68>)
 800876c:	480a      	ldr	r0, [pc, #40]	; (8008798 <xTimerCreateTimerTask+0x6c>)
 800876e:	f7ff f8ff 	bl	8007970 <xTaskCreateStatic>
 8008772:	4603      	mov	r3, r0
 8008774:	4a09      	ldr	r2, [pc, #36]	; (800879c <xTimerCreateTimerTask+0x70>)
 8008776:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008778:	4b08      	ldr	r3, [pc, #32]	; (800879c <xTimerCreateTimerTask+0x70>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8008780:	2301      	movs	r3, #1
 8008782:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8008784:	68fb      	ldr	r3, [r7, #12]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000c20 	.word	0x20000c20
 8008794:	08009308 	.word	0x08009308
 8008798:	08008885 	.word	0x08008885
 800879c:	20000c24 	.word	0x20000c24

080087a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08a      	sub	sp, #40	; 0x28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087ae:	2300      	movs	r3, #0
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087b2:	4b1a      	ldr	r3, [pc, #104]	; (800881c <xTimerGenericCommand+0x7c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d02a      	beq.n	8008810 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	2b05      	cmp	r3, #5
 80087ca:	dc18      	bgt.n	80087fe <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087cc:	f7ff fe08 	bl	80083e0 <xTaskGetSchedulerState>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d109      	bne.n	80087ea <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087d6:	4b11      	ldr	r3, [pc, #68]	; (800881c <xTimerGenericCommand+0x7c>)
 80087d8:	6818      	ldr	r0, [r3, #0]
 80087da:	f107 0114 	add.w	r1, r7, #20
 80087de:	2300      	movs	r3, #0
 80087e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087e2:	f7fe fbdb 	bl	8006f9c <xQueueGenericSend>
 80087e6:	6278      	str	r0, [r7, #36]	; 0x24
 80087e8:	e012      	b.n	8008810 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087ea:	4b0c      	ldr	r3, [pc, #48]	; (800881c <xTimerGenericCommand+0x7c>)
 80087ec:	6818      	ldr	r0, [r3, #0]
 80087ee:	f107 0114 	add.w	r1, r7, #20
 80087f2:	2300      	movs	r3, #0
 80087f4:	2200      	movs	r2, #0
 80087f6:	f7fe fbd1 	bl	8006f9c <xQueueGenericSend>
 80087fa:	6278      	str	r0, [r7, #36]	; 0x24
 80087fc:	e008      	b.n	8008810 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80087fe:	4b07      	ldr	r3, [pc, #28]	; (800881c <xTimerGenericCommand+0x7c>)
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	f107 0114 	add.w	r1, r7, #20
 8008806:	2300      	movs	r3, #0
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	f7fe fc71 	bl	80070f0 <xQueueGenericSendFromISR>
 800880e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008812:	4618      	mov	r0, r3
 8008814:	3728      	adds	r7, #40	; 0x28
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000c20 	.word	0x20000c20

08008820 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af02      	add	r7, sp, #8
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800882a:	4b15      	ldr	r3, [pc, #84]	; (8008880 <prvProcessExpiredTimer+0x60>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3304      	adds	r3, #4
 8008838:	4618      	mov	r0, r3
 800883a:	f7fe faa3 	bl	8006d84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d114      	bne.n	8008870 <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	699a      	ldr	r2, [r3, #24]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	18d1      	adds	r1, r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 f8ba 	bl	80089cc <prvInsertTimerInActiveList>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d008      	beq.n	8008870 <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800885e:	2300      	movs	r3, #0
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	2300      	movs	r3, #0
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	2100      	movs	r1, #0
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f7ff ff99 	bl	80087a0 <xTimerGenericCommand>
 800886e:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	4798      	blx	r3
}
 8008878:	bf00      	nop
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	20000c18 	.word	0x20000c18

08008884 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800888c:	f107 0308 	add.w	r3, r7, #8
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f857 	bl	8008944 <prvGetNextExpireTime>
 8008896:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4619      	mov	r1, r3
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 f803 	bl	80088a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088a2:	f000 f8d5 	bl	8008a50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088a6:	e7f1      	b.n	800888c <prvTimerTask+0x8>

080088a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088b2:	f7ff fa35 	bl	8007d20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088b6:	f107 0308 	add.w	r3, r7, #8
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 f866 	bl	800898c <prvSampleTimeNow>
 80088c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d130      	bne.n	800892a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10a      	bne.n	80088e4 <prvProcessTimerOrBlockTask+0x3c>
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d806      	bhi.n	80088e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80088d6:	f7ff fa31 	bl	8007d3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80088da:	68f9      	ldr	r1, [r7, #12]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff ff9f 	bl	8008820 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80088e2:	e024      	b.n	800892e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d008      	beq.n	80088fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80088ea:	4b13      	ldr	r3, [pc, #76]	; (8008938 <prvProcessTimerOrBlockTask+0x90>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	bf0c      	ite	eq
 80088f4:	2301      	moveq	r3, #1
 80088f6:	2300      	movne	r3, #0
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80088fc:	4b0f      	ldr	r3, [pc, #60]	; (800893c <prvProcessTimerOrBlockTask+0x94>)
 80088fe:	6818      	ldr	r0, [r3, #0]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	4619      	mov	r1, r3
 800890a:	f7fe fffd 	bl	8007908 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800890e:	f7ff fa15 	bl	8007d3c <xTaskResumeAll>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10a      	bne.n	800892e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008918:	4b09      	ldr	r3, [pc, #36]	; (8008940 <prvProcessTimerOrBlockTask+0x98>)
 800891a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	f3bf 8f6f 	isb	sy
}
 8008928:	e001      	b.n	800892e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800892a:	f7ff fa07 	bl	8007d3c <xTaskResumeAll>
}
 800892e:	bf00      	nop
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20000c1c 	.word	0x20000c1c
 800893c:	20000c20 	.word	0x20000c20
 8008940:	e000ed04 	.word	0xe000ed04

08008944 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800894c:	4b0e      	ldr	r3, [pc, #56]	; (8008988 <prvGetNextExpireTime+0x44>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	bf0c      	ite	eq
 8008956:	2301      	moveq	r3, #1
 8008958:	2300      	movne	r3, #0
 800895a:	b2db      	uxtb	r3, r3
 800895c:	461a      	mov	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d105      	bne.n	8008976 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800896a:	4b07      	ldr	r3, [pc, #28]	; (8008988 <prvGetNextExpireTime+0x44>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	e001      	b.n	800897a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008976:	2300      	movs	r3, #0
 8008978:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800897a:	68fb      	ldr	r3, [r7, #12]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	bc80      	pop	{r7}
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	20000c18 	.word	0x20000c18

0800898c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008994:	f7ff fa60 	bl	8007e58 <xTaskGetTickCount>
 8008998:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800899a:	4b0b      	ldr	r3, [pc, #44]	; (80089c8 <prvSampleTimeNow+0x3c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d205      	bcs.n	80089b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089a4:	f000 f8de 	bl	8008b64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	e002      	b.n	80089b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089b6:	4a04      	ldr	r2, [pc, #16]	; (80089c8 <prvSampleTimeNow+0x3c>)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089bc:	68fb      	ldr	r3, [r7, #12]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20000c28 	.word	0x20000c28

080089cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
 80089d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d812      	bhi.n	8008a18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	1ad2      	subs	r2, r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d302      	bcc.n	8008a06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a00:	2301      	movs	r3, #1
 8008a02:	617b      	str	r3, [r7, #20]
 8008a04:	e01b      	b.n	8008a3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a06:	4b10      	ldr	r3, [pc, #64]	; (8008a48 <prvInsertTimerInActiveList+0x7c>)
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4610      	mov	r0, r2
 8008a12:	f7fe f97f 	bl	8006d14 <vListInsert>
 8008a16:	e012      	b.n	8008a3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d206      	bcs.n	8008a2e <prvInsertTimerInActiveList+0x62>
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d302      	bcc.n	8008a2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	e007      	b.n	8008a3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a2e:	4b07      	ldr	r3, [pc, #28]	; (8008a4c <prvInsertTimerInActiveList+0x80>)
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	3304      	adds	r3, #4
 8008a36:	4619      	mov	r1, r3
 8008a38:	4610      	mov	r0, r2
 8008a3a:	f7fe f96b 	bl	8006d14 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a3e:	697b      	ldr	r3, [r7, #20]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	20000c1c 	.word	0x20000c1c
 8008a4c:	20000c18 	.word	0x20000c18

08008a50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08c      	sub	sp, #48	; 0x30
 8008a54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a56:	e073      	b.n	8008b40 <prvProcessReceivedCommands+0xf0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	da0b      	bge.n	8008a76 <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a5e:	f107 0308 	add.w	r3, r7, #8
 8008a62:	3304      	adds	r3, #4
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a6c:	6850      	ldr	r0, [r2, #4]
 8008a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a70:	6892      	ldr	r2, [r2, #8]
 8008a72:	4611      	mov	r1, r2
 8008a74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	db60      	blt.n	8008b3e <prvProcessReceivedCommands+0xee>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d004      	beq.n	8008a92 <prvProcessReceivedCommands+0x42>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fe f979 	bl	8006d84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a92:	1d3b      	adds	r3, r7, #4
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff ff79 	bl	800898c <prvSampleTimeNow>
 8008a9a:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2b09      	cmp	r3, #9
 8008aa0:	d84e      	bhi.n	8008b40 <prvProcessReceivedCommands+0xf0>
 8008aa2:	a201      	add	r2, pc, #4	; (adr r2, 8008aa8 <prvProcessReceivedCommands+0x58>)
 8008aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa8:	08008ad1 	.word	0x08008ad1
 8008aac:	08008ad1 	.word	0x08008ad1
 8008ab0:	08008ad1 	.word	0x08008ad1
 8008ab4:	08008b41 	.word	0x08008b41
 8008ab8:	08008b13 	.word	0x08008b13
 8008abc:	08008b2d 	.word	0x08008b2d
 8008ac0:	08008ad1 	.word	0x08008ad1
 8008ac4:	08008ad1 	.word	0x08008ad1
 8008ac8:	08008b41 	.word	0x08008b41
 8008acc:	08008b13 	.word	0x08008b13
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	18d1      	adds	r1, r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	69fa      	ldr	r2, [r7, #28]
 8008adc:	6a38      	ldr	r0, [r7, #32]
 8008ade:	f7ff ff75 	bl	80089cc <prvInsertTimerInActiveList>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d02b      	beq.n	8008b40 <prvProcessReceivedCommands+0xf0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	6a38      	ldr	r0, [r7, #32]
 8008aee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d123      	bne.n	8008b40 <prvProcessReceivedCommands+0xf0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	441a      	add	r2, r3
 8008b00:	2300      	movs	r3, #0
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	2300      	movs	r3, #0
 8008b06:	2100      	movs	r1, #0
 8008b08:	6a38      	ldr	r0, [r7, #32]
 8008b0a:	f7ff fe49 	bl	80087a0 <xTimerGenericCommand>
 8008b0e:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8008b10:	e016      	b.n	8008b40 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	699a      	ldr	r2, [r3, #24]
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	18d1      	adds	r1, r2, r3
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	69fa      	ldr	r2, [r7, #28]
 8008b24:	6a38      	ldr	r0, [r7, #32]
 8008b26:	f7ff ff51 	bl	80089cc <prvInsertTimerInActiveList>
					break;
 8008b2a:	e009      	b.n	8008b40 <prvProcessReceivedCommands+0xf0>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d104      	bne.n	8008b40 <prvProcessReceivedCommands+0xf0>
						{
							vPortFree( pxTimer );
 8008b36:	6a38      	ldr	r0, [r7, #32]
 8008b38:	f000 fa66 	bl	8009008 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b3c:	e000      	b.n	8008b40 <prvProcessReceivedCommands+0xf0>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008b3e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b40:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <prvProcessReceivedCommands+0x110>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f107 0108 	add.w	r1, r7, #8
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe fb7e 	bl	800724c <xQueueReceive>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d180      	bne.n	8008a58 <prvProcessReceivedCommands+0x8>
	}
}
 8008b56:	bf00      	nop
 8008b58:	bf00      	nop
 8008b5a:	3728      	adds	r7, #40	; 0x28
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20000c20 	.word	0x20000c20

08008b64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b6a:	e037      	b.n	8008bdc <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b6c:	4b25      	ldr	r3, [pc, #148]	; (8008c04 <prvSwitchTimerLists+0xa0>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b76:	4b23      	ldr	r3, [pc, #140]	; (8008c04 <prvSwitchTimerLists+0xa0>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fe f8fd 	bl	8006d84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d120      	bne.n	8008bdc <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d90e      	bls.n	8008bca <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bb8:	4b12      	ldr	r3, [pc, #72]	; (8008c04 <prvSwitchTimerLists+0xa0>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	f7fe f8a6 	bl	8006d14 <vListInsert>
 8008bc8:	e008      	b.n	8008bdc <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bca:	2300      	movs	r3, #0
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff fde3 	bl	80087a0 <xTimerGenericCommand>
 8008bda:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bdc:	4b09      	ldr	r3, [pc, #36]	; (8008c04 <prvSwitchTimerLists+0xa0>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1c2      	bne.n	8008b6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008be6:	4b07      	ldr	r3, [pc, #28]	; (8008c04 <prvSwitchTimerLists+0xa0>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008bec:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <prvSwitchTimerLists+0xa4>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a04      	ldr	r2, [pc, #16]	; (8008c04 <prvSwitchTimerLists+0xa0>)
 8008bf2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008bf4:	4a04      	ldr	r2, [pc, #16]	; (8008c08 <prvSwitchTimerLists+0xa4>)
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	6013      	str	r3, [r2, #0]
}
 8008bfa:	bf00      	nop
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000c18 	.word	0x20000c18
 8008c08:	20000c1c 	.word	0x20000c1c

08008c0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c12:	f000 f8c9 	bl	8008da8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c16:	4b15      	ldr	r3, [pc, #84]	; (8008c6c <prvCheckForValidListAndQueue+0x60>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d120      	bne.n	8008c60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c1e:	4814      	ldr	r0, [pc, #80]	; (8008c70 <prvCheckForValidListAndQueue+0x64>)
 8008c20:	f7fe f82a 	bl	8006c78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c24:	4813      	ldr	r0, [pc, #76]	; (8008c74 <prvCheckForValidListAndQueue+0x68>)
 8008c26:	f7fe f827 	bl	8006c78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c2a:	4b13      	ldr	r3, [pc, #76]	; (8008c78 <prvCheckForValidListAndQueue+0x6c>)
 8008c2c:	4a10      	ldr	r2, [pc, #64]	; (8008c70 <prvCheckForValidListAndQueue+0x64>)
 8008c2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c30:	4b12      	ldr	r3, [pc, #72]	; (8008c7c <prvCheckForValidListAndQueue+0x70>)
 8008c32:	4a10      	ldr	r2, [pc, #64]	; (8008c74 <prvCheckForValidListAndQueue+0x68>)
 8008c34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c36:	2300      	movs	r3, #0
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	4b11      	ldr	r3, [pc, #68]	; (8008c80 <prvCheckForValidListAndQueue+0x74>)
 8008c3c:	4a11      	ldr	r2, [pc, #68]	; (8008c84 <prvCheckForValidListAndQueue+0x78>)
 8008c3e:	2110      	movs	r1, #16
 8008c40:	200a      	movs	r0, #10
 8008c42:	f7fe f923 	bl	8006e8c <xQueueGenericCreateStatic>
 8008c46:	4603      	mov	r3, r0
 8008c48:	4a08      	ldr	r2, [pc, #32]	; (8008c6c <prvCheckForValidListAndQueue+0x60>)
 8008c4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c4c:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <prvCheckForValidListAndQueue+0x60>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d005      	beq.n	8008c60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c54:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <prvCheckForValidListAndQueue+0x60>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	490b      	ldr	r1, [pc, #44]	; (8008c88 <prvCheckForValidListAndQueue+0x7c>)
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fe fe2c 	bl	80078b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c60:	f000 f8bc 	bl	8008ddc <vPortExitCritical>
}
 8008c64:	bf00      	nop
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000c20 	.word	0x20000c20
 8008c70:	20000bf0 	.word	0x20000bf0
 8008c74:	20000c04 	.word	0x20000c04
 8008c78:	20000c18 	.word	0x20000c18
 8008c7c:	20000c1c 	.word	0x20000c1c
 8008c80:	20000ccc 	.word	0x20000ccc
 8008c84:	20000c2c 	.word	0x20000c2c
 8008c88:	08009310 	.word	0x08009310

08008c8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	3b04      	subs	r3, #4
 8008c9c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3b04      	subs	r3, #4
 8008caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f023 0201 	bic.w	r2, r3, #1
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3b04      	subs	r3, #4
 8008cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cbc:	4a08      	ldr	r2, [pc, #32]	; (8008ce0 <pxPortInitialiseStack+0x54>)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	3b14      	subs	r3, #20
 8008cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3b20      	subs	r3, #32
 8008cd2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bc80      	pop	{r7}
 8008cde:	4770      	bx	lr
 8008ce0:	08008ce5 	.word	0x08008ce5

08008ce4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008cea:	2300      	movs	r3, #0
 8008cec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	607b      	str	r3, [r7, #4]
}
 8008d00:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d02:	bf00      	nop
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0fc      	beq.n	8008d04 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d0a:	bf00      	nop
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bc80      	pop	{r7}
 8008d14:	4770      	bx	lr
=======
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4a22      	ldr	r2, [pc, #136]	; (80084f4 <xTaskPriorityInherit+0xd4>)
 800846c:	4413      	add	r3, r2
 800846e:	4299      	cmp	r1, r3
 8008470:	d101      	bne.n	8008476 <xTaskPriorityInherit+0x56>
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <xTaskPriorityInherit+0x58>
 8008476:	2300      	movs	r3, #0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d022      	beq.n	80084c2 <xTaskPriorityInherit+0xa2>
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	3304      	adds	r3, #4
 8008480:	4618      	mov	r0, r3
 8008482:	f7fe fc81 	bl	8006d88 <uxListRemove>
 8008486:	4b1a      	ldr	r3, [pc, #104]	; (80084f0 <xTaskPriorityInherit+0xd0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	4b18      	ldr	r3, [pc, #96]	; (80084f8 <xTaskPriorityInherit+0xd8>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	429a      	cmp	r2, r3
 800849a:	d903      	bls.n	80084a4 <xTaskPriorityInherit+0x84>
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a0:	4a15      	ldr	r2, [pc, #84]	; (80084f8 <xTaskPriorityInherit+0xd8>)
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4a10      	ldr	r2, [pc, #64]	; (80084f4 <xTaskPriorityInherit+0xd4>)
 80084b2:	441a      	add	r2, r3
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	3304      	adds	r3, #4
 80084b8:	4619      	mov	r1, r3
 80084ba:	4610      	mov	r0, r2
 80084bc:	f7fe fc09 	bl	8006cd2 <vListInsertEnd>
 80084c0:	e004      	b.n	80084cc <xTaskPriorityInherit+0xac>
 80084c2:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <xTaskPriorityInherit+0xd0>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80084cc:	2301      	movs	r3, #1
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	e008      	b.n	80084e4 <xTaskPriorityInherit+0xc4>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084d6:	4b06      	ldr	r3, [pc, #24]	; (80084f0 <xTaskPriorityInherit+0xd0>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	429a      	cmp	r2, r3
 80084de:	d201      	bcs.n	80084e4 <xTaskPriorityInherit+0xc4>
 80084e0:	2301      	movs	r3, #1
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	200006f0 	.word	0x200006f0
 80084f4:	200006f4 	.word	0x200006f4
 80084f8:	20000bcc 	.word	0x20000bcc

080084fc <xTaskPriorityDisinherit>:
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	60bb      	str	r3, [r7, #8]
 8008508:	2300      	movs	r3, #0
 800850a:	60fb      	str	r3, [r7, #12]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d037      	beq.n	8008582 <xTaskPriorityDisinherit+0x86>
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008516:	1e5a      	subs	r2, r3, #1
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	651a      	str	r2, [r3, #80]	; 0x50
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008524:	429a      	cmp	r2, r3
 8008526:	d02c      	beq.n	8008582 <xTaskPriorityDisinherit+0x86>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800852c:	2b00      	cmp	r3, #0
 800852e:	d128      	bne.n	8008582 <xTaskPriorityDisinherit+0x86>
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	3304      	adds	r3, #4
 8008534:	4618      	mov	r0, r3
 8008536:	f7fe fc27 	bl	8006d88 <uxListRemove>
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	62da      	str	r2, [r3, #44]	; 0x2c
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	619a      	str	r2, [r3, #24]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008552:	4b0e      	ldr	r3, [pc, #56]	; (800858c <xTaskPriorityDisinherit+0x90>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d903      	bls.n	8008562 <xTaskPriorityDisinherit+0x66>
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	4a0b      	ldr	r2, [pc, #44]	; (800858c <xTaskPriorityDisinherit+0x90>)
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4a08      	ldr	r2, [pc, #32]	; (8008590 <xTaskPriorityDisinherit+0x94>)
 8008570:	441a      	add	r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	3304      	adds	r3, #4
 8008576:	4619      	mov	r1, r3
 8008578:	4610      	mov	r0, r2
 800857a:	f7fe fbaa 	bl	8006cd2 <vListInsertEnd>
 800857e:	2301      	movs	r3, #1
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	20000bcc 	.word	0x20000bcc
 8008590:	200006f4 	.word	0x200006f4

08008594 <vTaskPriorityDisinheritAfterTimeout>:
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	613b      	str	r3, [r7, #16]
 80085a2:	2301      	movs	r3, #1
 80085a4:	60fb      	str	r3, [r7, #12]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d050      	beq.n	800864e <vTaskPriorityDisinheritAfterTimeout+0xba>
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d902      	bls.n	80085bc <vTaskPriorityDisinheritAfterTimeout+0x28>
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	617b      	str	r3, [r7, #20]
 80085ba:	e002      	b.n	80085c2 <vTaskPriorityDisinheritAfterTimeout+0x2e>
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085c0:	617b      	str	r3, [r7, #20]
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d040      	beq.n	800864e <vTaskPriorityDisinheritAfterTimeout+0xba>
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d13b      	bne.n	800864e <vTaskPriorityDisinheritAfterTimeout+0xba>
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085da:	60bb      	str	r3, [r7, #8]
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	db04      	blt.n	80085f4 <vTaskPriorityDisinheritAfterTimeout+0x60>
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	619a      	str	r2, [r3, #24]
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	6959      	ldr	r1, [r3, #20]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	4613      	mov	r3, r2
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4a15      	ldr	r2, [pc, #84]	; (8008658 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8008604:	4413      	add	r3, r2
 8008606:	4299      	cmp	r1, r3
 8008608:	d101      	bne.n	800860e <vTaskPriorityDisinheritAfterTimeout+0x7a>
 800860a:	2301      	movs	r3, #1
 800860c:	e000      	b.n	8008610 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800860e:	2300      	movs	r3, #0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d01c      	beq.n	800864e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	3304      	adds	r3, #4
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fbb5 	bl	8006d88 <uxListRemove>
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008622:	4b0e      	ldr	r3, [pc, #56]	; (800865c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d903      	bls.n	8008632 <vTaskPriorityDisinheritAfterTimeout+0x9e>
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	4a0b      	ldr	r2, [pc, #44]	; (800865c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4a06      	ldr	r2, [pc, #24]	; (8008658 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8008640:	441a      	add	r2, r3
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	3304      	adds	r3, #4
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f7fe fb42 	bl	8006cd2 <vListInsertEnd>
 800864e:	bf00      	nop
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	200006f4 	.word	0x200006f4
 800865c:	20000bcc 	.word	0x20000bcc

08008660 <pvTaskIncrementMutexHeldCount>:
 8008660:	b480      	push	{r7}
 8008662:	af00      	add	r7, sp, #0
 8008664:	4b07      	ldr	r3, [pc, #28]	; (8008684 <pvTaskIncrementMutexHeldCount+0x24>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <pvTaskIncrementMutexHeldCount+0x16>
 800866c:	4b05      	ldr	r3, [pc, #20]	; (8008684 <pvTaskIncrementMutexHeldCount+0x24>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008672:	3201      	adds	r2, #1
 8008674:	651a      	str	r2, [r3, #80]	; 0x50
 8008676:	4b03      	ldr	r3, [pc, #12]	; (8008684 <pvTaskIncrementMutexHeldCount+0x24>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	46bd      	mov	sp, r7
 800867e:	bc80      	pop	{r7}
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	200006f0 	.word	0x200006f0

08008688 <prvAddCurrentTaskToDelayedList>:
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
 8008692:	4b21      	ldr	r3, [pc, #132]	; (8008718 <prvAddCurrentTaskToDelayedList+0x90>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	4b20      	ldr	r3, [pc, #128]	; (800871c <prvAddCurrentTaskToDelayedList+0x94>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3304      	adds	r3, #4
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe fb72 	bl	8006d88 <uxListRemove>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086aa:	d10a      	bne.n	80086c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d007      	beq.n	80086c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80086b2:	4b1a      	ldr	r3, [pc, #104]	; (800871c <prvAddCurrentTaskToDelayedList+0x94>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3304      	adds	r3, #4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4819      	ldr	r0, [pc, #100]	; (8008720 <prvAddCurrentTaskToDelayedList+0x98>)
 80086bc:	f7fe fb09 	bl	8006cd2 <vListInsertEnd>
 80086c0:	e026      	b.n	8008710 <prvAddCurrentTaskToDelayedList+0x88>
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4413      	add	r3, r2
 80086c8:	60bb      	str	r3, [r7, #8]
 80086ca:	4b14      	ldr	r3, [pc, #80]	; (800871c <prvAddCurrentTaskToDelayedList+0x94>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	605a      	str	r2, [r3, #4]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d209      	bcs.n	80086ee <prvAddCurrentTaskToDelayedList+0x66>
 80086da:	4b12      	ldr	r3, [pc, #72]	; (8008724 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	4b0f      	ldr	r3, [pc, #60]	; (800871c <prvAddCurrentTaskToDelayedList+0x94>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3304      	adds	r3, #4
 80086e4:	4619      	mov	r1, r3
 80086e6:	4610      	mov	r0, r2
 80086e8:	f7fe fb16 	bl	8006d18 <vListInsert>
 80086ec:	e010      	b.n	8008710 <prvAddCurrentTaskToDelayedList+0x88>
 80086ee:	4b0e      	ldr	r3, [pc, #56]	; (8008728 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	4b0a      	ldr	r3, [pc, #40]	; (800871c <prvAddCurrentTaskToDelayedList+0x94>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3304      	adds	r3, #4
 80086f8:	4619      	mov	r1, r3
 80086fa:	4610      	mov	r0, r2
 80086fc:	f7fe fb0c 	bl	8006d18 <vListInsert>
 8008700:	4b0a      	ldr	r3, [pc, #40]	; (800872c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	429a      	cmp	r2, r3
 8008708:	d202      	bcs.n	8008710 <prvAddCurrentTaskToDelayedList+0x88>
 800870a:	4a08      	ldr	r2, [pc, #32]	; (800872c <prvAddCurrentTaskToDelayedList+0xa4>)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	bf00      	nop
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	20000bc8 	.word	0x20000bc8
 800871c:	200006f0 	.word	0x200006f0
 8008720:	20000bb0 	.word	0x20000bb0
 8008724:	20000b80 	.word	0x20000b80
 8008728:	20000b7c 	.word	0x20000b7c
 800872c:	20000be4 	.word	0x20000be4

08008730 <xTimerCreateTimerTask>:
 8008730:	b580      	push	{r7, lr}
 8008732:	b088      	sub	sp, #32
 8008734:	af04      	add	r7, sp, #16
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	f000 fa69 	bl	8008c10 <prvCheckForValidListAndQueue>
 800873e:	4b15      	ldr	r3, [pc, #84]	; (8008794 <xTimerCreateTimerTask+0x64>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d020      	beq.n	8008788 <xTimerCreateTimerTask+0x58>
 8008746:	2300      	movs	r3, #0
 8008748:	60bb      	str	r3, [r7, #8]
 800874a:	2300      	movs	r3, #0
 800874c:	607b      	str	r3, [r7, #4]
 800874e:	463a      	mov	r2, r7
 8008750:	1d39      	adds	r1, r7, #4
 8008752:	f107 0308 	add.w	r3, r7, #8
 8008756:	4618      	mov	r0, r3
 8008758:	f7fe fa76 	bl	8006c48 <vApplicationGetTimerTaskMemory>
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	9202      	str	r2, [sp, #8]
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	2302      	movs	r3, #2
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	2300      	movs	r3, #0
 800876c:	460a      	mov	r2, r1
 800876e:	490a      	ldr	r1, [pc, #40]	; (8008798 <xTimerCreateTimerTask+0x68>)
 8008770:	480a      	ldr	r0, [pc, #40]	; (800879c <xTimerCreateTimerTask+0x6c>)
 8008772:	f7ff f8ff 	bl	8007974 <xTaskCreateStatic>
 8008776:	4603      	mov	r3, r0
 8008778:	4a09      	ldr	r2, [pc, #36]	; (80087a0 <xTimerCreateTimerTask+0x70>)
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	4b08      	ldr	r3, [pc, #32]	; (80087a0 <xTimerCreateTimerTask+0x70>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <xTimerCreateTimerTask+0x58>
 8008784:	2301      	movs	r3, #1
 8008786:	60fb      	str	r3, [r7, #12]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000c20 	.word	0x20000c20
 8008798:	08009308 	.word	0x08009308
 800879c:	08008889 	.word	0x08008889
 80087a0:	20000c24 	.word	0x20000c24

080087a4 <xTimerGenericCommand>:
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b08a      	sub	sp, #40	; 0x28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	603b      	str	r3, [r7, #0]
 80087b2:	2300      	movs	r3, #0
 80087b4:	627b      	str	r3, [r7, #36]	; 0x24
 80087b6:	4b1a      	ldr	r3, [pc, #104]	; (8008820 <xTimerGenericCommand+0x7c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d02a      	beq.n	8008814 <xTimerGenericCommand+0x70>
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	61fb      	str	r3, [r7, #28]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2b05      	cmp	r3, #5
 80087ce:	dc18      	bgt.n	8008802 <xTimerGenericCommand+0x5e>
 80087d0:	f7ff fe08 	bl	80083e4 <xTaskGetSchedulerState>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d109      	bne.n	80087ee <xTimerGenericCommand+0x4a>
 80087da:	4b11      	ldr	r3, [pc, #68]	; (8008820 <xTimerGenericCommand+0x7c>)
 80087dc:	6818      	ldr	r0, [r3, #0]
 80087de:	f107 0114 	add.w	r1, r7, #20
 80087e2:	2300      	movs	r3, #0
 80087e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087e6:	f7fe fbdb 	bl	8006fa0 <xQueueGenericSend>
 80087ea:	6278      	str	r0, [r7, #36]	; 0x24
 80087ec:	e012      	b.n	8008814 <xTimerGenericCommand+0x70>
 80087ee:	4b0c      	ldr	r3, [pc, #48]	; (8008820 <xTimerGenericCommand+0x7c>)
 80087f0:	6818      	ldr	r0, [r3, #0]
 80087f2:	f107 0114 	add.w	r1, r7, #20
 80087f6:	2300      	movs	r3, #0
 80087f8:	2200      	movs	r2, #0
 80087fa:	f7fe fbd1 	bl	8006fa0 <xQueueGenericSend>
 80087fe:	6278      	str	r0, [r7, #36]	; 0x24
 8008800:	e008      	b.n	8008814 <xTimerGenericCommand+0x70>
 8008802:	4b07      	ldr	r3, [pc, #28]	; (8008820 <xTimerGenericCommand+0x7c>)
 8008804:	6818      	ldr	r0, [r3, #0]
 8008806:	f107 0114 	add.w	r1, r7, #20
 800880a:	2300      	movs	r3, #0
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	f7fe fc71 	bl	80070f4 <xQueueGenericSendFromISR>
 8008812:	6278      	str	r0, [r7, #36]	; 0x24
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	4618      	mov	r0, r3
 8008818:	3728      	adds	r7, #40	; 0x28
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000c20 	.word	0x20000c20

08008824 <prvProcessExpiredTimer>:
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af02      	add	r7, sp, #8
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
 800882e:	4b15      	ldr	r3, [pc, #84]	; (8008884 <prvProcessExpiredTimer+0x60>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3304      	adds	r3, #4
 800883c:	4618      	mov	r0, r3
 800883e:	f7fe faa3 	bl	8006d88 <uxListRemove>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d114      	bne.n	8008874 <prvProcessExpiredTimer+0x50>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	699a      	ldr	r2, [r3, #24]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	18d1      	adds	r1, r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f000 f8ba 	bl	80089d0 <prvInsertTimerInActiveList>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d008      	beq.n	8008874 <prvProcessExpiredTimer+0x50>
 8008862:	2300      	movs	r3, #0
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	2300      	movs	r3, #0
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	2100      	movs	r1, #0
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff ff99 	bl	80087a4 <xTimerGenericCommand>
 8008872:	60b8      	str	r0, [r7, #8]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	4798      	blx	r3
 800887c:	bf00      	nop
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	20000c18 	.word	0x20000c18

08008888 <prvTimerTask>:
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	f107 0308 	add.w	r3, r7, #8
 8008894:	4618      	mov	r0, r3
 8008896:	f000 f857 	bl	8008948 <prvGetNextExpireTime>
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	4619      	mov	r1, r3
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 f803 	bl	80088ac <prvProcessTimerOrBlockTask>
 80088a6:	f000 f8d5 	bl	8008a54 <prvProcessReceivedCommands>
 80088aa:	e7f1      	b.n	8008890 <prvTimerTask+0x8>

080088ac <prvProcessTimerOrBlockTask>:
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
 80088b6:	f7ff fa35 	bl	8007d24 <vTaskSuspendAll>
 80088ba:	f107 0308 	add.w	r3, r7, #8
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f866 	bl	8008990 <prvSampleTimeNow>
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d130      	bne.n	800892e <prvProcessTimerOrBlockTask+0x82>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <prvProcessTimerOrBlockTask+0x3c>
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d806      	bhi.n	80088e8 <prvProcessTimerOrBlockTask+0x3c>
 80088da:	f7ff fa31 	bl	8007d40 <xTaskResumeAll>
 80088de:	68f9      	ldr	r1, [r7, #12]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff ff9f 	bl	8008824 <prvProcessExpiredTimer>
 80088e6:	e024      	b.n	8008932 <prvProcessTimerOrBlockTask+0x86>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d008      	beq.n	8008900 <prvProcessTimerOrBlockTask+0x54>
 80088ee:	4b13      	ldr	r3, [pc, #76]	; (800893c <prvProcessTimerOrBlockTask+0x90>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	bf0c      	ite	eq
 80088f8:	2301      	moveq	r3, #1
 80088fa:	2300      	movne	r3, #0
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	603b      	str	r3, [r7, #0]
 8008900:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <prvProcessTimerOrBlockTask+0x94>)
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	4619      	mov	r1, r3
 800890e:	f7fe fffd 	bl	800790c <vQueueWaitForMessageRestricted>
 8008912:	f7ff fa15 	bl	8007d40 <xTaskResumeAll>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10a      	bne.n	8008932 <prvProcessTimerOrBlockTask+0x86>
 800891c:	4b09      	ldr	r3, [pc, #36]	; (8008944 <prvProcessTimerOrBlockTask+0x98>)
 800891e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	e001      	b.n	8008932 <prvProcessTimerOrBlockTask+0x86>
 800892e:	f7ff fa07 	bl	8007d40 <xTaskResumeAll>
 8008932:	bf00      	nop
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	20000c1c 	.word	0x20000c1c
 8008940:	20000c20 	.word	0x20000c20
 8008944:	e000ed04 	.word	0xe000ed04

08008948 <prvGetNextExpireTime>:
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	4b0e      	ldr	r3, [pc, #56]	; (800898c <prvGetNextExpireTime+0x44>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	bf0c      	ite	eq
 800895a:	2301      	moveq	r3, #1
 800895c:	2300      	movne	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	461a      	mov	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d105      	bne.n	800897a <prvGetNextExpireTime+0x32>
 800896e:	4b07      	ldr	r3, [pc, #28]	; (800898c <prvGetNextExpireTime+0x44>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	e001      	b.n	800897e <prvGetNextExpireTime+0x36>
 800897a:	2300      	movs	r3, #0
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	bc80      	pop	{r7}
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	20000c18 	.word	0x20000c18

08008990 <prvSampleTimeNow>:
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	f7ff fa60 	bl	8007e5c <xTaskGetTickCount>
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	4b0b      	ldr	r3, [pc, #44]	; (80089cc <prvSampleTimeNow+0x3c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d205      	bcs.n	80089b4 <prvSampleTimeNow+0x24>
 80089a8:	f000 f8de 	bl	8008b68 <prvSwitchTimerLists>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	e002      	b.n	80089ba <prvSampleTimeNow+0x2a>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	4a04      	ldr	r2, [pc, #16]	; (80089cc <prvSampleTimeNow+0x3c>)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6013      	str	r3, [r2, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20000c28 	.word	0x20000c28

080089d0 <prvInsertTimerInActiveList>:
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]
 80089de:	2300      	movs	r3, #0
 80089e0:	617b      	str	r3, [r7, #20]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	605a      	str	r2, [r3, #4]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	611a      	str	r2, [r3, #16]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d812      	bhi.n	8008a1c <prvInsertTimerInActiveList+0x4c>
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	1ad2      	subs	r2, r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d302      	bcc.n	8008a0a <prvInsertTimerInActiveList+0x3a>
 8008a04:	2301      	movs	r3, #1
 8008a06:	617b      	str	r3, [r7, #20]
 8008a08:	e01b      	b.n	8008a42 <prvInsertTimerInActiveList+0x72>
 8008a0a:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <prvInsertTimerInActiveList+0x7c>)
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3304      	adds	r3, #4
 8008a12:	4619      	mov	r1, r3
 8008a14:	4610      	mov	r0, r2
 8008a16:	f7fe f97f 	bl	8006d18 <vListInsert>
 8008a1a:	e012      	b.n	8008a42 <prvInsertTimerInActiveList+0x72>
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d206      	bcs.n	8008a32 <prvInsertTimerInActiveList+0x62>
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d302      	bcc.n	8008a32 <prvInsertTimerInActiveList+0x62>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	617b      	str	r3, [r7, #20]
 8008a30:	e007      	b.n	8008a42 <prvInsertTimerInActiveList+0x72>
 8008a32:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <prvInsertTimerInActiveList+0x80>)
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3304      	adds	r3, #4
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	f7fe f96b 	bl	8006d18 <vListInsert>
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	4618      	mov	r0, r3
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20000c1c 	.word	0x20000c1c
 8008a50:	20000c18 	.word	0x20000c18

08008a54 <prvProcessReceivedCommands>:
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08c      	sub	sp, #48	; 0x30
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	e073      	b.n	8008b44 <prvProcessReceivedCommands+0xf0>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	da0b      	bge.n	8008a7a <prvProcessReceivedCommands+0x26>
 8008a62:	f107 0308 	add.w	r3, r7, #8
 8008a66:	3304      	adds	r3, #4
 8008a68:	627b      	str	r3, [r7, #36]	; 0x24
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a70:	6850      	ldr	r0, [r2, #4]
 8008a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a74:	6892      	ldr	r2, [r2, #8]
 8008a76:	4611      	mov	r1, r2
 8008a78:	4798      	blx	r3
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	db60      	blt.n	8008b42 <prvProcessReceivedCommands+0xee>
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	623b      	str	r3, [r7, #32]
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d004      	beq.n	8008a96 <prvProcessReceivedCommands+0x42>
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fe f979 	bl	8006d88 <uxListRemove>
 8008a96:	1d3b      	adds	r3, r7, #4
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7ff ff79 	bl	8008990 <prvSampleTimeNow>
 8008a9e:	61f8      	str	r0, [r7, #28]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2b09      	cmp	r3, #9
 8008aa4:	d84e      	bhi.n	8008b44 <prvProcessReceivedCommands+0xf0>
 8008aa6:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <prvProcessReceivedCommands+0x58>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008ad5 	.word	0x08008ad5
 8008ab0:	08008ad5 	.word	0x08008ad5
 8008ab4:	08008ad5 	.word	0x08008ad5
 8008ab8:	08008b45 	.word	0x08008b45
 8008abc:	08008b17 	.word	0x08008b17
 8008ac0:	08008b31 	.word	0x08008b31
 8008ac4:	08008ad5 	.word	0x08008ad5
 8008ac8:	08008ad5 	.word	0x08008ad5
 8008acc:	08008b45 	.word	0x08008b45
 8008ad0:	08008b17 	.word	0x08008b17
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	18d1      	adds	r1, r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	69fa      	ldr	r2, [r7, #28]
 8008ae0:	6a38      	ldr	r0, [r7, #32]
 8008ae2:	f7ff ff75 	bl	80089d0 <prvInsertTimerInActiveList>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d02b      	beq.n	8008b44 <prvProcessReceivedCommands+0xf0>
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af0:	6a38      	ldr	r0, [r7, #32]
 8008af2:	4798      	blx	r3
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d123      	bne.n	8008b44 <prvProcessReceivedCommands+0xf0>
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	441a      	add	r2, r3
 8008b04:	2300      	movs	r3, #0
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	2300      	movs	r3, #0
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	6a38      	ldr	r0, [r7, #32]
 8008b0e:	f7ff fe49 	bl	80087a4 <xTimerGenericCommand>
 8008b12:	61b8      	str	r0, [r7, #24]
 8008b14:	e016      	b.n	8008b44 <prvProcessReceivedCommands+0xf0>
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	619a      	str	r2, [r3, #24]
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	699a      	ldr	r2, [r3, #24]
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	18d1      	adds	r1, r2, r3
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	69fa      	ldr	r2, [r7, #28]
 8008b28:	6a38      	ldr	r0, [r7, #32]
 8008b2a:	f7ff ff51 	bl	80089d0 <prvInsertTimerInActiveList>
 8008b2e:	e009      	b.n	8008b44 <prvProcessReceivedCommands+0xf0>
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d104      	bne.n	8008b44 <prvProcessReceivedCommands+0xf0>
 8008b3a:	6a38      	ldr	r0, [r7, #32]
 8008b3c:	f000 fa64 	bl	8009008 <vPortFree>
 8008b40:	e000      	b.n	8008b44 <prvProcessReceivedCommands+0xf0>
 8008b42:	bf00      	nop
 8008b44:	4b07      	ldr	r3, [pc, #28]	; (8008b64 <prvProcessReceivedCommands+0x110>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f107 0108 	add.w	r1, r7, #8
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe fb7e 	bl	8007250 <xQueueReceive>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d180      	bne.n	8008a5c <prvProcessReceivedCommands+0x8>
 8008b5a:	bf00      	nop
 8008b5c:	bf00      	nop
 8008b5e:	3728      	adds	r7, #40	; 0x28
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20000c20 	.word	0x20000c20

08008b68 <prvSwitchTimerLists>:
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af02      	add	r7, sp, #8
 8008b6e:	e037      	b.n	8008be0 <prvSwitchTimerLists+0x78>
 8008b70:	4b25      	ldr	r3, [pc, #148]	; (8008c08 <prvSwitchTimerLists+0xa0>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	613b      	str	r3, [r7, #16]
 8008b7a:	4b23      	ldr	r3, [pc, #140]	; (8008c08 <prvSwitchTimerLists+0xa0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3304      	adds	r3, #4
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fe f8fd 	bl	8006d88 <uxListRemove>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	4798      	blx	r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d120      	bne.n	8008be0 <prvSwitchTimerLists+0x78>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	60bb      	str	r3, [r7, #8]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d90e      	bls.n	8008bce <prvSwitchTimerLists+0x66>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	605a      	str	r2, [r3, #4]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	611a      	str	r2, [r3, #16]
 8008bbc:	4b12      	ldr	r3, [pc, #72]	; (8008c08 <prvSwitchTimerLists+0xa0>)
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	f7fe f8a6 	bl	8006d18 <vListInsert>
 8008bcc:	e008      	b.n	8008be0 <prvSwitchTimerLists+0x78>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f7ff fde3 	bl	80087a4 <xTimerGenericCommand>
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	4b09      	ldr	r3, [pc, #36]	; (8008c08 <prvSwitchTimerLists+0xa0>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1c2      	bne.n	8008b70 <prvSwitchTimerLists+0x8>
 8008bea:	4b07      	ldr	r3, [pc, #28]	; (8008c08 <prvSwitchTimerLists+0xa0>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <prvSwitchTimerLists+0xa4>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a04      	ldr	r2, [pc, #16]	; (8008c08 <prvSwitchTimerLists+0xa0>)
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	4a04      	ldr	r2, [pc, #16]	; (8008c0c <prvSwitchTimerLists+0xa4>)
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	bf00      	nop
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	20000c18 	.word	0x20000c18
 8008c0c:	20000c1c 	.word	0x20000c1c

08008c10 <prvCheckForValidListAndQueue>:
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	f000 f8c7 	bl	8008da8 <vPortEnterCritical>
 8008c1a:	4b15      	ldr	r3, [pc, #84]	; (8008c70 <prvCheckForValidListAndQueue+0x60>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d120      	bne.n	8008c64 <prvCheckForValidListAndQueue+0x54>
 8008c22:	4814      	ldr	r0, [pc, #80]	; (8008c74 <prvCheckForValidListAndQueue+0x64>)
 8008c24:	f7fe f82a 	bl	8006c7c <vListInitialise>
 8008c28:	4813      	ldr	r0, [pc, #76]	; (8008c78 <prvCheckForValidListAndQueue+0x68>)
 8008c2a:	f7fe f827 	bl	8006c7c <vListInitialise>
 8008c2e:	4b13      	ldr	r3, [pc, #76]	; (8008c7c <prvCheckForValidListAndQueue+0x6c>)
 8008c30:	4a10      	ldr	r2, [pc, #64]	; (8008c74 <prvCheckForValidListAndQueue+0x64>)
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	4b12      	ldr	r3, [pc, #72]	; (8008c80 <prvCheckForValidListAndQueue+0x70>)
 8008c36:	4a10      	ldr	r2, [pc, #64]	; (8008c78 <prvCheckForValidListAndQueue+0x68>)
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	4b11      	ldr	r3, [pc, #68]	; (8008c84 <prvCheckForValidListAndQueue+0x74>)
 8008c40:	4a11      	ldr	r2, [pc, #68]	; (8008c88 <prvCheckForValidListAndQueue+0x78>)
 8008c42:	2110      	movs	r1, #16
 8008c44:	200a      	movs	r0, #10
 8008c46:	f7fe f923 	bl	8006e90 <xQueueGenericCreateStatic>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	4a08      	ldr	r2, [pc, #32]	; (8008c70 <prvCheckForValidListAndQueue+0x60>)
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <prvCheckForValidListAndQueue+0x60>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d005      	beq.n	8008c64 <prvCheckForValidListAndQueue+0x54>
 8008c58:	4b05      	ldr	r3, [pc, #20]	; (8008c70 <prvCheckForValidListAndQueue+0x60>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	490b      	ldr	r1, [pc, #44]	; (8008c8c <prvCheckForValidListAndQueue+0x7c>)
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fe fe2c 	bl	80078bc <vQueueAddToRegistry>
 8008c64:	f000 f8ba 	bl	8008ddc <vPortExitCritical>
 8008c68:	bf00      	nop
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	20000c20 	.word	0x20000c20
 8008c74:	20000bf0 	.word	0x20000bf0
 8008c78:	20000c04 	.word	0x20000c04
 8008c7c:	20000c18 	.word	0x20000c18
 8008c80:	20000c1c 	.word	0x20000c1c
 8008c84:	20000ccc 	.word	0x20000ccc
 8008c88:	20000c2c 	.word	0x20000c2c
 8008c8c:	08009310 	.word	0x08009310

08008c90 <pxPortInitialiseStack>:
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3b04      	subs	r3, #4
 8008ca0:	60fb      	str	r3, [r7, #12]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ca8:	601a      	str	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3b04      	subs	r3, #4
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	f023 0201 	bic.w	r2, r3, #1
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	601a      	str	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	3b04      	subs	r3, #4
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	4a08      	ldr	r2, [pc, #32]	; (8008ce4 <pxPortInitialiseStack+0x54>)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3b14      	subs	r3, #20
 8008cca:	60fb      	str	r3, [r7, #12]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3b20      	subs	r3, #32
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr
 8008ce4:	08008ce9 	.word	0x08008ce9

08008ce8 <prvTaskExitError>:
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	2300      	movs	r3, #0
 8008cf0:	603b      	str	r3, [r7, #0]
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	607b      	str	r3, [r7, #4]
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0fc      	beq.n	8008d08 <prvTaskExitError+0x20>
 8008d0e:	bf00      	nop
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bc80      	pop	{r7}
 8008d18:	4770      	bx	lr
 8008d1a:	0000      	movs	r0, r0
 8008d1c:	0000      	movs	r0, r0
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
	...

08008d20 <SVC_Handler>:
 8008d20:	4b07      	ldr	r3, [pc, #28]	; (8008d40 <pxCurrentTCBConst2>)
 8008d22:	6819      	ldr	r1, [r3, #0]
 8008d24:	6808      	ldr	r0, [r1, #0]
 8008d26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008d2a:	f380 8809 	msr	PSP, r0
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f04f 0000 	mov.w	r0, #0
 8008d36:	f380 8811 	msr	BASEPRI, r0
 8008d3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008d3e:	4770      	bx	lr

08008d40 <pxCurrentTCBConst2>:
 8008d40:	200006f0 	.word	0x200006f0
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop

08008d48 <prvPortStartFirstTask>:
 8008d48:	4806      	ldr	r0, [pc, #24]	; (8008d64 <prvPortStartFirstTask+0x1c>)
 8008d4a:	6800      	ldr	r0, [r0, #0]
 8008d4c:	6800      	ldr	r0, [r0, #0]
 8008d4e:	f380 8808 	msr	MSP, r0
 8008d52:	b662      	cpsie	i
 8008d54:	b661      	cpsie	f
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	df00      	svc	0
 8008d60:	bf00      	nop
 8008d62:	bf00      	nop
 8008d64:	e000ed08 	.word	0xe000ed08

08008d68 <xPortStartScheduler>:
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <xPortStartScheduler+0x38>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a0b      	ldr	r2, [pc, #44]	; (8008da0 <xPortStartScheduler+0x38>)
 8008d72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <xPortStartScheduler+0x38>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a08      	ldr	r2, [pc, #32]	; (8008da0 <xPortStartScheduler+0x38>)
 8008d7e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	f000 f88a 	bl	8008e9c <vPortSetupTimerInterrupt>
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <xPortStartScheduler+0x3c>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	f7ff ffdb 	bl	8008d48 <prvPortStartFirstTask>
<<<<<<< HEAD
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d92:	f7ff f91d 	bl	8007fd0 <vTaskSwitchContext>
	prvTaskExitError();
 8008d96:	f7ff ffa5 	bl	8008ce4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
=======
 8008d92:	f7ff f91f 	bl	8007fd4 <vTaskSwitchContext>
 8008d96:	f7ff ffa7 	bl	8008ce8 <prvTaskExitError>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	e000ed20 	.word	0xe000ed20
 8008da4:	2000000c 	.word	0x2000000c

08008da8 <vPortEnterCritical>:
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	607b      	str	r3, [r7, #4]
 8008dc0:	bf00      	nop
 8008dc2:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <vPortEnterCritical+0x30>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	4a03      	ldr	r2, [pc, #12]	; (8008dd8 <vPortEnterCritical+0x30>)
 8008dca:	6013      	str	r3, [r2, #0]
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bc80      	pop	{r7}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	2000000c 	.word	0x2000000c

08008ddc <vPortExitCritical>:
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <vPortExitCritical+0x30>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3b01      	subs	r3, #1
 8008de8:	4a08      	ldr	r2, [pc, #32]	; (8008e0c <vPortExitCritical+0x30>)
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	4b07      	ldr	r3, [pc, #28]	; (8008e0c <vPortExitCritical+0x30>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d105      	bne.n	8008e00 <vPortExitCritical+0x24>
 8008df4:	2300      	movs	r3, #0
 8008df6:	607b      	str	r3, [r7, #4]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	bf00      	nop
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bc80      	pop	{r7}
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	2000000c 	.word	0x2000000c

08008e10 <PendSV_Handler>:
 8008e10:	f3ef 8009 	mrs	r0, PSP
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	4b0d      	ldr	r3, [pc, #52]	; (8008e50 <pxCurrentTCBConst>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e20:	6010      	str	r0, [r2, #0]
 8008e22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008e26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e2a:	f380 8811 	msr	BASEPRI, r0
 8008e2e:	f7ff f8cf 	bl	8007fd0 <vTaskSwitchContext>
 8008e32:	f04f 0000 	mov.w	r0, #0
 8008e36:	f380 8811 	msr	BASEPRI, r0
 8008e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008e3e:	6819      	ldr	r1, [r3, #0]
 8008e40:	6808      	ldr	r0, [r1, #0]
 8008e42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e46:	f380 8809 	msr	PSP, r0
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	4770      	bx	lr

08008e50 <pxCurrentTCBConst>:
 8008e50:	200006f0 	.word	0x200006f0
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop

08008e58 <xPortSysTickHandler>:
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
 8008e70:	bf00      	nop
<<<<<<< HEAD
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e72:	f7fe ffff 	bl	8007e74 <xTaskIncrementTick>
=======
 8008e72:	f7ff f801 	bl	8007e78 <xTaskIncrementTick>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <xPortSysTickHandler+0x2c>
 8008e7c:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <xPortSysTickHandler+0x40>)
 8008e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	2300      	movs	r3, #0
 8008e86:	603b      	str	r3, [r7, #0]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	bf00      	nop
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	e000ed04 	.word	0xe000ed04

08008e9c <vPortSetupTimerInterrupt>:
 8008e9c:	b480      	push	{r7}
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <vPortSetupTimerInterrupt+0x30>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <vPortSetupTimerInterrupt+0x34>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <vPortSetupTimerInterrupt+0x38>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a09      	ldr	r2, [pc, #36]	; (8008ed8 <vPortSetupTimerInterrupt+0x3c>)
 8008eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb6:	099b      	lsrs	r3, r3, #6
 8008eb8:	4a08      	ldr	r2, [pc, #32]	; (8008edc <vPortSetupTimerInterrupt+0x40>)
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	4b03      	ldr	r3, [pc, #12]	; (8008ecc <vPortSetupTimerInterrupt+0x30>)
 8008ec0:	2207      	movs	r2, #7
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	bf00      	nop
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr
 8008ecc:	e000e010 	.word	0xe000e010
 8008ed0:	e000e018 	.word	0xe000e018
 8008ed4:	20000000 	.word	0x20000000
 8008ed8:	10624dd3 	.word	0x10624dd3
 8008edc:	e000e014 	.word	0xe000e014

08008ee0 <pvPortMalloc>:
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60fb      	str	r3, [r7, #12]
<<<<<<< HEAD

	vTaskSuspendAll();
 8008eec:	f7fe ff18 	bl	8007d20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
=======
 8008eec:	f7fe ff1a 	bl	8007d24 <vTaskSuspendAll>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8008ef0:	4b40      	ldr	r3, [pc, #256]	; (8008ff4 <pvPortMalloc+0x114>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <pvPortMalloc+0x1c>
 8008ef8:	f000 f8c0 	bl	800907c <prvHeapInit>
 8008efc:	4b3e      	ldr	r3, [pc, #248]	; (8008ff8 <pvPortMalloc+0x118>)
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4013      	ands	r3, r2
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d16d      	bne.n	8008fe4 <pvPortMalloc+0x104>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00d      	beq.n	8008f2a <pvPortMalloc+0x4a>
 8008f0e:	2208      	movs	r2, #8
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4413      	add	r3, r2
 8008f14:	607b      	str	r3, [r7, #4]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f003 0307 	and.w	r3, r3, #7
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <pvPortMalloc+0x4a>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f023 0307 	bic.w	r3, r3, #7
 8008f26:	3308      	adds	r3, #8
 8008f28:	607b      	str	r3, [r7, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d059      	beq.n	8008fe4 <pvPortMalloc+0x104>
 8008f30:	4b32      	ldr	r3, [pc, #200]	; (8008ffc <pvPortMalloc+0x11c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d854      	bhi.n	8008fe4 <pvPortMalloc+0x104>
 8008f3a:	4b31      	ldr	r3, [pc, #196]	; (8009000 <pvPortMalloc+0x120>)
 8008f3c:	613b      	str	r3, [r7, #16]
 8008f3e:	4b30      	ldr	r3, [pc, #192]	; (8009000 <pvPortMalloc+0x120>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	617b      	str	r3, [r7, #20]
 8008f44:	e004      	b.n	8008f50 <pvPortMalloc+0x70>
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	613b      	str	r3, [r7, #16]
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d903      	bls.n	8008f62 <pvPortMalloc+0x82>
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1f1      	bne.n	8008f46 <pvPortMalloc+0x66>
 8008f62:	4b24      	ldr	r3, [pc, #144]	; (8008ff4 <pvPortMalloc+0x114>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d03b      	beq.n	8008fe4 <pvPortMalloc+0x104>
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2208      	movs	r2, #8
 8008f72:	4413      	add	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	1ad2      	subs	r2, r2, r3
 8008f86:	2308      	movs	r3, #8
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d90f      	bls.n	8008fae <pvPortMalloc+0xce>
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4413      	add	r3, r2
 8008f94:	60bb      	str	r3, [r7, #8]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	1ad2      	subs	r2, r2, r3
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	605a      	str	r2, [r3, #4]
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	605a      	str	r2, [r3, #4]
 8008fa8:	68b8      	ldr	r0, [r7, #8]
 8008faa:	f000 f8c9 	bl	8009140 <prvInsertBlockIntoFreeList>
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <pvPortMalloc+0x11c>)
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	4a10      	ldr	r2, [pc, #64]	; (8008ffc <pvPortMalloc+0x11c>)
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <pvPortMalloc+0x11c>)
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	4b10      	ldr	r3, [pc, #64]	; (8009004 <pvPortMalloc+0x124>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d203      	bcs.n	8008fd0 <pvPortMalloc+0xf0>
 8008fc8:	4b0c      	ldr	r3, [pc, #48]	; (8008ffc <pvPortMalloc+0x11c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a0d      	ldr	r2, [pc, #52]	; (8009004 <pvPortMalloc+0x124>)
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	4b08      	ldr	r3, [pc, #32]	; (8008ff8 <pvPortMalloc+0x118>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	605a      	str	r2, [r3, #4]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	601a      	str	r2, [r3, #0]
<<<<<<< HEAD
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fe4:	f7fe feaa 	bl	8007d3c <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
=======
 8008fe4:	f7fe feac 	bl	8007d40 <xTaskResumeAll>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20003d24 	.word	0x20003d24
 8008ff8:	20003d30 	.word	0x20003d30
 8008ffc:	20003d28 	.word	0x20003d28
 8009000:	20003d1c 	.word	0x20003d1c
 8009004:	20003d2c 	.word	0x20003d2c

08009008 <vPortFree>:
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	60fb      	str	r3, [r7, #12]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d027      	beq.n	800906a <vPortFree+0x62>
 800901a:	2308      	movs	r3, #8
 800901c:	425b      	negs	r3, r3
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	4413      	add	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	60bb      	str	r3, [r7, #8]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	4b11      	ldr	r3, [pc, #68]	; (8009074 <vPortFree+0x6c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4013      	ands	r3, r2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d019      	beq.n	800906a <vPortFree+0x62>
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d115      	bne.n	800906a <vPortFree+0x62>
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <vPortFree+0x6c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	43db      	mvns	r3, r3
 8009048:	401a      	ands	r2, r3
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	605a      	str	r2, [r3, #4]
<<<<<<< HEAD

				vTaskSuspendAll();
 800904e:	f7fe fe67 	bl	8007d20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
=======
 800904e:	f7fe fe69 	bl	8007d24 <vTaskSuspendAll>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	4b08      	ldr	r3, [pc, #32]	; (8009078 <vPortFree+0x70>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4413      	add	r3, r2
 800905c:	4a06      	ldr	r2, [pc, #24]	; (8009078 <vPortFree+0x70>)
 800905e:	6013      	str	r3, [r2, #0]
 8009060:	68b8      	ldr	r0, [r7, #8]
 8009062:	f000 f86d 	bl	8009140 <prvInsertBlockIntoFreeList>
<<<<<<< HEAD
				}
				( void ) xTaskResumeAll();
 8009066:	f7fe fe69 	bl	8007d3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
=======
 8009066:	f7fe fe6b 	bl	8007d40 <xTaskResumeAll>
>>>>>>> af62a17bbacf9c218df56f197c987eff7ba98366
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20003d30 	.word	0x20003d30
 8009078:	20003d28 	.word	0x20003d28

0800907c <prvHeapInit>:
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009086:	60bb      	str	r3, [r7, #8]
 8009088:	4b27      	ldr	r3, [pc, #156]	; (8009128 <prvHeapInit+0xac>)
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00c      	beq.n	80090b0 <prvHeapInit+0x34>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3307      	adds	r3, #7
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f023 0307 	bic.w	r3, r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	4a1f      	ldr	r2, [pc, #124]	; (8009128 <prvHeapInit+0xac>)
 80090ac:	4413      	add	r3, r2
 80090ae:	60bb      	str	r3, [r7, #8]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	607b      	str	r3, [r7, #4]
 80090b4:	4a1d      	ldr	r2, [pc, #116]	; (800912c <prvHeapInit+0xb0>)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6013      	str	r3, [r2, #0]
 80090ba:	4b1c      	ldr	r3, [pc, #112]	; (800912c <prvHeapInit+0xb0>)
 80090bc:	2200      	movs	r2, #0
 80090be:	605a      	str	r2, [r3, #4]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	4413      	add	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	2208      	movs	r2, #8
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	1a9b      	subs	r3, r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 0307 	bic.w	r3, r3, #7
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4a15      	ldr	r2, [pc, #84]	; (8009130 <prvHeapInit+0xb4>)
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	4b14      	ldr	r3, [pc, #80]	; (8009130 <prvHeapInit+0xb4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2200      	movs	r2, #0
 80090e4:	605a      	str	r2, [r3, #4]
 80090e6:	4b12      	ldr	r3, [pc, #72]	; (8009130 <prvHeapInit+0xb4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	603b      	str	r3, [r7, #0]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	605a      	str	r2, [r3, #4]
 80090fc:	4b0c      	ldr	r3, [pc, #48]	; (8009130 <prvHeapInit+0xb4>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	4a0a      	ldr	r2, [pc, #40]	; (8009134 <prvHeapInit+0xb8>)
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a09      	ldr	r2, [pc, #36]	; (8009138 <prvHeapInit+0xbc>)
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	4b09      	ldr	r3, [pc, #36]	; (800913c <prvHeapInit+0xc0>)
 8009116:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	bf00      	nop
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	bc80      	pop	{r7}
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	20000d1c 	.word	0x20000d1c
 800912c:	20003d1c 	.word	0x20003d1c
 8009130:	20003d24 	.word	0x20003d24
 8009134:	20003d2c 	.word	0x20003d2c
 8009138:	20003d28 	.word	0x20003d28
 800913c:	20003d30 	.word	0x20003d30

08009140 <prvInsertBlockIntoFreeList>:
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	4b27      	ldr	r3, [pc, #156]	; (80091e8 <prvInsertBlockIntoFreeList+0xa8>)
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	e002      	b.n	8009154 <prvInsertBlockIntoFreeList+0x14>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	429a      	cmp	r2, r3
 800915c:	d8f7      	bhi.n	800914e <prvInsertBlockIntoFreeList+0xe>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	60bb      	str	r3, [r7, #8]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	4413      	add	r3, r2
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	429a      	cmp	r2, r3
 800916e:	d108      	bne.n	8009182 <prvInsertBlockIntoFreeList+0x42>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	441a      	add	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	605a      	str	r2, [r3, #4]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	607b      	str	r3, [r7, #4]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	60bb      	str	r3, [r7, #8]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	441a      	add	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	429a      	cmp	r2, r3
 8009194:	d118      	bne.n	80091c8 <prvInsertBlockIntoFreeList+0x88>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	4b14      	ldr	r3, [pc, #80]	; (80091ec <prvInsertBlockIntoFreeList+0xac>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d00d      	beq.n	80091be <prvInsertBlockIntoFreeList+0x7e>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	441a      	add	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	605a      	str	r2, [r3, #4]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	e008      	b.n	80091d0 <prvInsertBlockIntoFreeList+0x90>
 80091be:	4b0b      	ldr	r3, [pc, #44]	; (80091ec <prvInsertBlockIntoFreeList+0xac>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	e003      	b.n	80091d0 <prvInsertBlockIntoFreeList+0x90>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d002      	beq.n	80091de <prvInsertBlockIntoFreeList+0x9e>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	bf00      	nop
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bc80      	pop	{r7}
 80091e6:	4770      	bx	lr
 80091e8:	20003d1c 	.word	0x20003d1c
 80091ec:	20003d24 	.word	0x20003d24

080091f0 <__libc_init_array>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	2600      	movs	r6, #0
 80091f4:	4d0c      	ldr	r5, [pc, #48]	; (8009228 <__libc_init_array+0x38>)
 80091f6:	4c0d      	ldr	r4, [pc, #52]	; (800922c <__libc_init_array+0x3c>)
 80091f8:	1b64      	subs	r4, r4, r5
 80091fa:	10a4      	asrs	r4, r4, #2
 80091fc:	42a6      	cmp	r6, r4
 80091fe:	d109      	bne.n	8009214 <__libc_init_array+0x24>
 8009200:	f000 f830 	bl	8009264 <_init>
 8009204:	2600      	movs	r6, #0
 8009206:	4d0a      	ldr	r5, [pc, #40]	; (8009230 <__libc_init_array+0x40>)
 8009208:	4c0a      	ldr	r4, [pc, #40]	; (8009234 <__libc_init_array+0x44>)
 800920a:	1b64      	subs	r4, r4, r5
 800920c:	10a4      	asrs	r4, r4, #2
 800920e:	42a6      	cmp	r6, r4
 8009210:	d105      	bne.n	800921e <__libc_init_array+0x2e>
 8009212:	bd70      	pop	{r4, r5, r6, pc}
 8009214:	f855 3b04 	ldr.w	r3, [r5], #4
 8009218:	4798      	blx	r3
 800921a:	3601      	adds	r6, #1
 800921c:	e7ee      	b.n	80091fc <__libc_init_array+0xc>
 800921e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009222:	4798      	blx	r3
 8009224:	3601      	adds	r6, #1
 8009226:	e7f2      	b.n	800920e <__libc_init_array+0x1e>
 8009228:	08009364 	.word	0x08009364
 800922c:	08009364 	.word	0x08009364
 8009230:	08009364 	.word	0x08009364
 8009234:	08009368 	.word	0x08009368

08009238 <memcpy>:
 8009238:	440a      	add	r2, r1
 800923a:	4291      	cmp	r1, r2
 800923c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009240:	d100      	bne.n	8009244 <memcpy+0xc>
 8009242:	4770      	bx	lr
 8009244:	b510      	push	{r4, lr}
 8009246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800924a:	4291      	cmp	r1, r2
 800924c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009250:	d1f9      	bne.n	8009246 <memcpy+0xe>
 8009252:	bd10      	pop	{r4, pc}

08009254 <memset>:
 8009254:	4603      	mov	r3, r0
 8009256:	4402      	add	r2, r0
 8009258:	4293      	cmp	r3, r2
 800925a:	d100      	bne.n	800925e <memset+0xa>
 800925c:	4770      	bx	lr
 800925e:	f803 1b01 	strb.w	r1, [r3], #1
 8009262:	e7f9      	b.n	8009258 <memset+0x4>

08009264 <_init>:
 8009264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009266:	bf00      	nop
 8009268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800926a:	bc08      	pop	{r3}
 800926c:	469e      	mov	lr, r3
 800926e:	4770      	bx	lr

08009270 <_fini>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr
