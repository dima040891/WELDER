
WELDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000927c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800946c  0800946c  0001946c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009554  08009554  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009554  08009554  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009554  08009554  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009554  08009554  00019554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009558  08009558  00019558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800955c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ec8  20000010  0800956c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20003ed8  0800956c  00023ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdfb  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d5d  00000000  00000000  0003be34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003fb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  00041168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8da  00000000  00000000  00042590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001897b  00000000  00000000  0005de6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2729  00000000  00000000  000767e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118f0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae0  00000000  00000000  00118f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08009454 	.word	0x08009454

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08009454 	.word	0x08009454

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <MicrostepDriver_Ini>:
#include  "MicrostepDriver.h"


void MicrostepDriver_Ini(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
    htim3.Init.Prescaler = 7199; // Предделитель таймера 3
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a12:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000a16:	605a      	str	r2, [r3, #4]
    htim3.Init.Period = 10000; // Период ШИМа
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a1e:	60da      	str	r2, [r3, #12]
    TIM3->CCR1 = 5000; // Длительность импульса
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <MicrostepDriver_Ini+0x2c>)
 8000a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a26:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_Base_Init(&htim3);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a2a:	f005 f929 	bl	8005c80 <HAL_TIM_Base_Init>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20003dd4 	.word	0x20003dd4
 8000a38:	40000400 	.word	0x40000400

08000a3c <MicrostepDriver_Run>:


void MicrostepDriver_Run (uint16_t freq, uint8_t dir, GPIO_TypeDef *EN1_Port, uint16_t EN1_Pin, GPIO_TypeDef *DIR1_Port, uint16_t DIR1_Pin, uint32_t PWM_Channel)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60ba      	str	r2, [r7, #8]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4603      	mov	r3, r0
 8000a48:	81fb      	strh	r3, [r7, #14]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	737b      	strb	r3, [r7, #13]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	80fb      	strh	r3, [r7, #6]
	if (freq != 0)
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d024      	beq.n	8000aa2 <MicrostepDriver_Run+0x66>
	{

	htim3.Init.Period = (htim3.Init.Prescaler /  freq) / MICRO_STEP_DEV; // Расчет периода следования импульсов
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a66:	60d3      	str	r3, [r2, #12]
	TIM3->CCR1 = htim3.Init.Period / 2; // Расчет коэффицента заполнения
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MicrostepDriver_Run+0x7c>)
 8000a6e:	085b      	lsrs	r3, r3, #1
 8000a70:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_TIM_Base_Init(&htim3);
 8000a72:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a74:	f005 f904 	bl	8005c80 <HAL_TIM_Base_Init>

	if (dir == 0) // Направление вращения
 8000a78:	7b7b      	ldrb	r3, [r7, #13]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d106      	bne.n	8000a8c <MicrostepDriver_Run+0x50>
	{
		HAL_GPIO_WritePin(DIR1_Port, DIR1_Pin, GPIO_PIN_RESET);
 8000a7e:	8bbb      	ldrh	r3, [r7, #28]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	69b8      	ldr	r0, [r7, #24]
 8000a86:	f003 fe72 	bl	800476e <HAL_GPIO_WritePin>
 8000a8a:	e005      	b.n	8000a98 <MicrostepDriver_Run+0x5c>

	}
	else
	{
		HAL_GPIO_WritePin(DIR1_Port, DIR1_Pin, GPIO_PIN_SET);
 8000a8c:	8bbb      	ldrh	r3, [r7, #28]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4619      	mov	r1, r3
 8000a92:	69b8      	ldr	r0, [r7, #24]
 8000a94:	f003 fe6b 	bl	800476e <HAL_GPIO_WritePin>
	}


	HAL_TIM_PWM_Start(&htim3, PWM_Channel); // Начало генерации ШИМ сигнала
 8000a98:	6a39      	ldr	r1, [r7, #32]
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a9c:	f005 f998 	bl	8005dd0 <HAL_TIM_PWM_Start>
	else // Если частота задана как 0, то останов ШД
	{
		HAL_TIM_PWM_Stop(&htim3, PWM_Channel);
	}

}
 8000aa0:	e003      	b.n	8000aaa <MicrostepDriver_Run+0x6e>
		HAL_TIM_PWM_Stop(&htim3, PWM_Channel);
 8000aa2:	6a39      	ldr	r1, [r7, #32]
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000aa6:	f005 fa4d 	bl	8005f44 <HAL_TIM_PWM_Stop>
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20003dd4 	.word	0x20003dd4
 8000ab8:	40000400 	.word	0x40000400

08000abc <IndicatorPanel_Ini>:
#include "PCB_WELDER.h"

void IndicatorPanel_Ini (void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	STLED316S_Ini(oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); // Индикатор "ВЛЕВО"
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <IndicatorPanel_Ini+0x28>)
 8000ac4:	f000 fc6e 	bl	80013a4 <STLED316S_Ini>
	STLED316S_Ini(oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin); // Индикатор "ВПРАВО"
 8000ac8:	2120      	movs	r1, #32
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <IndicatorPanel_Ini+0x28>)
 8000acc:	f000 fc6a 	bl	80013a4 <STLED316S_Ini>
	STLED316S_Ini(oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin); // Индикаторы "СКОРОСТЬ" (ст. 3 разряда) и "ПРОГРАММА" (мл. 3 разряда)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <IndicatorPanel_Ini+0x2c>)
 8000ad4:	f000 fc66 	bl	80013a4 <STLED316S_Ini>
  //STLED316S_Ini(oSTLED316S_STB4_GPIO_Port, oSTLED316S_STB4_Pin); // Микросхема не установлена, резерв
	STLED316S_Ini(oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin); // Индикаторы "ЗАДЕРЖКА" (слева, ст. 2 разряда) "ЗАДЕРЖКА" (справа, 2 и 3  разряды драйвера)
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <IndicatorPanel_Ini+0x30>)
 8000adc:	f000 fc62 	bl	80013a4 <STLED316S_Ini>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	40010800 	.word	0x40010800

08000af0 <IndicatorPanel_SetValue>:

void IndicatorPanel_SetValue (IndicatorValues *IndicatorPanel0)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]
	uint8_t num;

	uint8_t LEDsOut;

	LEDsOut = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	737b      	strb	r3, [r7, #13]

	for(uint8_t i = 0; i < 6; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e006      	b.n	8000b10 <IndicatorPanel_SetValue+0x20>
	{
	    STLED_digVal[i] = 0;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	4a5b      	ldr	r2, [pc, #364]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 6; i++)
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b05      	cmp	r3, #5
 8000b14:	d9f5      	bls.n	8000b02 <IndicatorPanel_SetValue+0x12>
	}

	//uint8_t gg = 11;

	// Индикатор "ВЛЕВО"
	num = separate(IndicatorPanel0->Xs,  &STLED_digVal[0]);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	4956      	ldr	r1, [pc, #344]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f8e9 	bl	8000cf4 <separate>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_4dig(num, STLED_digVal);
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	4952      	ldr	r1, [pc, #328]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f926 	bl	8000d7c <IndicatorPanel_offset_4dig>
	STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin);
 8000b30:	2310      	movs	r3, #16
 8000b32:	4a51      	ldr	r2, [pc, #324]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000b34:	2104      	movs	r1, #4
 8000b36:	484f      	ldr	r0, [pc, #316]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b38:	f000 fc68 	bl	800140c <STLED316S_OutData>

	// Индикатор "ВПРАВО"
	num = separate(IndicatorPanel0->Xf,  &STLED_digVal[0]);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	885b      	ldrh	r3, [r3, #2]
 8000b40:	494c      	ldr	r1, [pc, #304]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f8d6 	bl	8000cf4 <separate>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_4dig(num, STLED_digVal);
 8000b4c:	7bbb      	ldrb	r3, [r7, #14]
 8000b4e:	4949      	ldr	r1, [pc, #292]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f913 	bl	8000d7c <IndicatorPanel_offset_4dig>
	STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin);
 8000b56:	2320      	movs	r3, #32
 8000b58:	4a47      	ldr	r2, [pc, #284]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	4845      	ldr	r0, [pc, #276]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b5e:	f000 fc55 	bl	800140c <STLED316S_OutData>

	// Вывод пред и пост задержки
	num = separate(IndicatorPanel0->Delay_s, &STLED_digVal[0]);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	791b      	ldrb	r3, [r3, #4]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4942      	ldr	r1, [pc, #264]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f8c2 	bl	8000cf4 <separate>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73bb      	strb	r3, [r7, #14]
	//IndicatorPanel_offset_2dig(num, &STLED_digVal[0]);
	num = separate(IndicatorPanel0->Delay_f, &STLED_digVal[2]);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4940      	ldr	r1, [pc, #256]	; (8000c7c <IndicatorPanel_SetValue+0x18c>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f8b9 	bl	8000cf4 <separate>
 8000b82:	4603      	mov	r3, r0
 8000b84:	73bb      	strb	r3, [r7, #14]
	//IndicatorPanel_offset_2dig(num, &STLED_digVal[2]);
	//STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);

	STLED316S_Single_Out(&STLED_digVal[0], 6, 1, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2106      	movs	r1, #6
 8000b90:	4838      	ldr	r0, [pc, #224]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b92:	f000 fc99 	bl	80014c8 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[1], 5, 0, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000b96:	2340      	movs	r3, #64	; 0x40
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2105      	movs	r1, #5
 8000ba0:	4838      	ldr	r0, [pc, #224]	; (8000c84 <IndicatorPanel_SetValue+0x194>)
 8000ba2:	f000 fc91 	bl	80014c8 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[2], 4, 1, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000ba6:	2340      	movs	r3, #64	; 0x40
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4832      	ldr	r0, [pc, #200]	; (8000c7c <IndicatorPanel_SetValue+0x18c>)
 8000bb2:	f000 fc89 	bl	80014c8 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[3], 3, 0, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2103      	movs	r1, #3
 8000bc0:	4831      	ldr	r0, [pc, #196]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000bc2:	f000 fc81 	bl	80014c8 <STLED316S_Single_Out>


	// Индикаторы "СКОРОСТЬ" (ст. 3 разряда) и "ПРОГРАММА" (мл. 3 разряда)
	num = separate(IndicatorPanel0->Speed, &STLED_digVal[0]);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	88db      	ldrh	r3, [r3, #6]
 8000bca:	492a      	ldr	r1, [pc, #168]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f891 	bl	8000cf4 <separate>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_3dig(num, &STLED_digVal[0]);
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	4926      	ldr	r1, [pc, #152]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f920 	bl	8000e20 <IndicatorPanel_offset_3dig>

	num = separate(IndicatorPanel0->Program, &STLED_digVal[3]);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	891b      	ldrh	r3, [r3, #8]
 8000be4:	4928      	ldr	r1, [pc, #160]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f884 	bl	8000cf4 <separate>
 8000bec:	4603      	mov	r3, r0
 8000bee:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_3dig(num, &STLED_digVal[3]);
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	4925      	ldr	r1, [pc, #148]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f913 	bl	8000e20 <IndicatorPanel_offset_3dig>
	STLED316S_OutData(STLED_digVal, 6, oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <IndicatorPanel_SetValue+0x19c>)
 8000bfe:	2106      	movs	r1, #6
 8000c00:	481c      	ldr	r0, [pc, #112]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000c02:	f000 fc03 	bl	800140c <STLED316S_OutData>


	if((IndicatorPanel0->LEDsState & LED_AUTO) == LED_AUTO)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7bdb      	ldrb	r3, [r3, #15]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <IndicatorPanel_SetValue+0x12c>
	{
		LEDsOut |= 0x10;
 8000c12:	7b7b      	ldrb	r3, [r7, #13]
 8000c14:	f043 0310 	orr.w	r3, r3, #16
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_PARKING) == LED_PARKING)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7bdb      	ldrb	r3, [r3, #15]
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <IndicatorPanel_SetValue+0x142>
	{
		LEDsOut |= 0x20;
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	f043 0320 	orr.w	r3, r3, #32
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_DOWN) == LED_DOWN)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7bdb      	ldrb	r3, [r3, #15]
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d004      	beq.n	8000c48 <IndicatorPanel_SetValue+0x158>
	{
		LEDsOut |= 0x40;
 8000c3e:	7b7b      	ldrb	r3, [r7, #13]
 8000c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_UP) == LED_UP)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7bdb      	ldrb	r3, [r3, #15]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d004      	beq.n	8000c5e <IndicatorPanel_SetValue+0x16e>
	{
		LEDsOut |= 0x80;
 8000c54:	7b7b      	ldrb	r3, [r7, #13]
 8000c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	737b      	strb	r3, [r7, #13]
	}

	// Вывод состояния светодиодов
	STLED316S_Direct_Single_Out(&LEDsOut, 2, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора
 8000c5e:	f107 000d 	add.w	r0, r7, #13
 8000c62:	2310      	movs	r3, #16
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000c66:	2102      	movs	r1, #2
 8000c68:	f000 fc90 	bl	800158c <STLED316S_Direct_Single_Out>
}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20003dc8 	.word	0x20003dc8
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	20003dca 	.word	0x20003dca
 8000c80:	40010800 	.word	0x40010800
 8000c84:	20003dc9 	.word	0x20003dc9
 8000c88:	20003dcb 	.word	0x20003dcb
 8000c8c:	40010c00 	.word	0x40010c00

08000c90 <IndicatorPanel_SetBrightness>:
	STLED316S_Direct_Single_Out(&LEDsOut, 2, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора

}

void IndicatorPanel_SetBrightness (IndicatorValues *IndicatorPanel0)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if (IndicatorPanel0->Brightness > 7)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7a9b      	ldrb	r3, [r3, #10]
 8000c9c:	2b07      	cmp	r3, #7
 8000c9e:	d902      	bls.n	8000ca6 <IndicatorPanel_SetBrightness+0x16>
	{
		IndicatorPanel0->Brightness = 7;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	729a      	strb	r2, [r3, #10]
	}
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7a9b      	ldrb	r3, [r3, #10]
 8000caa:	2210      	movs	r2, #16
 8000cac:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <IndicatorPanel_SetBrightness+0x58>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fcbc 	bl	800162c <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7a9b      	ldrb	r3, [r3, #10]
 8000cb8:	2220      	movs	r2, #32
 8000cba:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <IndicatorPanel_SetBrightness+0x58>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fcb5 	bl	800162c <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7a9b      	ldrb	r3, [r3, #10]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4908      	ldr	r1, [pc, #32]	; (8000cec <IndicatorPanel_SetBrightness+0x5c>)
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fcae 	bl	800162c <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7a9b      	ldrb	r3, [r3, #10]
 8000cd4:	2240      	movs	r2, #64	; 0x40
 8000cd6:	4906      	ldr	r1, [pc, #24]	; (8000cf0 <IndicatorPanel_SetBrightness+0x60>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fca7 	bl	800162c <STLED316S_SetBrightness>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <separate>:

int32_t separate (uint16_t in_data, uint8_t *out_data)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	80fb      	strh	r3, [r7, #6]
    int32_t k,i,m;
    k = in_data;
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	617b      	str	r3, [r7, #20]
    m = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]

    while(k != 0)       //цикл чтобы найти количество цифр в числе
 8000d08:	e00a      	b.n	8000d20 <separate+0x2c>
    {
        k = k / 10;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <separate+0x80>)
 8000d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d12:	1092      	asrs	r2, r2, #2
 8000d14:	17db      	asrs	r3, r3, #31
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
        m++;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
    while(k != 0)       //цикл чтобы найти количество цифр в числе
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f1      	bne.n	8000d0a <separate+0x16>
    }

    for(i=m-1;i>=0;i--)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	e018      	b.n	8000d60 <separate+0x6c>
    {
    	out_data[i] = in_data%10;      //берем последнюю цифру с числа
 8000d2e:	88fa      	ldrh	r2, [r7, #6]
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <separate+0x84>)
 8000d32:	fba3 1302 	umull	r1, r3, r3, r2
 8000d36:	08d9      	lsrs	r1, r3, #3
 8000d38:	460b      	mov	r3, r1
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	b299      	uxth	r1, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
    	in_data = in_data / 10;         //забираем эту цифру с числа
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <separate+0x84>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	80fb      	strh	r3, [r7, #6]
    for(i=m-1;i>=0;i--)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	dae3      	bge.n	8000d2e <separate+0x3a>
    }

    return m;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	66666667 	.word	0x66666667
 8000d78:	cccccccd 	.word	0xcccccccd

08000d7c <IndicatorPanel_offset_4dig>:

void IndicatorPanel_offset_4dig (uint8_t num, uint8_t *dataArray)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d841      	bhi.n	8000e14 <IndicatorPanel_offset_4dig+0x98>
 8000d90:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <IndicatorPanel_offset_4dig+0x1c>)
 8000d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d96:	bf00      	nop
 8000d98:	08000da9 	.word	0x08000da9
 8000d9c:	08000dcb 	.word	0x08000dcb
 8000da0:	08000def 	.word	0x08000def
 8000da4:	08000e15 	.word	0x08000e15
	{

	case 1:
	{
		dataArray[3] = dataArray[0];
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	3303      	adds	r3, #3
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	701a      	strb	r2, [r3, #0]
		dataArray[2] = 0;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	3302      	adds	r3, #2
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
		break;
 8000dc8:	e025      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
	}

	case 2:
	{
		dataArray[3] = dataArray[1];
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3303      	adds	r3, #3
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	7852      	ldrb	r2, [r2, #1]
 8000dd2:	701a      	strb	r2, [r3, #0]
		dataArray[2] = dataArray[0];
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	7812      	ldrb	r2, [r2, #0]
 8000ddc:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
		break;
 8000dec:	e013      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
	}

	case 3:
	{
		dataArray[3] = dataArray[2];
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	3303      	adds	r3, #3
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	7892      	ldrb	r2, [r2, #2]
 8000df6:	701a      	strb	r2, [r3, #0]
		dataArray[2] = dataArray[1];
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	7852      	ldrb	r2, [r2, #1]
 8000e00:	701a      	strb	r2, [r3, #0]
		dataArray[1] = dataArray[0];
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]

		break;
 8000e12:	e000      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
		break;
	}

default:
{
	break;
 8000e14:	bf00      	nop
}

	}

}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <IndicatorPanel_offset_3dig>:

}


void IndicatorPanel_offset_3dig (uint8_t num, uint8_t *dataArray)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d021      	beq.n	8000e76 <IndicatorPanel_offset_3dig+0x56>
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	dc21      	bgt.n	8000e7a <IndicatorPanel_offset_3dig+0x5a>
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d002      	beq.n	8000e40 <IndicatorPanel_offset_3dig+0x20>
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d00d      	beq.n	8000e5a <IndicatorPanel_offset_3dig+0x3a>
		break;
	}

default:
{
	break;
 8000e3e:	e01c      	b.n	8000e7a <IndicatorPanel_offset_3dig+0x5a>
		dataArray[2] = dataArray[0];
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3302      	adds	r3, #2
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
		break;
 8000e58:	e010      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
		dataArray[2] = dataArray[1];
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	7852      	ldrb	r2, [r2, #1]
 8000e62:	701a      	strb	r2, [r3, #0]
		dataArray[1] = dataArray[0];
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	7812      	ldrb	r2, [r2, #0]
 8000e6c:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
		break;
 8000e74:	e002      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
		break;
 8000e76:	bf00      	nop
 8000e78:	e000      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
	break;
 8000e7a:	bf00      	nop
}

	}

}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
	...

08000e88 <Carriage_Move>:

void Carriage_Move (uint16_t Speed, uint8_t Dir, uint8_t NumSM)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
 8000e92:	460b      	mov	r3, r1
 8000e94:	717b      	strb	r3, [r7, #5]
 8000e96:	4613      	mov	r3, r2
 8000e98:	713b      	strb	r3, [r7, #4]

uint16_t freq_pwm;

	freq_pwm = ((Speed / (60/10)) * STEPS_PER_ROTATE) / DISTANCE_PER_ROTATE; // Вычисление частоты ШИМ для скорости в см/мин
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <Carriage_Move+0x7c>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fb14 	bl	80004d4 <__aeabi_i2d>
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <Carriage_Move+0x80>)
 8000eb2:	f7ff fb79 	bl	80005a8 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <Carriage_Move+0x84>)
 8000ec4:	f7ff fc9a 	bl	80007fc <__aeabi_ddiv>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fd7c 	bl	80009cc <__aeabi_d2uiz>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	81fb      	strh	r3, [r7, #14]

	if (NumSM == 1)
 8000ed8:	793b      	ldrb	r3, [r7, #4]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10d      	bne.n	8000efa <Carriage_Move+0x72>
	{
		MicrostepDriver_Run (freq_pwm, Dir, oSMD_EN1_GPIO_Port, oSMD_EN1_Pin, oDIR1_GPIO_Port,  oDIR1_Pin, TIM_CHANNEL_1);
 8000ede:	7979      	ldrb	r1, [r7, #5]
 8000ee0:	89f8      	ldrh	r0, [r7, #14]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <Carriage_Move+0x88>)
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <Carriage_Move+0x8c>)
 8000ef6:	f7ff fda1 	bl	8000a3c <MicrostepDriver_Run>
	}
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	aaaaaaab 	.word	0xaaaaaaab
 8000f08:	40690000 	.word	0x40690000
 8000f0c:	404e0000 	.word	0x404e0000
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40010800 	.word	0x40010800

08000f18 <PCB_KeyScan>:

void PCB_KeyScan (void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	STLED316S_ReciveData(&WelderUnit.IndicatorPanel.KeyState[0], oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	4905      	ldr	r1, [pc, #20]	; (8000f34 <PCB_KeyScan+0x1c>)
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <PCB_KeyScan+0x20>)
 8000f22:	f000 fbdd 	bl	80016e0 <STLED316S_ReciveData>
	STLED316S_ReciveData(&WelderUnit.IndicatorPanel.KeyState[2], oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000f26:	2201      	movs	r2, #1
 8000f28:	4904      	ldr	r1, [pc, #16]	; (8000f3c <PCB_KeyScan+0x24>)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <PCB_KeyScan+0x28>)
 8000f2c:	f000 fbd8 	bl	80016e0 <STLED316S_ReciveData>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40010800 	.word	0x40010800
 8000f38:	20003559 	.word	0x20003559
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	2000355b 	.word	0x2000355b

08000f44 <PCB_InputsScan>:

void PCB_InputsScan (void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(iPedal_L_GPIO_Port, iPedal_L_Pin)) // Если Нажата педаль для зажима левой части заготовки, то установить бит, иначе сбросить
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4824      	ldr	r0, [pc, #144]	; (8000fdc <PCB_InputsScan+0x98>)
 8000f4c:	f003 fbf8 	bl	8004740 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <PCB_InputsScan+0x22>
	{
		WelderUnit.HolderState |= WELDER_STATE_PEDAL_L;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f58:	7c5b      	ldrb	r3, [r3, #17]
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f62:	745a      	strb	r2, [r3, #17]
 8000f64:	e006      	b.n	8000f74 <PCB_InputsScan+0x30>
	}
	else
	{
		WelderUnit.HolderState &= ~WELDER_STATE_PEDAL_L;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f68:	7c5b      	ldrb	r3, [r3, #17]
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f72:	745a      	strb	r2, [r3, #17]
	}

	if (HAL_GPIO_ReadPin(iPedal_R_GPIO_Port, iPedal_R_Pin)) // Если Нажата педаль для зажима правой части заготовки, то установить бит, иначе сбросить
 8000f74:	2108      	movs	r1, #8
 8000f76:	4819      	ldr	r0, [pc, #100]	; (8000fdc <PCB_InputsScan+0x98>)
 8000f78:	f003 fbe2 	bl	8004740 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <PCB_InputsScan+0x4e>
	{
		WelderUnit.HolderState |= WELDER_STATE_PEDAL_R;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f8e:	745a      	strb	r2, [r3, #17]
 8000f90:	e006      	b.n	8000fa0 <PCB_InputsScan+0x5c>
	}
	else
	{
		WelderUnit.HolderState &= ~WELDER_STATE_PEDAL_R;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f94:	7c5b      	ldrb	r3, [r3, #17]
 8000f96:	f023 0302 	bic.w	r3, r3, #2
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f9e:	745a      	strb	r2, [r3, #17]
	}

	if (HAL_GPIO_ReadPin(iBackDoor_GPIO_Port, iBackDoor_Pin)) // Если задняя дверца закрыта, то установить бит, иначе сбросить
 8000fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa4:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <PCB_InputsScan+0xa0>)
 8000fa6:	f003 fbcb 	bl	8004740 <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00c      	beq.n	8000fca <PCB_InputsScan+0x86>
	{
		WelderUnit.State |= WELDER_STATE_BACK_DOOR_CLOSE;
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fb2:	7c1b      	ldrb	r3, [r3, #16]
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fbc:	741a      	strb	r2, [r3, #16]
		WELDER_HEAD_UP
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2106      	movs	r1, #6
 8000fc2:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <PCB_InputsScan+0xa4>)
 8000fc4:	f003 fbd3 	bl	800476e <HAL_GPIO_WritePin>
	}
	else
	{
		WelderUnit.State &= ~WELDER_STATE_BACK_DOOR_CLOSE;
	}
}
 8000fc8:	e006      	b.n	8000fd8 <PCB_InputsScan+0x94>
		WelderUnit.State &= ~WELDER_STATE_BACK_DOOR_CLOSE;
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fcc:	7c1b      	ldrb	r3, [r3, #16]
 8000fce:	f023 0310 	bic.w	r3, r3, #16
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b02      	ldr	r3, [pc, #8]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fd6:	741a      	strb	r2, [r3, #16]
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	2000353c 	.word	0x2000353c
 8000fe4:	40010c00 	.word	0x40010c00
 8000fe8:	40011000 	.word	0x40011000

08000fec <PCB_OutputControl>:

void PCB_OutputControl(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	static uint8_t StateOld = 0;

	PCB_InputsScan(); // Опрос входов платы
 8000ff0:	f7ff ffa8 	bl	8000f44 <PCB_InputsScan>


	if ((WelderUnit.HolderState & WELDER_STATE_PEDAL_L) != (StateOld & WELDER_STATE_PEDAL_L)) // Если произошли изменения на входе отвечающим за девую педаль
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <PCB_OutputControl+0xb4>)
 8000ff6:	7c5a      	ldrb	r2, [r3, #17]
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <PCB_OutputControl+0xb8>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4053      	eors	r3, r2
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00c      	beq.n	8001022 <PCB_OutputControl+0x36>
	{
		if(WelderUnit.HolderState & WELDER_STATE_PEDAL_L) // Если педаль была нажата (фронт импульса)
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <PCB_OutputControl+0xb4>)
 800100a:	7c5b      	ldrb	r3, [r3, #17]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <PCB_OutputControl+0x36>
		{
			WelderUnit.HolderState = WelderUnit.HolderState ^ WELDER_STATE_HOLDER_L; // Инвертировать состояние бита держателя затовки
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001016:	7c5b      	ldrb	r3, [r3, #17]
 8001018:	f083 0304 	eor.w	r3, r3, #4
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001020:	745a      	strb	r2, [r3, #17]
		}

	}

	if ((WelderUnit.HolderState & WELDER_STATE_PEDAL_R) != (StateOld & WELDER_STATE_PEDAL_R)) // Если произошли изменения на входе отвечающим за девую педаль
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001024:	7c5a      	ldrb	r2, [r3, #17]
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <PCB_OutputControl+0xb8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4053      	eors	r3, r2
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00c      	beq.n	8001050 <PCB_OutputControl+0x64>
	{
		if(WelderUnit.HolderState & WELDER_STATE_PEDAL_R) // Если педаль была нажата (фронт импульса)
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001038:	7c5b      	ldrb	r3, [r3, #17]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <PCB_OutputControl+0x64>
		{
			WelderUnit.HolderState = WelderUnit.HolderState ^ WELDER_STATE_HOLDER_R; // Инвертировать состояние бита держателя затовки
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001044:	7c5b      	ldrb	r3, [r3, #17]
 8001046:	f083 0308 	eor.w	r3, r3, #8
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <PCB_OutputControl+0xb4>)
 800104e:	745a      	strb	r2, [r3, #17]
		}

	}

	if(WelderUnit.HolderState & WELDER_STATE_HOLDER_L) // Если бит установлен, то зажать зажать заготвку, иначе отпустить
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001052:	7c5b      	ldrb	r3, [r3, #17]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <PCB_OutputControl+0x7c>
	{
		Valve_L_CLOSE
 800105c:	2201      	movs	r2, #1
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	4811      	ldr	r0, [pc, #68]	; (80010a8 <PCB_OutputControl+0xbc>)
 8001062:	f003 fb84 	bl	800476e <HAL_GPIO_WritePin>
 8001066:	e004      	b.n	8001072 <PCB_OutputControl+0x86>
	}
	else
	{
		Valve_L_OPEN
 8001068:	2200      	movs	r2, #0
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	480e      	ldr	r0, [pc, #56]	; (80010a8 <PCB_OutputControl+0xbc>)
 800106e:	f003 fb7e 	bl	800476e <HAL_GPIO_WritePin>
	}

	if(WelderUnit.HolderState & WELDER_STATE_HOLDER_R) // Если бит установлен, то зажать зажать заготвку, иначе отпустить
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001074:	7c5b      	ldrb	r3, [r3, #17]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <PCB_OutputControl+0x9e>
	{
		Valve_R_CLOSE
 800107e:	2201      	movs	r2, #1
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <PCB_OutputControl+0xbc>)
 8001084:	f003 fb73 	bl	800476e <HAL_GPIO_WritePin>
 8001088:	e004      	b.n	8001094 <PCB_OutputControl+0xa8>
	}
	else
	{
		Valve_R_OPEN
 800108a:	2200      	movs	r2, #0
 800108c:	2140      	movs	r1, #64	; 0x40
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <PCB_OutputControl+0xbc>)
 8001090:	f003 fb6d 	bl	800476e <HAL_GPIO_WritePin>
	}

	StateOld = WelderUnit.HolderState; // Сохранить текущее состояние
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001096:	7c5a      	ldrb	r2, [r3, #17]
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <PCB_OutputControl+0xb8>)
 800109a:	701a      	strb	r2, [r3, #0]

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000353c 	.word	0x2000353c
 80010a4:	2000002c 	.word	0x2000002c
 80010a8:	40010c00 	.word	0x40010c00

080010ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(iSTLED316S_IRQN5_GPIO_Port, iSTLED316S_IRQN5_Pin) == GPIO_PIN_RESET)
 80010b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ba:	4822      	ldr	r0, [pc, #136]	; (8001144 <HAL_GPIO_EXTI_Callback+0x98>)
 80010bc:	f003 fb40 	bl	8004740 <HAL_GPIO_ReadPin>

	}



	if (HAL_GPIO_ReadPin(iFB_STEP1_GPIO_Port, iFB_STEP1_Pin) == GPIO_PIN_SET)
 80010c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c4:	4820      	ldr	r0, [pc, #128]	; (8001148 <HAL_GPIO_EXTI_Callback+0x9c>)
 80010c6:	f003 fb3b 	bl	8004740 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10e      	bne.n	80010ee <HAL_GPIO_EXTI_Callback+0x42>
		//#define configASSERT( x ) if ((x) == 0) {taskDISABLE_INTERRUPTS(); for( ;; );}
		// Без этого не работают семафоры


		static portBASE_TYPE xHigherPriorityTaskWoken;
		  xHigherPriorityTaskWoken = pdFALSE; // Не переключать контекст
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <HAL_GPIO_EXTI_Callback+0xa0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

		  //WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / STEPS_PER_ROTATE; // Вычисление текущей позиции каретки, мм

			  xSemaphoreGiveFromISR(xSemaphore_StepCount,&xHigherPriorityTaskWoken);
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <HAL_GPIO_EXTI_Callback+0xa4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	491c      	ldr	r1, [pc, #112]	; (800114c <HAL_GPIO_EXTI_Callback+0xa0>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 f95b 	bl	8007398 <xQueueGiveFromISR>


		if( xHigherPriorityTaskWoken == pdTRUE )
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_GPIO_EXTI_Callback+0xa0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_EXTI_Callback+0x42>
				вместе с портом FreeRTOS. */
			 //portSWITCH_CONTEXT();
			//vTaskSwitchContext();
			//portYIELD_FROM_ISR(NULL);

			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 80010ea:	f007 f99f 	bl	800842c <vTaskMissedYield>

		  }
	}

	if (HAL_GPIO_ReadPin(iCarriageStop_GPIO_Port, iCarriageStop_Pin) == GPIO_PIN_SET)
 80010ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f2:	4814      	ldr	r0, [pc, #80]	; (8001144 <HAL_GPIO_EXTI_Callback+0x98>)
 80010f4:	f003 fb24 	bl	8004740 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d116      	bne.n	800112c <HAL_GPIO_EXTI_Callback+0x80>
		// В файле FreeRTOSConfig.h закомментировать
		//#define configASSERT( x ) if ((x) == 0) {taskDISABLE_INTERRUPTS(); for( ;; );}
		// Без этого не работают семафоры

		static portBASE_TYPE xHigherPriorityTaskWoken2;
		  xHigherPriorityTaskWoken2 = pdFALSE; // Не переключать контекст
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

		  //WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / STEPS_PER_ROTATE; // Вычисление текущей позиции каретки, мм

			  xSemaphoreGiveFromISR(xSemaphore_Calibration, &xHigherPriorityTaskWoken2);
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_GPIO_EXTI_Callback+0xac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4912      	ldr	r1, [pc, #72]	; (8001154 <HAL_GPIO_EXTI_Callback+0xa8>)
 800110a:	4618      	mov	r0, r3
 800110c:	f006 f944 	bl	8007398 <xQueueGiveFromISR>

			  WelderUnit.State |= 1<<3; // 3 бит - Состояние вывода iCarriageStop, 1 - коневик нажат кареткой
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001112:	7c1b      	ldrb	r3, [r3, #16]
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <HAL_GPIO_EXTI_Callback+0xb0>)
 800111c:	741a      	strb	r2, [r3, #16]


		if( xHigherPriorityTaskWoken2 == pdTRUE )
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d109      	bne.n	800113a <HAL_GPIO_EXTI_Callback+0x8e>
		  {
			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 8001126:	f007 f981 	bl	800842c <vTaskMissedYield>
	{
		WelderUnit.State &= ~0x08; //// 3 бит - Состояние вывода iCarriageStop 0 - коневик отжат.

	}

}
 800112a:	e006      	b.n	800113a <HAL_GPIO_EXTI_Callback+0x8e>
		WelderUnit.State &= ~0x08; //// 3 бит - Состояние вывода iCarriageStop 0 - коневик отжат.
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_GPIO_EXTI_Callback+0xb0>)
 800112e:	7c1b      	ldrb	r3, [r3, #16]
 8001130:	f023 0308 	bic.w	r3, r3, #8
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001138:	741a      	strb	r2, [r3, #16]
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40010c00 	.word	0x40010c00
 8001148:	40011000 	.word	0x40011000
 800114c:	20000030 	.word	0x20000030
 8001150:	20003560 	.word	0x20003560
 8001154:	20000034 	.word	0x20000034
 8001158:	20003dc4 	.word	0x20003dc4
 800115c:	2000353c 	.word	0x2000353c

08001160 <SaveProgramToFlash2>:

void SaveProgramToFlash2()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	uint32_t *p; // Указатель на считваемые из flash памяти данные

	uint16_t offset = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	80bb      	strh	r3, [r7, #4]

	p = (uint32_t*)PAGE; // p содержит начальный адрес записи параметров программы
 800116a:	4b3c      	ldr	r3, [pc, #240]	; (800125c <SaveProgramToFlash2+0xfc>)
 800116c:	603b      	str	r3, [r7, #0]

	for(uint16_t i = 0; i < 256; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	e010      	b.n	8001196 <SaveProgramToFlash2+0x36>
	{
		ReadFlashPage[i] = *(p + i);
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	4413      	add	r3, r2
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	88f9      	ldrh	r1, [r7, #6]
 8001180:	461a      	mov	r2, r3
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	4836      	ldr	r0, [pc, #216]	; (8001260 <SaveProgramToFlash2+0x100>)
 8001188:	00c9      	lsls	r1, r1, #3
 800118a:	4401      	add	r1, r0
 800118c:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i = 0; i < 256; i++)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	3301      	adds	r3, #1
 8001194:	80fb      	strh	r3, [r7, #6]
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	2bff      	cmp	r3, #255	; 0xff
 800119a:	d9eb      	bls.n	8001174 <SaveProgramToFlash2+0x14>
	}

	offset = WelderUnit.Program * 6;
 800119c:	4b31      	ldr	r3, [pc, #196]	; (8001264 <SaveProgramToFlash2+0x104>)
 800119e:	899b      	ldrh	r3, [r3, #12]
 80011a0:	461a      	mov	r2, r3
 80011a2:	0052      	lsls	r2, r2, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	80bb      	strh	r3, [r7, #4]

	ReadFlashPage[offset] = WelderUnit.Program;
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <SaveProgramToFlash2+0x104>)
 80011ac:	899b      	ldrh	r3, [r3, #12]
 80011ae:	88b9      	ldrh	r1, [r7, #4]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	482a      	ldr	r0, [pc, #168]	; (8001260 <SaveProgramToFlash2+0x100>)
 80011b8:	00c9      	lsls	r1, r1, #3
 80011ba:	4401      	add	r1, r0
 80011bc:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 1] = WelderUnit.Xs;
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <SaveProgramToFlash2+0x104>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	88ba      	ldrh	r2, [r7, #4]
 80011c6:	1c51      	adds	r1, r2, #1
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	4824      	ldr	r0, [pc, #144]	; (8001260 <SaveProgramToFlash2+0x100>)
 80011d0:	00c9      	lsls	r1, r1, #3
 80011d2:	4401      	add	r1, r0
 80011d4:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 2] = WelderUnit.Xf;
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <SaveProgramToFlash2+0x104>)
 80011da:	885b      	ldrh	r3, [r3, #2]
 80011dc:	88ba      	ldrh	r2, [r7, #4]
 80011de:	1c91      	adds	r1, r2, #2
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	481e      	ldr	r0, [pc, #120]	; (8001260 <SaveProgramToFlash2+0x100>)
 80011e8:	00c9      	lsls	r1, r1, #3
 80011ea:	4401      	add	r1, r0
 80011ec:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 3] = WelderUnit.Speed;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <SaveProgramToFlash2+0x104>)
 80011f2:	88db      	ldrh	r3, [r3, #6]
 80011f4:	88ba      	ldrh	r2, [r7, #4]
 80011f6:	1cd1      	adds	r1, r2, #3
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	4818      	ldr	r0, [pc, #96]	; (8001260 <SaveProgramToFlash2+0x100>)
 8001200:	00c9      	lsls	r1, r1, #3
 8001202:	4401      	add	r1, r0
 8001204:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 4] = WelderUnit.Delay_s;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <SaveProgramToFlash2+0x104>)
 800120a:	7a9b      	ldrb	r3, [r3, #10]
 800120c:	88ba      	ldrh	r2, [r7, #4]
 800120e:	1d11      	adds	r1, r2, #4
 8001210:	b2da      	uxtb	r2, r3
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	4812      	ldr	r0, [pc, #72]	; (8001260 <SaveProgramToFlash2+0x100>)
 8001218:	00c9      	lsls	r1, r1, #3
 800121a:	4401      	add	r1, r0
 800121c:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 5] = WelderUnit.Delay_f;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <SaveProgramToFlash2+0x104>)
 8001222:	7adb      	ldrb	r3, [r3, #11]
 8001224:	88ba      	ldrh	r2, [r7, #4]
 8001226:	1d51      	adds	r1, r2, #5
 8001228:	b2da      	uxtb	r2, r3
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <SaveProgramToFlash2+0x100>)
 8001230:	00c9      	lsls	r1, r1, #3
 8001232:	4401      	add	r1, r0
 8001234:	e9c1 2300 	strd	r2, r3, [r1]

	STM32_WriteToFlash3(ReadFlashPage, 64);
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4809      	ldr	r0, [pc, #36]	; (8001260 <SaveProgramToFlash2+0x100>)
 800123c:	f000 face 	bl	80017dc <STM32_WriteToFlash3>

	p = (uint32_t*)PAGE + offset/4; // p содержит начальный адрес записи параметров программы
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	b29b      	uxth	r3, r3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800124c:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 8001250:	603b      	str	r3, [r7, #0]

}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	0803f800 	.word	0x0803f800
 8001260:	20003570 	.word	0x20003570
 8001264:	2000353c 	.word	0x2000353c

08001268 <ReadProgramFromFlash2>:

void ReadProgramFromFlash2()
{
 8001268:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
	uint32_t *p; // Указатель на считваемые из flash памяти данные

	uint16_t offset = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	80bb      	strh	r3, [r7, #4]

	p = (uint32_t*)PAGE; // p содержит начальный адрес записи параметров программы
 8001274:	4b48      	ldr	r3, [pc, #288]	; (8001398 <ReadProgramFromFlash2+0x130>)
 8001276:	603b      	str	r3, [r7, #0]

	for(uint16_t i = 0; i < 256; i++)
 8001278:	2300      	movs	r3, #0
 800127a:	80fb      	strh	r3, [r7, #6]
 800127c:	e010      	b.n	80012a0 <ReadProgramFromFlash2+0x38>
	{
		ReadFlashPage[i] = *(p + i);
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	4413      	add	r3, r2
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	88f9      	ldrh	r1, [r7, #6]
 800128a:	461a      	mov	r2, r3
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	4842      	ldr	r0, [pc, #264]	; (800139c <ReadProgramFromFlash2+0x134>)
 8001292:	00c9      	lsls	r1, r1, #3
 8001294:	4401      	add	r1, r0
 8001296:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i = 0; i < 256; i++)
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	3301      	adds	r3, #1
 800129e:	80fb      	strh	r3, [r7, #6]
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	2bff      	cmp	r3, #255	; 0xff
 80012a4:	d9eb      	bls.n	800127e <ReadProgramFromFlash2+0x16>
	}

	offset = WelderUnit.Program * 6;
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 80012a8:	899b      	ldrh	r3, [r3, #12]
 80012aa:	461a      	mov	r2, r3
 80012ac:	0052      	lsls	r2, r2, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	80bb      	strh	r3, [r7, #4]

	if (WelderUnit.Program - ReadFlashPage[offset] <= 1 || ReadFlashPage[offset] - WelderUnit.Program <= 1)
 80012b4:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 80012b6:	899b      	ldrh	r3, [r3, #12]
 80012b8:	b298      	uxth	r0, r3
 80012ba:	f04f 0100 	mov.w	r1, #0
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	4a36      	ldr	r2, [pc, #216]	; (800139c <ReadProgramFromFlash2+0x134>)
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	ebb0 0802 	subs.w	r8, r0, r2
 80012ce:	eb61 0903 	sbc.w	r9, r1, r3
 80012d2:	f1b9 0f00 	cmp.w	r9, #0
 80012d6:	bf08      	it	eq
 80012d8:	f1b8 0f02 	cmpeq.w	r8, #2
 80012dc:	d311      	bcc.n	8001302 <ReadProgramFromFlash2+0x9a>
 80012de:	88bb      	ldrh	r3, [r7, #4]
 80012e0:	4a2e      	ldr	r2, [pc, #184]	; (800139c <ReadProgramFromFlash2+0x134>)
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 80012ec:	899b      	ldrh	r3, [r3, #12]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	1a84      	subs	r4, r0, r2
 80012f6:	eb61 0503 	sbc.w	r5, r1, r3
 80012fa:	2d00      	cmp	r5, #0
 80012fc:	bf08      	it	eq
 80012fe:	2c02      	cmpeq	r4, #2
 8001300:	d244      	bcs.n	800138c <ReadProgramFromFlash2+0x124>
	{
		if (ReadFlashPage[offset] <= PROGRAM_MAX)
 8001302:	88bb      	ldrh	r3, [r7, #4]
 8001304:	4a25      	ldr	r2, [pc, #148]	; (800139c <ReadProgramFromFlash2+0x134>)
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4413      	add	r3, r2
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf08      	it	eq
 8001312:	2a47      	cmpeq	r2, #71	; 0x47
 8001314:	d23a      	bcs.n	800138c <ReadProgramFromFlash2+0x124>
		{
			WelderUnit.Program = ReadFlashPage[offset];
 8001316:	88bb      	ldrh	r3, [r7, #4]
 8001318:	4a20      	ldr	r2, [pc, #128]	; (800139c <ReadProgramFromFlash2+0x134>)
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4413      	add	r3, r2
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	b292      	uxth	r2, r2
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 8001326:	819a      	strh	r2, [r3, #12]
			WelderUnit.Xs = ReadFlashPage[offset + 1];
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <ReadProgramFromFlash2+0x134>)
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4413      	add	r3, r2
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	b292      	uxth	r2, r2
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 800133a:	801a      	strh	r2, [r3, #0]
			WelderUnit.Xf = ReadFlashPage[offset + 2];
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	3302      	adds	r3, #2
 8001340:	4a16      	ldr	r2, [pc, #88]	; (800139c <ReadProgramFromFlash2+0x134>)
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4413      	add	r3, r2
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	b292      	uxth	r2, r2
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 800134e:	805a      	strh	r2, [r3, #2]
			WelderUnit.Speed = ReadFlashPage[offset + 3];
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	3303      	adds	r3, #3
 8001354:	4a11      	ldr	r2, [pc, #68]	; (800139c <ReadProgramFromFlash2+0x134>)
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4413      	add	r3, r2
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	b292      	uxth	r2, r2
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 8001362:	80da      	strh	r2, [r3, #6]
			WelderUnit.Delay_s = ReadFlashPage[offset + 4];
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	3304      	adds	r3, #4
 8001368:	4a0c      	ldr	r2, [pc, #48]	; (800139c <ReadProgramFromFlash2+0x134>)
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 8001376:	729a      	strb	r2, [r3, #10]
			WelderUnit.Delay_f = ReadFlashPage[offset + 5];
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	3305      	adds	r3, #5
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <ReadProgramFromFlash2+0x134>)
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 800138a:	72da      	strb	r2, [r3, #11]

//	STM32_WriteToFlash3(ReadFlashPage, 64);
//
//	p = (uint32_t*)PAGE + offset/4; // p содержит начальный адрес записи параметров программы

}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001396:	4770      	bx	lr
 8001398:	0803f800 	.word	0x0803f800
 800139c:	20003570 	.word	0x20003570
 80013a0:	2000353c 	.word	0x2000353c

080013a4 <STLED316S_Ini>:
};



void STLED316S_Ini (GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]

	STLED316S_SetBrightness(7, STLED_PORT_STB, STLED_PIN_STB);
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	461a      	mov	r2, r3
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	2007      	movs	r0, #7
 80013b8:	f000 f938 	bl	800162c <STLED316S_SetBrightness>


	STLED_TxData[0] = 0x0D; // Включить дисплей
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <STLED316S_Ini+0x60>)
 80013be:	220d      	movs	r2, #13
 80013c0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f003 f9d0 	bl	800476e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80013ce:	2005      	movs	r0, #5
 80013d0:	f000 f9e6 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, STLED_TxData, 1, 10000);
 80013d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80013d8:	2201      	movs	r2, #1
 80013da:	490a      	ldr	r1, [pc, #40]	; (8001404 <STLED316S_Ini+0x60>)
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <STLED316S_Ini+0x64>)
 80013de:	f003 fe63 	bl	80050a8 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 80013e2:	2005      	movs	r0, #5
 80013e4:	f000 f9dc 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4619      	mov	r1, r3
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f003 f9bd 	bl	800476e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80013f4:	2005      	movs	r0, #5
 80013f6:	f000 f9d3 	bl	80017a0 <DelayMicro>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20003d98 	.word	0x20003d98
 8001408:	20003e1c 	.word	0x20003e1c

0800140c <STLED316S_OutData>:


void STLED316S_OutData (uint8_t *data, uint8_t num, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	461a      	mov	r2, r3
 8001418:	460b      	mov	r3, r1
 800141a:	72fb      	strb	r3, [r7, #11]
 800141c:	4613      	mov	r3, r2
 800141e:	813b      	strh	r3, [r7, #8]
	STLED_TxData[0] = 0x00; // Вывод с автоикрементом адреса
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <STLED316S_OutData+0xb0>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]

	STLED_TxData[1] = 0x00;
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <STLED316S_OutData+0xb0>)
 8001428:	2200      	movs	r2, #0
 800142a:	705a      	strb	r2, [r3, #1]
	STLED_TxData[2] = 0x00;
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <STLED316S_OutData+0xb0>)
 800142e:	2200      	movs	r2, #0
 8001430:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = 0x00;
 8001432:	4b22      	ldr	r3, [pc, #136]	; (80014bc <STLED316S_OutData+0xb0>)
 8001434:	2200      	movs	r2, #0
 8001436:	70da      	strb	r2, [r3, #3]
	STLED_TxData[4] = 0x00;
 8001438:	4b20      	ldr	r3, [pc, #128]	; (80014bc <STLED316S_OutData+0xb0>)
 800143a:	2200      	movs	r2, #0
 800143c:	711a      	strb	r2, [r3, #4]
	STLED_TxData[5] = 0x00;
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <STLED316S_OutData+0xb0>)
 8001440:	2200      	movs	r2, #0
 8001442:	715a      	strb	r2, [r3, #5]
	STLED_TxData[6] = 0x00;
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <STLED316S_OutData+0xb0>)
 8001446:	2200      	movs	r2, #0
 8001448:	719a      	strb	r2, [r3, #6]

	for(uint8_t i = 0; i < num; i++)
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
 800144e:	e00d      	b.n	800146c <STLED316S_OutData+0x60>
	{
		STLED_TxData[i + 1] = code_digit[data[i]];
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	3301      	adds	r3, #1
 800145e:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <STLED316S_OutData+0xb4>)
 8001460:	5c51      	ldrb	r1, [r2, r1]
 8001462:	4a16      	ldr	r2, [pc, #88]	; (80014bc <STLED316S_OutData+0xb0>)
 8001464:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < num; i++)
 8001466:	7dfb      	ldrb	r3, [r7, #23]
 8001468:	3301      	adds	r3, #1
 800146a:	75fb      	strb	r3, [r7, #23]
 800146c:	7dfa      	ldrb	r2, [r7, #23]
 800146e:	7afb      	ldrb	r3, [r7, #11]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3ed      	bcc.n	8001450 <STLED316S_OutData+0x44>
	}

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 8001474:	893b      	ldrh	r3, [r7, #8]
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f003 f977 	bl	800476e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001480:	2005      	movs	r0, #5
 8001482:	f000 f98d 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], num + 1, 10000);
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	b29a      	uxth	r2, r3
 800148e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001492:	490a      	ldr	r1, [pc, #40]	; (80014bc <STLED316S_OutData+0xb0>)
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <STLED316S_OutData+0xb8>)
 8001496:	f003 fe07 	bl	80050a8 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 800149a:	2005      	movs	r0, #5
 800149c:	f000 f980 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 80014a0:	893b      	ldrh	r3, [r7, #8]
 80014a2:	2201      	movs	r2, #1
 80014a4:	4619      	mov	r1, r3
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f003 f961 	bl	800476e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80014ac:	2005      	movs	r0, #5
 80014ae:	f000 f977 	bl	80017a0 <DelayMicro>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20003d98 	.word	0x20003d98
 80014c0:	08009508 	.word	0x08009508
 80014c4:	20003e1c 	.word	0x20003e1c

080014c8 <STLED316S_Single_Out>:

void STLED316S_Single_Out (uint8_t *data, uint8_t num, uint8_t DP, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	72fb      	strb	r3, [r7, #11]
 80014d6:	4613      	mov	r3, r2
 80014d8:	72bb      	strb	r3, [r7, #10]
	STLED_TxData[0] = 0x00;
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0x00;
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	705a      	strb	r2, [r3, #1]

	STLED_TxData[0] |= 0x20; // Вывод значения без автоинкремента, в заданный разряд
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f043 0320 	orr.w	r3, r3, #32
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014f2:	701a      	strb	r2, [r3, #0]
	STLED_TxData[0] |= ((6-num) & 0x07); // В какой разряд выводить
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	f1c3 0306 	rsb	r3, r3, #6
 8001500:	b2db      	uxtb	r3, r3
 8001502:	b25b      	sxtb	r3, r3
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	b25b      	sxtb	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b25b      	sxtb	r3, r3
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <STLED316S_Single_Out+0xb8>)
 8001512:	701a      	strb	r2, [r3, #0]

	STLED_TxData[1] = *data; // Выводимое значение
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <STLED316S_Single_Out+0xb8>)
 800151a:	705a      	strb	r2, [r3, #1]


	STLED_TxData[1] = code_digit[data[0]];
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <STLED316S_Single_Out+0xbc>)
 8001524:	5c9a      	ldrb	r2, [r3, r2]
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <STLED316S_Single_Out+0xb8>)
 8001528:	705a      	strb	r2, [r3, #1]

	if(DP) // Вывод точки
 800152a:	7abb      	ldrb	r3, [r7, #10]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <STLED316S_Single_Out+0x76>
	{
		STLED_TxData[1] |= 0x80;
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <STLED316S_Single_Out+0xb8>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <STLED316S_Single_Out+0xb8>)
 800153c:	705a      	strb	r2, [r3, #1]
	}

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 800153e:	8b3b      	ldrh	r3, [r7, #24]
 8001540:	2200      	movs	r2, #0
 8001542:	4619      	mov	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f003 f912 	bl	800476e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 800154a:	2005      	movs	r0, #5
 800154c:	f000 f928 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], 2, 10000);
 8001550:	f242 7310 	movw	r3, #10000	; 0x2710
 8001554:	2202      	movs	r2, #2
 8001556:	490a      	ldr	r1, [pc, #40]	; (8001580 <STLED316S_Single_Out+0xb8>)
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <STLED316S_Single_Out+0xc0>)
 800155a:	f003 fda5 	bl	80050a8 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 800155e:	2005      	movs	r0, #5
 8001560:	f000 f91e 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 8001564:	8b3b      	ldrh	r3, [r7, #24]
 8001566:	2201      	movs	r2, #1
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f003 f8ff 	bl	800476e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US + 100); // Без доп задержки 100 мкС зависает (Hard Fault)
 8001570:	2069      	movs	r0, #105	; 0x69
 8001572:	f000 f915 	bl	80017a0 <DelayMicro>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20003d98 	.word	0x20003d98
 8001584:	08009508 	.word	0x08009508
 8001588:	20003e1c 	.word	0x20003e1c

0800158c <STLED316S_Direct_Single_Out>:

void STLED316S_Direct_Single_Out (uint8_t *data, uint8_t num, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	461a      	mov	r2, r3
 8001598:	460b      	mov	r3, r1
 800159a:	72fb      	strb	r3, [r7, #11]
 800159c:	4613      	mov	r3, r2
 800159e:	813b      	strh	r3, [r7, #8]
	STLED_TxData[0] = 0x00;
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0x00;
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	705a      	strb	r2, [r3, #1]

	STLED_TxData[0] |= 0x20; // Вывод значения без автоинкремента, в заданный разряд
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	f043 0320 	orr.w	r3, r3, #32
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015b8:	701a      	strb	r2, [r3, #0]
	STLED_TxData[0] |= ((6-num) & 0x07); // В какой разряд выводить
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b25a      	sxtb	r2, r3
 80015c0:	7afb      	ldrb	r3, [r7, #11]
 80015c2:	f1c3 0306 	rsb	r3, r3, #6
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015d8:	701a      	strb	r2, [r3, #0]

	STLED_TxData[1] = *data; // Выводимое значение
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015e0:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 80015e2:	893b      	ldrh	r3, [r7, #8]
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f003 f8c0 	bl	800476e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80015ee:	2005      	movs	r0, #5
 80015f0:	f000 f8d6 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], 2, 10000);
 80015f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80015f8:	2202      	movs	r2, #2
 80015fa:	490a      	ldr	r1, [pc, #40]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015fc:	480a      	ldr	r0, [pc, #40]	; (8001628 <STLED316S_Direct_Single_Out+0x9c>)
 80015fe:	f003 fd53 	bl	80050a8 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 8001602:	2005      	movs	r0, #5
 8001604:	f000 f8cc 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 8001608:	893b      	ldrh	r3, [r7, #8]
 800160a:	2201      	movs	r2, #1
 800160c:	4619      	mov	r1, r3
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f003 f8ad 	bl	800476e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001614:	2005      	movs	r0, #5
 8001616:	f000 f8c3 	bl	80017a0 <DelayMicro>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20003d98 	.word	0x20003d98
 8001628:	20003e1c 	.word	0x20003e1c

0800162c <STLED316S_SetBrightness>:

void STLED316S_SetBrightness (uint8_t Bright, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	4613      	mov	r3, r2
 800163a:	80bb      	strh	r3, [r7, #4]
	STLED_TxData[0] = 0x10;
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 800163e:	2210      	movs	r2, #16
 8001640:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0xE5; // E5 - LSB2:0 - кол разряд (0b101 = 6 разрадам), LSB4:3 - режим яркости, LSB7:5 - яркость
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001644:	22e5      	movs	r2, #229	; 0xe5
 8001646:	705a      	strb	r2, [r3, #1]

	STLED_TxData[2] = 0x00;
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 800164a:	2200      	movs	r2, #0
 800164c:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = 0x00;
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001650:	2200      	movs	r2, #0
 8001652:	70da      	strb	r2, [r3, #3]
	STLED_TxData[4] = 0x00;
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001656:	2200      	movs	r2, #0
 8001658:	711a      	strb	r2, [r3, #4]

	STLED_TxData[2] = (Bright<<4) | (Bright);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	b25a      	sxtb	r2, r3
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4313      	orrs	r3, r2
 8001666:	b25b      	sxtb	r3, r3
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 800166c:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = (Bright<<4) | (Bright);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	b25a      	sxtb	r2, r3
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4313      	orrs	r3, r2
 800167a:	b25b      	sxtb	r3, r3
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001680:	70da      	strb	r2, [r3, #3]
	STLED_TxData[4] = (Bright<<4) | (Bright);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	b25a      	sxtb	r2, r3
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	4313      	orrs	r3, r2
 800168e:	b25b      	sxtb	r3, r3
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001694:	711a      	strb	r2, [r3, #4]


	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	4619      	mov	r1, r3
 800169c:	6838      	ldr	r0, [r7, #0]
 800169e:	f003 f866 	bl	800476e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80016a2:	2005      	movs	r0, #5
 80016a4:	f000 f87c 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], 5, 10000);
 80016a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80016ac:	2205      	movs	r2, #5
 80016ae:	490a      	ldr	r1, [pc, #40]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <STLED316S_SetBrightness+0xb0>)
 80016b2:	f003 fcf9 	bl	80050a8 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 80016b6:	2005      	movs	r0, #5
 80016b8:	f000 f872 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	4619      	mov	r1, r3
 80016c2:	6838      	ldr	r0, [r7, #0]
 80016c4:	f003 f853 	bl	800476e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80016c8:	2005      	movs	r0, #5
 80016ca:	f000 f869 	bl	80017a0 <DelayMicro>

}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20003d98 	.word	0x20003d98
 80016dc:	20003e1c 	.word	0x20003e1c

080016e0 <STLED316S_ReciveData>:
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
	DelayMicro(DELAY_US);
}

void STLED316S_ReciveData (uint8_t *data, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	4613      	mov	r3, r2
 80016ec:	80fb      	strh	r3, [r7, #6]
	STLED_TxData[0] = 0x49;
 80016ee:	4b29      	ldr	r3, [pc, #164]	; (8001794 <STLED316S_ReciveData+0xb4>)
 80016f0:	2249      	movs	r2, #73	; 0x49
 80016f2:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0x00;
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <STLED316S_ReciveData+0xb4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	705a      	strb	r2, [r3, #1]
	STLED_TxData[2] = 0x00;
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <STLED316S_ReciveData+0xb4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = 0x00;
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <STLED316S_ReciveData+0xb4>)
 8001702:	2200      	movs	r2, #0
 8001704:	70da      	strb	r2, [r3, #3]

	STLED_Rx[0] = 0x49;
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001708:	2249      	movs	r2, #73	; 0x49
 800170a:	701a      	strb	r2, [r3, #0]
	STLED_Rx[1] = 0x02;
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <STLED316S_ReciveData+0xb8>)
 800170e:	2202      	movs	r2, #2
 8001710:	705a      	strb	r2, [r3, #1]
	STLED_Rx[2] = 0x02;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001714:	2202      	movs	r2, #2
 8001716:	709a      	strb	r2, [r3, #2]
	STLED_Rx[3] = 0x02;
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <STLED316S_ReciveData+0xb8>)
 800171a:	2202      	movs	r2, #2
 800171c:	70da      	strb	r2, [r3, #3]

	for(uint8_t i = 0; i < 8; i++)
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]
 8001722:	e006      	b.n	8001732 <STLED316S_ReciveData+0x52>
	{
		STLED_Rx[i] = 0;
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001728:	2100      	movs	r1, #0
 800172a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 8; i++)
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	3301      	adds	r3, #1
 8001730:	75fb      	strb	r3, [r7, #23]
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b07      	cmp	r3, #7
 8001736:	d9f5      	bls.n	8001724 <STLED316S_ReciveData+0x44>
	}

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	2200      	movs	r2, #0
 800173c:	4619      	mov	r1, r3
 800173e:	68b8      	ldr	r0, [r7, #8]
 8001740:	f003 f815 	bl	800476e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001744:	2005      	movs	r0, #5
 8001746:	f000 f82b 	bl	80017a0 <DelayMicro>
	//SPI1->CR1 |= SPI_CR1_BIDIOE; // Перевод SPI в режим передачи
	HAL_SPI_Transmit(&hspi1, STLED_TxData, 1, 1000);
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	2201      	movs	r2, #1
 8001750:	4910      	ldr	r1, [pc, #64]	; (8001794 <STLED316S_ReciveData+0xb4>)
 8001752:	4812      	ldr	r0, [pc, #72]	; (800179c <STLED316S_ReciveData+0xbc>)
 8001754:	f003 fca8 	bl	80050a8 <HAL_SPI_Transmit>
	//SPI1->CR1 &= ~SPI_CR1_BIDIOE; // // Перевод SPI в режим приема
	//HAL_SPI_TransmitReceive(&hspi1, STLED_TxData, STLED_Rx, 1, 1000);
	HAL_SPI_Receive(&hspi1, STLED_Rx, 2, 1000);
 8001758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175c:	2202      	movs	r2, #2
 800175e:	490e      	ldr	r1, [pc, #56]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001760:	480e      	ldr	r0, [pc, #56]	; (800179c <STLED316S_ReciveData+0xbc>)
 8001762:	f003 fddd 	bl	8005320 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	2201      	movs	r2, #1
 800176a:	4619      	mov	r1, r3
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f002 fffe 	bl	800476e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001772:	2005      	movs	r0, #5
 8001774:	f000 f814 	bl	80017a0 <DelayMicro>

	data[0] = STLED_Rx[0];
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <STLED316S_ReciveData+0xb8>)
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	701a      	strb	r2, [r3, #0]
	data[1]= STLED_Rx[1];
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001786:	7852      	ldrb	r2, [r2, #1]
 8001788:	701a      	strb	r2, [r3, #0]

}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20003d98 	.word	0x20003d98
 8001798:	20003564 	.word	0x20003564
 800179c:	20003e1c 	.word	0x20003e1c

080017a0 <DelayMicro>:

 void DelayMicro(uint32_t __IO micros)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  micros *=(SystemCoreClock/1000000)/5;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <DelayMicro+0x34>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <DelayMicro+0x38>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0d5b      	lsrs	r3, r3, #21
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	607b      	str	r3, [r7, #4]
  while(micros--);
 80017bc:	bf00      	nop
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	1e5a      	subs	r2, r3, #1
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1fa      	bne.n	80017be <DelayMicro+0x1e>
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	20000000 	.word	0x20000000
 80017d8:	6b5fca6b 	.word	0x6b5fca6b

080017dc <STM32_WriteToFlash3>:

		 HAL_FLASH_Lock();
}

void STM32_WriteToFlash3 (uint64_t *Data, uint32_t Len)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	   HAL_FLASH_Unlock();
 80017e6:	f002 fc87 	bl	80040f8 <HAL_FLASH_Unlock>

		FLASH_EraseInitTypeDef EraseInitStruct;
	   uint32_t PAGEError = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;  // Тип стирания. FLASH_TYPEERASE_PAGES стирание одиночной страницы
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
	   EraseInitStruct.PageAddress = PAGE; // Адрес первой стираемой ячейки в странице
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <STM32_WriteToFlash3+0x70>)
 80017f4:	617b      	str	r3, [r7, #20]
	   EraseInitStruct.NbPages     = 1;       // Количесвто стираемых страниц
 80017f6:	2301      	movs	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
	   HAL_FLASHEx_Erase(&EraseInitStruct,&PAGEError);
 80017fa:	f107 0208 	add.w	r2, r7, #8
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fd5f 	bl	80042c8 <HAL_FLASHEx_Erase>

	   //Запись начиная с адреса 0x803F800
		 for(uint16_t i = 0; i < Len; i++)
 800180a:	2300      	movs	r3, #0
 800180c:	83fb      	strh	r3, [r7, #30]
 800180e:	e012      	b.n	8001836 <STM32_WriteToFlash3+0x5a>
		 {
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, PAGE + (i*4), Data[i]);  // FLASH_TYPEPROGRAM_WORD - запись 32 битного числа, адрес записи, данные
 8001810:	8bfb      	ldrh	r3, [r7, #30]
 8001812:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001816:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4619      	mov	r1, r3
 800181e:	8bfb      	ldrh	r3, [r7, #30]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	2002      	movs	r0, #2
 800182c:	f002 fbf4 	bl	8004018 <HAL_FLASH_Program>
		 for(uint16_t i = 0; i < Len; i++)
 8001830:	8bfb      	ldrh	r3, [r7, #30]
 8001832:	3301      	adds	r3, #1
 8001834:	83fb      	strh	r3, [r7, #30]
 8001836:	8bfb      	ldrh	r3, [r7, #30]
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d8e8      	bhi.n	8001810 <STM32_WriteToFlash3+0x34>
		 }

		 HAL_FLASH_Lock();
 800183e:	f002 fc81 	bl	8004144 <HAL_FLASH_Lock>
}
 8001842:	bf00      	nop
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	0803f800 	.word	0x0803f800

08001850 <freeRTOS_Tasks_Ini>:
	uint8_t STLED_Rx[8];



void freeRTOS_Tasks_Ini (void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af02      	add	r7, sp, #8
	xSemaphore_StepCount = xQueueCreateCountingSemaphore(4, 0);
 8001856:	2100      	movs	r1, #0
 8001858:	2004      	movs	r0, #4
 800185a:	f005 fc83 	bl	8007164 <xQueueCreateCountingSemaphore>
 800185e:	4603      	mov	r3, r0
 8001860:	4a48      	ldr	r2, [pc, #288]	; (8001984 <freeRTOS_Tasks_Ini+0x134>)
 8001862:	6013      	str	r3, [r2, #0]

	//xSemaphore_Calibration = xQueueCreateCountingSemaphore(1, 0); // Первый аргмент - это максимальное количество счета, второй - начальное значение счетчика

	vSemaphoreCreateBinary(xSemaphore_Calibration); // Создание двоичного семафора
 8001864:	2203      	movs	r2, #3
 8001866:	2100      	movs	r1, #0
 8001868:	2001      	movs	r0, #1
 800186a:	f005 fc28 	bl	80070be <xQueueGenericCreate>
 800186e:	4603      	mov	r3, r0
 8001870:	4a45      	ldr	r2, [pc, #276]	; (8001988 <freeRTOS_Tasks_Ini+0x138>)
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b44      	ldr	r3, [pc, #272]	; (8001988 <freeRTOS_Tasks_Ini+0x138>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <freeRTOS_Tasks_Ini+0x3a>
 800187c:	4b42      	ldr	r3, [pc, #264]	; (8001988 <freeRTOS_Tasks_Ini+0x138>)
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	2300      	movs	r3, #0
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	f005 fc83 	bl	8007190 <xQueueGenericSend>

	qBeepMode = xQueueCreate(1, sizeof( uint8_t )); // Очередь для передачи режима работы бипера
 800188a:	2200      	movs	r2, #0
 800188c:	2101      	movs	r1, #1
 800188e:	2001      	movs	r0, #1
 8001890:	f005 fc15 	bl	80070be <xQueueGenericCreate>
 8001894:	4603      	mov	r3, r0
 8001896:	4a3d      	ldr	r2, [pc, #244]	; (800198c <freeRTOS_Tasks_Ini+0x13c>)
 8001898:	6013      	str	r3, [r2, #0]

	qWelderCmd = xQueueCreate(1, sizeof( uint8_t )); // Очередь для передачи команд управления кареткой
 800189a:	2200      	movs	r2, #0
 800189c:	2101      	movs	r1, #1
 800189e:	2001      	movs	r0, #1
 80018a0:	f005 fc0d 	bl	80070be <xQueueGenericCreate>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a3a      	ldr	r2, [pc, #232]	; (8001990 <freeRTOS_Tasks_Ini+0x140>)
 80018a8:	6013      	str	r3, [r2, #0]

	qGoToResponse = xQueueCreate(1, sizeof( uint8_t )); // Требуемая позиция занята
 80018aa:	2200      	movs	r2, #0
 80018ac:	2101      	movs	r1, #1
 80018ae:	2001      	movs	r0, #1
 80018b0:	f005 fc05 	bl	80070be <xQueueGenericCreate>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a37      	ldr	r2, [pc, #220]	; (8001994 <freeRTOS_Tasks_Ini+0x144>)
 80018b8:	6013      	str	r3, [r2, #0]

	//vSemaphoreCreateBinary(qDebug);

	qWelderRun = xQueueCreate(1, sizeof( uint8_t )); // Начать процесс варки
 80018ba:	2200      	movs	r2, #0
 80018bc:	2101      	movs	r1, #1
 80018be:	2001      	movs	r0, #1
 80018c0:	f005 fbfd 	bl	80070be <xQueueGenericCreate>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a34      	ldr	r2, [pc, #208]	; (8001998 <freeRTOS_Tasks_Ini+0x148>)
 80018c8:	6013      	str	r3, [r2, #0]

	qWelderCalibrated = xQueueCreate(1, sizeof( uint8_t )); // Начать калибровку
 80018ca:	2200      	movs	r2, #0
 80018cc:	2101      	movs	r1, #1
 80018ce:	2001      	movs	r0, #1
 80018d0:	f005 fbf5 	bl	80070be <xQueueGenericCreate>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a31      	ldr	r2, [pc, #196]	; (800199c <freeRTOS_Tasks_Ini+0x14c>)
 80018d8:	6013      	str	r3, [r2, #0]

	qKeyPress = xQueueCreate(1, sizeof( uint8_t )); // Предача события о нажатии кнопки
 80018da:	2200      	movs	r2, #0
 80018dc:	2101      	movs	r1, #1
 80018de:	2001      	movs	r0, #1
 80018e0:	f005 fbed 	bl	80070be <xQueueGenericCreate>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a2e      	ldr	r2, [pc, #184]	; (80019a0 <freeRTOS_Tasks_Ini+0x150>)
 80018e8:	6013      	str	r3, [r2, #0]

	MicrostepDriver_Ini();
 80018ea:	f7ff f88f 	bl	8000a0c <MicrostepDriver_Ini>

//	WELDER_Preset();

	xTaskCreate(vIndicatorPanel_Out, "IndicatorPanel_Out", 200, NULL, 2, NULL); // З-а вывода значений на панель
 80018ee:	2300      	movs	r3, #0
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	2302      	movs	r3, #2
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	22c8      	movs	r2, #200	; 0xc8
 80018fa:	492a      	ldr	r1, [pc, #168]	; (80019a4 <freeRTOS_Tasks_Ini+0x154>)
 80018fc:	482a      	ldr	r0, [pc, #168]	; (80019a8 <freeRTOS_Tasks_Ini+0x158>)
 80018fe:	f006 f961 	bl	8007bc4 <xTaskCreate>

	xTaskCreate(vKeyScan, "KeyScan", 200, NULL, 2, NULL); // З-а опроса кнопок
 8001902:	2300      	movs	r3, #0
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2302      	movs	r3, #2
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2300      	movs	r3, #0
 800190c:	22c8      	movs	r2, #200	; 0xc8
 800190e:	4927      	ldr	r1, [pc, #156]	; (80019ac <freeRTOS_Tasks_Ini+0x15c>)
 8001910:	4827      	ldr	r0, [pc, #156]	; (80019b0 <freeRTOS_Tasks_Ini+0x160>)
 8001912:	f006 f957 	bl	8007bc4 <xTaskCreate>

	xTaskCreate(vBuzzer_beep, "Buzzer_beep", 200, NULL, 1, NULL); // З-а опроса кнопок
 8001916:	2300      	movs	r3, #0
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	2301      	movs	r3, #1
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2300      	movs	r3, #0
 8001920:	22c8      	movs	r2, #200	; 0xc8
 8001922:	4924      	ldr	r1, [pc, #144]	; (80019b4 <freeRTOS_Tasks_Ini+0x164>)
 8001924:	4824      	ldr	r0, [pc, #144]	; (80019b8 <freeRTOS_Tasks_Ini+0x168>)
 8001926:	f006 f94d 	bl	8007bc4 <xTaskCreate>

	xTaskCreate(vWelder_Run, "Weleder_Run", 200, NULL, 2, NULL);
 800192a:	2300      	movs	r3, #0
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	2302      	movs	r3, #2
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2300      	movs	r3, #0
 8001934:	22c8      	movs	r2, #200	; 0xc8
 8001936:	4921      	ldr	r1, [pc, #132]	; (80019bc <freeRTOS_Tasks_Ini+0x16c>)
 8001938:	4821      	ldr	r0, [pc, #132]	; (80019c0 <freeRTOS_Tasks_Ini+0x170>)
 800193a:	f006 f943 	bl	8007bc4 <xTaskCreate>

	xTaskCreate(vCarriage_GoTo, "Carriage_GoTo", 200, NULL, 3, NULL); // З-а перемещения каретки в заданную точку
 800193e:	2300      	movs	r3, #0
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	2303      	movs	r3, #3
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	22c8      	movs	r2, #200	; 0xc8
 800194a:	491e      	ldr	r1, [pc, #120]	; (80019c4 <freeRTOS_Tasks_Ini+0x174>)
 800194c:	481e      	ldr	r0, [pc, #120]	; (80019c8 <freeRTOS_Tasks_Ini+0x178>)
 800194e:	f006 f939 	bl	8007bc4 <xTaskCreate>

	xTaskCreate(vCarriage_Calibration, "Carriage_Calibration", 200, NULL, 2, NULL); // З-а перемещения каретки в заданную точку
 8001952:	2300      	movs	r3, #0
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	2302      	movs	r3, #2
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2300      	movs	r3, #0
 800195c:	22c8      	movs	r2, #200	; 0xc8
 800195e:	491b      	ldr	r1, [pc, #108]	; (80019cc <freeRTOS_Tasks_Ini+0x17c>)
 8001960:	481b      	ldr	r0, [pc, #108]	; (80019d0 <freeRTOS_Tasks_Ini+0x180>)
 8001962:	f006 f92f 	bl	8007bc4 <xTaskCreate>

	xTaskCreate(vKey_Action, "Key_Action", 200, NULL, 2, NULL); // З-а выполняет дейсвия в зависимости от нажатой кнопки и режима работы устройсво
 8001966:	2300      	movs	r3, #0
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	2302      	movs	r3, #2
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2300      	movs	r3, #0
 8001970:	22c8      	movs	r2, #200	; 0xc8
 8001972:	4918      	ldr	r1, [pc, #96]	; (80019d4 <freeRTOS_Tasks_Ini+0x184>)
 8001974:	4818      	ldr	r0, [pc, #96]	; (80019d8 <freeRTOS_Tasks_Ini+0x188>)
 8001976:	f006 f925 	bl	8007bc4 <xTaskCreate>

	vTaskStartScheduler();
 800197a:	f006 fa73 	bl	8007e64 <vTaskStartScheduler>

}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20003560 	.word	0x20003560
 8001988:	20003dc4 	.word	0x20003dc4
 800198c:	20003538 	.word	0x20003538
 8001990:	20003d94 	.word	0x20003d94
 8001994:	20003d80 	.word	0x20003d80
 8001998:	20003d88 	.word	0x20003d88
 800199c:	20003d8c 	.word	0x20003d8c
 80019a0:	20003d90 	.word	0x20003d90
 80019a4:	0800946c 	.word	0x0800946c
 80019a8:	08003179 	.word	0x08003179
 80019ac:	08009480 	.word	0x08009480
 80019b0:	0800274d 	.word	0x0800274d
 80019b4:	08009488 	.word	0x08009488
 80019b8:	0800323d 	.word	0x0800323d
 80019bc:	08009494 	.word	0x08009494
 80019c0:	080022c1 	.word	0x080022c1
 80019c4:	080094a0 	.word	0x080094a0
 80019c8:	080025b9 	.word	0x080025b9
 80019cc:	080094b0 	.word	0x080094b0
 80019d0:	080024b9 	.word	0x080024b9
 80019d4:	080094c8 	.word	0x080094c8
 80019d8:	080019dd 	.word	0x080019dd

080019dc <vKey_Action>:

void vKey_Action(void *pvParameters)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed; // Номер нажатой кнопки или комбинации кнопок
	uint8_t beep_mode_send = beep_click; // Режим работы бипера
 80019e4:	2301      	movs	r3, #1
 80019e6:	73bb      	strb	r3, [r7, #14]
	uint8_t Cal = Calibrated; // Передача команды калибровка
 80019e8:	2304      	movs	r3, #4
 80019ea:	737b      	strb	r3, [r7, #13]
	uint8_t Run; // Переменная для передачи команды начало варки
	uint8_t Carriage_cmd = Cmd_CarriageGoTo; //Передача команды для начала движения каретки в заданную точку
 80019ec:	2301      	movs	r3, #1
 80019ee:	72fb      	strb	r3, [r7, #11]


	for(;;)
	{
		xQueueReceive(qKeyPress, &KeyPressed, portMAX_DELAY ); // Ждать нажатия кнопки
 80019f0:	4ba6      	ldr	r3, [pc, #664]	; (8001c8c <vKey_Action+0x2b0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f107 010f 	add.w	r1, r7, #15
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	4618      	mov	r0, r3
 80019fe:	f005 fd1f 	bl	8007440 <xQueueReceive>

		switch(KeyPressed)
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	2b24      	cmp	r3, #36	; 0x24
 8001a06:	d8f3      	bhi.n	80019f0 <vKey_Action+0x14>
 8001a08:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <vKey_Action+0x34>)
 8001a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0e:	bf00      	nop
 8001a10:	080019f1 	.word	0x080019f1
 8001a14:	08001aa5 	.word	0x08001aa5
 8001a18:	08001b03 	.word	0x08001b03
 8001a1c:	08001b2b 	.word	0x08001b2b
 8001a20:	08001b99 	.word	0x08001b99
 8001a24:	08001bd7 	.word	0x08001bd7
 8001a28:	08001c4b 	.word	0x08001c4b
 8001a2c:	08001c9d 	.word	0x08001c9d
 8001a30:	08001d07 	.word	0x08001d07
 8001a34:	08001d3b 	.word	0x08001d3b
 8001a38:	08001d63 	.word	0x08001d63
 8001a3c:	08001d8b 	.word	0x08001d8b
 8001a40:	08001db3 	.word	0x08001db3
 8001a44:	08001ddb 	.word	0x08001ddb
 8001a48:	08001e03 	.word	0x08001e03
 8001a4c:	08001e2b 	.word	0x08001e2b
 8001a50:	08001e57 	.word	0x08001e57
 8001a54:	08001e83 	.word	0x08001e83
 8001a58:	08001eab 	.word	0x08001eab
 8001a5c:	08001ed3 	.word	0x08001ed3
 8001a60:	08001efb 	.word	0x08001efb
 8001a64:	08001f23 	.word	0x08001f23
 8001a68:	08001f5d 	.word	0x08001f5d
 8001a6c:	08001f85 	.word	0x08001f85
 8001a70:	08001fb1 	.word	0x08001fb1
 8001a74:	080020a5 	.word	0x080020a5
 8001a78:	080020d1 	.word	0x080020d1
 8001a7c:	080020ef 	.word	0x080020ef
 8001a80:	0800214f 	.word	0x0800214f
 8001a84:	0800216d 	.word	0x0800216d
 8001a88:	080021d7 	.word	0x080021d7
 8001a8c:	080021e5 	.word	0x080021e5
 8001a90:	080019f1 	.word	0x080019f1
 8001a94:	08001fd9 	.word	0x08001fd9
 8001a98:	08002027 	.word	0x08002027
 8001a9c:	08002039 	.word	0x08002039
 8001aa0:	08002079 	.word	0x08002079
			break;
		}

		case press_short_Xs_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001aa4:	4b7a      	ldr	r3, [pc, #488]	; (8001c90 <vKey_Action+0x2b4>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	f107 010e 	add.w	r1, r7, #14
 8001aac:	2300      	movs	r3, #0
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f005 fb6e 	bl	8007190 <xQueueGenericSend>

			if (WelderUnit.Xs > XS_MIN) // Проверка на попадание в допустимый диапазон значений
 8001ab4:	4b77      	ldr	r3, [pc, #476]	; (8001c94 <vKey_Action+0x2b8>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	2b0a      	cmp	r3, #10
 8001aba:	f240 83a2 	bls.w	8002202 <vKey_Action+0x826>
			{
				WelderUnit.Xs--; // Исполнить
 8001abe:	4b75      	ldr	r3, [pc, #468]	; (8001c94 <vKey_Action+0x2b8>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <vKey_Action+0x2b8>)
 8001ac8:	801a      	strh	r2, [r3, #0]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001aca:	4b72      	ldr	r3, [pc, #456]	; (8001c94 <vKey_Action+0x2b8>)
 8001acc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	f040 8396 	bne.w	8002202 <vKey_Action+0x826>
 8001ad6:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <vKey_Action+0x2b8>)
 8001ad8:	7c1b      	ldrb	r3, [r3, #16]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 838f 	beq.w	8002202 <vKey_Action+0x826>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xs;
 8001ae8:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <vKey_Action+0x2b8>)
 8001aea:	881a      	ldrh	r2, [r3, #0]
 8001aec:	4b69      	ldr	r3, [pc, #420]	; (8001c94 <vKey_Action+0x2b8>)
 8001aee:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001af0:	4b69      	ldr	r3, [pc, #420]	; (8001c98 <vKey_Action+0x2bc>)
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	f107 010b 	add.w	r1, r7, #11
 8001af8:	2300      	movs	r3, #0
 8001afa:	2200      	movs	r2, #0
 8001afc:	f005 fb48 	bl	8007190 <xQueueGenericSend>

				}
			}
			break;
 8001b00:	e37f      	b.n	8002202 <vKey_Action+0x826>
		}

		case press_long_Xs_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <vKey_Action+0x2b4>)
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	f107 010e 	add.w	r1, r7, #14
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f005 fb3f 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Xs > XS_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001b12:	4b60      	ldr	r3, [pc, #384]	; (8001c94 <vKey_Action+0x2b8>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	2b1e      	cmp	r3, #30
 8001b18:	f240 8376 	bls.w	8002208 <vKey_Action+0x82c>
			{
				WelderUnit.Xs -= 20; // Дейсвия при длинном нажатии
 8001b1c:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <vKey_Action+0x2b8>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	3b14      	subs	r3, #20
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <vKey_Action+0x2b8>)
 8001b26:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001b28:	e36e      	b.n	8002208 <vKey_Action+0x82c>
		}

		case press_short_Xs_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b2a:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <vKey_Action+0x2b4>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	f107 010e 	add.w	r1, r7, #14
 8001b32:	2300      	movs	r3, #0
 8001b34:	2200      	movs	r2, #0
 8001b36:	f005 fb2b 	bl	8007190 <xQueueGenericSend>
			if ((WelderUnit.Xs < XS_MAX) && (WelderUnit.Xs < WelderUnit.Xf)) // Проверка на попадание в допустимый диапазон значений  и что бы Xs была меньше Xf
 8001b3a:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <vKey_Action+0x2b8>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001b42:	f080 8364 	bcs.w	800220e <vKey_Action+0x832>
 8001b46:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <vKey_Action+0x2b8>)
 8001b48:	881a      	ldrh	r2, [r3, #0]
 8001b4a:	4b52      	ldr	r3, [pc, #328]	; (8001c94 <vKey_Action+0x2b8>)
 8001b4c:	885b      	ldrh	r3, [r3, #2]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	f080 835d 	bcs.w	800220e <vKey_Action+0x832>
			{

			WelderUnit.Xs++; // Исполнить
 8001b54:	4b4f      	ldr	r3, [pc, #316]	; (8001c94 <vKey_Action+0x2b8>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	4b4d      	ldr	r3, [pc, #308]	; (8001c94 <vKey_Action+0x2b8>)
 8001b5e:	801a      	strh	r2, [r3, #0]

			// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
			if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001b60:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <vKey_Action+0x2b8>)
 8001b62:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	f040 8351 	bne.w	800220e <vKey_Action+0x832>
 8001b6c:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <vKey_Action+0x2b8>)
 8001b6e:	7c1b      	ldrb	r3, [r3, #16]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 834a 	beq.w	800220e <vKey_Action+0x832>
			{
				Carriage_cmd = Cmd_CarriageGoTo;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	72fb      	strb	r3, [r7, #11]
				WelderUnit.GoTo = WelderUnit.Xs;
 8001b7e:	4b45      	ldr	r3, [pc, #276]	; (8001c94 <vKey_Action+0x2b8>)
 8001b80:	881a      	ldrh	r2, [r3, #0]
 8001b82:	4b44      	ldr	r3, [pc, #272]	; (8001c94 <vKey_Action+0x2b8>)
 8001b84:	811a      	strh	r2, [r3, #8]
				xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001b86:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <vKey_Action+0x2bc>)
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	f107 010b 	add.w	r1, r7, #11
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2200      	movs	r2, #0
 8001b92:	f005 fafd 	bl	8007190 <xQueueGenericSend>
			}

			}
			break;
 8001b96:	e33a      	b.n	800220e <vKey_Action+0x832>
		}

		case press_long_Xs_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b98:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <vKey_Action+0x2b4>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	f107 010e 	add.w	r1, r7, #14
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f005 faf4 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Xs < XS_MAX - 20 && WelderUnit.Xs < WelderUnit.Xf - 20) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
 8001ba8:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <vKey_Action+0x2b8>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f240 622b 	movw	r2, #1579	; 0x62b
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f200 832f 	bhi.w	8002214 <vKey_Action+0x838>
 8001bb6:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <vKey_Action+0x2b8>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <vKey_Action+0x2b8>)
 8001bbe:	885b      	ldrh	r3, [r3, #2]
 8001bc0:	3b14      	subs	r3, #20
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	f280 8326 	bge.w	8002214 <vKey_Action+0x838>
			{
				WelderUnit.Xs += 20; // Дейсвия при длинном нажатии
 8001bc8:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <vKey_Action+0x2b8>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	3314      	adds	r3, #20
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <vKey_Action+0x2b8>)
 8001bd2:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001bd4:	e31e      	b.n	8002214 <vKey_Action+0x838>
		}

		case press_short_Xf_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <vKey_Action+0x2b4>)
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	f107 010e 	add.w	r1, r7, #14
 8001bde:	2300      	movs	r3, #0
 8001be0:	2200      	movs	r2, #0
 8001be2:	f005 fad5 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN && WelderUnit.Xf > WelderUnit.Xs) // Проверка на попадание в допустимый диапазон значений
 8001be6:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <vKey_Action+0x2b8>)
 8001be8:	885b      	ldrh	r3, [r3, #2]
 8001bea:	2b14      	cmp	r3, #20
 8001bec:	f240 8315 	bls.w	800221a <vKey_Action+0x83e>
 8001bf0:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <vKey_Action+0x2b8>)
 8001bf2:	885a      	ldrh	r2, [r3, #2]
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <vKey_Action+0x2b8>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f240 830e 	bls.w	800221a <vKey_Action+0x83e>
			{
				WelderUnit.Xf--; // Исполнить
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <vKey_Action+0x2b8>)
 8001c00:	885b      	ldrh	r3, [r3, #2]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <vKey_Action+0x2b8>)
 8001c08:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <vKey_Action+0x2b8>)
 8001c0c:	885a      	ldrh	r2, [r3, #2]
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <vKey_Action+0x2b8>)
 8001c10:	811a      	strh	r2, [r3, #8]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <vKey_Action+0x2b8>)
 8001c14:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	f040 82fe 	bne.w	800221a <vKey_Action+0x83e>
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <vKey_Action+0x2b8>)
 8001c20:	7c1b      	ldrb	r3, [r3, #16]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 82f7 	beq.w	800221a <vKey_Action+0x83e>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xf;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <vKey_Action+0x2b8>)
 8001c32:	885a      	ldrh	r2, [r3, #2]
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <vKey_Action+0x2b8>)
 8001c36:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <vKey_Action+0x2bc>)
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	f107 010b 	add.w	r1, r7, #11
 8001c40:	2300      	movs	r3, #0
 8001c42:	2200      	movs	r2, #0
 8001c44:	f005 faa4 	bl	8007190 <xQueueGenericSend>

				}
			}
			break;
 8001c48:	e2e7      	b.n	800221a <vKey_Action+0x83e>
		}

		case press_long_Xf_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <vKey_Action+0x2b4>)
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	f107 010e 	add.w	r1, r7, #14
 8001c52:	2300      	movs	r3, #0
 8001c54:	2200      	movs	r2, #0
 8001c56:	f005 fa9b 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN + 20 && WelderUnit.Xf > WelderUnit.Xs + 20 ) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <vKey_Action+0x2b8>)
 8001c5c:	885b      	ldrh	r3, [r3, #2]
 8001c5e:	2b28      	cmp	r3, #40	; 0x28
 8001c60:	f240 82de 	bls.w	8002220 <vKey_Action+0x844>
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <vKey_Action+0x2b8>)
 8001c66:	885b      	ldrh	r3, [r3, #2]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <vKey_Action+0x2b8>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	3314      	adds	r3, #20
 8001c70:	429a      	cmp	r2, r3
 8001c72:	f340 82d5 	ble.w	8002220 <vKey_Action+0x844>
			{
				WelderUnit.Xf -= 20; // Дейсвия при длинном нажатии
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <vKey_Action+0x2b8>)
 8001c78:	885b      	ldrh	r3, [r3, #2]
 8001c7a:	3b14      	subs	r3, #20
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <vKey_Action+0x2b8>)
 8001c80:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <vKey_Action+0x2b8>)
 8001c84:	885a      	ldrh	r2, [r3, #2]
 8001c86:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <vKey_Action+0x2b8>)
 8001c88:	811a      	strh	r2, [r3, #8]
			}
			break;
 8001c8a:	e2c9      	b.n	8002220 <vKey_Action+0x844>
 8001c8c:	20003d90 	.word	0x20003d90
 8001c90:	20003538 	.word	0x20003538
 8001c94:	2000353c 	.word	0x2000353c
 8001c98:	20003d94 	.word	0x20003d94
		}

		case press_short_Xf_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001c9c:	4bac      	ldr	r3, [pc, #688]	; (8001f50 <vKey_Action+0x574>)
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	f107 010e 	add.w	r1, r7, #14
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f005 fa72 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001cac:	4ba9      	ldr	r3, [pc, #676]	; (8001f54 <vKey_Action+0x578>)
 8001cae:	885b      	ldrh	r3, [r3, #2]
 8001cb0:	f240 6271 	movw	r2, #1649	; 0x671
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	f200 82b6 	bhi.w	8002226 <vKey_Action+0x84a>
			{
				WelderUnit.Xf++; // Исполнить
 8001cba:	4ba6      	ldr	r3, [pc, #664]	; (8001f54 <vKey_Action+0x578>)
 8001cbc:	885b      	ldrh	r3, [r3, #2]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4ba4      	ldr	r3, [pc, #656]	; (8001f54 <vKey_Action+0x578>)
 8001cc4:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001cc6:	4ba3      	ldr	r3, [pc, #652]	; (8001f54 <vKey_Action+0x578>)
 8001cc8:	885a      	ldrh	r2, [r3, #2]
 8001cca:	4ba2      	ldr	r3, [pc, #648]	; (8001f54 <vKey_Action+0x578>)
 8001ccc:	811a      	strh	r2, [r3, #8]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001cce:	4ba1      	ldr	r3, [pc, #644]	; (8001f54 <vKey_Action+0x578>)
 8001cd0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	f040 82a6 	bne.w	8002226 <vKey_Action+0x84a>
 8001cda:	4b9e      	ldr	r3, [pc, #632]	; (8001f54 <vKey_Action+0x578>)
 8001cdc:	7c1b      	ldrb	r3, [r3, #16]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 829f 	beq.w	8002226 <vKey_Action+0x84a>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xf;
 8001cec:	4b99      	ldr	r3, [pc, #612]	; (8001f54 <vKey_Action+0x578>)
 8001cee:	885a      	ldrh	r2, [r3, #2]
 8001cf0:	4b98      	ldr	r3, [pc, #608]	; (8001f54 <vKey_Action+0x578>)
 8001cf2:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001cf4:	4b98      	ldr	r3, [pc, #608]	; (8001f58 <vKey_Action+0x57c>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	f107 010b 	add.w	r1, r7, #11
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f005 fa46 	bl	8007190 <xQueueGenericSend>

				}
			}
			break;
 8001d04:	e28f      	b.n	8002226 <vKey_Action+0x84a>
		}

		case press_long_Xf_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d06:	4b92      	ldr	r3, [pc, #584]	; (8001f50 <vKey_Action+0x574>)
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	f107 010e 	add.w	r1, r7, #14
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2200      	movs	r2, #0
 8001d12:	f005 fa3d 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX - 20 ) // Проверка на попадание в допустимый диапазон значений
 8001d16:	4b8f      	ldr	r3, [pc, #572]	; (8001f54 <vKey_Action+0x578>)
 8001d18:	885b      	ldrh	r3, [r3, #2]
 8001d1a:	f240 625d 	movw	r2, #1629	; 0x65d
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	f200 8284 	bhi.w	800222c <vKey_Action+0x850>
			{
				WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 8001d24:	4b8b      	ldr	r3, [pc, #556]	; (8001f54 <vKey_Action+0x578>)
 8001d26:	885b      	ldrh	r3, [r3, #2]
 8001d28:	3314      	adds	r3, #20
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <vKey_Action+0x578>)
 8001d2e:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001d30:	4b88      	ldr	r3, [pc, #544]	; (8001f54 <vKey_Action+0x578>)
 8001d32:	885a      	ldrh	r2, [r3, #2]
 8001d34:	4b87      	ldr	r3, [pc, #540]	; (8001f54 <vKey_Action+0x578>)
 8001d36:	811a      	strh	r2, [r3, #8]
			}
			break;
 8001d38:	e278      	b.n	800222c <vKey_Action+0x850>

		}

		case press_short_Delay_s_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d3a:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <vKey_Action+0x574>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	f107 010e 	add.w	r1, r7, #14
 8001d42:	2300      	movs	r3, #0
 8001d44:	2200      	movs	r2, #0
 8001d46:	f005 fa23 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN) // Проверка на попадание в допустимый диапазон значений
 8001d4a:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <vKey_Action+0x578>)
 8001d4c:	7a9b      	ldrb	r3, [r3, #10]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	f240 826f 	bls.w	8002232 <vKey_Action+0x856>
			{
				WelderUnit.Delay_s--; // Исполнить
 8001d54:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <vKey_Action+0x578>)
 8001d56:	7a9b      	ldrb	r3, [r3, #10]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b7d      	ldr	r3, [pc, #500]	; (8001f54 <vKey_Action+0x578>)
 8001d5e:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001d60:	e267      	b.n	8002232 <vKey_Action+0x856>
		}

		case press_long_Delay_s_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d62:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <vKey_Action+0x574>)
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	f107 010e 	add.w	r1, r7, #14
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f005 fa0f 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN + 10) // Проверка на попадание в допустимый диапазон значений
 8001d72:	4b78      	ldr	r3, [pc, #480]	; (8001f54 <vKey_Action+0x578>)
 8001d74:	7a9b      	ldrb	r3, [r3, #10]
 8001d76:	2b0b      	cmp	r3, #11
 8001d78:	f240 825e 	bls.w	8002238 <vKey_Action+0x85c>
			{
				WelderUnit.Delay_s -= 10; // Дейсвия при длинном нажатии
 8001d7c:	4b75      	ldr	r3, [pc, #468]	; (8001f54 <vKey_Action+0x578>)
 8001d7e:	7a9b      	ldrb	r3, [r3, #10]
 8001d80:	3b0a      	subs	r3, #10
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <vKey_Action+0x578>)
 8001d86:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001d88:	e256      	b.n	8002238 <vKey_Action+0x85c>
		}

		case press_short_Delay_s_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d8a:	4b71      	ldr	r3, [pc, #452]	; (8001f50 <vKey_Action+0x574>)
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	f107 010e 	add.w	r1, r7, #14
 8001d92:	2300      	movs	r3, #0
 8001d94:	2200      	movs	r2, #0
 8001d96:	f005 f9fb 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001d9a:	4b6e      	ldr	r3, [pc, #440]	; (8001f54 <vKey_Action+0x578>)
 8001d9c:	7a9b      	ldrb	r3, [r3, #10]
 8001d9e:	2b31      	cmp	r3, #49	; 0x31
 8001da0:	f200 824d 	bhi.w	800223e <vKey_Action+0x862>
			{
				WelderUnit.Delay_s++; // Исполнить
 8001da4:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <vKey_Action+0x578>)
 8001da6:	7a9b      	ldrb	r3, [r3, #10]
 8001da8:	3301      	adds	r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b69      	ldr	r3, [pc, #420]	; (8001f54 <vKey_Action+0x578>)
 8001dae:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001db0:	e245      	b.n	800223e <vKey_Action+0x862>
		}

		case press_long_Delay_s_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001db2:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <vKey_Action+0x574>)
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	f107 010e 	add.w	r1, r7, #14
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f005 f9e7 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
 8001dc2:	4b64      	ldr	r3, [pc, #400]	; (8001f54 <vKey_Action+0x578>)
 8001dc4:	7a9b      	ldrb	r3, [r3, #10]
 8001dc6:	2b27      	cmp	r3, #39	; 0x27
 8001dc8:	f200 823c 	bhi.w	8002244 <vKey_Action+0x868>
			{
				WelderUnit.Delay_s += 10; // Дейсвия при длинном нажатии
 8001dcc:	4b61      	ldr	r3, [pc, #388]	; (8001f54 <vKey_Action+0x578>)
 8001dce:	7a9b      	ldrb	r3, [r3, #10]
 8001dd0:	330a      	adds	r3, #10
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <vKey_Action+0x578>)
 8001dd6:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001dd8:	e234      	b.n	8002244 <vKey_Action+0x868>
		}

		case press_short_Speed_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001dda:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <vKey_Action+0x574>)
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	f107 010e 	add.w	r1, r7, #14
 8001de2:	2300      	movs	r3, #0
 8001de4:	2200      	movs	r2, #0
 8001de6:	f005 f9d3 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN) // Проверка на попадание в допустимый диапазон значений
 8001dea:	4b5a      	ldr	r3, [pc, #360]	; (8001f54 <vKey_Action+0x578>)
 8001dec:	88db      	ldrh	r3, [r3, #6]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	f240 822b 	bls.w	800224a <vKey_Action+0x86e>
			{
				WelderUnit.Speed--; // Исполнить
 8001df4:	4b57      	ldr	r3, [pc, #348]	; (8001f54 <vKey_Action+0x578>)
 8001df6:	88db      	ldrh	r3, [r3, #6]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b55      	ldr	r3, [pc, #340]	; (8001f54 <vKey_Action+0x578>)
 8001dfe:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e00:	e223      	b.n	800224a <vKey_Action+0x86e>
		}

		case press_long_Speed_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e02:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <vKey_Action+0x574>)
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	f107 010e 	add.w	r1, r7, #14
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f005 f9bf 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001e12:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <vKey_Action+0x578>)
 8001e14:	88db      	ldrh	r3, [r3, #6]
 8001e16:	2b15      	cmp	r3, #21
 8001e18:	f240 8224 	bls.w	8002264 <vKey_Action+0x888>
			{
				WelderUnit.Speed -= 20; // Дейсвия при длинном нажатии
 8001e1c:	4b4d      	ldr	r3, [pc, #308]	; (8001f54 <vKey_Action+0x578>)
 8001e1e:	88db      	ldrh	r3, [r3, #6]
 8001e20:	3b14      	subs	r3, #20
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <vKey_Action+0x578>)
 8001e26:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e28:	e21c      	b.n	8002264 <vKey_Action+0x888>
		}

		case press_short_Speed_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <vKey_Action+0x574>)
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	f107 010e 	add.w	r1, r7, #14
 8001e32:	2300      	movs	r3, #0
 8001e34:	2200      	movs	r2, #0
 8001e36:	f005 f9ab 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001e3a:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <vKey_Action+0x578>)
 8001e3c:	88db      	ldrh	r3, [r3, #6]
 8001e3e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001e42:	4293      	cmp	r3, r2
 8001e44:	f200 8211 	bhi.w	800226a <vKey_Action+0x88e>
			{
				WelderUnit.Speed++; // Исполнить
 8001e48:	4b42      	ldr	r3, [pc, #264]	; (8001f54 <vKey_Action+0x578>)
 8001e4a:	88db      	ldrh	r3, [r3, #6]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	4b40      	ldr	r3, [pc, #256]	; (8001f54 <vKey_Action+0x578>)
 8001e52:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e54:	e209      	b.n	800226a <vKey_Action+0x88e>
		}

		case press_long_Speed_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <vKey_Action+0x574>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	f107 010e 	add.w	r1, r7, #14
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2200      	movs	r2, #0
 8001e62:	f005 f995 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8001e66:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <vKey_Action+0x578>)
 8001e68:	88db      	ldrh	r3, [r3, #6]
 8001e6a:	f240 32d2 	movw	r2, #978	; 0x3d2
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	f200 81fe 	bhi.w	8002270 <vKey_Action+0x894>
			{
				WelderUnit.Speed += 20; // Дейсвия при длинном нажатии
 8001e74:	4b37      	ldr	r3, [pc, #220]	; (8001f54 <vKey_Action+0x578>)
 8001e76:	88db      	ldrh	r3, [r3, #6]
 8001e78:	3314      	adds	r3, #20
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b35      	ldr	r3, [pc, #212]	; (8001f54 <vKey_Action+0x578>)
 8001e7e:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e80:	e1f6      	b.n	8002270 <vKey_Action+0x894>
		}

		case press_short_Delay_f_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e82:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <vKey_Action+0x574>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	f107 010e 	add.w	r1, r7, #14
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f005 f97f 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN) // Проверка на попадание в допустимый диапазон значений
 8001e92:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <vKey_Action+0x578>)
 8001e94:	7adb      	ldrb	r3, [r3, #11]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	f240 81ed 	bls.w	8002276 <vKey_Action+0x89a>
			{
				WelderUnit.Delay_f--; // Исполнить
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <vKey_Action+0x578>)
 8001e9e:	7adb      	ldrb	r3, [r3, #11]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <vKey_Action+0x578>)
 8001ea6:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001ea8:	e1e5      	b.n	8002276 <vKey_Action+0x89a>
		}

		case press_long_Delay_f_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001eaa:	4b29      	ldr	r3, [pc, #164]	; (8001f50 <vKey_Action+0x574>)
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	f107 010e 	add.w	r1, r7, #14
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f005 f96b 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN + 10) // Проверка на попадание в допустимый диапазон значений
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <vKey_Action+0x578>)
 8001ebc:	7adb      	ldrb	r3, [r3, #11]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	f240 81dc 	bls.w	800227c <vKey_Action+0x8a0>
			{
				WelderUnit.Delay_f -= 10; // Дейсвия при длинном нажатии
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <vKey_Action+0x578>)
 8001ec6:	7adb      	ldrb	r3, [r3, #11]
 8001ec8:	3b0a      	subs	r3, #10
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <vKey_Action+0x578>)
 8001ece:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001ed0:	e1d4      	b.n	800227c <vKey_Action+0x8a0>
		}

		case press_short_Delay_f_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <vKey_Action+0x574>)
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	f107 010e 	add.w	r1, r7, #14
 8001eda:	2300      	movs	r3, #0
 8001edc:	2200      	movs	r2, #0
 8001ede:	f005 f957 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX) // Проверка на попадание в допустимый диапазон значений
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <vKey_Action+0x578>)
 8001ee4:	7adb      	ldrb	r3, [r3, #11]
 8001ee6:	2b45      	cmp	r3, #69	; 0x45
 8001ee8:	f200 81cb 	bhi.w	8002282 <vKey_Action+0x8a6>
			{
				WelderUnit.Delay_f++; // Исполнить
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <vKey_Action+0x578>)
 8001eee:	7adb      	ldrb	r3, [r3, #11]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <vKey_Action+0x578>)
 8001ef6:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001ef8:	e1c3      	b.n	8002282 <vKey_Action+0x8a6>
		}

		case press_long_Delay_f_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <vKey_Action+0x574>)
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	f107 010e 	add.w	r1, r7, #14
 8001f02:	2300      	movs	r3, #0
 8001f04:	2200      	movs	r2, #0
 8001f06:	f005 f943 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <vKey_Action+0x578>)
 8001f0c:	7adb      	ldrb	r3, [r3, #11]
 8001f0e:	2b3b      	cmp	r3, #59	; 0x3b
 8001f10:	f200 81ba 	bhi.w	8002288 <vKey_Action+0x8ac>
			{
				WelderUnit.Delay_f += 10; // Дейсвия при длинном нажатии
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <vKey_Action+0x578>)
 8001f16:	7adb      	ldrb	r3, [r3, #11]
 8001f18:	330a      	adds	r3, #10
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <vKey_Action+0x578>)
 8001f1e:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001f20:	e1b2      	b.n	8002288 <vKey_Action+0x8ac>
		}

		case press_short_Program_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <vKey_Action+0x574>)
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	f107 010e 	add.w	r1, r7, #14
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f005 f92f 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN) // Проверка на попадание в допустимый диапазон значений
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <vKey_Action+0x578>)
 8001f34:	899b      	ldrh	r3, [r3, #12]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	f240 81a9 	bls.w	800228e <vKey_Action+0x8b2>
			{
				WelderUnit.Program--; // Исполнить
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <vKey_Action+0x578>)
 8001f3e:	899b      	ldrh	r3, [r3, #12]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <vKey_Action+0x578>)
 8001f46:	819a      	strh	r2, [r3, #12]
				ReadProgramFromFlash2();
 8001f48:	f7ff f98e 	bl	8001268 <ReadProgramFromFlash2>
			}
			break;
 8001f4c:	e19f      	b.n	800228e <vKey_Action+0x8b2>
 8001f4e:	bf00      	nop
 8001f50:	20003538 	.word	0x20003538
 8001f54:	2000353c 	.word	0x2000353c
 8001f58:	20003d94 	.word	0x20003d94
		}

		case press_long_Program_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f5c:	4bbc      	ldr	r3, [pc, #752]	; (8002250 <vKey_Action+0x874>)
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	f107 010e 	add.w	r1, r7, #14
 8001f64:	2300      	movs	r3, #0
 8001f66:	2200      	movs	r2, #0
 8001f68:	f005 f912 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001f6c:	4bb9      	ldr	r3, [pc, #740]	; (8002254 <vKey_Action+0x878>)
 8001f6e:	899b      	ldrh	r3, [r3, #12]
 8001f70:	2b15      	cmp	r3, #21
 8001f72:	f240 818f 	bls.w	8002294 <vKey_Action+0x8b8>
			{
				WelderUnit.Program -= 20; // Дейсвия при длинном нажатии
 8001f76:	4bb7      	ldr	r3, [pc, #732]	; (8002254 <vKey_Action+0x878>)
 8001f78:	899b      	ldrh	r3, [r3, #12]
 8001f7a:	3b14      	subs	r3, #20
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4bb5      	ldr	r3, [pc, #724]	; (8002254 <vKey_Action+0x878>)
 8001f80:	819a      	strh	r2, [r3, #12]
			}
			break;
 8001f82:	e187      	b.n	8002294 <vKey_Action+0x8b8>
		}

		case press_short_Program_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 );
 8001f84:	4bb2      	ldr	r3, [pc, #712]	; (8002250 <vKey_Action+0x874>)
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	f107 010e 	add.w	r1, r7, #14
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f005 f8fe 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX) // Проверка на попадание в допустимый диапазон значений
 8001f94:	4baf      	ldr	r3, [pc, #700]	; (8002254 <vKey_Action+0x878>)
 8001f96:	899b      	ldrh	r3, [r3, #12]
 8001f98:	2b45      	cmp	r3, #69	; 0x45
 8001f9a:	f200 817e 	bhi.w	800229a <vKey_Action+0x8be>
			{
				WelderUnit.Program++; // Исполнить
 8001f9e:	4bad      	ldr	r3, [pc, #692]	; (8002254 <vKey_Action+0x878>)
 8001fa0:	899b      	ldrh	r3, [r3, #12]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	4bab      	ldr	r3, [pc, #684]	; (8002254 <vKey_Action+0x878>)
 8001fa8:	819a      	strh	r2, [r3, #12]
				ReadProgramFromFlash2(); //
 8001faa:	f7ff f95d 	bl	8001268 <ReadProgramFromFlash2>
				//SaveProgramToFlash2();
			}
			break;
 8001fae:	e174      	b.n	800229a <vKey_Action+0x8be>
		}

		case press_long_Program_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001fb0:	4ba7      	ldr	r3, [pc, #668]	; (8002250 <vKey_Action+0x874>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	f107 010e 	add.w	r1, r7, #14
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f005 f8e8 	bl	8007190 <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8001fc0:	4ba4      	ldr	r3, [pc, #656]	; (8002254 <vKey_Action+0x878>)
 8001fc2:	899b      	ldrh	r3, [r3, #12]
 8001fc4:	2b31      	cmp	r3, #49	; 0x31
 8001fc6:	f200 816b 	bhi.w	80022a0 <vKey_Action+0x8c4>
			{
				WelderUnit.Program += 20; // Дейсвия при длинном нажатии
 8001fca:	4ba2      	ldr	r3, [pc, #648]	; (8002254 <vKey_Action+0x878>)
 8001fcc:	899b      	ldrh	r3, [r3, #12]
 8001fce:	3314      	adds	r3, #20
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4ba0      	ldr	r3, [pc, #640]	; (8002254 <vKey_Action+0x878>)
 8001fd4:	819a      	strh	r2, [r3, #12]
			}
			break;
 8001fd6:	e163      	b.n	80022a0 <vKey_Action+0x8c4>
		}


		case press_short_Down:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001fd8:	4b9d      	ldr	r3, [pc, #628]	; (8002250 <vKey_Action+0x874>)
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	f107 010e 	add.w	r1, r7, #14
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f005 f8d4 	bl	8007190 <xQueueGenericSend>
					if (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) // Если задняя дверца закрыта, то разрешить опускание головки
 8001fe8:	4b9a      	ldr	r3, [pc, #616]	; (8002254 <vKey_Action+0x878>)
 8001fea:	7c1b      	ldrb	r3, [r3, #16]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8158 	beq.w	80022a6 <vKey_Action+0x8ca>
					{
						WELDER_HEAD_DOWN // Опустить сварочную головку
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2106      	movs	r1, #6
 8001ffa:	4897      	ldr	r0, [pc, #604]	; (8002258 <vKey_Action+0x87c>)
 8001ffc:	f002 fbb7 	bl	800476e <HAL_GPIO_WritePin>
						WelderUnit.IndicatorPanel.LEDsState |= LED_DOWN; // Индикация что головка опущена
 8002000:	4b94      	ldr	r3, [pc, #592]	; (8002254 <vKey_Action+0x878>)
 8002002:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b91      	ldr	r3, [pc, #580]	; (8002254 <vKey_Action+0x878>)
 800200e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						WelderUnit.IndicatorPanel.LEDsState &= ~LED_UP; // Индикация что головка опущена
 8002012:	4b90      	ldr	r3, [pc, #576]	; (8002254 <vKey_Action+0x878>)
 8002014:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002018:	f023 0308 	bic.w	r3, r3, #8
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b8d      	ldr	r3, [pc, #564]	; (8002254 <vKey_Action+0x878>)
 8002020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					}

					break;
 8002024:	e13f      	b.n	80022a6 <vKey_Action+0x8ca>
				}

				case press_long_Down:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002026:	4b8a      	ldr	r3, [pc, #552]	; (8002250 <vKey_Action+0x874>)
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	f107 010e 	add.w	r1, r7, #14
 800202e:	2300      	movs	r3, #0
 8002030:	2200      	movs	r2, #0
 8002032:	f005 f8ad 	bl	8007190 <xQueueGenericSend>
//					if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
//					{
//						WelderUnit.Speed -= 20; // Дейсвия при длинном нажатии
//					}
					break;
 8002036:	e140      	b.n	80022ba <vKey_Action+0x8de>
				}

				case press_short_Up:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002038:	4b85      	ldr	r3, [pc, #532]	; (8002250 <vKey_Action+0x874>)
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	f107 010e 	add.w	r1, r7, #14
 8002040:	2300      	movs	r3, #0
 8002042:	2200      	movs	r2, #0
 8002044:	f005 f8a4 	bl	8007190 <xQueueGenericSend>
					WELDER_HEAD_UP // Поднять сварочную головку
 8002048:	2201      	movs	r2, #1
 800204a:	2106      	movs	r1, #6
 800204c:	4882      	ldr	r0, [pc, #520]	; (8002258 <vKey_Action+0x87c>)
 800204e:	f002 fb8e 	bl	800476e <HAL_GPIO_WritePin>
					WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация что головка поднята
 8002052:	4b80      	ldr	r3, [pc, #512]	; (8002254 <vKey_Action+0x878>)
 8002054:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b7d      	ldr	r3, [pc, #500]	; (8002254 <vKey_Action+0x878>)
 8002060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN; // Индикация что головка поднята
 8002064:	4b7b      	ldr	r3, [pc, #492]	; (8002254 <vKey_Action+0x878>)
 8002066:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800206a:	f023 0304 	bic.w	r3, r3, #4
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b78      	ldr	r3, [pc, #480]	; (8002254 <vKey_Action+0x878>)
 8002072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					break;
 8002076:	e120      	b.n	80022ba <vKey_Action+0x8de>
				}

				case press_long_Up:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002078:	4b75      	ldr	r3, [pc, #468]	; (8002250 <vKey_Action+0x874>)
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	f107 010e 	add.w	r1, r7, #14
 8002080:	2300      	movs	r3, #0
 8002082:	2200      	movs	r2, #0
 8002084:	f005 f884 	bl	8007190 <xQueueGenericSend>
					if (WelderUnit.Speed < SPEED_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8002088:	4b72      	ldr	r3, [pc, #456]	; (8002254 <vKey_Action+0x878>)
 800208a:	88db      	ldrh	r3, [r3, #6]
 800208c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8002090:	4293      	cmp	r3, r2
 8002092:	f200 810b 	bhi.w	80022ac <vKey_Action+0x8d0>
					{
						WelderUnit.Speed += 20; // Дейсвия при длинном нажатии
 8002096:	4b6f      	ldr	r3, [pc, #444]	; (8002254 <vKey_Action+0x878>)
 8002098:	88db      	ldrh	r3, [r3, #6]
 800209a:	3314      	adds	r3, #20
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b6d      	ldr	r3, [pc, #436]	; (8002254 <vKey_Action+0x878>)
 80020a0:	80da      	strh	r2, [r3, #6]
					}
					break;
 80020a2:	e103      	b.n	80022ac <vKey_Action+0x8d0>



		case press_short_Parking:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80020a4:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <vKey_Action+0x874>)
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	f107 010e 	add.w	r1, r7, #14
 80020ac:	2300      	movs	r3, #0
 80020ae:	2200      	movs	r2, #0
 80020b0:	f005 f86e 	bl	8007190 <xQueueGenericSend>

			WelderUnit.Mode = WELDER_MODE_CALIBRATION; //Задать режим работы аппарата - калибровка
 80020b4:	4b67      	ldr	r3, [pc, #412]	; (8002254 <vKey_Action+0x878>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

			//WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отключении индикации режима АВТО
			WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING; // Отображение что выбран режим калибровки
 80020bc:	4b65      	ldr	r3, [pc, #404]	; (8002254 <vKey_Action+0x878>)
 80020be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b62      	ldr	r3, [pc, #392]	; (8002254 <vKey_Action+0x878>)
 80020ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



			break;
 80020ce:	e0f4      	b.n	80022ba <vKey_Action+0x8de>
		}

		case press_long_Parking:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80020d0:	4b5f      	ldr	r3, [pc, #380]	; (8002250 <vKey_Action+0x874>)
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	f107 010e 	add.w	r1, r7, #14
 80020d8:	2300      	movs	r3, #0
 80020da:	2200      	movs	r2, #0
 80020dc:	f005 f858 	bl	8007190 <xQueueGenericSend>
			WelderUnit.Xf -= 20; // Дейсвия при длинном нажатии
 80020e0:	4b5c      	ldr	r3, [pc, #368]	; (8002254 <vKey_Action+0x878>)
 80020e2:	885b      	ldrh	r3, [r3, #2]
 80020e4:	3b14      	subs	r3, #20
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b5a      	ldr	r3, [pc, #360]	; (8002254 <vKey_Action+0x878>)
 80020ea:	805a      	strh	r2, [r3, #2]

			break;
 80020ec:	e0e5      	b.n	80022ba <vKey_Action+0x8de>
		}

		case press_short_Auto:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 );
 80020ee:	4b58      	ldr	r3, [pc, #352]	; (8002250 <vKey_Action+0x874>)
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	f107 010e 	add.w	r1, r7, #14
 80020f6:	2300      	movs	r3, #0
 80020f8:	2200      	movs	r2, #0
 80020fa:	f005 f849 	bl	8007190 <xQueueGenericSend>


			if (WelderUnit.State & WELDER_STATE_CALIBRATED) // Если аппарат откалиброван, то разрешить включение режима АВТО
 80020fe:	4b55      	ldr	r3, [pc, #340]	; (8002254 <vKey_Action+0x878>)
 8002100:	7c1b      	ldrb	r3, [r3, #16]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80d3 	beq.w	80022b2 <vKey_Action+0x8d6>
			{
				if (WelderUnit.Mode != WELDER_MODE_AUTO) // Если уже не выбран режим АВТО, то включить его, иначе включить Ручной режим
 800210c:	4b51      	ldr	r3, [pc, #324]	; (8002254 <vKey_Action+0x878>)
 800210e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002112:	2b03      	cmp	r3, #3
 8002114:	d00d      	beq.n	8002132 <vKey_Action+0x756>
				{
					WelderUnit.Mode = WELDER_MODE_AUTO;
 8002116:	4b4f      	ldr	r3, [pc, #316]	; (8002254 <vKey_Action+0x878>)
 8002118:	2203      	movs	r2, #3
 800211a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					WelderUnit.IndicatorPanel.LEDsState |= LED_AUTO; // Отображение что выбран режим калибровки
 800211e:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <vKey_Action+0x878>)
 8002120:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b4a      	ldr	r3, [pc, #296]	; (8002254 <vKey_Action+0x878>)
 800212c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отображение что выбран режим калибровки
				}

			}

			break;
 8002130:	e0bf      	b.n	80022b2 <vKey_Action+0x8d6>
					WelderUnit.Mode = WELDER_MODE_MANUAL;
 8002132:	4b48      	ldr	r3, [pc, #288]	; (8002254 <vKey_Action+0x878>)
 8002134:	2202      	movs	r2, #2
 8002136:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отображение что выбран режим калибровки
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <vKey_Action+0x878>)
 800213c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b43      	ldr	r3, [pc, #268]	; (8002254 <vKey_Action+0x878>)
 8002148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			break;
 800214c:	e0b1      	b.n	80022b2 <vKey_Action+0x8d6>
		}

		case press_long_Auto:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 800214e:	4b40      	ldr	r3, [pc, #256]	; (8002250 <vKey_Action+0x874>)
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	f107 010e 	add.w	r1, r7, #14
 8002156:	2300      	movs	r3, #0
 8002158:	2200      	movs	r2, #0
 800215a:	f005 f819 	bl	8007190 <xQueueGenericSend>
			WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <vKey_Action+0x878>)
 8002160:	885b      	ldrh	r3, [r3, #2]
 8002162:	3314      	adds	r3, #20
 8002164:	b29a      	uxth	r2, r3
 8002166:	4b3b      	ldr	r3, [pc, #236]	; (8002254 <vKey_Action+0x878>)
 8002168:	805a      	strh	r2, [r3, #2]
			break;
 800216a:	e0a6      	b.n	80022ba <vKey_Action+0x8de>
		}

		case press_short_StartStop:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 800216c:	4b38      	ldr	r3, [pc, #224]	; (8002250 <vKey_Action+0x874>)
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	f107 010e 	add.w	r1, r7, #14
 8002174:	2300      	movs	r3, #0
 8002176:	2200      	movs	r2, #0
 8002178:	f005 f80a 	bl	8007190 <xQueueGenericSend>

			// Дейсвия при нажатии на кнопку СТАРТ/СТОП в зависимости от установленного режима работы аппарата
			switch(WelderUnit.Mode)
 800217c:	4b35      	ldr	r3, [pc, #212]	; (8002254 <vKey_Action+0x878>)
 800217e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002182:	2b03      	cmp	r3, #3
 8002184:	d01b      	beq.n	80021be <vKey_Action+0x7e2>
 8002186:	2b03      	cmp	r3, #3
 8002188:	f300 8096 	bgt.w	80022b8 <vKey_Action+0x8dc>
 800218c:	2b01      	cmp	r3, #1
 800218e:	d002      	beq.n	8002196 <vKey_Action+0x7ba>
 8002190:	2b02      	cmp	r3, #2
 8002192:	d009      	beq.n	80021a8 <vKey_Action+0x7cc>


//			Carriage_cmd = Cmd_CarriageGoTo;
//			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к

			break;
 8002194:	e090      	b.n	80022b8 <vKey_Action+0x8dc>
				xQueueSendToBack( qWelderCalibrated, &Cal, 0 ); // Начать калибровку
 8002196:	4b31      	ldr	r3, [pc, #196]	; (800225c <vKey_Action+0x880>)
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	f107 010d 	add.w	r1, r7, #13
 800219e:	2300      	movs	r3, #0
 80021a0:	2200      	movs	r2, #0
 80021a2:	f004 fff5 	bl	8007190 <xQueueGenericSend>
				break;
 80021a6:	e015      	b.n	80021d4 <vKey_Action+0x7f8>
				Run = Welder_Run;
 80021a8:	2303      	movs	r3, #3
 80021aa:	733b      	strb	r3, [r7, #12]
				xQueueSendToBack(qWelderRun, &Run, 0 );
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <vKey_Action+0x884>)
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	f107 010c 	add.w	r1, r7, #12
 80021b4:	2300      	movs	r3, #0
 80021b6:	2200      	movs	r2, #0
 80021b8:	f004 ffea 	bl	8007190 <xQueueGenericSend>
				break;
 80021bc:	e00a      	b.n	80021d4 <vKey_Action+0x7f8>
				Run = Welder_Run;
 80021be:	2303      	movs	r3, #3
 80021c0:	733b      	strb	r3, [r7, #12]
				xQueueSendToBack(qWelderRun, &Run, 0 );
 80021c2:	4b27      	ldr	r3, [pc, #156]	; (8002260 <vKey_Action+0x884>)
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	f107 010c 	add.w	r1, r7, #12
 80021ca:	2300      	movs	r3, #0
 80021cc:	2200      	movs	r2, #0
 80021ce:	f004 ffdf 	bl	8007190 <xQueueGenericSend>
				break;
 80021d2:	bf00      	nop
			break;
 80021d4:	e070      	b.n	80022b8 <vKey_Action+0x8dc>
		}

		case press_long_StartStop:
		{
			WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 80021d6:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <vKey_Action+0x878>)
 80021d8:	885b      	ldrh	r3, [r3, #2]
 80021da:	3314      	adds	r3, #20
 80021dc:	b29a      	uxth	r2, r3
 80021de:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <vKey_Action+0x878>)
 80021e0:	805a      	strh	r2, [r3, #2]
//			Key.StartStop_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
//			Key.StartStop_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
			break;
 80021e2:	e06a      	b.n	80022ba <vKey_Action+0x8de>

		// *********************************************************Комбинации клавишь*********************************************************

		case press_short_Program_L_and_R:
		{
			beep_mode_send = beep_long;
 80021e4:	2305      	movs	r3, #5
 80021e6:	73bb      	strb	r3, [r7, #14]
			xQueueSendToBack( qBeepMode, &beep_mode_send , 0 ); // Звук нажатия
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <vKey_Action+0x874>)
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	f107 010e 	add.w	r1, r7, #14
 80021f0:	2300      	movs	r3, #0
 80021f2:	2200      	movs	r2, #0
 80021f4:	f004 ffcc 	bl	8007190 <xQueueGenericSend>
			SaveProgramToFlash2();
 80021f8:	f7fe ffb2 	bl	8001160 <SaveProgramToFlash2>
			beep_mode_send = beep_click;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73bb      	strb	r3, [r7, #14]
			break;
 8002200:	e05b      	b.n	80022ba <vKey_Action+0x8de>
			break;
 8002202:	bf00      	nop
 8002204:	f7ff bbf4 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002208:	bf00      	nop
 800220a:	f7ff bbf1 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800220e:	bf00      	nop
 8002210:	f7ff bbee 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002214:	bf00      	nop
 8002216:	f7ff bbeb 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800221a:	bf00      	nop
 800221c:	f7ff bbe8 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002220:	bf00      	nop
 8002222:	f7ff bbe5 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002226:	bf00      	nop
 8002228:	f7ff bbe2 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800222c:	bf00      	nop
 800222e:	f7ff bbdf 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002232:	bf00      	nop
 8002234:	f7ff bbdc 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002238:	bf00      	nop
 800223a:	f7ff bbd9 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800223e:	bf00      	nop
 8002240:	f7ff bbd6 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002244:	bf00      	nop
 8002246:	f7ff bbd3 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800224a:	bf00      	nop
 800224c:	f7ff bbd0 	b.w	80019f0 <vKey_Action+0x14>
 8002250:	20003538 	.word	0x20003538
 8002254:	2000353c 	.word	0x2000353c
 8002258:	40011000 	.word	0x40011000
 800225c:	20003d8c 	.word	0x20003d8c
 8002260:	20003d88 	.word	0x20003d88
			break;
 8002264:	bf00      	nop
 8002266:	f7ff bbc3 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800226a:	bf00      	nop
 800226c:	f7ff bbc0 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002270:	bf00      	nop
 8002272:	f7ff bbbd 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002276:	bf00      	nop
 8002278:	f7ff bbba 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800227c:	bf00      	nop
 800227e:	f7ff bbb7 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002282:	bf00      	nop
 8002284:	f7ff bbb4 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002288:	bf00      	nop
 800228a:	f7ff bbb1 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800228e:	bf00      	nop
 8002290:	f7ff bbae 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002294:	bf00      	nop
 8002296:	f7ff bbab 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800229a:	bf00      	nop
 800229c:	f7ff bba8 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022a0:	bf00      	nop
 80022a2:	f7ff bba5 	b.w	80019f0 <vKey_Action+0x14>
					break;
 80022a6:	bf00      	nop
 80022a8:	f7ff bba2 	b.w	80019f0 <vKey_Action+0x14>
					break;
 80022ac:	bf00      	nop
 80022ae:	f7ff bb9f 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022b2:	bf00      	nop
 80022b4:	f7ff bb9c 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80022b8:	bf00      	nop
		xQueueReceive(qKeyPress, &KeyPressed, portMAX_DELAY ); // Ждать нажатия кнопки
 80022ba:	f7ff bb99 	b.w	80019f0 <vKey_Action+0x14>
 80022be:	bf00      	nop

080022c0 <vWelder_Run>:
	vTaskDelete(NULL);

}

void vWelder_Run(void *pvParameters)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

	uint8_t beep;

	for(;;)
	{
		xQueueReceive(qWelderRun, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 80022c8:	4b74      	ldr	r3, [pc, #464]	; (800249c <vWelder_Run+0x1dc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f107 010e 	add.w	r1, r7, #14
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	4618      	mov	r0, r3
 80022d6:	f005 f8b3 	bl	8007440 <xQueueReceive>

		if (lReceivedValue == Welder_Run && ((WelderUnit.State & 0x02) == 0x02) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) ) // Если пришла команда на начло варки и каретка откалибрована и задняя дверца закрыта
 80022da:	7bbb      	ldrb	r3, [r7, #14]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d1f3      	bne.n	80022c8 <vWelder_Run+0x8>
 80022e0:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <vWelder_Run+0x1e0>)
 80022e2:	7c1b      	ldrb	r3, [r3, #16]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ed      	beq.n	80022c8 <vWelder_Run+0x8>
 80022ec:	4b6c      	ldr	r3, [pc, #432]	; (80024a0 <vWelder_Run+0x1e0>)
 80022ee:	7c1b      	ldrb	r3, [r3, #16]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0e7      	beq.n	80022c8 <vWelder_Run+0x8>
		{
			beep = beep_1short;
 80022f8:	2302      	movs	r3, #2
 80022fa:	737b      	strb	r3, [r7, #13]
			xQueueSendToBack( qBeepMode, &beep, 0 ); // Звук нажатия
 80022fc:	4b69      	ldr	r3, [pc, #420]	; (80024a4 <vWelder_Run+0x1e4>)
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	f107 010d 	add.w	r1, r7, #13
 8002304:	2300      	movs	r3, #0
 8002306:	2200      	movs	r2, #0
 8002308:	f004 ff42 	bl	8007190 <xQueueGenericSend>

		if (WelderUnit.Position != WelderUnit.Xs) // Если текущая позиция каретки не равна стартовой позиции, то занять её
 800230c:	4b64      	ldr	r3, [pc, #400]	; (80024a0 <vWelder_Run+0x1e0>)
 800230e:	889a      	ldrh	r2, [r3, #4]
 8002310:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <vWelder_Run+0x1e0>)
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d01e      	beq.n	8002356 <vWelder_Run+0x96>
		{
			Carriage_cmd = Cmd_CarriageGoTo;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
			WelderUnit.GoTo = WelderUnit.Xs;
 800231c:	4b60      	ldr	r3, [pc, #384]	; (80024a0 <vWelder_Run+0x1e0>)
 800231e:	881a      	ldrh	r2, [r3, #0]
 8002320:	4b5f      	ldr	r3, [pc, #380]	; (80024a0 <vWelder_Run+0x1e0>)
 8002322:	811a      	strh	r2, [r3, #8]
			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идти к
 8002324:	4b60      	ldr	r3, [pc, #384]	; (80024a8 <vWelder_Run+0x1e8>)
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	f107 010f 	add.w	r1, r7, #15
 800232c:	2300      	movs	r3, #0
 800232e:	2200      	movs	r2, #0
 8002330:	f004 ff2e 	bl	8007190 <xQueueGenericSend>

			xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Без этого не работает. В очереди откуда то берутся данные
 8002334:	4b5d      	ldr	r3, [pc, #372]	; (80024ac <vWelder_Run+0x1ec>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f107 010e 	add.w	r1, r7, #14
 800233c:	2200      	movs	r2, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f005 f87e 	bl	8007440 <xQueueReceive>
			xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 8002344:	4b59      	ldr	r3, [pc, #356]	; (80024ac <vWelder_Run+0x1ec>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f107 010e 	add.w	r1, r7, #14
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	4618      	mov	r0, r3
 8002352:	f005 f875 	bl	8007440 <xQueueReceive>
		}

		if (/*(lReceivedValue == Carriage_Done) ||*/ (WelderUnit.Position == WelderUnit.Xs)) // Если каретка на заданной позиции
 8002356:	4b52      	ldr	r3, [pc, #328]	; (80024a0 <vWelder_Run+0x1e0>)
 8002358:	889a      	ldrh	r2, [r3, #4]
 800235a:	4b51      	ldr	r3, [pc, #324]	; (80024a0 <vWelder_Run+0x1e0>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d1b2      	bne.n	80022c8 <vWelder_Run+0x8>
		{


		WELDER_HEAD_DOWN // Опустить головку
 8002362:	2200      	movs	r2, #0
 8002364:	2106      	movs	r1, #6
 8002366:	4852      	ldr	r0, [pc, #328]	; (80024b0 <vWelder_Run+0x1f0>)
 8002368:	f002 fa01 	bl	800476e <HAL_GPIO_WritePin>
		WelderUnit.IndicatorPanel.LEDsState |= LED_DOWN; // Индикация опущенной сварочной головки
 800236c:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <vWelder_Run+0x1e0>)
 800236e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002372:	f043 0304 	orr.w	r3, r3, #4
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <vWelder_Run+0x1e0>)
 800237a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		WelderUnit.IndicatorPanel.LEDsState &= ~LED_UP;
 800237e:	4b48      	ldr	r3, [pc, #288]	; (80024a0 <vWelder_Run+0x1e0>)
 8002380:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002384:	f023 0308 	bic.w	r3, r3, #8
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4b45      	ldr	r3, [pc, #276]	; (80024a0 <vWelder_Run+0x1e0>)
 800238c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		vTaskDelay(100 / portTICK_RATE_MS); // Ожидание опускания головки
 8002390:	2064      	movs	r0, #100	; 0x64
 8002392:	f005 fd43 	bl	8007e1c <vTaskDelay>
		SYNC_ARC_ON // Подача дуги
 8002396:	2201      	movs	r2, #1
 8002398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800239c:	4845      	ldr	r0, [pc, #276]	; (80024b4 <vWelder_Run+0x1f4>)
 800239e:	f002 f9e6 	bl	800476e <HAL_GPIO_WritePin>

		vTaskDelay(WelderUnit.Delay_s * 100 / portTICK_RATE_MS); // Выдержка времени для заполнения точки начала сварки аргоном.
 80023a2:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <vWelder_Run+0x1e0>)
 80023a4:	7a9b      	ldrb	r3, [r3, #10]
 80023a6:	461a      	mov	r2, r3
 80023a8:	2364      	movs	r3, #100	; 0x64
 80023aa:	fb03 f302 	mul.w	r3, r3, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f005 fd34 	bl	8007e1c <vTaskDelay>

		WelderUnit.GoTo = WelderUnit.Xf; // Указание точки осановки головки
 80023b4:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <vWelder_Run+0x1e0>)
 80023b6:	885a      	ldrh	r2, [r3, #2]
 80023b8:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <vWelder_Run+0x1e0>)
 80023ba:	811a      	strh	r2, [r3, #8]
		Carriage_cmd = Cmd_CarriageGoTo; // Команда на начала движение каретки
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
		xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идти к
 80023c0:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <vWelder_Run+0x1e8>)
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	f107 010f 	add.w	r1, r7, #15
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	f004 fee0 	bl	8007190 <xQueueGenericSend>


		xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Без этого не работает. В очереди откуда то берутся данные
 80023d0:	4b36      	ldr	r3, [pc, #216]	; (80024ac <vWelder_Run+0x1ec>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f107 010e 	add.w	r1, r7, #14
 80023d8:	2200      	movs	r2, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f005 f830 	bl	8007440 <xQueueReceive>
		xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 80023e0:	4b32      	ldr	r3, [pc, #200]	; (80024ac <vWelder_Run+0x1ec>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f107 010e 	add.w	r1, r7, #14
 80023e8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ec:	4618      	mov	r0, r3
 80023ee:	f005 f827 	bl	8007440 <xQueueReceive>

		SYNC_ARC_OFF // Прекращение подачи дуги
 80023f2:	2200      	movs	r2, #0
 80023f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023f8:	482e      	ldr	r0, [pc, #184]	; (80024b4 <vWelder_Run+0x1f4>)
 80023fa:	f002 f9b8 	bl	800476e <HAL_GPIO_WritePin>

		vTaskDelay(WelderUnit.Delay_f * 100 / portTICK_RATE_MS); // Выдержка времени для заполнения точки останова сварки аргоном.
 80023fe:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <vWelder_Run+0x1e0>)
 8002400:	7adb      	ldrb	r3, [r3, #11]
 8002402:	461a      	mov	r2, r3
 8002404:	2364      	movs	r3, #100	; 0x64
 8002406:	fb03 f302 	mul.w	r3, r3, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f005 fd06 	bl	8007e1c <vTaskDelay>

		beep = beep_3short;
 8002410:	2304      	movs	r3, #4
 8002412:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack( qBeepMode, &beep, 0 ); // Звук окончания варки
 8002414:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <vWelder_Run+0x1e4>)
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	f107 010d 	add.w	r1, r7, #13
 800241c:	2300      	movs	r3, #0
 800241e:	2200      	movs	r2, #0
 8002420:	f004 feb6 	bl	8007190 <xQueueGenericSend>

		WELDER_HEAD_UP // Поднять головку
 8002424:	2201      	movs	r2, #1
 8002426:	2106      	movs	r1, #6
 8002428:	4821      	ldr	r0, [pc, #132]	; (80024b0 <vWelder_Run+0x1f0>)
 800242a:	f002 f9a0 	bl	800476e <HAL_GPIO_WritePin>
		vTaskDelay(100 / portTICK_RATE_MS); // Ожидание подъема головки
 800242e:	2064      	movs	r0, #100	; 0x64
 8002430:	f005 fcf4 	bl	8007e1c <vTaskDelay>

		WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 8002434:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <vWelder_Run+0x1e0>)
 8002436:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800243a:	f043 0308 	orr.w	r3, r3, #8
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <vWelder_Run+0x1e0>)
 8002442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 8002446:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <vWelder_Run+0x1e0>)
 8002448:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <vWelder_Run+0x1e0>)
 8002454:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		// Откат каретки

		if (WelderUnit.Position > KICKBACK)
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <vWelder_Run+0x1e0>)
 800245a:	889b      	ldrh	r3, [r3, #4]
 800245c:	2bc8      	cmp	r3, #200	; 0xc8
 800245e:	d906      	bls.n	800246e <vWelder_Run+0x1ae>
		{
			WelderUnit.GoTo = WelderUnit.Position -	KICKBACK;
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <vWelder_Run+0x1e0>)
 8002462:	889b      	ldrh	r3, [r3, #4]
 8002464:	3bc8      	subs	r3, #200	; 0xc8
 8002466:	b29a      	uxth	r2, r3
 8002468:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <vWelder_Run+0x1e0>)
 800246a:	811a      	strh	r2, [r3, #8]
 800246c:	e002      	b.n	8002474 <vWelder_Run+0x1b4>
		}
		else
		{
			WelderUnit.GoTo = 0;
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <vWelder_Run+0x1e0>)
 8002470:	2200      	movs	r2, #0
 8002472:	811a      	strh	r2, [r3, #8]
		}

		Carriage_cmd = Cmd_CarriageGoTo;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
		xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <vWelder_Run+0x1e8>)
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	f107 010f 	add.w	r1, r7, #15
 8002480:	2300      	movs	r3, #0
 8002482:	2200      	movs	r2, #0
 8002484:	f004 fe84 	bl	8007190 <xQueueGenericSend>
		xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <vWelder_Run+0x1ec>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f107 010e 	add.w	r1, r7, #14
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	4618      	mov	r0, r3
 8002496:	f004 ffd3 	bl	8007440 <xQueueReceive>
		xQueueReceive(qWelderRun, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 800249a:	e715      	b.n	80022c8 <vWelder_Run+0x8>
 800249c:	20003d88 	.word	0x20003d88
 80024a0:	2000353c 	.word	0x2000353c
 80024a4:	20003538 	.word	0x20003538
 80024a8:	20003d94 	.word	0x20003d94
 80024ac:	20003d80 	.word	0x20003d80
 80024b0:	40011000 	.word	0x40011000
 80024b4:	40010800 	.word	0x40010800

080024b8 <vCarriage_Calibration>:
}



void vCarriage_Calibration(void *pvParameters)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	uint8_t lReceivedValue;


	for(;;)
	{
		xQueueReceive(qWelderCalibrated, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 80024c0:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <vCarriage_Calibration+0xf0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f107 010f 	add.w	r1, r7, #15
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	4618      	mov	r0, r3
 80024ce:	f004 ffb7 	bl	8007440 <xQueueReceive>

		if (lReceivedValue == Calibrated)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d1f3      	bne.n	80024c0 <vCarriage_Calibration+0x8>
		{
			WELDER_HEAD_UP // Поднять головку
 80024d8:	2201      	movs	r2, #1
 80024da:	2106      	movs	r1, #6
 80024dc:	4833      	ldr	r0, [pc, #204]	; (80025ac <vCarriage_Calibration+0xf4>)
 80024de:	f002 f946 	bl	800476e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS); // Ожидание подъема головки
 80024e2:	2064      	movs	r0, #100	; 0x64
 80024e4:	f005 fc9a 	bl	8007e1c <vTaskDelay>

			WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <vCarriage_Calibration+0xf8>)
 80024ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024ee:	f043 0308 	orr.w	r3, r3, #8
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <vCarriage_Calibration+0xf8>)
 80024f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <vCarriage_Calibration+0xf8>)
 80024fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002500:	f023 0304 	bic.w	r3, r3, #4
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <vCarriage_Calibration+0xf8>)
 8002508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

			Carriage_Move(CALIBRATION_PHASE_SPEED_1, 0, 1); // Начать перемещение каретки в сторону концевика
 800250c:	2201      	movs	r2, #1
 800250e:	2100      	movs	r1, #0
 8002510:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002514:	f7fe fcb8 	bl	8000e88 <Carriage_Move>

			// Когда концевик замкнулся выдается семофор, что коретка дошла до самого начала

			// По какой-то причине при первой попытке взять 2-й семафор он берется (даже если не выдан). Потому семафор берется дважды
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY ); // Попытка взять семафор.
 8002518:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <vCarriage_Calibration+0xfc>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f04f 31ff 	mov.w	r1, #4294967295
 8002520:	4618      	mov	r0, r3
 8002522:	f005 f82f 	bl	8007584 <xQueueSemaphoreTake>
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
 8002526:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <vCarriage_Calibration+0xfc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f04f 31ff 	mov.w	r1, #4294967295
 800252e:	4618      	mov	r0, r3
 8002530:	f005 f828 	bl	8007584 <xQueueSemaphoreTake>

			Carriage_Move(0, 0, 1); // Стоп
 8002534:	2201      	movs	r2, #1
 8002536:	2100      	movs	r1, #0
 8002538:	2000      	movs	r0, #0
 800253a:	f7fe fca5 	bl	8000e88 <Carriage_Move>

			Carriage_Move(CALIBRATION_PHASE_SPEED_2, 1, 1); // Отъехать немного назад
 800253e:	2201      	movs	r2, #1
 8002540:	2101      	movs	r1, #1
 8002542:	20c8      	movs	r0, #200	; 0xc8
 8002544:	f7fe fca0 	bl	8000e88 <Carriage_Move>
			vTaskDelay(1000 / portTICK_RATE_MS);
 8002548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800254c:	f005 fc66 	bl	8007e1c <vTaskDelay>

			Carriage_Move(0, 0, 1); // Стоп
 8002550:	2201      	movs	r2, #1
 8002552:	2100      	movs	r1, #0
 8002554:	2000      	movs	r0, #0
 8002556:	f7fe fc97 	bl	8000e88 <Carriage_Move>

			vTaskDelay(100/ portTICK_RATE_MS);
 800255a:	2064      	movs	r0, #100	; 0x64
 800255c:	f005 fc5e 	bl	8007e1c <vTaskDelay>

			Carriage_Move(CALIBRATION_PHASE_SPEED_3, 0, 1); // Начать перемещение каретки в сторону концевика
 8002560:	2201      	movs	r2, #1
 8002562:	2100      	movs	r1, #0
 8002564:	2018      	movs	r0, #24
 8002566:	f7fe fc8f 	bl	8000e88 <Carriage_Move>

			// По какой-то причине при первой попытке взять 2-й семафор он берется (даже если не выдан). Потому семафор берется дважды
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY ); // Попытка взять семафор по прерыванию срабатывания концевика
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <vCarriage_Calibration+0xfc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f04f 31ff 	mov.w	r1, #4294967295
 8002572:	4618      	mov	r0, r3
 8002574:	f005 f806 	bl	8007584 <xQueueSemaphoreTake>
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <vCarriage_Calibration+0xfc>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	4618      	mov	r0, r3
 8002582:	f004 ffff 	bl	8007584 <xQueueSemaphoreTake>

			Carriage_Move(0, 0, 1); // Стоп
 8002586:	2201      	movs	r2, #1
 8002588:	2100      	movs	r1, #0
 800258a:	2000      	movs	r0, #0
 800258c:	f7fe fc7c 	bl	8000e88 <Carriage_Move>

			WelderUnit.State |= 1<<1; //1 бит - Откалибровано
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <vCarriage_Calibration+0xf8>)
 8002592:	7c1b      	ldrb	r3, [r3, #16]
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <vCarriage_Calibration+0xf8>)
 800259c:	741a      	strb	r2, [r3, #16]

			WelderUnit.Position = 0; // Позиция каретки
 800259e:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <vCarriage_Calibration+0xf8>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	809a      	strh	r2, [r3, #4]
		xQueueReceive(qWelderCalibrated, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 80025a4:	e78c      	b.n	80024c0 <vCarriage_Calibration+0x8>
 80025a6:	bf00      	nop
 80025a8:	20003d8c 	.word	0x20003d8c
 80025ac:	40011000 	.word	0x40011000
 80025b0:	2000353c 	.word	0x2000353c
 80025b4:	20003dc4 	.word	0x20003dc4

080025b8 <vCarriage_GoTo>:
	vTaskDelete(NULL);
}


void vCarriage_GoTo(void *pvParameters)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		//Попытка получить команду для передвижения каретки в нужную позицию.
		// Данные из очереди при этом не удаляются
		xQueuePeek(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 80025c0:	4b5d      	ldr	r3, [pc, #372]	; (8002738 <vCarriage_GoTo+0x180>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f107 010b 	add.w	r1, r7, #11
 80025c8:	f04f 32ff 	mov.w	r2, #4294967295
 80025cc:	4618      	mov	r0, r3
 80025ce:	f005 f8a1 	bl	8007714 <xQueuePeek>

		if (lReceivedValue == Cmd_CarriageGoTo)
 80025d2:	7afb      	ldrb	r3, [r7, #11]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d1f3      	bne.n	80025c0 <vCarriage_GoTo+0x8>
		{

		WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / (STEPS_PER_ROTATE * MICRO_STEP_DEV); // Вычисление текущей позиции каретки, мм
 80025d8:	4b58      	ldr	r3, [pc, #352]	; (800273c <vCarriage_GoTo+0x184>)
 80025da:	89db      	ldrh	r3, [r3, #14]
 80025dc:	461a      	mov	r2, r3
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ff74 	bl	80004d4 <__aeabi_i2d>
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	4b53      	ldr	r3, [pc, #332]	; (8002740 <vCarriage_GoTo+0x188>)
 80025f2:	f7fe f903 	bl	80007fc <__aeabi_ddiv>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe f9e5 	bl	80009cc <__aeabi_d2uiz>
 8002602:	4603      	mov	r3, r0
 8002604:	b29a      	uxth	r2, r3
 8002606:	4b4d      	ldr	r3, [pc, #308]	; (800273c <vCarriage_GoTo+0x184>)
 8002608:	809a      	strh	r2, [r3, #4]

		dX = WelderUnit.GoTo - WelderUnit.Position; // Определение сколько и в какую сторону нужно сдвинуть каретку
 800260a:	4b4c      	ldr	r3, [pc, #304]	; (800273c <vCarriage_GoTo+0x184>)
 800260c:	891b      	ldrh	r3, [r3, #8]
 800260e:	461a      	mov	r2, r3
 8002610:	4b4a      	ldr	r3, [pc, #296]	; (800273c <vCarriage_GoTo+0x184>)
 8002612:	889b      	ldrh	r3, [r3, #4]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	60fb      	str	r3, [r7, #12]

		// Если каретка на нужном месте, то остановить движение каретки, очищаем очередь и снова взврат к xQueuePeek, для ожидания след команды
		if (dX == 0)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11e      	bne.n	800265c <vCarriage_GoTo+0xa4>
		{
			Carriage_Move(0, 1, 1); // стоп
 800261e:	2201      	movs	r2, #1
 8002620:	2101      	movs	r1, #1
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe fc30 	bl	8000e88 <Carriage_Move>
			WelderUnit.State &= ~0x01;
 8002628:	4b44      	ldr	r3, [pc, #272]	; (800273c <vCarriage_GoTo+0x184>)
 800262a:	7c1b      	ldrb	r3, [r3, #16]
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b42      	ldr	r3, [pc, #264]	; (800273c <vCarriage_GoTo+0x184>)
 8002634:	741a      	strb	r2, [r3, #16]
			SendVal = Carriage_Done;
 8002636:	2302      	movs	r3, #2
 8002638:	72bb      	strb	r3, [r7, #10]
			xQueueSendToBack( qGoToResponse, &SendVal, 0 );
 800263a:	4b42      	ldr	r3, [pc, #264]	; (8002744 <vCarriage_GoTo+0x18c>)
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	f107 010a 	add.w	r1, r7, #10
 8002642:	2300      	movs	r3, #0
 8002644:	2200      	movs	r2, #0
 8002646:	f004 fda3 	bl	8007190 <xQueueGenericSend>

			//xQueueSendToBack( qDebug, &SendVal, 0 );

			xQueueReceive(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 800264a:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <vCarriage_GoTo+0x180>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f107 010b 	add.w	r1, r7, #11
 8002652:	f04f 32ff 	mov.w	r2, #4294967295
 8002656:	4618      	mov	r0, r3
 8002658:	f004 fef2 	bl	8007440 <xQueueReceive>

		}

		if (dX > 0) // Если двигать в сторону концевика
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	dd20      	ble.n	80026a4 <vCarriage_GoTo+0xec>
		{

			if (WelderUnit.Position <= WelderUnit.GoTo && !(WelderUnit.State & 0x01)) // Если позиция не достигнута и каретка находится не в движении, то начать перемещение
 8002662:	4b36      	ldr	r3, [pc, #216]	; (800273c <vCarriage_GoTo+0x184>)
 8002664:	889a      	ldrh	r2, [r3, #4]
 8002666:	4b35      	ldr	r3, [pc, #212]	; (800273c <vCarriage_GoTo+0x184>)
 8002668:	891b      	ldrh	r3, [r3, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	d81a      	bhi.n	80026a4 <vCarriage_GoTo+0xec>
 800266e:	4b33      	ldr	r3, [pc, #204]	; (800273c <vCarriage_GoTo+0x184>)
 8002670:	7c1b      	ldrb	r3, [r3, #16]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d114      	bne.n	80026a4 <vCarriage_GoTo+0xec>
			{
				Carriage_Move(WelderUnit.Speed, 1, 1); // Начать перемещение
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <vCarriage_GoTo+0x184>)
 800267c:	88db      	ldrh	r3, [r3, #6]
 800267e:	2201      	movs	r2, #1
 8002680:	2101      	movs	r1, #1
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fc00 	bl	8000e88 <Carriage_Move>
				WelderUnit.State |= 0x01; // Статус - каретка в движении
 8002688:	4b2c      	ldr	r3, [pc, #176]	; (800273c <vCarriage_GoTo+0x184>)
 800268a:	7c1b      	ldrb	r3, [r3, #16]
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4b2a      	ldr	r3, [pc, #168]	; (800273c <vCarriage_GoTo+0x184>)
 8002694:	741a      	strb	r2, [r3, #16]
				WelderUnit.State &= ~0x04; // Статус картека движется на встречу концевику
 8002696:	4b29      	ldr	r3, [pc, #164]	; (800273c <vCarriage_GoTo+0x184>)
 8002698:	7c1b      	ldrb	r3, [r3, #16]
 800269a:	f023 0304 	bic.w	r3, r3, #4
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	4b26      	ldr	r3, [pc, #152]	; (800273c <vCarriage_GoTo+0x184>)
 80026a2:	741a      	strb	r2, [r3, #16]
			}
		}

		if (dX < 0) // Если нужно двигать от концевика
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	da20      	bge.n	80026ec <vCarriage_GoTo+0x134>
		{
			if (WelderUnit.Position >= WelderUnit.GoTo && !(WelderUnit.State & 0x01)) // Если позиция не достигнута и каретка находится не в движении, то начать перемещение
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <vCarriage_GoTo+0x184>)
 80026ac:	889a      	ldrh	r2, [r3, #4]
 80026ae:	4b23      	ldr	r3, [pc, #140]	; (800273c <vCarriage_GoTo+0x184>)
 80026b0:	891b      	ldrh	r3, [r3, #8]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d31a      	bcc.n	80026ec <vCarriage_GoTo+0x134>
 80026b6:	4b21      	ldr	r3, [pc, #132]	; (800273c <vCarriage_GoTo+0x184>)
 80026b8:	7c1b      	ldrb	r3, [r3, #16]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d114      	bne.n	80026ec <vCarriage_GoTo+0x134>
			{
				Carriage_Move(WelderUnit.Speed, 0, 1); // Начать перемещение
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <vCarriage_GoTo+0x184>)
 80026c4:	88db      	ldrh	r3, [r3, #6]
 80026c6:	2201      	movs	r2, #1
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fbdc 	bl	8000e88 <Carriage_Move>
				WelderUnit.State |= 0x01; // Статус - каретка в движении
 80026d0:	4b1a      	ldr	r3, [pc, #104]	; (800273c <vCarriage_GoTo+0x184>)
 80026d2:	7c1b      	ldrb	r3, [r3, #16]
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <vCarriage_GoTo+0x184>)
 80026dc:	741a      	strb	r2, [r3, #16]
				WelderUnit.State |= 0x04; // Статус картека движется от концевика
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <vCarriage_GoTo+0x184>)
 80026e0:	7c1b      	ldrb	r3, [r3, #16]
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <vCarriage_GoTo+0x184>)
 80026ea:	741a      	strb	r2, [r3, #16]
			}
		}

		if (xSemaphoreTake(xSemaphore_StepCount, (500 / portTICK_RATE_MS)) == pdTRUE) // Если через 100 мС семафор так и не получен, то считать что двигатель осановлен
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <vCarriage_GoTo+0x190>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80026f4:	4618      	mov	r0, r3
 80026f6:	f004 ff45 	bl	8007584 <xQueueSemaphoreTake>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f47f af5f 	bne.w	80025c0 <vCarriage_GoTo+0x8>
		//xSemaphoreTake(xSemaphore_StepCount, portMAX_DELAY );
		{
			if (!(WelderUnit.State & 0x04)) // Если каретка движется на встречу концевику, то инкрментирование Steps на каждый шаг ШД
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <vCarriage_GoTo+0x184>)
 8002704:	7c1b      	ldrb	r3, [r3, #16]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	d105      	bne.n	800271a <vCarriage_GoTo+0x162>
				{
					WelderUnit.Steps++;
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <vCarriage_GoTo+0x184>)
 8002710:	89db      	ldrh	r3, [r3, #14]
 8002712:	3301      	adds	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <vCarriage_GoTo+0x184>)
 8002718:	81da      	strh	r2, [r3, #14]
				}

				if (WelderUnit.State & 0x04) // Если каретка движется от концевика, то декрементирование Steps на каждый шаг ШД
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <vCarriage_GoTo+0x184>)
 800271c:	7c1b      	ldrb	r3, [r3, #16]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	f43f af4c 	beq.w	80025c0 <vCarriage_GoTo+0x8>
				{
						WelderUnit.Steps--;
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <vCarriage_GoTo+0x184>)
 800272a:	89db      	ldrh	r3, [r3, #14]
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	4b02      	ldr	r3, [pc, #8]	; (800273c <vCarriage_GoTo+0x184>)
 8002732:	81da      	strh	r2, [r3, #14]
		xQueuePeek(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 8002734:	e744      	b.n	80025c0 <vCarriage_GoTo+0x8>
 8002736:	bf00      	nop
 8002738:	20003d94 	.word	0x20003d94
 800273c:	2000353c 	.word	0x2000353c
 8002740:	40890000 	.word	0x40890000
 8002744:	20003d80 	.word	0x20003d80
 8002748:	20003560 	.word	0x20003560

0800274c <vKeyScan>:
	}
	vTaskDelete(NULL);
}

void vKeyScan(void *pvParameters)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]


	uint8_t nKeyPressed; // Передача команды о том какая кнопка или комбинация кнопок нажаты
	//portBASE_TYPE xStatus;

	vTaskDelay(100 / portTICK_RATE_MS);
 8002754:	2064      	movs	r0, #100	; 0x64
 8002756:	f005 fb61 	bl	8007e1c <vTaskDelay>

	for(;;)
	{
		PCB_KeyScan();
 800275a:	f7fe fbdd 	bl	8000f18 <PCB_KeyScan>
		PCB_OutputControl();
 800275e:	f7fe fc45 	bl	8000fec <PCB_OutputControl>
		//PCB_InputsScan();

		if (WelderUnit.IndicatorPanel.KeyState[0] == 128) // ВЛЕВО: [0], "-" - 128, "+" - 64, , STLED №5;
 8002762:	4ba9      	ldr	r3, [pc, #676]	; (8002a08 <vKeyScan+0x2bc>)
 8002764:	7f5b      	ldrb	r3, [r3, #29]
 8002766:	2b80      	cmp	r3, #128	; 0x80
 8002768:	d12f      	bne.n	80027ca <vKeyScan+0x7e>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xs_ShortPress_L > CNT_KEY_SHORT && Key.Xs_ShortPress_L != CNT_KEY_SHORT + 2)
 800276a:	4ba8      	ldr	r3, [pc, #672]	; (8002a0c <vKeyScan+0x2c0>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b04      	cmp	r3, #4
 8002770:	d906      	bls.n	8002780 <vKeyScan+0x34>
 8002772:	4ba6      	ldr	r3, [pc, #664]	; (8002a0c <vKeyScan+0x2c0>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b06      	cmp	r3, #6
 8002778:	d002      	beq.n	8002780 <vKeyScan+0x34>
			{
//				nKeyPressed = press_short_Xs_L;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Xs_ShortPress_L = CNT_KEY_SHORT + 3; // Для ожидания отпускания клавиши
 800277a:	4ba4      	ldr	r3, [pc, #656]	; (8002a0c <vKeyScan+0x2c0>)
 800277c:	2207      	movs	r2, #7
 800277e:	701a      	strb	r2, [r3, #0]
			}

			if (Key.Xs_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002780:	4ba2      	ldr	r3, [pc, #648]	; (8002a0c <vKeyScan+0x2c0>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b06      	cmp	r3, #6
 8002786:	d005      	beq.n	8002794 <vKeyScan+0x48>
			{
				Key.Xs_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002788:	4ba0      	ldr	r3, [pc, #640]	; (8002a0c <vKeyScan+0x2c0>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b9e      	ldr	r3, [pc, #632]	; (8002a0c <vKeyScan+0x2c0>)
 8002792:	701a      	strb	r2, [r3, #0]
			}


			Key.Xs_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002794:	4b9d      	ldr	r3, [pc, #628]	; (8002a0c <vKeyScan+0x2c0>)
 8002796:	789b      	ldrb	r3, [r3, #2]
 8002798:	3301      	adds	r3, #1
 800279a:	b2da      	uxtb	r2, r3
 800279c:	4b9b      	ldr	r3, [pc, #620]	; (8002a0c <vKeyScan+0x2c0>)
 800279e:	709a      	strb	r2, [r3, #2]
			if (Key.Xs_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80027a0:	4b9a      	ldr	r3, [pc, #616]	; (8002a0c <vKeyScan+0x2c0>)
 80027a2:	789b      	ldrb	r3, [r3, #2]
 80027a4:	2b32      	cmp	r3, #50	; 0x32
 80027a6:	d924      	bls.n	80027f2 <vKeyScan+0xa6>
			{
				nKeyPressed = press_long_Xs_L;
 80027a8:	2302      	movs	r3, #2
 80027aa:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80027ac:	4b98      	ldr	r3, [pc, #608]	; (8002a10 <vKeyScan+0x2c4>)
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	f107 010f 	add.w	r1, r7, #15
 80027b4:	2300      	movs	r3, #0
 80027b6:	2200      	movs	r2, #0
 80027b8:	f004 fcea 	bl	8007190 <xQueueGenericSend>


				Key.Xs_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80027bc:	4b93      	ldr	r3, [pc, #588]	; (8002a0c <vKeyScan+0x2c0>)
 80027be:	2206      	movs	r2, #6
 80027c0:	701a      	strb	r2, [r3, #0]
				Key.Xs_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80027c2:	4b92      	ldr	r3, [pc, #584]	; (8002a0c <vKeyScan+0x2c0>)
 80027c4:	2225      	movs	r2, #37	; 0x25
 80027c6:	709a      	strb	r2, [r3, #2]
 80027c8:	e013      	b.n	80027f2 <vKeyScan+0xa6>
		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{


			if (Key.Xs_ShortPress_L >= CNT_KEY_SHORT + 3)
 80027ca:	4b90      	ldr	r3, [pc, #576]	; (8002a0c <vKeyScan+0x2c0>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d909      	bls.n	80027e6 <vKeyScan+0x9a>
			{
				nKeyPressed = press_short_Xs_L;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80027d6:	4b8e      	ldr	r3, [pc, #568]	; (8002a10 <vKeyScan+0x2c4>)
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	f107 010f 	add.w	r1, r7, #15
 80027de:	2300      	movs	r3, #0
 80027e0:	2200      	movs	r2, #0
 80027e2:	f004 fcd5 	bl	8007190 <xQueueGenericSend>
			}

			Key.Xs_ShortPress_L = 0;
 80027e6:	4b89      	ldr	r3, [pc, #548]	; (8002a0c <vKeyScan+0x2c0>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
			Key.Xs_LongPress_L = 0;
 80027ec:	4b87      	ldr	r3, [pc, #540]	; (8002a0c <vKeyScan+0x2c0>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	709a      	strb	r2, [r3, #2]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 64) // Если есть факт нажатия кнопки
 80027f2:	4b85      	ldr	r3, [pc, #532]	; (8002a08 <vKeyScan+0x2bc>)
 80027f4:	7f5b      	ldrb	r3, [r3, #29]
 80027f6:	2b40      	cmp	r3, #64	; 0x40
 80027f8:	d139      	bne.n	800286e <vKeyScan+0x122>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xs_ShortPress_R > CNT_KEY_SHORT && Key.Xs_ShortPress_R != CNT_KEY_SHORT + 2)
 80027fa:	4b84      	ldr	r3, [pc, #528]	; (8002a0c <vKeyScan+0x2c0>)
 80027fc:	785b      	ldrb	r3, [r3, #1]
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d910      	bls.n	8002824 <vKeyScan+0xd8>
 8002802:	4b82      	ldr	r3, [pc, #520]	; (8002a0c <vKeyScan+0x2c0>)
 8002804:	785b      	ldrb	r3, [r3, #1]
 8002806:	2b06      	cmp	r3, #6
 8002808:	d00c      	beq.n	8002824 <vKeyScan+0xd8>
			{

				nKeyPressed = press_short_Xs_R;
 800280a:	2303      	movs	r3, #3
 800280c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800280e:	4b80      	ldr	r3, [pc, #512]	; (8002a10 <vKeyScan+0x2c4>)
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	f107 010f 	add.w	r1, r7, #15
 8002816:	2300      	movs	r3, #0
 8002818:	2200      	movs	r2, #0
 800281a:	f004 fcb9 	bl	8007190 <xQueueGenericSend>

				Key.Xs_ShortPress_R = 0; // Сброс счетика выдержки
 800281e:	4b7b      	ldr	r3, [pc, #492]	; (8002a0c <vKeyScan+0x2c0>)
 8002820:	2200      	movs	r2, #0
 8002822:	705a      	strb	r2, [r3, #1]
			}

			if (Key.Xs_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002824:	4b79      	ldr	r3, [pc, #484]	; (8002a0c <vKeyScan+0x2c0>)
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	2b06      	cmp	r3, #6
 800282a:	d005      	beq.n	8002838 <vKeyScan+0xec>
			{
				Key.Xs_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 800282c:	4b77      	ldr	r3, [pc, #476]	; (8002a0c <vKeyScan+0x2c0>)
 800282e:	785b      	ldrb	r3, [r3, #1]
 8002830:	3301      	adds	r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b75      	ldr	r3, [pc, #468]	; (8002a0c <vKeyScan+0x2c0>)
 8002836:	705a      	strb	r2, [r3, #1]
			}


			Key.Xs_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002838:	4b74      	ldr	r3, [pc, #464]	; (8002a0c <vKeyScan+0x2c0>)
 800283a:	78db      	ldrb	r3, [r3, #3]
 800283c:	3301      	adds	r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	4b72      	ldr	r3, [pc, #456]	; (8002a0c <vKeyScan+0x2c0>)
 8002842:	70da      	strb	r2, [r3, #3]
			if (Key.Xs_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002844:	4b71      	ldr	r3, [pc, #452]	; (8002a0c <vKeyScan+0x2c0>)
 8002846:	78db      	ldrb	r3, [r3, #3]
 8002848:	2b32      	cmp	r3, #50	; 0x32
 800284a:	d916      	bls.n	800287a <vKeyScan+0x12e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xs_R;
 800284c:	2304      	movs	r3, #4
 800284e:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002850:	4b6f      	ldr	r3, [pc, #444]	; (8002a10 <vKeyScan+0x2c4>)
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	f107 010f 	add.w	r1, r7, #15
 8002858:	2300      	movs	r3, #0
 800285a:	2200      	movs	r2, #0
 800285c:	f004 fc98 	bl	8007190 <xQueueGenericSend>

				Key.Xs_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002860:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <vKeyScan+0x2c0>)
 8002862:	2206      	movs	r2, #6
 8002864:	705a      	strb	r2, [r3, #1]
				Key.Xs_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002866:	4b69      	ldr	r3, [pc, #420]	; (8002a0c <vKeyScan+0x2c0>)
 8002868:	2225      	movs	r2, #37	; 0x25
 800286a:	70da      	strb	r2, [r3, #3]
 800286c:	e005      	b.n	800287a <vKeyScan+0x12e>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xs_ShortPress_R = 0;
 800286e:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <vKeyScan+0x2c0>)
 8002870:	2200      	movs	r2, #0
 8002872:	705a      	strb	r2, [r3, #1]
			Key.Xs_LongPress_R = 0;
 8002874:	4b65      	ldr	r3, [pc, #404]	; (8002a0c <vKeyScan+0x2c0>)
 8002876:	2200      	movs	r2, #0
 8002878:	70da      	strb	r2, [r3, #3]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 16) // ВПРАВО: [0], "-" - 16, "+" - 32, , STLED №5;
 800287a:	4b63      	ldr	r3, [pc, #396]	; (8002a08 <vKeyScan+0x2bc>)
 800287c:	7f5b      	ldrb	r3, [r3, #29]
 800287e:	2b10      	cmp	r3, #16
 8002880:	d139      	bne.n	80028f6 <vKeyScan+0x1aa>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xf_ShortPress_L > CNT_KEY_SHORT && Key.Xf_ShortPress_L != CNT_KEY_SHORT + 2)
 8002882:	4b62      	ldr	r3, [pc, #392]	; (8002a0c <vKeyScan+0x2c0>)
 8002884:	791b      	ldrb	r3, [r3, #4]
 8002886:	2b04      	cmp	r3, #4
 8002888:	d910      	bls.n	80028ac <vKeyScan+0x160>
 800288a:	4b60      	ldr	r3, [pc, #384]	; (8002a0c <vKeyScan+0x2c0>)
 800288c:	791b      	ldrb	r3, [r3, #4]
 800288e:	2b06      	cmp	r3, #6
 8002890:	d00c      	beq.n	80028ac <vKeyScan+0x160>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Xf_L;
 8002892:	2305      	movs	r3, #5
 8002894:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002896:	4b5e      	ldr	r3, [pc, #376]	; (8002a10 <vKeyScan+0x2c4>)
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	f107 010f 	add.w	r1, r7, #15
 800289e:	2300      	movs	r3, #0
 80028a0:	2200      	movs	r2, #0
 80028a2:	f004 fc75 	bl	8007190 <xQueueGenericSend>


				Key.Xf_ShortPress_L = 0; // Сброс счетика выдержки
 80028a6:	4b59      	ldr	r3, [pc, #356]	; (8002a0c <vKeyScan+0x2c0>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	711a      	strb	r2, [r3, #4]
			}

			if (Key.Xf_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80028ac:	4b57      	ldr	r3, [pc, #348]	; (8002a0c <vKeyScan+0x2c0>)
 80028ae:	791b      	ldrb	r3, [r3, #4]
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d005      	beq.n	80028c0 <vKeyScan+0x174>
			{
				Key.Xf_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 80028b4:	4b55      	ldr	r3, [pc, #340]	; (8002a0c <vKeyScan+0x2c0>)
 80028b6:	791b      	ldrb	r3, [r3, #4]
 80028b8:	3301      	adds	r3, #1
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	4b53      	ldr	r3, [pc, #332]	; (8002a0c <vKeyScan+0x2c0>)
 80028be:	711a      	strb	r2, [r3, #4]
			}


			Key.Xf_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 80028c0:	4b52      	ldr	r3, [pc, #328]	; (8002a0c <vKeyScan+0x2c0>)
 80028c2:	799b      	ldrb	r3, [r3, #6]
 80028c4:	3301      	adds	r3, #1
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	4b50      	ldr	r3, [pc, #320]	; (8002a0c <vKeyScan+0x2c0>)
 80028ca:	719a      	strb	r2, [r3, #6]
			if (Key.Xf_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80028cc:	4b4f      	ldr	r3, [pc, #316]	; (8002a0c <vKeyScan+0x2c0>)
 80028ce:	799b      	ldrb	r3, [r3, #6]
 80028d0:	2b32      	cmp	r3, #50	; 0x32
 80028d2:	d916      	bls.n	8002902 <vKeyScan+0x1b6>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xf_L;
 80028d4:	2306      	movs	r3, #6
 80028d6:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80028d8:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <vKeyScan+0x2c4>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	f107 010f 	add.w	r1, r7, #15
 80028e0:	2300      	movs	r3, #0
 80028e2:	2200      	movs	r2, #0
 80028e4:	f004 fc54 	bl	8007190 <xQueueGenericSend>


				Key.Xf_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80028e8:	4b48      	ldr	r3, [pc, #288]	; (8002a0c <vKeyScan+0x2c0>)
 80028ea:	2206      	movs	r2, #6
 80028ec:	711a      	strb	r2, [r3, #4]
				Key.Xf_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80028ee:	4b47      	ldr	r3, [pc, #284]	; (8002a0c <vKeyScan+0x2c0>)
 80028f0:	2225      	movs	r2, #37	; 0x25
 80028f2:	719a      	strb	r2, [r3, #6]
 80028f4:	e005      	b.n	8002902 <vKeyScan+0x1b6>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xf_ShortPress_L = 0;
 80028f6:	4b45      	ldr	r3, [pc, #276]	; (8002a0c <vKeyScan+0x2c0>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	711a      	strb	r2, [r3, #4]
			Key.Xf_LongPress_L = 0;
 80028fc:	4b43      	ldr	r3, [pc, #268]	; (8002a0c <vKeyScan+0x2c0>)
 80028fe:	2200      	movs	r2, #0
 8002900:	719a      	strb	r2, [r3, #6]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 32)
 8002902:	4b41      	ldr	r3, [pc, #260]	; (8002a08 <vKeyScan+0x2bc>)
 8002904:	7f5b      	ldrb	r3, [r3, #29]
 8002906:	2b20      	cmp	r3, #32
 8002908:	d139      	bne.n	800297e <vKeyScan+0x232>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xf_ShortPress_R > CNT_KEY_SHORT && Key.Xf_ShortPress_R != CNT_KEY_SHORT + 2)
 800290a:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <vKeyScan+0x2c0>)
 800290c:	795b      	ldrb	r3, [r3, #5]
 800290e:	2b04      	cmp	r3, #4
 8002910:	d910      	bls.n	8002934 <vKeyScan+0x1e8>
 8002912:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <vKeyScan+0x2c0>)
 8002914:	795b      	ldrb	r3, [r3, #5]
 8002916:	2b06      	cmp	r3, #6
 8002918:	d00c      	beq.n	8002934 <vKeyScan+0x1e8>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Xf_R;
 800291a:	2307      	movs	r3, #7
 800291c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800291e:	4b3c      	ldr	r3, [pc, #240]	; (8002a10 <vKeyScan+0x2c4>)
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	f107 010f 	add.w	r1, r7, #15
 8002926:	2300      	movs	r3, #0
 8002928:	2200      	movs	r2, #0
 800292a:	f004 fc31 	bl	8007190 <xQueueGenericSend>


				Key.Xf_ShortPress_R = 0; // Сброс счетика выдержки
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <vKeyScan+0x2c0>)
 8002930:	2200      	movs	r2, #0
 8002932:	715a      	strb	r2, [r3, #5]
			}

			if (Key.Xf_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <vKeyScan+0x2c0>)
 8002936:	795b      	ldrb	r3, [r3, #5]
 8002938:	2b06      	cmp	r3, #6
 800293a:	d005      	beq.n	8002948 <vKeyScan+0x1fc>
			{
				Key.Xf_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 800293c:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <vKeyScan+0x2c0>)
 800293e:	795b      	ldrb	r3, [r3, #5]
 8002940:	3301      	adds	r3, #1
 8002942:	b2da      	uxtb	r2, r3
 8002944:	4b31      	ldr	r3, [pc, #196]	; (8002a0c <vKeyScan+0x2c0>)
 8002946:	715a      	strb	r2, [r3, #5]
			}


			Key.Xf_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002948:	4b30      	ldr	r3, [pc, #192]	; (8002a0c <vKeyScan+0x2c0>)
 800294a:	79db      	ldrb	r3, [r3, #7]
 800294c:	3301      	adds	r3, #1
 800294e:	b2da      	uxtb	r2, r3
 8002950:	4b2e      	ldr	r3, [pc, #184]	; (8002a0c <vKeyScan+0x2c0>)
 8002952:	71da      	strb	r2, [r3, #7]
			if (Key.Xf_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002954:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <vKeyScan+0x2c0>)
 8002956:	79db      	ldrb	r3, [r3, #7]
 8002958:	2b32      	cmp	r3, #50	; 0x32
 800295a:	d916      	bls.n	800298a <vKeyScan+0x23e>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xf_R;
 800295c:	2308      	movs	r3, #8
 800295e:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <vKeyScan+0x2c4>)
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	f107 010f 	add.w	r1, r7, #15
 8002968:	2300      	movs	r3, #0
 800296a:	2200      	movs	r2, #0
 800296c:	f004 fc10 	bl	8007190 <xQueueGenericSend>

				Key.Xf_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002970:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <vKeyScan+0x2c0>)
 8002972:	2206      	movs	r2, #6
 8002974:	715a      	strb	r2, [r3, #5]
				Key.Xf_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002976:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <vKeyScan+0x2c0>)
 8002978:	2225      	movs	r2, #37	; 0x25
 800297a:	71da      	strb	r2, [r3, #7]
 800297c:	e005      	b.n	800298a <vKeyScan+0x23e>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xf_ShortPress_R = 0;
 800297e:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <vKeyScan+0x2c0>)
 8002980:	2200      	movs	r2, #0
 8002982:	715a      	strb	r2, [r3, #5]
			Key.Xf_LongPress_R = 0;
 8002984:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <vKeyScan+0x2c0>)
 8002986:	2200      	movs	r2, #0
 8002988:	71da      	strb	r2, [r3, #7]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 8) //ЗАДЕРЖКА (Delay_s): [0], "-" - 8, "+" - 4, , STLED №5;
 800298a:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <vKeyScan+0x2bc>)
 800298c:	7f5b      	ldrb	r3, [r3, #29]
 800298e:	2b08      	cmp	r3, #8
 8002990:	d140      	bne.n	8002a14 <vKeyScan+0x2c8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_s_ShortPress_L > CNT_KEY_SHORT && Key.Delay_s_ShortPress_L != CNT_KEY_SHORT + 2)
 8002992:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <vKeyScan+0x2c0>)
 8002994:	7a1b      	ldrb	r3, [r3, #8]
 8002996:	2b04      	cmp	r3, #4
 8002998:	d910      	bls.n	80029bc <vKeyScan+0x270>
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <vKeyScan+0x2c0>)
 800299c:	7a1b      	ldrb	r3, [r3, #8]
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d00c      	beq.n	80029bc <vKeyScan+0x270>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_s_L;
 80029a2:	2309      	movs	r3, #9
 80029a4:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80029a6:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <vKeyScan+0x2c4>)
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	f107 010f 	add.w	r1, r7, #15
 80029ae:	2300      	movs	r3, #0
 80029b0:	2200      	movs	r2, #0
 80029b2:	f004 fbed 	bl	8007190 <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = 0; // Сброс счетика выдержки
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <vKeyScan+0x2c0>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	721a      	strb	r2, [r3, #8]
			}

			if (Key.Delay_s_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <vKeyScan+0x2c0>)
 80029be:	7a1b      	ldrb	r3, [r3, #8]
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d005      	beq.n	80029d0 <vKeyScan+0x284>
			{
				Key.Delay_s_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <vKeyScan+0x2c0>)
 80029c6:	7a1b      	ldrb	r3, [r3, #8]
 80029c8:	3301      	adds	r3, #1
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <vKeyScan+0x2c0>)
 80029ce:	721a      	strb	r2, [r3, #8]
			}


			Key.Delay_s_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <vKeyScan+0x2c0>)
 80029d2:	7a9b      	ldrb	r3, [r3, #10]
 80029d4:	3301      	adds	r3, #1
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <vKeyScan+0x2c0>)
 80029da:	729a      	strb	r2, [r3, #10]
			if (Key.Delay_s_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <vKeyScan+0x2c0>)
 80029de:	7a9b      	ldrb	r3, [r3, #10]
 80029e0:	2b32      	cmp	r3, #50	; 0x32
 80029e2:	d91d      	bls.n	8002a20 <vKeyScan+0x2d4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_s_L;
 80029e4:	230a      	movs	r3, #10
 80029e6:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <vKeyScan+0x2c4>)
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	f107 010f 	add.w	r1, r7, #15
 80029f0:	2300      	movs	r3, #0
 80029f2:	2200      	movs	r2, #0
 80029f4:	f004 fbcc 	bl	8007190 <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <vKeyScan+0x2c0>)
 80029fa:	2206      	movs	r2, #6
 80029fc:	721a      	strb	r2, [r3, #8]
				Key.Delay_s_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80029fe:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <vKeyScan+0x2c0>)
 8002a00:	2225      	movs	r2, #37	; 0x25
 8002a02:	729a      	strb	r2, [r3, #10]
 8002a04:	e00c      	b.n	8002a20 <vKeyScan+0x2d4>
 8002a06:	bf00      	nop
 8002a08:	2000353c 	.word	0x2000353c
 8002a0c:	20003da0 	.word	0x20003da0
 8002a10:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_s_ShortPress_L = 0;
 8002a14:	4ba9      	ldr	r3, [pc, #676]	; (8002cbc <vKeyScan+0x570>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	721a      	strb	r2, [r3, #8]
			Key.Delay_s_LongPress_L = 0;
 8002a1a:	4ba8      	ldr	r3, [pc, #672]	; (8002cbc <vKeyScan+0x570>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	729a      	strb	r2, [r3, #10]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 4)
 8002a20:	4ba7      	ldr	r3, [pc, #668]	; (8002cc0 <vKeyScan+0x574>)
 8002a22:	7f5b      	ldrb	r3, [r3, #29]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d139      	bne.n	8002a9c <vKeyScan+0x350>
			{
				// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
				if (Key.Delay_s_ShortPress_R > CNT_KEY_SHORT && Key.Delay_s_ShortPress_R != CNT_KEY_SHORT + 2)
 8002a28:	4ba4      	ldr	r3, [pc, #656]	; (8002cbc <vKeyScan+0x570>)
 8002a2a:	7a5b      	ldrb	r3, [r3, #9]
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d910      	bls.n	8002a52 <vKeyScan+0x306>
 8002a30:	4ba2      	ldr	r3, [pc, #648]	; (8002cbc <vKeyScan+0x570>)
 8002a32:	7a5b      	ldrb	r3, [r3, #9]
 8002a34:	2b06      	cmp	r3, #6
 8002a36:	d00c      	beq.n	8002a52 <vKeyScan+0x306>
				{
					// Дейсвие при нажатии на клавишу
					nKeyPressed = press_short_Delay_s_R;
 8002a38:	230b      	movs	r3, #11
 8002a3a:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002a3c:	4ba1      	ldr	r3, [pc, #644]	; (8002cc4 <vKeyScan+0x578>)
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	f107 010f 	add.w	r1, r7, #15
 8002a44:	2300      	movs	r3, #0
 8002a46:	2200      	movs	r2, #0
 8002a48:	f004 fba2 	bl	8007190 <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = 0; // Сброс счетика выдержки
 8002a4c:	4b9b      	ldr	r3, [pc, #620]	; (8002cbc <vKeyScan+0x570>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	725a      	strb	r2, [r3, #9]
				}

				if (Key.Delay_s_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002a52:	4b9a      	ldr	r3, [pc, #616]	; (8002cbc <vKeyScan+0x570>)
 8002a54:	7a5b      	ldrb	r3, [r3, #9]
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d005      	beq.n	8002a66 <vKeyScan+0x31a>
				{
					Key.Delay_s_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002a5a:	4b98      	ldr	r3, [pc, #608]	; (8002cbc <vKeyScan+0x570>)
 8002a5c:	7a5b      	ldrb	r3, [r3, #9]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b96      	ldr	r3, [pc, #600]	; (8002cbc <vKeyScan+0x570>)
 8002a64:	725a      	strb	r2, [r3, #9]
				}


				Key.Delay_s_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002a66:	4b95      	ldr	r3, [pc, #596]	; (8002cbc <vKeyScan+0x570>)
 8002a68:	7adb      	ldrb	r3, [r3, #11]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4b93      	ldr	r3, [pc, #588]	; (8002cbc <vKeyScan+0x570>)
 8002a70:	72da      	strb	r2, [r3, #11]
				if (Key.Delay_s_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002a72:	4b92      	ldr	r3, [pc, #584]	; (8002cbc <vKeyScan+0x570>)
 8002a74:	7adb      	ldrb	r3, [r3, #11]
 8002a76:	2b32      	cmp	r3, #50	; 0x32
 8002a78:	d916      	bls.n	8002aa8 <vKeyScan+0x35c>
				{
					// Дейсвие при нажатии на клавишу
					nKeyPressed = press_long_Delay_s_R;
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002a7e:	4b91      	ldr	r3, [pc, #580]	; (8002cc4 <vKeyScan+0x578>)
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	f107 010f 	add.w	r1, r7, #15
 8002a86:	2300      	movs	r3, #0
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f004 fb81 	bl	8007190 <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002a8e:	4b8b      	ldr	r3, [pc, #556]	; (8002cbc <vKeyScan+0x570>)
 8002a90:	2206      	movs	r2, #6
 8002a92:	725a      	strb	r2, [r3, #9]
					Key.Delay_s_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002a94:	4b89      	ldr	r3, [pc, #548]	; (8002cbc <vKeyScan+0x570>)
 8002a96:	2225      	movs	r2, #37	; 0x25
 8002a98:	72da      	strb	r2, [r3, #11]
 8002a9a:	e005      	b.n	8002aa8 <vKeyScan+0x35c>


			}
			else // Если кнопка была отпущена то сбросить все счетчики выдержки
			{
				Key.Delay_s_ShortPress_R = 0;
 8002a9c:	4b87      	ldr	r3, [pc, #540]	; (8002cbc <vKeyScan+0x570>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	725a      	strb	r2, [r3, #9]
				Key.Delay_s_LongPress_R = 0;
 8002aa2:	4b86      	ldr	r3, [pc, #536]	; (8002cbc <vKeyScan+0x570>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	72da      	strb	r2, [r3, #11]
			}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 2) // СКОРОСТЬ: [0], "-" - 2, "+" - 1, , STLED №5;
 8002aa8:	4b85      	ldr	r3, [pc, #532]	; (8002cc0 <vKeyScan+0x574>)
 8002aaa:	7f5b      	ldrb	r3, [r3, #29]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d139      	bne.n	8002b24 <vKeyScan+0x3d8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Speed_ShortPress_L > CNT_KEY_SHORT && Key.Speed_ShortPress_L != CNT_KEY_SHORT + 2)
 8002ab0:	4b82      	ldr	r3, [pc, #520]	; (8002cbc <vKeyScan+0x570>)
 8002ab2:	7b1b      	ldrb	r3, [r3, #12]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d910      	bls.n	8002ada <vKeyScan+0x38e>
 8002ab8:	4b80      	ldr	r3, [pc, #512]	; (8002cbc <vKeyScan+0x570>)
 8002aba:	7b1b      	ldrb	r3, [r3, #12]
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	d00c      	beq.n	8002ada <vKeyScan+0x38e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Speed_L;
 8002ac0:	230d      	movs	r3, #13
 8002ac2:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002ac4:	4b7f      	ldr	r3, [pc, #508]	; (8002cc4 <vKeyScan+0x578>)
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	f107 010f 	add.w	r1, r7, #15
 8002acc:	2300      	movs	r3, #0
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f004 fb5e 	bl	8007190 <xQueueGenericSend>

				Key.Speed_ShortPress_L = 0; // Сброс счетика выдержки
 8002ad4:	4b79      	ldr	r3, [pc, #484]	; (8002cbc <vKeyScan+0x570>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	731a      	strb	r2, [r3, #12]
			}

			if (Key.Speed_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002ada:	4b78      	ldr	r3, [pc, #480]	; (8002cbc <vKeyScan+0x570>)
 8002adc:	7b1b      	ldrb	r3, [r3, #12]
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	d005      	beq.n	8002aee <vKeyScan+0x3a2>
			{
				Key.Speed_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002ae2:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <vKeyScan+0x570>)
 8002ae4:	7b1b      	ldrb	r3, [r3, #12]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4b74      	ldr	r3, [pc, #464]	; (8002cbc <vKeyScan+0x570>)
 8002aec:	731a      	strb	r2, [r3, #12]
			}


			Key.Speed_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002aee:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <vKeyScan+0x570>)
 8002af0:	7b9b      	ldrb	r3, [r3, #14]
 8002af2:	3301      	adds	r3, #1
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4b71      	ldr	r3, [pc, #452]	; (8002cbc <vKeyScan+0x570>)
 8002af8:	739a      	strb	r2, [r3, #14]
			if (Key.Speed_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002afa:	4b70      	ldr	r3, [pc, #448]	; (8002cbc <vKeyScan+0x570>)
 8002afc:	7b9b      	ldrb	r3, [r3, #14]
 8002afe:	2b32      	cmp	r3, #50	; 0x32
 8002b00:	d916      	bls.n	8002b30 <vKeyScan+0x3e4>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Speed_L;
 8002b02:	230e      	movs	r3, #14
 8002b04:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002b06:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <vKeyScan+0x578>)
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	f107 010f 	add.w	r1, r7, #15
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2200      	movs	r2, #0
 8002b12:	f004 fb3d 	bl	8007190 <xQueueGenericSend>

				Key.Speed_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002b16:	4b69      	ldr	r3, [pc, #420]	; (8002cbc <vKeyScan+0x570>)
 8002b18:	2206      	movs	r2, #6
 8002b1a:	731a      	strb	r2, [r3, #12]
				Key.Speed_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002b1c:	4b67      	ldr	r3, [pc, #412]	; (8002cbc <vKeyScan+0x570>)
 8002b1e:	2225      	movs	r2, #37	; 0x25
 8002b20:	739a      	strb	r2, [r3, #14]
 8002b22:	e005      	b.n	8002b30 <vKeyScan+0x3e4>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Speed_ShortPress_L = 0;
 8002b24:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <vKeyScan+0x570>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	731a      	strb	r2, [r3, #12]
			Key.Speed_LongPress_L = 0;
 8002b2a:	4b64      	ldr	r3, [pc, #400]	; (8002cbc <vKeyScan+0x570>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	739a      	strb	r2, [r3, #14]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 1)
 8002b30:	4b63      	ldr	r3, [pc, #396]	; (8002cc0 <vKeyScan+0x574>)
 8002b32:	7f5b      	ldrb	r3, [r3, #29]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d139      	bne.n	8002bac <vKeyScan+0x460>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Speed_ShortPress_R > CNT_KEY_SHORT && Key.Speed_ShortPress_R != CNT_KEY_SHORT + 2)
 8002b38:	4b60      	ldr	r3, [pc, #384]	; (8002cbc <vKeyScan+0x570>)
 8002b3a:	7b5b      	ldrb	r3, [r3, #13]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d910      	bls.n	8002b62 <vKeyScan+0x416>
 8002b40:	4b5e      	ldr	r3, [pc, #376]	; (8002cbc <vKeyScan+0x570>)
 8002b42:	7b5b      	ldrb	r3, [r3, #13]
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d00c      	beq.n	8002b62 <vKeyScan+0x416>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Speed_R;
 8002b48:	230f      	movs	r3, #15
 8002b4a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002b4c:	4b5d      	ldr	r3, [pc, #372]	; (8002cc4 <vKeyScan+0x578>)
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	f107 010f 	add.w	r1, r7, #15
 8002b54:	2300      	movs	r3, #0
 8002b56:	2200      	movs	r2, #0
 8002b58:	f004 fb1a 	bl	8007190 <xQueueGenericSend>

				Key.Speed_ShortPress_R = 0; // Сброс счетика выдержки
 8002b5c:	4b57      	ldr	r3, [pc, #348]	; (8002cbc <vKeyScan+0x570>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	735a      	strb	r2, [r3, #13]
			}

			if (Key.Speed_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002b62:	4b56      	ldr	r3, [pc, #344]	; (8002cbc <vKeyScan+0x570>)
 8002b64:	7b5b      	ldrb	r3, [r3, #13]
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d005      	beq.n	8002b76 <vKeyScan+0x42a>
			{
				Key.Speed_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002b6a:	4b54      	ldr	r3, [pc, #336]	; (8002cbc <vKeyScan+0x570>)
 8002b6c:	7b5b      	ldrb	r3, [r3, #13]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4b52      	ldr	r3, [pc, #328]	; (8002cbc <vKeyScan+0x570>)
 8002b74:	735a      	strb	r2, [r3, #13]
			}


			Key.Speed_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002b76:	4b51      	ldr	r3, [pc, #324]	; (8002cbc <vKeyScan+0x570>)
 8002b78:	7bdb      	ldrb	r3, [r3, #15]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4b4f      	ldr	r3, [pc, #316]	; (8002cbc <vKeyScan+0x570>)
 8002b80:	73da      	strb	r2, [r3, #15]
			if (Key.Speed_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002b82:	4b4e      	ldr	r3, [pc, #312]	; (8002cbc <vKeyScan+0x570>)
 8002b84:	7bdb      	ldrb	r3, [r3, #15]
 8002b86:	2b32      	cmp	r3, #50	; 0x32
 8002b88:	d916      	bls.n	8002bb8 <vKeyScan+0x46c>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Speed_R;
 8002b8a:	2310      	movs	r3, #16
 8002b8c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002b8e:	4b4d      	ldr	r3, [pc, #308]	; (8002cc4 <vKeyScan+0x578>)
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	f107 010f 	add.w	r1, r7, #15
 8002b96:	2300      	movs	r3, #0
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f004 faf9 	bl	8007190 <xQueueGenericSend>

				Key.Speed_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <vKeyScan+0x570>)
 8002ba0:	2206      	movs	r2, #6
 8002ba2:	735a      	strb	r2, [r3, #13]
				Key.Speed_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002ba4:	4b45      	ldr	r3, [pc, #276]	; (8002cbc <vKeyScan+0x570>)
 8002ba6:	2225      	movs	r2, #37	; 0x25
 8002ba8:	73da      	strb	r2, [r3, #15]
 8002baa:	e005      	b.n	8002bb8 <vKeyScan+0x46c>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Speed_ShortPress_R = 0;
 8002bac:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <vKeyScan+0x570>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	735a      	strb	r2, [r3, #13]
			Key.Speed_LongPress_R = 0;
 8002bb2:	4b42      	ldr	r3, [pc, #264]	; (8002cbc <vKeyScan+0x570>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	73da      	strb	r2, [r3, #15]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 1) // ЗАДЕРЖКА (Delay_f): [1], "-" - 1, "+" - 4, , STLED №5;
 8002bb8:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <vKeyScan+0x574>)
 8002bba:	7f9b      	ldrb	r3, [r3, #30]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d139      	bne.n	8002c34 <vKeyScan+0x4e8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_f_ShortPress_L > CNT_KEY_SHORT && Key.Delay_f_ShortPress_L != CNT_KEY_SHORT + 2)
 8002bc0:	4b3e      	ldr	r3, [pc, #248]	; (8002cbc <vKeyScan+0x570>)
 8002bc2:	7c1b      	ldrb	r3, [r3, #16]
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d910      	bls.n	8002bea <vKeyScan+0x49e>
 8002bc8:	4b3c      	ldr	r3, [pc, #240]	; (8002cbc <vKeyScan+0x570>)
 8002bca:	7c1b      	ldrb	r3, [r3, #16]
 8002bcc:	2b06      	cmp	r3, #6
 8002bce:	d00c      	beq.n	8002bea <vKeyScan+0x49e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_f_L;
 8002bd0:	2311      	movs	r3, #17
 8002bd2:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002bd4:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <vKeyScan+0x578>)
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	f107 010f 	add.w	r1, r7, #15
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2200      	movs	r2, #0
 8002be0:	f004 fad6 	bl	8007190 <xQueueGenericSend>

				Key.Delay_f_ShortPress_L = 0; // Сброс счетика выдержки
 8002be4:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <vKeyScan+0x570>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	741a      	strb	r2, [r3, #16]
			}

			if (Key.Delay_f_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002bea:	4b34      	ldr	r3, [pc, #208]	; (8002cbc <vKeyScan+0x570>)
 8002bec:	7c1b      	ldrb	r3, [r3, #16]
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d005      	beq.n	8002bfe <vKeyScan+0x4b2>
			{
				Key.Delay_f_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002bf2:	4b32      	ldr	r3, [pc, #200]	; (8002cbc <vKeyScan+0x570>)
 8002bf4:	7c1b      	ldrb	r3, [r3, #16]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b30      	ldr	r3, [pc, #192]	; (8002cbc <vKeyScan+0x570>)
 8002bfc:	741a      	strb	r2, [r3, #16]
			}


			Key.Delay_f_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002bfe:	4b2f      	ldr	r3, [pc, #188]	; (8002cbc <vKeyScan+0x570>)
 8002c00:	7c9b      	ldrb	r3, [r3, #18]
 8002c02:	3301      	adds	r3, #1
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <vKeyScan+0x570>)
 8002c08:	749a      	strb	r2, [r3, #18]
			if (Key.Delay_f_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002c0a:	4b2c      	ldr	r3, [pc, #176]	; (8002cbc <vKeyScan+0x570>)
 8002c0c:	7c9b      	ldrb	r3, [r3, #18]
 8002c0e:	2b32      	cmp	r3, #50	; 0x32
 8002c10:	d916      	bls.n	8002c40 <vKeyScan+0x4f4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_f_L;
 8002c12:	2312      	movs	r3, #18
 8002c14:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002c16:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <vKeyScan+0x578>)
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	f107 010f 	add.w	r1, r7, #15
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2200      	movs	r2, #0
 8002c22:	f004 fab5 	bl	8007190 <xQueueGenericSend>


				Key.Delay_f_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002c26:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <vKeyScan+0x570>)
 8002c28:	2206      	movs	r2, #6
 8002c2a:	741a      	strb	r2, [r3, #16]
				Key.Delay_f_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002c2c:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <vKeyScan+0x570>)
 8002c2e:	2225      	movs	r2, #37	; 0x25
 8002c30:	749a      	strb	r2, [r3, #18]
 8002c32:	e005      	b.n	8002c40 <vKeyScan+0x4f4>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_f_ShortPress_L = 0;
 8002c34:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <vKeyScan+0x570>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	741a      	strb	r2, [r3, #16]
			Key.Delay_f_LongPress_L = 0;
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <vKeyScan+0x570>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	749a      	strb	r2, [r3, #18]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 4)
 8002c40:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <vKeyScan+0x574>)
 8002c42:	7f9b      	ldrb	r3, [r3, #30]
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d13f      	bne.n	8002cc8 <vKeyScan+0x57c>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_f_ShortPress_R > CNT_KEY_SHORT && Key.Delay_f_ShortPress_R != CNT_KEY_SHORT + 2)
 8002c48:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <vKeyScan+0x570>)
 8002c4a:	7c5b      	ldrb	r3, [r3, #17]
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d910      	bls.n	8002c72 <vKeyScan+0x526>
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <vKeyScan+0x570>)
 8002c52:	7c5b      	ldrb	r3, [r3, #17]
 8002c54:	2b06      	cmp	r3, #6
 8002c56:	d00c      	beq.n	8002c72 <vKeyScan+0x526>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_f_R;
 8002c58:	2313      	movs	r3, #19
 8002c5a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <vKeyScan+0x578>)
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	f107 010f 	add.w	r1, r7, #15
 8002c64:	2300      	movs	r3, #0
 8002c66:	2200      	movs	r2, #0
 8002c68:	f004 fa92 	bl	8007190 <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = 0; // Сброс счетика выдержки
 8002c6c:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <vKeyScan+0x570>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	745a      	strb	r2, [r3, #17]
			}

			if (Key.Delay_f_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <vKeyScan+0x570>)
 8002c74:	7c5b      	ldrb	r3, [r3, #17]
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d005      	beq.n	8002c86 <vKeyScan+0x53a>
			{
				Key.Delay_f_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <vKeyScan+0x570>)
 8002c7c:	7c5b      	ldrb	r3, [r3, #17]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <vKeyScan+0x570>)
 8002c84:	745a      	strb	r2, [r3, #17]
			}


			Key.Delay_f_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <vKeyScan+0x570>)
 8002c88:	7cdb      	ldrb	r3, [r3, #19]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <vKeyScan+0x570>)
 8002c90:	74da      	strb	r2, [r3, #19]
			if (Key.Delay_f_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <vKeyScan+0x570>)
 8002c94:	7cdb      	ldrb	r3, [r3, #19]
 8002c96:	2b32      	cmp	r3, #50	; 0x32
 8002c98:	d91c      	bls.n	8002cd4 <vKeyScan+0x588>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_f_R;
 8002c9a:	2314      	movs	r3, #20
 8002c9c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <vKeyScan+0x578>)
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	f107 010f 	add.w	r1, r7, #15
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f004 fa71 	bl	8007190 <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002cae:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <vKeyScan+0x570>)
 8002cb0:	2206      	movs	r2, #6
 8002cb2:	745a      	strb	r2, [r3, #17]
				Key.Delay_f_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002cb4:	4b01      	ldr	r3, [pc, #4]	; (8002cbc <vKeyScan+0x570>)
 8002cb6:	2225      	movs	r2, #37	; 0x25
 8002cb8:	74da      	strb	r2, [r3, #19]
 8002cba:	e00b      	b.n	8002cd4 <vKeyScan+0x588>
 8002cbc:	20003da0 	.word	0x20003da0
 8002cc0:	2000353c 	.word	0x2000353c
 8002cc4:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_f_ShortPress_R = 0;
 8002cc8:	4b90      	ldr	r3, [pc, #576]	; (8002f0c <vKeyScan+0x7c0>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	745a      	strb	r2, [r3, #17]
			Key.Delay_f_LongPress_R = 0;
 8002cce:	4b8f      	ldr	r3, [pc, #572]	; (8002f0c <vKeyScan+0x7c0>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	74da      	strb	r2, [r3, #19]
		}

		if (WelderUnit.IndicatorPanel.KeyState[3] == 1 && !(WelderUnit.IndicatorPanel.KeyState[1] == 2)) // ВЛЕВО: [0], "-" - 128, "+" - 64, , STLED №5; ПРОГРАММА: [1], "-" - ..., "+" - 2, , STLED №5;
 8002cd4:	4b8e      	ldr	r3, [pc, #568]	; (8002f10 <vKeyScan+0x7c4>)
 8002cd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d133      	bne.n	8002d46 <vKeyScan+0x5fa>
 8002cde:	4b8c      	ldr	r3, [pc, #560]	; (8002f10 <vKeyScan+0x7c4>)
 8002ce0:	7f9b      	ldrb	r3, [r3, #30]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d02f      	beq.n	8002d46 <vKeyScan+0x5fa>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_L > CNT_KEY_SHORT && Key.Program_ShortPress_L != CNT_KEY_SHORT + 2)
 8002ce6:	4b89      	ldr	r3, [pc, #548]	; (8002f0c <vKeyScan+0x7c0>)
 8002ce8:	7d1b      	ldrb	r3, [r3, #20]
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d906      	bls.n	8002cfc <vKeyScan+0x5b0>
 8002cee:	4b87      	ldr	r3, [pc, #540]	; (8002f0c <vKeyScan+0x7c0>)
 8002cf0:	7d1b      	ldrb	r3, [r3, #20]
 8002cf2:	2b06      	cmp	r3, #6
 8002cf4:	d002      	beq.n	8002cfc <vKeyScan+0x5b0>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_Program_L;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_L = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 8002cf6:	4b85      	ldr	r3, [pc, #532]	; (8002f0c <vKeyScan+0x7c0>)
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	751a      	strb	r2, [r3, #20]
			}

			if (Key.Program_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002cfc:	4b83      	ldr	r3, [pc, #524]	; (8002f0c <vKeyScan+0x7c0>)
 8002cfe:	7d1b      	ldrb	r3, [r3, #20]
 8002d00:	2b06      	cmp	r3, #6
 8002d02:	d005      	beq.n	8002d10 <vKeyScan+0x5c4>
			{
				Key.Program_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002d04:	4b81      	ldr	r3, [pc, #516]	; (8002f0c <vKeyScan+0x7c0>)
 8002d06:	7d1b      	ldrb	r3, [r3, #20]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	4b7f      	ldr	r3, [pc, #508]	; (8002f0c <vKeyScan+0x7c0>)
 8002d0e:	751a      	strb	r2, [r3, #20]
			}


			Key.Program_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002d10:	4b7e      	ldr	r3, [pc, #504]	; (8002f0c <vKeyScan+0x7c0>)
 8002d12:	7d9b      	ldrb	r3, [r3, #22]
 8002d14:	3301      	adds	r3, #1
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	4b7c      	ldr	r3, [pc, #496]	; (8002f0c <vKeyScan+0x7c0>)
 8002d1a:	759a      	strb	r2, [r3, #22]
			if (Key.Program_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002d1c:	4b7b      	ldr	r3, [pc, #492]	; (8002f0c <vKeyScan+0x7c0>)
 8002d1e:	7d9b      	ldrb	r3, [r3, #22]
 8002d20:	2b32      	cmp	r3, #50	; 0x32
 8002d22:	d924      	bls.n	8002d6e <vKeyScan+0x622>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Program_L;
 8002d24:	2316      	movs	r3, #22
 8002d26:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002d28:	4b7a      	ldr	r3, [pc, #488]	; (8002f14 <vKeyScan+0x7c8>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	f107 010f 	add.w	r1, r7, #15
 8002d30:	2300      	movs	r3, #0
 8002d32:	2200      	movs	r2, #0
 8002d34:	f004 fa2c 	bl	8007190 <xQueueGenericSend>

				Key.Program_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002d38:	4b74      	ldr	r3, [pc, #464]	; (8002f0c <vKeyScan+0x7c0>)
 8002d3a:	2206      	movs	r2, #6
 8002d3c:	751a      	strb	r2, [r3, #20]
				Key.Program_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <vKeyScan+0x7c0>)
 8002d40:	2225      	movs	r2, #37	; 0x25
 8002d42:	759a      	strb	r2, [r3, #22]
			if (Key.Program_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002d44:	e013      	b.n	8002d6e <vKeyScan+0x622>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_L >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 8002d46:	4b71      	ldr	r3, [pc, #452]	; (8002f0c <vKeyScan+0x7c0>)
 8002d48:	7d1b      	ldrb	r3, [r3, #20]
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d909      	bls.n	8002d62 <vKeyScan+0x616>
			{
				nKeyPressed = press_short_Program_L;
 8002d4e:	2315      	movs	r3, #21
 8002d50:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002d52:	4b70      	ldr	r3, [pc, #448]	; (8002f14 <vKeyScan+0x7c8>)
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	f107 010f 	add.w	r1, r7, #15
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f004 fa17 	bl	8007190 <xQueueGenericSend>
			}

			Key.Program_ShortPress_L = 0;
 8002d62:	4b6a      	ldr	r3, [pc, #424]	; (8002f0c <vKeyScan+0x7c0>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	751a      	strb	r2, [r3, #20]
			Key.Program_LongPress_L = 0;
 8002d68:	4b68      	ldr	r3, [pc, #416]	; (8002f0c <vKeyScan+0x7c0>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	759a      	strb	r2, [r3, #22]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 2 && !(WelderUnit.IndicatorPanel.KeyState[3] == 1))
 8002d6e:	4b68      	ldr	r3, [pc, #416]	; (8002f10 <vKeyScan+0x7c4>)
 8002d70:	7f9b      	ldrb	r3, [r3, #30]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d134      	bne.n	8002de0 <vKeyScan+0x694>
 8002d76:	4b66      	ldr	r3, [pc, #408]	; (8002f10 <vKeyScan+0x7c4>)
 8002d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d02f      	beq.n	8002de0 <vKeyScan+0x694>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_R > CNT_KEY_SHORT && Key.Program_ShortPress_R != CNT_KEY_SHORT + 2)
 8002d80:	4b62      	ldr	r3, [pc, #392]	; (8002f0c <vKeyScan+0x7c0>)
 8002d82:	7d5b      	ldrb	r3, [r3, #21]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d906      	bls.n	8002d96 <vKeyScan+0x64a>
 8002d88:	4b60      	ldr	r3, [pc, #384]	; (8002f0c <vKeyScan+0x7c0>)
 8002d8a:	7d5b      	ldrb	r3, [r3, #21]
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d002      	beq.n	8002d96 <vKeyScan+0x64a>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_Program_R;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_R = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 8002d90:	4b5e      	ldr	r3, [pc, #376]	; (8002f0c <vKeyScan+0x7c0>)
 8002d92:	2207      	movs	r2, #7
 8002d94:	755a      	strb	r2, [r3, #21]
			}

			if (Key.Program_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002d96:	4b5d      	ldr	r3, [pc, #372]	; (8002f0c <vKeyScan+0x7c0>)
 8002d98:	7d5b      	ldrb	r3, [r3, #21]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d005      	beq.n	8002daa <vKeyScan+0x65e>
			{
				Key.Program_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002d9e:	4b5b      	ldr	r3, [pc, #364]	; (8002f0c <vKeyScan+0x7c0>)
 8002da0:	7d5b      	ldrb	r3, [r3, #21]
 8002da2:	3301      	adds	r3, #1
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <vKeyScan+0x7c0>)
 8002da8:	755a      	strb	r2, [r3, #21]
			}


			Key.Program_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002daa:	4b58      	ldr	r3, [pc, #352]	; (8002f0c <vKeyScan+0x7c0>)
 8002dac:	7ddb      	ldrb	r3, [r3, #23]
 8002dae:	3301      	adds	r3, #1
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4b56      	ldr	r3, [pc, #344]	; (8002f0c <vKeyScan+0x7c0>)
 8002db4:	75da      	strb	r2, [r3, #23]
			if (Key.Program_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002db6:	4b55      	ldr	r3, [pc, #340]	; (8002f0c <vKeyScan+0x7c0>)
 8002db8:	7ddb      	ldrb	r3, [r3, #23]
 8002dba:	2b32      	cmp	r3, #50	; 0x32
 8002dbc:	d924      	bls.n	8002e08 <vKeyScan+0x6bc>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Program_R;
 8002dbe:	2318      	movs	r3, #24
 8002dc0:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002dc2:	4b54      	ldr	r3, [pc, #336]	; (8002f14 <vKeyScan+0x7c8>)
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	f107 010f 	add.w	r1, r7, #15
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f004 f9df 	bl	8007190 <xQueueGenericSend>

				Key.Program_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002dd2:	4b4e      	ldr	r3, [pc, #312]	; (8002f0c <vKeyScan+0x7c0>)
 8002dd4:	2206      	movs	r2, #6
 8002dd6:	755a      	strb	r2, [r3, #21]
				Key.Program_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002dd8:	4b4c      	ldr	r3, [pc, #304]	; (8002f0c <vKeyScan+0x7c0>)
 8002dda:	2225      	movs	r2, #37	; 0x25
 8002ddc:	75da      	strb	r2, [r3, #23]
			if (Key.Program_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002dde:	e013      	b.n	8002e08 <vKeyScan+0x6bc>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_R >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 8002de0:	4b4a      	ldr	r3, [pc, #296]	; (8002f0c <vKeyScan+0x7c0>)
 8002de2:	7d5b      	ldrb	r3, [r3, #21]
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d909      	bls.n	8002dfc <vKeyScan+0x6b0>
			{
				nKeyPressed = press_short_Program_R;
 8002de8:	2317      	movs	r3, #23
 8002dea:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002dec:	4b49      	ldr	r3, [pc, #292]	; (8002f14 <vKeyScan+0x7c8>)
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	f107 010f 	add.w	r1, r7, #15
 8002df4:	2300      	movs	r3, #0
 8002df6:	2200      	movs	r2, #0
 8002df8:	f004 f9ca 	bl	8007190 <xQueueGenericSend>
			}

			Key.Program_ShortPress_R = 0;
 8002dfc:	4b43      	ldr	r3, [pc, #268]	; (8002f0c <vKeyScan+0x7c0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	755a      	strb	r2, [r3, #21]
			Key.Program_LongPress_R = 0;
 8002e02:	4b42      	ldr	r3, [pc, #264]	; (8002f0c <vKeyScan+0x7c0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	75da      	strb	r2, [r3, #23]
		}



		if (WelderUnit.IndicatorPanel.KeyState[1] == 128) //ВВЕРХ, ВНИЗ: [1], "-" - 128, "+" - 64, , STLED №5;
 8002e08:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <vKeyScan+0x7c4>)
 8002e0a:	7f9b      	ldrb	r3, [r3, #30]
 8002e0c:	2b80      	cmp	r3, #128	; 0x80
 8002e0e:	d139      	bne.n	8002e84 <vKeyScan+0x738>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Up_ShortPress > CNT_KEY_SHORT && Key.Up_ShortPress != CNT_KEY_SHORT + 2)
 8002e10:	4b3e      	ldr	r3, [pc, #248]	; (8002f0c <vKeyScan+0x7c0>)
 8002e12:	7e9b      	ldrb	r3, [r3, #26]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d910      	bls.n	8002e3a <vKeyScan+0x6ee>
 8002e18:	4b3c      	ldr	r3, [pc, #240]	; (8002f0c <vKeyScan+0x7c0>)
 8002e1a:	7e9b      	ldrb	r3, [r3, #26]
 8002e1c:	2b06      	cmp	r3, #6
 8002e1e:	d00c      	beq.n	8002e3a <vKeyScan+0x6ee>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Up;
 8002e20:	2323      	movs	r3, #35	; 0x23
 8002e22:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002e24:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <vKeyScan+0x7c8>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	f107 010f 	add.w	r1, r7, #15
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f004 f9ae 	bl	8007190 <xQueueGenericSend>

				Key.Up_ShortPress = 0; // Сброс счетика выдержки
 8002e34:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <vKeyScan+0x7c0>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	769a      	strb	r2, [r3, #26]
			}

			if (Key.Up_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002e3a:	4b34      	ldr	r3, [pc, #208]	; (8002f0c <vKeyScan+0x7c0>)
 8002e3c:	7e9b      	ldrb	r3, [r3, #26]
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d005      	beq.n	8002e4e <vKeyScan+0x702>
			{
				Key.Up_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002e42:	4b32      	ldr	r3, [pc, #200]	; (8002f0c <vKeyScan+0x7c0>)
 8002e44:	7e9b      	ldrb	r3, [r3, #26]
 8002e46:	3301      	adds	r3, #1
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <vKeyScan+0x7c0>)
 8002e4c:	769a      	strb	r2, [r3, #26]
			}


			Key.Up_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002e4e:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <vKeyScan+0x7c0>)
 8002e50:	7edb      	ldrb	r3, [r3, #27]
 8002e52:	3301      	adds	r3, #1
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <vKeyScan+0x7c0>)
 8002e58:	76da      	strb	r2, [r3, #27]
			if (Key.Up_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002e5a:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <vKeyScan+0x7c0>)
 8002e5c:	7edb      	ldrb	r3, [r3, #27]
 8002e5e:	2b32      	cmp	r3, #50	; 0x32
 8002e60:	d916      	bls.n	8002e90 <vKeyScan+0x744>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Up;
 8002e62:	2324      	movs	r3, #36	; 0x24
 8002e64:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <vKeyScan+0x7c8>)
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	f107 010f 	add.w	r1, r7, #15
 8002e6e:	2300      	movs	r3, #0
 8002e70:	2200      	movs	r2, #0
 8002e72:	f004 f98d 	bl	8007190 <xQueueGenericSend>


				Key.Up_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002e76:	4b25      	ldr	r3, [pc, #148]	; (8002f0c <vKeyScan+0x7c0>)
 8002e78:	2206      	movs	r2, #6
 8002e7a:	769a      	strb	r2, [r3, #26]
				Key.Up_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <vKeyScan+0x7c0>)
 8002e7e:	2225      	movs	r2, #37	; 0x25
 8002e80:	76da      	strb	r2, [r3, #27]
 8002e82:	e005      	b.n	8002e90 <vKeyScan+0x744>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Up_ShortPress = 0;
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <vKeyScan+0x7c0>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	769a      	strb	r2, [r3, #26]
			Key.Up_LongPress = 0;
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <vKeyScan+0x7c0>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	76da      	strb	r2, [r3, #27]
		}
		if (WelderUnit.IndicatorPanel.KeyState[1] == 64)
 8002e90:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <vKeyScan+0x7c4>)
 8002e92:	7f9b      	ldrb	r3, [r3, #30]
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d13f      	bne.n	8002f18 <vKeyScan+0x7cc>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Down_ShortPress > CNT_KEY_SHORT && Key.Down_ShortPress != CNT_KEY_SHORT + 2)
 8002e98:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <vKeyScan+0x7c0>)
 8002e9a:	7f1b      	ldrb	r3, [r3, #28]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d910      	bls.n	8002ec2 <vKeyScan+0x776>
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <vKeyScan+0x7c0>)
 8002ea2:	7f1b      	ldrb	r3, [r3, #28]
 8002ea4:	2b06      	cmp	r3, #6
 8002ea6:	d00c      	beq.n	8002ec2 <vKeyScan+0x776>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Down;
 8002ea8:	2321      	movs	r3, #33	; 0x21
 8002eaa:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <vKeyScan+0x7c8>)
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	f107 010f 	add.w	r1, r7, #15
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f004 f96a 	bl	8007190 <xQueueGenericSend>

				Key.Down_ShortPress = 0; // Сброс счетика выдержки
 8002ebc:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <vKeyScan+0x7c0>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	771a      	strb	r2, [r3, #28]
			}

			if (Key.Down_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002ec2:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <vKeyScan+0x7c0>)
 8002ec4:	7f1b      	ldrb	r3, [r3, #28]
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d005      	beq.n	8002ed6 <vKeyScan+0x78a>
			{
				Key.Down_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <vKeyScan+0x7c0>)
 8002ecc:	7f1b      	ldrb	r3, [r3, #28]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <vKeyScan+0x7c0>)
 8002ed4:	771a      	strb	r2, [r3, #28]
			}


			Key.Down_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <vKeyScan+0x7c0>)
 8002ed8:	7f5b      	ldrb	r3, [r3, #29]
 8002eda:	3301      	adds	r3, #1
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <vKeyScan+0x7c0>)
 8002ee0:	775a      	strb	r2, [r3, #29]
			if (Key.Down_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <vKeyScan+0x7c0>)
 8002ee4:	7f5b      	ldrb	r3, [r3, #29]
 8002ee6:	2b32      	cmp	r3, #50	; 0x32
 8002ee8:	d91c      	bls.n	8002f24 <vKeyScan+0x7d8>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Down;
 8002eea:	2322      	movs	r3, #34	; 0x22
 8002eec:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <vKeyScan+0x7c8>)
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	f107 010f 	add.w	r1, r7, #15
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f004 f949 	bl	8007190 <xQueueGenericSend>


				Key.Down_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002efe:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <vKeyScan+0x7c0>)
 8002f00:	2206      	movs	r2, #6
 8002f02:	771a      	strb	r2, [r3, #28]
				Key.Down_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002f04:	4b01      	ldr	r3, [pc, #4]	; (8002f0c <vKeyScan+0x7c0>)
 8002f06:	2225      	movs	r2, #37	; 0x25
 8002f08:	775a      	strb	r2, [r3, #29]
 8002f0a:	e00b      	b.n	8002f24 <vKeyScan+0x7d8>
 8002f0c:	20003da0 	.word	0x20003da0
 8002f10:	2000353c 	.word	0x2000353c
 8002f14:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Down_ShortPress = 0;
 8002f18:	4b94      	ldr	r3, [pc, #592]	; (800316c <vKeyScan+0xa20>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	771a      	strb	r2, [r3, #28]
			Key.Down_LongPress = 0;
 8002f1e:	4b93      	ldr	r3, [pc, #588]	; (800316c <vKeyScan+0xa20>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	775a      	strb	r2, [r3, #29]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 32) // ПАРКОВКА, АВТО: [1], "-" - 32, "+" - 16, , STLED №5;
 8002f24:	4b92      	ldr	r3, [pc, #584]	; (8003170 <vKeyScan+0xa24>)
 8002f26:	7f9b      	ldrb	r3, [r3, #30]
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d139      	bne.n	8002fa0 <vKeyScan+0x854>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Parking_ShortPress > CNT_KEY_SHORT && Key.Parking_ShortPress != CNT_KEY_SHORT + 2)
 8002f2c:	4b8f      	ldr	r3, [pc, #572]	; (800316c <vKeyScan+0xa20>)
 8002f2e:	7f9b      	ldrb	r3, [r3, #30]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d910      	bls.n	8002f56 <vKeyScan+0x80a>
 8002f34:	4b8d      	ldr	r3, [pc, #564]	; (800316c <vKeyScan+0xa20>)
 8002f36:	7f9b      	ldrb	r3, [r3, #30]
 8002f38:	2b06      	cmp	r3, #6
 8002f3a:	d00c      	beq.n	8002f56 <vKeyScan+0x80a>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Parking;
 8002f3c:	2319      	movs	r3, #25
 8002f3e:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002f40:	4b8c      	ldr	r3, [pc, #560]	; (8003174 <vKeyScan+0xa28>)
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	f107 010f 	add.w	r1, r7, #15
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f004 f920 	bl	8007190 <xQueueGenericSend>


				Key.Parking_ShortPress = 0; // Сброс счетика выдержки
 8002f50:	4b86      	ldr	r3, [pc, #536]	; (800316c <vKeyScan+0xa20>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	779a      	strb	r2, [r3, #30]
			}

			if (Key.Parking_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002f56:	4b85      	ldr	r3, [pc, #532]	; (800316c <vKeyScan+0xa20>)
 8002f58:	7f9b      	ldrb	r3, [r3, #30]
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d005      	beq.n	8002f6a <vKeyScan+0x81e>
			{
				Key.Parking_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002f5e:	4b83      	ldr	r3, [pc, #524]	; (800316c <vKeyScan+0xa20>)
 8002f60:	7f9b      	ldrb	r3, [r3, #30]
 8002f62:	3301      	adds	r3, #1
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	4b81      	ldr	r3, [pc, #516]	; (800316c <vKeyScan+0xa20>)
 8002f68:	779a      	strb	r2, [r3, #30]
			}


			Key.Parking_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002f6a:	4b80      	ldr	r3, [pc, #512]	; (800316c <vKeyScan+0xa20>)
 8002f6c:	7fdb      	ldrb	r3, [r3, #31]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4b7e      	ldr	r3, [pc, #504]	; (800316c <vKeyScan+0xa20>)
 8002f74:	77da      	strb	r2, [r3, #31]
			if (Key.Parking_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002f76:	4b7d      	ldr	r3, [pc, #500]	; (800316c <vKeyScan+0xa20>)
 8002f78:	7fdb      	ldrb	r3, [r3, #31]
 8002f7a:	2b32      	cmp	r3, #50	; 0x32
 8002f7c:	d916      	bls.n	8002fac <vKeyScan+0x860>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Parking;
 8002f7e:	231a      	movs	r3, #26
 8002f80:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002f82:	4b7c      	ldr	r3, [pc, #496]	; (8003174 <vKeyScan+0xa28>)
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	f107 010f 	add.w	r1, r7, #15
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f004 f8ff 	bl	8007190 <xQueueGenericSend>

				Key.Parking_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002f92:	4b76      	ldr	r3, [pc, #472]	; (800316c <vKeyScan+0xa20>)
 8002f94:	2206      	movs	r2, #6
 8002f96:	779a      	strb	r2, [r3, #30]
				Key.Parking_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002f98:	4b74      	ldr	r3, [pc, #464]	; (800316c <vKeyScan+0xa20>)
 8002f9a:	2225      	movs	r2, #37	; 0x25
 8002f9c:	77da      	strb	r2, [r3, #31]
 8002f9e:	e005      	b.n	8002fac <vKeyScan+0x860>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Parking_ShortPress = 0;
 8002fa0:	4b72      	ldr	r3, [pc, #456]	; (800316c <vKeyScan+0xa20>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	779a      	strb	r2, [r3, #30]
			Key.Parking_LongPress = 0;
 8002fa6:	4b71      	ldr	r3, [pc, #452]	; (800316c <vKeyScan+0xa20>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	77da      	strb	r2, [r3, #31]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 16)
 8002fac:	4b70      	ldr	r3, [pc, #448]	; (8003170 <vKeyScan+0xa24>)
 8002fae:	7f9b      	ldrb	r3, [r3, #30]
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d144      	bne.n	800303e <vKeyScan+0x8f2>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Auto_ShortPress > CNT_KEY_SHORT && Key.Auto_ShortPress != CNT_KEY_SHORT + 2)
 8002fb4:	4b6d      	ldr	r3, [pc, #436]	; (800316c <vKeyScan+0xa20>)
 8002fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d912      	bls.n	8002fe4 <vKeyScan+0x898>
 8002fbe:	4b6b      	ldr	r3, [pc, #428]	; (800316c <vKeyScan+0xa20>)
 8002fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc4:	2b06      	cmp	r3, #6
 8002fc6:	d00d      	beq.n	8002fe4 <vKeyScan+0x898>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Auto;
 8002fc8:	231b      	movs	r3, #27
 8002fca:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002fcc:	4b69      	ldr	r3, [pc, #420]	; (8003174 <vKeyScan+0xa28>)
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	f107 010f 	add.w	r1, r7, #15
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f004 f8da 	bl	8007190 <xQueueGenericSend>

				Key.Auto_ShortPress = 0; // Сброс счетика выдержки
 8002fdc:	4b63      	ldr	r3, [pc, #396]	; (800316c <vKeyScan+0xa20>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2020 	strb.w	r2, [r3, #32]
			}

			if (Key.Auto_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002fe4:	4b61      	ldr	r3, [pc, #388]	; (800316c <vKeyScan+0xa20>)
 8002fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d007      	beq.n	8002ffe <vKeyScan+0x8b2>
			{
				Key.Auto_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002fee:	4b5f      	ldr	r3, [pc, #380]	; (800316c <vKeyScan+0xa20>)
 8002ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	4b5c      	ldr	r3, [pc, #368]	; (800316c <vKeyScan+0xa20>)
 8002ffa:	f883 2020 	strb.w	r2, [r3, #32]
			}


			Key.Auto_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002ffe:	4b5b      	ldr	r3, [pc, #364]	; (800316c <vKeyScan+0xa20>)
 8003000:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003004:	3301      	adds	r3, #1
 8003006:	b2da      	uxtb	r2, r3
 8003008:	4b58      	ldr	r3, [pc, #352]	; (800316c <vKeyScan+0xa20>)
 800300a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			if (Key.Auto_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 800300e:	4b57      	ldr	r3, [pc, #348]	; (800316c <vKeyScan+0xa20>)
 8003010:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003014:	2b32      	cmp	r3, #50	; 0x32
 8003016:	d91a      	bls.n	800304e <vKeyScan+0x902>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Auto;
 8003018:	231c      	movs	r3, #28
 800301a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800301c:	4b55      	ldr	r3, [pc, #340]	; (8003174 <vKeyScan+0xa28>)
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	f107 010f 	add.w	r1, r7, #15
 8003024:	2300      	movs	r3, #0
 8003026:	2200      	movs	r2, #0
 8003028:	f004 f8b2 	bl	8007190 <xQueueGenericSend>

				Key.Auto_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800302c:	4b4f      	ldr	r3, [pc, #316]	; (800316c <vKeyScan+0xa20>)
 800302e:	2206      	movs	r2, #6
 8003030:	f883 2020 	strb.w	r2, [r3, #32]
				Key.Auto_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003034:	4b4d      	ldr	r3, [pc, #308]	; (800316c <vKeyScan+0xa20>)
 8003036:	2225      	movs	r2, #37	; 0x25
 8003038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800303c:	e007      	b.n	800304e <vKeyScan+0x902>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Auto_ShortPress = 0;
 800303e:	4b4b      	ldr	r3, [pc, #300]	; (800316c <vKeyScan+0xa20>)
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2020 	strb.w	r2, [r3, #32]
			Key.Auto_LongPress = 0;
 8003046:	4b49      	ldr	r3, [pc, #292]	; (800316c <vKeyScan+0xa20>)
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 8)
 800304e:	4b48      	ldr	r3, [pc, #288]	; (8003170 <vKeyScan+0xa24>)
 8003050:	7f9b      	ldrb	r3, [r3, #30]
 8003052:	2b08      	cmp	r3, #8
 8003054:	d144      	bne.n	80030e0 <vKeyScan+0x994>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.StartStop_ShortPress > CNT_KEY_SHORT && Key.StartStop_ShortPress != CNT_KEY_SHORT + 2)
 8003056:	4b45      	ldr	r3, [pc, #276]	; (800316c <vKeyScan+0xa20>)
 8003058:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800305c:	2b04      	cmp	r3, #4
 800305e:	d912      	bls.n	8003086 <vKeyScan+0x93a>
 8003060:	4b42      	ldr	r3, [pc, #264]	; (800316c <vKeyScan+0xa20>)
 8003062:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003066:	2b06      	cmp	r3, #6
 8003068:	d00d      	beq.n	8003086 <vKeyScan+0x93a>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_StartStop;
 800306a:	231d      	movs	r3, #29
 800306c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800306e:	4b41      	ldr	r3, [pc, #260]	; (8003174 <vKeyScan+0xa28>)
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	f107 010f 	add.w	r1, r7, #15
 8003076:	2300      	movs	r3, #0
 8003078:	2200      	movs	r2, #0
 800307a:	f004 f889 	bl	8007190 <xQueueGenericSend>

				Key.StartStop_ShortPress = 0; // Сброс счетика выдержки
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <vKeyScan+0xa20>)
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}

			if (Key.StartStop_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003086:	4b39      	ldr	r3, [pc, #228]	; (800316c <vKeyScan+0xa20>)
 8003088:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800308c:	2b06      	cmp	r3, #6
 800308e:	d007      	beq.n	80030a0 <vKeyScan+0x954>
			{
				Key.StartStop_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <vKeyScan+0xa20>)
 8003092:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003096:	3301      	adds	r3, #1
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4b34      	ldr	r3, [pc, #208]	; (800316c <vKeyScan+0xa20>)
 800309c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}


			Key.StartStop_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <vKeyScan+0xa20>)
 80030a2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80030a6:	3301      	adds	r3, #1
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4b30      	ldr	r3, [pc, #192]	; (800316c <vKeyScan+0xa20>)
 80030ac:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			if (Key.StartStop_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80030b0:	4b2e      	ldr	r3, [pc, #184]	; (800316c <vKeyScan+0xa20>)
 80030b2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80030b6:	2b32      	cmp	r3, #50	; 0x32
 80030b8:	d91a      	bls.n	80030f0 <vKeyScan+0x9a4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_StartStop;
 80030ba:	231e      	movs	r3, #30
 80030bc:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <vKeyScan+0xa28>)
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	f107 010f 	add.w	r1, r7, #15
 80030c6:	2300      	movs	r3, #0
 80030c8:	2200      	movs	r2, #0
 80030ca:	f004 f861 	bl	8007190 <xQueueGenericSend>

				Key.StartStop_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80030ce:	4b27      	ldr	r3, [pc, #156]	; (800316c <vKeyScan+0xa20>)
 80030d0:	2206      	movs	r2, #6
 80030d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				Key.StartStop_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80030d6:	4b25      	ldr	r3, [pc, #148]	; (800316c <vKeyScan+0xa20>)
 80030d8:	2225      	movs	r2, #37	; 0x25
 80030da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80030de:	e007      	b.n	80030f0 <vKeyScan+0x9a4>
			}

		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.StartStop_ShortPress = 0;
 80030e0:	4b22      	ldr	r3, [pc, #136]	; (800316c <vKeyScan+0xa20>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			Key.StartStop_LongPress = 0;
 80030e8:	4b20      	ldr	r3, [pc, #128]	; (800316c <vKeyScan+0xa20>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}

		// *********************************************************Комбинации клавишь*********************************************************

		if (WelderUnit.IndicatorPanel.KeyState[3] == 1 && WelderUnit.IndicatorPanel.KeyState[1] == 2) // "ПРОГРАММА" "-" одновременно с "+"
 80030f0:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <vKeyScan+0xa24>)
 80030f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d11f      	bne.n	800313a <vKeyScan+0x9ee>
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <vKeyScan+0xa24>)
 80030fc:	7f9b      	ldrb	r3, [r3, #30]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d11b      	bne.n	800313a <vKeyScan+0x9ee>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_L_and_R > CNT_KEY_SHORT && Key.Program_ShortPress_L_and_R != CNT_KEY_SHORT + 2)
 8003102:	4b1a      	ldr	r3, [pc, #104]	; (800316c <vKeyScan+0xa20>)
 8003104:	7e1b      	ldrb	r3, [r3, #24]
 8003106:	2b04      	cmp	r3, #4
 8003108:	d906      	bls.n	8003118 <vKeyScan+0x9cc>
 800310a:	4b18      	ldr	r3, [pc, #96]	; (800316c <vKeyScan+0xa20>)
 800310c:	7e1b      	ldrb	r3, [r3, #24]
 800310e:	2b06      	cmp	r3, #6
 8003110:	d002      	beq.n	8003118 <vKeyScan+0x9cc>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_StartStop;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_L_and_R = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 8003112:	4b16      	ldr	r3, [pc, #88]	; (800316c <vKeyScan+0xa20>)
 8003114:	2207      	movs	r2, #7
 8003116:	761a      	strb	r2, [r3, #24]
			}

			if (Key.Program_ShortPress_L_and_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003118:	4b14      	ldr	r3, [pc, #80]	; (800316c <vKeyScan+0xa20>)
 800311a:	7e1b      	ldrb	r3, [r3, #24]
 800311c:	2b06      	cmp	r3, #6
 800311e:	d005      	beq.n	800312c <vKeyScan+0x9e0>
			{
				Key.Program_ShortPress_L_and_R++; // Счетчик для определения короткого нажатия на кнопку
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <vKeyScan+0xa20>)
 8003122:	7e1b      	ldrb	r3, [r3, #24]
 8003124:	3301      	adds	r3, #1
 8003126:	b2da      	uxtb	r2, r3
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <vKeyScan+0xa20>)
 800312a:	761a      	strb	r2, [r3, #24]
			}


			Key.Program_LongPress_L_and_R++; // Счетчик для определения длинного нажатия на кнопку
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <vKeyScan+0xa20>)
 800312e:	7e5b      	ldrb	r3, [r3, #25]
 8003130:	3301      	adds	r3, #1
 8003132:	b2da      	uxtb	r2, r3
 8003134:	4b0d      	ldr	r3, [pc, #52]	; (800316c <vKeyScan+0xa20>)
 8003136:	765a      	strb	r2, [r3, #25]
			if (Key.Program_LongPress_L_and_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003138:	e013      	b.n	8003162 <vKeyScan+0xa16>
			}

		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_L_and_R >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 800313a:	4b0c      	ldr	r3, [pc, #48]	; (800316c <vKeyScan+0xa20>)
 800313c:	7e1b      	ldrb	r3, [r3, #24]
 800313e:	2b06      	cmp	r3, #6
 8003140:	d909      	bls.n	8003156 <vKeyScan+0xa0a>
			{
				nKeyPressed = press_short_Program_L_and_R;
 8003142:	231f      	movs	r3, #31
 8003144:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <vKeyScan+0xa28>)
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	f107 010f 	add.w	r1, r7, #15
 800314e:	2300      	movs	r3, #0
 8003150:	2200      	movs	r2, #0
 8003152:	f004 f81d 	bl	8007190 <xQueueGenericSend>
//
//				Key.Program_ShortPress_R = 0;
//				Key.Program_LongPress_R = 0;
			}

			Key.Program_ShortPress_L_and_R = 0;
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <vKeyScan+0xa20>)
 8003158:	2200      	movs	r2, #0
 800315a:	761a      	strb	r2, [r3, #24]
			Key.Program_LongPress_L_and_R = 0;
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <vKeyScan+0xa20>)
 800315e:	2200      	movs	r2, #0
 8003160:	765a      	strb	r2, [r3, #25]

		}



		vTaskDelay(TIME_KEY_SCAN / portTICK_RATE_MS);
 8003162:	2014      	movs	r0, #20
 8003164:	f004 fe5a 	bl	8007e1c <vTaskDelay>
		PCB_KeyScan();
 8003168:	f7ff baf7 	b.w	800275a <vKeyScan+0xe>
 800316c:	20003da0 	.word	0x20003da0
 8003170:	2000353c 	.word	0x2000353c
 8003174:	20003d90 	.word	0x20003d90

08003178 <vIndicatorPanel_Out>:
	}
	vTaskDelete(NULL);
}

void vIndicatorPanel_Out(void *pvParameters)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	WelderUnit.Xs = 30;
 8003180:	4b2c      	ldr	r3, [pc, #176]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 8003182:	221e      	movs	r2, #30
 8003184:	801a      	strh	r2, [r3, #0]
	WelderUnit.Xf = 90;
 8003186:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 8003188:	225a      	movs	r2, #90	; 0x5a
 800318a:	805a      	strh	r2, [r3, #2]
	WelderUnit.Steps = 0;
 800318c:	4b29      	ldr	r3, [pc, #164]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 800318e:	2200      	movs	r2, #0
 8003190:	81da      	strh	r2, [r3, #14]
	WelderUnit.Delay_s = 10;
 8003192:	4b28      	ldr	r3, [pc, #160]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 8003194:	220a      	movs	r2, #10
 8003196:	729a      	strb	r2, [r3, #10]
	WelderUnit.Speed = 120;
 8003198:	4b26      	ldr	r3, [pc, #152]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 800319a:	2278      	movs	r2, #120	; 0x78
 800319c:	80da      	strh	r2, [r3, #6]
	WelderUnit.Delay_f = 20;
 800319e:	4b25      	ldr	r3, [pc, #148]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031a0:	2214      	movs	r2, #20
 80031a2:	72da      	strb	r2, [r3, #11]
	WelderUnit.Program = 4;
 80031a4:	4b23      	ldr	r3, [pc, #140]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031a6:	2204      	movs	r2, #4
 80031a8:	819a      	strh	r2, [r3, #12]

	WelderUnit.GoTo = WelderUnit.Xf;
 80031aa:	4b22      	ldr	r3, [pc, #136]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031ac:	885a      	ldrh	r2, [r3, #2]
 80031ae:	4b21      	ldr	r3, [pc, #132]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031b0:	811a      	strh	r2, [r3, #8]
	WelderUnit.Position = 0;
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	809a      	strh	r2, [r3, #4]
	WelderUnit.State = 0;
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	741a      	strb	r2, [r3, #16]

	WelderUnit.IndicatorPanel.Brightness = 2;
 80031be:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031c0:	2202      	movs	r2, #2
 80031c2:	771a      	strb	r2, [r3, #28]

//	WelderUnit.IndicatorPanel.LEDsState |= LED_AUTO;
//
//	WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING;

	IndicatorPanel_Ini();
 80031c4:	f7fd fc7a 	bl	8000abc <IndicatorPanel_Ini>

	IndicatorPanel_SetBrightness(&WelderUnit.IndicatorPanel);
 80031c8:	481b      	ldr	r0, [pc, #108]	; (8003238 <vIndicatorPanel_Out+0xc0>)
 80031ca:	f7fd fd61 	bl	8000c90 <IndicatorPanel_SetBrightness>

	vTaskDelay(100 / portTICK_RATE_MS);
 80031ce:	2064      	movs	r0, #100	; 0x64
 80031d0:	f004 fe24 	bl	8007e1c <vTaskDelay>

		//PCB_LEDs_OUT(PCB_LEDs_OUT(LEDs_val))



		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031d6:	7c1b      	ldrb	r3, [r3, #16]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <vIndicatorPanel_Out+0x70>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Position;
 80031e0:	4b14      	ldr	r3, [pc, #80]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031e2:	889a      	ldrh	r2, [r3, #4]
 80031e4:	4b13      	ldr	r3, [pc, #76]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031e6:	825a      	strh	r2, [r3, #18]
		}

		if (!(WelderUnit.State & 0x01)) // Если каретка не в движении то отображать точку начала варки
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031ea:	7c1b      	ldrb	r3, [r3, #16]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d103      	bne.n	80031fc <vIndicatorPanel_Out+0x84>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Xs;
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031f6:	881a      	ldrh	r2, [r3, #0]
 80031f8:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031fa:	825a      	strh	r2, [r3, #18]
		}

		WelderUnit.IndicatorPanel.Xf = WelderUnit.Xf;
 80031fc:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 80031fe:	885a      	ldrh	r2, [r3, #2]
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 8003202:	829a      	strh	r2, [r3, #20]
		WelderUnit.IndicatorPanel.Delay_s = WelderUnit.Delay_s;
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 8003206:	7a9a      	ldrb	r2, [r3, #10]
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 800320a:	759a      	strb	r2, [r3, #22]
		WelderUnit.IndicatorPanel.Speed = WelderUnit.Speed;
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 800320e:	88da      	ldrh	r2, [r3, #6]
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 8003212:	831a      	strh	r2, [r3, #24]
		WelderUnit.IndicatorPanel.Delay_f = WelderUnit.Delay_f;
 8003214:	4b07      	ldr	r3, [pc, #28]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 8003216:	7ada      	ldrb	r2, [r3, #11]
 8003218:	4b06      	ldr	r3, [pc, #24]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 800321a:	75da      	strb	r2, [r3, #23]
		WelderUnit.IndicatorPanel.Program = WelderUnit.Program;
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 800321e:	899a      	ldrh	r2, [r3, #12]
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <vIndicatorPanel_Out+0xbc>)
 8003222:	835a      	strh	r2, [r3, #26]


		IndicatorPanel_SetValue(&WelderUnit.IndicatorPanel);
 8003224:	4804      	ldr	r0, [pc, #16]	; (8003238 <vIndicatorPanel_Out+0xc0>)
 8003226:	f7fd fc63 	bl	8000af0 <IndicatorPanel_SetValue>

		vTaskDelay(100 / portTICK_RATE_MS);
 800322a:	2064      	movs	r0, #100	; 0x64
 800322c:	f004 fdf6 	bl	8007e1c <vTaskDelay>
		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 8003230:	e7d0      	b.n	80031d4 <vIndicatorPanel_Out+0x5c>
 8003232:	bf00      	nop
 8003234:	2000353c 	.word	0x2000353c
 8003238:	2000354e 	.word	0x2000354e

0800323c <vBuzzer_beep>:
	vTaskDelete(NULL);
}


void vBuzzer_beep(void *pvParameters)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	uint8_t lReceivedValue;
	portBASE_TYPE xStatus;

	for(;;)
	{
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 8003244:	4b73      	ldr	r3, [pc, #460]	; (8003414 <vBuzzer_beep+0x1d8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f107 010f 	add.w	r1, r7, #15
 800324c:	f04f 32ff 	mov.w	r2, #4294967295
 8003250:	4618      	mov	r0, r3
 8003252:	f004 f8f5 	bl	8007440 <xQueueReceive>
 8003256:	6138      	str	r0, [r7, #16]

		if( xStatus == pdPASS ) // Если данные были успешно приняты из очереди
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b01      	cmp	r3, #1
 800325c:	f040 80d5 	bne.w	800340a <vBuzzer_beep+0x1ce>
		{

		switch(lReceivedValue)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b05      	cmp	r3, #5
 8003264:	f200 80d2 	bhi.w	800340c <vBuzzer_beep+0x1d0>
 8003268:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <vBuzzer_beep+0x34>)
 800326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326e:	bf00      	nop
 8003270:	08003289 	.word	0x08003289
 8003274:	08003295 	.word	0x08003295
 8003278:	080032b7 	.word	0x080032b7
 800327c:	080032eb 	.word	0x080032eb
 8003280:	0800332d 	.word	0x0800332d
 8003284:	080033d7 	.word	0x080033d7
		{
		case beep_off:
		{
			BUZZER_OFF
 8003288:	2200      	movs	r2, #0
 800328a:	2110      	movs	r1, #16
 800328c:	4862      	ldr	r0, [pc, #392]	; (8003418 <vBuzzer_beep+0x1dc>)
 800328e:	f001 fa6e 	bl	800476e <HAL_GPIO_WritePin>
			break;
 8003292:	e0bb      	b.n	800340c <vBuzzer_beep+0x1d0>
		}

		case beep_click:
		{
			BUZZER_ON
 8003294:	2201      	movs	r2, #1
 8003296:	2110      	movs	r1, #16
 8003298:	485f      	ldr	r0, [pc, #380]	; (8003418 <vBuzzer_beep+0x1dc>)
 800329a:	f001 fa68 	bl	800476e <HAL_GPIO_WritePin>
			vTaskDelay(10 / portTICK_RATE_MS);
 800329e:	200a      	movs	r0, #10
 80032a0:	f004 fdbc 	bl	8007e1c <vTaskDelay>
			BUZZER_OFF
 80032a4:	2200      	movs	r2, #0
 80032a6:	2110      	movs	r1, #16
 80032a8:	485b      	ldr	r0, [pc, #364]	; (8003418 <vBuzzer_beep+0x1dc>)
 80032aa:	f001 fa60 	bl	800476e <HAL_GPIO_WritePin>
			vTaskDelay(50 / portTICK_RATE_MS);
 80032ae:	2032      	movs	r0, #50	; 0x32
 80032b0:	f004 fdb4 	bl	8007e1c <vTaskDelay>
			break;
 80032b4:	e0aa      	b.n	800340c <vBuzzer_beep+0x1d0>
		}

		case beep_1short:
		{
			for(uint16_t i = 0; i < 10; i++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	83fb      	strh	r3, [r7, #30]
 80032ba:	e012      	b.n	80032e2 <vBuzzer_beep+0xa6>
			    {
			    BUZZER_ON
 80032bc:	2201      	movs	r2, #1
 80032be:	2110      	movs	r1, #16
 80032c0:	4855      	ldr	r0, [pc, #340]	; (8003418 <vBuzzer_beep+0x1dc>)
 80032c2:	f001 fa54 	bl	800476e <HAL_GPIO_WritePin>
			    vTaskDelay(1 / portTICK_RATE_MS);
 80032c6:	2001      	movs	r0, #1
 80032c8:	f004 fda8 	bl	8007e1c <vTaskDelay>
			    BUZZER_OFF
 80032cc:	2200      	movs	r2, #0
 80032ce:	2110      	movs	r1, #16
 80032d0:	4851      	ldr	r0, [pc, #324]	; (8003418 <vBuzzer_beep+0x1dc>)
 80032d2:	f001 fa4c 	bl	800476e <HAL_GPIO_WritePin>
			    vTaskDelay(1 / portTICK_RATE_MS);
 80032d6:	2001      	movs	r0, #1
 80032d8:	f004 fda0 	bl	8007e1c <vTaskDelay>
			for(uint16_t i = 0; i < 10; i++)
 80032dc:	8bfb      	ldrh	r3, [r7, #30]
 80032de:	3301      	adds	r3, #1
 80032e0:	83fb      	strh	r3, [r7, #30]
 80032e2:	8bfb      	ldrh	r3, [r7, #30]
 80032e4:	2b09      	cmp	r3, #9
 80032e6:	d9e9      	bls.n	80032bc <vBuzzer_beep+0x80>
			    }
			break;
 80032e8:	e090      	b.n	800340c <vBuzzer_beep+0x1d0>
		}

		case beep_2short:
		{
			BUZZER_ON
 80032ea:	2201      	movs	r2, #1
 80032ec:	2110      	movs	r1, #16
 80032ee:	484a      	ldr	r0, [pc, #296]	; (8003418 <vBuzzer_beep+0x1dc>)
 80032f0:	f001 fa3d 	bl	800476e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80032f4:	2064      	movs	r0, #100	; 0x64
 80032f6:	f004 fd91 	bl	8007e1c <vTaskDelay>
			BUZZER_OFF
 80032fa:	2200      	movs	r2, #0
 80032fc:	2110      	movs	r1, #16
 80032fe:	4846      	ldr	r0, [pc, #280]	; (8003418 <vBuzzer_beep+0x1dc>)
 8003300:	f001 fa35 	bl	800476e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003304:	2064      	movs	r0, #100	; 0x64
 8003306:	f004 fd89 	bl	8007e1c <vTaskDelay>

			BUZZER_ON
 800330a:	2201      	movs	r2, #1
 800330c:	2110      	movs	r1, #16
 800330e:	4842      	ldr	r0, [pc, #264]	; (8003418 <vBuzzer_beep+0x1dc>)
 8003310:	f001 fa2d 	bl	800476e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003314:	2064      	movs	r0, #100	; 0x64
 8003316:	f004 fd81 	bl	8007e1c <vTaskDelay>
			BUZZER_OFF
 800331a:	2200      	movs	r2, #0
 800331c:	2110      	movs	r1, #16
 800331e:	483e      	ldr	r0, [pc, #248]	; (8003418 <vBuzzer_beep+0x1dc>)
 8003320:	f001 fa25 	bl	800476e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003324:	2064      	movs	r0, #100	; 0x64
 8003326:	f004 fd79 	bl	8007e1c <vTaskDelay>
			break;
 800332a:	e06f      	b.n	800340c <vBuzzer_beep+0x1d0>
		}

		case beep_3short:
		{
			for(uint16_t i = 0; i < 40; i++)
 800332c:	2300      	movs	r3, #0
 800332e:	83bb      	strh	r3, [r7, #28]
 8003330:	e012      	b.n	8003358 <vBuzzer_beep+0x11c>
			    {
				BUZZER_ON
 8003332:	2201      	movs	r2, #1
 8003334:	2110      	movs	r1, #16
 8003336:	4838      	ldr	r0, [pc, #224]	; (8003418 <vBuzzer_beep+0x1dc>)
 8003338:	f001 fa19 	bl	800476e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 800333c:	2001      	movs	r0, #1
 800333e:	f004 fd6d 	bl	8007e1c <vTaskDelay>
				BUZZER_OFF
 8003342:	2200      	movs	r2, #0
 8003344:	2110      	movs	r1, #16
 8003346:	4834      	ldr	r0, [pc, #208]	; (8003418 <vBuzzer_beep+0x1dc>)
 8003348:	f001 fa11 	bl	800476e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 800334c:	2001      	movs	r0, #1
 800334e:	f004 fd65 	bl	8007e1c <vTaskDelay>
			for(uint16_t i = 0; i < 40; i++)
 8003352:	8bbb      	ldrh	r3, [r7, #28]
 8003354:	3301      	adds	r3, #1
 8003356:	83bb      	strh	r3, [r7, #28]
 8003358:	8bbb      	ldrh	r3, [r7, #28]
 800335a:	2b27      	cmp	r3, #39	; 0x27
 800335c:	d9e9      	bls.n	8003332 <vBuzzer_beep+0xf6>
			    }

			vTaskDelay(40 / portTICK_RATE_MS);
 800335e:	2028      	movs	r0, #40	; 0x28
 8003360:	f004 fd5c 	bl	8007e1c <vTaskDelay>

			for(uint16_t i = 0; i < 40; i++)
 8003364:	2300      	movs	r3, #0
 8003366:	837b      	strh	r3, [r7, #26]
 8003368:	e012      	b.n	8003390 <vBuzzer_beep+0x154>
			    {
				BUZZER_ON
 800336a:	2201      	movs	r2, #1
 800336c:	2110      	movs	r1, #16
 800336e:	482a      	ldr	r0, [pc, #168]	; (8003418 <vBuzzer_beep+0x1dc>)
 8003370:	f001 f9fd 	bl	800476e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003374:	2001      	movs	r0, #1
 8003376:	f004 fd51 	bl	8007e1c <vTaskDelay>
				BUZZER_OFF
 800337a:	2200      	movs	r2, #0
 800337c:	2110      	movs	r1, #16
 800337e:	4826      	ldr	r0, [pc, #152]	; (8003418 <vBuzzer_beep+0x1dc>)
 8003380:	f001 f9f5 	bl	800476e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003384:	2001      	movs	r0, #1
 8003386:	f004 fd49 	bl	8007e1c <vTaskDelay>
			for(uint16_t i = 0; i < 40; i++)
 800338a:	8b7b      	ldrh	r3, [r7, #26]
 800338c:	3301      	adds	r3, #1
 800338e:	837b      	strh	r3, [r7, #26]
 8003390:	8b7b      	ldrh	r3, [r7, #26]
 8003392:	2b27      	cmp	r3, #39	; 0x27
 8003394:	d9e9      	bls.n	800336a <vBuzzer_beep+0x12e>
			    }

			vTaskDelay(40 / portTICK_RATE_MS);
 8003396:	2028      	movs	r0, #40	; 0x28
 8003398:	f004 fd40 	bl	8007e1c <vTaskDelay>

			for(uint16_t i = 0; i < 50; i++)
 800339c:	2300      	movs	r3, #0
 800339e:	833b      	strh	r3, [r7, #24]
 80033a0:	e012      	b.n	80033c8 <vBuzzer_beep+0x18c>
			    {
				BUZZER_ON
 80033a2:	2201      	movs	r2, #1
 80033a4:	2110      	movs	r1, #16
 80033a6:	481c      	ldr	r0, [pc, #112]	; (8003418 <vBuzzer_beep+0x1dc>)
 80033a8:	f001 f9e1 	bl	800476e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 80033ac:	2001      	movs	r0, #1
 80033ae:	f004 fd35 	bl	8007e1c <vTaskDelay>
				BUZZER_OFF
 80033b2:	2200      	movs	r2, #0
 80033b4:	2110      	movs	r1, #16
 80033b6:	4818      	ldr	r0, [pc, #96]	; (8003418 <vBuzzer_beep+0x1dc>)
 80033b8:	f001 f9d9 	bl	800476e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 80033bc:	2001      	movs	r0, #1
 80033be:	f004 fd2d 	bl	8007e1c <vTaskDelay>
			for(uint16_t i = 0; i < 50; i++)
 80033c2:	8b3b      	ldrh	r3, [r7, #24]
 80033c4:	3301      	adds	r3, #1
 80033c6:	833b      	strh	r3, [r7, #24]
 80033c8:	8b3b      	ldrh	r3, [r7, #24]
 80033ca:	2b31      	cmp	r3, #49	; 0x31
 80033cc:	d9e9      	bls.n	80033a2 <vBuzzer_beep+0x166>
			    }

			vTaskDelay(40 / portTICK_RATE_MS);
 80033ce:	2028      	movs	r0, #40	; 0x28
 80033d0:	f004 fd24 	bl	8007e1c <vTaskDelay>

			break;
 80033d4:	e01a      	b.n	800340c <vBuzzer_beep+0x1d0>
		}

		case beep_long:
		{
			for(uint16_t i = 0; i < 200; i++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	82fb      	strh	r3, [r7, #22]
 80033da:	e012      	b.n	8003402 <vBuzzer_beep+0x1c6>
			    {
				BUZZER_ON
 80033dc:	2201      	movs	r2, #1
 80033de:	2110      	movs	r1, #16
 80033e0:	480d      	ldr	r0, [pc, #52]	; (8003418 <vBuzzer_beep+0x1dc>)
 80033e2:	f001 f9c4 	bl	800476e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 80033e6:	2001      	movs	r0, #1
 80033e8:	f004 fd18 	bl	8007e1c <vTaskDelay>
				BUZZER_OFF
 80033ec:	2200      	movs	r2, #0
 80033ee:	2110      	movs	r1, #16
 80033f0:	4809      	ldr	r0, [pc, #36]	; (8003418 <vBuzzer_beep+0x1dc>)
 80033f2:	f001 f9bc 	bl	800476e <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 80033f6:	2001      	movs	r0, #1
 80033f8:	f004 fd10 	bl	8007e1c <vTaskDelay>
			for(uint16_t i = 0; i < 200; i++)
 80033fc:	8afb      	ldrh	r3, [r7, #22]
 80033fe:	3301      	adds	r3, #1
 8003400:	82fb      	strh	r3, [r7, #22]
 8003402:	8afb      	ldrh	r3, [r7, #22]
 8003404:	2bc7      	cmp	r3, #199	; 0xc7
 8003406:	d9e9      	bls.n	80033dc <vBuzzer_beep+0x1a0>
			    }
			break;
 8003408:	e000      	b.n	800340c <vBuzzer_beep+0x1d0>
		}

		}

		}
 800340a:	bf00      	nop

		vTaskMissedYield(); // Переключение контекста.
 800340c:	f005 f80e 	bl	800842c <vTaskMissedYield>
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 8003410:	e718      	b.n	8003244 <vBuzzer_beep+0x8>
 8003412:	bf00      	nop
 8003414:	20003538 	.word	0x20003538
 8003418:	40010800 	.word	0x40010800

0800341c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003420:	f000 fb82 	bl	8003b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003424:	f000 f81a 	bl	800345c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003428:	f000 f90c 	bl	8003644 <MX_GPIO_Init>
  MX_SPI1_Init();
 800342c:	f000 f85c 	bl	80034e8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8003430:	f000 f892 	bl	8003558 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003434:	f003 fc0c 	bl	8006c50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003438:	4a05      	ldr	r2, [pc, #20]	; (8003450 <main+0x34>)
 800343a:	2100      	movs	r1, #0
 800343c:	4805      	ldr	r0, [pc, #20]	; (8003454 <main+0x38>)
 800343e:	f003 fc39 	bl	8006cb4 <osThreadNew>
 8003442:	4603      	mov	r3, r0
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <main+0x3c>)
 8003446:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  freeRTOS_Tasks_Ini();
 8003448:	f7fe fa02 	bl	8001850 <freeRTOS_Tasks_Ini>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800344c:	e7fe      	b.n	800344c <main+0x30>
 800344e:	bf00      	nop
 8003450:	08009520 	.word	0x08009520
 8003454:	0800383d 	.word	0x0800383d
 8003458:	20003dd0 	.word	0x20003dd0

0800345c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b090      	sub	sp, #64	; 0x40
 8003460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003462:	f107 0318 	add.w	r3, r7, #24
 8003466:	2228      	movs	r2, #40	; 0x28
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f005 ffea 	bl	8009444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	609a      	str	r2, [r3, #8]
 800347a:	60da      	str	r2, [r3, #12]
 800347c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800347e:	2301      	movs	r3, #1
 8003480:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003486:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003488:	2300      	movs	r3, #0
 800348a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800348c:	2301      	movs	r3, #1
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003490:	2302      	movs	r3, #2
 8003492:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800349a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800349e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034a0:	f107 0318 	add.w	r3, r7, #24
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 f993 	bl	80047d0 <HAL_RCC_OscConfig>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80034b0:	f000 f9cd 	bl	800384e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034b4:	230f      	movs	r3, #15
 80034b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034b8:	2302      	movs	r3, #2
 80034ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034ca:	1d3b      	adds	r3, r7, #4
 80034cc:	2102      	movs	r1, #2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 fbfe 	bl	8004cd0 <HAL_RCC_ClockConfig>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80034da:	f000 f9b8 	bl	800384e <Error_Handler>
  }
}
 80034de:	bf00      	nop
 80034e0:	3740      	adds	r7, #64	; 0x40
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80034ec:	4b18      	ldr	r3, [pc, #96]	; (8003550 <MX_SPI1_Init+0x68>)
 80034ee:	4a19      	ldr	r2, [pc, #100]	; (8003554 <MX_SPI1_Init+0x6c>)
 80034f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034f2:	4b17      	ldr	r3, [pc, #92]	; (8003550 <MX_SPI1_Init+0x68>)
 80034f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <MX_SPI1_Init+0x68>)
 80034fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003500:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003502:	4b13      	ldr	r3, [pc, #76]	; (8003550 <MX_SPI1_Init+0x68>)
 8003504:	2200      	movs	r2, #0
 8003506:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <MX_SPI1_Init+0x68>)
 800350a:	2202      	movs	r2, #2
 800350c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <MX_SPI1_Init+0x68>)
 8003510:	2201      	movs	r2, #1
 8003512:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <MX_SPI1_Init+0x68>)
 8003516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800351a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <MX_SPI1_Init+0x68>)
 800351e:	2238      	movs	r2, #56	; 0x38
 8003520:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <MX_SPI1_Init+0x68>)
 8003524:	2280      	movs	r2, #128	; 0x80
 8003526:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <MX_SPI1_Init+0x68>)
 800352a:	2200      	movs	r2, #0
 800352c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <MX_SPI1_Init+0x68>)
 8003530:	2200      	movs	r2, #0
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <MX_SPI1_Init+0x68>)
 8003536:	220a      	movs	r2, #10
 8003538:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800353a:	4805      	ldr	r0, [pc, #20]	; (8003550 <MX_SPI1_Init+0x68>)
 800353c:	f001 fd30 	bl	8004fa0 <HAL_SPI_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8003546:	f000 f982 	bl	800384e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20003e1c 	.word	0x20003e1c
 8003554:	40013000 	.word	0x40013000

08003558 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08e      	sub	sp, #56	; 0x38
 800355c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800355e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800356c:	f107 0320 	add.w	r3, r7, #32
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
 8003584:	615a      	str	r2, [r3, #20]
 8003586:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003588:	4b2c      	ldr	r3, [pc, #176]	; (800363c <MX_TIM3_Init+0xe4>)
 800358a:	4a2d      	ldr	r2, [pc, #180]	; (8003640 <MX_TIM3_Init+0xe8>)
 800358c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800358e:	4b2b      	ldr	r3, [pc, #172]	; (800363c <MX_TIM3_Init+0xe4>)
 8003590:	2247      	movs	r2, #71	; 0x47
 8003592:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <MX_TIM3_Init+0xe4>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <MX_TIM3_Init+0xe4>)
 800359c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <MX_TIM3_Init+0xe4>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <MX_TIM3_Init+0xe4>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035ae:	4823      	ldr	r0, [pc, #140]	; (800363c <MX_TIM3_Init+0xe4>)
 80035b0:	f002 fb66 	bl	8005c80 <HAL_TIM_Base_Init>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80035ba:	f000 f948 	bl	800384e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035c8:	4619      	mov	r1, r3
 80035ca:	481c      	ldr	r0, [pc, #112]	; (800363c <MX_TIM3_Init+0xe4>)
 80035cc:	f002 fef0 	bl	80063b0 <HAL_TIM_ConfigClockSource>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80035d6:	f000 f93a 	bl	800384e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035da:	4818      	ldr	r0, [pc, #96]	; (800363c <MX_TIM3_Init+0xe4>)
 80035dc:	f002 fb9f 	bl	8005d1e <HAL_TIM_PWM_Init>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80035e6:	f000 f932 	bl	800384e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035f2:	f107 0320 	add.w	r3, r7, #32
 80035f6:	4619      	mov	r1, r3
 80035f8:	4810      	ldr	r0, [pc, #64]	; (800363c <MX_TIM3_Init+0xe4>)
 80035fa:	f003 faab 	bl	8006b54 <HAL_TIMEx_MasterConfigSynchronization>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003604:	f000 f923 	bl	800384e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003608:	2360      	movs	r3, #96	; 0x60
 800360a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003618:	1d3b      	adds	r3, r7, #4
 800361a:	2200      	movs	r2, #0
 800361c:	4619      	mov	r1, r3
 800361e:	4807      	ldr	r0, [pc, #28]	; (800363c <MX_TIM3_Init+0xe4>)
 8003620:	f002 fe08 	bl	8006234 <HAL_TIM_PWM_ConfigChannel>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800362a:	f000 f910 	bl	800384e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800362e:	4803      	ldr	r0, [pc, #12]	; (800363c <MX_TIM3_Init+0xe4>)
 8003630:	f000 f9b6 	bl	80039a0 <HAL_TIM_MspPostInit>

}
 8003634:	bf00      	nop
 8003636:	3738      	adds	r7, #56	; 0x38
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20003dd4 	.word	0x20003dd4
 8003640:	40000400 	.word	0x40000400

08003644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364a:	f107 0310 	add.w	r3, r7, #16
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	609a      	str	r2, [r3, #8]
 8003656:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003658:	4b71      	ldr	r3, [pc, #452]	; (8003820 <MX_GPIO_Init+0x1dc>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	4a70      	ldr	r2, [pc, #448]	; (8003820 <MX_GPIO_Init+0x1dc>)
 800365e:	f043 0320 	orr.w	r3, r3, #32
 8003662:	6193      	str	r3, [r2, #24]
 8003664:	4b6e      	ldr	r3, [pc, #440]	; (8003820 <MX_GPIO_Init+0x1dc>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003670:	4b6b      	ldr	r3, [pc, #428]	; (8003820 <MX_GPIO_Init+0x1dc>)
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	4a6a      	ldr	r2, [pc, #424]	; (8003820 <MX_GPIO_Init+0x1dc>)
 8003676:	f043 0310 	orr.w	r3, r3, #16
 800367a:	6193      	str	r3, [r2, #24]
 800367c:	4b68      	ldr	r3, [pc, #416]	; (8003820 <MX_GPIO_Init+0x1dc>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003688:	4b65      	ldr	r3, [pc, #404]	; (8003820 <MX_GPIO_Init+0x1dc>)
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	4a64      	ldr	r2, [pc, #400]	; (8003820 <MX_GPIO_Init+0x1dc>)
 800368e:	f043 0304 	orr.w	r3, r3, #4
 8003692:	6193      	str	r3, [r2, #24]
 8003694:	4b62      	ldr	r3, [pc, #392]	; (8003820 <MX_GPIO_Init+0x1dc>)
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a0:	4b5f      	ldr	r3, [pc, #380]	; (8003820 <MX_GPIO_Init+0x1dc>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	4a5e      	ldr	r2, [pc, #376]	; (8003820 <MX_GPIO_Init+0x1dc>)
 80036a6:	f043 0308 	orr.w	r3, r3, #8
 80036aa:	6193      	str	r3, [r2, #24]
 80036ac:	4b5c      	ldr	r3, [pc, #368]	; (8003820 <MX_GPIO_Init+0x1dc>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oDIR1_Pin, GPIO_PIN_RESET);
 80036b8:	2200      	movs	r2, #0
 80036ba:	f44f 7183 	mov.w	r1, #262	; 0x106
 80036be:	4859      	ldr	r0, [pc, #356]	; (8003824 <MX_GPIO_Init+0x1e0>)
 80036c0:	f001 f855 	bl	800476e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, oBuzer_Pin|oSyncArc_Pin|oSMD_EN1_Pin, GPIO_PIN_RESET);
 80036c4:	2200      	movs	r2, #0
 80036c6:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80036ca:	4857      	ldr	r0, [pc, #348]	; (8003828 <MX_GPIO_Init+0x1e4>)
 80036cc:	f001 f84f 	bl	800476e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin, GPIO_PIN_SET);
 80036d0:	2201      	movs	r2, #1
 80036d2:	2140      	movs	r1, #64	; 0x40
 80036d4:	4854      	ldr	r0, [pc, #336]	; (8003828 <MX_GPIO_Init+0x1e4>)
 80036d6:	f001 f84a 	bl	800476e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin, GPIO_PIN_SET);
 80036da:	2201      	movs	r2, #1
 80036dc:	2130      	movs	r1, #48	; 0x30
 80036de:	4851      	ldr	r0, [pc, #324]	; (8003824 <MX_GPIO_Init+0x1e0>)
 80036e0:	f001 f845 	bl	800476e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin, GPIO_PIN_SET);
 80036e4:	2201      	movs	r2, #1
 80036e6:	2103      	movs	r1, #3
 80036e8:	4850      	ldr	r0, [pc, #320]	; (800382c <MX_GPIO_Init+0x1e8>)
 80036ea:	f001 f840 	bl	800476e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSolenoidValve2_Pin|oSolenoidValve1_Pin, GPIO_PIN_RESET);
 80036ee:	2200      	movs	r2, #0
 80036f0:	21c0      	movs	r1, #192	; 0xc0
 80036f2:	484e      	ldr	r0, [pc, #312]	; (800382c <MX_GPIO_Init+0x1e8>)
 80036f4:	f001 f83b 	bl	800476e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : oSol_Valve_b_Heade_Pin oSol_Valve_a_Heade_Pin oSTLED316S_STB1_Pin oSTLED316S_STB2_Pin
                           oDIR1_Pin */
  GPIO_InitStruct.Pin = oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin
 80036f8:	f44f 739b 	mov.w	r3, #310	; 0x136
 80036fc:	613b      	str	r3, [r7, #16]
                          |oDIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036fe:	2301      	movs	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003706:	2302      	movs	r3, #2
 8003708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800370a:	f107 0310 	add.w	r3, r7, #16
 800370e:	4619      	mov	r1, r3
 8003710:	4844      	ldr	r0, [pc, #272]	; (8003824 <MX_GPIO_Init+0x1e0>)
 8003712:	f000 fe81 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pins : iPedal_L_Pin iPedal_R_Pin */
  GPIO_InitStruct.Pin = iPedal_L_Pin|iPedal_R_Pin;
 8003716:	2309      	movs	r3, #9
 8003718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003722:	f107 0310 	add.w	r3, r7, #16
 8003726:	4619      	mov	r1, r3
 8003728:	483f      	ldr	r0, [pc, #252]	; (8003828 <MX_GPIO_Init+0x1e4>)
 800372a:	f000 fe75 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pins : oBuzer_Pin oSTLED316S_STB5_Pin oSyncArc_Pin oSMD_EN1_Pin */
  GPIO_InitStruct.Pin = oBuzer_Pin|oSTLED316S_STB5_Pin|oSyncArc_Pin|oSMD_EN1_Pin;
 800372e:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8003732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003734:	2301      	movs	r3, #1
 8003736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373c:	2302      	movs	r3, #2
 800373e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003740:	f107 0310 	add.w	r3, r7, #16
 8003744:	4619      	mov	r1, r3
 8003746:	4838      	ldr	r0, [pc, #224]	; (8003828 <MX_GPIO_Init+0x1e4>)
 8003748:	f000 fe66 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pins : oSTLED316S_STB3_Pin oSTLED316S_STB4_Pin oSolenoidValve2_Pin oSolenoidValve1_Pin */
  GPIO_InitStruct.Pin = oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin|oSolenoidValve2_Pin|oSolenoidValve1_Pin;
 800374c:	23c3      	movs	r3, #195	; 0xc3
 800374e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003750:	2301      	movs	r3, #1
 8003752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003758:	2302      	movs	r3, #2
 800375a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800375c:	f107 0310 	add.w	r3, r7, #16
 8003760:	4619      	mov	r1, r3
 8003762:	4832      	ldr	r0, [pc, #200]	; (800382c <MX_GPIO_Init+0x1e8>)
 8003764:	f000 fe58 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN5_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN5_Pin;
 8003768:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800376c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800376e:	4b30      	ldr	r3, [pc, #192]	; (8003830 <MX_GPIO_Init+0x1ec>)
 8003770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN5_GPIO_Port, &GPIO_InitStruct);
 8003776:	f107 0310 	add.w	r3, r7, #16
 800377a:	4619      	mov	r1, r3
 800377c:	482b      	ldr	r0, [pc, #172]	; (800382c <MX_GPIO_Init+0x1e8>)
 800377e:	f000 fe4b 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pin : iBackDoor_Pin */
  GPIO_InitStruct.Pin = iBackDoor_Pin;
 8003782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iBackDoor_GPIO_Port, &GPIO_InitStruct);
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	4619      	mov	r1, r3
 8003796:	4825      	ldr	r0, [pc, #148]	; (800382c <MX_GPIO_Init+0x1e8>)
 8003798:	f000 fe3e 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pin : iFB_STEP1_Pin */
  GPIO_InitStruct.Pin = iFB_STEP1_Pin;
 800379c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <MX_GPIO_Init+0x1f0>)
 80037a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iFB_STEP1_GPIO_Port, &GPIO_InitStruct);
 80037aa:	f107 0310 	add.w	r3, r7, #16
 80037ae:	4619      	mov	r1, r3
 80037b0:	481c      	ldr	r0, [pc, #112]	; (8003824 <MX_GPIO_Init+0x1e0>)
 80037b2:	f000 fe31 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN3_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN3_Pin;
 80037b6:	2304      	movs	r3, #4
 80037b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <MX_GPIO_Init+0x1ec>)
 80037bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037be:	2301      	movs	r3, #1
 80037c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN3_GPIO_Port, &GPIO_InitStruct);
 80037c2:	f107 0310 	add.w	r3, r7, #16
 80037c6:	4619      	mov	r1, r3
 80037c8:	481b      	ldr	r0, [pc, #108]	; (8003838 <MX_GPIO_Init+0x1f4>)
 80037ca:	f000 fe25 	bl	8004418 <HAL_GPIO_Init>

  /*Configure GPIO pin : iCarriageStop_Pin */
  GPIO_InitStruct.Pin = iCarriageStop_Pin;
 80037ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037d4:	4b17      	ldr	r3, [pc, #92]	; (8003834 <MX_GPIO_Init+0x1f0>)
 80037d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iCarriageStop_GPIO_Port, &GPIO_InitStruct);
 80037dc:	f107 0310 	add.w	r3, r7, #16
 80037e0:	4619      	mov	r1, r3
 80037e2:	4812      	ldr	r0, [pc, #72]	; (800382c <MX_GPIO_Init+0x1e8>)
 80037e4:	f000 fe18 	bl	8004418 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80037e8:	2200      	movs	r2, #0
 80037ea:	2105      	movs	r1, #5
 80037ec:	2008      	movs	r0, #8
 80037ee:	f000 fad4 	bl	8003d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80037f2:	2008      	movs	r0, #8
 80037f4:	f000 faed 	bl	8003dd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80037f8:	2200      	movs	r2, #0
 80037fa:	2105      	movs	r1, #5
 80037fc:	2017      	movs	r0, #23
 80037fe:	f000 facc 	bl	8003d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003802:	2017      	movs	r0, #23
 8003804:	f000 fae5 	bl	8003dd2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003808:	2200      	movs	r2, #0
 800380a:	2105      	movs	r1, #5
 800380c:	2028      	movs	r0, #40	; 0x28
 800380e:	f000 fac4 	bl	8003d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003812:	2028      	movs	r0, #40	; 0x28
 8003814:	f000 fadd 	bl	8003dd2 <HAL_NVIC_EnableIRQ>

}
 8003818:	bf00      	nop
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	40011000 	.word	0x40011000
 8003828:	40010800 	.word	0x40010800
 800382c:	40010c00 	.word	0x40010c00
 8003830:	10210000 	.word	0x10210000
 8003834:	10110000 	.word	0x10110000
 8003838:	40011400 	.word	0x40011400

0800383c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	vTaskDelay(1000);
 8003844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003848:	f004 fae8 	bl	8007e1c <vTaskDelay>
 800384c:	e7fa      	b.n	8003844 <StartDefaultTask+0x8>

0800384e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800384e:	b480      	push	{r7}
 8003850:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003852:	b672      	cpsid	i
}
 8003854:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003856:	e7fe      	b.n	8003856 <Error_Handler+0x8>

08003858 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800385e:	4b18      	ldr	r3, [pc, #96]	; (80038c0 <HAL_MspInit+0x68>)
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <HAL_MspInit+0x68>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6193      	str	r3, [r2, #24]
 800386a:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <HAL_MspInit+0x68>)
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_MspInit+0x68>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	4a11      	ldr	r2, [pc, #68]	; (80038c0 <HAL_MspInit+0x68>)
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	61d3      	str	r3, [r2, #28]
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <HAL_MspInit+0x68>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800388e:	2200      	movs	r2, #0
 8003890:	210f      	movs	r1, #15
 8003892:	f06f 0001 	mvn.w	r0, #1
 8003896:	f000 fa80 	bl	8003d9a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <HAL_MspInit+0x6c>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <HAL_MspInit+0x6c>)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40010000 	.word	0x40010000

080038c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d0:	f107 0310 	add.w	r3, r7, #16
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a19      	ldr	r2, [pc, #100]	; (8003948 <HAL_SPI_MspInit+0x80>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d12b      	bne.n	8003940 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038e8:	4b18      	ldr	r3, [pc, #96]	; (800394c <HAL_SPI_MspInit+0x84>)
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	4a17      	ldr	r2, [pc, #92]	; (800394c <HAL_SPI_MspInit+0x84>)
 80038ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038f2:	6193      	str	r3, [r2, #24]
 80038f4:	4b15      	ldr	r3, [pc, #84]	; (800394c <HAL_SPI_MspInit+0x84>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_SPI_MspInit+0x84>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	4a11      	ldr	r2, [pc, #68]	; (800394c <HAL_SPI_MspInit+0x84>)
 8003906:	f043 0304 	orr.w	r3, r3, #4
 800390a:	6193      	str	r3, [r2, #24]
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <HAL_SPI_MspInit+0x84>)
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003918:	23a0      	movs	r3, #160	; 0xa0
 800391a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391c:	2302      	movs	r3, #2
 800391e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003920:	2303      	movs	r3, #3
 8003922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003924:	f107 0310 	add.w	r3, r7, #16
 8003928:	4619      	mov	r1, r3
 800392a:	4809      	ldr	r0, [pc, #36]	; (8003950 <HAL_SPI_MspInit+0x88>)
 800392c:	f000 fd74 	bl	8004418 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003930:	2200      	movs	r2, #0
 8003932:	2105      	movs	r1, #5
 8003934:	2023      	movs	r0, #35	; 0x23
 8003936:	f000 fa30 	bl	8003d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800393a:	2023      	movs	r0, #35	; 0x23
 800393c:	f000 fa49 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003940:	bf00      	nop
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40013000 	.word	0x40013000
 800394c:	40021000 	.word	0x40021000
 8003950:	40010800 	.word	0x40010800

08003954 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0d      	ldr	r2, [pc, #52]	; (8003998 <HAL_TIM_Base_MspInit+0x44>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d113      	bne.n	800398e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <HAL_TIM_Base_MspInit+0x48>)
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <HAL_TIM_Base_MspInit+0x48>)
 800396c:	f043 0302 	orr.w	r3, r3, #2
 8003970:	61d3      	str	r3, [r2, #28]
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_TIM_Base_MspInit+0x48>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2105      	movs	r1, #5
 8003982:	201d      	movs	r0, #29
 8003984:	f000 fa09 	bl	8003d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003988:	201d      	movs	r0, #29
 800398a:	f000 fa22 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40000400 	.word	0x40000400
 800399c:	40021000 	.word	0x40021000

080039a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a8:	f107 030c 	add.w	r3, r7, #12
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <HAL_TIM_MspPostInit+0x7c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d129      	bne.n	8003a14 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c0:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <HAL_TIM_MspPostInit+0x80>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4a16      	ldr	r2, [pc, #88]	; (8003a20 <HAL_TIM_MspPostInit+0x80>)
 80039c6:	f043 0310 	orr.w	r3, r3, #16
 80039ca:	6193      	str	r3, [r2, #24]
 80039cc:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <HAL_TIM_MspPostInit+0x80>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = oPWM_STEP1_Pin;
 80039d8:	2340      	movs	r3, #64	; 0x40
 80039da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039dc:	2302      	movs	r3, #2
 80039de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e0:	2302      	movs	r3, #2
 80039e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(oPWM_STEP1_GPIO_Port, &GPIO_InitStruct);
 80039e4:	f107 030c 	add.w	r3, r7, #12
 80039e8:	4619      	mov	r1, r3
 80039ea:	480e      	ldr	r0, [pc, #56]	; (8003a24 <HAL_TIM_MspPostInit+0x84>)
 80039ec:	f000 fd14 	bl	8004418 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <HAL_TIM_MspPostInit+0x88>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	4a06      	ldr	r2, [pc, #24]	; (8003a28 <HAL_TIM_MspPostInit+0x88>)
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003a14:	bf00      	nop
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40011000 	.word	0x40011000
 8003a28:	40010000 	.word	0x40010000

08003a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a30:	e7fe      	b.n	8003a30 <NMI_Handler+0x4>

08003a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a36:	e7fe      	b.n	8003a36 <HardFault_Handler+0x4>

08003a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a3c:	e7fe      	b.n	8003a3c <MemManage_Handler+0x4>

08003a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a42:	e7fe      	b.n	8003a42 <BusFault_Handler+0x4>

08003a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a48:	e7fe      	b.n	8003a48 <UsageFault_Handler+0x4>

08003a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a5a:	f000 f8ab 	bl	8003bb4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003a5e:	f004 fdb9 	bl	80085d4 <xTaskGetSchedulerState>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d001      	beq.n	8003a6c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003a68:	f005 faee 	bl	8009048 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003a74:	2004      	movs	r0, #4
 8003a76:	f000 fe93 	bl	80047a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003a82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a86:	f000 fe8b 	bl	80047a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a94:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <TIM3_IRQHandler+0x10>)
 8003a96:	f002 fac5 	bl	8006024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20003dd4 	.word	0x20003dd4

08003aa4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003aa8:	4802      	ldr	r0, [pc, #8]	; (8003ab4 <SPI1_IRQHandler+0x10>)
 8003aaa:	f001 feed 	bl	8005888 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20003e1c 	.word	0x20003e1c

08003ab8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003abc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003ac0:	f000 fe6e 	bl	80047a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003ac4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ac8:	f000 fe6a 	bl	80047a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003acc:	bf00      	nop
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003adc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003ade:	e003      	b.n	8003ae8 <LoopCopyDataInit>

08003ae0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003ae2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003ae4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003ae6:	3104      	adds	r1, #4

08003ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003ae8:	480a      	ldr	r0, [pc, #40]	; (8003b14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003aec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003aee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003af0:	d3f6      	bcc.n	8003ae0 <CopyDataInit>
  ldr r2, =_sbss
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003af4:	e002      	b.n	8003afc <LoopFillZerobss>

08003af6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003af6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003af8:	f842 3b04 	str.w	r3, [r2], #4

08003afc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003afc:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003afe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003b00:	d3f9      	bcc.n	8003af6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b02:	f7ff ffe5 	bl	8003ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b06:	f005 fc6b 	bl	80093e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b0a:	f7ff fc87 	bl	800341c <main>
  bx lr
 8003b0e:	4770      	bx	lr
  ldr r3, =_sidata
 8003b10:	0800955c 	.word	0x0800955c
  ldr r0, =_sdata
 8003b14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003b18:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8003b1c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003b20:	20003ed8 	.word	0x20003ed8

08003b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b24:	e7fe      	b.n	8003b24 <ADC1_2_IRQHandler>
	...

08003b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_Init+0x28>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <HAL_Init+0x28>)
 8003b32:	f043 0310 	orr.w	r3, r3, #16
 8003b36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b38:	2003      	movs	r0, #3
 8003b3a:	f000 f923 	bl	8003d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b3e:	200f      	movs	r0, #15
 8003b40:	f000 f808 	bl	8003b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b44:	f7ff fe88 	bl	8003858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40022000 	.word	0x40022000

08003b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b5c:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <HAL_InitTick+0x54>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_InitTick+0x58>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	4619      	mov	r1, r3
 8003b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f93b 	bl	8003dee <HAL_SYSTICK_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e00e      	b.n	8003ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b0f      	cmp	r3, #15
 8003b86:	d80a      	bhi.n	8003b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b90:	f000 f903 	bl	8003d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b94:	4a06      	ldr	r2, [pc, #24]	; (8003bb0 <HAL_InitTick+0x5c>)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e000      	b.n	8003ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	20000008 	.word	0x20000008
 8003bb0:	20000004 	.word	0x20000004

08003bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_IncTick+0x1c>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_IncTick+0x20>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	4a03      	ldr	r2, [pc, #12]	; (8003bd4 <HAL_IncTick+0x20>)
 8003bc6:	6013      	str	r3, [r2, #0]
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	20000008 	.word	0x20000008
 8003bd4:	20003e74 	.word	0x20003e74

08003bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return uwTick;
 8003bdc:	4b02      	ldr	r3, [pc, #8]	; (8003be8 <HAL_GetTick+0x10>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr
 8003be8:	20003e74 	.word	0x20003e74

08003bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1e:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	60d3      	str	r3, [r2, #12]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <__NVIC_GetPriorityGrouping+0x18>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 0307 	and.w	r3, r3, #7
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	db0b      	blt.n	8003c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	f003 021f 	and.w	r2, r3, #31
 8003c68:	4906      	ldr	r1, [pc, #24]	; (8003c84 <__NVIC_EnableIRQ+0x34>)
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2001      	movs	r0, #1
 8003c72:	fa00 f202 	lsl.w	r2, r0, r2
 8003c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	e000e100 	.word	0xe000e100

08003c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	6039      	str	r1, [r7, #0]
 8003c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	db0a      	blt.n	8003cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	490c      	ldr	r1, [pc, #48]	; (8003cd4 <__NVIC_SetPriority+0x4c>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	0112      	lsls	r2, r2, #4
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	440b      	add	r3, r1
 8003cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cb0:	e00a      	b.n	8003cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	4908      	ldr	r1, [pc, #32]	; (8003cd8 <__NVIC_SetPriority+0x50>)
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	3b04      	subs	r3, #4
 8003cc0:	0112      	lsls	r2, r2, #4
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	761a      	strb	r2, [r3, #24]
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	e000e100 	.word	0xe000e100
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b089      	sub	sp, #36	; 0x24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f1c3 0307 	rsb	r3, r3, #7
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	bf28      	it	cs
 8003cfa:	2304      	movcs	r3, #4
 8003cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2b06      	cmp	r3, #6
 8003d04:	d902      	bls.n	8003d0c <NVIC_EncodePriority+0x30>
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	3b03      	subs	r3, #3
 8003d0a:	e000      	b.n	8003d0e <NVIC_EncodePriority+0x32>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	401a      	ands	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d24:	f04f 31ff 	mov.w	r1, #4294967295
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	43d9      	mvns	r1, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d34:	4313      	orrs	r3, r2
         );
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3724      	adds	r7, #36	; 0x24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d50:	d301      	bcc.n	8003d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d52:	2301      	movs	r3, #1
 8003d54:	e00f      	b.n	8003d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d56:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <SysTick_Config+0x40>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d5e:	210f      	movs	r1, #15
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	f7ff ff90 	bl	8003c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <SysTick_Config+0x40>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d6e:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <SysTick_Config+0x40>)
 8003d70:	2207      	movs	r2, #7
 8003d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	e000e010 	.word	0xe000e010

08003d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff2d 	bl	8003bec <__NVIC_SetPriorityGrouping>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b086      	sub	sp, #24
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	4603      	mov	r3, r0
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dac:	f7ff ff42 	bl	8003c34 <__NVIC_GetPriorityGrouping>
 8003db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	6978      	ldr	r0, [r7, #20]
 8003db8:	f7ff ff90 	bl	8003cdc <NVIC_EncodePriority>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff5f 	bl	8003c88 <__NVIC_SetPriority>
}
 8003dca:	bf00      	nop
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	4603      	mov	r3, r0
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff35 	bl	8003c50 <__NVIC_EnableIRQ>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ffa2 	bl	8003d40 <SysTick_Config>
 8003dfc:	4603      	mov	r3, r0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d005      	beq.n	8003e2a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2204      	movs	r2, #4
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
 8003e28:	e0d6      	b.n	8003fd8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 020e 	bic.w	r2, r2, #14
 8003e38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	4b64      	ldr	r3, [pc, #400]	; (8003fe4 <HAL_DMA_Abort_IT+0x1dc>)
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d958      	bls.n	8003f08 <HAL_DMA_Abort_IT+0x100>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a63      	ldr	r2, [pc, #396]	; (8003fe8 <HAL_DMA_Abort_IT+0x1e0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d04f      	beq.n	8003f00 <HAL_DMA_Abort_IT+0xf8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a61      	ldr	r2, [pc, #388]	; (8003fec <HAL_DMA_Abort_IT+0x1e4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d048      	beq.n	8003efc <HAL_DMA_Abort_IT+0xf4>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a60      	ldr	r2, [pc, #384]	; (8003ff0 <HAL_DMA_Abort_IT+0x1e8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d040      	beq.n	8003ef6 <HAL_DMA_Abort_IT+0xee>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a5e      	ldr	r2, [pc, #376]	; (8003ff4 <HAL_DMA_Abort_IT+0x1ec>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d038      	beq.n	8003ef0 <HAL_DMA_Abort_IT+0xe8>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a5d      	ldr	r2, [pc, #372]	; (8003ff8 <HAL_DMA_Abort_IT+0x1f0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d030      	beq.n	8003eea <HAL_DMA_Abort_IT+0xe2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5b      	ldr	r2, [pc, #364]	; (8003ffc <HAL_DMA_Abort_IT+0x1f4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d028      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0xdc>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a53      	ldr	r2, [pc, #332]	; (8003fe4 <HAL_DMA_Abort_IT+0x1dc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d020      	beq.n	8003ede <HAL_DMA_Abort_IT+0xd6>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a57      	ldr	r2, [pc, #348]	; (8004000 <HAL_DMA_Abort_IT+0x1f8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d019      	beq.n	8003eda <HAL_DMA_Abort_IT+0xd2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a56      	ldr	r2, [pc, #344]	; (8004004 <HAL_DMA_Abort_IT+0x1fc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d012      	beq.n	8003ed6 <HAL_DMA_Abort_IT+0xce>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a54      	ldr	r2, [pc, #336]	; (8004008 <HAL_DMA_Abort_IT+0x200>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_DMA_Abort_IT+0xc8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a53      	ldr	r2, [pc, #332]	; (800400c <HAL_DMA_Abort_IT+0x204>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d102      	bne.n	8003eca <HAL_DMA_Abort_IT+0xc2>
 8003ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec8:	e01b      	b.n	8003f02 <HAL_DMA_Abort_IT+0xfa>
 8003eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ece:	e018      	b.n	8003f02 <HAL_DMA_Abort_IT+0xfa>
 8003ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ed4:	e015      	b.n	8003f02 <HAL_DMA_Abort_IT+0xfa>
 8003ed6:	2310      	movs	r3, #16
 8003ed8:	e013      	b.n	8003f02 <HAL_DMA_Abort_IT+0xfa>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e011      	b.n	8003f02 <HAL_DMA_Abort_IT+0xfa>
 8003ede:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ee2:	e00e      	b.n	8003f02 <HAL_DMA_Abort_IT+0xfa>
 8003ee4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ee8:	e00b      	b.n	8003f02 <HAL_DMA_Abort_IT+0xfa>
 8003eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eee:	e008      	b.n	8003f02 <HAL_DMA_Abort_IT+0xfa>
 8003ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ef4:	e005      	b.n	8003f02 <HAL_DMA_Abort_IT+0xfa>
 8003ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003efa:	e002      	b.n	8003f02 <HAL_DMA_Abort_IT+0xfa>
 8003efc:	2310      	movs	r3, #16
 8003efe:	e000      	b.n	8003f02 <HAL_DMA_Abort_IT+0xfa>
 8003f00:	2301      	movs	r3, #1
 8003f02:	4a43      	ldr	r2, [pc, #268]	; (8004010 <HAL_DMA_Abort_IT+0x208>)
 8003f04:	6053      	str	r3, [r2, #4]
 8003f06:	e057      	b.n	8003fb8 <HAL_DMA_Abort_IT+0x1b0>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a36      	ldr	r2, [pc, #216]	; (8003fe8 <HAL_DMA_Abort_IT+0x1e0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d04f      	beq.n	8003fb2 <HAL_DMA_Abort_IT+0x1aa>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a35      	ldr	r2, [pc, #212]	; (8003fec <HAL_DMA_Abort_IT+0x1e4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d048      	beq.n	8003fae <HAL_DMA_Abort_IT+0x1a6>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a33      	ldr	r2, [pc, #204]	; (8003ff0 <HAL_DMA_Abort_IT+0x1e8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d040      	beq.n	8003fa8 <HAL_DMA_Abort_IT+0x1a0>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a32      	ldr	r2, [pc, #200]	; (8003ff4 <HAL_DMA_Abort_IT+0x1ec>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d038      	beq.n	8003fa2 <HAL_DMA_Abort_IT+0x19a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a30      	ldr	r2, [pc, #192]	; (8003ff8 <HAL_DMA_Abort_IT+0x1f0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d030      	beq.n	8003f9c <HAL_DMA_Abort_IT+0x194>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a2f      	ldr	r2, [pc, #188]	; (8003ffc <HAL_DMA_Abort_IT+0x1f4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d028      	beq.n	8003f96 <HAL_DMA_Abort_IT+0x18e>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <HAL_DMA_Abort_IT+0x1dc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d020      	beq.n	8003f90 <HAL_DMA_Abort_IT+0x188>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2b      	ldr	r2, [pc, #172]	; (8004000 <HAL_DMA_Abort_IT+0x1f8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d019      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x184>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a29      	ldr	r2, [pc, #164]	; (8004004 <HAL_DMA_Abort_IT+0x1fc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d012      	beq.n	8003f88 <HAL_DMA_Abort_IT+0x180>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a28      	ldr	r2, [pc, #160]	; (8004008 <HAL_DMA_Abort_IT+0x200>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00a      	beq.n	8003f82 <HAL_DMA_Abort_IT+0x17a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a26      	ldr	r2, [pc, #152]	; (800400c <HAL_DMA_Abort_IT+0x204>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d102      	bne.n	8003f7c <HAL_DMA_Abort_IT+0x174>
 8003f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f7a:	e01b      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x1ac>
 8003f7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f80:	e018      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x1ac>
 8003f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f86:	e015      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x1ac>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	e013      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x1ac>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e011      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x1ac>
 8003f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f94:	e00e      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x1ac>
 8003f96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f9a:	e00b      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x1ac>
 8003f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa0:	e008      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x1ac>
 8003fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa6:	e005      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x1ac>
 8003fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fac:	e002      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x1ac>
 8003fae:	2310      	movs	r3, #16
 8003fb0:	e000      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x1ac>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	4a17      	ldr	r2, [pc, #92]	; (8004014 <HAL_DMA_Abort_IT+0x20c>)
 8003fb6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
    } 
  }
  return status;
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40020080 	.word	0x40020080
 8003fe8:	40020008 	.word	0x40020008
 8003fec:	4002001c 	.word	0x4002001c
 8003ff0:	40020030 	.word	0x40020030
 8003ff4:	40020044 	.word	0x40020044
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	4002006c 	.word	0x4002006c
 8004000:	40020408 	.word	0x40020408
 8004004:	4002041c 	.word	0x4002041c
 8004008:	40020430 	.word	0x40020430
 800400c:	40020444 	.word	0x40020444
 8004010:	40020400 	.word	0x40020400
 8004014:	40020000 	.word	0x40020000

08004018 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800402a:	2300      	movs	r3, #0
 800402c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004032:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <HAL_FLASH_Program+0xd8>)
 8004034:	7e1b      	ldrb	r3, [r3, #24]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_FLASH_Program+0x26>
 800403a:	2302      	movs	r3, #2
 800403c:	e054      	b.n	80040e8 <HAL_FLASH_Program+0xd0>
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_FLASH_Program+0xd8>)
 8004040:	2201      	movs	r2, #1
 8004042:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004044:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004048:	f000 f8a8 	bl	800419c <FLASH_WaitForLastOperation>
 800404c:	4603      	mov	r3, r0
 800404e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004050:	7dfb      	ldrb	r3, [r7, #23]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d144      	bne.n	80040e0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d102      	bne.n	8004062 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800405c:	2301      	movs	r3, #1
 800405e:	757b      	strb	r3, [r7, #21]
 8004060:	e007      	b.n	8004072 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d102      	bne.n	800406e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004068:	2302      	movs	r3, #2
 800406a:	757b      	strb	r3, [r7, #21]
 800406c:	e001      	b.n	8004072 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800406e:	2304      	movs	r3, #4
 8004070:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004072:	2300      	movs	r3, #0
 8004074:	75bb      	strb	r3, [r7, #22]
 8004076:	e02d      	b.n	80040d4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004078:	7dbb      	ldrb	r3, [r7, #22]
 800407a:	005a      	lsls	r2, r3, #1
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	eb02 0c03 	add.w	ip, r2, r3
 8004082:	7dbb      	ldrb	r3, [r7, #22]
 8004084:	0119      	lsls	r1, r3, #4
 8004086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800408a:	f1c1 0620 	rsb	r6, r1, #32
 800408e:	f1a1 0020 	sub.w	r0, r1, #32
 8004092:	fa22 f401 	lsr.w	r4, r2, r1
 8004096:	fa03 f606 	lsl.w	r6, r3, r6
 800409a:	4334      	orrs	r4, r6
 800409c:	fa23 f000 	lsr.w	r0, r3, r0
 80040a0:	4304      	orrs	r4, r0
 80040a2:	fa23 f501 	lsr.w	r5, r3, r1
 80040a6:	b2a3      	uxth	r3, r4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4660      	mov	r0, ip
 80040ac:	f000 f85a 	bl	8004164 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040b4:	f000 f872 	bl	800419c <FLASH_WaitForLastOperation>
 80040b8:	4603      	mov	r3, r0
 80040ba:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80040bc:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <HAL_FLASH_Program+0xdc>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	4a0c      	ldr	r2, [pc, #48]	; (80040f4 <HAL_FLASH_Program+0xdc>)
 80040c2:	f023 0301 	bic.w	r3, r3, #1
 80040c6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d107      	bne.n	80040de <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80040ce:	7dbb      	ldrb	r3, [r7, #22]
 80040d0:	3301      	adds	r3, #1
 80040d2:	75bb      	strb	r3, [r7, #22]
 80040d4:	7dba      	ldrb	r2, [r7, #22]
 80040d6:	7d7b      	ldrb	r3, [r7, #21]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d3cd      	bcc.n	8004078 <HAL_FLASH_Program+0x60>
 80040dc:	e000      	b.n	80040e0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80040de:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80040e0:	4b03      	ldr	r3, [pc, #12]	; (80040f0 <HAL_FLASH_Program+0xd8>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	761a      	strb	r2, [r3, #24]

  return status;
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f0:	20003e78 	.word	0x20003e78
 80040f4:	40022000 	.word	0x40022000

080040f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004102:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <HAL_FLASH_Unlock+0x40>)
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <HAL_FLASH_Unlock+0x40>)
 8004110:	4a0a      	ldr	r2, [pc, #40]	; (800413c <HAL_FLASH_Unlock+0x44>)
 8004112:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004114:	4b08      	ldr	r3, [pc, #32]	; (8004138 <HAL_FLASH_Unlock+0x40>)
 8004116:	4a0a      	ldr	r2, [pc, #40]	; (8004140 <HAL_FLASH_Unlock+0x48>)
 8004118:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <HAL_FLASH_Unlock+0x40>)
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800412a:	79fb      	ldrb	r3, [r7, #7]
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40022000 	.word	0x40022000
 800413c:	45670123 	.word	0x45670123
 8004140:	cdef89ab 	.word	0xcdef89ab

08004144 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <HAL_FLASH_Lock+0x1c>)
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	4a04      	ldr	r2, [pc, #16]	; (8004160 <HAL_FLASH_Lock+0x1c>)
 800414e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004152:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40022000 	.word	0x40022000

08004164 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004170:	4b08      	ldr	r3, [pc, #32]	; (8004194 <FLASH_Program_HalfWord+0x30>)
 8004172:	2200      	movs	r2, #0
 8004174:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004176:	4b08      	ldr	r3, [pc, #32]	; (8004198 <FLASH_Program_HalfWord+0x34>)
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	4a07      	ldr	r2, [pc, #28]	; (8004198 <FLASH_Program_HalfWord+0x34>)
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	887a      	ldrh	r2, [r7, #2]
 8004186:	801a      	strh	r2, [r3, #0]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20003e78 	.word	0x20003e78
 8004198:	40022000 	.word	0x40022000

0800419c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80041a4:	f7ff fd18 	bl	8003bd8 <HAL_GetTick>
 80041a8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80041aa:	e010      	b.n	80041ce <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	d00c      	beq.n	80041ce <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <FLASH_WaitForLastOperation+0x2e>
 80041ba:	f7ff fd0d 	bl	8003bd8 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d201      	bcs.n	80041ce <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e025      	b.n	800421a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80041ce:	4b15      	ldr	r3, [pc, #84]	; (8004224 <FLASH_WaitForLastOperation+0x88>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e8      	bne.n	80041ac <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80041da:	4b12      	ldr	r3, [pc, #72]	; (8004224 <FLASH_WaitForLastOperation+0x88>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80041e6:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <FLASH_WaitForLastOperation+0x88>)
 80041e8:	2220      	movs	r2, #32
 80041ea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80041ec:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <FLASH_WaitForLastOperation+0x88>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10b      	bne.n	8004210 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80041f8:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <FLASH_WaitForLastOperation+0x88>)
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004204:	4b07      	ldr	r3, [pc, #28]	; (8004224 <FLASH_WaitForLastOperation+0x88>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004210:	f000 f80a 	bl	8004228 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40022000 	.word	0x40022000

08004228 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004232:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <FLASH_SetErrorCode+0x98>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800423e:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <FLASH_SetErrorCode+0x9c>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f043 0302 	orr.w	r3, r3, #2
 8004246:	4a1f      	ldr	r2, [pc, #124]	; (80042c4 <FLASH_SetErrorCode+0x9c>)
 8004248:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f043 0310 	orr.w	r3, r3, #16
 8004250:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004252:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <FLASH_SetErrorCode+0x98>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800425e:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <FLASH_SetErrorCode+0x9c>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <FLASH_SetErrorCode+0x9c>)
 8004268:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004272:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <FLASH_SetErrorCode+0x98>)
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <FLASH_SetErrorCode+0x9c>)
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	4a0f      	ldr	r2, [pc, #60]	; (80042c4 <FLASH_SetErrorCode+0x9c>)
 8004288:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <FLASH_SetErrorCode+0x98>)
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	4a0c      	ldr	r2, [pc, #48]	; (80042c0 <FLASH_SetErrorCode+0x98>)
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f240 1201 	movw	r2, #257	; 0x101
 800429c:	4293      	cmp	r3, r2
 800429e:	d106      	bne.n	80042ae <FLASH_SetErrorCode+0x86>
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <FLASH_SetErrorCode+0x98>)
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	4a06      	ldr	r2, [pc, #24]	; (80042c0 <FLASH_SetErrorCode+0x98>)
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	61d3      	str	r3, [r2, #28]
}  
 80042ac:	e002      	b.n	80042b4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80042ae:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <FLASH_SetErrorCode+0x98>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60d3      	str	r3, [r2, #12]
}  
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40022000 	.word	0x40022000
 80042c4:	20003e78 	.word	0x20003e78

080042c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80042da:	4b2f      	ldr	r3, [pc, #188]	; (8004398 <HAL_FLASHEx_Erase+0xd0>)
 80042dc:	7e1b      	ldrb	r3, [r3, #24]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_FLASHEx_Erase+0x1e>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e053      	b.n	800438e <HAL_FLASHEx_Erase+0xc6>
 80042e6:	4b2c      	ldr	r3, [pc, #176]	; (8004398 <HAL_FLASHEx_Erase+0xd0>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d116      	bne.n	8004322 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80042f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042f8:	f7ff ff50 	bl	800419c <FLASH_WaitForLastOperation>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d141      	bne.n	8004386 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004302:	2001      	movs	r0, #1
 8004304:	f000 f84c 	bl	80043a0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004308:	f24c 3050 	movw	r0, #50000	; 0xc350
 800430c:	f7ff ff46 	bl	800419c <FLASH_WaitForLastOperation>
 8004310:	4603      	mov	r3, r0
 8004312:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004314:	4b21      	ldr	r3, [pc, #132]	; (800439c <HAL_FLASHEx_Erase+0xd4>)
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	4a20      	ldr	r2, [pc, #128]	; (800439c <HAL_FLASHEx_Erase+0xd4>)
 800431a:	f023 0304 	bic.w	r3, r3, #4
 800431e:	6113      	str	r3, [r2, #16]
 8004320:	e031      	b.n	8004386 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004322:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004326:	f7ff ff39 	bl	800419c <FLASH_WaitForLastOperation>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d12a      	bne.n	8004386 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f04f 32ff 	mov.w	r2, #4294967295
 8004336:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	e019      	b.n	8004374 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004340:	68b8      	ldr	r0, [r7, #8]
 8004342:	f000 f849 	bl	80043d8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004346:	f24c 3050 	movw	r0, #50000	; 0xc350
 800434a:	f7ff ff27 	bl	800419c <FLASH_WaitForLastOperation>
 800434e:	4603      	mov	r3, r0
 8004350:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <HAL_FLASHEx_Erase+0xd4>)
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	4a11      	ldr	r2, [pc, #68]	; (800439c <HAL_FLASHEx_Erase+0xd4>)
 8004358:	f023 0302 	bic.w	r3, r3, #2
 800435c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	601a      	str	r2, [r3, #0]
            break;
 800436a:	e00c      	b.n	8004386 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	02da      	lsls	r2, r3, #11
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	d3dc      	bcc.n	8004340 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004386:	4b04      	ldr	r3, [pc, #16]	; (8004398 <HAL_FLASHEx_Erase+0xd0>)
 8004388:	2200      	movs	r2, #0
 800438a:	761a      	strb	r2, [r3, #24]

  return status;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20003e78 	.word	0x20003e78
 800439c:	40022000 	.word	0x40022000

080043a0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043a8:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <FLASH_MassErase+0x30>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <FLASH_MassErase+0x34>)
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <FLASH_MassErase+0x34>)
 80043b4:	f043 0304 	orr.w	r3, r3, #4
 80043b8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <FLASH_MassErase+0x34>)
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	4a05      	ldr	r2, [pc, #20]	; (80043d4 <FLASH_MassErase+0x34>)
 80043c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043c4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr
 80043d0:	20003e78 	.word	0x20003e78
 80043d4:	40022000 	.word	0x40022000

080043d8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <FLASH_PageErase+0x38>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <FLASH_PageErase+0x3c>)
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <FLASH_PageErase+0x3c>)
 80043ec:	f043 0302 	orr.w	r3, r3, #2
 80043f0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <FLASH_PageErase+0x3c>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <FLASH_PageErase+0x3c>)
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	4a05      	ldr	r2, [pc, #20]	; (8004414 <FLASH_PageErase+0x3c>)
 80043fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004402:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	20003e78 	.word	0x20003e78
 8004414:	40022000 	.word	0x40022000

08004418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004418:	b480      	push	{r7}
 800441a:	b08b      	sub	sp, #44	; 0x2c
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004426:	2300      	movs	r3, #0
 8004428:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800442a:	e179      	b.n	8004720 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800442c:	2201      	movs	r2, #1
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	429a      	cmp	r2, r3
 8004446:	f040 8168 	bne.w	800471a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4aa0      	ldr	r2, [pc, #640]	; (80046d0 <HAL_GPIO_Init+0x2b8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d05e      	beq.n	8004512 <HAL_GPIO_Init+0xfa>
 8004454:	4a9e      	ldr	r2, [pc, #632]	; (80046d0 <HAL_GPIO_Init+0x2b8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d875      	bhi.n	8004546 <HAL_GPIO_Init+0x12e>
 800445a:	4a9e      	ldr	r2, [pc, #632]	; (80046d4 <HAL_GPIO_Init+0x2bc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d058      	beq.n	8004512 <HAL_GPIO_Init+0xfa>
 8004460:	4a9c      	ldr	r2, [pc, #624]	; (80046d4 <HAL_GPIO_Init+0x2bc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d86f      	bhi.n	8004546 <HAL_GPIO_Init+0x12e>
 8004466:	4a9c      	ldr	r2, [pc, #624]	; (80046d8 <HAL_GPIO_Init+0x2c0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d052      	beq.n	8004512 <HAL_GPIO_Init+0xfa>
 800446c:	4a9a      	ldr	r2, [pc, #616]	; (80046d8 <HAL_GPIO_Init+0x2c0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d869      	bhi.n	8004546 <HAL_GPIO_Init+0x12e>
 8004472:	4a9a      	ldr	r2, [pc, #616]	; (80046dc <HAL_GPIO_Init+0x2c4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d04c      	beq.n	8004512 <HAL_GPIO_Init+0xfa>
 8004478:	4a98      	ldr	r2, [pc, #608]	; (80046dc <HAL_GPIO_Init+0x2c4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d863      	bhi.n	8004546 <HAL_GPIO_Init+0x12e>
 800447e:	4a98      	ldr	r2, [pc, #608]	; (80046e0 <HAL_GPIO_Init+0x2c8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d046      	beq.n	8004512 <HAL_GPIO_Init+0xfa>
 8004484:	4a96      	ldr	r2, [pc, #600]	; (80046e0 <HAL_GPIO_Init+0x2c8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d85d      	bhi.n	8004546 <HAL_GPIO_Init+0x12e>
 800448a:	2b12      	cmp	r3, #18
 800448c:	d82a      	bhi.n	80044e4 <HAL_GPIO_Init+0xcc>
 800448e:	2b12      	cmp	r3, #18
 8004490:	d859      	bhi.n	8004546 <HAL_GPIO_Init+0x12e>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <HAL_GPIO_Init+0x80>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	08004513 	.word	0x08004513
 800449c:	080044ed 	.word	0x080044ed
 80044a0:	080044ff 	.word	0x080044ff
 80044a4:	08004541 	.word	0x08004541
 80044a8:	08004547 	.word	0x08004547
 80044ac:	08004547 	.word	0x08004547
 80044b0:	08004547 	.word	0x08004547
 80044b4:	08004547 	.word	0x08004547
 80044b8:	08004547 	.word	0x08004547
 80044bc:	08004547 	.word	0x08004547
 80044c0:	08004547 	.word	0x08004547
 80044c4:	08004547 	.word	0x08004547
 80044c8:	08004547 	.word	0x08004547
 80044cc:	08004547 	.word	0x08004547
 80044d0:	08004547 	.word	0x08004547
 80044d4:	08004547 	.word	0x08004547
 80044d8:	08004547 	.word	0x08004547
 80044dc:	080044f5 	.word	0x080044f5
 80044e0:	08004509 	.word	0x08004509
 80044e4:	4a7f      	ldr	r2, [pc, #508]	; (80046e4 <HAL_GPIO_Init+0x2cc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044ea:	e02c      	b.n	8004546 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	623b      	str	r3, [r7, #32]
          break;
 80044f2:	e029      	b.n	8004548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	3304      	adds	r3, #4
 80044fa:	623b      	str	r3, [r7, #32]
          break;
 80044fc:	e024      	b.n	8004548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	3308      	adds	r3, #8
 8004504:	623b      	str	r3, [r7, #32]
          break;
 8004506:	e01f      	b.n	8004548 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	330c      	adds	r3, #12
 800450e:	623b      	str	r3, [r7, #32]
          break;
 8004510:	e01a      	b.n	8004548 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d102      	bne.n	8004520 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800451a:	2304      	movs	r3, #4
 800451c:	623b      	str	r3, [r7, #32]
          break;
 800451e:	e013      	b.n	8004548 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004528:	2308      	movs	r3, #8
 800452a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	611a      	str	r2, [r3, #16]
          break;
 8004532:	e009      	b.n	8004548 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004534:	2308      	movs	r3, #8
 8004536:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	615a      	str	r2, [r3, #20]
          break;
 800453e:	e003      	b.n	8004548 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004540:	2300      	movs	r3, #0
 8004542:	623b      	str	r3, [r7, #32]
          break;
 8004544:	e000      	b.n	8004548 <HAL_GPIO_Init+0x130>
          break;
 8004546:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2bff      	cmp	r3, #255	; 0xff
 800454c:	d801      	bhi.n	8004552 <HAL_GPIO_Init+0x13a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	e001      	b.n	8004556 <HAL_GPIO_Init+0x13e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3304      	adds	r3, #4
 8004556:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2bff      	cmp	r3, #255	; 0xff
 800455c:	d802      	bhi.n	8004564 <HAL_GPIO_Init+0x14c>
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	e002      	b.n	800456a <HAL_GPIO_Init+0x152>
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	3b08      	subs	r3, #8
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	210f      	movs	r1, #15
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	401a      	ands	r2, r3
 800457c:	6a39      	ldr	r1, [r7, #32]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	fa01 f303 	lsl.w	r3, r1, r3
 8004584:	431a      	orrs	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80c1 	beq.w	800471a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004598:	4b53      	ldr	r3, [pc, #332]	; (80046e8 <HAL_GPIO_Init+0x2d0>)
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	4a52      	ldr	r2, [pc, #328]	; (80046e8 <HAL_GPIO_Init+0x2d0>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6193      	str	r3, [r2, #24]
 80045a4:	4b50      	ldr	r3, [pc, #320]	; (80046e8 <HAL_GPIO_Init+0x2d0>)
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045b0:	4a4e      	ldr	r2, [pc, #312]	; (80046ec <HAL_GPIO_Init+0x2d4>)
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	089b      	lsrs	r3, r3, #2
 80045b6:	3302      	adds	r3, #2
 80045b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	f003 0303 	and.w	r3, r3, #3
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	220f      	movs	r2, #15
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4013      	ands	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a46      	ldr	r2, [pc, #280]	; (80046f0 <HAL_GPIO_Init+0x2d8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d01f      	beq.n	800461c <HAL_GPIO_Init+0x204>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a45      	ldr	r2, [pc, #276]	; (80046f4 <HAL_GPIO_Init+0x2dc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d019      	beq.n	8004618 <HAL_GPIO_Init+0x200>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a44      	ldr	r2, [pc, #272]	; (80046f8 <HAL_GPIO_Init+0x2e0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d013      	beq.n	8004614 <HAL_GPIO_Init+0x1fc>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a43      	ldr	r2, [pc, #268]	; (80046fc <HAL_GPIO_Init+0x2e4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00d      	beq.n	8004610 <HAL_GPIO_Init+0x1f8>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a42      	ldr	r2, [pc, #264]	; (8004700 <HAL_GPIO_Init+0x2e8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d007      	beq.n	800460c <HAL_GPIO_Init+0x1f4>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a41      	ldr	r2, [pc, #260]	; (8004704 <HAL_GPIO_Init+0x2ec>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d101      	bne.n	8004608 <HAL_GPIO_Init+0x1f0>
 8004604:	2305      	movs	r3, #5
 8004606:	e00a      	b.n	800461e <HAL_GPIO_Init+0x206>
 8004608:	2306      	movs	r3, #6
 800460a:	e008      	b.n	800461e <HAL_GPIO_Init+0x206>
 800460c:	2304      	movs	r3, #4
 800460e:	e006      	b.n	800461e <HAL_GPIO_Init+0x206>
 8004610:	2303      	movs	r3, #3
 8004612:	e004      	b.n	800461e <HAL_GPIO_Init+0x206>
 8004614:	2302      	movs	r3, #2
 8004616:	e002      	b.n	800461e <HAL_GPIO_Init+0x206>
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <HAL_GPIO_Init+0x206>
 800461c:	2300      	movs	r3, #0
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	f002 0203 	and.w	r2, r2, #3
 8004624:	0092      	lsls	r2, r2, #2
 8004626:	4093      	lsls	r3, r2
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800462e:	492f      	ldr	r1, [pc, #188]	; (80046ec <HAL_GPIO_Init+0x2d4>)
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	3302      	adds	r3, #2
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d006      	beq.n	8004656 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004648:	4b2f      	ldr	r3, [pc, #188]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	492e      	ldr	r1, [pc, #184]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]
 8004654:	e006      	b.n	8004664 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004656:	4b2c      	ldr	r3, [pc, #176]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	43db      	mvns	r3, r3
 800465e:	492a      	ldr	r1, [pc, #168]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 8004660:	4013      	ands	r3, r2
 8004662:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d006      	beq.n	800467e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004670:	4b25      	ldr	r3, [pc, #148]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	4924      	ldr	r1, [pc, #144]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
 800467c:	e006      	b.n	800468c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800467e:	4b22      	ldr	r3, [pc, #136]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	43db      	mvns	r3, r3
 8004686:	4920      	ldr	r1, [pc, #128]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 8004688:	4013      	ands	r3, r2
 800468a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d006      	beq.n	80046a6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004698:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	491a      	ldr	r1, [pc, #104]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]
 80046a4:	e006      	b.n	80046b4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046a6:	4b18      	ldr	r3, [pc, #96]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	4916      	ldr	r1, [pc, #88]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d025      	beq.n	800470c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046c0:	4b11      	ldr	r3, [pc, #68]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	4910      	ldr	r1, [pc, #64]	; (8004708 <HAL_GPIO_Init+0x2f0>)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60cb      	str	r3, [r1, #12]
 80046cc:	e025      	b.n	800471a <HAL_GPIO_Init+0x302>
 80046ce:	bf00      	nop
 80046d0:	10320000 	.word	0x10320000
 80046d4:	10310000 	.word	0x10310000
 80046d8:	10220000 	.word	0x10220000
 80046dc:	10210000 	.word	0x10210000
 80046e0:	10120000 	.word	0x10120000
 80046e4:	10110000 	.word	0x10110000
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40010800 	.word	0x40010800
 80046f4:	40010c00 	.word	0x40010c00
 80046f8:	40011000 	.word	0x40011000
 80046fc:	40011400 	.word	0x40011400
 8004700:	40011800 	.word	0x40011800
 8004704:	40011c00 	.word	0x40011c00
 8004708:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_GPIO_Init+0x324>)
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	43db      	mvns	r3, r3
 8004714:	4909      	ldr	r1, [pc, #36]	; (800473c <HAL_GPIO_Init+0x324>)
 8004716:	4013      	ands	r3, r2
 8004718:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	3301      	adds	r3, #1
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	fa22 f303 	lsr.w	r3, r2, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	f47f ae7e 	bne.w	800442c <HAL_GPIO_Init+0x14>
  }
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	372c      	adds	r7, #44	; 0x2c
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	40010400 	.word	0x40010400

08004740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	887b      	ldrh	r3, [r7, #2]
 8004752:	4013      	ands	r3, r2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	e001      	b.n	8004762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800475e:	2300      	movs	r3, #0
 8004760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004762:	7bfb      	ldrb	r3, [r7, #15]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	460b      	mov	r3, r1
 8004778:	807b      	strh	r3, [r7, #2]
 800477a:	4613      	mov	r3, r2
 800477c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800477e:	787b      	ldrb	r3, [r7, #1]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004784:	887a      	ldrh	r2, [r7, #2]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800478a:	e003      	b.n	8004794 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800478c:	887b      	ldrh	r3, [r7, #2]
 800478e:	041a      	lsls	r2, r3, #16
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	611a      	str	r2, [r3, #16]
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047aa:	4b08      	ldr	r3, [pc, #32]	; (80047cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047ac:	695a      	ldr	r2, [r3, #20]
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d006      	beq.n	80047c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047b6:	4a05      	ldr	r2, [pc, #20]	; (80047cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047bc:	88fb      	ldrh	r3, [r7, #6]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fc fc74 	bl	80010ac <HAL_GPIO_EXTI_Callback>
  }
}
 80047c4:	bf00      	nop
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40010400 	.word	0x40010400

080047d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e26c      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8087 	beq.w	80048fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047f0:	4b92      	ldr	r3, [pc, #584]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d00c      	beq.n	8004816 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047fc:	4b8f      	ldr	r3, [pc, #572]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 030c 	and.w	r3, r3, #12
 8004804:	2b08      	cmp	r3, #8
 8004806:	d112      	bne.n	800482e <HAL_RCC_OscConfig+0x5e>
 8004808:	4b8c      	ldr	r3, [pc, #560]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004814:	d10b      	bne.n	800482e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004816:	4b89      	ldr	r3, [pc, #548]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d06c      	beq.n	80048fc <HAL_RCC_OscConfig+0x12c>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d168      	bne.n	80048fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e246      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004836:	d106      	bne.n	8004846 <HAL_RCC_OscConfig+0x76>
 8004838:	4b80      	ldr	r3, [pc, #512]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a7f      	ldr	r2, [pc, #508]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 800483e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	e02e      	b.n	80048a4 <HAL_RCC_OscConfig+0xd4>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10c      	bne.n	8004868 <HAL_RCC_OscConfig+0x98>
 800484e:	4b7b      	ldr	r3, [pc, #492]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a7a      	ldr	r2, [pc, #488]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	4b78      	ldr	r3, [pc, #480]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a77      	ldr	r2, [pc, #476]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	e01d      	b.n	80048a4 <HAL_RCC_OscConfig+0xd4>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004870:	d10c      	bne.n	800488c <HAL_RCC_OscConfig+0xbc>
 8004872:	4b72      	ldr	r3, [pc, #456]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a71      	ldr	r2, [pc, #452]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b6f      	ldr	r3, [pc, #444]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a6e      	ldr	r2, [pc, #440]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e00b      	b.n	80048a4 <HAL_RCC_OscConfig+0xd4>
 800488c:	4b6b      	ldr	r3, [pc, #428]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a6a      	ldr	r2, [pc, #424]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	4b68      	ldr	r3, [pc, #416]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a67      	ldr	r2, [pc, #412]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 800489e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d013      	beq.n	80048d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7ff f994 	bl	8003bd8 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b4:	f7ff f990 	bl	8003bd8 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b64      	cmp	r3, #100	; 0x64
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e1fa      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	4b5d      	ldr	r3, [pc, #372]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0xe4>
 80048d2:	e014      	b.n	80048fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7ff f980 	bl	8003bd8 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048dc:	f7ff f97c 	bl	8003bd8 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e1e6      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ee:	4b53      	ldr	r3, [pc, #332]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x10c>
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d063      	beq.n	80049d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800490a:	4b4c      	ldr	r3, [pc, #304]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004916:	4b49      	ldr	r3, [pc, #292]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 030c 	and.w	r3, r3, #12
 800491e:	2b08      	cmp	r3, #8
 8004920:	d11c      	bne.n	800495c <HAL_RCC_OscConfig+0x18c>
 8004922:	4b46      	ldr	r3, [pc, #280]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d116      	bne.n	800495c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492e:	4b43      	ldr	r3, [pc, #268]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_RCC_OscConfig+0x176>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d001      	beq.n	8004946 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e1ba      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004946:	4b3d      	ldr	r3, [pc, #244]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4939      	ldr	r1, [pc, #228]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495a:	e03a      	b.n	80049d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004964:	4b36      	ldr	r3, [pc, #216]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496a:	f7ff f935 	bl	8003bd8 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004972:	f7ff f931 	bl	8003bd8 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e19b      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004984:	4b2d      	ldr	r3, [pc, #180]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f0      	beq.n	8004972 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004990:	4b2a      	ldr	r3, [pc, #168]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4927      	ldr	r1, [pc, #156]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
 80049a4:	e015      	b.n	80049d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a6:	4b26      	ldr	r3, [pc, #152]	; (8004a40 <HAL_RCC_OscConfig+0x270>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7ff f914 	bl	8003bd8 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b4:	f7ff f910 	bl	8003bd8 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e17a      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c6:	4b1d      	ldr	r3, [pc, #116]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d03a      	beq.n	8004a54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d019      	beq.n	8004a1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e6:	4b17      	ldr	r3, [pc, #92]	; (8004a44 <HAL_RCC_OscConfig+0x274>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ec:	f7ff f8f4 	bl	8003bd8 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f4:	f7ff f8f0 	bl	8003bd8 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e15a      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <HAL_RCC_OscConfig+0x26c>)
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a12:	2001      	movs	r0, #1
 8004a14:	f000 faa6 	bl	8004f64 <RCC_Delay>
 8004a18:	e01c      	b.n	8004a54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a1a:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <HAL_RCC_OscConfig+0x274>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a20:	f7ff f8da 	bl	8003bd8 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a26:	e00f      	b.n	8004a48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a28:	f7ff f8d6 	bl	8003bd8 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d908      	bls.n	8004a48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e140      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	42420000 	.word	0x42420000
 8004a44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a48:	4b9e      	ldr	r3, [pc, #632]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e9      	bne.n	8004a28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80a6 	beq.w	8004bae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a66:	4b97      	ldr	r3, [pc, #604]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a72:	4b94      	ldr	r3, [pc, #592]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	4a93      	ldr	r2, [pc, #588]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	61d3      	str	r3, [r2, #28]
 8004a7e:	4b91      	ldr	r3, [pc, #580]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a86:	60bb      	str	r3, [r7, #8]
 8004a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8e:	4b8e      	ldr	r3, [pc, #568]	; (8004cc8 <HAL_RCC_OscConfig+0x4f8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d118      	bne.n	8004acc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a9a:	4b8b      	ldr	r3, [pc, #556]	; (8004cc8 <HAL_RCC_OscConfig+0x4f8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a8a      	ldr	r2, [pc, #552]	; (8004cc8 <HAL_RCC_OscConfig+0x4f8>)
 8004aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aa6:	f7ff f897 	bl	8003bd8 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aae:	f7ff f893 	bl	8003bd8 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b64      	cmp	r3, #100	; 0x64
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e0fd      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac0:	4b81      	ldr	r3, [pc, #516]	; (8004cc8 <HAL_RCC_OscConfig+0x4f8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0f0      	beq.n	8004aae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d106      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x312>
 8004ad4:	4b7b      	ldr	r3, [pc, #492]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	4a7a      	ldr	r2, [pc, #488]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	6213      	str	r3, [r2, #32]
 8004ae0:	e02d      	b.n	8004b3e <HAL_RCC_OscConfig+0x36e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10c      	bne.n	8004b04 <HAL_RCC_OscConfig+0x334>
 8004aea:	4b76      	ldr	r3, [pc, #472]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	4a75      	ldr	r2, [pc, #468]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004af0:	f023 0301 	bic.w	r3, r3, #1
 8004af4:	6213      	str	r3, [r2, #32]
 8004af6:	4b73      	ldr	r3, [pc, #460]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	4a72      	ldr	r2, [pc, #456]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004afc:	f023 0304 	bic.w	r3, r3, #4
 8004b00:	6213      	str	r3, [r2, #32]
 8004b02:	e01c      	b.n	8004b3e <HAL_RCC_OscConfig+0x36e>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2b05      	cmp	r3, #5
 8004b0a:	d10c      	bne.n	8004b26 <HAL_RCC_OscConfig+0x356>
 8004b0c:	4b6d      	ldr	r3, [pc, #436]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	4a6c      	ldr	r2, [pc, #432]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b12:	f043 0304 	orr.w	r3, r3, #4
 8004b16:	6213      	str	r3, [r2, #32]
 8004b18:	4b6a      	ldr	r3, [pc, #424]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	4a69      	ldr	r2, [pc, #420]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	6213      	str	r3, [r2, #32]
 8004b24:	e00b      	b.n	8004b3e <HAL_RCC_OscConfig+0x36e>
 8004b26:	4b67      	ldr	r3, [pc, #412]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	4a66      	ldr	r2, [pc, #408]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	6213      	str	r3, [r2, #32]
 8004b32:	4b64      	ldr	r3, [pc, #400]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	4a63      	ldr	r2, [pc, #396]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b38:	f023 0304 	bic.w	r3, r3, #4
 8004b3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d015      	beq.n	8004b72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b46:	f7ff f847 	bl	8003bd8 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4c:	e00a      	b.n	8004b64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4e:	f7ff f843 	bl	8003bd8 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e0ab      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b64:	4b57      	ldr	r3, [pc, #348]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ee      	beq.n	8004b4e <HAL_RCC_OscConfig+0x37e>
 8004b70:	e014      	b.n	8004b9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b72:	f7ff f831 	bl	8003bd8 <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b78:	e00a      	b.n	8004b90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7a:	f7ff f82d 	bl	8003bd8 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e095      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b90:	4b4c      	ldr	r3, [pc, #304]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1ee      	bne.n	8004b7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d105      	bne.n	8004bae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba2:	4b48      	ldr	r3, [pc, #288]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	4a47      	ldr	r2, [pc, #284]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 8081 	beq.w	8004cba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bb8:	4b42      	ldr	r3, [pc, #264]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 030c 	and.w	r3, r3, #12
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d061      	beq.n	8004c88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d146      	bne.n	8004c5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bcc:	4b3f      	ldr	r3, [pc, #252]	; (8004ccc <HAL_RCC_OscConfig+0x4fc>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd2:	f7ff f801 	bl	8003bd8 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bda:	f7fe fffd 	bl	8003bd8 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e067      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bec:	4b35      	ldr	r3, [pc, #212]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f0      	bne.n	8004bda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c00:	d108      	bne.n	8004c14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c02:	4b30      	ldr	r3, [pc, #192]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	492d      	ldr	r1, [pc, #180]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c14:	4b2b      	ldr	r3, [pc, #172]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a19      	ldr	r1, [r3, #32]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	430b      	orrs	r3, r1
 8004c26:	4927      	ldr	r1, [pc, #156]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c2c:	4b27      	ldr	r3, [pc, #156]	; (8004ccc <HAL_RCC_OscConfig+0x4fc>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c32:	f7fe ffd1 	bl	8003bd8 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3a:	f7fe ffcd 	bl	8003bd8 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e037      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x46a>
 8004c58:	e02f      	b.n	8004cba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5a:	4b1c      	ldr	r3, [pc, #112]	; (8004ccc <HAL_RCC_OscConfig+0x4fc>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c60:	f7fe ffba 	bl	8003bd8 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c68:	f7fe ffb6 	bl	8003bd8 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e020      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c7a:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x498>
 8004c86:	e018      	b.n	8004cba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e013      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c94:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <HAL_RCC_OscConfig+0x4f4>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d106      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d001      	beq.n	8004cba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	42420060 	.word	0x42420060

08004cd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0d0      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce4:	4b6a      	ldr	r3, [pc, #424]	; (8004e90 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d910      	bls.n	8004d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf2:	4b67      	ldr	r3, [pc, #412]	; (8004e90 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f023 0207 	bic.w	r2, r3, #7
 8004cfa:	4965      	ldr	r1, [pc, #404]	; (8004e90 <HAL_RCC_ClockConfig+0x1c0>)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	4b63      	ldr	r3, [pc, #396]	; (8004e90 <HAL_RCC_ClockConfig+0x1c0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0b8      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d020      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d2c:	4b59      	ldr	r3, [pc, #356]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4a58      	ldr	r2, [pc, #352]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d44:	4b53      	ldr	r3, [pc, #332]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4a52      	ldr	r2, [pc, #328]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d50:	4b50      	ldr	r3, [pc, #320]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	494d      	ldr	r1, [pc, #308]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d040      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d76:	4b47      	ldr	r3, [pc, #284]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d115      	bne.n	8004dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e07f      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d8e:	4b41      	ldr	r3, [pc, #260]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e073      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d9e:	4b3d      	ldr	r3, [pc, #244]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e06b      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dae:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f023 0203 	bic.w	r2, r3, #3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4936      	ldr	r1, [pc, #216]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc0:	f7fe ff0a 	bl	8003bd8 <HAL_GetTick>
 8004dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc6:	e00a      	b.n	8004dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc8:	f7fe ff06 	bl	8003bd8 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e053      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dde:	4b2d      	ldr	r3, [pc, #180]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 020c 	and.w	r2, r3, #12
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d1eb      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004df0:	4b27      	ldr	r3, [pc, #156]	; (8004e90 <HAL_RCC_ClockConfig+0x1c0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d210      	bcs.n	8004e20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dfe:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <HAL_RCC_ClockConfig+0x1c0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f023 0207 	bic.w	r2, r3, #7
 8004e06:	4922      	ldr	r1, [pc, #136]	; (8004e90 <HAL_RCC_ClockConfig+0x1c0>)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0e:	4b20      	ldr	r3, [pc, #128]	; (8004e90 <HAL_RCC_ClockConfig+0x1c0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e032      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e2c:	4b19      	ldr	r3, [pc, #100]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4916      	ldr	r1, [pc, #88]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e4a:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	490e      	ldr	r1, [pc, #56]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e5e:	f000 f821 	bl	8004ea4 <HAL_RCC_GetSysClockFreq>
 8004e62:	4602      	mov	r2, r0
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <HAL_RCC_ClockConfig+0x1c4>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	490a      	ldr	r1, [pc, #40]	; (8004e98 <HAL_RCC_ClockConfig+0x1c8>)
 8004e70:	5ccb      	ldrb	r3, [r1, r3]
 8004e72:	fa22 f303 	lsr.w	r3, r2, r3
 8004e76:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <HAL_RCC_ClockConfig+0x1cc>)
 8004e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e7a:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_RCC_ClockConfig+0x1d0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe fe68 	bl	8003b54 <HAL_InitTick>

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40022000 	.word	0x40022000
 8004e94:	40021000 	.word	0x40021000
 8004e98:	08009544 	.word	0x08009544
 8004e9c:	20000000 	.word	0x20000000
 8004ea0:	20000004 	.word	0x20000004

08004ea4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea4:	b490      	push	{r4, r7}
 8004ea6:	b08a      	sub	sp, #40	; 0x28
 8004ea8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004eaa:	4b2a      	ldr	r3, [pc, #168]	; (8004f54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004eac:	1d3c      	adds	r4, r7, #4
 8004eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004eb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004eb4:	f240 2301 	movw	r3, #513	; 0x201
 8004eb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ece:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d002      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d003      	beq.n	8004eea <HAL_RCC_GetSysClockFreq+0x46>
 8004ee2:	e02d      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ee6:	623b      	str	r3, [r7, #32]
      break;
 8004ee8:	e02d      	b.n	8004f46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	0c9b      	lsrs	r3, r3, #18
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004efc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d013      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f08:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	0c5b      	lsrs	r3, r3, #17
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f16:	4413      	add	r3, r2
 8004f18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	4a0e      	ldr	r2, [pc, #56]	; (8004f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f22:	fb02 f203 	mul.w	r2, r2, r3
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2e:	e004      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	4a0b      	ldr	r2, [pc, #44]	; (8004f60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	623b      	str	r3, [r7, #32]
      break;
 8004f3e:	e002      	b.n	8004f46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f42:	623b      	str	r3, [r7, #32]
      break;
 8004f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f46:	6a3b      	ldr	r3, [r7, #32]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3728      	adds	r7, #40	; 0x28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc90      	pop	{r4, r7}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	080094e0 	.word	0x080094e0
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	007a1200 	.word	0x007a1200
 8004f60:	003d0900 	.word	0x003d0900

08004f64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <RCC_Delay+0x34>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <RCC_Delay+0x38>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	0a5b      	lsrs	r3, r3, #9
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
 8004f7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f80:	bf00      	nop
  }
  while (Delay --);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1e5a      	subs	r2, r3, #1
 8004f86:	60fa      	str	r2, [r7, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f9      	bne.n	8004f80 <RCC_Delay+0x1c>
}
 8004f8c:	bf00      	nop
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr
 8004f98:	20000000 	.word	0x20000000
 8004f9c:	10624dd3 	.word	0x10624dd3

08004fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e076      	b.n	80050a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d108      	bne.n	8004fcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc2:	d009      	beq.n	8004fd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	61da      	str	r2, [r3, #28]
 8004fca:	e005      	b.n	8004fd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fe fc68 	bl	80038c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800500e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505c:	ea42 0103 	orr.w	r1, r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	0c1a      	lsrs	r2, r3, #16
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f002 0204 	and.w	r2, r2, #4
 800507e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69da      	ldr	r2, [r3, #28]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800508e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	4613      	mov	r3, r2
 80050b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_SPI_Transmit+0x22>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e126      	b.n	8005318 <HAL_SPI_Transmit+0x270>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050d2:	f7fe fd81 	bl	8003bd8 <HAL_GetTick>
 80050d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d002      	beq.n	80050ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050e8:	2302      	movs	r3, #2
 80050ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050ec:	e10b      	b.n	8005306 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_SPI_Transmit+0x52>
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050fe:	e102      	b.n	8005306 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2203      	movs	r2, #3
 8005104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	88fa      	ldrh	r2, [r7, #6]
 8005118:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	88fa      	ldrh	r2, [r7, #6]
 800511e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005146:	d10f      	bne.n	8005168 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005156:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005166:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005172:	2b40      	cmp	r3, #64	; 0x40
 8005174:	d007      	beq.n	8005186 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005184:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800518e:	d14b      	bne.n	8005228 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_SPI_Transmit+0xf6>
 8005198:	8afb      	ldrh	r3, [r7, #22]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d13e      	bne.n	800521c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	881a      	ldrh	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	1c9a      	adds	r2, r3, #2
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051c2:	e02b      	b.n	800521c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d112      	bne.n	80051f8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	881a      	ldrh	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	1c9a      	adds	r2, r3, #2
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80051f6:	e011      	b.n	800521c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051f8:	f7fe fcee 	bl	8003bd8 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d803      	bhi.n	8005210 <HAL_SPI_Transmit+0x168>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520e:	d102      	bne.n	8005216 <HAL_SPI_Transmit+0x16e>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d102      	bne.n	800521c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	77fb      	strb	r3, [r7, #31]
          goto error;
 800521a:	e074      	b.n	8005306 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1ce      	bne.n	80051c4 <HAL_SPI_Transmit+0x11c>
 8005226:	e04c      	b.n	80052c2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <HAL_SPI_Transmit+0x18e>
 8005230:	8afb      	ldrh	r3, [r7, #22]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d140      	bne.n	80052b8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	330c      	adds	r3, #12
 8005240:	7812      	ldrb	r2, [r2, #0]
 8005242:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800525c:	e02c      	b.n	80052b8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b02      	cmp	r3, #2
 800526a:	d113      	bne.n	8005294 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	7812      	ldrb	r2, [r2, #0]
 8005278:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	86da      	strh	r2, [r3, #54]	; 0x36
 8005292:	e011      	b.n	80052b8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005294:	f7fe fca0 	bl	8003bd8 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d803      	bhi.n	80052ac <HAL_SPI_Transmit+0x204>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d102      	bne.n	80052b2 <HAL_SPI_Transmit+0x20a>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d102      	bne.n	80052b8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052b6:	e026      	b.n	8005306 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1cd      	bne.n	800525e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 fcbc 	bl	8005c44 <SPI_EndRxTxTransaction>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052e0:	2300      	movs	r3, #0
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	e000      	b.n	8005306 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005304:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005316:	7ffb      	ldrb	r3, [r7, #31]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533c:	d112      	bne.n	8005364 <HAL_SPI_Receive+0x44>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10e      	bne.n	8005364 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2204      	movs	r2, #4
 800534a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800534e:	88fa      	ldrh	r2, [r7, #6]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	4613      	mov	r3, r2
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f8f1 	bl	8005542 <HAL_SPI_TransmitReceive>
 8005360:	4603      	mov	r3, r0
 8005362:	e0ea      	b.n	800553a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <HAL_SPI_Receive+0x52>
 800536e:	2302      	movs	r3, #2
 8005370:	e0e3      	b.n	800553a <HAL_SPI_Receive+0x21a>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800537a:	f7fe fc2d 	bl	8003bd8 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b01      	cmp	r3, #1
 800538a:	d002      	beq.n	8005392 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800538c:	2302      	movs	r3, #2
 800538e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005390:	e0ca      	b.n	8005528 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <HAL_SPI_Receive+0x7e>
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053a2:	e0c1      	b.n	8005528 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2204      	movs	r2, #4
 80053a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	88fa      	ldrh	r2, [r7, #6]
 80053bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	88fa      	ldrh	r2, [r7, #6]
 80053c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ea:	d10f      	bne.n	800540c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800540a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d007      	beq.n	800542a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005428:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d162      	bne.n	80054f8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005432:	e02e      	b.n	8005492 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d115      	bne.n	800546e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f103 020c 	add.w	r2, r3, #12
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	7812      	ldrb	r2, [r2, #0]
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800546c:	e011      	b.n	8005492 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800546e:	f7fe fbb3 	bl	8003bd8 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d803      	bhi.n	8005486 <HAL_SPI_Receive+0x166>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d102      	bne.n	800548c <HAL_SPI_Receive+0x16c>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005490:	e04a      	b.n	8005528 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1cb      	bne.n	8005434 <HAL_SPI_Receive+0x114>
 800549c:	e031      	b.n	8005502 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d113      	bne.n	80054d4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	b292      	uxth	r2, r2
 80054b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	1c9a      	adds	r2, r3, #2
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054d2:	e011      	b.n	80054f8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054d4:	f7fe fb80 	bl	8003bd8 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d803      	bhi.n	80054ec <HAL_SPI_Receive+0x1cc>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ea:	d102      	bne.n	80054f2 <HAL_SPI_Receive+0x1d2>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d102      	bne.n	80054f8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80054f6:	e017      	b.n	8005528 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1cd      	bne.n	800549e <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	6839      	ldr	r1, [r7, #0]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fb4a 	bl	8005ba0 <SPI_EndRxTransaction>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	75fb      	strb	r3, [r7, #23]
 8005524:	e000      	b.n	8005528 <HAL_SPI_Receive+0x208>
  }

error :
 8005526:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005538:	7dfb      	ldrb	r3, [r7, #23]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b08c      	sub	sp, #48	; 0x30
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005550:	2301      	movs	r3, #1
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_SPI_TransmitReceive+0x26>
 8005564:	2302      	movs	r3, #2
 8005566:	e18a      	b.n	800587e <HAL_SPI_TransmitReceive+0x33c>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005570:	f7fe fb32 	bl	8003bd8 <HAL_GetTick>
 8005574:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800557c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005586:	887b      	ldrh	r3, [r7, #2]
 8005588:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800558a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800558e:	2b01      	cmp	r3, #1
 8005590:	d00f      	beq.n	80055b2 <HAL_SPI_TransmitReceive+0x70>
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005598:	d107      	bne.n	80055aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <HAL_SPI_TransmitReceive+0x68>
 80055a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d003      	beq.n	80055b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80055aa:	2302      	movs	r3, #2
 80055ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055b0:	e15b      	b.n	800586a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <HAL_SPI_TransmitReceive+0x82>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_SPI_TransmitReceive+0x82>
 80055be:	887b      	ldrh	r3, [r7, #2]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d103      	bne.n	80055cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055ca:	e14e      	b.n	800586a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d003      	beq.n	80055e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2205      	movs	r2, #5
 80055dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	887a      	ldrh	r2, [r7, #2]
 80055f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	887a      	ldrh	r2, [r7, #2]
 80055f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	887a      	ldrh	r2, [r7, #2]
 8005602:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	887a      	ldrh	r2, [r7, #2]
 8005608:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005620:	2b40      	cmp	r3, #64	; 0x40
 8005622:	d007      	beq.n	8005634 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005632:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800563c:	d178      	bne.n	8005730 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <HAL_SPI_TransmitReceive+0x10a>
 8005646:	8b7b      	ldrh	r3, [r7, #26]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d166      	bne.n	800571a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	881a      	ldrh	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	1c9a      	adds	r2, r3, #2
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005670:	e053      	b.n	800571a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b02      	cmp	r3, #2
 800567e:	d11b      	bne.n	80056b8 <HAL_SPI_TransmitReceive+0x176>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d016      	beq.n	80056b8 <HAL_SPI_TransmitReceive+0x176>
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d113      	bne.n	80056b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	881a      	ldrh	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	1c9a      	adds	r2, r3, #2
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d119      	bne.n	80056fa <HAL_SPI_TransmitReceive+0x1b8>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d014      	beq.n	80056fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	b292      	uxth	r2, r2
 80056dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	1c9a      	adds	r2, r3, #2
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056f6:	2301      	movs	r3, #1
 80056f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056fa:	f7fe fa6d 	bl	8003bd8 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005706:	429a      	cmp	r2, r3
 8005708:	d807      	bhi.n	800571a <HAL_SPI_TransmitReceive+0x1d8>
 800570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d003      	beq.n	800571a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005718:	e0a7      	b.n	800586a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1a6      	bne.n	8005672 <HAL_SPI_TransmitReceive+0x130>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1a1      	bne.n	8005672 <HAL_SPI_TransmitReceive+0x130>
 800572e:	e07c      	b.n	800582a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <HAL_SPI_TransmitReceive+0x1fc>
 8005738:	8b7b      	ldrh	r3, [r7, #26]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d16b      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	330c      	adds	r3, #12
 8005748:	7812      	ldrb	r2, [r2, #0]
 800574a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005764:	e057      	b.n	8005816 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b02      	cmp	r3, #2
 8005772:	d11c      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x26c>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d017      	beq.n	80057ae <HAL_SPI_TransmitReceive+0x26c>
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	2b01      	cmp	r3, #1
 8005782:	d114      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	7812      	ldrb	r2, [r2, #0]
 8005790:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d119      	bne.n	80057f0 <HAL_SPI_TransmitReceive+0x2ae>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d014      	beq.n	80057f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057ec:	2301      	movs	r3, #1
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057f0:	f7fe f9f2 	bl	8003bd8 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d803      	bhi.n	8005808 <HAL_SPI_TransmitReceive+0x2c6>
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005806:	d102      	bne.n	800580e <HAL_SPI_TransmitReceive+0x2cc>
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005814:	e029      	b.n	800586a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1a2      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x224>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d19d      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800582a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800582c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fa08 	bl	8005c44 <SPI_EndRxTxTransaction>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d006      	beq.n	8005848 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005846:	e010      	b.n	800586a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10b      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005850:	2300      	movs	r3, #0
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	e000      	b.n	800586a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005868:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800587a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800587e:	4618      	mov	r0, r3
 8005880:	3730      	adds	r7, #48	; 0x30
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	099b      	lsrs	r3, r3, #6
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10f      	bne.n	80058cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	099b      	lsrs	r3, r3, #6
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d004      	beq.n	80058cc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
    return;
 80058ca:	e0be      	b.n	8005a4a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_SPI_IRQHandler+0x66>
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	09db      	lsrs	r3, r3, #7
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d004      	beq.n	80058ee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	4798      	blx	r3
    return;
 80058ec:	e0ad      	b.n	8005a4a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <HAL_SPI_IRQHandler+0x80>
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	099b      	lsrs	r3, r3, #6
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 80a1 	beq.w	8005a4a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 809a 	beq.w	8005a4a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	099b      	lsrs	r3, r3, #6
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d023      	beq.n	800596a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b03      	cmp	r3, #3
 800592c:	d011      	beq.n	8005952 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005932:	f043 0204 	orr.w	r2, r3, #4
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	e00b      	b.n	800596a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	693b      	ldr	r3, [r7, #16]
        return;
 8005968:	e06f      	b.n	8005a4a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	095b      	lsrs	r3, r3, #5
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d014      	beq.n	80059a0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597a:	f043 0201 	orr.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d04f      	beq.n	8005a48 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059b6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d104      	bne.n	80059d4 <HAL_SPI_IRQHandler+0x14c>
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d034      	beq.n	8005a3e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0203 	bic.w	r2, r2, #3
 80059e2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d011      	beq.n	8005a10 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f0:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <HAL_SPI_IRQHandler+0x1c8>)
 80059f2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fe fa05 	bl	8003e08 <HAL_DMA_Abort_IT>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d016      	beq.n	8005a46 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a1c:	4a0c      	ldr	r2, [pc, #48]	; (8005a50 <HAL_SPI_IRQHandler+0x1c8>)
 8005a1e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe f9ef 	bl	8003e08 <HAL_DMA_Abort_IT>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005a3c:	e003      	b.n	8005a46 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f808 	bl	8005a54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005a44:	e000      	b.n	8005a48 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005a46:	bf00      	nop
    return;
 8005a48:	bf00      	nop
  }
}
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	08005a67 	.word	0x08005a67

08005a54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr

08005a66 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f7ff ffe7 	bl	8005a54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a86:	bf00      	nop
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005aa0:	f7fe f89a 	bl	8003bd8 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	4413      	add	r3, r2
 8005aae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ab0:	f7fe f892 	bl	8003bd8 <HAL_GetTick>
 8005ab4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ab6:	4b39      	ldr	r3, [pc, #228]	; (8005b9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	015b      	lsls	r3, r3, #5
 8005abc:	0d1b      	lsrs	r3, r3, #20
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	fb02 f303 	mul.w	r3, r2, r3
 8005ac4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ac6:	e054      	b.n	8005b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d050      	beq.n	8005b72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ad0:	f7fe f882 	bl	8003bd8 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d902      	bls.n	8005ae6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d13d      	bne.n	8005b62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005af4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005afe:	d111      	bne.n	8005b24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b08:	d004      	beq.n	8005b14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b12:	d107      	bne.n	8005b24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b2c:	d10f      	bne.n	8005b4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e017      	b.n	8005b92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	bf0c      	ite	eq
 8005b82:	2301      	moveq	r3, #1
 8005b84:	2300      	movne	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	461a      	mov	r2, r3
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d19b      	bne.n	8005ac8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3720      	adds	r7, #32
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000000 	.word	0x20000000

08005ba0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bb4:	d111      	bne.n	8005bda <SPI_EndRxTransaction+0x3a>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bbe:	d004      	beq.n	8005bca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc8:	d107      	bne.n	8005bda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005be2:	d117      	bne.n	8005c14 <SPI_EndRxTransaction+0x74>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bec:	d112      	bne.n	8005c14 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff ff49 	bl	8005a90 <SPI_WaitFlagStateUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d01a      	beq.n	8005c3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e013      	b.n	8005c3c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2180      	movs	r1, #128	; 0x80
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff ff36 	bl	8005a90 <SPI_WaitFlagStateUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2e:	f043 0220 	orr.w	r2, r3, #32
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e000      	b.n	8005c3c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2200      	movs	r2, #0
 8005c58:	2180      	movs	r1, #128	; 0x80
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f7ff ff18 	bl	8005a90 <SPI_WaitFlagStateUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6a:	f043 0220 	orr.w	r2, r3, #32
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e000      	b.n	8005c78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e041      	b.n	8005d16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7fd fe54 	bl	8003954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f000 fc68 	bl	8006594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b082      	sub	sp, #8
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e041      	b.n	8005db4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f839 	bl	8005dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	f000 fc19 	bl	8006594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr
	...

08005dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d109      	bne.n	8005df4 <HAL_TIM_PWM_Start+0x24>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	bf14      	ite	ne
 8005dec:	2301      	movne	r3, #1
 8005dee:	2300      	moveq	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	e022      	b.n	8005e3a <HAL_TIM_PWM_Start+0x6a>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d109      	bne.n	8005e0e <HAL_TIM_PWM_Start+0x3e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	bf14      	ite	ne
 8005e06:	2301      	movne	r3, #1
 8005e08:	2300      	moveq	r3, #0
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	e015      	b.n	8005e3a <HAL_TIM_PWM_Start+0x6a>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d109      	bne.n	8005e28 <HAL_TIM_PWM_Start+0x58>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	bf14      	ite	ne
 8005e20:	2301      	movne	r3, #1
 8005e22:	2300      	moveq	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	e008      	b.n	8005e3a <HAL_TIM_PWM_Start+0x6a>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e072      	b.n	8005f28 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <HAL_TIM_PWM_Start+0x82>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e50:	e013      	b.n	8005e7a <HAL_TIM_PWM_Start+0xaa>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_PWM_Start+0x92>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e60:	e00b      	b.n	8005e7a <HAL_TIM_PWM_Start+0xaa>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_PWM_Start+0xa2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e70:	e003      	b.n	8005e7a <HAL_TIM_PWM_Start+0xaa>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fe42 	bl	8006b0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a28      	ldr	r2, [pc, #160]	; (8005f30 <HAL_TIM_PWM_Start+0x160>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d004      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xcc>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a27      	ldr	r2, [pc, #156]	; (8005f34 <HAL_TIM_PWM_Start+0x164>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIM_PWM_Start+0xd0>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <HAL_TIM_PWM_Start+0xd2>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a1d      	ldr	r2, [pc, #116]	; (8005f30 <HAL_TIM_PWM_Start+0x160>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d018      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x122>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <HAL_TIM_PWM_Start+0x164>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x122>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed2:	d00e      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x122>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a17      	ldr	r2, [pc, #92]	; (8005f38 <HAL_TIM_PWM_Start+0x168>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d009      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x122>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a16      	ldr	r2, [pc, #88]	; (8005f3c <HAL_TIM_PWM_Start+0x16c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d004      	beq.n	8005ef2 <HAL_TIM_PWM_Start+0x122>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a14      	ldr	r2, [pc, #80]	; (8005f40 <HAL_TIM_PWM_Start+0x170>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d111      	bne.n	8005f16 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b06      	cmp	r3, #6
 8005f02:	d010      	beq.n	8005f26 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0201 	orr.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f14:	e007      	b.n	8005f26 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0201 	orr.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40012c00 	.word	0x40012c00
 8005f34:	40013400 	.word	0x40013400
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40000c00 	.word	0x40000c00

08005f44 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2200      	movs	r2, #0
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fdd8 	bl	8006b0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a2e      	ldr	r2, [pc, #184]	; (800601c <HAL_TIM_PWM_Stop+0xd8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d004      	beq.n	8005f70 <HAL_TIM_PWM_Stop+0x2c>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a2d      	ldr	r2, [pc, #180]	; (8006020 <HAL_TIM_PWM_Stop+0xdc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d101      	bne.n	8005f74 <HAL_TIM_PWM_Stop+0x30>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e000      	b.n	8005f76 <HAL_TIM_PWM_Stop+0x32>
 8005f74:	2300      	movs	r3, #0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d017      	beq.n	8005faa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6a1a      	ldr	r2, [r3, #32]
 8005f80:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10f      	bne.n	8005faa <HAL_TIM_PWM_Stop+0x66>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6a1a      	ldr	r2, [r3, #32]
 8005f90:	f240 4344 	movw	r3, #1092	; 0x444
 8005f94:	4013      	ands	r3, r2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d107      	bne.n	8005faa <HAL_TIM_PWM_Stop+0x66>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6a1a      	ldr	r2, [r3, #32]
 8005fb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10f      	bne.n	8005fda <HAL_TIM_PWM_Stop+0x96>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6a1a      	ldr	r2, [r3, #32]
 8005fc0:	f240 4344 	movw	r3, #1092	; 0x444
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d107      	bne.n	8005fda <HAL_TIM_PWM_Stop+0x96>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0201 	bic.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d104      	bne.n	8005fea <HAL_TIM_PWM_Stop+0xa6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe8:	e013      	b.n	8006012 <HAL_TIM_PWM_Stop+0xce>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d104      	bne.n	8005ffa <HAL_TIM_PWM_Stop+0xb6>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ff8:	e00b      	b.n	8006012 <HAL_TIM_PWM_Stop+0xce>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d104      	bne.n	800600a <HAL_TIM_PWM_Stop+0xc6>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006008:	e003      	b.n	8006012 <HAL_TIM_PWM_Stop+0xce>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40013400 	.word	0x40013400

08006024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b02      	cmp	r3, #2
 8006038:	d122      	bne.n	8006080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b02      	cmp	r3, #2
 8006046:	d11b      	bne.n	8006080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0202 	mvn.w	r2, #2
 8006050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fa78 	bl	800655c <HAL_TIM_IC_CaptureCallback>
 800606c:	e005      	b.n	800607a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa6b 	bl	800654a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fa7a 	bl	800656e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b04      	cmp	r3, #4
 800608c:	d122      	bne.n	80060d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b04      	cmp	r3, #4
 800609a:	d11b      	bne.n	80060d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0204 	mvn.w	r2, #4
 80060a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2202      	movs	r2, #2
 80060aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fa4e 	bl	800655c <HAL_TIM_IC_CaptureCallback>
 80060c0:	e005      	b.n	80060ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fa41 	bl	800654a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fa50 	bl	800656e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b08      	cmp	r3, #8
 80060e0:	d122      	bne.n	8006128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d11b      	bne.n	8006128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f06f 0208 	mvn.w	r2, #8
 80060f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2204      	movs	r2, #4
 80060fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa24 	bl	800655c <HAL_TIM_IC_CaptureCallback>
 8006114:	e005      	b.n	8006122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fa17 	bl	800654a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fa26 	bl	800656e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	2b10      	cmp	r3, #16
 8006134:	d122      	bne.n	800617c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	2b10      	cmp	r3, #16
 8006142:	d11b      	bne.n	800617c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0210 	mvn.w	r2, #16
 800614c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2208      	movs	r2, #8
 8006152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f9fa 	bl	800655c <HAL_TIM_IC_CaptureCallback>
 8006168:	e005      	b.n	8006176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f9ed 	bl	800654a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f9fc 	bl	800656e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b01      	cmp	r3, #1
 8006188:	d10e      	bne.n	80061a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b01      	cmp	r3, #1
 8006196:	d107      	bne.n	80061a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0201 	mvn.w	r2, #1
 80061a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f9c8 	bl	8006538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b2:	2b80      	cmp	r3, #128	; 0x80
 80061b4:	d10e      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c0:	2b80      	cmp	r3, #128	; 0x80
 80061c2:	d107      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fd35 	bl	8006c3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061de:	2b40      	cmp	r3, #64	; 0x40
 80061e0:	d10e      	bne.n	8006200 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ec:	2b40      	cmp	r3, #64	; 0x40
 80061ee:	d107      	bne.n	8006200 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f9c0 	bl	8006580 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b20      	cmp	r3, #32
 800620c:	d10e      	bne.n	800622c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b20      	cmp	r3, #32
 800621a:	d107      	bne.n	800622c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0220 	mvn.w	r2, #32
 8006224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fd00 	bl	8006c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800622c:	bf00      	nop
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006246:	2b01      	cmp	r3, #1
 8006248:	d101      	bne.n	800624e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800624a:	2302      	movs	r3, #2
 800624c:	e0ac      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b0c      	cmp	r3, #12
 800625a:	f200 809f 	bhi.w	800639c <HAL_TIM_PWM_ConfigChannel+0x168>
 800625e:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	08006299 	.word	0x08006299
 8006268:	0800639d 	.word	0x0800639d
 800626c:	0800639d 	.word	0x0800639d
 8006270:	0800639d 	.word	0x0800639d
 8006274:	080062d9 	.word	0x080062d9
 8006278:	0800639d 	.word	0x0800639d
 800627c:	0800639d 	.word	0x0800639d
 8006280:	0800639d 	.word	0x0800639d
 8006284:	0800631b 	.word	0x0800631b
 8006288:	0800639d 	.word	0x0800639d
 800628c:	0800639d 	.word	0x0800639d
 8006290:	0800639d 	.word	0x0800639d
 8006294:	0800635b 	.word	0x0800635b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f9f2 	bl	8006688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0208 	orr.w	r2, r2, #8
 80062b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0204 	bic.w	r2, r2, #4
 80062c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6999      	ldr	r1, [r3, #24]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	619a      	str	r2, [r3, #24]
      break;
 80062d6:	e062      	b.n	800639e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fa42 	bl	8006768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699a      	ldr	r2, [r3, #24]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6999      	ldr	r1, [r3, #24]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	021a      	lsls	r2, r3, #8
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	619a      	str	r2, [r3, #24]
      break;
 8006318:	e041      	b.n	800639e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fa95 	bl	8006850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0208 	orr.w	r2, r2, #8
 8006334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0204 	bic.w	r2, r2, #4
 8006344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69d9      	ldr	r1, [r3, #28]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	61da      	str	r2, [r3, #28]
      break;
 8006358:	e021      	b.n	800639e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fae9 	bl	8006938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69da      	ldr	r2, [r3, #28]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69d9      	ldr	r1, [r3, #28]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	021a      	lsls	r2, r3, #8
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	61da      	str	r2, [r3, #28]
      break;
 800639a:	e000      	b.n	800639e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800639c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_TIM_ConfigClockSource+0x18>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e0b3      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x180>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006400:	d03e      	beq.n	8006480 <HAL_TIM_ConfigClockSource+0xd0>
 8006402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006406:	f200 8087 	bhi.w	8006518 <HAL_TIM_ConfigClockSource+0x168>
 800640a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640e:	f000 8085 	beq.w	800651c <HAL_TIM_ConfigClockSource+0x16c>
 8006412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006416:	d87f      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x168>
 8006418:	2b70      	cmp	r3, #112	; 0x70
 800641a:	d01a      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0xa2>
 800641c:	2b70      	cmp	r3, #112	; 0x70
 800641e:	d87b      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x168>
 8006420:	2b60      	cmp	r3, #96	; 0x60
 8006422:	d050      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0x116>
 8006424:	2b60      	cmp	r3, #96	; 0x60
 8006426:	d877      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x168>
 8006428:	2b50      	cmp	r3, #80	; 0x50
 800642a:	d03c      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0xf6>
 800642c:	2b50      	cmp	r3, #80	; 0x50
 800642e:	d873      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x168>
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d058      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x136>
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d86f      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x168>
 8006438:	2b30      	cmp	r3, #48	; 0x30
 800643a:	d064      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0x156>
 800643c:	2b30      	cmp	r3, #48	; 0x30
 800643e:	d86b      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x168>
 8006440:	2b20      	cmp	r3, #32
 8006442:	d060      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0x156>
 8006444:	2b20      	cmp	r3, #32
 8006446:	d867      	bhi.n	8006518 <HAL_TIM_ConfigClockSource+0x168>
 8006448:	2b00      	cmp	r3, #0
 800644a:	d05c      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0x156>
 800644c:	2b10      	cmp	r3, #16
 800644e:	d05a      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006450:	e062      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	6899      	ldr	r1, [r3, #8]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f000 fb34 	bl	8006ace <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006474:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	609a      	str	r2, [r3, #8]
      break;
 800647e:	e04e      	b.n	800651e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6818      	ldr	r0, [r3, #0]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	6899      	ldr	r1, [r3, #8]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f000 fb1d 	bl	8006ace <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064a2:	609a      	str	r2, [r3, #8]
      break;
 80064a4:	e03b      	b.n	800651e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6859      	ldr	r1, [r3, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f000 fa94 	bl	80069e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2150      	movs	r1, #80	; 0x50
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 faeb 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 80064c4:	e02b      	b.n	800651e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	6859      	ldr	r1, [r3, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f000 fab2 	bl	8006a3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2160      	movs	r1, #96	; 0x60
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fadb 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 80064e4:	e01b      	b.n	800651e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	6859      	ldr	r1, [r3, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f000 fa74 	bl	80069e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2140      	movs	r1, #64	; 0x40
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 facb 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 8006504:	e00b      	b.n	800651e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f000 fac2 	bl	8006a9a <TIM_ITRx_SetConfig>
        break;
 8006516:	e002      	b.n	800651e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006518:	bf00      	nop
 800651a:	e000      	b.n	800651e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800651c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr

0800654a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr

0800655c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	bc80      	pop	{r7}
 800656c:	4770      	bx	lr

0800656e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	bc80      	pop	{r7}
 800657e:	4770      	bx	lr

08006580 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	bc80      	pop	{r7}
 8006590:	4770      	bx	lr
	...

08006594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a33      	ldr	r2, [pc, #204]	; (8006674 <TIM_Base_SetConfig+0xe0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d013      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a32      	ldr	r2, [pc, #200]	; (8006678 <TIM_Base_SetConfig+0xe4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00f      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ba:	d00b      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a2f      	ldr	r2, [pc, #188]	; (800667c <TIM_Base_SetConfig+0xe8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d007      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a2e      	ldr	r2, [pc, #184]	; (8006680 <TIM_Base_SetConfig+0xec>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_Base_SetConfig+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a2d      	ldr	r2, [pc, #180]	; (8006684 <TIM_Base_SetConfig+0xf0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d108      	bne.n	80065e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a22      	ldr	r2, [pc, #136]	; (8006674 <TIM_Base_SetConfig+0xe0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d013      	beq.n	8006616 <TIM_Base_SetConfig+0x82>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a21      	ldr	r2, [pc, #132]	; (8006678 <TIM_Base_SetConfig+0xe4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00f      	beq.n	8006616 <TIM_Base_SetConfig+0x82>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065fc:	d00b      	beq.n	8006616 <TIM_Base_SetConfig+0x82>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a1e      	ldr	r2, [pc, #120]	; (800667c <TIM_Base_SetConfig+0xe8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d007      	beq.n	8006616 <TIM_Base_SetConfig+0x82>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a1d      	ldr	r2, [pc, #116]	; (8006680 <TIM_Base_SetConfig+0xec>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d003      	beq.n	8006616 <TIM_Base_SetConfig+0x82>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a1c      	ldr	r2, [pc, #112]	; (8006684 <TIM_Base_SetConfig+0xf0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d108      	bne.n	8006628 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a09      	ldr	r2, [pc, #36]	; (8006674 <TIM_Base_SetConfig+0xe0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_Base_SetConfig+0xc8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a08      	ldr	r2, [pc, #32]	; (8006678 <TIM_Base_SetConfig+0xe4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d103      	bne.n	8006664 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	615a      	str	r2, [r3, #20]
}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr
 8006674:	40012c00 	.word	0x40012c00
 8006678:	40013400 	.word	0x40013400
 800667c:	40000400 	.word	0x40000400
 8006680:	40000800 	.word	0x40000800
 8006684:	40000c00 	.word	0x40000c00

08006688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f023 0201 	bic.w	r2, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0303 	bic.w	r3, r3, #3
 80066be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f023 0302 	bic.w	r3, r3, #2
 80066d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a20      	ldr	r2, [pc, #128]	; (8006760 <TIM_OC1_SetConfig+0xd8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_OC1_SetConfig+0x64>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a1f      	ldr	r2, [pc, #124]	; (8006764 <TIM_OC1_SetConfig+0xdc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d10c      	bne.n	8006706 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f023 0308 	bic.w	r3, r3, #8
 80066f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f023 0304 	bic.w	r3, r3, #4
 8006704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a15      	ldr	r2, [pc, #84]	; (8006760 <TIM_OC1_SetConfig+0xd8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_OC1_SetConfig+0x8e>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a14      	ldr	r2, [pc, #80]	; (8006764 <TIM_OC1_SetConfig+0xdc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d111      	bne.n	800673a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800671c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	621a      	str	r2, [r3, #32]
}
 8006754:	bf00      	nop
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40012c00 	.word	0x40012c00
 8006764:	40013400 	.word	0x40013400

08006768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	f023 0210 	bic.w	r2, r3, #16
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f023 0320 	bic.w	r3, r3, #32
 80067b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	011b      	lsls	r3, r3, #4
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a21      	ldr	r2, [pc, #132]	; (8006848 <TIM_OC2_SetConfig+0xe0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_OC2_SetConfig+0x68>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a20      	ldr	r2, [pc, #128]	; (800684c <TIM_OC2_SetConfig+0xe4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d10d      	bne.n	80067ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a16      	ldr	r2, [pc, #88]	; (8006848 <TIM_OC2_SetConfig+0xe0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_OC2_SetConfig+0x94>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a15      	ldr	r2, [pc, #84]	; (800684c <TIM_OC2_SetConfig+0xe4>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d113      	bne.n	8006824 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800680a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	621a      	str	r2, [r3, #32]
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	bc80      	pop	{r7}
 8006846:	4770      	bx	lr
 8006848:	40012c00 	.word	0x40012c00
 800684c:	40013400 	.word	0x40013400

08006850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0303 	bic.w	r3, r3, #3
 8006886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	021b      	lsls	r3, r3, #8
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a21      	ldr	r2, [pc, #132]	; (8006930 <TIM_OC3_SetConfig+0xe0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d003      	beq.n	80068b6 <TIM_OC3_SetConfig+0x66>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a20      	ldr	r2, [pc, #128]	; (8006934 <TIM_OC3_SetConfig+0xe4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d10d      	bne.n	80068d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a16      	ldr	r2, [pc, #88]	; (8006930 <TIM_OC3_SetConfig+0xe0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d003      	beq.n	80068e2 <TIM_OC3_SetConfig+0x92>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a15      	ldr	r2, [pc, #84]	; (8006934 <TIM_OC3_SetConfig+0xe4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d113      	bne.n	800690a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	621a      	str	r2, [r3, #32]
}
 8006924:	bf00      	nop
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40012c00 	.word	0x40012c00
 8006934:	40013400 	.word	0x40013400

08006938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	021b      	lsls	r3, r3, #8
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	031b      	lsls	r3, r3, #12
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4313      	orrs	r3, r2
 800698e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a11      	ldr	r2, [pc, #68]	; (80069d8 <TIM_OC4_SetConfig+0xa0>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d003      	beq.n	80069a0 <TIM_OC4_SetConfig+0x68>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a10      	ldr	r2, [pc, #64]	; (80069dc <TIM_OC4_SetConfig+0xa4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d109      	bne.n	80069b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	019b      	lsls	r3, r3, #6
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	621a      	str	r2, [r3, #32]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr
 80069d8:	40012c00 	.word	0x40012c00
 80069dc:	40013400 	.word	0x40013400

080069e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f023 0201 	bic.w	r2, r3, #1
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f023 030a 	bic.w	r3, r3, #10
 8006a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	621a      	str	r2, [r3, #32]
}
 8006a32:	bf00      	nop
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr

08006a3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	f023 0210 	bic.w	r2, r3, #16
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	031b      	lsls	r3, r3, #12
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	621a      	str	r2, [r3, #32]
}
 8006a90:	bf00      	nop
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr

08006a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f043 0307 	orr.w	r3, r3, #7
 8006abc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	609a      	str	r2, [r3, #8]
}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bc80      	pop	{r7}
 8006acc:	4770      	bx	lr

08006ace <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b087      	sub	sp, #28
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	60b9      	str	r1, [r7, #8]
 8006ad8:	607a      	str	r2, [r7, #4]
 8006ada:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ae8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	021a      	lsls	r2, r3, #8
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	431a      	orrs	r2, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	609a      	str	r2, [r3, #8]
}
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bc80      	pop	{r7}
 8006b0a:	4770      	bx	lr

08006b0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f003 031f 	and.w	r3, r3, #31
 8006b1e:	2201      	movs	r2, #1
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1a      	ldr	r2, [r3, #32]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	401a      	ands	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a1a      	ldr	r2, [r3, #32]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f003 031f 	and.w	r3, r3, #31
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	fa01 f303 	lsl.w	r3, r1, r3
 8006b44:	431a      	orrs	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	621a      	str	r2, [r3, #32]
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr

08006b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d101      	bne.n	8006b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e050      	b.n	8006c0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1b      	ldr	r2, [pc, #108]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d018      	beq.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a19      	ldr	r2, [pc, #100]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d013      	beq.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc2:	d00e      	beq.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a15      	ldr	r2, [pc, #84]	; (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d009      	beq.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a14      	ldr	r2, [pc, #80]	; (8006c24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a12      	ldr	r2, [pc, #72]	; (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d10c      	bne.n	8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40013400 	.word	0x40013400
 8006c20:	40000400 	.word	0x40000400
 8006c24:	40000800 	.word	0x40000800
 8006c28:	40000c00 	.word	0x40000c00

08006c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr

08006c3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr

08006c50 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c56:	f3ef 8305 	mrs	r3, IPSR
 8006c5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10f      	bne.n	8006c82 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c62:	f3ef 8310 	mrs	r3, PRIMASK
 8006c66:	607b      	str	r3, [r7, #4]
  return(result);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d109      	bne.n	8006c82 <osKernelInitialize+0x32>
 8006c6e:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <osKernelInitialize+0x60>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d109      	bne.n	8006c8a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c76:	f3ef 8311 	mrs	r3, BASEPRI
 8006c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006c82:	f06f 0305 	mvn.w	r3, #5
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	e00c      	b.n	8006ca4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c8a:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <osKernelInitialize+0x60>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d105      	bne.n	8006c9e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006c92:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <osKernelInitialize+0x60>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	e002      	b.n	8006ca4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr
 8006cb0:	20000038 	.word	0x20000038

08006cb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b092      	sub	sp, #72	; 0x48
 8006cb8:	af04      	add	r7, sp, #16
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cc4:	f3ef 8305 	mrs	r3, IPSR
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f040 8094 	bne.w	8006dfa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd6:	623b      	str	r3, [r7, #32]
  return(result);
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f040 808d 	bne.w	8006dfa <osThreadNew+0x146>
 8006ce0:	4b48      	ldr	r3, [pc, #288]	; (8006e04 <osThreadNew+0x150>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d106      	bne.n	8006cf6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ce8:	f3ef 8311 	mrs	r3, BASEPRI
 8006cec:	61fb      	str	r3, [r7, #28]
  return(result);
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f040 8082 	bne.w	8006dfa <osThreadNew+0x146>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d07e      	beq.n	8006dfa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006cfc:	2380      	movs	r3, #128	; 0x80
 8006cfe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006d00:	2318      	movs	r3, #24
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006d04:	2300      	movs	r3, #0
 8006d06:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006d08:	f107 031b 	add.w	r3, r7, #27
 8006d0c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d12:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d045      	beq.n	8006da6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <osThreadNew+0x74>
        name = attr->name;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <osThreadNew+0x9a>
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	2b38      	cmp	r3, #56	; 0x38
 8006d40:	d805      	bhi.n	8006d4e <osThreadNew+0x9a>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <osThreadNew+0x9e>
        return (NULL);
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e054      	b.n	8006dfc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	089b      	lsrs	r3, r3, #2
 8006d60:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00e      	beq.n	8006d88 <osThreadNew+0xd4>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2b5b      	cmp	r3, #91	; 0x5b
 8006d70:	d90a      	bls.n	8006d88 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d006      	beq.n	8006d88 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <osThreadNew+0xd4>
        mem = 1;
 8006d82:	2301      	movs	r3, #1
 8006d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d86:	e010      	b.n	8006daa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10c      	bne.n	8006daa <osThreadNew+0xf6>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d108      	bne.n	8006daa <osThreadNew+0xf6>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d104      	bne.n	8006daa <osThreadNew+0xf6>
          mem = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006da4:	e001      	b.n	8006daa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006da6:	2300      	movs	r3, #0
 8006da8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d110      	bne.n	8006dd2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006db8:	9202      	str	r2, [sp, #8]
 8006dba:	9301      	str	r3, [sp, #4]
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 fecc 	bl	8007b64 <xTaskCreateStatic>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	e013      	b.n	8006dfa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d110      	bne.n	8006dfa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	f107 0314 	add.w	r3, r7, #20
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 feea 	bl	8007bc4 <xTaskCreate>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d001      	beq.n	8006dfa <osThreadNew+0x146>
          hTask = NULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006dfa:	697b      	ldr	r3, [r7, #20]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3738      	adds	r7, #56	; 0x38
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000038 	.word	0x20000038

08006e08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4a06      	ldr	r2, [pc, #24]	; (8006e30 <vApplicationGetIdleTaskMemory+0x28>)
 8006e18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4a05      	ldr	r2, [pc, #20]	; (8006e34 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2280      	movs	r2, #128	; 0x80
 8006e24:	601a      	str	r2, [r3, #0]
}
 8006e26:	bf00      	nop
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr
 8006e30:	2000003c 	.word	0x2000003c
 8006e34:	20000098 	.word	0x20000098

08006e38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4a07      	ldr	r2, [pc, #28]	; (8006e64 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	4a06      	ldr	r2, [pc, #24]	; (8006e68 <vApplicationGetTimerTaskMemory+0x30>)
 8006e4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e56:	601a      	str	r2, [r3, #0]
}
 8006e58:	bf00      	nop
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bc80      	pop	{r7}
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	20000298 	.word	0x20000298
 8006e68:	200002f4 	.word	0x200002f4

08006e6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f103 0208 	add.w	r2, r3, #8
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f04f 32ff 	mov.w	r2, #4294967295
 8006e84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f103 0208 	add.w	r2, r3, #8
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f103 0208 	add.w	r2, r3, #8
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bc80      	pop	{r7}
 8006ea8:	4770      	bx	lr

08006eaa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bc80      	pop	{r7}
 8006ec0:	4770      	bx	lr

08006ec2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	601a      	str	r2, [r3, #0]
}
 8006efe:	bf00      	nop
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr

08006f08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1e:	d103      	bne.n	8006f28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	e00c      	b.n	8006f42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	e002      	b.n	8006f36 <vListInsert+0x2e>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	60fb      	str	r3, [r7, #12]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d2f6      	bcs.n	8006f30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	601a      	str	r2, [r3, #0]
}
 8006f6e:	bf00      	nop
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr

08006f78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6892      	ldr	r2, [r2, #8]
 8006f8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6852      	ldr	r2, [r2, #4]
 8006f98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d103      	bne.n	8006fac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	1e5a      	subs	r2, r3, #1
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr
	...

08006fcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8006fda:	f001 ffdd 	bl	8008f98 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe6:	68f9      	ldr	r1, [r7, #12]
 8006fe8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fea:	fb01 f303 	mul.w	r3, r1, r3
 8006fee:	441a      	add	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700a:	3b01      	subs	r3, #1
 800700c:	68f9      	ldr	r1, [r7, #12]
 800700e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007010:	fb01 f303 	mul.w	r3, r1, r3
 8007014:	441a      	add	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	22ff      	movs	r2, #255	; 0xff
 800701e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d114      	bne.n	800705a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01a      	beq.n	800706e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3310      	adds	r3, #16
 800703c:	4618      	mov	r0, r3
 800703e:	f001 f943 	bl	80082c8 <xTaskRemoveFromEventList>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d012      	beq.n	800706e <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007048:	4b0c      	ldr	r3, [pc, #48]	; (800707c <xQueueGenericReset+0xb0>)
 800704a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	e009      	b.n	800706e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3310      	adds	r3, #16
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff ff04 	bl	8006e6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3324      	adds	r3, #36	; 0x24
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff feff 	bl	8006e6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800706e:	f001 ffad 	bl	8008fcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007072:	2301      	movs	r3, #1
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	e000ed04 	.word	0xe000ed04

08007080 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007080:	b580      	push	{r7, lr}
 8007082:	b088      	sub	sp, #32
 8007084:	af02      	add	r7, sp, #8
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00d      	beq.n	80070b4 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	4613      	mov	r3, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	68b9      	ldr	r1, [r7, #8]
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 f835 	bl	800711e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80070b4:	697b      	ldr	r3, [r7, #20]
	}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b08a      	sub	sp, #40	; 0x28
 80070c2:	af02      	add	r7, sp, #8
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	4613      	mov	r3, r2
 80070ca:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d102      	bne.n	80070d8 <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	e004      	b.n	80070e2 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	fb02 f303 	mul.w	r3, r2, r3
 80070e0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	3350      	adds	r3, #80	; 0x50
 80070e6:	4618      	mov	r0, r3
 80070e8:	f001 fff2 	bl	80090d0 <pvPortMalloc>
 80070ec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00f      	beq.n	8007114 <xQueueGenericCreate+0x56>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	3350      	adds	r3, #80	; 0x50
 80070f8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007102:	79fa      	ldrb	r2, [r7, #7]
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	4613      	mov	r3, r2
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	68b9      	ldr	r1, [r7, #8]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 f805 	bl	800711e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007114:	69bb      	ldr	r3, [r7, #24]
	}
 8007116:	4618      	mov	r0, r3
 8007118:	3720      	adds	r7, #32
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
 800712a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d103      	bne.n	800713a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	e002      	b.n	8007140 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800714c:	2101      	movs	r1, #1
 800714e:	69b8      	ldr	r0, [r7, #24]
 8007150:	f7ff ff3c 	bl	8006fcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	78fa      	ldrb	r2, [r7, #3]
 8007158:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800715c:	bf00      	nop
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800716e:	2202      	movs	r2, #2
 8007170:	2100      	movs	r1, #0
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7ff ffa3 	bl	80070be <xQueueGenericCreate>
 8007178:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007186:	68fb      	ldr	r3, [r7, #12]
	}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800719e:	2300      	movs	r3, #0
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071a6:	f001 fef7 	bl	8008f98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d302      	bcc.n	80071bc <xQueueGenericSend+0x2c>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d129      	bne.n	8007210 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	6a38      	ldr	r0, [r7, #32]
 80071c2:	f000 fb62 	bl	800788a <prvCopyDataToQueue>
 80071c6:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d010      	beq.n	80071f2 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	3324      	adds	r3, #36	; 0x24
 80071d4:	4618      	mov	r0, r3
 80071d6:	f001 f877 	bl	80082c8 <xTaskRemoveFromEventList>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d013      	beq.n	8007208 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071e0:	4b3f      	ldr	r3, [pc, #252]	; (80072e0 <xQueueGenericSend+0x150>)
 80071e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	e00a      	b.n	8007208 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071f8:	4b39      	ldr	r3, [pc, #228]	; (80072e0 <xQueueGenericSend+0x150>)
 80071fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007208:	f001 fee0 	bl	8008fcc <vPortExitCritical>
				return pdPASS;
 800720c:	2301      	movs	r3, #1
 800720e:	e063      	b.n	80072d8 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d103      	bne.n	800721e <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007216:	f001 fed9 	bl	8008fcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800721a:	2300      	movs	r3, #0
 800721c:	e05c      	b.n	80072d8 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	d106      	bne.n	8007232 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007224:	f107 0314 	add.w	r3, r7, #20
 8007228:	4618      	mov	r0, r3
 800722a:	f001 f8a3 	bl	8008374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800722e:	2301      	movs	r3, #1
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007232:	f001 fecb 	bl	8008fcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007236:	f000 fe6d 	bl	8007f14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800723a:	f001 fead 	bl	8008f98 <vPortEnterCritical>
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007244:	b25b      	sxtb	r3, r3
 8007246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724a:	d103      	bne.n	8007254 <xQueueGenericSend+0xc4>
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800725a:	b25b      	sxtb	r3, r3
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d103      	bne.n	800726a <xQueueGenericSend+0xda>
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800726a:	f001 feaf 	bl	8008fcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800726e:	1d3a      	adds	r2, r7, #4
 8007270:	f107 0314 	add.w	r3, r7, #20
 8007274:	4611      	mov	r1, r2
 8007276:	4618      	mov	r0, r3
 8007278:	f001 f892 	bl	80083a0 <xTaskCheckForTimeOut>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d124      	bne.n	80072cc <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007282:	6a38      	ldr	r0, [r7, #32]
 8007284:	f000 fbf9 	bl	8007a7a <prvIsQueueFull>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d018      	beq.n	80072c0 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	3310      	adds	r3, #16
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	4611      	mov	r1, r2
 8007296:	4618      	mov	r0, r3
 8007298:	f000 ffe2 	bl	8008260 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800729c:	6a38      	ldr	r0, [r7, #32]
 800729e:	f000 fb84 	bl	80079aa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072a2:	f000 fe45 	bl	8007f30 <xTaskResumeAll>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f47f af7c 	bne.w	80071a6 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 80072ae:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <xQueueGenericSend+0x150>)
 80072b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	e772      	b.n	80071a6 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072c0:	6a38      	ldr	r0, [r7, #32]
 80072c2:	f000 fb72 	bl	80079aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072c6:	f000 fe33 	bl	8007f30 <xTaskResumeAll>
 80072ca:	e76c      	b.n	80071a6 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072cc:	6a38      	ldr	r0, [r7, #32]
 80072ce:	f000 fb6c 	bl	80079aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072d2:	f000 fe2d 	bl	8007f30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072d6:	2300      	movs	r3, #0
		}
	}
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3728      	adds	r7, #40	; 0x28
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08c      	sub	sp, #48	; 0x30
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80072f6:	f3ef 8211 	mrs	r2, BASEPRI
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	61fa      	str	r2, [r7, #28]
 800730c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800730e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007310:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731a:	429a      	cmp	r2, r3
 800731c:	d302      	bcc.n	8007324 <xQueueGenericSendFromISR+0x40>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b02      	cmp	r3, #2
 8007322:	d12c      	bne.n	800737e <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800732a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007334:	f000 faa9 	bl	800788a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007338:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800733c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007340:	d112      	bne.n	8007368 <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	2b00      	cmp	r3, #0
 8007348:	d016      	beq.n	8007378 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	3324      	adds	r3, #36	; 0x24
 800734e:	4618      	mov	r0, r3
 8007350:	f000 ffba 	bl	80082c8 <xTaskRemoveFromEventList>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00e      	beq.n	8007378 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	e007      	b.n	8007378 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800736c:	3301      	adds	r3, #1
 800736e:	b2db      	uxtb	r3, r3
 8007370:	b25a      	sxtb	r2, r3
 8007372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007378:	2301      	movs	r3, #1
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 800737c:	e001      	b.n	8007382 <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800737e:	2300      	movs	r3, #0
 8007380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800738c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007390:	4618      	mov	r0, r3
 8007392:	3730      	adds	r7, #48	; 0x30
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08a      	sub	sp, #40	; 0x28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	623b      	str	r3, [r7, #32]
	__asm volatile
 80073a6:	f3ef 8211 	mrs	r2, BASEPRI
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	613a      	str	r2, [r7, #16]
 80073bc:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 80073be:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073c0:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c6:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d229      	bcs.n	8007426 <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073d8:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ea:	d112      	bne.n	8007412 <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d015      	beq.n	8007420 <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	3324      	adds	r3, #36	; 0x24
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 ff65 	bl	80082c8 <xTaskRemoveFromEventList>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00d      	beq.n	8007420 <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2201      	movs	r2, #1
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	e006      	b.n	8007420 <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007412:	7dfb      	ldrb	r3, [r7, #23]
 8007414:	3301      	adds	r3, #1
 8007416:	b2db      	uxtb	r3, r3
 8007418:	b25a      	sxtb	r2, r3
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007420:	2301      	movs	r3, #1
 8007422:	627b      	str	r3, [r7, #36]	; 0x24
 8007424:	e001      	b.n	800742a <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007426:	2300      	movs	r3, #0
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f383 8811 	msr	BASEPRI, r3
}
 8007434:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007438:	4618      	mov	r0, r3
 800743a:	3728      	adds	r7, #40	; 0x28
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08a      	sub	sp, #40	; 0x28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800744c:	2300      	movs	r3, #0
 800744e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007454:	f001 fda0 	bl	8008f98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01f      	beq.n	80074a4 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007464:	68b9      	ldr	r1, [r7, #8]
 8007466:	6a38      	ldr	r0, [r7, #32]
 8007468:	f000 fa79 	bl	800795e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	1e5a      	subs	r2, r3, #1
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00f      	beq.n	800749c <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	3310      	adds	r3, #16
 8007480:	4618      	mov	r0, r3
 8007482:	f000 ff21 	bl	80082c8 <xTaskRemoveFromEventList>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d007      	beq.n	800749c <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800748c:	4b3c      	ldr	r3, [pc, #240]	; (8007580 <xQueueReceive+0x140>)
 800748e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800749c:	f001 fd96 	bl	8008fcc <vPortExitCritical>
				return pdPASS;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e069      	b.n	8007578 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d103      	bne.n	80074b2 <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074aa:	f001 fd8f 	bl	8008fcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074ae:	2300      	movs	r3, #0
 80074b0:	e062      	b.n	8007578 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d106      	bne.n	80074c6 <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074b8:	f107 0314 	add.w	r3, r7, #20
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 ff59 	bl	8008374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074c2:	2301      	movs	r3, #1
 80074c4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074c6:	f001 fd81 	bl	8008fcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074ca:	f000 fd23 	bl	8007f14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074ce:	f001 fd63 	bl	8008f98 <vPortEnterCritical>
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074d8:	b25b      	sxtb	r3, r3
 80074da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074de:	d103      	bne.n	80074e8 <xQueueReceive+0xa8>
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074ee:	b25b      	sxtb	r3, r3
 80074f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f4:	d103      	bne.n	80074fe <xQueueReceive+0xbe>
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074fe:	f001 fd65 	bl	8008fcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007502:	1d3a      	adds	r2, r7, #4
 8007504:	f107 0314 	add.w	r3, r7, #20
 8007508:	4611      	mov	r1, r2
 800750a:	4618      	mov	r0, r3
 800750c:	f000 ff48 	bl	80083a0 <xTaskCheckForTimeOut>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d123      	bne.n	800755e <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007516:	6a38      	ldr	r0, [r7, #32]
 8007518:	f000 fa99 	bl	8007a4e <prvIsQueueEmpty>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d017      	beq.n	8007552 <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	3324      	adds	r3, #36	; 0x24
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	4611      	mov	r1, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fe98 	bl	8008260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007530:	6a38      	ldr	r0, [r7, #32]
 8007532:	f000 fa3a 	bl	80079aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007536:	f000 fcfb 	bl	8007f30 <xTaskResumeAll>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d189      	bne.n	8007454 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8007540:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <xQueueReceive+0x140>)
 8007542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	e780      	b.n	8007454 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007552:	6a38      	ldr	r0, [r7, #32]
 8007554:	f000 fa29 	bl	80079aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007558:	f000 fcea 	bl	8007f30 <xTaskResumeAll>
 800755c:	e77a      	b.n	8007454 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800755e:	6a38      	ldr	r0, [r7, #32]
 8007560:	f000 fa23 	bl	80079aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007564:	f000 fce4 	bl	8007f30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007568:	6a38      	ldr	r0, [r7, #32]
 800756a:	f000 fa70 	bl	8007a4e <prvIsQueueEmpty>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	f43f af6f 	beq.w	8007454 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007576:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007578:	4618      	mov	r0, r3
 800757a:	3728      	adds	r7, #40	; 0x28
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	e000ed04 	.word	0xe000ed04

08007584 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08a      	sub	sp, #40	; 0x28
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800758e:	2300      	movs	r3, #0
 8007590:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007596:	2300      	movs	r3, #0
 8007598:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800759a:	f001 fcfd 	bl	8008f98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d024      	beq.n	80075f4 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	1e5a      	subs	r2, r3, #1
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d104      	bne.n	80075c4 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80075ba:	f001 f949 	bl	8008850 <pvTaskIncrementMutexHeldCount>
 80075be:	4602      	mov	r2, r0
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00f      	beq.n	80075ec <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	3310      	adds	r3, #16
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fe79 	bl	80082c8 <xTaskRemoveFromEventList>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d007      	beq.n	80075ec <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075dc:	4b4c      	ldr	r3, [pc, #304]	; (8007710 <xQueueSemaphoreTake+0x18c>)
 80075de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075ec:	f001 fcee 	bl	8008fcc <vPortExitCritical>
				return pdPASS;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e089      	b.n	8007708 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d103      	bne.n	8007602 <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80075fa:	f001 fce7 	bl	8008fcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075fe:	2300      	movs	r3, #0
 8007600:	e082      	b.n	8007708 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d106      	bne.n	8007616 <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007608:	f107 030c 	add.w	r3, r7, #12
 800760c:	4618      	mov	r0, r3
 800760e:	f000 feb1 	bl	8008374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007612:	2301      	movs	r3, #1
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007616:	f001 fcd9 	bl	8008fcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800761a:	f000 fc7b 	bl	8007f14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800761e:	f001 fcbb 	bl	8008f98 <vPortEnterCritical>
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007628:	b25b      	sxtb	r3, r3
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d103      	bne.n	8007638 <xQueueSemaphoreTake+0xb4>
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800763e:	b25b      	sxtb	r3, r3
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d103      	bne.n	800764e <xQueueSemaphoreTake+0xca>
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800764e:	f001 fcbd 	bl	8008fcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007652:	463a      	mov	r2, r7
 8007654:	f107 030c 	add.w	r3, r7, #12
 8007658:	4611      	mov	r1, r2
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fea0 	bl	80083a0 <xTaskCheckForTimeOut>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d132      	bne.n	80076cc <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007666:	69f8      	ldr	r0, [r7, #28]
 8007668:	f000 f9f1 	bl	8007a4e <prvIsQueueEmpty>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d026      	beq.n	80076c0 <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d109      	bne.n	800768e <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 800767a:	f001 fc8d 	bl	8008f98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	4618      	mov	r0, r3
 8007684:	f000 ffc4 	bl	8008610 <xTaskPriorityInherit>
 8007688:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800768a:	f001 fc9f 	bl	8008fcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	3324      	adds	r3, #36	; 0x24
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	4611      	mov	r1, r2
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fde2 	bl	8008260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800769c:	69f8      	ldr	r0, [r7, #28]
 800769e:	f000 f984 	bl	80079aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076a2:	f000 fc45 	bl	8007f30 <xTaskResumeAll>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f47f af76 	bne.w	800759a <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 80076ae:	4b18      	ldr	r3, [pc, #96]	; (8007710 <xQueueSemaphoreTake+0x18c>)
 80076b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	e76c      	b.n	800759a <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80076c0:	69f8      	ldr	r0, [r7, #28]
 80076c2:	f000 f972 	bl	80079aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076c6:	f000 fc33 	bl	8007f30 <xTaskResumeAll>
 80076ca:	e766      	b.n	800759a <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80076cc:	69f8      	ldr	r0, [r7, #28]
 80076ce:	f000 f96c 	bl	80079aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076d2:	f000 fc2d 	bl	8007f30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076d6:	69f8      	ldr	r0, [r7, #28]
 80076d8:	f000 f9b9 	bl	8007a4e <prvIsQueueEmpty>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f43f af5b 	beq.w	800759a <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00d      	beq.n	8007706 <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 80076ea:	f001 fc55 	bl	8008f98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80076ee:	69f8      	ldr	r0, [r7, #28]
 80076f0:	f000 f8b4 	bl	800785c <prvGetDisinheritPriorityAfterTimeout>
 80076f4:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	6979      	ldr	r1, [r7, #20]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 f841 	bl	8008784 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007702:	f001 fc63 	bl	8008fcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007706:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007708:	4618      	mov	r0, r3
 800770a:	3728      	adds	r7, #40	; 0x28
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	e000ed04 	.word	0xe000ed04

08007714 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b08a      	sub	sp, #40	; 0x28
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007720:	2300      	movs	r3, #0
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007728:	f001 fc36 	bl	8008f98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007730:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d021      	beq.n	800777c <xQueuePeek+0x68>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800773e:	68b9      	ldr	r1, [r7, #8]
 8007740:	6a38      	ldr	r0, [r7, #32]
 8007742:	f000 f90c 	bl	800795e <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00f      	beq.n	8007774 <xQueuePeek+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	3324      	adds	r3, #36	; 0x24
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fdb5 	bl	80082c8 <xTaskRemoveFromEventList>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d007      	beq.n	8007774 <xQueuePeek+0x60>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8007764:	4b3c      	ldr	r3, [pc, #240]	; (8007858 <xQueuePeek+0x144>)
 8007766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007774:	f001 fc2a 	bl	8008fcc <vPortExitCritical>
				return pdPASS;
 8007778:	2301      	movs	r3, #1
 800777a:	e069      	b.n	8007850 <xQueuePeek+0x13c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <xQueuePeek+0x76>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007782:	f001 fc23 	bl	8008fcc <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007786:	2300      	movs	r3, #0
 8007788:	e062      	b.n	8007850 <xQueuePeek+0x13c>
				}
				else if( xEntryTimeSet == pdFALSE )
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <xQueuePeek+0x8a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007790:	f107 0310 	add.w	r3, r7, #16
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fded 	bl	8008374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800779a:	2301      	movs	r3, #1
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800779e:	f001 fc15 	bl	8008fcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077a2:	f000 fbb7 	bl	8007f14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077a6:	f001 fbf7 	bl	8008f98 <vPortEnterCritical>
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077b0:	b25b      	sxtb	r3, r3
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b6:	d103      	bne.n	80077c0 <xQueuePeek+0xac>
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077c6:	b25b      	sxtb	r3, r3
 80077c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077cc:	d103      	bne.n	80077d6 <xQueuePeek+0xc2>
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077d6:	f001 fbf9 	bl	8008fcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077da:	1d3a      	adds	r2, r7, #4
 80077dc:	f107 0310 	add.w	r3, r7, #16
 80077e0:	4611      	mov	r1, r2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fddc 	bl	80083a0 <xTaskCheckForTimeOut>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d123      	bne.n	8007836 <xQueuePeek+0x122>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077ee:	6a38      	ldr	r0, [r7, #32]
 80077f0:	f000 f92d 	bl	8007a4e <prvIsQueueEmpty>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d017      	beq.n	800782a <xQueuePeek+0x116>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	3324      	adds	r3, #36	; 0x24
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fd2c 	bl	8008260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007808:	6a38      	ldr	r0, [r7, #32]
 800780a:	f000 f8ce 	bl	80079aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800780e:	f000 fb8f 	bl	8007f30 <xTaskResumeAll>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d187      	bne.n	8007728 <xQueuePeek+0x14>
				{
					portYIELD_WITHIN_API();
 8007818:	4b0f      	ldr	r3, [pc, #60]	; (8007858 <xQueuePeek+0x144>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	e77e      	b.n	8007728 <xQueuePeek+0x14>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 800782a:	6a38      	ldr	r0, [r7, #32]
 800782c:	f000 f8bd 	bl	80079aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007830:	f000 fb7e 	bl	8007f30 <xTaskResumeAll>
 8007834:	e778      	b.n	8007728 <xQueuePeek+0x14>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8007836:	6a38      	ldr	r0, [r7, #32]
 8007838:	f000 f8b7 	bl	80079aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800783c:	f000 fb78 	bl	8007f30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007840:	6a38      	ldr	r0, [r7, #32]
 8007842:	f000 f904 	bl	8007a4e <prvIsQueueEmpty>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	f43f af6d 	beq.w	8007728 <xQueuePeek+0x14>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800784e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007850:	4618      	mov	r0, r3
 8007852:	3728      	adds	r7, #40	; 0x28
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	2b00      	cmp	r3, #0
 800786a:	d006      	beq.n	800787a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e001      	b.n	800787e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800787e:	68fb      	ldr	r3, [r7, #12]
	}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr

0800788a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b086      	sub	sp, #24
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10d      	bne.n	80078c4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d14d      	bne.n	800794c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 ff19 	bl	80086ec <xTaskPriorityDisinherit>
 80078ba:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	605a      	str	r2, [r3, #4]
 80078c2:	e043      	b.n	800794c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d119      	bne.n	80078fe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6898      	ldr	r0, [r3, #8]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	461a      	mov	r2, r3
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	f001 fda7 	bl	8009428 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	689a      	ldr	r2, [r3, #8]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	441a      	add	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d32b      	bcc.n	800794c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	609a      	str	r2, [r3, #8]
 80078fc:	e026      	b.n	800794c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	68d8      	ldr	r0, [r3, #12]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	461a      	mov	r2, r3
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	f001 fd8d 	bl	8009428 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	425b      	negs	r3, r3
 8007918:	441a      	add	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d207      	bcs.n	800793a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	425b      	negs	r3, r3
 8007934:	441a      	add	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d105      	bne.n	800794c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	3b01      	subs	r3, #1
 800794a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007954:	697b      	ldr	r3, [r7, #20]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796c:	2b00      	cmp	r3, #0
 800796e:	d018      	beq.n	80079a2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	441a      	add	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	429a      	cmp	r2, r3
 8007988:	d303      	bcc.n	8007992 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68d9      	ldr	r1, [r3, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	461a      	mov	r2, r3
 800799c:	6838      	ldr	r0, [r7, #0]
 800799e:	f001 fd43 	bl	8009428 <memcpy>
	}
}
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80079b2:	f001 faf1 	bl	8008f98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079bc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079be:	e011      	b.n	80079e4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d012      	beq.n	80079ee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3324      	adds	r3, #36	; 0x24
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 fc7b 	bl	80082c8 <xTaskRemoveFromEventList>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079d8:	f000 fd28 	bl	800842c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	3b01      	subs	r3, #1
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dce9      	bgt.n	80079c0 <prvUnlockQueue+0x16>
 80079ec:	e000      	b.n	80079f0 <prvUnlockQueue+0x46>
					break;
 80079ee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	22ff      	movs	r2, #255	; 0xff
 80079f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079f8:	f001 fae8 	bl	8008fcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079fc:	f001 facc 	bl	8008f98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a08:	e011      	b.n	8007a2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d012      	beq.n	8007a38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3310      	adds	r3, #16
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 fc56 	bl	80082c8 <xTaskRemoveFromEventList>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a22:	f000 fd03 	bl	800842c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	dce9      	bgt.n	8007a0a <prvUnlockQueue+0x60>
 8007a36:	e000      	b.n	8007a3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	22ff      	movs	r2, #255	; 0xff
 8007a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a42:	f001 fac3 	bl	8008fcc <vPortExitCritical>
}
 8007a46:	bf00      	nop
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a56:	f001 fa9f 	bl	8008f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d102      	bne.n	8007a68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a62:	2301      	movs	r3, #1
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	e001      	b.n	8007a6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a6c:	f001 faae 	bl	8008fcc <vPortExitCritical>

	return xReturn;
 8007a70:	68fb      	ldr	r3, [r7, #12]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a82:	f001 fa89 	bl	8008f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d102      	bne.n	8007a98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a92:	2301      	movs	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	e001      	b.n	8007a9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a9c:	f001 fa96 	bl	8008fcc <vPortExitCritical>

	return xReturn;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	e014      	b.n	8007ae6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007abc:	4a0e      	ldr	r2, [pc, #56]	; (8007af8 <vQueueAddToRegistry+0x4c>)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10b      	bne.n	8007ae0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ac8:	490b      	ldr	r1, [pc, #44]	; (8007af8 <vQueueAddToRegistry+0x4c>)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ad2:	4a09      	ldr	r2, [pc, #36]	; (8007af8 <vQueueAddToRegistry+0x4c>)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	4413      	add	r3, r2
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ade:	e006      	b.n	8007aee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b07      	cmp	r3, #7
 8007aea:	d9e7      	bls.n	8007abc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007aec:	bf00      	nop
 8007aee:	bf00      	nop
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bc80      	pop	{r7}
 8007af6:	4770      	bx	lr
 8007af8:	20003e98 	.word	0x20003e98

08007afc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b0c:	f001 fa44 	bl	8008f98 <vPortEnterCritical>
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b16:	b25b      	sxtb	r3, r3
 8007b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1c:	d103      	bne.n	8007b26 <vQueueWaitForMessageRestricted+0x2a>
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b2c:	b25b      	sxtb	r3, r3
 8007b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b32:	d103      	bne.n	8007b3c <vQueueWaitForMessageRestricted+0x40>
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b3c:	f001 fa46 	bl	8008fcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d106      	bne.n	8007b56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	3324      	adds	r3, #36	; 0x24
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	68b9      	ldr	r1, [r7, #8]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 fb9b 	bl	800828c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b56:	6978      	ldr	r0, [r7, #20]
 8007b58:	f7ff ff27 	bl	80079aa <prvUnlockQueue>
	}
 8007b5c:	bf00      	nop
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08a      	sub	sp, #40	; 0x28
 8007b68:	af04      	add	r7, sp, #16
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
			configASSERT( xSize == sizeof( TCB_t ) );
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01e      	beq.n	8007bb6 <xTaskCreateStatic+0x52>
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d01b      	beq.n	8007bb6 <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b86:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b90:	2300      	movs	r3, #0
 8007b92:	9303      	str	r3, [sp, #12]
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	9302      	str	r3, [sp, #8]
 8007b98:	f107 0310 	add.w	r3, r7, #16
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f850 	bl	8007c4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bae:	6978      	ldr	r0, [r7, #20]
 8007bb0:	f000 f8c4 	bl	8007d3c <prvAddNewTaskToReadyList>
 8007bb4:	e001      	b.n	8007bba <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 8007bba:	693b      	ldr	r3, [r7, #16]
	}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08c      	sub	sp, #48	; 0x30
 8007bc8:	af04      	add	r7, sp, #16
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	603b      	str	r3, [r7, #0]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd4:	88fb      	ldrh	r3, [r7, #6]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f001 fa79 	bl	80090d0 <pvPortMalloc>
 8007bde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00e      	beq.n	8007c04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007be6:	205c      	movs	r0, #92	; 0x5c
 8007be8:	f001 fa72 	bl	80090d0 <pvPortMalloc>
 8007bec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8007bfa:	e005      	b.n	8007c08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007bfc:	6978      	ldr	r0, [r7, #20]
 8007bfe:	f001 fafb 	bl	80091f8 <vPortFree>
 8007c02:	e001      	b.n	8007c08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d017      	beq.n	8007c3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c16:	88fa      	ldrh	r2, [r7, #6]
 8007c18:	2300      	movs	r3, #0
 8007c1a:	9303      	str	r3, [sp, #12]
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	9302      	str	r3, [sp, #8]
 8007c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68b9      	ldr	r1, [r7, #8]
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 f80e 	bl	8007c4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c32:	69f8      	ldr	r0, [r7, #28]
 8007c34:	f000 f882 	bl	8007d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	61bb      	str	r3, [r7, #24]
 8007c3c:	e002      	b.n	8007c44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c44:	69bb      	ldr	r3, [r7, #24]
	}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3720      	adds	r7, #32
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b086      	sub	sp, #24
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
 8007c5a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	461a      	mov	r2, r3
 8007c66:	21a5      	movs	r1, #165	; 0xa5
 8007c68:	f001 fbec 	bl	8009444 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c76:	3b01      	subs	r3, #1
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f023 0307 	bic.w	r3, r3, #7
 8007c84:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c86:	2300      	movs	r3, #0
 8007c88:	617b      	str	r3, [r7, #20]
 8007c8a:	e012      	b.n	8007cb2 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	4413      	add	r3, r2
 8007c92:	7819      	ldrb	r1, [r3, #0]
 8007c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	4413      	add	r3, r2
 8007c9a:	3334      	adds	r3, #52	; 0x34
 8007c9c:	460a      	mov	r2, r1
 8007c9e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d006      	beq.n	8007cba <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b0f      	cmp	r3, #15
 8007cb6:	d9e9      	bls.n	8007c8c <prvInitialiseNewTask+0x3e>
 8007cb8:	e000      	b.n	8007cbc <prvInitialiseNewTask+0x6e>
		{
			break;
 8007cba:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	2b37      	cmp	r3, #55	; 0x37
 8007cc8:	d901      	bls.n	8007cce <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007cca:	2337      	movs	r3, #55	; 0x37
 8007ccc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	6a3a      	ldr	r2, [r7, #32]
 8007cd2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	6a3a      	ldr	r2, [r7, #32]
 8007cd8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	2200      	movs	r2, #0
 8007cde:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff f8e0 	bl	8006eaa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	3318      	adds	r3, #24
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff f8db 	bl	8006eaa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cf8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d08:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	68f9      	ldr	r1, [r7, #12]
 8007d1c:	6938      	ldr	r0, [r7, #16]
 8007d1e:	f001 f8af 	bl	8008e80 <pxPortInitialiseStack>
 8007d22:	4602      	mov	r2, r0
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d34:	bf00      	nop
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d44:	f001 f928 	bl	8008f98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d48:	4b2d      	ldr	r3, [pc, #180]	; (8007e00 <prvAddNewTaskToReadyList+0xc4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	4a2c      	ldr	r2, [pc, #176]	; (8007e00 <prvAddNewTaskToReadyList+0xc4>)
 8007d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d52:	4b2c      	ldr	r3, [pc, #176]	; (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d109      	bne.n	8007d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d5a:	4a2a      	ldr	r2, [pc, #168]	; (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d60:	4b27      	ldr	r3, [pc, #156]	; (8007e00 <prvAddNewTaskToReadyList+0xc4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d110      	bne.n	8007d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d68:	f000 fb84 	bl	8008474 <prvInitialiseTaskLists>
 8007d6c:	e00d      	b.n	8007d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d6e:	4b26      	ldr	r3, [pc, #152]	; (8007e08 <prvAddNewTaskToReadyList+0xcc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d109      	bne.n	8007d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d76:	4b23      	ldr	r3, [pc, #140]	; (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d802      	bhi.n	8007d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d84:	4a1f      	ldr	r2, [pc, #124]	; (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d8a:	4b20      	ldr	r3, [pc, #128]	; (8007e0c <prvAddNewTaskToReadyList+0xd0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	4a1e      	ldr	r2, [pc, #120]	; (8007e0c <prvAddNewTaskToReadyList+0xd0>)
 8007d92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d94:	4b1d      	ldr	r3, [pc, #116]	; (8007e0c <prvAddNewTaskToReadyList+0xd0>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da0:	4b1b      	ldr	r3, [pc, #108]	; (8007e10 <prvAddNewTaskToReadyList+0xd4>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d903      	bls.n	8007db0 <prvAddNewTaskToReadyList+0x74>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	4a18      	ldr	r2, [pc, #96]	; (8007e10 <prvAddNewTaskToReadyList+0xd4>)
 8007dae:	6013      	str	r3, [r2, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4a15      	ldr	r2, [pc, #84]	; (8007e14 <prvAddNewTaskToReadyList+0xd8>)
 8007dbe:	441a      	add	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	f7ff f87b 	bl	8006ec2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007dcc:	f001 f8fe 	bl	8008fcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007dd0:	4b0d      	ldr	r3, [pc, #52]	; (8007e08 <prvAddNewTaskToReadyList+0xcc>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00e      	beq.n	8007df6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d207      	bcs.n	8007df6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007de6:	4b0c      	ldr	r3, [pc, #48]	; (8007e18 <prvAddNewTaskToReadyList+0xdc>)
 8007de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000bc8 	.word	0x20000bc8
 8007e04:	200006f4 	.word	0x200006f4
 8007e08:	20000bd4 	.word	0x20000bd4
 8007e0c:	20000be4 	.word	0x20000be4
 8007e10:	20000bd0 	.word	0x20000bd0
 8007e14:	200006f8 	.word	0x200006f8
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e24:	2300      	movs	r3, #0
 8007e26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d008      	beq.n	8007e40 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8007e2e:	f000 f871 	bl	8007f14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e32:	2100      	movs	r1, #0
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fd1f 	bl	8008878 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e3a:	f000 f879 	bl	8007f30 <xTaskResumeAll>
 8007e3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d107      	bne.n	8007e56 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8007e46:	4b06      	ldr	r3, [pc, #24]	; (8007e60 <vTaskDelay+0x44>)
 8007e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e56:	bf00      	nop
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	e000ed04 	.word	0xe000ed04

08007e64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08a      	sub	sp, #40	; 0x28
 8007e68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e72:	1d3a      	adds	r2, r7, #4
 8007e74:	f107 0108 	add.w	r1, r7, #8
 8007e78:	f107 030c 	add.w	r3, r7, #12
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fe ffc3 	bl	8006e08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	9202      	str	r2, [sp, #8]
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	2300      	movs	r3, #0
 8007e92:	460a      	mov	r2, r1
 8007e94:	4919      	ldr	r1, [pc, #100]	; (8007efc <vTaskStartScheduler+0x98>)
 8007e96:	481a      	ldr	r0, [pc, #104]	; (8007f00 <vTaskStartScheduler+0x9c>)
 8007e98:	f7ff fe64 	bl	8007b64 <xTaskCreateStatic>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	4a19      	ldr	r2, [pc, #100]	; (8007f04 <vTaskStartScheduler+0xa0>)
 8007ea0:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ea2:	4b18      	ldr	r3, [pc, #96]	; (8007f04 <vTaskStartScheduler+0xa0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	617b      	str	r3, [r7, #20]
 8007eae:	e001      	b.n	8007eb4 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d102      	bne.n	8007ec0 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8007eba:	f000 fd31 	bl	8008920 <xTimerCreateTimerTask>
 8007ebe:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d115      	bne.n	8007ef2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	613b      	str	r3, [r7, #16]
}
 8007ed8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <vTaskStartScheduler+0xa4>)
 8007edc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ee2:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <vTaskStartScheduler+0xa8>)
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007ee8:	4b09      	ldr	r3, [pc, #36]	; (8007f10 <vTaskStartScheduler+0xac>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007eee:	f001 f833 	bl	8008f58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ef2:	bf00      	nop
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	080094f0 	.word	0x080094f0
 8007f00:	08008445 	.word	0x08008445
 8007f04:	20000bec 	.word	0x20000bec
 8007f08:	20000be8 	.word	0x20000be8
 8007f0c:	20000bd4 	.word	0x20000bd4
 8007f10:	20000bcc 	.word	0x20000bcc

08007f14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007f18:	4b04      	ldr	r3, [pc, #16]	; (8007f2c <vTaskSuspendAll+0x18>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	4a03      	ldr	r2, [pc, #12]	; (8007f2c <vTaskSuspendAll+0x18>)
 8007f20:	6013      	str	r3, [r2, #0]
}
 8007f22:	bf00      	nop
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bc80      	pop	{r7}
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	20000bf0 	.word	0x20000bf0

08007f30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f3e:	f001 f82b 	bl	8008f98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f42:	4b39      	ldr	r3, [pc, #228]	; (8008028 <xTaskResumeAll+0xf8>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	4a37      	ldr	r2, [pc, #220]	; (8008028 <xTaskResumeAll+0xf8>)
 8007f4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f4c:	4b36      	ldr	r3, [pc, #216]	; (8008028 <xTaskResumeAll+0xf8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d162      	bne.n	800801a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f54:	4b35      	ldr	r3, [pc, #212]	; (800802c <xTaskResumeAll+0xfc>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d05e      	beq.n	800801a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f5c:	e02f      	b.n	8007fbe <xTaskResumeAll+0x8e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007f5e:	4b34      	ldr	r3, [pc, #208]	; (8008030 <xTaskResumeAll+0x100>)
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3318      	adds	r3, #24
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7ff f804 	bl	8006f78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3304      	adds	r3, #4
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe ffff 	bl	8006f78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7e:	4b2d      	ldr	r3, [pc, #180]	; (8008034 <xTaskResumeAll+0x104>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d903      	bls.n	8007f8e <xTaskResumeAll+0x5e>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8a:	4a2a      	ldr	r2, [pc, #168]	; (8008034 <xTaskResumeAll+0x104>)
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4a27      	ldr	r2, [pc, #156]	; (8008038 <xTaskResumeAll+0x108>)
 8007f9c:	441a      	add	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	f7fe ff8c 	bl	8006ec2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fae:	4b23      	ldr	r3, [pc, #140]	; (800803c <xTaskResumeAll+0x10c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d302      	bcc.n	8007fbe <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 8007fb8:	4b21      	ldr	r3, [pc, #132]	; (8008040 <xTaskResumeAll+0x110>)
 8007fba:	2201      	movs	r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fbe:	4b1c      	ldr	r3, [pc, #112]	; (8008030 <xTaskResumeAll+0x100>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1cb      	bne.n	8007f5e <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007fcc:	f000 fade 	bl	800858c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007fd0:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <xTaskResumeAll+0x114>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d010      	beq.n	8007ffe <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007fdc:	f000 f844 	bl	8008068 <xTaskIncrementTick>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d002      	beq.n	8007fec <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 8007fe6:	4b16      	ldr	r3, [pc, #88]	; (8008040 <xTaskResumeAll+0x110>)
 8007fe8:	2201      	movs	r2, #1
 8007fea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1f1      	bne.n	8007fdc <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
 8007ff8:	4b12      	ldr	r3, [pc, #72]	; (8008044 <xTaskResumeAll+0x114>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ffe:	4b10      	ldr	r3, [pc, #64]	; (8008040 <xTaskResumeAll+0x110>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d009      	beq.n	800801a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008006:	2301      	movs	r3, #1
 8008008:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800800a:	4b0f      	ldr	r3, [pc, #60]	; (8008048 <xTaskResumeAll+0x118>)
 800800c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800801a:	f000 ffd7 	bl	8008fcc <vPortExitCritical>

	return xAlreadyYielded;
 800801e:	68bb      	ldr	r3, [r7, #8]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20000bf0 	.word	0x20000bf0
 800802c:	20000bc8 	.word	0x20000bc8
 8008030:	20000b88 	.word	0x20000b88
 8008034:	20000bd0 	.word	0x20000bd0
 8008038:	200006f8 	.word	0x200006f8
 800803c:	200006f4 	.word	0x200006f4
 8008040:	20000bdc 	.word	0x20000bdc
 8008044:	20000bd8 	.word	0x20000bd8
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008052:	4b04      	ldr	r3, [pc, #16]	; (8008064 <xTaskGetTickCount+0x18>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008058:	687b      	ldr	r3, [r7, #4]
}
 800805a:	4618      	mov	r0, r3
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	bc80      	pop	{r7}
 8008062:	4770      	bx	lr
 8008064:	20000bcc 	.word	0x20000bcc

08008068 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800806e:	2300      	movs	r3, #0
 8008070:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008072:	4b49      	ldr	r3, [pc, #292]	; (8008198 <xTaskIncrementTick+0x130>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d17d      	bne.n	8008176 <xTaskIncrementTick+0x10e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800807a:	4b48      	ldr	r3, [pc, #288]	; (800819c <xTaskIncrementTick+0x134>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3301      	adds	r3, #1
 8008080:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008082:	4a46      	ldr	r2, [pc, #280]	; (800819c <xTaskIncrementTick+0x134>)
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d110      	bne.n	80080b0 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 800808e:	4b44      	ldr	r3, [pc, #272]	; (80081a0 <xTaskIncrementTick+0x138>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	4b43      	ldr	r3, [pc, #268]	; (80081a4 <xTaskIncrementTick+0x13c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a41      	ldr	r2, [pc, #260]	; (80081a0 <xTaskIncrementTick+0x138>)
 800809a:	6013      	str	r3, [r2, #0]
 800809c:	4a41      	ldr	r2, [pc, #260]	; (80081a4 <xTaskIncrementTick+0x13c>)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	4b41      	ldr	r3, [pc, #260]	; (80081a8 <xTaskIncrementTick+0x140>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3301      	adds	r3, #1
 80080a8:	4a3f      	ldr	r2, [pc, #252]	; (80081a8 <xTaskIncrementTick+0x140>)
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	f000 fa6e 	bl	800858c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080b0:	4b3e      	ldr	r3, [pc, #248]	; (80081ac <xTaskIncrementTick+0x144>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d34e      	bcc.n	8008158 <xTaskIncrementTick+0xf0>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080ba:	4b39      	ldr	r3, [pc, #228]	; (80081a0 <xTaskIncrementTick+0x138>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <xTaskIncrementTick+0x60>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <xTaskIncrementTick+0x62>
 80080c8:	2300      	movs	r3, #0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d004      	beq.n	80080d8 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ce:	4b37      	ldr	r3, [pc, #220]	; (80081ac <xTaskIncrementTick+0x144>)
 80080d0:	f04f 32ff 	mov.w	r2, #4294967295
 80080d4:	601a      	str	r2, [r3, #0]
					break;
 80080d6:	e03f      	b.n	8008158 <xTaskIncrementTick+0xf0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80080d8:	4b31      	ldr	r3, [pc, #196]	; (80081a0 <xTaskIncrementTick+0x138>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d203      	bcs.n	80080f8 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80080f0:	4a2e      	ldr	r2, [pc, #184]	; (80081ac <xTaskIncrementTick+0x144>)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6013      	str	r3, [r2, #0]
						break;
 80080f6:	e02f      	b.n	8008158 <xTaskIncrementTick+0xf0>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	3304      	adds	r3, #4
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fe ff3b 	bl	8006f78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008106:	2b00      	cmp	r3, #0
 8008108:	d004      	beq.n	8008114 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	3318      	adds	r3, #24
 800810e:	4618      	mov	r0, r3
 8008110:	f7fe ff32 	bl	8006f78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008118:	4b25      	ldr	r3, [pc, #148]	; (80081b0 <xTaskIncrementTick+0x148>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d903      	bls.n	8008128 <xTaskIncrementTick+0xc0>
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008124:	4a22      	ldr	r2, [pc, #136]	; (80081b0 <xTaskIncrementTick+0x148>)
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4a1f      	ldr	r2, [pc, #124]	; (80081b4 <xTaskIncrementTick+0x14c>)
 8008136:	441a      	add	r2, r3
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	3304      	adds	r3, #4
 800813c:	4619      	mov	r1, r3
 800813e:	4610      	mov	r0, r2
 8008140:	f7fe febf 	bl	8006ec2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008148:	4b1b      	ldr	r3, [pc, #108]	; (80081b8 <xTaskIncrementTick+0x150>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814e:	429a      	cmp	r2, r3
 8008150:	d3b3      	bcc.n	80080ba <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8008152:	2301      	movs	r3, #1
 8008154:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008156:	e7b0      	b.n	80080ba <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008158:	4b17      	ldr	r3, [pc, #92]	; (80081b8 <xTaskIncrementTick+0x150>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800815e:	4915      	ldr	r1, [pc, #84]	; (80081b4 <xTaskIncrementTick+0x14c>)
 8008160:	4613      	mov	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d907      	bls.n	8008180 <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 8008170:	2301      	movs	r3, #1
 8008172:	617b      	str	r3, [r7, #20]
 8008174:	e004      	b.n	8008180 <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008176:	4b11      	ldr	r3, [pc, #68]	; (80081bc <xTaskIncrementTick+0x154>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3301      	adds	r3, #1
 800817c:	4a0f      	ldr	r2, [pc, #60]	; (80081bc <xTaskIncrementTick+0x154>)
 800817e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008180:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <xTaskIncrementTick+0x158>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <xTaskIncrementTick+0x124>
		{
			xSwitchRequired = pdTRUE;
 8008188:	2301      	movs	r3, #1
 800818a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800818c:	697b      	ldr	r3, [r7, #20]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20000bf0 	.word	0x20000bf0
 800819c:	20000bcc 	.word	0x20000bcc
 80081a0:	20000b80 	.word	0x20000b80
 80081a4:	20000b84 	.word	0x20000b84
 80081a8:	20000be0 	.word	0x20000be0
 80081ac:	20000be8 	.word	0x20000be8
 80081b0:	20000bd0 	.word	0x20000bd0
 80081b4:	200006f8 	.word	0x200006f8
 80081b8:	200006f4 	.word	0x200006f4
 80081bc:	20000bd8 	.word	0x20000bd8
 80081c0:	20000bdc 	.word	0x20000bdc

080081c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081ca:	4b20      	ldr	r3, [pc, #128]	; (800824c <vTaskSwitchContext+0x88>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081d2:	4b1f      	ldr	r3, [pc, #124]	; (8008250 <vTaskSwitchContext+0x8c>)
 80081d4:	2201      	movs	r2, #1
 80081d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80081d8:	e033      	b.n	8008242 <vTaskSwitchContext+0x7e>
		xYieldPending = pdFALSE;
 80081da:	4b1d      	ldr	r3, [pc, #116]	; (8008250 <vTaskSwitchContext+0x8c>)
 80081dc:	2200      	movs	r2, #0
 80081de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80081e0:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <vTaskSwitchContext+0x90>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	607b      	str	r3, [r7, #4]
 80081e6:	e002      	b.n	80081ee <vTaskSwitchContext+0x2a>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	491a      	ldr	r1, [pc, #104]	; (8008258 <vTaskSwitchContext+0x94>)
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	4613      	mov	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	440b      	add	r3, r1
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0f2      	beq.n	80081e8 <vTaskSwitchContext+0x24>
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4a12      	ldr	r2, [pc, #72]	; (8008258 <vTaskSwitchContext+0x94>)
 800820e:	4413      	add	r3, r2
 8008210:	603b      	str	r3, [r7, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	605a      	str	r2, [r3, #4]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	3308      	adds	r3, #8
 8008224:	429a      	cmp	r2, r3
 8008226:	d104      	bne.n	8008232 <vTaskSwitchContext+0x6e>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	605a      	str	r2, [r3, #4]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	4a08      	ldr	r2, [pc, #32]	; (800825c <vTaskSwitchContext+0x98>)
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	4a05      	ldr	r2, [pc, #20]	; (8008254 <vTaskSwitchContext+0x90>)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6013      	str	r3, [r2, #0]
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr
 800824c:	20000bf0 	.word	0x20000bf0
 8008250:	20000bdc 	.word	0x20000bdc
 8008254:	20000bd0 	.word	0x20000bd0
 8008258:	200006f8 	.word	0x200006f8
 800825c:	200006f4 	.word	0x200006f4

08008260 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800826a:	4b07      	ldr	r3, [pc, #28]	; (8008288 <vTaskPlaceOnEventList+0x28>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3318      	adds	r3, #24
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fe fe48 	bl	8006f08 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008278:	2101      	movs	r1, #1
 800827a:	6838      	ldr	r0, [r7, #0]
 800827c:	f000 fafc 	bl	8008878 <prvAddCurrentTaskToDelayedList>
}
 8008280:	bf00      	nop
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	200006f4 	.word	0x200006f4

0800828c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008298:	4b0a      	ldr	r3, [pc, #40]	; (80082c4 <vTaskPlaceOnEventListRestricted+0x38>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3318      	adds	r3, #24
 800829e:	4619      	mov	r1, r3
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f7fe fe0e 	bl	8006ec2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 80082ac:	f04f 33ff 	mov.w	r3, #4294967295
 80082b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	68b8      	ldr	r0, [r7, #8]
 80082b6:	f000 fadf 	bl	8008878 <prvAddCurrentTaskToDelayedList>
	}
 80082ba:	bf00      	nop
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	200006f4 	.word	0x200006f4

080082c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	3318      	adds	r3, #24
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe fe4b 	bl	8006f78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082e2:	4b1e      	ldr	r3, [pc, #120]	; (800835c <xTaskRemoveFromEventList+0x94>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d11d      	bne.n	8008326 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	3304      	adds	r3, #4
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fe42 	bl	8006f78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f8:	4b19      	ldr	r3, [pc, #100]	; (8008360 <xTaskRemoveFromEventList+0x98>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d903      	bls.n	8008308 <xTaskRemoveFromEventList+0x40>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	4a16      	ldr	r2, [pc, #88]	; (8008360 <xTaskRemoveFromEventList+0x98>)
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830c:	4613      	mov	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4a13      	ldr	r2, [pc, #76]	; (8008364 <xTaskRemoveFromEventList+0x9c>)
 8008316:	441a      	add	r2, r3
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	3304      	adds	r3, #4
 800831c:	4619      	mov	r1, r3
 800831e:	4610      	mov	r0, r2
 8008320:	f7fe fdcf 	bl	8006ec2 <vListInsertEnd>
 8008324:	e005      	b.n	8008332 <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	3318      	adds	r3, #24
 800832a:	4619      	mov	r1, r3
 800832c:	480e      	ldr	r0, [pc, #56]	; (8008368 <xTaskRemoveFromEventList+0xa0>)
 800832e:	f7fe fdc8 	bl	8006ec2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	4b0d      	ldr	r3, [pc, #52]	; (800836c <xTaskRemoveFromEventList+0xa4>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	429a      	cmp	r2, r3
 800833e:	d905      	bls.n	800834c <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008340:	2301      	movs	r3, #1
 8008342:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008344:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <xTaskRemoveFromEventList+0xa8>)
 8008346:	2201      	movs	r2, #1
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	e001      	b.n	8008350 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 800834c:	2300      	movs	r3, #0
 800834e:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008350:	68fb      	ldr	r3, [r7, #12]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000bf0 	.word	0x20000bf0
 8008360:	20000bd0 	.word	0x20000bd0
 8008364:	200006f8 	.word	0x200006f8
 8008368:	20000b88 	.word	0x20000b88
 800836c:	200006f4 	.word	0x200006f4
 8008370:	20000bdc 	.word	0x20000bdc

08008374 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800837c:	4b06      	ldr	r3, [pc, #24]	; (8008398 <vTaskInternalSetTimeOutState+0x24>)
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008384:	4b05      	ldr	r3, [pc, #20]	; (800839c <vTaskInternalSetTimeOutState+0x28>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	605a      	str	r2, [r3, #4]
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	20000be0 	.word	0x20000be0
 800839c:	20000bcc 	.word	0x20000bcc

080083a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 80083aa:	f000 fdf5 	bl	8008f98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083ae:	4b1d      	ldr	r3, [pc, #116]	; (8008424 <xTaskCheckForTimeOut+0x84>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d102      	bne.n	80083ce <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083c8:	2300      	movs	r3, #0
 80083ca:	617b      	str	r3, [r7, #20]
 80083cc:	e023      	b.n	8008416 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	4b15      	ldr	r3, [pc, #84]	; (8008428 <xTaskCheckForTimeOut+0x88>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d007      	beq.n	80083ea <xTaskCheckForTimeOut+0x4a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d302      	bcc.n	80083ea <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083e4:	2301      	movs	r3, #1
 80083e6:	617b      	str	r3, [r7, #20]
 80083e8:	e015      	b.n	8008416 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d20b      	bcs.n	800840c <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	1ad2      	subs	r2, r2, r3
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7ff ffb7 	bl	8008374 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008406:	2300      	movs	r3, #0
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	e004      	b.n	8008416 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008412:	2301      	movs	r3, #1
 8008414:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008416:	f000 fdd9 	bl	8008fcc <vPortExitCritical>

	return xReturn;
 800841a:	697b      	ldr	r3, [r7, #20]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	20000bcc 	.word	0x20000bcc
 8008428:	20000be0 	.word	0x20000be0

0800842c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008430:	4b03      	ldr	r3, [pc, #12]	; (8008440 <vTaskMissedYield+0x14>)
 8008432:	2201      	movs	r2, #1
 8008434:	601a      	str	r2, [r3, #0]
}
 8008436:	bf00      	nop
 8008438:	46bd      	mov	sp, r7
 800843a:	bc80      	pop	{r7}
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	20000bdc 	.word	0x20000bdc

08008444 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800844c:	f000 f852 	bl	80084f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008450:	4b06      	ldr	r3, [pc, #24]	; (800846c <prvIdleTask+0x28>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d9f9      	bls.n	800844c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008458:	4b05      	ldr	r3, [pc, #20]	; (8008470 <prvIdleTask+0x2c>)
 800845a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008468:	e7f0      	b.n	800844c <prvIdleTask+0x8>
 800846a:	bf00      	nop
 800846c:	200006f8 	.word	0x200006f8
 8008470:	e000ed04 	.word	0xe000ed04

08008474 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800847a:	2300      	movs	r3, #0
 800847c:	607b      	str	r3, [r7, #4]
 800847e:	e00c      	b.n	800849a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	4613      	mov	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4a12      	ldr	r2, [pc, #72]	; (80084d4 <prvInitialiseTaskLists+0x60>)
 800848c:	4413      	add	r3, r2
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe fcec 	bl	8006e6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3301      	adds	r3, #1
 8008498:	607b      	str	r3, [r7, #4]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b37      	cmp	r3, #55	; 0x37
 800849e:	d9ef      	bls.n	8008480 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084a0:	480d      	ldr	r0, [pc, #52]	; (80084d8 <prvInitialiseTaskLists+0x64>)
 80084a2:	f7fe fce3 	bl	8006e6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084a6:	480d      	ldr	r0, [pc, #52]	; (80084dc <prvInitialiseTaskLists+0x68>)
 80084a8:	f7fe fce0 	bl	8006e6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084ac:	480c      	ldr	r0, [pc, #48]	; (80084e0 <prvInitialiseTaskLists+0x6c>)
 80084ae:	f7fe fcdd 	bl	8006e6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084b2:	480c      	ldr	r0, [pc, #48]	; (80084e4 <prvInitialiseTaskLists+0x70>)
 80084b4:	f7fe fcda 	bl	8006e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084b8:	480b      	ldr	r0, [pc, #44]	; (80084e8 <prvInitialiseTaskLists+0x74>)
 80084ba:	f7fe fcd7 	bl	8006e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084be:	4b0b      	ldr	r3, [pc, #44]	; (80084ec <prvInitialiseTaskLists+0x78>)
 80084c0:	4a05      	ldr	r2, [pc, #20]	; (80084d8 <prvInitialiseTaskLists+0x64>)
 80084c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084c4:	4b0a      	ldr	r3, [pc, #40]	; (80084f0 <prvInitialiseTaskLists+0x7c>)
 80084c6:	4a05      	ldr	r2, [pc, #20]	; (80084dc <prvInitialiseTaskLists+0x68>)
 80084c8:	601a      	str	r2, [r3, #0]
}
 80084ca:	bf00      	nop
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	200006f8 	.word	0x200006f8
 80084d8:	20000b58 	.word	0x20000b58
 80084dc:	20000b6c 	.word	0x20000b6c
 80084e0:	20000b88 	.word	0x20000b88
 80084e4:	20000b9c 	.word	0x20000b9c
 80084e8:	20000bb4 	.word	0x20000bb4
 80084ec:	20000b80 	.word	0x20000b80
 80084f0:	20000b84 	.word	0x20000b84

080084f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084fa:	e019      	b.n	8008530 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084fc:	f000 fd4c 	bl	8008f98 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008500:	4b10      	ldr	r3, [pc, #64]	; (8008544 <prvCheckTasksWaitingTermination+0x50>)
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3304      	adds	r3, #4
 800850c:	4618      	mov	r0, r3
 800850e:	f7fe fd33 	bl	8006f78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008512:	4b0d      	ldr	r3, [pc, #52]	; (8008548 <prvCheckTasksWaitingTermination+0x54>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3b01      	subs	r3, #1
 8008518:	4a0b      	ldr	r2, [pc, #44]	; (8008548 <prvCheckTasksWaitingTermination+0x54>)
 800851a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800851c:	4b0b      	ldr	r3, [pc, #44]	; (800854c <prvCheckTasksWaitingTermination+0x58>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3b01      	subs	r3, #1
 8008522:	4a0a      	ldr	r2, [pc, #40]	; (800854c <prvCheckTasksWaitingTermination+0x58>)
 8008524:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008526:	f000 fd51 	bl	8008fcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f810 	bl	8008550 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008530:	4b06      	ldr	r3, [pc, #24]	; (800854c <prvCheckTasksWaitingTermination+0x58>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e1      	bne.n	80084fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008538:	bf00      	nop
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000b9c 	.word	0x20000b9c
 8008548:	20000bc8 	.word	0x20000bc8
 800854c:	20000bb0 	.word	0x20000bb0

08008550 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800855e:	2b00      	cmp	r3, #0
 8008560:	d108      	bne.n	8008574 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fe46 	bl	80091f8 <vPortFree>
				vPortFree( pxTCB );
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fe43 	bl	80091f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008572:	e007      	b.n	8008584 <prvDeleteTCB+0x34>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800857a:	2b01      	cmp	r3, #1
 800857c:	d102      	bne.n	8008584 <prvDeleteTCB+0x34>
				vPortFree( pxTCB );
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fe3a 	bl	80091f8 <vPortFree>
	}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008592:	4b0e      	ldr	r3, [pc, #56]	; (80085cc <prvResetNextTaskUnblockTime+0x40>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <prvResetNextTaskUnblockTime+0x14>
 800859c:	2301      	movs	r3, #1
 800859e:	e000      	b.n	80085a2 <prvResetNextTaskUnblockTime+0x16>
 80085a0:	2300      	movs	r3, #0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d004      	beq.n	80085b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085a6:	4b0a      	ldr	r3, [pc, #40]	; (80085d0 <prvResetNextTaskUnblockTime+0x44>)
 80085a8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085ae:	e008      	b.n	80085c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80085b0:	4b06      	ldr	r3, [pc, #24]	; (80085cc <prvResetNextTaskUnblockTime+0x40>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	4a04      	ldr	r2, [pc, #16]	; (80085d0 <prvResetNextTaskUnblockTime+0x44>)
 80085c0:	6013      	str	r3, [r2, #0]
}
 80085c2:	bf00      	nop
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bc80      	pop	{r7}
 80085ca:	4770      	bx	lr
 80085cc:	20000b80 	.word	0x20000b80
 80085d0:	20000be8 	.word	0x20000be8

080085d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085da:	4b0b      	ldr	r3, [pc, #44]	; (8008608 <xTaskGetSchedulerState+0x34>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d102      	bne.n	80085e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085e2:	2301      	movs	r3, #1
 80085e4:	607b      	str	r3, [r7, #4]
 80085e6:	e008      	b.n	80085fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085e8:	4b08      	ldr	r3, [pc, #32]	; (800860c <xTaskGetSchedulerState+0x38>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085f0:	2302      	movs	r3, #2
 80085f2:	607b      	str	r3, [r7, #4]
 80085f4:	e001      	b.n	80085fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085f6:	2300      	movs	r3, #0
 80085f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085fa:	687b      	ldr	r3, [r7, #4]
	}
 80085fc:	4618      	mov	r0, r3
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	bc80      	pop	{r7}
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	20000bd4 	.word	0x20000bd4
 800860c:	20000bf0 	.word	0x20000bf0

08008610 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d056      	beq.n	80086d4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862a:	4b2d      	ldr	r3, [pc, #180]	; (80086e0 <xTaskPriorityInherit+0xd0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	429a      	cmp	r2, r3
 8008632:	d246      	bcs.n	80086c2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	2b00      	cmp	r3, #0
 800863a:	db06      	blt.n	800864a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800863c:	4b28      	ldr	r3, [pc, #160]	; (80086e0 <xTaskPriorityInherit+0xd0>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008642:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	6959      	ldr	r1, [r3, #20]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008652:	4613      	mov	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4a22      	ldr	r2, [pc, #136]	; (80086e4 <xTaskPriorityInherit+0xd4>)
 800865c:	4413      	add	r3, r2
 800865e:	4299      	cmp	r1, r3
 8008660:	d101      	bne.n	8008666 <xTaskPriorityInherit+0x56>
 8008662:	2301      	movs	r3, #1
 8008664:	e000      	b.n	8008668 <xTaskPriorityInherit+0x58>
 8008666:	2300      	movs	r3, #0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d022      	beq.n	80086b2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	3304      	adds	r3, #4
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe fc81 	bl	8006f78 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008676:	4b1a      	ldr	r3, [pc, #104]	; (80086e0 <xTaskPriorityInherit+0xd0>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008684:	4b18      	ldr	r3, [pc, #96]	; (80086e8 <xTaskPriorityInherit+0xd8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d903      	bls.n	8008694 <xTaskPriorityInherit+0x84>
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	4a15      	ldr	r2, [pc, #84]	; (80086e8 <xTaskPriorityInherit+0xd8>)
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4a10      	ldr	r2, [pc, #64]	; (80086e4 <xTaskPriorityInherit+0xd4>)
 80086a2:	441a      	add	r2, r3
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	3304      	adds	r3, #4
 80086a8:	4619      	mov	r1, r3
 80086aa:	4610      	mov	r0, r2
 80086ac:	f7fe fc09 	bl	8006ec2 <vListInsertEnd>
 80086b0:	e004      	b.n	80086bc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086b2:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <xTaskPriorityInherit+0xd0>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	e008      	b.n	80086d4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086c6:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <xTaskPriorityInherit+0xd0>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d201      	bcs.n	80086d4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80086d0:	2301      	movs	r3, #1
 80086d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086d4:	68fb      	ldr	r3, [r7, #12]
	}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	200006f4 	.word	0x200006f4
 80086e4:	200006f8 	.word	0x200006f8
 80086e8:	20000bd0 	.word	0x20000bd0

080086ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d037      	beq.n	8008772 <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008706:	1e5a      	subs	r2, r3, #1
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008714:	429a      	cmp	r2, r3
 8008716:	d02c      	beq.n	8008772 <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800871c:	2b00      	cmp	r3, #0
 800871e:	d128      	bne.n	8008772 <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	3304      	adds	r3, #4
 8008724:	4618      	mov	r0, r3
 8008726:	f7fe fc27 	bl	8006f78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008736:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008742:	4b0e      	ldr	r3, [pc, #56]	; (800877c <xTaskPriorityDisinherit+0x90>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	d903      	bls.n	8008752 <xTaskPriorityDisinherit+0x66>
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874e:	4a0b      	ldr	r2, [pc, #44]	; (800877c <xTaskPriorityDisinherit+0x90>)
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008756:	4613      	mov	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4a08      	ldr	r2, [pc, #32]	; (8008780 <xTaskPriorityDisinherit+0x94>)
 8008760:	441a      	add	r2, r3
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	3304      	adds	r3, #4
 8008766:	4619      	mov	r1, r3
 8008768:	4610      	mov	r0, r2
 800876a:	f7fe fbaa 	bl	8006ec2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800876e:	2301      	movs	r3, #1
 8008770:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008772:	68fb      	ldr	r3, [r7, #12]
	}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	20000bd0 	.word	0x20000bd0
 8008780:	200006f8 	.word	0x200006f8

08008784 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008792:	2301      	movs	r3, #1
 8008794:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d050      	beq.n	800883e <vTaskPriorityDisinheritAfterTimeout+0xba>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d902      	bls.n	80087ac <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	617b      	str	r3, [r7, #20]
 80087aa:	e002      	b.n	80087b2 <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b0:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d040      	beq.n	800883e <vTaskPriorityDisinheritAfterTimeout+0xba>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d13b      	bne.n	800883e <vTaskPriorityDisinheritAfterTimeout+0xba>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	db04      	blt.n	80087e4 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	6959      	ldr	r1, [r3, #20]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4a15      	ldr	r2, [pc, #84]	; (8008848 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80087f4:	4413      	add	r3, r2
 80087f6:	4299      	cmp	r1, r3
 80087f8:	d101      	bne.n	80087fe <vTaskPriorityDisinheritAfterTimeout+0x7a>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e000      	b.n	8008800 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80087fe:	2300      	movs	r3, #0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d01c      	beq.n	800883e <vTaskPriorityDisinheritAfterTimeout+0xba>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	3304      	adds	r3, #4
 8008808:	4618      	mov	r0, r3
 800880a:	f7fe fbb5 	bl	8006f78 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008812:	4b0e      	ldr	r3, [pc, #56]	; (800884c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d903      	bls.n	8008822 <vTaskPriorityDisinheritAfterTimeout+0x9e>
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881e:	4a0b      	ldr	r2, [pc, #44]	; (800884c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8008820:	6013      	str	r3, [r2, #0]
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008826:	4613      	mov	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4a06      	ldr	r2, [pc, #24]	; (8008848 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8008830:	441a      	add	r2, r3
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	3304      	adds	r3, #4
 8008836:	4619      	mov	r1, r3
 8008838:	4610      	mov	r0, r2
 800883a:	f7fe fb42 	bl	8006ec2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800883e:	bf00      	nop
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	200006f8 	.word	0x200006f8
 800884c:	20000bd0 	.word	0x20000bd0

08008850 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008854:	4b07      	ldr	r3, [pc, #28]	; (8008874 <pvTaskIncrementMutexHeldCount+0x24>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d004      	beq.n	8008866 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800885c:	4b05      	ldr	r3, [pc, #20]	; (8008874 <pvTaskIncrementMutexHeldCount+0x24>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008862:	3201      	adds	r2, #1
 8008864:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008866:	4b03      	ldr	r3, [pc, #12]	; (8008874 <pvTaskIncrementMutexHeldCount+0x24>)
 8008868:	681b      	ldr	r3, [r3, #0]
	}
 800886a:	4618      	mov	r0, r3
 800886c:	46bd      	mov	sp, r7
 800886e:	bc80      	pop	{r7}
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	200006f4 	.word	0x200006f4

08008878 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008882:	4b21      	ldr	r3, [pc, #132]	; (8008908 <prvAddCurrentTaskToDelayedList+0x90>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008888:	4b20      	ldr	r3, [pc, #128]	; (800890c <prvAddCurrentTaskToDelayedList+0x94>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3304      	adds	r3, #4
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fb72 	bl	8006f78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889a:	d10a      	bne.n	80088b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d007      	beq.n	80088b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088a2:	4b1a      	ldr	r3, [pc, #104]	; (800890c <prvAddCurrentTaskToDelayedList+0x94>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4619      	mov	r1, r3
 80088aa:	4819      	ldr	r0, [pc, #100]	; (8008910 <prvAddCurrentTaskToDelayedList+0x98>)
 80088ac:	f7fe fb09 	bl	8006ec2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088b0:	e026      	b.n	8008900 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4413      	add	r3, r2
 80088b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088ba:	4b14      	ldr	r3, [pc, #80]	; (800890c <prvAddCurrentTaskToDelayedList+0x94>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d209      	bcs.n	80088de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088ca:	4b12      	ldr	r3, [pc, #72]	; (8008914 <prvAddCurrentTaskToDelayedList+0x9c>)
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	4b0f      	ldr	r3, [pc, #60]	; (800890c <prvAddCurrentTaskToDelayedList+0x94>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3304      	adds	r3, #4
 80088d4:	4619      	mov	r1, r3
 80088d6:	4610      	mov	r0, r2
 80088d8:	f7fe fb16 	bl	8006f08 <vListInsert>
}
 80088dc:	e010      	b.n	8008900 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088de:	4b0e      	ldr	r3, [pc, #56]	; (8008918 <prvAddCurrentTaskToDelayedList+0xa0>)
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b0a      	ldr	r3, [pc, #40]	; (800890c <prvAddCurrentTaskToDelayedList+0x94>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3304      	adds	r3, #4
 80088e8:	4619      	mov	r1, r3
 80088ea:	4610      	mov	r0, r2
 80088ec:	f7fe fb0c 	bl	8006f08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088f0:	4b0a      	ldr	r3, [pc, #40]	; (800891c <prvAddCurrentTaskToDelayedList+0xa4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d202      	bcs.n	8008900 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80088fa:	4a08      	ldr	r2, [pc, #32]	; (800891c <prvAddCurrentTaskToDelayedList+0xa4>)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	6013      	str	r3, [r2, #0]
}
 8008900:	bf00      	nop
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	20000bcc 	.word	0x20000bcc
 800890c:	200006f4 	.word	0x200006f4
 8008910:	20000bb4 	.word	0x20000bb4
 8008914:	20000b84 	.word	0x20000b84
 8008918:	20000b80 	.word	0x20000b80
 800891c:	20000be8 	.word	0x20000be8

08008920 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008926:	2300      	movs	r3, #0
 8008928:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800892a:	f000 fa69 	bl	8008e00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800892e:	4b15      	ldr	r3, [pc, #84]	; (8008984 <xTimerCreateTimerTask+0x64>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d020      	beq.n	8008978 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008936:	2300      	movs	r3, #0
 8008938:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800893a:	2300      	movs	r3, #0
 800893c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800893e:	463a      	mov	r2, r7
 8008940:	1d39      	adds	r1, r7, #4
 8008942:	f107 0308 	add.w	r3, r7, #8
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fa76 	bl	8006e38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	9202      	str	r2, [sp, #8]
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	2302      	movs	r3, #2
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	2300      	movs	r3, #0
 800895c:	460a      	mov	r2, r1
 800895e:	490a      	ldr	r1, [pc, #40]	; (8008988 <xTimerCreateTimerTask+0x68>)
 8008960:	480a      	ldr	r0, [pc, #40]	; (800898c <xTimerCreateTimerTask+0x6c>)
 8008962:	f7ff f8ff 	bl	8007b64 <xTaskCreateStatic>
 8008966:	4603      	mov	r3, r0
 8008968:	4a09      	ldr	r2, [pc, #36]	; (8008990 <xTimerCreateTimerTask+0x70>)
 800896a:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800896c:	4b08      	ldr	r3, [pc, #32]	; (8008990 <xTimerCreateTimerTask+0x70>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8008974:	2301      	movs	r3, #1
 8008976:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 8008978:	68fb      	ldr	r3, [r7, #12]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000c24 	.word	0x20000c24
 8008988:	080094f8 	.word	0x080094f8
 800898c:	08008a79 	.word	0x08008a79
 8008990:	20000c28 	.word	0x20000c28

08008994 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08a      	sub	sp, #40	; 0x28
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80089a2:	2300      	movs	r3, #0
 80089a4:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80089a6:	4b1a      	ldr	r3, [pc, #104]	; (8008a10 <xTimerGenericCommand+0x7c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d02a      	beq.n	8008a04 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b05      	cmp	r3, #5
 80089be:	dc18      	bgt.n	80089f2 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089c0:	f7ff fe08 	bl	80085d4 <xTaskGetSchedulerState>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d109      	bne.n	80089de <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089ca:	4b11      	ldr	r3, [pc, #68]	; (8008a10 <xTimerGenericCommand+0x7c>)
 80089cc:	6818      	ldr	r0, [r3, #0]
 80089ce:	f107 0114 	add.w	r1, r7, #20
 80089d2:	2300      	movs	r3, #0
 80089d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089d6:	f7fe fbdb 	bl	8007190 <xQueueGenericSend>
 80089da:	6278      	str	r0, [r7, #36]	; 0x24
 80089dc:	e012      	b.n	8008a04 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089de:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <xTimerGenericCommand+0x7c>)
 80089e0:	6818      	ldr	r0, [r3, #0]
 80089e2:	f107 0114 	add.w	r1, r7, #20
 80089e6:	2300      	movs	r3, #0
 80089e8:	2200      	movs	r2, #0
 80089ea:	f7fe fbd1 	bl	8007190 <xQueueGenericSend>
 80089ee:	6278      	str	r0, [r7, #36]	; 0x24
 80089f0:	e008      	b.n	8008a04 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <xTimerGenericCommand+0x7c>)
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	f107 0114 	add.w	r1, r7, #20
 80089fa:	2300      	movs	r3, #0
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	f7fe fc71 	bl	80072e4 <xQueueGenericSendFromISR>
 8008a02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3728      	adds	r7, #40	; 0x28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20000c24 	.word	0x20000c24

08008a14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af02      	add	r7, sp, #8
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a1e:	4b15      	ldr	r3, [pc, #84]	; (8008a74 <prvProcessExpiredTimer+0x60>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fe faa3 	bl	8006f78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d114      	bne.n	8008a64 <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	699a      	ldr	r2, [r3, #24]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	18d1      	adds	r1, r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 f8ba 	bl	8008bc0 <prvInsertTimerInActiveList>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d008      	beq.n	8008a64 <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a52:	2300      	movs	r3, #0
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	2300      	movs	r3, #0
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f7ff ff99 	bl	8008994 <xTimerGenericCommand>
 8008a62:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	4798      	blx	r3
}
 8008a6c:	bf00      	nop
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	20000c1c 	.word	0x20000c1c

08008a78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a80:	f107 0308 	add.w	r3, r7, #8
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 f857 	bl	8008b38 <prvGetNextExpireTime>
 8008a8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f000 f803 	bl	8008a9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a96:	f000 f8d5 	bl	8008c44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a9a:	e7f1      	b.n	8008a80 <prvTimerTask+0x8>

08008a9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008aa6:	f7ff fa35 	bl	8007f14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008aaa:	f107 0308 	add.w	r3, r7, #8
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f000 f866 	bl	8008b80 <prvSampleTimeNow>
 8008ab4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d130      	bne.n	8008b1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10a      	bne.n	8008ad8 <prvProcessTimerOrBlockTask+0x3c>
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d806      	bhi.n	8008ad8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008aca:	f7ff fa31 	bl	8007f30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ace:	68f9      	ldr	r1, [r7, #12]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff ff9f 	bl	8008a14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008ad6:	e024      	b.n	8008b22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d008      	beq.n	8008af0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008ade:	4b13      	ldr	r3, [pc, #76]	; (8008b2c <prvProcessTimerOrBlockTask+0x90>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	bf0c      	ite	eq
 8008ae8:	2301      	moveq	r3, #1
 8008aea:	2300      	movne	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008af0:	4b0f      	ldr	r3, [pc, #60]	; (8008b30 <prvProcessTimerOrBlockTask+0x94>)
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	4619      	mov	r1, r3
 8008afe:	f7fe fffd 	bl	8007afc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b02:	f7ff fa15 	bl	8007f30 <xTaskResumeAll>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10a      	bne.n	8008b22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b0c:	4b09      	ldr	r3, [pc, #36]	; (8008b34 <prvProcessTimerOrBlockTask+0x98>)
 8008b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	f3bf 8f6f 	isb	sy
}
 8008b1c:	e001      	b.n	8008b22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b1e:	f7ff fa07 	bl	8007f30 <xTaskResumeAll>
}
 8008b22:	bf00      	nop
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20000c20 	.word	0x20000c20
 8008b30:	20000c24 	.word	0x20000c24
 8008b34:	e000ed04 	.word	0xe000ed04

08008b38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b40:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <prvGetNextExpireTime+0x44>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bf0c      	ite	eq
 8008b4a:	2301      	moveq	r3, #1
 8008b4c:	2300      	movne	r3, #0
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	461a      	mov	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d105      	bne.n	8008b6a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b5e:	4b07      	ldr	r3, [pc, #28]	; (8008b7c <prvGetNextExpireTime+0x44>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	e001      	b.n	8008b6e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	20000c1c 	.word	0x20000c1c

08008b80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008b88:	f7ff fa60 	bl	800804c <xTaskGetTickCount>
 8008b8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b8e:	4b0b      	ldr	r3, [pc, #44]	; (8008bbc <prvSampleTimeNow+0x3c>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d205      	bcs.n	8008ba4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b98:	f000 f8de 	bl	8008d58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	e002      	b.n	8008baa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008baa:	4a04      	ldr	r2, [pc, #16]	; (8008bbc <prvSampleTimeNow+0x3c>)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	20000c2c 	.word	0x20000c2c

08008bc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d812      	bhi.n	8008c0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	1ad2      	subs	r2, r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d302      	bcc.n	8008bfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	617b      	str	r3, [r7, #20]
 8008bf8:	e01b      	b.n	8008c32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008bfa:	4b10      	ldr	r3, [pc, #64]	; (8008c3c <prvInsertTimerInActiveList+0x7c>)
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3304      	adds	r3, #4
 8008c02:	4619      	mov	r1, r3
 8008c04:	4610      	mov	r0, r2
 8008c06:	f7fe f97f 	bl	8006f08 <vListInsert>
 8008c0a:	e012      	b.n	8008c32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d206      	bcs.n	8008c22 <prvInsertTimerInActiveList+0x62>
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d302      	bcc.n	8008c22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	617b      	str	r3, [r7, #20]
 8008c20:	e007      	b.n	8008c32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c22:	4b07      	ldr	r3, [pc, #28]	; (8008c40 <prvInsertTimerInActiveList+0x80>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3304      	adds	r3, #4
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	f7fe f96b 	bl	8006f08 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c32:	697b      	ldr	r3, [r7, #20]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	20000c20 	.word	0x20000c20
 8008c40:	20000c1c 	.word	0x20000c1c

08008c44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b08c      	sub	sp, #48	; 0x30
 8008c48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c4a:	e073      	b.n	8008d34 <prvProcessReceivedCommands+0xf0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	da0b      	bge.n	8008c6a <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c52:	f107 0308 	add.w	r3, r7, #8
 8008c56:	3304      	adds	r3, #4
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c60:	6850      	ldr	r0, [r2, #4]
 8008c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c64:	6892      	ldr	r2, [r2, #8]
 8008c66:	4611      	mov	r1, r2
 8008c68:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	db60      	blt.n	8008d32 <prvProcessReceivedCommands+0xee>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d004      	beq.n	8008c86 <prvProcessReceivedCommands+0x42>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	3304      	adds	r3, #4
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe f979 	bl	8006f78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c86:	1d3b      	adds	r3, r7, #4
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff ff79 	bl	8008b80 <prvSampleTimeNow>
 8008c8e:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b09      	cmp	r3, #9
 8008c94:	d84e      	bhi.n	8008d34 <prvProcessReceivedCommands+0xf0>
 8008c96:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <prvProcessReceivedCommands+0x58>)
 8008c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9c:	08008cc5 	.word	0x08008cc5
 8008ca0:	08008cc5 	.word	0x08008cc5
 8008ca4:	08008cc5 	.word	0x08008cc5
 8008ca8:	08008d35 	.word	0x08008d35
 8008cac:	08008d07 	.word	0x08008d07
 8008cb0:	08008d21 	.word	0x08008d21
 8008cb4:	08008cc5 	.word	0x08008cc5
 8008cb8:	08008cc5 	.word	0x08008cc5
 8008cbc:	08008d35 	.word	0x08008d35
 8008cc0:	08008d07 	.word	0x08008d07
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	18d1      	adds	r1, r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	6a38      	ldr	r0, [r7, #32]
 8008cd2:	f7ff ff75 	bl	8008bc0 <prvInsertTimerInActiveList>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d02b      	beq.n	8008d34 <prvProcessReceivedCommands+0xf0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce0:	6a38      	ldr	r0, [r7, #32]
 8008ce2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d123      	bne.n	8008d34 <prvProcessReceivedCommands+0xf0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	6a3b      	ldr	r3, [r7, #32]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	441a      	add	r2, r3
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	6a38      	ldr	r0, [r7, #32]
 8008cfe:	f7ff fe49 	bl	8008994 <xTimerGenericCommand>
 8008d02:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8008d04:	e016      	b.n	8008d34 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	699a      	ldr	r2, [r3, #24]
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	18d1      	adds	r1, r2, r3
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	6a38      	ldr	r0, [r7, #32]
 8008d1a:	f7ff ff51 	bl	8008bc0 <prvInsertTimerInActiveList>
					break;
 8008d1e:	e009      	b.n	8008d34 <prvProcessReceivedCommands+0xf0>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d104      	bne.n	8008d34 <prvProcessReceivedCommands+0xf0>
						{
							vPortFree( pxTimer );
 8008d2a:	6a38      	ldr	r0, [r7, #32]
 8008d2c:	f000 fa64 	bl	80091f8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d30:	e000      	b.n	8008d34 <prvProcessReceivedCommands+0xf0>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008d32:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d34:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <prvProcessReceivedCommands+0x110>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f107 0108 	add.w	r1, r7, #8
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe fb7e 	bl	8007440 <xQueueReceive>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d180      	bne.n	8008c4c <prvProcessReceivedCommands+0x8>
	}
}
 8008d4a:	bf00      	nop
 8008d4c:	bf00      	nop
 8008d4e:	3728      	adds	r7, #40	; 0x28
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000c24 	.word	0x20000c24

08008d58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b088      	sub	sp, #32
 8008d5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d5e:	e037      	b.n	8008dd0 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d60:	4b25      	ldr	r3, [pc, #148]	; (8008df8 <prvSwitchTimerLists+0xa0>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d6a:	4b23      	ldr	r3, [pc, #140]	; (8008df8 <prvSwitchTimerLists+0xa0>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	3304      	adds	r3, #4
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fe f8fd 	bl	8006f78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d120      	bne.n	8008dd0 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	693a      	ldr	r2, [r7, #16]
 8008d94:	4413      	add	r3, r2
 8008d96:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d90e      	bls.n	8008dbe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dac:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <prvSwitchTimerLists+0xa0>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3304      	adds	r3, #4
 8008db4:	4619      	mov	r1, r3
 8008db6:	4610      	mov	r0, r2
 8008db8:	f7fe f8a6 	bl	8006f08 <vListInsert>
 8008dbc:	e008      	b.n	8008dd0 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7ff fde3 	bl	8008994 <xTimerGenericCommand>
 8008dce:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008dd0:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <prvSwitchTimerLists+0xa0>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1c2      	bne.n	8008d60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008dda:	4b07      	ldr	r3, [pc, #28]	; (8008df8 <prvSwitchTimerLists+0xa0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008de0:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <prvSwitchTimerLists+0xa4>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a04      	ldr	r2, [pc, #16]	; (8008df8 <prvSwitchTimerLists+0xa0>)
 8008de6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008de8:	4a04      	ldr	r2, [pc, #16]	; (8008dfc <prvSwitchTimerLists+0xa4>)
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	6013      	str	r3, [r2, #0]
}
 8008dee:	bf00      	nop
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20000c1c 	.word	0x20000c1c
 8008dfc:	20000c20 	.word	0x20000c20

08008e00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e06:	f000 f8c7 	bl	8008f98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e0a:	4b15      	ldr	r3, [pc, #84]	; (8008e60 <prvCheckForValidListAndQueue+0x60>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d120      	bne.n	8008e54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e12:	4814      	ldr	r0, [pc, #80]	; (8008e64 <prvCheckForValidListAndQueue+0x64>)
 8008e14:	f7fe f82a 	bl	8006e6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e18:	4813      	ldr	r0, [pc, #76]	; (8008e68 <prvCheckForValidListAndQueue+0x68>)
 8008e1a:	f7fe f827 	bl	8006e6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e1e:	4b13      	ldr	r3, [pc, #76]	; (8008e6c <prvCheckForValidListAndQueue+0x6c>)
 8008e20:	4a10      	ldr	r2, [pc, #64]	; (8008e64 <prvCheckForValidListAndQueue+0x64>)
 8008e22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e24:	4b12      	ldr	r3, [pc, #72]	; (8008e70 <prvCheckForValidListAndQueue+0x70>)
 8008e26:	4a10      	ldr	r2, [pc, #64]	; (8008e68 <prvCheckForValidListAndQueue+0x68>)
 8008e28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	4b11      	ldr	r3, [pc, #68]	; (8008e74 <prvCheckForValidListAndQueue+0x74>)
 8008e30:	4a11      	ldr	r2, [pc, #68]	; (8008e78 <prvCheckForValidListAndQueue+0x78>)
 8008e32:	2110      	movs	r1, #16
 8008e34:	200a      	movs	r0, #10
 8008e36:	f7fe f923 	bl	8007080 <xQueueGenericCreateStatic>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	4a08      	ldr	r2, [pc, #32]	; (8008e60 <prvCheckForValidListAndQueue+0x60>)
 8008e3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <prvCheckForValidListAndQueue+0x60>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e48:	4b05      	ldr	r3, [pc, #20]	; (8008e60 <prvCheckForValidListAndQueue+0x60>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	490b      	ldr	r1, [pc, #44]	; (8008e7c <prvCheckForValidListAndQueue+0x7c>)
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe fe2c 	bl	8007aac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e54:	f000 f8ba 	bl	8008fcc <vPortExitCritical>
}
 8008e58:	bf00      	nop
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20000c24 	.word	0x20000c24
 8008e64:	20000bf4 	.word	0x20000bf4
 8008e68:	20000c08 	.word	0x20000c08
 8008e6c:	20000c1c 	.word	0x20000c1c
 8008e70:	20000c20 	.word	0x20000c20
 8008e74:	20000cd0 	.word	0x20000cd0
 8008e78:	20000c30 	.word	0x20000c30
 8008e7c:	08009500 	.word	0x08009500

08008e80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3b04      	subs	r3, #4
 8008e90:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3b04      	subs	r3, #4
 8008e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f023 0201 	bic.w	r2, r3, #1
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3b04      	subs	r3, #4
 8008eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008eb0:	4a08      	ldr	r2, [pc, #32]	; (8008ed4 <pxPortInitialiseStack+0x54>)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3b14      	subs	r3, #20
 8008eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3b20      	subs	r3, #32
 8008ec6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bc80      	pop	{r7}
 8008ed2:	4770      	bx	lr
 8008ed4:	08008ed9 	.word	0x08008ed9

08008ed8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	607b      	str	r3, [r7, #4]
}
 8008ef4:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ef6:	bf00      	nop
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0fc      	beq.n	8008ef8 <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008efe:	bf00      	nop
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bc80      	pop	{r7}
 8008f08:	4770      	bx	lr
 8008f0a:	0000      	movs	r0, r0
 8008f0c:	0000      	movs	r0, r0
	...

08008f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f10:	4b07      	ldr	r3, [pc, #28]	; (8008f30 <pxCurrentTCBConst2>)
 8008f12:	6819      	ldr	r1, [r3, #0]
 8008f14:	6808      	ldr	r0, [r1, #0]
 8008f16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008f1a:	f380 8809 	msr	PSP, r0
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f04f 0000 	mov.w	r0, #0
 8008f26:	f380 8811 	msr	BASEPRI, r0
 8008f2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008f2e:	4770      	bx	lr

08008f30 <pxCurrentTCBConst2>:
 8008f30:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f34:	bf00      	nop
 8008f36:	bf00      	nop

08008f38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008f38:	4806      	ldr	r0, [pc, #24]	; (8008f54 <prvPortStartFirstTask+0x1c>)
 8008f3a:	6800      	ldr	r0, [r0, #0]
 8008f3c:	6800      	ldr	r0, [r0, #0]
 8008f3e:	f380 8808 	msr	MSP, r0
 8008f42:	b662      	cpsie	i
 8008f44:	b661      	cpsie	f
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	df00      	svc	0
 8008f50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f52:	bf00      	nop
 8008f54:	e000ed08 	.word	0xe000ed08

08008f58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f5c:	4b0c      	ldr	r3, [pc, #48]	; (8008f90 <xPortStartScheduler+0x38>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a0b      	ldr	r2, [pc, #44]	; (8008f90 <xPortStartScheduler+0x38>)
 8008f62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f68:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <xPortStartScheduler+0x38>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a08      	ldr	r2, [pc, #32]	; (8008f90 <xPortStartScheduler+0x38>)
 8008f6e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f74:	f000 f88a 	bl	800908c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f78:	4b06      	ldr	r3, [pc, #24]	; (8008f94 <xPortStartScheduler+0x3c>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f7e:	f7ff ffdb 	bl	8008f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f82:	f7ff f91f 	bl	80081c4 <vTaskSwitchContext>
	prvTaskExitError();
 8008f86:	f7ff ffa7 	bl	8008ed8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	e000ed20 	.word	0xe000ed20
 8008f94:	2000000c 	.word	0x2000000c

08008f98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	607b      	str	r3, [r7, #4]
}
 8008fb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008fb2:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <vPortEnterCritical+0x30>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	4a03      	ldr	r2, [pc, #12]	; (8008fc8 <vPortEnterCritical+0x30>)
 8008fba:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	2000000c 	.word	0x2000000c

08008fcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8008fd2:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <vPortExitCritical+0x30>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	4a08      	ldr	r2, [pc, #32]	; (8008ffc <vPortExitCritical+0x30>)
 8008fda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fdc:	4b07      	ldr	r3, [pc, #28]	; (8008ffc <vPortExitCritical+0x30>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d105      	bne.n	8008ff0 <vPortExitCritical+0x24>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	607b      	str	r3, [r7, #4]
	__asm volatile
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f383 8811 	msr	BASEPRI, r3
}
 8008fee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bc80      	pop	{r7}
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	2000000c 	.word	0x2000000c

08009000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009000:	f3ef 8009 	mrs	r0, PSP
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	4b0d      	ldr	r3, [pc, #52]	; (8009040 <pxCurrentTCBConst>)
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009010:	6010      	str	r0, [r2, #0]
 8009012:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009016:	f04f 0050 	mov.w	r0, #80	; 0x50
 800901a:	f380 8811 	msr	BASEPRI, r0
 800901e:	f7ff f8d1 	bl	80081c4 <vTaskSwitchContext>
 8009022:	f04f 0000 	mov.w	r0, #0
 8009026:	f380 8811 	msr	BASEPRI, r0
 800902a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800902e:	6819      	ldr	r1, [r3, #0]
 8009030:	6808      	ldr	r0, [r1, #0]
 8009032:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009036:	f380 8809 	msr	PSP, r0
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	4770      	bx	lr

08009040 <pxCurrentTCBConst>:
 8009040:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop

08009048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	607b      	str	r3, [r7, #4]
}
 8009060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009062:	f7ff f801 	bl	8008068 <xTaskIncrementTick>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800906c:	4b06      	ldr	r3, [pc, #24]	; (8009088 <xPortSysTickHandler+0x40>)
 800906e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	2300      	movs	r3, #0
 8009076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	f383 8811 	msr	BASEPRI, r3
}
 800907e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009090:	4b0a      	ldr	r3, [pc, #40]	; (80090bc <vPortSetupTimerInterrupt+0x30>)
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009096:	4b0a      	ldr	r3, [pc, #40]	; (80090c0 <vPortSetupTimerInterrupt+0x34>)
 8009098:	2200      	movs	r2, #0
 800909a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800909c:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <vPortSetupTimerInterrupt+0x38>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a09      	ldr	r2, [pc, #36]	; (80090c8 <vPortSetupTimerInterrupt+0x3c>)
 80090a2:	fba2 2303 	umull	r2, r3, r2, r3
 80090a6:	099b      	lsrs	r3, r3, #6
 80090a8:	4a08      	ldr	r2, [pc, #32]	; (80090cc <vPortSetupTimerInterrupt+0x40>)
 80090aa:	3b01      	subs	r3, #1
 80090ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090ae:	4b03      	ldr	r3, [pc, #12]	; (80090bc <vPortSetupTimerInterrupt+0x30>)
 80090b0:	2207      	movs	r2, #7
 80090b2:	601a      	str	r2, [r3, #0]
}
 80090b4:	bf00      	nop
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bc80      	pop	{r7}
 80090ba:	4770      	bx	lr
 80090bc:	e000e010 	.word	0xe000e010
 80090c0:	e000e018 	.word	0xe000e018
 80090c4:	20000000 	.word	0x20000000
 80090c8:	10624dd3 	.word	0x10624dd3
 80090cc:	e000e014 	.word	0xe000e014

080090d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090d8:	2300      	movs	r3, #0
 80090da:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80090dc:	f7fe ff1a 	bl	8007f14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80090e0:	4b40      	ldr	r3, [pc, #256]	; (80091e4 <pvPortMalloc+0x114>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80090e8:	f000 f8c0 	bl	800926c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80090ec:	4b3e      	ldr	r3, [pc, #248]	; (80091e8 <pvPortMalloc+0x118>)
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4013      	ands	r3, r2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d16d      	bne.n	80091d4 <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00d      	beq.n	800911a <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 80090fe:	2208      	movs	r2, #8
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4413      	add	r3, r2
 8009104:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f003 0307 	and.w	r3, r3, #7
 800910c:	2b00      	cmp	r3, #0
 800910e:	d004      	beq.n	800911a <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f023 0307 	bic.w	r3, r3, #7
 8009116:	3308      	adds	r3, #8
 8009118:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d059      	beq.n	80091d4 <pvPortMalloc+0x104>
 8009120:	4b32      	ldr	r3, [pc, #200]	; (80091ec <pvPortMalloc+0x11c>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	429a      	cmp	r2, r3
 8009128:	d854      	bhi.n	80091d4 <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800912a:	4b31      	ldr	r3, [pc, #196]	; (80091f0 <pvPortMalloc+0x120>)
 800912c:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800912e:	4b30      	ldr	r3, [pc, #192]	; (80091f0 <pvPortMalloc+0x120>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009134:	e004      	b.n	8009140 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	429a      	cmp	r2, r3
 8009148:	d903      	bls.n	8009152 <pvPortMalloc+0x82>
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1f1      	bne.n	8009136 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009152:	4b24      	ldr	r3, [pc, #144]	; (80091e4 <pvPortMalloc+0x114>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	429a      	cmp	r2, r3
 800915a:	d03b      	beq.n	80091d4 <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2208      	movs	r2, #8
 8009162:	4413      	add	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	1ad2      	subs	r2, r2, r3
 8009176:	2308      	movs	r3, #8
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	429a      	cmp	r2, r3
 800917c:	d90f      	bls.n	800919e <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4413      	add	r3, r2
 8009184:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	685a      	ldr	r2, [r3, #4]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	1ad2      	subs	r2, r2, r3
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009198:	68b8      	ldr	r0, [r7, #8]
 800919a:	f000 f8c9 	bl	8009330 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800919e:	4b13      	ldr	r3, [pc, #76]	; (80091ec <pvPortMalloc+0x11c>)
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	4a10      	ldr	r2, [pc, #64]	; (80091ec <pvPortMalloc+0x11c>)
 80091aa:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80091ac:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <pvPortMalloc+0x11c>)
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	4b10      	ldr	r3, [pc, #64]	; (80091f4 <pvPortMalloc+0x124>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d203      	bcs.n	80091c0 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80091b8:	4b0c      	ldr	r3, [pc, #48]	; (80091ec <pvPortMalloc+0x11c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a0d      	ldr	r2, [pc, #52]	; (80091f4 <pvPortMalloc+0x124>)
 80091be:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	4b08      	ldr	r3, [pc, #32]	; (80091e8 <pvPortMalloc+0x118>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	431a      	orrs	r2, r3
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	2200      	movs	r2, #0
 80091d2:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80091d4:	f7fe feac 	bl	8007f30 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 80091d8:	68fb      	ldr	r3, [r7, #12]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20003528 	.word	0x20003528
 80091e8:	20003534 	.word	0x20003534
 80091ec:	2000352c 	.word	0x2000352c
 80091f0:	20003520 	.word	0x20003520
 80091f4:	20003530 	.word	0x20003530

080091f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d027      	beq.n	800925a <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800920a:	2308      	movs	r3, #8
 800920c:	425b      	negs	r3, r3
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	4413      	add	r3, r2
 8009212:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	4b11      	ldr	r3, [pc, #68]	; (8009264 <vPortFree+0x6c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4013      	ands	r3, r2
 8009222:	2b00      	cmp	r3, #0
 8009224:	d019      	beq.n	800925a <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d115      	bne.n	800925a <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	4b0c      	ldr	r3, [pc, #48]	; (8009264 <vPortFree+0x6c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	43db      	mvns	r3, r3
 8009238:	401a      	ands	r2, r3
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800923e:	f7fe fe69 	bl	8007f14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	4b08      	ldr	r3, [pc, #32]	; (8009268 <vPortFree+0x70>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4413      	add	r3, r2
 800924c:	4a06      	ldr	r2, [pc, #24]	; (8009268 <vPortFree+0x70>)
 800924e:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009250:	68b8      	ldr	r0, [r7, #8]
 8009252:	f000 f86d 	bl	8009330 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009256:	f7fe fe6b 	bl	8007f30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800925a:	bf00      	nop
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20003534 	.word	0x20003534
 8009268:	2000352c 	.word	0x2000352c

0800926c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009272:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009276:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009278:	4b27      	ldr	r3, [pc, #156]	; (8009318 <prvHeapInit+0xac>)
 800927a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f003 0307 	and.w	r3, r3, #7
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00c      	beq.n	80092a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3307      	adds	r3, #7
 800928a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f023 0307 	bic.w	r3, r3, #7
 8009292:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	4a1f      	ldr	r2, [pc, #124]	; (8009318 <prvHeapInit+0xac>)
 800929c:	4413      	add	r3, r2
 800929e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092a4:	4a1d      	ldr	r2, [pc, #116]	; (800931c <prvHeapInit+0xb0>)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092aa:	4b1c      	ldr	r3, [pc, #112]	; (800931c <prvHeapInit+0xb0>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	4413      	add	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092b8:	2208      	movs	r2, #8
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	1a9b      	subs	r3, r3, r2
 80092be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 0307 	bic.w	r3, r3, #7
 80092c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	4a15      	ldr	r2, [pc, #84]	; (8009320 <prvHeapInit+0xb4>)
 80092cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092ce:	4b14      	ldr	r3, [pc, #80]	; (8009320 <prvHeapInit+0xb4>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2200      	movs	r2, #0
 80092d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092d6:	4b12      	ldr	r3, [pc, #72]	; (8009320 <prvHeapInit+0xb4>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2200      	movs	r2, #0
 80092dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	1ad2      	subs	r2, r2, r3
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092ec:	4b0c      	ldr	r3, [pc, #48]	; (8009320 <prvHeapInit+0xb4>)
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	4a0a      	ldr	r2, [pc, #40]	; (8009324 <prvHeapInit+0xb8>)
 80092fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	4a09      	ldr	r2, [pc, #36]	; (8009328 <prvHeapInit+0xbc>)
 8009302:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009304:	4b09      	ldr	r3, [pc, #36]	; (800932c <prvHeapInit+0xc0>)
 8009306:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800930a:	601a      	str	r2, [r3, #0]
}
 800930c:	bf00      	nop
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	bc80      	pop	{r7}
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	20000d20 	.word	0x20000d20
 800931c:	20003520 	.word	0x20003520
 8009320:	20003528 	.word	0x20003528
 8009324:	20003530 	.word	0x20003530
 8009328:	2000352c 	.word	0x2000352c
 800932c:	20003534 	.word	0x20003534

08009330 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009338:	4b27      	ldr	r3, [pc, #156]	; (80093d8 <prvInsertBlockIntoFreeList+0xa8>)
 800933a:	60fb      	str	r3, [r7, #12]
 800933c:	e002      	b.n	8009344 <prvInsertBlockIntoFreeList+0x14>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	429a      	cmp	r2, r3
 800934c:	d8f7      	bhi.n	800933e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	4413      	add	r3, r2
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	429a      	cmp	r2, r3
 800935e:	d108      	bne.n	8009372 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	685a      	ldr	r2, [r3, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	441a      	add	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	441a      	add	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	429a      	cmp	r2, r3
 8009384:	d118      	bne.n	80093b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	4b14      	ldr	r3, [pc, #80]	; (80093dc <prvInsertBlockIntoFreeList+0xac>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	429a      	cmp	r2, r3
 8009390:	d00d      	beq.n	80093ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	441a      	add	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	e008      	b.n	80093c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093ae:	4b0b      	ldr	r3, [pc, #44]	; (80093dc <prvInsertBlockIntoFreeList+0xac>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	e003      	b.n	80093c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d002      	beq.n	80093ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ce:	bf00      	nop
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bc80      	pop	{r7}
 80093d6:	4770      	bx	lr
 80093d8:	20003520 	.word	0x20003520
 80093dc:	20003528 	.word	0x20003528

080093e0 <__libc_init_array>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	2600      	movs	r6, #0
 80093e4:	4d0c      	ldr	r5, [pc, #48]	; (8009418 <__libc_init_array+0x38>)
 80093e6:	4c0d      	ldr	r4, [pc, #52]	; (800941c <__libc_init_array+0x3c>)
 80093e8:	1b64      	subs	r4, r4, r5
 80093ea:	10a4      	asrs	r4, r4, #2
 80093ec:	42a6      	cmp	r6, r4
 80093ee:	d109      	bne.n	8009404 <__libc_init_array+0x24>
 80093f0:	f000 f830 	bl	8009454 <_init>
 80093f4:	2600      	movs	r6, #0
 80093f6:	4d0a      	ldr	r5, [pc, #40]	; (8009420 <__libc_init_array+0x40>)
 80093f8:	4c0a      	ldr	r4, [pc, #40]	; (8009424 <__libc_init_array+0x44>)
 80093fa:	1b64      	subs	r4, r4, r5
 80093fc:	10a4      	asrs	r4, r4, #2
 80093fe:	42a6      	cmp	r6, r4
 8009400:	d105      	bne.n	800940e <__libc_init_array+0x2e>
 8009402:	bd70      	pop	{r4, r5, r6, pc}
 8009404:	f855 3b04 	ldr.w	r3, [r5], #4
 8009408:	4798      	blx	r3
 800940a:	3601      	adds	r6, #1
 800940c:	e7ee      	b.n	80093ec <__libc_init_array+0xc>
 800940e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009412:	4798      	blx	r3
 8009414:	3601      	adds	r6, #1
 8009416:	e7f2      	b.n	80093fe <__libc_init_array+0x1e>
 8009418:	08009554 	.word	0x08009554
 800941c:	08009554 	.word	0x08009554
 8009420:	08009554 	.word	0x08009554
 8009424:	08009558 	.word	0x08009558

08009428 <memcpy>:
 8009428:	440a      	add	r2, r1
 800942a:	4291      	cmp	r1, r2
 800942c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009430:	d100      	bne.n	8009434 <memcpy+0xc>
 8009432:	4770      	bx	lr
 8009434:	b510      	push	{r4, lr}
 8009436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800943a:	4291      	cmp	r1, r2
 800943c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009440:	d1f9      	bne.n	8009436 <memcpy+0xe>
 8009442:	bd10      	pop	{r4, pc}

08009444 <memset>:
 8009444:	4603      	mov	r3, r0
 8009446:	4402      	add	r2, r0
 8009448:	4293      	cmp	r3, r2
 800944a:	d100      	bne.n	800944e <memset+0xa>
 800944c:	4770      	bx	lr
 800944e:	f803 1b01 	strb.w	r1, [r3], #1
 8009452:	e7f9      	b.n	8009448 <memset+0x4>

08009454 <_init>:
 8009454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009456:	bf00      	nop
 8009458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945a:	bc08      	pop	{r3}
 800945c:	469e      	mov	lr, r3
 800945e:	4770      	bx	lr

08009460 <_fini>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr
