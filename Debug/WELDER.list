
WELDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000908c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800927c  0800927c  0001927c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009364  08009364  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009364  08009364  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009364  08009364  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009364  08009364  00019364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009368  08009368  00019368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800936c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046c8  20000010  0800937c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  200046d8  0800937c  000246d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd07  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d49  00000000  00000000  0003bd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0003fa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  00041058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8bc  00000000  00000000  00042478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001883c  00000000  00000000  0005dd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2686  00000000  00000000  00076570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118bf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac0  00000000  00000000  00118c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08009264 	.word	0x08009264

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08009264 	.word	0x08009264

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <MicrostepDriver_Ini>:
#include  "MicrostepDriver.h"


void MicrostepDriver_Ini(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
    htim3.Init.Prescaler = 7199; // Предделитель таймера 3
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a12:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000a16:	605a      	str	r2, [r3, #4]
    htim3.Init.Period = 10000; // Период ШИМа
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a1e:	60da      	str	r2, [r3, #12]
    TIM3->CCR1 = 5000; // Длительность импульса
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <MicrostepDriver_Ini+0x2c>)
 8000a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a26:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_Base_Init(&htim3);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a2a:	f004 fff9 	bl	8005a20 <HAL_TIM_Base_Init>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200045d4 	.word	0x200045d4
 8000a38:	40000400 	.word	0x40000400

08000a3c <MicrostepDriver_Run>:


void MicrostepDriver_Run (uint16_t freq, uint8_t dir, GPIO_TypeDef *EN1_Port, uint16_t EN1_Pin, GPIO_TypeDef *DIR1_Port, uint16_t DIR1_Pin, uint32_t PWM_Channel)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60ba      	str	r2, [r7, #8]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4603      	mov	r3, r0
 8000a48:	81fb      	strh	r3, [r7, #14]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	737b      	strb	r3, [r7, #13]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	80fb      	strh	r3, [r7, #6]
	if (freq != 0)
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d024      	beq.n	8000aa2 <MicrostepDriver_Run+0x66>
	{

	htim3.Init.Period = (htim3.Init.Prescaler /  freq) / MICRO_STEP_DEV; // Расчет периода следования импульсов
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a66:	60d3      	str	r3, [r2, #12]
	TIM3->CCR1 = htim3.Init.Period / 2; // Расчет коэффицента заполнения
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MicrostepDriver_Run+0x7c>)
 8000a6e:	085b      	lsrs	r3, r3, #1
 8000a70:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_TIM_Base_Init(&htim3);
 8000a72:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a74:	f004 ffd4 	bl	8005a20 <HAL_TIM_Base_Init>

	if (dir == 0) // Направление вращения
 8000a78:	7b7b      	ldrb	r3, [r7, #13]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d106      	bne.n	8000a8c <MicrostepDriver_Run+0x50>
	{
		HAL_GPIO_WritePin(DIR1_Port, DIR1_Pin, GPIO_PIN_RESET);
 8000a7e:	8bbb      	ldrh	r3, [r7, #28]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	69b8      	ldr	r0, [r7, #24]
 8000a86:	f003 fd42 	bl	800450e <HAL_GPIO_WritePin>
 8000a8a:	e005      	b.n	8000a98 <MicrostepDriver_Run+0x5c>

	}
	else
	{
		HAL_GPIO_WritePin(DIR1_Port, DIR1_Pin, GPIO_PIN_SET);
 8000a8c:	8bbb      	ldrh	r3, [r7, #28]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4619      	mov	r1, r3
 8000a92:	69b8      	ldr	r0, [r7, #24]
 8000a94:	f003 fd3b 	bl	800450e <HAL_GPIO_WritePin>
	}


	HAL_TIM_PWM_Start(&htim3, PWM_Channel); // Начало генерации ШИМ сигнала
 8000a98:	6a39      	ldr	r1, [r7, #32]
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a9c:	f005 f868 	bl	8005b70 <HAL_TIM_PWM_Start>
	else // Если частота задана как 0, то останов ШД
	{
		HAL_TIM_PWM_Stop(&htim3, PWM_Channel);
	}

}
 8000aa0:	e003      	b.n	8000aaa <MicrostepDriver_Run+0x6e>
		HAL_TIM_PWM_Stop(&htim3, PWM_Channel);
 8000aa2:	6a39      	ldr	r1, [r7, #32]
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000aa6:	f005 f91d 	bl	8005ce4 <HAL_TIM_PWM_Stop>
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200045d4 	.word	0x200045d4
 8000ab8:	40000400 	.word	0x40000400

08000abc <IndicatorPanel_Ini>:
#include "PCB_WELDER.h"

void IndicatorPanel_Ini (void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	STLED316S_Ini(oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); // Индикатор "ВЛЕВО"
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <IndicatorPanel_Ini+0x28>)
 8000ac4:	f000 fc1a 	bl	80012fc <STLED316S_Ini>
	STLED316S_Ini(oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin); // Индикатор "ВПРАВО"
 8000ac8:	2120      	movs	r1, #32
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <IndicatorPanel_Ini+0x28>)
 8000acc:	f000 fc16 	bl	80012fc <STLED316S_Ini>
	STLED316S_Ini(oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin); // Индикаторы "СКОРОСТЬ" (ст. 3 разряда) и "ПРОГРАММА" (мл. 3 разряда)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <IndicatorPanel_Ini+0x2c>)
 8000ad4:	f000 fc12 	bl	80012fc <STLED316S_Ini>
  //STLED316S_Ini(oSTLED316S_STB4_GPIO_Port, oSTLED316S_STB4_Pin); // Микросхема не установлена, резерв
	STLED316S_Ini(oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin); // Индикаторы "ЗАДЕРЖКА" (слева, ст. 2 разряда) "ЗАДЕРЖКА" (справа, 2 и 3  разряды драйвера)
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <IndicatorPanel_Ini+0x30>)
 8000adc:	f000 fc0e 	bl	80012fc <STLED316S_Ini>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	40010800 	.word	0x40010800

08000af0 <IndicatorPanel_SetValue>:

void IndicatorPanel_SetValue (IndicatorValues *IndicatorPanel0)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	uint8_t num;

	uint8_t LEDsOut;

	LEDsOut = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73bb      	strb	r3, [r7, #14]

	//uint8_t gg = 11;

	// Индикатор "ВЛЕВО"
	num = separate(IndicatorPanel0->Xs,  &STLED_digVal[0]);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	494e      	ldr	r1, [pc, #312]	; (8000c3c <IndicatorPanel_SetValue+0x14c>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f8d8 	bl	8000cb8 <separate>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	73fb      	strb	r3, [r7, #15]
	IndicatorPanel_offset_4dig(num, STLED_digVal);
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	494b      	ldr	r1, [pc, #300]	; (8000c3c <IndicatorPanel_SetValue+0x14c>)
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f915 	bl	8000d40 <IndicatorPanel_offset_4dig>
	STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin);
 8000b16:	2310      	movs	r3, #16
 8000b18:	4a49      	ldr	r2, [pc, #292]	; (8000c40 <IndicatorPanel_SetValue+0x150>)
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4847      	ldr	r0, [pc, #284]	; (8000c3c <IndicatorPanel_SetValue+0x14c>)
 8000b1e:	f000 fc21 	bl	8001364 <STLED316S_OutData>
//	STLED316S_Direct_Single_Out(&STLED_digVal[3], 4, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора

	//STLED316S_Single_Out(&gg, 5, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора

	// Индикатор "ВПРАВО"
	num = separate(IndicatorPanel0->Xf,  &STLED_digVal[0]);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	885b      	ldrh	r3, [r3, #2]
 8000b26:	4945      	ldr	r1, [pc, #276]	; (8000c3c <IndicatorPanel_SetValue+0x14c>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f8c5 	bl	8000cb8 <separate>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
	IndicatorPanel_offset_4dig(num, STLED_digVal);
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	4941      	ldr	r1, [pc, #260]	; (8000c3c <IndicatorPanel_SetValue+0x14c>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f902 	bl	8000d40 <IndicatorPanel_offset_4dig>
	STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin);
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	4a40      	ldr	r2, [pc, #256]	; (8000c40 <IndicatorPanel_SetValue+0x150>)
 8000b40:	2104      	movs	r1, #4
 8000b42:	483e      	ldr	r0, [pc, #248]	; (8000c3c <IndicatorPanel_SetValue+0x14c>)
 8000b44:	f000 fc0e 	bl	8001364 <STLED316S_OutData>

	// Вывод пред и пост задержки
	num = separate(IndicatorPanel0->Delay_s, &STLED_digVal[0]);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	791b      	ldrb	r3, [r3, #4]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	493b      	ldr	r1, [pc, #236]	; (8000c3c <IndicatorPanel_SetValue+0x14c>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f8b1 	bl	8000cb8 <separate>
 8000b56:	4603      	mov	r3, r0
 8000b58:	73fb      	strb	r3, [r7, #15]
	IndicatorPanel_offset_2dig(num, &STLED_digVal[0]);
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	4937      	ldr	r1, [pc, #220]	; (8000c3c <IndicatorPanel_SetValue+0x14c>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f940 	bl	8000de4 <IndicatorPanel_offset_2dig>
	num = separate(IndicatorPanel0->Delay_f, &STLED_digVal[2]);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	795b      	ldrb	r3, [r3, #5]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	4936      	ldr	r1, [pc, #216]	; (8000c44 <IndicatorPanel_SetValue+0x154>)
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f8a3 	bl	8000cb8 <separate>
 8000b72:	4603      	mov	r3, r0
 8000b74:	73fb      	strb	r3, [r7, #15]
	IndicatorPanel_offset_2dig(num, &STLED_digVal[2]);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	4932      	ldr	r1, [pc, #200]	; (8000c44 <IndicatorPanel_SetValue+0x154>)
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f932 	bl	8000de4 <IndicatorPanel_offset_2dig>
	STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000b80:	2340      	movs	r3, #64	; 0x40
 8000b82:	4a31      	ldr	r2, [pc, #196]	; (8000c48 <IndicatorPanel_SetValue+0x158>)
 8000b84:	2104      	movs	r1, #4
 8000b86:	482d      	ldr	r0, [pc, #180]	; (8000c3c <IndicatorPanel_SetValue+0x14c>)
 8000b88:	f000 fbec 	bl	8001364 <STLED316S_OutData>
//	STLED316S_Direct_Single_Out(&LEDsOut, 4, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin); // Вывод точки для Delay_f
//
//	LEDsOut = 0x00;

	// Индикаторы "СКОРОСТЬ" (ст. 3 разряда) и "ПРОГРАММА" (мл. 3 разряда)
	num = separate(IndicatorPanel0->Speed, &STLED_digVal[0]);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	88db      	ldrh	r3, [r3, #6]
 8000b90:	492a      	ldr	r1, [pc, #168]	; (8000c3c <IndicatorPanel_SetValue+0x14c>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f890 	bl	8000cb8 <separate>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	73fb      	strb	r3, [r7, #15]
	IndicatorPanel_offset_3dig(num, &STLED_digVal[0]);
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	4927      	ldr	r1, [pc, #156]	; (8000c3c <IndicatorPanel_SetValue+0x14c>)
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f93a 	bl	8000e1a <IndicatorPanel_offset_3dig>

	num = separate(IndicatorPanel0->Program, &STLED_digVal[3]);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	891b      	ldrh	r3, [r3, #8]
 8000baa:	4928      	ldr	r1, [pc, #160]	; (8000c4c <IndicatorPanel_SetValue+0x15c>)
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f883 	bl	8000cb8 <separate>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	73fb      	strb	r3, [r7, #15]
	IndicatorPanel_offset_3dig(num, &STLED_digVal[3]);
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	4924      	ldr	r1, [pc, #144]	; (8000c4c <IndicatorPanel_SetValue+0x15c>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f92d 	bl	8000e1a <IndicatorPanel_offset_3dig>
	STLED316S_OutData(STLED_digVal, 6, oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <IndicatorPanel_SetValue+0x160>)
 8000bc4:	2106      	movs	r1, #6
 8000bc6:	481d      	ldr	r0, [pc, #116]	; (8000c3c <IndicatorPanel_SetValue+0x14c>)
 8000bc8:	f000 fbcc 	bl	8001364 <STLED316S_OutData>


	if((IndicatorPanel0->LEDsState & LED_AUTO) == LED_AUTO)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	7bdb      	ldrb	r3, [r3, #15]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d004      	beq.n	8000be2 <IndicatorPanel_SetValue+0xf2>
	{
		LEDsOut |= 0x10;
 8000bd8:	7bbb      	ldrb	r3, [r7, #14]
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	73bb      	strb	r3, [r7, #14]
	}

	if((IndicatorPanel0->LEDsState & LED_PARKING) == LED_PARKING)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	7bdb      	ldrb	r3, [r3, #15]
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d004      	beq.n	8000bf8 <IndicatorPanel_SetValue+0x108>
	{
		LEDsOut |= 0x20;
 8000bee:	7bbb      	ldrb	r3, [r7, #14]
 8000bf0:	f043 0320 	orr.w	r3, r3, #32
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	73bb      	strb	r3, [r7, #14]
	}

	if((IndicatorPanel0->LEDsState & LED_DOWN) == LED_DOWN)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7bdb      	ldrb	r3, [r3, #15]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d004      	beq.n	8000c0e <IndicatorPanel_SetValue+0x11e>
	{
		LEDsOut |= 0x40;
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	73bb      	strb	r3, [r7, #14]
	}

	if((IndicatorPanel0->LEDsState & LED_UP) == LED_UP)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7bdb      	ldrb	r3, [r3, #15]
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d004      	beq.n	8000c24 <IndicatorPanel_SetValue+0x134>
	{
		LEDsOut |= 0x80;
 8000c1a:	7bbb      	ldrb	r3, [r7, #14]
 8000c1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	73bb      	strb	r3, [r7, #14]
	}

	//LEDsOut = 0xF0;

	STLED316S_Direct_Single_Out(&LEDsOut, 2, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора
 8000c24:	f107 000e 	add.w	r0, r7, #14
 8000c28:	2310      	movs	r3, #16
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <IndicatorPanel_SetValue+0x150>)
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	f000 fbf7 	bl	8001420 <STLED316S_Direct_Single_Out>
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200045c8 	.word	0x200045c8
 8000c40:	40011000 	.word	0x40011000
 8000c44:	200045ca 	.word	0x200045ca
 8000c48:	40010800 	.word	0x40010800
 8000c4c:	200045cb 	.word	0x200045cb
 8000c50:	40010c00 	.word	0x40010c00

08000c54 <IndicatorPanel_SetBrightness>:
	STLED316S_Direct_Single_Out(&LEDsOut, 2, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора

}

void IndicatorPanel_SetBrightness (IndicatorValues *IndicatorPanel0)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	if (IndicatorPanel0->Brightness > 7)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7a9b      	ldrb	r3, [r3, #10]
 8000c60:	2b07      	cmp	r3, #7
 8000c62:	d902      	bls.n	8000c6a <IndicatorPanel_SetBrightness+0x16>
	{
		IndicatorPanel0->Brightness = 7;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2207      	movs	r2, #7
 8000c68:	729a      	strb	r2, [r3, #10]
	}
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7a9b      	ldrb	r3, [r3, #10]
 8000c6e:	2210      	movs	r2, #16
 8000c70:	490e      	ldr	r1, [pc, #56]	; (8000cac <IndicatorPanel_SetBrightness+0x58>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fc24 	bl	80014c0 <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7a9b      	ldrb	r3, [r3, #10]
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	490b      	ldr	r1, [pc, #44]	; (8000cac <IndicatorPanel_SetBrightness+0x58>)
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fc1d 	bl	80014c0 <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7a9b      	ldrb	r3, [r3, #10]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <IndicatorPanel_SetBrightness+0x5c>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fc16 	bl	80014c0 <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7a9b      	ldrb	r3, [r3, #10]
 8000c98:	2240      	movs	r2, #64	; 0x40
 8000c9a:	4906      	ldr	r1, [pc, #24]	; (8000cb4 <IndicatorPanel_SetBrightness+0x60>)
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 fc0f 	bl	80014c0 <STLED316S_SetBrightness>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40011000 	.word	0x40011000
 8000cb0:	40010c00 	.word	0x40010c00
 8000cb4:	40010800 	.word	0x40010800

08000cb8 <separate>:

int32_t separate (uint16_t in_data, uint8_t *out_data)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b087      	sub	sp, #28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	80fb      	strh	r3, [r7, #6]
    int32_t k,i,m;
    k = in_data;
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	617b      	str	r3, [r7, #20]
    m = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]

    while(k != 0)       //цикл чтобы найти количество цифр в числе
 8000ccc:	e00a      	b.n	8000ce4 <separate+0x2c>
    {
        k = k / 10;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <separate+0x80>)
 8000cd2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd6:	1092      	asrs	r2, r2, #2
 8000cd8:	17db      	asrs	r3, r3, #31
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	617b      	str	r3, [r7, #20]
        m++;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
    while(k != 0)       //цикл чтобы найти количество цифр в числе
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f1      	bne.n	8000cce <separate+0x16>
    }

    for(i=m-1;i>=0;i--)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	e018      	b.n	8000d24 <separate+0x6c>
    {
    	out_data[i] = in_data%10;      //берем последнюю цифру с числа
 8000cf2:	88fa      	ldrh	r2, [r7, #6]
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <separate+0x84>)
 8000cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8000cfa:	08d9      	lsrs	r1, r3, #3
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	440b      	add	r3, r1
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	b299      	uxth	r1, r3
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b2ca      	uxtb	r2, r1
 8000d10:	701a      	strb	r2, [r3, #0]
    	in_data = in_data / 10;         //забираем эту цифру с числа
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <separate+0x84>)
 8000d16:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1a:	08db      	lsrs	r3, r3, #3
 8000d1c:	80fb      	strh	r3, [r7, #6]
    for(i=m-1;i>=0;i--)
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	dae3      	bge.n	8000cf2 <separate+0x3a>
    }

    return m;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	371c      	adds	r7, #28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	66666667 	.word	0x66666667
 8000d3c:	cccccccd 	.word	0xcccccccd

08000d40 <IndicatorPanel_offset_4dig>:

void IndicatorPanel_offset_4dig (uint8_t num, uint8_t *dataArray)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d841      	bhi.n	8000dd8 <IndicatorPanel_offset_4dig+0x98>
 8000d54:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <IndicatorPanel_offset_4dig+0x1c>)
 8000d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5a:	bf00      	nop
 8000d5c:	08000d6d 	.word	0x08000d6d
 8000d60:	08000d8f 	.word	0x08000d8f
 8000d64:	08000db3 	.word	0x08000db3
 8000d68:	08000dd9 	.word	0x08000dd9
	{

	case 1:
	{
		dataArray[3] = dataArray[0];
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	3303      	adds	r3, #3
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	701a      	strb	r2, [r3, #0]
		dataArray[2] = 0;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	3302      	adds	r3, #2
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
		break;
 8000d8c:	e025      	b.n	8000dda <IndicatorPanel_offset_4dig+0x9a>
	}

	case 2:
	{
		dataArray[3] = dataArray[1];
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	3303      	adds	r3, #3
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	7852      	ldrb	r2, [r2, #1]
 8000d96:	701a      	strb	r2, [r3, #0]
		dataArray[2] = dataArray[0];
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	7812      	ldrb	r2, [r2, #0]
 8000da0:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
		break;
 8000db0:	e013      	b.n	8000dda <IndicatorPanel_offset_4dig+0x9a>
	}

	case 3:
	{
		dataArray[3] = dataArray[2];
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	3303      	adds	r3, #3
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	7892      	ldrb	r2, [r2, #2]
 8000dba:	701a      	strb	r2, [r3, #0]
		dataArray[2] = dataArray[1];
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	683a      	ldr	r2, [r7, #0]
 8000dc2:	7852      	ldrb	r2, [r2, #1]
 8000dc4:	701a      	strb	r2, [r3, #0]
		dataArray[1] = dataArray[0];
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	7812      	ldrb	r2, [r2, #0]
 8000dce:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]

		break;
 8000dd6:	e000      	b.n	8000dda <IndicatorPanel_offset_4dig+0x9a>
		break;
	}

default:
{
	break;
 8000dd8:	bf00      	nop
}

	}

}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <IndicatorPanel_offset_2dig>:

void IndicatorPanel_offset_2dig (uint8_t num, uint8_t *dataArray)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d002      	beq.n	8000dfc <IndicatorPanel_offset_2dig+0x18>
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d009      	beq.n	8000e0e <IndicatorPanel_offset_2dig+0x2a>
		}


	default:
	{
		break;
 8000dfa:	e009      	b.n	8000e10 <IndicatorPanel_offset_2dig+0x2c>
			dataArray[1] = dataArray[0];
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	7812      	ldrb	r2, [r2, #0]
 8000e04:	701a      	strb	r2, [r3, #0]
			dataArray[0] = 0;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
			break;
 8000e0c:	e000      	b.n	8000e10 <IndicatorPanel_offset_2dig+0x2c>
			break;
 8000e0e:	bf00      	nop
	}

	}

}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <IndicatorPanel_offset_3dig>:


void IndicatorPanel_offset_3dig (uint8_t num, uint8_t *dataArray)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	6039      	str	r1, [r7, #0]
 8000e24:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d021      	beq.n	8000e70 <IndicatorPanel_offset_3dig+0x56>
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	dc21      	bgt.n	8000e74 <IndicatorPanel_offset_3dig+0x5a>
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d002      	beq.n	8000e3a <IndicatorPanel_offset_3dig+0x20>
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d00d      	beq.n	8000e54 <IndicatorPanel_offset_3dig+0x3a>
		break;
	}

default:
{
	break;
 8000e38:	e01c      	b.n	8000e74 <IndicatorPanel_offset_3dig+0x5a>
		dataArray[2] = dataArray[0];
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	7812      	ldrb	r2, [r2, #0]
 8000e42:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	3301      	adds	r3, #1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
		break;
 8000e52:	e010      	b.n	8000e76 <IndicatorPanel_offset_3dig+0x5c>
		dataArray[2] = dataArray[1];
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	3302      	adds	r3, #2
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	7852      	ldrb	r2, [r2, #1]
 8000e5c:	701a      	strb	r2, [r3, #0]
		dataArray[1] = dataArray[0];
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	3301      	adds	r3, #1
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
		break;
 8000e6e:	e002      	b.n	8000e76 <IndicatorPanel_offset_3dig+0x5c>
		break;
 8000e70:	bf00      	nop
 8000e72:	e000      	b.n	8000e76 <IndicatorPanel_offset_3dig+0x5c>
	break;
 8000e74:	bf00      	nop
}

	}

}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <Carriage_Move>:

void Carriage_Move (uint16_t Speed, uint8_t Dir, uint8_t NumSM)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af04      	add	r7, sp, #16
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	717b      	strb	r3, [r7, #5]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	713b      	strb	r3, [r7, #4]

uint16_t freq_pwm;

	freq_pwm = ((Speed / (60/10)) * STEPS_PER_ROTATE) / DISTANCE_PER_ROTATE; // Вычисление частоты ШИМ для скорости в см/мин
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	4a19      	ldr	r2, [pc, #100]	; (8000efc <Carriage_Move+0x7c>)
 8000e96:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fb18 	bl	80004d4 <__aeabi_i2d>
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <Carriage_Move+0x80>)
 8000eaa:	f7ff fb7d 	bl	80005a8 <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <Carriage_Move+0x84>)
 8000ebc:	f7ff fc9e 	bl	80007fc <__aeabi_ddiv>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f7ff fd80 	bl	80009cc <__aeabi_d2uiz>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	81fb      	strh	r3, [r7, #14]

	if (NumSM == 1)
 8000ed0:	793b      	ldrb	r3, [r7, #4]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d10d      	bne.n	8000ef2 <Carriage_Move+0x72>
	{
		MicrostepDriver_Run (freq_pwm, Dir, oSMD_EN1_GPIO_Port, oSMD_EN1_Pin, oDIR1_GPIO_Port,  oDIR1_Pin, TIM_CHANNEL_1);
 8000ed6:	7979      	ldrb	r1, [r7, #5]
 8000ed8:	89f8      	ldrh	r0, [r7, #14]
 8000eda:	2300      	movs	r3, #0
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <Carriage_Move+0x88>)
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <Carriage_Move+0x8c>)
 8000eee:	f7ff fda5 	bl	8000a3c <MicrostepDriver_Run>
	}
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	aaaaaaab 	.word	0xaaaaaaab
 8000f00:	40690000 	.word	0x40690000
 8000f04:	404e0000 	.word	0x404e0000
 8000f08:	40011000 	.word	0x40011000
 8000f0c:	40010800 	.word	0x40010800

08000f10 <PCB_KeyScan>:

void PCB_KeyScan (void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	STLED316S_ReciveData(&WelderUnit.IndicatorPanel.KeyState[0], oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000f14:	2240      	movs	r2, #64	; 0x40
 8000f16:	4905      	ldr	r1, [pc, #20]	; (8000f2c <PCB_KeyScan+0x1c>)
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <PCB_KeyScan+0x20>)
 8000f1a:	f000 fb2b 	bl	8001574 <STLED316S_ReciveData>
	STLED316S_ReciveData(&WelderUnit.IndicatorPanel.KeyState[2], oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4904      	ldr	r1, [pc, #16]	; (8000f34 <PCB_KeyScan+0x24>)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <PCB_KeyScan+0x28>)
 8000f24:	f000 fb26 	bl	8001574 <STLED316S_ReciveData>
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	20003d59 	.word	0x20003d59
 8000f34:	40010c00 	.word	0x40010c00
 8000f38:	20003d5b 	.word	0x20003d5b

08000f3c <PCB_InputsScan>:

void PCB_InputsScan (void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(iPedal_L_GPIO_Port, iPedal_L_Pin)) // Если Нажата педаль для зажима левой части заготовки, то установить бит, иначе сбросить
 8000f40:	2101      	movs	r1, #1
 8000f42:	482c      	ldr	r0, [pc, #176]	; (8000ff4 <PCB_InputsScan+0xb8>)
 8000f44:	f003 facc 	bl	80044e0 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00c      	beq.n	8000f68 <PCB_InputsScan+0x2c>
	{
		WelderUnit.State |= WELDER_STATE_PEDAL_L;
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <PCB_InputsScan+0xbc>)
 8000f50:	7c1b      	ldrb	r3, [r3, #16]
 8000f52:	f043 0320 	orr.w	r3, r3, #32
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <PCB_InputsScan+0xbc>)
 8000f5a:	741a      	strb	r2, [r3, #16]
		Valve_L_OPEN
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	4826      	ldr	r0, [pc, #152]	; (8000ffc <PCB_InputsScan+0xc0>)
 8000f62:	f003 fad4 	bl	800450e <HAL_GPIO_WritePin>
 8000f66:	e00b      	b.n	8000f80 <PCB_InputsScan+0x44>
	}
	else
	{
		WelderUnit.State &= ~WELDER_STATE_PEDAL_L;
 8000f68:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <PCB_InputsScan+0xbc>)
 8000f6a:	7c1b      	ldrb	r3, [r3, #16]
 8000f6c:	f023 0320 	bic.w	r3, r3, #32
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <PCB_InputsScan+0xbc>)
 8000f74:	741a      	strb	r2, [r3, #16]
		Valve_L_CLOSE
 8000f76:	2200      	movs	r2, #0
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	4820      	ldr	r0, [pc, #128]	; (8000ffc <PCB_InputsScan+0xc0>)
 8000f7c:	f003 fac7 	bl	800450e <HAL_GPIO_WritePin>
	}

	if (HAL_GPIO_ReadPin(iPedal_R_GPIO_Port, iPedal_R_Pin)) // Если Нажата педаль для зажима правой части заготовки, то установить бит, иначе сбросить
 8000f80:	2104      	movs	r1, #4
 8000f82:	481c      	ldr	r0, [pc, #112]	; (8000ff4 <PCB_InputsScan+0xb8>)
 8000f84:	f003 faac 	bl	80044e0 <HAL_GPIO_ReadPin>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <PCB_InputsScan+0x62>
	{
		WelderUnit.State |= WELDER_STATE_PEDAL_R;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <PCB_InputsScan+0xbc>)
 8000f90:	7c1b      	ldrb	r3, [r3, #16]
 8000f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <PCB_InputsScan+0xbc>)
 8000f9a:	741a      	strb	r2, [r3, #16]
 8000f9c:	e00b      	b.n	8000fb6 <PCB_InputsScan+0x7a>
		//Valve_R_OPEN
	}
	else
	{
		WelderUnit.State &= ~WELDER_STATE_PEDAL_R;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <PCB_InputsScan+0xbc>)
 8000fa0:	7c1b      	ldrb	r3, [r3, #16]
 8000fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <PCB_InputsScan+0xbc>)
 8000faa:	741a      	strb	r2, [r3, #16]
		Valve_R_CLOSE
 8000fac:	2200      	movs	r2, #0
 8000fae:	2140      	movs	r1, #64	; 0x40
 8000fb0:	4812      	ldr	r0, [pc, #72]	; (8000ffc <PCB_InputsScan+0xc0>)
 8000fb2:	f003 faac 	bl	800450e <HAL_GPIO_WritePin>
	}

	if (HAL_GPIO_ReadPin(iBackDoor_GPIO_Port, iBackDoor_Pin)) // Если задняя дверца закрыта, то установить бит, иначе сбросить
 8000fb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fba:	4810      	ldr	r0, [pc, #64]	; (8000ffc <PCB_InputsScan+0xc0>)
 8000fbc:	f003 fa90 	bl	80044e0 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00c      	beq.n	8000fe0 <PCB_InputsScan+0xa4>
	{
		WelderUnit.State |= WELDER_STATE_BACK_DOOR_CLOSE;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <PCB_InputsScan+0xbc>)
 8000fc8:	7c1b      	ldrb	r3, [r3, #16]
 8000fca:	f043 0310 	orr.w	r3, r3, #16
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <PCB_InputsScan+0xbc>)
 8000fd2:	741a      	strb	r2, [r3, #16]
		WELDER_HEAD_UP
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2106      	movs	r1, #6
 8000fd8:	4809      	ldr	r0, [pc, #36]	; (8001000 <PCB_InputsScan+0xc4>)
 8000fda:	f003 fa98 	bl	800450e <HAL_GPIO_WritePin>
	}
	else
	{
		WelderUnit.State &= ~WELDER_STATE_BACK_DOOR_CLOSE;
	}
}
 8000fde:	e006      	b.n	8000fee <PCB_InputsScan+0xb2>
		WelderUnit.State &= ~WELDER_STATE_BACK_DOOR_CLOSE;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <PCB_InputsScan+0xbc>)
 8000fe2:	7c1b      	ldrb	r3, [r3, #16]
 8000fe4:	f023 0310 	bic.w	r3, r3, #16
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <PCB_InputsScan+0xbc>)
 8000fec:	741a      	strb	r2, [r3, #16]
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	20003d3c 	.word	0x20003d3c
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	40011000 	.word	0x40011000

08001004 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(iSTLED316S_IRQN5_GPIO_Port, iSTLED316S_IRQN5_Pin) == GPIO_PIN_RESET)
 800100e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001012:	4822      	ldr	r0, [pc, #136]	; (800109c <HAL_GPIO_EXTI_Callback+0x98>)
 8001014:	f003 fa64 	bl	80044e0 <HAL_GPIO_ReadPin>

	}



	if (HAL_GPIO_ReadPin(iFB_STEP1_GPIO_Port, iFB_STEP1_Pin) == GPIO_PIN_SET)
 8001018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101c:	4820      	ldr	r0, [pc, #128]	; (80010a0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800101e:	f003 fa5f 	bl	80044e0 <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	d10e      	bne.n	8001046 <HAL_GPIO_EXTI_Callback+0x42>
		//#define configASSERT( x ) if ((x) == 0) {taskDISABLE_INTERRUPTS(); for( ;; );}
		// Без этого не работают семафоры


		static portBASE_TYPE xHigherPriorityTaskWoken;
		  xHigherPriorityTaskWoken = pdFALSE; // Не переключать контекст
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]

		  //WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / STEPS_PER_ROTATE; // Вычисление текущей позиции каретки, мм

			  xSemaphoreGiveFromISR(xSemaphore_StepCount,&xHigherPriorityTaskWoken);
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	491c      	ldr	r1, [pc, #112]	; (80010a4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001034:	4618      	mov	r0, r3
 8001036:	f006 f8b3 	bl	80071a0 <xQueueGiveFromISR>


		if( xHigherPriorityTaskWoken == pdTRUE )
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_EXTI_Callback+0x42>
				вместе с портом FreeRTOS. */
			 //portSWITCH_CONTEXT();
			//vTaskSwitchContext();
			//portYIELD_FROM_ISR(NULL);

			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 8001042:	f007 f8f7 	bl	8008234 <vTaskMissedYield>

		  }
	}

	if (HAL_GPIO_ReadPin(iCarriageStop_GPIO_Port, iCarriageStop_Pin) == GPIO_PIN_SET)
 8001046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104a:	4814      	ldr	r0, [pc, #80]	; (800109c <HAL_GPIO_EXTI_Callback+0x98>)
 800104c:	f003 fa48 	bl	80044e0 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b01      	cmp	r3, #1
 8001054:	d116      	bne.n	8001084 <HAL_GPIO_EXTI_Callback+0x80>
		// В файле FreeRTOSConfig.h закомментировать
		//#define configASSERT( x ) if ((x) == 0) {taskDISABLE_INTERRUPTS(); for( ;; );}
		// Без этого не работают семафоры

		static portBASE_TYPE xHigherPriorityTaskWoken2;
		  xHigherPriorityTaskWoken2 = pdFALSE; // Не переключать контекст
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_GPIO_EXTI_Callback+0xa8>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]

		  //WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / STEPS_PER_ROTATE; // Вычисление текущей позиции каретки, мм

			  xSemaphoreGiveFromISR(xSemaphore_Calibration, &xHigherPriorityTaskWoken2);
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_GPIO_EXTI_Callback+0xac>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4912      	ldr	r1, [pc, #72]	; (80010ac <HAL_GPIO_EXTI_Callback+0xa8>)
 8001062:	4618      	mov	r0, r3
 8001064:	f006 f89c 	bl	80071a0 <xQueueGiveFromISR>

			  WelderUnit.State |= 1<<3; // 3 бит - Состояние вывода iCarriageStop, 1 - коневик нажат кареткой
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_GPIO_EXTI_Callback+0xb0>)
 800106a:	7c1b      	ldrb	r3, [r3, #16]
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001074:	741a      	strb	r2, [r3, #16]


		if( xHigherPriorityTaskWoken2 == pdTRUE )
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_GPIO_EXTI_Callback+0xa8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d109      	bne.n	8001092 <HAL_GPIO_EXTI_Callback+0x8e>
		  {
			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 800107e:	f007 f8d9 	bl	8008234 <vTaskMissedYield>
	{
		WelderUnit.State &= ~0x08; //// 3 бит - Состояние вывода iCarriageStop 0 - коневик отжат.

	}

}
 8001082:	e006      	b.n	8001092 <HAL_GPIO_EXTI_Callback+0x8e>
		WelderUnit.State &= ~0x08; //// 3 бит - Состояние вывода iCarriageStop 0 - коневик отжат.
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001086:	7c1b      	ldrb	r3, [r3, #16]
 8001088:	f023 0308 	bic.w	r3, r3, #8
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001090:	741a      	strb	r2, [r3, #16]
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40010c00 	.word	0x40010c00
 80010a0:	40011000 	.word	0x40011000
 80010a4:	2000002c 	.word	0x2000002c
 80010a8:	20003d60 	.word	0x20003d60
 80010ac:	20000030 	.word	0x20000030
 80010b0:	200045c4 	.word	0x200045c4
 80010b4:	20003d3c 	.word	0x20003d3c

080010b8 <SaveProgramToFlash2>:

void SaveProgramToFlash2()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	uint32_t *p; // Указатель на считваемые из flash памяти данные

	uint16_t offset = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	80bb      	strh	r3, [r7, #4]

	p = (uint32_t*)PAGE; // p содержит начальный адрес записи параметров программы
 80010c2:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <SaveProgramToFlash2+0xfc>)
 80010c4:	603b      	str	r3, [r7, #0]

	for(uint16_t i = 0; i < 256; i++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	80fb      	strh	r3, [r7, #6]
 80010ca:	e010      	b.n	80010ee <SaveProgramToFlash2+0x36>
	{
		ReadFlashPage[i] = *(p + i);
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	88f9      	ldrh	r1, [r7, #6]
 80010d8:	461a      	mov	r2, r3
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	4836      	ldr	r0, [pc, #216]	; (80011b8 <SaveProgramToFlash2+0x100>)
 80010e0:	00c9      	lsls	r1, r1, #3
 80010e2:	4401      	add	r1, r0
 80010e4:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i = 0; i < 256; i++)
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	3301      	adds	r3, #1
 80010ec:	80fb      	strh	r3, [r7, #6]
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	2bff      	cmp	r3, #255	; 0xff
 80010f2:	d9eb      	bls.n	80010cc <SaveProgramToFlash2+0x14>
	}

	offset = WelderUnit.Program * 6;
 80010f4:	4b31      	ldr	r3, [pc, #196]	; (80011bc <SaveProgramToFlash2+0x104>)
 80010f6:	899b      	ldrh	r3, [r3, #12]
 80010f8:	461a      	mov	r2, r3
 80010fa:	0052      	lsls	r2, r2, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	80bb      	strh	r3, [r7, #4]

	ReadFlashPage[offset] = WelderUnit.Program;
 8001102:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <SaveProgramToFlash2+0x104>)
 8001104:	899b      	ldrh	r3, [r3, #12]
 8001106:	88b9      	ldrh	r1, [r7, #4]
 8001108:	b29a      	uxth	r2, r3
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	482a      	ldr	r0, [pc, #168]	; (80011b8 <SaveProgramToFlash2+0x100>)
 8001110:	00c9      	lsls	r1, r1, #3
 8001112:	4401      	add	r1, r0
 8001114:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 1] = WelderUnit.Xs;
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <SaveProgramToFlash2+0x104>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	88ba      	ldrh	r2, [r7, #4]
 800111e:	1c51      	adds	r1, r2, #1
 8001120:	b29a      	uxth	r2, r3
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	4824      	ldr	r0, [pc, #144]	; (80011b8 <SaveProgramToFlash2+0x100>)
 8001128:	00c9      	lsls	r1, r1, #3
 800112a:	4401      	add	r1, r0
 800112c:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 2] = WelderUnit.Xf;
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <SaveProgramToFlash2+0x104>)
 8001132:	885b      	ldrh	r3, [r3, #2]
 8001134:	88ba      	ldrh	r2, [r7, #4]
 8001136:	1c91      	adds	r1, r2, #2
 8001138:	b29a      	uxth	r2, r3
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	481e      	ldr	r0, [pc, #120]	; (80011b8 <SaveProgramToFlash2+0x100>)
 8001140:	00c9      	lsls	r1, r1, #3
 8001142:	4401      	add	r1, r0
 8001144:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 3] = WelderUnit.Speed;
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <SaveProgramToFlash2+0x104>)
 800114a:	88db      	ldrh	r3, [r3, #6]
 800114c:	88ba      	ldrh	r2, [r7, #4]
 800114e:	1cd1      	adds	r1, r2, #3
 8001150:	b29a      	uxth	r2, r3
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	4818      	ldr	r0, [pc, #96]	; (80011b8 <SaveProgramToFlash2+0x100>)
 8001158:	00c9      	lsls	r1, r1, #3
 800115a:	4401      	add	r1, r0
 800115c:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 4] = WelderUnit.Delay_s;
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <SaveProgramToFlash2+0x104>)
 8001162:	7a9b      	ldrb	r3, [r3, #10]
 8001164:	88ba      	ldrh	r2, [r7, #4]
 8001166:	1d11      	adds	r1, r2, #4
 8001168:	b2da      	uxtb	r2, r3
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	4812      	ldr	r0, [pc, #72]	; (80011b8 <SaveProgramToFlash2+0x100>)
 8001170:	00c9      	lsls	r1, r1, #3
 8001172:	4401      	add	r1, r0
 8001174:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 5] = WelderUnit.Delay_f;
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <SaveProgramToFlash2+0x104>)
 800117a:	7adb      	ldrb	r3, [r3, #11]
 800117c:	88ba      	ldrh	r2, [r7, #4]
 800117e:	1d51      	adds	r1, r2, #5
 8001180:	b2da      	uxtb	r2, r3
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	480c      	ldr	r0, [pc, #48]	; (80011b8 <SaveProgramToFlash2+0x100>)
 8001188:	00c9      	lsls	r1, r1, #3
 800118a:	4401      	add	r1, r0
 800118c:	e9c1 2300 	strd	r2, r3, [r1]

	STM32_WriteToFlash3(ReadFlashPage, 64);
 8001190:	2140      	movs	r1, #64	; 0x40
 8001192:	4809      	ldr	r0, [pc, #36]	; (80011b8 <SaveProgramToFlash2+0x100>)
 8001194:	f000 fa6c 	bl	8001670 <STM32_WriteToFlash3>

	p = (uint32_t*)PAGE + offset/4; // p содержит начальный адрес записи параметров программы
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	b29b      	uxth	r3, r3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011a4:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 80011a8:	603b      	str	r3, [r7, #0]

}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	0803f800 	.word	0x0803f800
 80011b8:	20003d70 	.word	0x20003d70
 80011bc:	20003d3c 	.word	0x20003d3c

080011c0 <ReadProgramFromFlash2>:

void ReadProgramFromFlash2()
{
 80011c0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
	uint32_t *p; // Указатель на считваемые из flash памяти данные

	uint16_t offset = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	80bb      	strh	r3, [r7, #4]

	p = (uint32_t*)PAGE; // p содержит начальный адрес записи параметров программы
 80011cc:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <ReadProgramFromFlash2+0x130>)
 80011ce:	603b      	str	r3, [r7, #0]

	for(uint16_t i = 0; i < 256; i++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	80fb      	strh	r3, [r7, #6]
 80011d4:	e010      	b.n	80011f8 <ReadProgramFromFlash2+0x38>
	{
		ReadFlashPage[i] = *(p + i);
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	88f9      	ldrh	r1, [r7, #6]
 80011e2:	461a      	mov	r2, r3
 80011e4:	f04f 0300 	mov.w	r3, #0
 80011e8:	4842      	ldr	r0, [pc, #264]	; (80012f4 <ReadProgramFromFlash2+0x134>)
 80011ea:	00c9      	lsls	r1, r1, #3
 80011ec:	4401      	add	r1, r0
 80011ee:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i = 0; i < 256; i++)
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	3301      	adds	r3, #1
 80011f6:	80fb      	strh	r3, [r7, #6]
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	2bff      	cmp	r3, #255	; 0xff
 80011fc:	d9eb      	bls.n	80011d6 <ReadProgramFromFlash2+0x16>
	}

	offset = WelderUnit.Program * 6;
 80011fe:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <ReadProgramFromFlash2+0x138>)
 8001200:	899b      	ldrh	r3, [r3, #12]
 8001202:	461a      	mov	r2, r3
 8001204:	0052      	lsls	r2, r2, #1
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	80bb      	strh	r3, [r7, #4]

	if (WelderUnit.Program - ReadFlashPage[offset] <= 1 || ReadFlashPage[offset] - WelderUnit.Program <= 1)
 800120c:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <ReadProgramFromFlash2+0x138>)
 800120e:	899b      	ldrh	r3, [r3, #12]
 8001210:	b298      	uxth	r0, r3
 8001212:	f04f 0100 	mov.w	r1, #0
 8001216:	88bb      	ldrh	r3, [r7, #4]
 8001218:	4a36      	ldr	r2, [pc, #216]	; (80012f4 <ReadProgramFromFlash2+0x134>)
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	ebb0 0802 	subs.w	r8, r0, r2
 8001226:	eb61 0903 	sbc.w	r9, r1, r3
 800122a:	f1b9 0f00 	cmp.w	r9, #0
 800122e:	bf08      	it	eq
 8001230:	f1b8 0f02 	cmpeq.w	r8, #2
 8001234:	d311      	bcc.n	800125a <ReadProgramFromFlash2+0x9a>
 8001236:	88bb      	ldrh	r3, [r7, #4]
 8001238:	4a2e      	ldr	r2, [pc, #184]	; (80012f4 <ReadProgramFromFlash2+0x134>)
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4413      	add	r3, r2
 800123e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <ReadProgramFromFlash2+0x138>)
 8001244:	899b      	ldrh	r3, [r3, #12]
 8001246:	b29a      	uxth	r2, r3
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	1a84      	subs	r4, r0, r2
 800124e:	eb61 0503 	sbc.w	r5, r1, r3
 8001252:	2d00      	cmp	r5, #0
 8001254:	bf08      	it	eq
 8001256:	2c02      	cmpeq	r4, #2
 8001258:	d244      	bcs.n	80012e4 <ReadProgramFromFlash2+0x124>
	{
		if (ReadFlashPage[offset] <= PROGRAM_MAX)
 800125a:	88bb      	ldrh	r3, [r7, #4]
 800125c:	4a25      	ldr	r2, [pc, #148]	; (80012f4 <ReadProgramFromFlash2+0x134>)
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf08      	it	eq
 800126a:	2a47      	cmpeq	r2, #71	; 0x47
 800126c:	d23a      	bcs.n	80012e4 <ReadProgramFromFlash2+0x124>
		{
			WelderUnit.Program = ReadFlashPage[offset];
 800126e:	88bb      	ldrh	r3, [r7, #4]
 8001270:	4a20      	ldr	r2, [pc, #128]	; (80012f4 <ReadProgramFromFlash2+0x134>)
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4413      	add	r3, r2
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	b292      	uxth	r2, r2
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <ReadProgramFromFlash2+0x138>)
 800127e:	819a      	strh	r2, [r3, #12]
			WelderUnit.Xs = ReadFlashPage[offset + 1];
 8001280:	88bb      	ldrh	r3, [r7, #4]
 8001282:	3301      	adds	r3, #1
 8001284:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <ReadProgramFromFlash2+0x134>)
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	b292      	uxth	r2, r2
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <ReadProgramFromFlash2+0x138>)
 8001292:	801a      	strh	r2, [r3, #0]
			WelderUnit.Xf = ReadFlashPage[offset + 2];
 8001294:	88bb      	ldrh	r3, [r7, #4]
 8001296:	3302      	adds	r3, #2
 8001298:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <ReadProgramFromFlash2+0x134>)
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4413      	add	r3, r2
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	b292      	uxth	r2, r2
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <ReadProgramFromFlash2+0x138>)
 80012a6:	805a      	strh	r2, [r3, #2]
			WelderUnit.Speed = ReadFlashPage[offset + 3];
 80012a8:	88bb      	ldrh	r3, [r7, #4]
 80012aa:	3303      	adds	r3, #3
 80012ac:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <ReadProgramFromFlash2+0x134>)
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	b292      	uxth	r2, r2
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <ReadProgramFromFlash2+0x138>)
 80012ba:	80da      	strh	r2, [r3, #6]
			WelderUnit.Delay_s = ReadFlashPage[offset + 4];
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	3304      	adds	r3, #4
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <ReadProgramFromFlash2+0x134>)
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <ReadProgramFromFlash2+0x138>)
 80012ce:	729a      	strb	r2, [r3, #10]
			WelderUnit.Delay_f = ReadFlashPage[offset + 5];
 80012d0:	88bb      	ldrh	r3, [r7, #4]
 80012d2:	3305      	adds	r3, #5
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <ReadProgramFromFlash2+0x134>)
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <ReadProgramFromFlash2+0x138>)
 80012e2:	72da      	strb	r2, [r3, #11]

//	STM32_WriteToFlash3(ReadFlashPage, 64);
//
//	p = (uint32_t*)PAGE + offset/4; // p содержит начальный адрес записи параметров программы

}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80012ee:	4770      	bx	lr
 80012f0:	0803f800 	.word	0x0803f800
 80012f4:	20003d70 	.word	0x20003d70
 80012f8:	20003d3c 	.word	0x20003d3c

080012fc <STLED316S_Ini>:
};



void STLED316S_Ini (GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]

	STLED316S_SetBrightness(7, STLED_PORT_STB, STLED_PIN_STB);
 8001308:	887b      	ldrh	r3, [r7, #2]
 800130a:	461a      	mov	r2, r3
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	2007      	movs	r0, #7
 8001310:	f000 f8d6 	bl	80014c0 <STLED316S_SetBrightness>


	STLED_TxData[0] = 0x0D; // Включить дисплей
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <STLED316S_Ini+0x60>)
 8001316:	220d      	movs	r2, #13
 8001318:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	2200      	movs	r2, #0
 800131e:	4619      	mov	r1, r3
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f003 f8f4 	bl	800450e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001326:	2005      	movs	r0, #5
 8001328:	f000 f984 	bl	8001634 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, STLED_TxData, 1, 10000);
 800132c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001330:	2201      	movs	r2, #1
 8001332:	490a      	ldr	r1, [pc, #40]	; (800135c <STLED316S_Ini+0x60>)
 8001334:	480a      	ldr	r0, [pc, #40]	; (8001360 <STLED316S_Ini+0x64>)
 8001336:	f003 fd87 	bl	8004e48 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 800133a:	2005      	movs	r0, #5
 800133c:	f000 f97a 	bl	8001634 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	2201      	movs	r2, #1
 8001344:	4619      	mov	r1, r3
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f003 f8e1 	bl	800450e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 800134c:	2005      	movs	r0, #5
 800134e:	f000 f971 	bl	8001634 <DelayMicro>

}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20004598 	.word	0x20004598
 8001360:	2000461c 	.word	0x2000461c

08001364 <STLED316S_OutData>:


void STLED316S_OutData (uint8_t *data, uint8_t num, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	461a      	mov	r2, r3
 8001370:	460b      	mov	r3, r1
 8001372:	72fb      	strb	r3, [r7, #11]
 8001374:	4613      	mov	r3, r2
 8001376:	813b      	strh	r3, [r7, #8]
	STLED_TxData[0] = 0x00; // Вывод с автоикрементом адреса
 8001378:	4b26      	ldr	r3, [pc, #152]	; (8001414 <STLED316S_OutData+0xb0>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]

	STLED_TxData[1] = 0x00;
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <STLED316S_OutData+0xb0>)
 8001380:	2200      	movs	r2, #0
 8001382:	705a      	strb	r2, [r3, #1]
	STLED_TxData[2] = 0x00;
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <STLED316S_OutData+0xb0>)
 8001386:	2200      	movs	r2, #0
 8001388:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = 0x00;
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <STLED316S_OutData+0xb0>)
 800138c:	2200      	movs	r2, #0
 800138e:	70da      	strb	r2, [r3, #3]
	STLED_TxData[4] = 0x00;
 8001390:	4b20      	ldr	r3, [pc, #128]	; (8001414 <STLED316S_OutData+0xb0>)
 8001392:	2200      	movs	r2, #0
 8001394:	711a      	strb	r2, [r3, #4]
	STLED_TxData[5] = 0x00;
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <STLED316S_OutData+0xb0>)
 8001398:	2200      	movs	r2, #0
 800139a:	715a      	strb	r2, [r3, #5]
	STLED_TxData[6] = 0x00;
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <STLED316S_OutData+0xb0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	719a      	strb	r2, [r3, #6]

	for(uint8_t i = 0; i < num; i++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	75fb      	strb	r3, [r7, #23]
 80013a6:	e00d      	b.n	80013c4 <STLED316S_OutData+0x60>
	{
		STLED_TxData[i + 1] = code_digit[data[i]];
 80013a8:	7dfb      	ldrb	r3, [r7, #23]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a18      	ldr	r2, [pc, #96]	; (8001418 <STLED316S_OutData+0xb4>)
 80013b8:	5c51      	ldrb	r1, [r2, r1]
 80013ba:	4a16      	ldr	r2, [pc, #88]	; (8001414 <STLED316S_OutData+0xb0>)
 80013bc:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < num; i++)
 80013be:	7dfb      	ldrb	r3, [r7, #23]
 80013c0:	3301      	adds	r3, #1
 80013c2:	75fb      	strb	r3, [r7, #23]
 80013c4:	7dfa      	ldrb	r2, [r7, #23]
 80013c6:	7afb      	ldrb	r3, [r7, #11]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d3ed      	bcc.n	80013a8 <STLED316S_OutData+0x44>
	}

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 80013cc:	893b      	ldrh	r3, [r7, #8]
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f003 f89b 	bl	800450e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80013d8:	2005      	movs	r0, #5
 80013da:	f000 f92b 	bl	8001634 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], num + 1, 10000);
 80013de:	7afb      	ldrb	r3, [r7, #11]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	3301      	adds	r3, #1
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80013ea:	490a      	ldr	r1, [pc, #40]	; (8001414 <STLED316S_OutData+0xb0>)
 80013ec:	480b      	ldr	r0, [pc, #44]	; (800141c <STLED316S_OutData+0xb8>)
 80013ee:	f003 fd2b 	bl	8004e48 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 80013f2:	2005      	movs	r0, #5
 80013f4:	f000 f91e 	bl	8001634 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 80013f8:	893b      	ldrh	r3, [r7, #8]
 80013fa:	2201      	movs	r2, #1
 80013fc:	4619      	mov	r1, r3
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f003 f885 	bl	800450e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001404:	2005      	movs	r0, #5
 8001406:	f000 f915 	bl	8001634 <DelayMicro>
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20004598 	.word	0x20004598
 8001418:	08009318 	.word	0x08009318
 800141c:	2000461c 	.word	0x2000461c

08001420 <STLED316S_Direct_Single_Out>:
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
	DelayMicro(DELAY_US);
}

void STLED316S_Direct_Single_Out (uint8_t *data, uint8_t num, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	461a      	mov	r2, r3
 800142c:	460b      	mov	r3, r1
 800142e:	72fb      	strb	r3, [r7, #11]
 8001430:	4613      	mov	r3, r2
 8001432:	813b      	strh	r3, [r7, #8]
	STLED_TxData[0] = 0x00;
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <STLED316S_Direct_Single_Out+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0x00;
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <STLED316S_Direct_Single_Out+0x98>)
 800143c:	2200      	movs	r2, #0
 800143e:	705a      	strb	r2, [r3, #1]

	STLED_TxData[0] |= 0x20; // Вывод значения без автоинкремента, в заданный разряд
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <STLED316S_Direct_Single_Out+0x98>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <STLED316S_Direct_Single_Out+0x98>)
 800144c:	701a      	strb	r2, [r3, #0]
	STLED_TxData[0] |= ((6-num) & 0x07); // В какой разряд выводить
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <STLED316S_Direct_Single_Out+0x98>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b25a      	sxtb	r2, r3
 8001454:	7afb      	ldrb	r3, [r7, #11]
 8001456:	f1c3 0306 	rsb	r3, r3, #6
 800145a:	b2db      	uxtb	r3, r3
 800145c:	b25b      	sxtb	r3, r3
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	b25b      	sxtb	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b25b      	sxtb	r3, r3
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <STLED316S_Direct_Single_Out+0x98>)
 800146c:	701a      	strb	r2, [r3, #0]

	STLED_TxData[1] = *data; // Выводимое значение
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <STLED316S_Direct_Single_Out+0x98>)
 8001474:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 8001476:	893b      	ldrh	r3, [r7, #8]
 8001478:	2200      	movs	r2, #0
 800147a:	4619      	mov	r1, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f003 f846 	bl	800450e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001482:	2005      	movs	r0, #5
 8001484:	f000 f8d6 	bl	8001634 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], 2, 10000);
 8001488:	f242 7310 	movw	r3, #10000	; 0x2710
 800148c:	2202      	movs	r2, #2
 800148e:	490a      	ldr	r1, [pc, #40]	; (80014b8 <STLED316S_Direct_Single_Out+0x98>)
 8001490:	480a      	ldr	r0, [pc, #40]	; (80014bc <STLED316S_Direct_Single_Out+0x9c>)
 8001492:	f003 fcd9 	bl	8004e48 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 8001496:	2005      	movs	r0, #5
 8001498:	f000 f8cc 	bl	8001634 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 800149c:	893b      	ldrh	r3, [r7, #8]
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f003 f833 	bl	800450e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80014a8:	2005      	movs	r0, #5
 80014aa:	f000 f8c3 	bl	8001634 <DelayMicro>
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20004598 	.word	0x20004598
 80014bc:	2000461c 	.word	0x2000461c

080014c0 <STLED316S_SetBrightness>:

void STLED316S_SetBrightness (uint8_t Bright, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	4613      	mov	r3, r2
 80014ce:	80bb      	strh	r3, [r7, #4]
	STLED_TxData[0] = 0x10;
 80014d0:	4b26      	ldr	r3, [pc, #152]	; (800156c <STLED316S_SetBrightness+0xac>)
 80014d2:	2210      	movs	r2, #16
 80014d4:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0xE5; // E5 - LSB2:0 - кол разряд (0b101 = 6 разрадам), LSB4:3 - режим яркости, LSB7:5 - яркость
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <STLED316S_SetBrightness+0xac>)
 80014d8:	22e5      	movs	r2, #229	; 0xe5
 80014da:	705a      	strb	r2, [r3, #1]

	STLED_TxData[2] = 0x00;
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <STLED316S_SetBrightness+0xac>)
 80014de:	2200      	movs	r2, #0
 80014e0:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = 0x00;
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <STLED316S_SetBrightness+0xac>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	70da      	strb	r2, [r3, #3]
	STLED_TxData[4] = 0x00;
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <STLED316S_SetBrightness+0xac>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	711a      	strb	r2, [r3, #4]

	STLED_TxData[2] = (Bright<<4) | (Bright);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	b25a      	sxtb	r2, r3
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <STLED316S_SetBrightness+0xac>)
 8001500:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = (Bright<<4) | (Bright);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	b25a      	sxtb	r2, r3
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	4313      	orrs	r3, r2
 800150e:	b25b      	sxtb	r3, r3
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <STLED316S_SetBrightness+0xac>)
 8001514:	70da      	strb	r2, [r3, #3]
	STLED_TxData[4] = (Bright<<4) | (Bright);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	b25a      	sxtb	r2, r3
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	4313      	orrs	r3, r2
 8001522:	b25b      	sxtb	r3, r3
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <STLED316S_SetBrightness+0xac>)
 8001528:	711a      	strb	r2, [r3, #4]


	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 800152a:	88bb      	ldrh	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	4619      	mov	r1, r3
 8001530:	6838      	ldr	r0, [r7, #0]
 8001532:	f002 ffec 	bl	800450e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001536:	2005      	movs	r0, #5
 8001538:	f000 f87c 	bl	8001634 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], 5, 10000);
 800153c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001540:	2205      	movs	r2, #5
 8001542:	490a      	ldr	r1, [pc, #40]	; (800156c <STLED316S_SetBrightness+0xac>)
 8001544:	480a      	ldr	r0, [pc, #40]	; (8001570 <STLED316S_SetBrightness+0xb0>)
 8001546:	f003 fc7f 	bl	8004e48 <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 800154a:	2005      	movs	r0, #5
 800154c:	f000 f872 	bl	8001634 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 8001550:	88bb      	ldrh	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	4619      	mov	r1, r3
 8001556:	6838      	ldr	r0, [r7, #0]
 8001558:	f002 ffd9 	bl	800450e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 800155c:	2005      	movs	r0, #5
 800155e:	f000 f869 	bl	8001634 <DelayMicro>

}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20004598 	.word	0x20004598
 8001570:	2000461c 	.word	0x2000461c

08001574 <STLED316S_ReciveData>:
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
	DelayMicro(DELAY_US);
}

void STLED316S_ReciveData (uint8_t *data, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	4613      	mov	r3, r2
 8001580:	80fb      	strh	r3, [r7, #6]
	STLED_TxData[0] = 0x49;
 8001582:	4b29      	ldr	r3, [pc, #164]	; (8001628 <STLED316S_ReciveData+0xb4>)
 8001584:	2249      	movs	r2, #73	; 0x49
 8001586:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0x00;
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <STLED316S_ReciveData+0xb4>)
 800158a:	2200      	movs	r2, #0
 800158c:	705a      	strb	r2, [r3, #1]
	STLED_TxData[2] = 0x00;
 800158e:	4b26      	ldr	r3, [pc, #152]	; (8001628 <STLED316S_ReciveData+0xb4>)
 8001590:	2200      	movs	r2, #0
 8001592:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = 0x00;
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <STLED316S_ReciveData+0xb4>)
 8001596:	2200      	movs	r2, #0
 8001598:	70da      	strb	r2, [r3, #3]

	STLED_Rx[0] = 0x49;
 800159a:	4b24      	ldr	r3, [pc, #144]	; (800162c <STLED316S_ReciveData+0xb8>)
 800159c:	2249      	movs	r2, #73	; 0x49
 800159e:	701a      	strb	r2, [r3, #0]
	STLED_Rx[1] = 0x02;
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <STLED316S_ReciveData+0xb8>)
 80015a2:	2202      	movs	r2, #2
 80015a4:	705a      	strb	r2, [r3, #1]
	STLED_Rx[2] = 0x02;
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <STLED316S_ReciveData+0xb8>)
 80015a8:	2202      	movs	r2, #2
 80015aa:	709a      	strb	r2, [r3, #2]
	STLED_Rx[3] = 0x02;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <STLED316S_ReciveData+0xb8>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	70da      	strb	r2, [r3, #3]

	for(uint8_t i = 0; i < 8; i++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	75fb      	strb	r3, [r7, #23]
 80015b6:	e006      	b.n	80015c6 <STLED316S_ReciveData+0x52>
	{
		STLED_Rx[i] = 0;
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	4a1c      	ldr	r2, [pc, #112]	; (800162c <STLED316S_ReciveData+0xb8>)
 80015bc:	2100      	movs	r1, #0
 80015be:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 8; i++)
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	3301      	adds	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b07      	cmp	r3, #7
 80015ca:	d9f5      	bls.n	80015b8 <STLED316S_ReciveData+0x44>
	}

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	68b8      	ldr	r0, [r7, #8]
 80015d4:	f002 ff9b 	bl	800450e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80015d8:	2005      	movs	r0, #5
 80015da:	f000 f82b 	bl	8001634 <DelayMicro>
	//SPI1->CR1 |= SPI_CR1_BIDIOE; // Перевод SPI в режим передачи
	HAL_SPI_Transmit(&hspi1, STLED_TxData, 1, 1000);
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	2201      	movs	r2, #1
 80015e4:	4910      	ldr	r1, [pc, #64]	; (8001628 <STLED316S_ReciveData+0xb4>)
 80015e6:	4812      	ldr	r0, [pc, #72]	; (8001630 <STLED316S_ReciveData+0xbc>)
 80015e8:	f003 fc2e 	bl	8004e48 <HAL_SPI_Transmit>
	//SPI1->CR1 &= ~SPI_CR1_BIDIOE; // // Перевод SPI в режим приема
	//HAL_SPI_TransmitReceive(&hspi1, STLED_TxData, STLED_Rx, 1, 1000);
	HAL_SPI_Receive(&hspi1, STLED_Rx, 2, 1000);
 80015ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f0:	2202      	movs	r2, #2
 80015f2:	490e      	ldr	r1, [pc, #56]	; (800162c <STLED316S_ReciveData+0xb8>)
 80015f4:	480e      	ldr	r0, [pc, #56]	; (8001630 <STLED316S_ReciveData+0xbc>)
 80015f6:	f003 fd63 	bl	80050c0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4619      	mov	r1, r3
 8001600:	68b8      	ldr	r0, [r7, #8]
 8001602:	f002 ff84 	bl	800450e <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001606:	2005      	movs	r0, #5
 8001608:	f000 f814 	bl	8001634 <DelayMicro>

	data[0] = STLED_Rx[0];
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <STLED316S_ReciveData+0xb8>)
 800160e:	781a      	ldrb	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	701a      	strb	r2, [r3, #0]
	data[1]= STLED_Rx[1];
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3301      	adds	r3, #1
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <STLED316S_ReciveData+0xb8>)
 800161a:	7852      	ldrb	r2, [r2, #1]
 800161c:	701a      	strb	r2, [r3, #0]

}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20004598 	.word	0x20004598
 800162c:	20003d64 	.word	0x20003d64
 8001630:	2000461c 	.word	0x2000461c

08001634 <DelayMicro>:

 void DelayMicro(uint32_t __IO micros)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  micros *=(SystemCoreClock/1000000)/5;
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <DelayMicro+0x34>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <DelayMicro+0x38>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	0d5b      	lsrs	r3, r3, #21
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	607b      	str	r3, [r7, #4]
  while(micros--);
 8001650:	bf00      	nop
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	1e5a      	subs	r2, r3, #1
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1fa      	bne.n	8001652 <DelayMicro+0x1e>
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20000000 	.word	0x20000000
 800166c:	6b5fca6b 	.word	0x6b5fca6b

08001670 <STM32_WriteToFlash3>:
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	f002 fc0d 	bl	8003e98 <HAL_FLASH_Unlock>
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <STM32_WriteToFlash3+0x70>)
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	2301      	movs	r3, #1
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	f107 0208 	add.w	r2, r7, #8
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f002 fce5 	bl	8004068 <HAL_FLASHEx_Erase>
 800169e:	2300      	movs	r3, #0
 80016a0:	83fb      	strh	r3, [r7, #30]
 80016a2:	e012      	b.n	80016ca <STM32_WriteToFlash3+0x5a>
 80016a4:	8bfb      	ldrh	r3, [r7, #30]
 80016a6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80016aa:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4619      	mov	r1, r3
 80016b2:	8bfb      	ldrh	r3, [r7, #30]
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	2002      	movs	r0, #2
 80016c0:	f002 fb7a 	bl	8003db8 <HAL_FLASH_Program>
 80016c4:	8bfb      	ldrh	r3, [r7, #30]
 80016c6:	3301      	adds	r3, #1
 80016c8:	83fb      	strh	r3, [r7, #30]
 80016ca:	8bfb      	ldrh	r3, [r7, #30]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d8e8      	bhi.n	80016a4 <STM32_WriteToFlash3+0x34>
 80016d2:	f002 fc07 	bl	8003ee4 <HAL_FLASH_Lock>
 80016d6:	bf00      	nop
 80016d8:	3720      	adds	r7, #32
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	0803f800 	.word	0x0803f800

080016e4 <freeRTOS_Tasks_Ini>:
	uint8_t STLED_Rx[8];



void freeRTOS_Tasks_Ini (void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af02      	add	r7, sp, #8
	xSemaphore_StepCount = xQueueCreateCountingSemaphore(4, 0);
 80016ea:	2100      	movs	r1, #0
 80016ec:	2004      	movs	r0, #4
 80016ee:	f005 fc3d 	bl	8006f6c <xQueueCreateCountingSemaphore>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a4a      	ldr	r2, [pc, #296]	; (8001820 <freeRTOS_Tasks_Ini+0x13c>)
 80016f6:	6013      	str	r3, [r2, #0]

	//xSemaphore_Calibration = xQueueCreateCountingSemaphore(1, 0); // Первый аргмент - это максимальное количество счета, второй - начальное значение счетчика

	vSemaphoreCreateBinary(xSemaphore_Calibration); // Создание двоичного семафора
 80016f8:	2203      	movs	r2, #3
 80016fa:	2100      	movs	r1, #0
 80016fc:	2001      	movs	r0, #1
 80016fe:	f005 fbe2 	bl	8006ec6 <xQueueGenericCreate>
 8001702:	4603      	mov	r3, r0
 8001704:	4a47      	ldr	r2, [pc, #284]	; (8001824 <freeRTOS_Tasks_Ini+0x140>)
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b46      	ldr	r3, [pc, #280]	; (8001824 <freeRTOS_Tasks_Ini+0x140>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <freeRTOS_Tasks_Ini+0x3a>
 8001710:	4b44      	ldr	r3, [pc, #272]	; (8001824 <freeRTOS_Tasks_Ini+0x140>)
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	2300      	movs	r3, #0
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	f005 fc3d 	bl	8006f98 <xQueueGenericSend>

	qBeepMode = xQueueCreate(1, sizeof( uint8_t )); // Очередь для передачи режима работы бипера
 800171e:	2200      	movs	r2, #0
 8001720:	2101      	movs	r1, #1
 8001722:	2001      	movs	r0, #1
 8001724:	f005 fbcf 	bl	8006ec6 <xQueueGenericCreate>
 8001728:	4603      	mov	r3, r0
 800172a:	4a3f      	ldr	r2, [pc, #252]	; (8001828 <freeRTOS_Tasks_Ini+0x144>)
 800172c:	6013      	str	r3, [r2, #0]

	qWelderCmd = xQueueCreate(1, sizeof( uint8_t )); // Очередь для передачи команд управления кареткой
 800172e:	2200      	movs	r2, #0
 8001730:	2101      	movs	r1, #1
 8001732:	2001      	movs	r0, #1
 8001734:	f005 fbc7 	bl	8006ec6 <xQueueGenericCreate>
 8001738:	4603      	mov	r3, r0
 800173a:	4a3c      	ldr	r2, [pc, #240]	; (800182c <freeRTOS_Tasks_Ini+0x148>)
 800173c:	6013      	str	r3, [r2, #0]

	qGoToResponse = xQueueCreate(1, sizeof( uint8_t )); // Требуемая позиция занята
 800173e:	2200      	movs	r2, #0
 8001740:	2101      	movs	r1, #1
 8001742:	2001      	movs	r0, #1
 8001744:	f005 fbbf 	bl	8006ec6 <xQueueGenericCreate>
 8001748:	4603      	mov	r3, r0
 800174a:	4a39      	ldr	r2, [pc, #228]	; (8001830 <freeRTOS_Tasks_Ini+0x14c>)
 800174c:	6013      	str	r3, [r2, #0]

	//vSemaphoreCreateBinary(qDebug);

	qWelderRun = xQueueCreate(1, sizeof( uint8_t )); // Начать процесс варки
 800174e:	2200      	movs	r2, #0
 8001750:	2101      	movs	r1, #1
 8001752:	2001      	movs	r0, #1
 8001754:	f005 fbb7 	bl	8006ec6 <xQueueGenericCreate>
 8001758:	4603      	mov	r3, r0
 800175a:	4a36      	ldr	r2, [pc, #216]	; (8001834 <freeRTOS_Tasks_Ini+0x150>)
 800175c:	6013      	str	r3, [r2, #0]

	qWelderCalibrated = xQueueCreate(1, sizeof( uint8_t )); // Начать калибровку
 800175e:	2200      	movs	r2, #0
 8001760:	2101      	movs	r1, #1
 8001762:	2001      	movs	r0, #1
 8001764:	f005 fbaf 	bl	8006ec6 <xQueueGenericCreate>
 8001768:	4603      	mov	r3, r0
 800176a:	4a33      	ldr	r2, [pc, #204]	; (8001838 <freeRTOS_Tasks_Ini+0x154>)
 800176c:	6013      	str	r3, [r2, #0]

	qKeyPress = xQueueCreate(1, sizeof( uint8_t )); // Предача события о нажатии кнопки
 800176e:	2200      	movs	r2, #0
 8001770:	2101      	movs	r1, #1
 8001772:	2001      	movs	r0, #1
 8001774:	f005 fba7 	bl	8006ec6 <xQueueGenericCreate>
 8001778:	4603      	mov	r3, r0
 800177a:	4a30      	ldr	r2, [pc, #192]	; (800183c <freeRTOS_Tasks_Ini+0x158>)
 800177c:	6013      	str	r3, [r2, #0]

	MicrostepDriver_Ini();
 800177e:	f7ff f945 	bl	8000a0c <MicrostepDriver_Ini>

	xTaskCreate(vIndicatorPanel_Out, "IndicatorPanel_Out", 400, NULL, 2, NULL); // З-а вывода значений на панель
 8001782:	2300      	movs	r3, #0
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	2302      	movs	r3, #2
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001790:	492b      	ldr	r1, [pc, #172]	; (8001840 <freeRTOS_Tasks_Ini+0x15c>)
 8001792:	482c      	ldr	r0, [pc, #176]	; (8001844 <freeRTOS_Tasks_Ini+0x160>)
 8001794:	f006 f91a 	bl	80079cc <xTaskCreate>

	xTaskCreate(vKeyScan, "KeyScan", 400, NULL, 2, NULL); // З-а опроса кнопок
 8001798:	2300      	movs	r3, #0
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	2302      	movs	r3, #2
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2300      	movs	r3, #0
 80017a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80017a6:	4928      	ldr	r1, [pc, #160]	; (8001848 <freeRTOS_Tasks_Ini+0x164>)
 80017a8:	4828      	ldr	r0, [pc, #160]	; (800184c <freeRTOS_Tasks_Ini+0x168>)
 80017aa:	f006 f90f 	bl	80079cc <xTaskCreate>

	xTaskCreate(vBuzzer_beep, "Buzzer_beep", 100, NULL, 1, NULL); // З-а опроса кнопок
 80017ae:	2300      	movs	r3, #0
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	2301      	movs	r3, #1
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	2264      	movs	r2, #100	; 0x64
 80017ba:	4925      	ldr	r1, [pc, #148]	; (8001850 <freeRTOS_Tasks_Ini+0x16c>)
 80017bc:	4825      	ldr	r0, [pc, #148]	; (8001854 <freeRTOS_Tasks_Ini+0x170>)
 80017be:	f006 f905 	bl	80079cc <xTaskCreate>

	xTaskCreate(vWelder_Run, "Weleder_Run", 250, NULL, 2, NULL);
 80017c2:	2300      	movs	r3, #0
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	2302      	movs	r3, #2
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2300      	movs	r3, #0
 80017cc:	22fa      	movs	r2, #250	; 0xfa
 80017ce:	4922      	ldr	r1, [pc, #136]	; (8001858 <freeRTOS_Tasks_Ini+0x174>)
 80017d0:	4822      	ldr	r0, [pc, #136]	; (800185c <freeRTOS_Tasks_Ini+0x178>)
 80017d2:	f006 f8fb 	bl	80079cc <xTaskCreate>

	xTaskCreate(vCarriage_GoTo, "Carriage_GoTo", 400, NULL, 3, NULL); // З-а перемещения каретки в заданную точку
 80017d6:	2300      	movs	r3, #0
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	2303      	movs	r3, #3
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2300      	movs	r3, #0
 80017e0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80017e4:	491e      	ldr	r1, [pc, #120]	; (8001860 <freeRTOS_Tasks_Ini+0x17c>)
 80017e6:	481f      	ldr	r0, [pc, #124]	; (8001864 <freeRTOS_Tasks_Ini+0x180>)
 80017e8:	f006 f8f0 	bl	80079cc <xTaskCreate>

	xTaskCreate(vCarriage_Calibration, "Carriage_Calibration", 200, NULL, 2, NULL); // З-а перемещения каретки в заданную точку
 80017ec:	2300      	movs	r3, #0
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	2302      	movs	r3, #2
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	22c8      	movs	r2, #200	; 0xc8
 80017f8:	491b      	ldr	r1, [pc, #108]	; (8001868 <freeRTOS_Tasks_Ini+0x184>)
 80017fa:	481c      	ldr	r0, [pc, #112]	; (800186c <freeRTOS_Tasks_Ini+0x188>)
 80017fc:	f006 f8e6 	bl	80079cc <xTaskCreate>

	xTaskCreate(vKey_Action, "Key_Action", 200, NULL, 2, NULL); // З-а выполняет дейсвия в зависимости от нажатой кнопки и режима работы устройсво
 8001800:	2300      	movs	r3, #0
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	2302      	movs	r3, #2
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2300      	movs	r3, #0
 800180a:	22c8      	movs	r2, #200	; 0xc8
 800180c:	4918      	ldr	r1, [pc, #96]	; (8001870 <freeRTOS_Tasks_Ini+0x18c>)
 800180e:	4819      	ldr	r0, [pc, #100]	; (8001874 <freeRTOS_Tasks_Ini+0x190>)
 8001810:	f006 f8dc 	bl	80079cc <xTaskCreate>

	vTaskStartScheduler();
 8001814:	f006 fa2a 	bl	8007c6c <vTaskStartScheduler>

}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20003d60 	.word	0x20003d60
 8001824:	200045c4 	.word	0x200045c4
 8001828:	20003d38 	.word	0x20003d38
 800182c:	20004594 	.word	0x20004594
 8001830:	20004580 	.word	0x20004580
 8001834:	20004588 	.word	0x20004588
 8001838:	2000458c 	.word	0x2000458c
 800183c:	20004590 	.word	0x20004590
 8001840:	0800927c 	.word	0x0800927c
 8001844:	08002f81 	.word	0x08002f81
 8001848:	08009290 	.word	0x08009290
 800184c:	08002555 	.word	0x08002555
 8001850:	08009298 	.word	0x08009298
 8001854:	08003045 	.word	0x08003045
 8001858:	080092a4 	.word	0x080092a4
 800185c:	0800212d 	.word	0x0800212d
 8001860:	080092b0 	.word	0x080092b0
 8001864:	080023c1 	.word	0x080023c1
 8001868:	080092c0 	.word	0x080092c0
 800186c:	080022e5 	.word	0x080022e5
 8001870:	080092d8 	.word	0x080092d8
 8001874:	08001879 	.word	0x08001879

08001878 <vKey_Action>:

void vKey_Action(void *pvParameters)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed; // Номер нажатой кнопки или комбинации кнопок
	uint8_t beep_mode_send = beep_click; // Режим работы бипера
 8001880:	2301      	movs	r3, #1
 8001882:	73bb      	strb	r3, [r7, #14]
	uint8_t Cal = Calibrated; // Передача команды калибровка
 8001884:	2304      	movs	r3, #4
 8001886:	737b      	strb	r3, [r7, #13]
	uint8_t Run; // Переменная для передачи команды начало варки
	uint8_t Carriage_cmd = Cmd_CarriageGoTo; //Передача команды для начала движения каретки в заданную точку
 8001888:	2301      	movs	r3, #1
 800188a:	72fb      	strb	r3, [r7, #11]


	for(;;)
	{
		xQueueReceive(qKeyPress, &KeyPressed, portMAX_DELAY ); // Ждать нажатия кнопки
 800188c:	4ba6      	ldr	r3, [pc, #664]	; (8001b28 <vKey_Action+0x2b0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f107 010f 	add.w	r1, r7, #15
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	4618      	mov	r0, r3
 800189a:	f005 fcd5 	bl	8007248 <xQueueReceive>

		switch(KeyPressed)
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	2b24      	cmp	r3, #36	; 0x24
 80018a2:	d8f3      	bhi.n	800188c <vKey_Action+0x14>
 80018a4:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <vKey_Action+0x34>)
 80018a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018aa:	bf00      	nop
 80018ac:	0800188d 	.word	0x0800188d
 80018b0:	08001941 	.word	0x08001941
 80018b4:	0800199f 	.word	0x0800199f
 80018b8:	080019c7 	.word	0x080019c7
 80018bc:	08001a35 	.word	0x08001a35
 80018c0:	08001a73 	.word	0x08001a73
 80018c4:	08001ae7 	.word	0x08001ae7
 80018c8:	08001b39 	.word	0x08001b39
 80018cc:	08001ba3 	.word	0x08001ba3
 80018d0:	08001bd7 	.word	0x08001bd7
 80018d4:	08001bff 	.word	0x08001bff
 80018d8:	08001c27 	.word	0x08001c27
 80018dc:	08001c4f 	.word	0x08001c4f
 80018e0:	08001c77 	.word	0x08001c77
 80018e4:	08001c9f 	.word	0x08001c9f
 80018e8:	08001cc7 	.word	0x08001cc7
 80018ec:	08001cf3 	.word	0x08001cf3
 80018f0:	08001d1f 	.word	0x08001d1f
 80018f4:	08001d47 	.word	0x08001d47
 80018f8:	08001d6f 	.word	0x08001d6f
 80018fc:	08001d97 	.word	0x08001d97
 8001900:	08001dbf 	.word	0x08001dbf
 8001904:	08001df9 	.word	0x08001df9
 8001908:	08001e21 	.word	0x08001e21
 800190c:	08001e4d 	.word	0x08001e4d
 8001910:	08001f41 	.word	0x08001f41
 8001914:	08001f6d 	.word	0x08001f6d
 8001918:	08001f8b 	.word	0x08001f8b
 800191c:	08001feb 	.word	0x08001feb
 8001920:	08002009 	.word	0x08002009
 8001924:	08002053 	.word	0x08002053
 8001928:	08002061 	.word	0x08002061
 800192c:	0800188d 	.word	0x0800188d
 8001930:	08001e75 	.word	0x08001e75
 8001934:	08001ec3 	.word	0x08001ec3
 8001938:	08001ed5 	.word	0x08001ed5
 800193c:	08001f15 	.word	0x08001f15
			break;
		}

		case press_short_Xs_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001940:	4b7a      	ldr	r3, [pc, #488]	; (8001b2c <vKey_Action+0x2b4>)
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	f107 010e 	add.w	r1, r7, #14
 8001948:	2300      	movs	r3, #0
 800194a:	2200      	movs	r2, #0
 800194c:	f005 fb24 	bl	8006f98 <xQueueGenericSend>

			if (WelderUnit.Xs > XS_MIN) // Проверка на попадание в допустимый диапазон значений
 8001950:	4b77      	ldr	r3, [pc, #476]	; (8001b30 <vKey_Action+0x2b8>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	2b0a      	cmp	r3, #10
 8001956:	f240 8390 	bls.w	800207a <vKey_Action+0x802>
			{
				WelderUnit.Xs--; // Исполнить
 800195a:	4b75      	ldr	r3, [pc, #468]	; (8001b30 <vKey_Action+0x2b8>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	3b01      	subs	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b73      	ldr	r3, [pc, #460]	; (8001b30 <vKey_Action+0x2b8>)
 8001964:	801a      	strh	r2, [r3, #0]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001966:	4b72      	ldr	r3, [pc, #456]	; (8001b30 <vKey_Action+0x2b8>)
 8001968:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800196c:	2b02      	cmp	r3, #2
 800196e:	f040 8384 	bne.w	800207a <vKey_Action+0x802>
 8001972:	4b6f      	ldr	r3, [pc, #444]	; (8001b30 <vKey_Action+0x2b8>)
 8001974:	7c1b      	ldrb	r3, [r3, #16]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 837d 	beq.w	800207a <vKey_Action+0x802>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001980:	2301      	movs	r3, #1
 8001982:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xs;
 8001984:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <vKey_Action+0x2b8>)
 8001986:	881a      	ldrh	r2, [r3, #0]
 8001988:	4b69      	ldr	r3, [pc, #420]	; (8001b30 <vKey_Action+0x2b8>)
 800198a:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 800198c:	4b69      	ldr	r3, [pc, #420]	; (8001b34 <vKey_Action+0x2bc>)
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	f107 010b 	add.w	r1, r7, #11
 8001994:	2300      	movs	r3, #0
 8001996:	2200      	movs	r2, #0
 8001998:	f005 fafe 	bl	8006f98 <xQueueGenericSend>

				}
			}
			break;
 800199c:	e36d      	b.n	800207a <vKey_Action+0x802>
		}

		case press_long_Xs_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 800199e:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <vKey_Action+0x2b4>)
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	f107 010e 	add.w	r1, r7, #14
 80019a6:	2300      	movs	r3, #0
 80019a8:	2200      	movs	r2, #0
 80019aa:	f005 faf5 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Xs > XS_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 80019ae:	4b60      	ldr	r3, [pc, #384]	; (8001b30 <vKey_Action+0x2b8>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	2b1e      	cmp	r3, #30
 80019b4:	f240 8363 	bls.w	800207e <vKey_Action+0x806>
			{
				WelderUnit.Xs -= 20; // Дейсвия при длинном нажатии
 80019b8:	4b5d      	ldr	r3, [pc, #372]	; (8001b30 <vKey_Action+0x2b8>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	3b14      	subs	r3, #20
 80019be:	b29a      	uxth	r2, r3
 80019c0:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <vKey_Action+0x2b8>)
 80019c2:	801a      	strh	r2, [r3, #0]
			}
			break;
 80019c4:	e35b      	b.n	800207e <vKey_Action+0x806>
		}

		case press_short_Xs_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80019c6:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <vKey_Action+0x2b4>)
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	f107 010e 	add.w	r1, r7, #14
 80019ce:	2300      	movs	r3, #0
 80019d0:	2200      	movs	r2, #0
 80019d2:	f005 fae1 	bl	8006f98 <xQueueGenericSend>
			if ((WelderUnit.Xs < XS_MAX) && (WelderUnit.Xs < WelderUnit.Xf)) // Проверка на попадание в допустимый диапазон значений  и что бы Xs была меньше Xf
 80019d6:	4b56      	ldr	r3, [pc, #344]	; (8001b30 <vKey_Action+0x2b8>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80019de:	f080 8350 	bcs.w	8002082 <vKey_Action+0x80a>
 80019e2:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <vKey_Action+0x2b8>)
 80019e4:	881a      	ldrh	r2, [r3, #0]
 80019e6:	4b52      	ldr	r3, [pc, #328]	; (8001b30 <vKey_Action+0x2b8>)
 80019e8:	885b      	ldrh	r3, [r3, #2]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	f080 8349 	bcs.w	8002082 <vKey_Action+0x80a>
			{

			WelderUnit.Xs++; // Исполнить
 80019f0:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <vKey_Action+0x2b8>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <vKey_Action+0x2b8>)
 80019fa:	801a      	strh	r2, [r3, #0]

			// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
			if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 80019fc:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <vKey_Action+0x2b8>)
 80019fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	f040 833d 	bne.w	8002082 <vKey_Action+0x80a>
 8001a08:	4b49      	ldr	r3, [pc, #292]	; (8001b30 <vKey_Action+0x2b8>)
 8001a0a:	7c1b      	ldrb	r3, [r3, #16]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 8336 	beq.w	8002082 <vKey_Action+0x80a>
			{
				Carriage_cmd = Cmd_CarriageGoTo;
 8001a16:	2301      	movs	r3, #1
 8001a18:	72fb      	strb	r3, [r7, #11]
				WelderUnit.GoTo = WelderUnit.Xs;
 8001a1a:	4b45      	ldr	r3, [pc, #276]	; (8001b30 <vKey_Action+0x2b8>)
 8001a1c:	881a      	ldrh	r2, [r3, #0]
 8001a1e:	4b44      	ldr	r3, [pc, #272]	; (8001b30 <vKey_Action+0x2b8>)
 8001a20:	811a      	strh	r2, [r3, #8]
				xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001a22:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <vKey_Action+0x2bc>)
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	f107 010b 	add.w	r1, r7, #11
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f005 fab3 	bl	8006f98 <xQueueGenericSend>

			}

			}
			break;
 8001a32:	e326      	b.n	8002082 <vKey_Action+0x80a>
		}

		case press_long_Xs_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001a34:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <vKey_Action+0x2b4>)
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	f107 010e 	add.w	r1, r7, #14
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f005 faaa 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Xs < XS_MAX - 20 && WelderUnit.Xs < WelderUnit.Xf - 20) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
 8001a44:	4b3a      	ldr	r3, [pc, #232]	; (8001b30 <vKey_Action+0x2b8>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	f240 622b 	movw	r2, #1579	; 0x62b
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	f200 831a 	bhi.w	8002086 <vKey_Action+0x80e>
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <vKey_Action+0x2b8>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b35      	ldr	r3, [pc, #212]	; (8001b30 <vKey_Action+0x2b8>)
 8001a5a:	885b      	ldrh	r3, [r3, #2]
 8001a5c:	3b14      	subs	r3, #20
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	f280 8311 	bge.w	8002086 <vKey_Action+0x80e>
			{
				WelderUnit.Xs += 20; // Дейсвия при длинном нажатии
 8001a64:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <vKey_Action+0x2b8>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	3314      	adds	r3, #20
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <vKey_Action+0x2b8>)
 8001a6e:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001a70:	e309      	b.n	8002086 <vKey_Action+0x80e>
		}

		case press_short_Xf_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <vKey_Action+0x2b4>)
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	f107 010e 	add.w	r1, r7, #14
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f005 fa8b 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN && WelderUnit.Xf > WelderUnit.Xs) // Проверка на попадание в допустимый диапазон значений
 8001a82:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <vKey_Action+0x2b8>)
 8001a84:	885b      	ldrh	r3, [r3, #2]
 8001a86:	2b14      	cmp	r3, #20
 8001a88:	f240 82ff 	bls.w	800208a <vKey_Action+0x812>
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <vKey_Action+0x2b8>)
 8001a8e:	885a      	ldrh	r2, [r3, #2]
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <vKey_Action+0x2b8>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	f240 82f8 	bls.w	800208a <vKey_Action+0x812>
			{
				WelderUnit.Xf--; // Исполнить
 8001a9a:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <vKey_Action+0x2b8>)
 8001a9c:	885b      	ldrh	r3, [r3, #2]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <vKey_Action+0x2b8>)
 8001aa4:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001aa6:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <vKey_Action+0x2b8>)
 8001aa8:	885a      	ldrh	r2, [r3, #2]
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <vKey_Action+0x2b8>)
 8001aac:	811a      	strh	r2, [r3, #8]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <vKey_Action+0x2b8>)
 8001ab0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	f040 82e8 	bne.w	800208a <vKey_Action+0x812>
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <vKey_Action+0x2b8>)
 8001abc:	7c1b      	ldrb	r3, [r3, #16]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 82e1 	beq.w	800208a <vKey_Action+0x812>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xf;
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <vKey_Action+0x2b8>)
 8001ace:	885a      	ldrh	r2, [r3, #2]
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <vKey_Action+0x2b8>)
 8001ad2:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <vKey_Action+0x2bc>)
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	f107 010b 	add.w	r1, r7, #11
 8001adc:	2300      	movs	r3, #0
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f005 fa5a 	bl	8006f98 <xQueueGenericSend>

				}
			}
			break;
 8001ae4:	e2d1      	b.n	800208a <vKey_Action+0x812>
		}

		case press_long_Xf_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <vKey_Action+0x2b4>)
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	f107 010e 	add.w	r1, r7, #14
 8001aee:	2300      	movs	r3, #0
 8001af0:	2200      	movs	r2, #0
 8001af2:	f005 fa51 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN + 20 && WelderUnit.Xf > WelderUnit.Xs + 20 ) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <vKey_Action+0x2b8>)
 8001af8:	885b      	ldrh	r3, [r3, #2]
 8001afa:	2b28      	cmp	r3, #40	; 0x28
 8001afc:	f240 82c8 	bls.w	8002090 <vKey_Action+0x818>
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <vKey_Action+0x2b8>)
 8001b02:	885b      	ldrh	r3, [r3, #2]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <vKey_Action+0x2b8>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	3314      	adds	r3, #20
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	f340 82bf 	ble.w	8002090 <vKey_Action+0x818>
			{
				WelderUnit.Xf -= 20; // Дейсвия при длинном нажатии
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <vKey_Action+0x2b8>)
 8001b14:	885b      	ldrh	r3, [r3, #2]
 8001b16:	3b14      	subs	r3, #20
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <vKey_Action+0x2b8>)
 8001b1c:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <vKey_Action+0x2b8>)
 8001b20:	885a      	ldrh	r2, [r3, #2]
 8001b22:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <vKey_Action+0x2b8>)
 8001b24:	811a      	strh	r2, [r3, #8]
			}
			break;
 8001b26:	e2b3      	b.n	8002090 <vKey_Action+0x818>
 8001b28:	20004590 	.word	0x20004590
 8001b2c:	20003d38 	.word	0x20003d38
 8001b30:	20003d3c 	.word	0x20003d3c
 8001b34:	20004594 	.word	0x20004594
		}

		case press_short_Xf_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b38:	4bac      	ldr	r3, [pc, #688]	; (8001dec <vKey_Action+0x574>)
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	f107 010e 	add.w	r1, r7, #14
 8001b40:	2300      	movs	r3, #0
 8001b42:	2200      	movs	r2, #0
 8001b44:	f005 fa28 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001b48:	4ba9      	ldr	r3, [pc, #676]	; (8001df0 <vKey_Action+0x578>)
 8001b4a:	885b      	ldrh	r3, [r3, #2]
 8001b4c:	f240 6271 	movw	r2, #1649	; 0x671
 8001b50:	4293      	cmp	r3, r2
 8001b52:	f200 82a0 	bhi.w	8002096 <vKey_Action+0x81e>
			{
				WelderUnit.Xf++; // Исполнить
 8001b56:	4ba6      	ldr	r3, [pc, #664]	; (8001df0 <vKey_Action+0x578>)
 8001b58:	885b      	ldrh	r3, [r3, #2]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4ba4      	ldr	r3, [pc, #656]	; (8001df0 <vKey_Action+0x578>)
 8001b60:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001b62:	4ba3      	ldr	r3, [pc, #652]	; (8001df0 <vKey_Action+0x578>)
 8001b64:	885a      	ldrh	r2, [r3, #2]
 8001b66:	4ba2      	ldr	r3, [pc, #648]	; (8001df0 <vKey_Action+0x578>)
 8001b68:	811a      	strh	r2, [r3, #8]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001b6a:	4ba1      	ldr	r3, [pc, #644]	; (8001df0 <vKey_Action+0x578>)
 8001b6c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	f040 8290 	bne.w	8002096 <vKey_Action+0x81e>
 8001b76:	4b9e      	ldr	r3, [pc, #632]	; (8001df0 <vKey_Action+0x578>)
 8001b78:	7c1b      	ldrb	r3, [r3, #16]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8289 	beq.w	8002096 <vKey_Action+0x81e>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001b84:	2301      	movs	r3, #1
 8001b86:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xf;
 8001b88:	4b99      	ldr	r3, [pc, #612]	; (8001df0 <vKey_Action+0x578>)
 8001b8a:	885a      	ldrh	r2, [r3, #2]
 8001b8c:	4b98      	ldr	r3, [pc, #608]	; (8001df0 <vKey_Action+0x578>)
 8001b8e:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001b90:	4b98      	ldr	r3, [pc, #608]	; (8001df4 <vKey_Action+0x57c>)
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	f107 010b 	add.w	r1, r7, #11
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f005 f9fc 	bl	8006f98 <xQueueGenericSend>

				}
			}
			break;
 8001ba0:	e279      	b.n	8002096 <vKey_Action+0x81e>
		}

		case press_long_Xf_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001ba2:	4b92      	ldr	r3, [pc, #584]	; (8001dec <vKey_Action+0x574>)
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	f107 010e 	add.w	r1, r7, #14
 8001baa:	2300      	movs	r3, #0
 8001bac:	2200      	movs	r2, #0
 8001bae:	f005 f9f3 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX - 20 ) // Проверка на попадание в допустимый диапазон значений
 8001bb2:	4b8f      	ldr	r3, [pc, #572]	; (8001df0 <vKey_Action+0x578>)
 8001bb4:	885b      	ldrh	r3, [r3, #2]
 8001bb6:	f240 625d 	movw	r2, #1629	; 0x65d
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	f200 826e 	bhi.w	800209c <vKey_Action+0x824>
			{
				WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 8001bc0:	4b8b      	ldr	r3, [pc, #556]	; (8001df0 <vKey_Action+0x578>)
 8001bc2:	885b      	ldrh	r3, [r3, #2]
 8001bc4:	3314      	adds	r3, #20
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b89      	ldr	r3, [pc, #548]	; (8001df0 <vKey_Action+0x578>)
 8001bca:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001bcc:	4b88      	ldr	r3, [pc, #544]	; (8001df0 <vKey_Action+0x578>)
 8001bce:	885a      	ldrh	r2, [r3, #2]
 8001bd0:	4b87      	ldr	r3, [pc, #540]	; (8001df0 <vKey_Action+0x578>)
 8001bd2:	811a      	strh	r2, [r3, #8]
			}
			break;
 8001bd4:	e262      	b.n	800209c <vKey_Action+0x824>

		}

		case press_short_Delay_s_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001bd6:	4b85      	ldr	r3, [pc, #532]	; (8001dec <vKey_Action+0x574>)
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	f107 010e 	add.w	r1, r7, #14
 8001bde:	2300      	movs	r3, #0
 8001be0:	2200      	movs	r2, #0
 8001be2:	f005 f9d9 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN) // Проверка на попадание в допустимый диапазон значений
 8001be6:	4b82      	ldr	r3, [pc, #520]	; (8001df0 <vKey_Action+0x578>)
 8001be8:	7a9b      	ldrb	r3, [r3, #10]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	f240 8259 	bls.w	80020a2 <vKey_Action+0x82a>
			{
				WelderUnit.Delay_s--; // Исполнить
 8001bf0:	4b7f      	ldr	r3, [pc, #508]	; (8001df0 <vKey_Action+0x578>)
 8001bf2:	7a9b      	ldrb	r3, [r3, #10]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b7d      	ldr	r3, [pc, #500]	; (8001df0 <vKey_Action+0x578>)
 8001bfa:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001bfc:	e251      	b.n	80020a2 <vKey_Action+0x82a>
		}

		case press_long_Delay_s_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001bfe:	4b7b      	ldr	r3, [pc, #492]	; (8001dec <vKey_Action+0x574>)
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	f107 010e 	add.w	r1, r7, #14
 8001c06:	2300      	movs	r3, #0
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f005 f9c5 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN + 10) // Проверка на попадание в допустимый диапазон значений
 8001c0e:	4b78      	ldr	r3, [pc, #480]	; (8001df0 <vKey_Action+0x578>)
 8001c10:	7a9b      	ldrb	r3, [r3, #10]
 8001c12:	2b0b      	cmp	r3, #11
 8001c14:	f240 8248 	bls.w	80020a8 <vKey_Action+0x830>
			{
				WelderUnit.Delay_s -= 10; // Дейсвия при длинном нажатии
 8001c18:	4b75      	ldr	r3, [pc, #468]	; (8001df0 <vKey_Action+0x578>)
 8001c1a:	7a9b      	ldrb	r3, [r3, #10]
 8001c1c:	3b0a      	subs	r3, #10
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b73      	ldr	r3, [pc, #460]	; (8001df0 <vKey_Action+0x578>)
 8001c22:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001c24:	e240      	b.n	80020a8 <vKey_Action+0x830>
		}

		case press_short_Delay_s_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001c26:	4b71      	ldr	r3, [pc, #452]	; (8001dec <vKey_Action+0x574>)
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	f107 010e 	add.w	r1, r7, #14
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2200      	movs	r2, #0
 8001c32:	f005 f9b1 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001c36:	4b6e      	ldr	r3, [pc, #440]	; (8001df0 <vKey_Action+0x578>)
 8001c38:	7a9b      	ldrb	r3, [r3, #10]
 8001c3a:	2b31      	cmp	r3, #49	; 0x31
 8001c3c:	f200 8237 	bhi.w	80020ae <vKey_Action+0x836>
			{
				WelderUnit.Delay_s++; // Исполнить
 8001c40:	4b6b      	ldr	r3, [pc, #428]	; (8001df0 <vKey_Action+0x578>)
 8001c42:	7a9b      	ldrb	r3, [r3, #10]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b69      	ldr	r3, [pc, #420]	; (8001df0 <vKey_Action+0x578>)
 8001c4a:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001c4c:	e22f      	b.n	80020ae <vKey_Action+0x836>
		}

		case press_long_Delay_s_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001c4e:	4b67      	ldr	r3, [pc, #412]	; (8001dec <vKey_Action+0x574>)
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	f107 010e 	add.w	r1, r7, #14
 8001c56:	2300      	movs	r3, #0
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f005 f99d 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
 8001c5e:	4b64      	ldr	r3, [pc, #400]	; (8001df0 <vKey_Action+0x578>)
 8001c60:	7a9b      	ldrb	r3, [r3, #10]
 8001c62:	2b27      	cmp	r3, #39	; 0x27
 8001c64:	f200 8226 	bhi.w	80020b4 <vKey_Action+0x83c>
			{
				WelderUnit.Delay_s += 10; // Дейсвия при длинном нажатии
 8001c68:	4b61      	ldr	r3, [pc, #388]	; (8001df0 <vKey_Action+0x578>)
 8001c6a:	7a9b      	ldrb	r3, [r3, #10]
 8001c6c:	330a      	adds	r3, #10
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b5f      	ldr	r3, [pc, #380]	; (8001df0 <vKey_Action+0x578>)
 8001c72:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001c74:	e21e      	b.n	80020b4 <vKey_Action+0x83c>
		}

		case press_short_Speed_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001c76:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <vKey_Action+0x574>)
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	f107 010e 	add.w	r1, r7, #14
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2200      	movs	r2, #0
 8001c82:	f005 f989 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN) // Проверка на попадание в допустимый диапазон значений
 8001c86:	4b5a      	ldr	r3, [pc, #360]	; (8001df0 <vKey_Action+0x578>)
 8001c88:	88db      	ldrh	r3, [r3, #6]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	f240 8215 	bls.w	80020ba <vKey_Action+0x842>
			{
				WelderUnit.Speed--; // Исполнить
 8001c90:	4b57      	ldr	r3, [pc, #348]	; (8001df0 <vKey_Action+0x578>)
 8001c92:	88db      	ldrh	r3, [r3, #6]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	4b55      	ldr	r3, [pc, #340]	; (8001df0 <vKey_Action+0x578>)
 8001c9a:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001c9c:	e20d      	b.n	80020ba <vKey_Action+0x842>
		}

		case press_long_Speed_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001c9e:	4b53      	ldr	r3, [pc, #332]	; (8001dec <vKey_Action+0x574>)
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	f107 010e 	add.w	r1, r7, #14
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f005 f975 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001cae:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <vKey_Action+0x578>)
 8001cb0:	88db      	ldrh	r3, [r3, #6]
 8001cb2:	2b15      	cmp	r3, #21
 8001cb4:	f240 8204 	bls.w	80020c0 <vKey_Action+0x848>
			{
				WelderUnit.Speed -= 20; // Дейсвия при длинном нажатии
 8001cb8:	4b4d      	ldr	r3, [pc, #308]	; (8001df0 <vKey_Action+0x578>)
 8001cba:	88db      	ldrh	r3, [r3, #6]
 8001cbc:	3b14      	subs	r3, #20
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <vKey_Action+0x578>)
 8001cc2:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001cc4:	e1fc      	b.n	80020c0 <vKey_Action+0x848>
		}

		case press_short_Speed_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001cc6:	4b49      	ldr	r3, [pc, #292]	; (8001dec <vKey_Action+0x574>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	f107 010e 	add.w	r1, r7, #14
 8001cce:	2300      	movs	r3, #0
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f005 f961 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001cd6:	4b46      	ldr	r3, [pc, #280]	; (8001df0 <vKey_Action+0x578>)
 8001cd8:	88db      	ldrh	r3, [r3, #6]
 8001cda:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	f200 81f1 	bhi.w	80020c6 <vKey_Action+0x84e>
			{
				WelderUnit.Speed++; // Исполнить
 8001ce4:	4b42      	ldr	r3, [pc, #264]	; (8001df0 <vKey_Action+0x578>)
 8001ce6:	88db      	ldrh	r3, [r3, #6]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <vKey_Action+0x578>)
 8001cee:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001cf0:	e1e9      	b.n	80020c6 <vKey_Action+0x84e>
		}

		case press_long_Speed_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001cf2:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <vKey_Action+0x574>)
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	f107 010e 	add.w	r1, r7, #14
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f005 f94b 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <vKey_Action+0x578>)
 8001d04:	88db      	ldrh	r3, [r3, #6]
 8001d06:	f240 32d2 	movw	r2, #978	; 0x3d2
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	f200 81de 	bhi.w	80020cc <vKey_Action+0x854>
			{
				WelderUnit.Speed += 20; // Дейсвия при длинном нажатии
 8001d10:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <vKey_Action+0x578>)
 8001d12:	88db      	ldrh	r3, [r3, #6]
 8001d14:	3314      	adds	r3, #20
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b35      	ldr	r3, [pc, #212]	; (8001df0 <vKey_Action+0x578>)
 8001d1a:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001d1c:	e1d6      	b.n	80020cc <vKey_Action+0x854>
		}

		case press_short_Delay_f_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <vKey_Action+0x574>)
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	f107 010e 	add.w	r1, r7, #14
 8001d26:	2300      	movs	r3, #0
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f005 f935 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN) // Проверка на попадание в допустимый диапазон значений
 8001d2e:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <vKey_Action+0x578>)
 8001d30:	7adb      	ldrb	r3, [r3, #11]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	f240 81cd 	bls.w	80020d2 <vKey_Action+0x85a>
			{
				WelderUnit.Delay_f--; // Исполнить
 8001d38:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <vKey_Action+0x578>)
 8001d3a:	7adb      	ldrb	r3, [r3, #11]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <vKey_Action+0x578>)
 8001d42:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001d44:	e1c5      	b.n	80020d2 <vKey_Action+0x85a>
		}

		case press_long_Delay_f_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <vKey_Action+0x574>)
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	f107 010e 	add.w	r1, r7, #14
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2200      	movs	r2, #0
 8001d52:	f005 f921 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN + 10) // Проверка на попадание в допустимый диапазон значений
 8001d56:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <vKey_Action+0x578>)
 8001d58:	7adb      	ldrb	r3, [r3, #11]
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	f240 81bc 	bls.w	80020d8 <vKey_Action+0x860>
			{
				WelderUnit.Delay_f -= 10; // Дейсвия при длинном нажатии
 8001d60:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <vKey_Action+0x578>)
 8001d62:	7adb      	ldrb	r3, [r3, #11]
 8001d64:	3b0a      	subs	r3, #10
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <vKey_Action+0x578>)
 8001d6a:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001d6c:	e1b4      	b.n	80020d8 <vKey_Action+0x860>
		}

		case press_short_Delay_f_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d6e:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <vKey_Action+0x574>)
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	f107 010e 	add.w	r1, r7, #14
 8001d76:	2300      	movs	r3, #0
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f005 f90d 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX) // Проверка на попадание в допустимый диапазон значений
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <vKey_Action+0x578>)
 8001d80:	7adb      	ldrb	r3, [r3, #11]
 8001d82:	2b45      	cmp	r3, #69	; 0x45
 8001d84:	f200 81ab 	bhi.w	80020de <vKey_Action+0x866>
			{
				WelderUnit.Delay_f++; // Исполнить
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <vKey_Action+0x578>)
 8001d8a:	7adb      	ldrb	r3, [r3, #11]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <vKey_Action+0x578>)
 8001d92:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001d94:	e1a3      	b.n	80020de <vKey_Action+0x866>
		}

		case press_long_Delay_f_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <vKey_Action+0x574>)
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	f107 010e 	add.w	r1, r7, #14
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2200      	movs	r2, #0
 8001da2:	f005 f8f9 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <vKey_Action+0x578>)
 8001da8:	7adb      	ldrb	r3, [r3, #11]
 8001daa:	2b3b      	cmp	r3, #59	; 0x3b
 8001dac:	f200 819a 	bhi.w	80020e4 <vKey_Action+0x86c>
			{
				WelderUnit.Delay_f += 10; // Дейсвия при длинном нажатии
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <vKey_Action+0x578>)
 8001db2:	7adb      	ldrb	r3, [r3, #11]
 8001db4:	330a      	adds	r3, #10
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <vKey_Action+0x578>)
 8001dba:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001dbc:	e192      	b.n	80020e4 <vKey_Action+0x86c>
		}

		case press_short_Program_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <vKey_Action+0x574>)
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	f107 010e 	add.w	r1, r7, #14
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f005 f8e5 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN) // Проверка на попадание в допустимый диапазон значений
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <vKey_Action+0x578>)
 8001dd0:	899b      	ldrh	r3, [r3, #12]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	f240 8194 	bls.w	8002100 <vKey_Action+0x888>
			{
				WelderUnit.Program--; // Исполнить
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <vKey_Action+0x578>)
 8001dda:	899b      	ldrh	r3, [r3, #12]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <vKey_Action+0x578>)
 8001de2:	819a      	strh	r2, [r3, #12]
				ReadProgramFromFlash2();
 8001de4:	f7ff f9ec 	bl	80011c0 <ReadProgramFromFlash2>
			}
			break;
 8001de8:	e18a      	b.n	8002100 <vKey_Action+0x888>
 8001dea:	bf00      	nop
 8001dec:	20003d38 	.word	0x20003d38
 8001df0:	20003d3c 	.word	0x20003d3c
 8001df4:	20004594 	.word	0x20004594
		}

		case press_long_Program_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001df8:	4bbc      	ldr	r3, [pc, #752]	; (80020ec <vKey_Action+0x874>)
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	f107 010e 	add.w	r1, r7, #14
 8001e00:	2300      	movs	r3, #0
 8001e02:	2200      	movs	r2, #0
 8001e04:	f005 f8c8 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001e08:	4bb9      	ldr	r3, [pc, #740]	; (80020f0 <vKey_Action+0x878>)
 8001e0a:	899b      	ldrh	r3, [r3, #12]
 8001e0c:	2b15      	cmp	r3, #21
 8001e0e:	f240 817a 	bls.w	8002106 <vKey_Action+0x88e>
			{
				WelderUnit.Program -= 20; // Дейсвия при длинном нажатии
 8001e12:	4bb7      	ldr	r3, [pc, #732]	; (80020f0 <vKey_Action+0x878>)
 8001e14:	899b      	ldrh	r3, [r3, #12]
 8001e16:	3b14      	subs	r3, #20
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	4bb5      	ldr	r3, [pc, #724]	; (80020f0 <vKey_Action+0x878>)
 8001e1c:	819a      	strh	r2, [r3, #12]
			}
			break;
 8001e1e:	e172      	b.n	8002106 <vKey_Action+0x88e>
		}

		case press_short_Program_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 );
 8001e20:	4bb2      	ldr	r3, [pc, #712]	; (80020ec <vKey_Action+0x874>)
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	f107 010e 	add.w	r1, r7, #14
 8001e28:	2300      	movs	r3, #0
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f005 f8b4 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX) // Проверка на попадание в допустимый диапазон значений
 8001e30:	4baf      	ldr	r3, [pc, #700]	; (80020f0 <vKey_Action+0x878>)
 8001e32:	899b      	ldrh	r3, [r3, #12]
 8001e34:	2b45      	cmp	r3, #69	; 0x45
 8001e36:	f200 8169 	bhi.w	800210c <vKey_Action+0x894>
			{
				WelderUnit.Program++; // Исполнить
 8001e3a:	4bad      	ldr	r3, [pc, #692]	; (80020f0 <vKey_Action+0x878>)
 8001e3c:	899b      	ldrh	r3, [r3, #12]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	4bab      	ldr	r3, [pc, #684]	; (80020f0 <vKey_Action+0x878>)
 8001e44:	819a      	strh	r2, [r3, #12]
				ReadProgramFromFlash2(); //
 8001e46:	f7ff f9bb 	bl	80011c0 <ReadProgramFromFlash2>
				//SaveProgramToFlash2();
			}
			break;
 8001e4a:	e15f      	b.n	800210c <vKey_Action+0x894>
		}

		case press_long_Program_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e4c:	4ba7      	ldr	r3, [pc, #668]	; (80020ec <vKey_Action+0x874>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	f107 010e 	add.w	r1, r7, #14
 8001e54:	2300      	movs	r3, #0
 8001e56:	2200      	movs	r2, #0
 8001e58:	f005 f89e 	bl	8006f98 <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8001e5c:	4ba4      	ldr	r3, [pc, #656]	; (80020f0 <vKey_Action+0x878>)
 8001e5e:	899b      	ldrh	r3, [r3, #12]
 8001e60:	2b31      	cmp	r3, #49	; 0x31
 8001e62:	f200 8156 	bhi.w	8002112 <vKey_Action+0x89a>
			{
				WelderUnit.Program += 20; // Дейсвия при длинном нажатии
 8001e66:	4ba2      	ldr	r3, [pc, #648]	; (80020f0 <vKey_Action+0x878>)
 8001e68:	899b      	ldrh	r3, [r3, #12]
 8001e6a:	3314      	adds	r3, #20
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	4ba0      	ldr	r3, [pc, #640]	; (80020f0 <vKey_Action+0x878>)
 8001e70:	819a      	strh	r2, [r3, #12]
			}
			break;
 8001e72:	e14e      	b.n	8002112 <vKey_Action+0x89a>
		}


		case press_short_Down:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e74:	4b9d      	ldr	r3, [pc, #628]	; (80020ec <vKey_Action+0x874>)
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	f107 010e 	add.w	r1, r7, #14
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f005 f88a 	bl	8006f98 <xQueueGenericSend>
					if (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) // Если задняя дверца закрыта, то разрешить опускание головки
 8001e84:	4b9a      	ldr	r3, [pc, #616]	; (80020f0 <vKey_Action+0x878>)
 8001e86:	7c1b      	ldrb	r3, [r3, #16]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8143 	beq.w	8002118 <vKey_Action+0x8a0>
					{
						WELDER_HEAD_DOWN // Опустить сварочную головку
 8001e92:	2200      	movs	r2, #0
 8001e94:	2106      	movs	r1, #6
 8001e96:	4897      	ldr	r0, [pc, #604]	; (80020f4 <vKey_Action+0x87c>)
 8001e98:	f002 fb39 	bl	800450e <HAL_GPIO_WritePin>
						WelderUnit.IndicatorPanel.LEDsState |= LED_DOWN; // Индикация что головка опущена
 8001e9c:	4b94      	ldr	r3, [pc, #592]	; (80020f0 <vKey_Action+0x878>)
 8001e9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b91      	ldr	r3, [pc, #580]	; (80020f0 <vKey_Action+0x878>)
 8001eaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						WelderUnit.IndicatorPanel.LEDsState &= ~LED_UP; // Индикация что головка опущена
 8001eae:	4b90      	ldr	r3, [pc, #576]	; (80020f0 <vKey_Action+0x878>)
 8001eb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eb4:	f023 0308 	bic.w	r3, r3, #8
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b8d      	ldr	r3, [pc, #564]	; (80020f0 <vKey_Action+0x878>)
 8001ebc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					}

					break;
 8001ec0:	e12a      	b.n	8002118 <vKey_Action+0x8a0>
				}

				case press_long_Down:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001ec2:	4b8a      	ldr	r3, [pc, #552]	; (80020ec <vKey_Action+0x874>)
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	f107 010e 	add.w	r1, r7, #14
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f005 f863 	bl	8006f98 <xQueueGenericSend>
//					if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
//					{
//						WelderUnit.Speed -= 20; // Дейсвия при длинном нажатии
//					}
					break;
 8001ed2:	e128      	b.n	8002126 <vKey_Action+0x8ae>
				}

				case press_short_Up:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001ed4:	4b85      	ldr	r3, [pc, #532]	; (80020ec <vKey_Action+0x874>)
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	f107 010e 	add.w	r1, r7, #14
 8001edc:	2300      	movs	r3, #0
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f005 f85a 	bl	8006f98 <xQueueGenericSend>
					WELDER_HEAD_UP // Поднять сварочную головку
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2106      	movs	r1, #6
 8001ee8:	4882      	ldr	r0, [pc, #520]	; (80020f4 <vKey_Action+0x87c>)
 8001eea:	f002 fb10 	bl	800450e <HAL_GPIO_WritePin>
					WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация что головка однята
 8001eee:	4b80      	ldr	r3, [pc, #512]	; (80020f0 <vKey_Action+0x878>)
 8001ef0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ef4:	f043 0308 	orr.w	r3, r3, #8
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b7d      	ldr	r3, [pc, #500]	; (80020f0 <vKey_Action+0x878>)
 8001efc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN; // Индикация что головка поднята
 8001f00:	4b7b      	ldr	r3, [pc, #492]	; (80020f0 <vKey_Action+0x878>)
 8001f02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f06:	f023 0304 	bic.w	r3, r3, #4
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b78      	ldr	r3, [pc, #480]	; (80020f0 <vKey_Action+0x878>)
 8001f0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					break;
 8001f12:	e108      	b.n	8002126 <vKey_Action+0x8ae>
				}

				case press_long_Up:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f14:	4b75      	ldr	r3, [pc, #468]	; (80020ec <vKey_Action+0x874>)
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	f107 010e 	add.w	r1, r7, #14
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f005 f83a 	bl	8006f98 <xQueueGenericSend>
					if (WelderUnit.Speed < SPEED_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8001f24:	4b72      	ldr	r3, [pc, #456]	; (80020f0 <vKey_Action+0x878>)
 8001f26:	88db      	ldrh	r3, [r3, #6]
 8001f28:	f240 32d2 	movw	r2, #978	; 0x3d2
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	f200 80f6 	bhi.w	800211e <vKey_Action+0x8a6>
					{
						WelderUnit.Speed += 20; // Дейсвия при длинном нажатии
 8001f32:	4b6f      	ldr	r3, [pc, #444]	; (80020f0 <vKey_Action+0x878>)
 8001f34:	88db      	ldrh	r3, [r3, #6]
 8001f36:	3314      	adds	r3, #20
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	4b6d      	ldr	r3, [pc, #436]	; (80020f0 <vKey_Action+0x878>)
 8001f3c:	80da      	strh	r2, [r3, #6]
					}
					break;
 8001f3e:	e0ee      	b.n	800211e <vKey_Action+0x8a6>



		case press_short_Parking:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f40:	4b6a      	ldr	r3, [pc, #424]	; (80020ec <vKey_Action+0x874>)
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	f107 010e 	add.w	r1, r7, #14
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f005 f824 	bl	8006f98 <xQueueGenericSend>

			WelderUnit.Mode = WELDER_MODE_CALIBRATION; //Задать режим работы аппарата - калибровка
 8001f50:	4b67      	ldr	r3, [pc, #412]	; (80020f0 <vKey_Action+0x878>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

			//WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отключении индикации режима АВТО
			WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING; // Отображение что выбран режим калибровки
 8001f58:	4b65      	ldr	r3, [pc, #404]	; (80020f0 <vKey_Action+0x878>)
 8001f5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <vKey_Action+0x878>)
 8001f66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



			break;
 8001f6a:	e0dc      	b.n	8002126 <vKey_Action+0x8ae>
		}

		case press_long_Parking:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f6c:	4b5f      	ldr	r3, [pc, #380]	; (80020ec <vKey_Action+0x874>)
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	f107 010e 	add.w	r1, r7, #14
 8001f74:	2300      	movs	r3, #0
 8001f76:	2200      	movs	r2, #0
 8001f78:	f005 f80e 	bl	8006f98 <xQueueGenericSend>
			WelderUnit.Xf -= 20; // Дейсвия при длинном нажатии
 8001f7c:	4b5c      	ldr	r3, [pc, #368]	; (80020f0 <vKey_Action+0x878>)
 8001f7e:	885b      	ldrh	r3, [r3, #2]
 8001f80:	3b14      	subs	r3, #20
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	4b5a      	ldr	r3, [pc, #360]	; (80020f0 <vKey_Action+0x878>)
 8001f86:	805a      	strh	r2, [r3, #2]

			break;
 8001f88:	e0cd      	b.n	8002126 <vKey_Action+0x8ae>
		}

		case press_short_Auto:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 );
 8001f8a:	4b58      	ldr	r3, [pc, #352]	; (80020ec <vKey_Action+0x874>)
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	f107 010e 	add.w	r1, r7, #14
 8001f92:	2300      	movs	r3, #0
 8001f94:	2200      	movs	r2, #0
 8001f96:	f004 ffff 	bl	8006f98 <xQueueGenericSend>


			if (WelderUnit.State & WELDER_STATE_CALIBRATED) // Если аппарат откалиброван, то разрешить включение режима АВТО
 8001f9a:	4b55      	ldr	r3, [pc, #340]	; (80020f0 <vKey_Action+0x878>)
 8001f9c:	7c1b      	ldrb	r3, [r3, #16]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80be 	beq.w	8002124 <vKey_Action+0x8ac>
			{
				if (WelderUnit.Mode != WELDER_MODE_AUTO) // Если уже не выбран режим АВТО, то включить его, иначе включить Ручной режим
 8001fa8:	4b51      	ldr	r3, [pc, #324]	; (80020f0 <vKey_Action+0x878>)
 8001faa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d00d      	beq.n	8001fce <vKey_Action+0x756>
				{
					WelderUnit.Mode = WELDER_MODE_AUTO;
 8001fb2:	4b4f      	ldr	r3, [pc, #316]	; (80020f0 <vKey_Action+0x878>)
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					WelderUnit.IndicatorPanel.LEDsState |= LED_AUTO; // Отображение что выбран режим калибровки
 8001fba:	4b4d      	ldr	r3, [pc, #308]	; (80020f0 <vKey_Action+0x878>)
 8001fbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	; (80020f0 <vKey_Action+0x878>)
 8001fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отображение что выбран режим калибровки
				}

			}

			break;
 8001fcc:	e0aa      	b.n	8002124 <vKey_Action+0x8ac>
					WelderUnit.Mode = WELDER_MODE_MANUAL;
 8001fce:	4b48      	ldr	r3, [pc, #288]	; (80020f0 <vKey_Action+0x878>)
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отображение что выбран режим калибровки
 8001fd6:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <vKey_Action+0x878>)
 8001fd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <vKey_Action+0x878>)
 8001fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			break;
 8001fe8:	e09c      	b.n	8002124 <vKey_Action+0x8ac>
		}

		case press_long_Auto:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001fea:	4b40      	ldr	r3, [pc, #256]	; (80020ec <vKey_Action+0x874>)
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	f107 010e 	add.w	r1, r7, #14
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f004 ffcf 	bl	8006f98 <xQueueGenericSend>
			WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <vKey_Action+0x878>)
 8001ffc:	885b      	ldrh	r3, [r3, #2]
 8001ffe:	3314      	adds	r3, #20
 8002000:	b29a      	uxth	r2, r3
 8002002:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <vKey_Action+0x878>)
 8002004:	805a      	strh	r2, [r3, #2]
			break;
 8002006:	e08e      	b.n	8002126 <vKey_Action+0x8ae>
		}

		case press_short_StartStop:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002008:	4b38      	ldr	r3, [pc, #224]	; (80020ec <vKey_Action+0x874>)
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	f107 010e 	add.w	r1, r7, #14
 8002010:	2300      	movs	r3, #0
 8002012:	2200      	movs	r2, #0
 8002014:	f004 ffc0 	bl	8006f98 <xQueueGenericSend>

			// Дейсвия при нажатии на кнопку СТАРТ/СТОП в зависимости от установленного режима работы аппарата
			switch(WelderUnit.Mode)
 8002018:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <vKey_Action+0x878>)
 800201a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800201e:	2b01      	cmp	r3, #1
 8002020:	d002      	beq.n	8002028 <vKey_Action+0x7b0>
 8002022:	2b03      	cmp	r3, #3
 8002024:	d009      	beq.n	800203a <vKey_Action+0x7c2>


//			Carriage_cmd = Cmd_CarriageGoTo;
//			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к

			break;
 8002026:	e07e      	b.n	8002126 <vKey_Action+0x8ae>
				xQueueSendToBack( qWelderCalibrated, &Cal, 0 ); // Начать калибровку
 8002028:	4b33      	ldr	r3, [pc, #204]	; (80020f8 <vKey_Action+0x880>)
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	f107 010d 	add.w	r1, r7, #13
 8002030:	2300      	movs	r3, #0
 8002032:	2200      	movs	r2, #0
 8002034:	f004 ffb0 	bl	8006f98 <xQueueGenericSend>
				break;
 8002038:	e00a      	b.n	8002050 <vKey_Action+0x7d8>
				Run = Welder_Run;
 800203a:	2303      	movs	r3, #3
 800203c:	733b      	strb	r3, [r7, #12]
				xQueueSendToBack(qWelderRun, &Run, 0 );
 800203e:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <vKey_Action+0x884>)
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	f107 010c 	add.w	r1, r7, #12
 8002046:	2300      	movs	r3, #0
 8002048:	2200      	movs	r2, #0
 800204a:	f004 ffa5 	bl	8006f98 <xQueueGenericSend>
				break;
 800204e:	bf00      	nop
			break;
 8002050:	e069      	b.n	8002126 <vKey_Action+0x8ae>
		}

		case press_long_StartStop:
		{
			WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 8002052:	4b27      	ldr	r3, [pc, #156]	; (80020f0 <vKey_Action+0x878>)
 8002054:	885b      	ldrh	r3, [r3, #2]
 8002056:	3314      	adds	r3, #20
 8002058:	b29a      	uxth	r2, r3
 800205a:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <vKey_Action+0x878>)
 800205c:	805a      	strh	r2, [r3, #2]
//			Key.StartStop_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
//			Key.StartStop_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
			break;
 800205e:	e062      	b.n	8002126 <vKey_Action+0x8ae>

		// *********************************************************Комбинации клавишь*********************************************************

		case press_short_Program_L_and_R:
		{
			beep_mode_send = beep_long;
 8002060:	2305      	movs	r3, #5
 8002062:	73bb      	strb	r3, [r7, #14]
			xQueueSendToBack( qBeepMode, &beep_mode_send , 0 ); // Звук нажат
 8002064:	4b21      	ldr	r3, [pc, #132]	; (80020ec <vKey_Action+0x874>)
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	f107 010e 	add.w	r1, r7, #14
 800206c:	2300      	movs	r3, #0
 800206e:	2200      	movs	r2, #0
 8002070:	f004 ff92 	bl	8006f98 <xQueueGenericSend>
			SaveProgramToFlash2();
 8002074:	f7ff f820 	bl	80010b8 <SaveProgramToFlash2>
			break;
 8002078:	e055      	b.n	8002126 <vKey_Action+0x8ae>
			break;
 800207a:	bf00      	nop
 800207c:	e406      	b.n	800188c <vKey_Action+0x14>
			break;
 800207e:	bf00      	nop
 8002080:	e404      	b.n	800188c <vKey_Action+0x14>
			break;
 8002082:	bf00      	nop
 8002084:	e402      	b.n	800188c <vKey_Action+0x14>
			break;
 8002086:	bf00      	nop
 8002088:	e400      	b.n	800188c <vKey_Action+0x14>
			break;
 800208a:	bf00      	nop
 800208c:	f7ff bbfe 	b.w	800188c <vKey_Action+0x14>
			break;
 8002090:	bf00      	nop
 8002092:	f7ff bbfb 	b.w	800188c <vKey_Action+0x14>
			break;
 8002096:	bf00      	nop
 8002098:	f7ff bbf8 	b.w	800188c <vKey_Action+0x14>
			break;
 800209c:	bf00      	nop
 800209e:	f7ff bbf5 	b.w	800188c <vKey_Action+0x14>
			break;
 80020a2:	bf00      	nop
 80020a4:	f7ff bbf2 	b.w	800188c <vKey_Action+0x14>
			break;
 80020a8:	bf00      	nop
 80020aa:	f7ff bbef 	b.w	800188c <vKey_Action+0x14>
			break;
 80020ae:	bf00      	nop
 80020b0:	f7ff bbec 	b.w	800188c <vKey_Action+0x14>
			break;
 80020b4:	bf00      	nop
 80020b6:	f7ff bbe9 	b.w	800188c <vKey_Action+0x14>
			break;
 80020ba:	bf00      	nop
 80020bc:	f7ff bbe6 	b.w	800188c <vKey_Action+0x14>
			break;
 80020c0:	bf00      	nop
 80020c2:	f7ff bbe3 	b.w	800188c <vKey_Action+0x14>
			break;
 80020c6:	bf00      	nop
 80020c8:	f7ff bbe0 	b.w	800188c <vKey_Action+0x14>
			break;
 80020cc:	bf00      	nop
 80020ce:	f7ff bbdd 	b.w	800188c <vKey_Action+0x14>
			break;
 80020d2:	bf00      	nop
 80020d4:	f7ff bbda 	b.w	800188c <vKey_Action+0x14>
			break;
 80020d8:	bf00      	nop
 80020da:	f7ff bbd7 	b.w	800188c <vKey_Action+0x14>
			break;
 80020de:	bf00      	nop
 80020e0:	f7ff bbd4 	b.w	800188c <vKey_Action+0x14>
			break;
 80020e4:	bf00      	nop
 80020e6:	f7ff bbd1 	b.w	800188c <vKey_Action+0x14>
 80020ea:	bf00      	nop
 80020ec:	20003d38 	.word	0x20003d38
 80020f0:	20003d3c 	.word	0x20003d3c
 80020f4:	40011000 	.word	0x40011000
 80020f8:	2000458c 	.word	0x2000458c
 80020fc:	20004588 	.word	0x20004588
			break;
 8002100:	bf00      	nop
 8002102:	f7ff bbc3 	b.w	800188c <vKey_Action+0x14>
			break;
 8002106:	bf00      	nop
 8002108:	f7ff bbc0 	b.w	800188c <vKey_Action+0x14>
			break;
 800210c:	bf00      	nop
 800210e:	f7ff bbbd 	b.w	800188c <vKey_Action+0x14>
			break;
 8002112:	bf00      	nop
 8002114:	f7ff bbba 	b.w	800188c <vKey_Action+0x14>
					break;
 8002118:	bf00      	nop
 800211a:	f7ff bbb7 	b.w	800188c <vKey_Action+0x14>
					break;
 800211e:	bf00      	nop
 8002120:	f7ff bbb4 	b.w	800188c <vKey_Action+0x14>
			break;
 8002124:	bf00      	nop
		xQueueReceive(qKeyPress, &KeyPressed, portMAX_DELAY ); // Ждать нажатия кнопки
 8002126:	f7ff bbb1 	b.w	800188c <vKey_Action+0x14>
 800212a:	bf00      	nop

0800212c <vWelder_Run>:
	vTaskDelete(NULL);

}

void vWelder_Run(void *pvParameters)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

	uint8_t beep;

	for(;;)
	{
		xQueueReceive(qWelderRun, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 8002134:	4b64      	ldr	r3, [pc, #400]	; (80022c8 <vWelder_Run+0x19c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f107 010e 	add.w	r1, r7, #14
 800213c:	f04f 32ff 	mov.w	r2, #4294967295
 8002140:	4618      	mov	r0, r3
 8002142:	f005 f881 	bl	8007248 <xQueueReceive>

		if (lReceivedValue == Welder_Run && ((WelderUnit.State & 0x02) == 0x02) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) ) // Если пришла команда на начло варки и каретка откалибрована и задняя дверца закрыта
 8002146:	7bbb      	ldrb	r3, [r7, #14]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d1f3      	bne.n	8002134 <vWelder_Run+0x8>
 800214c:	4b5f      	ldr	r3, [pc, #380]	; (80022cc <vWelder_Run+0x1a0>)
 800214e:	7c1b      	ldrb	r3, [r3, #16]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ed      	beq.n	8002134 <vWelder_Run+0x8>
 8002158:	4b5c      	ldr	r3, [pc, #368]	; (80022cc <vWelder_Run+0x1a0>)
 800215a:	7c1b      	ldrb	r3, [r3, #16]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0e7      	beq.n	8002134 <vWelder_Run+0x8>
		{
			beep = beep_long;
 8002164:	2305      	movs	r3, #5
 8002166:	737b      	strb	r3, [r7, #13]
			xQueueSendToBack( qBeepMode, &beep, 0 ); // Звук нажатия
 8002168:	4b59      	ldr	r3, [pc, #356]	; (80022d0 <vWelder_Run+0x1a4>)
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	f107 010d 	add.w	r1, r7, #13
 8002170:	2300      	movs	r3, #0
 8002172:	2200      	movs	r2, #0
 8002174:	f004 ff10 	bl	8006f98 <xQueueGenericSend>

		if (WelderUnit.Position != WelderUnit.Xs) // Если текущая позиция каретки не равна стартовой позиции, то занять её
 8002178:	4b54      	ldr	r3, [pc, #336]	; (80022cc <vWelder_Run+0x1a0>)
 800217a:	889a      	ldrh	r2, [r3, #4]
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <vWelder_Run+0x1a0>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d02e      	beq.n	80021e2 <vWelder_Run+0xb6>
		{
			Carriage_cmd = Cmd_CarriageGoTo;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
			WelderUnit.GoTo = WelderUnit.Xs;
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <vWelder_Run+0x1a0>)
 800218a:	881a      	ldrh	r2, [r3, #0]
 800218c:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <vWelder_Run+0x1a0>)
 800218e:	811a      	strh	r2, [r3, #8]
			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идти к
 8002190:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <vWelder_Run+0x1a8>)
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	f107 010f 	add.w	r1, r7, #15
 8002198:	2300      	movs	r3, #0
 800219a:	2200      	movs	r2, #0
 800219c:	f004 fefc 	bl	8006f98 <xQueueGenericSend>

			xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Юез этого не работает. В очереди откуда то берутся данные
 80021a0:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <vWelder_Run+0x1ac>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f107 010e 	add.w	r1, r7, #14
 80021a8:	2200      	movs	r2, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f005 f84c 	bl	8007248 <xQueueReceive>
			xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Юез этого не работает. В очереди откуда то берутся данные
 80021b0:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <vWelder_Run+0x1ac>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f107 010e 	add.w	r1, r7, #14
 80021b8:	2200      	movs	r2, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f005 f844 	bl	8007248 <xQueueReceive>
			xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Юез этого не работает. В очереди откуда то берутся данные
 80021c0:	4b45      	ldr	r3, [pc, #276]	; (80022d8 <vWelder_Run+0x1ac>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f107 010e 	add.w	r1, r7, #14
 80021c8:	2200      	movs	r2, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f005 f83c 	bl	8007248 <xQueueReceive>
			xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 80021d0:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <vWelder_Run+0x1ac>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f107 010e 	add.w	r1, r7, #14
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	4618      	mov	r0, r3
 80021de:	f005 f833 	bl	8007248 <xQueueReceive>
		}

		if (lReceivedValue == Carriage_Done) // Если каретка на заданной позиции
 80021e2:	7bbb      	ldrb	r3, [r7, #14]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d1a5      	bne.n	8002134 <vWelder_Run+0x8>
		{

		WELDER_HEAD_DOWN // Опустить головку
 80021e8:	2200      	movs	r2, #0
 80021ea:	2106      	movs	r1, #6
 80021ec:	483b      	ldr	r0, [pc, #236]	; (80022dc <vWelder_Run+0x1b0>)
 80021ee:	f002 f98e 	bl	800450e <HAL_GPIO_WritePin>
		vTaskDelay(WelderUnit.Delay_s * 100 / portTICK_RATE_MS);
 80021f2:	4b36      	ldr	r3, [pc, #216]	; (80022cc <vWelder_Run+0x1a0>)
 80021f4:	7a9b      	ldrb	r3, [r3, #10]
 80021f6:	461a      	mov	r2, r3
 80021f8:	2364      	movs	r3, #100	; 0x64
 80021fa:	fb03 f302 	mul.w	r3, r3, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f005 fd10 	bl	8007c24 <vTaskDelay>
		SYNC_ARC_ON
 8002204:	2201      	movs	r2, #1
 8002206:	f44f 7180 	mov.w	r1, #256	; 0x100
 800220a:	4835      	ldr	r0, [pc, #212]	; (80022e0 <vWelder_Run+0x1b4>)
 800220c:	f002 f97f 	bl	800450e <HAL_GPIO_WritePin>

		vTaskDelay(WelderUnit.Delay_s * 100 / portTICK_RATE_MS);
 8002210:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <vWelder_Run+0x1a0>)
 8002212:	7a9b      	ldrb	r3, [r3, #10]
 8002214:	461a      	mov	r2, r3
 8002216:	2364      	movs	r3, #100	; 0x64
 8002218:	fb03 f302 	mul.w	r3, r3, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f005 fd01 	bl	8007c24 <vTaskDelay>

		WelderUnit.GoTo = WelderUnit.Xf;
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <vWelder_Run+0x1a0>)
 8002224:	885a      	ldrh	r2, [r3, #2]
 8002226:	4b29      	ldr	r3, [pc, #164]	; (80022cc <vWelder_Run+0x1a0>)
 8002228:	811a      	strh	r2, [r3, #8]

		Carriage_cmd = Cmd_CarriageGoTo;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]

		xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <vWelder_Run+0x1a8>)
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	f107 010f 	add.w	r1, r7, #15
 8002236:	2300      	movs	r3, #0
 8002238:	2200      	movs	r2, #0
 800223a:	f004 fead 	bl	8006f98 <xQueueGenericSend>

		xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <vWelder_Run+0x1ac>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f107 010e 	add.w	r1, r7, #14
 8002246:	f04f 32ff 	mov.w	r2, #4294967295
 800224a:	4618      	mov	r0, r3
 800224c:	f004 fffc 	bl	8007248 <xQueueReceive>

		vTaskDelay(WelderUnit.Delay_f * 100 / portTICK_RATE_MS);
 8002250:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <vWelder_Run+0x1a0>)
 8002252:	7adb      	ldrb	r3, [r3, #11]
 8002254:	461a      	mov	r2, r3
 8002256:	2364      	movs	r3, #100	; 0x64
 8002258:	fb03 f302 	mul.w	r3, r3, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f005 fce1 	bl	8007c24 <vTaskDelay>

		SYNC_ARC_OFF
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002268:	481d      	ldr	r0, [pc, #116]	; (80022e0 <vWelder_Run+0x1b4>)
 800226a:	f002 f950 	bl	800450e <HAL_GPIO_WritePin>

		beep = beep_3short;
 800226e:	2304      	movs	r3, #4
 8002270:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack( qBeepMode, &beep, 0 ); // Звук
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <vWelder_Run+0x1a4>)
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	f107 010d 	add.w	r1, r7, #13
 800227a:	2300      	movs	r3, #0
 800227c:	2200      	movs	r2, #0
 800227e:	f004 fe8b 	bl	8006f98 <xQueueGenericSend>

		// Откат каретки

		if (WelderUnit.Position > KICKBACK)
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <vWelder_Run+0x1a0>)
 8002284:	889b      	ldrh	r3, [r3, #4]
 8002286:	2bc8      	cmp	r3, #200	; 0xc8
 8002288:	d906      	bls.n	8002298 <vWelder_Run+0x16c>
		{
			WelderUnit.GoTo = WelderUnit.Position -	KICKBACK;
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <vWelder_Run+0x1a0>)
 800228c:	889b      	ldrh	r3, [r3, #4]
 800228e:	3bc8      	subs	r3, #200	; 0xc8
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <vWelder_Run+0x1a0>)
 8002294:	811a      	strh	r2, [r3, #8]
 8002296:	e002      	b.n	800229e <vWelder_Run+0x172>
		}
		else
		{
			WelderUnit.GoTo = 0;
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <vWelder_Run+0x1a0>)
 800229a:	2200      	movs	r2, #0
 800229c:	811a      	strh	r2, [r3, #8]
		}

		Carriage_cmd = Cmd_CarriageGoTo;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
		xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <vWelder_Run+0x1a8>)
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	f107 010f 	add.w	r1, r7, #15
 80022aa:	2300      	movs	r3, #0
 80022ac:	2200      	movs	r2, #0
 80022ae:	f004 fe73 	bl	8006f98 <xQueueGenericSend>
		xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <vWelder_Run+0x1ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f107 010e 	add.w	r1, r7, #14
 80022ba:	f04f 32ff 	mov.w	r2, #4294967295
 80022be:	4618      	mov	r0, r3
 80022c0:	f004 ffc2 	bl	8007248 <xQueueReceive>
		xQueueReceive(qWelderRun, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 80022c4:	e736      	b.n	8002134 <vWelder_Run+0x8>
 80022c6:	bf00      	nop
 80022c8:	20004588 	.word	0x20004588
 80022cc:	20003d3c 	.word	0x20003d3c
 80022d0:	20003d38 	.word	0x20003d38
 80022d4:	20004594 	.word	0x20004594
 80022d8:	20004580 	.word	0x20004580
 80022dc:	40011000 	.word	0x40011000
 80022e0:	40010800 	.word	0x40010800

080022e4 <vCarriage_Calibration>:
}



void vCarriage_Calibration(void *pvParameters)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	uint8_t lReceivedValue;


	for(;;)
	{
		xQueueReceive(qWelderCalibrated, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 80022ec:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <vCarriage_Calibration+0xcc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f107 010f 	add.w	r1, r7, #15
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 ffa5 	bl	8007248 <xQueueReceive>



		if (lReceivedValue == Calibrated)
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	2b04      	cmp	r3, #4
 8002302:	d1f3      	bne.n	80022ec <vCarriage_Calibration+0x8>
		{
			WELDER_HEAD_UP // Поднять головку
 8002304:	2201      	movs	r2, #1
 8002306:	2106      	movs	r1, #6
 8002308:	482a      	ldr	r0, [pc, #168]	; (80023b4 <vCarriage_Calibration+0xd0>)
 800230a:	f002 f900 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 800230e:	2064      	movs	r0, #100	; 0x64
 8002310:	f005 fc88 	bl	8007c24 <vTaskDelay>

			Carriage_Move(400, 0, 1); // Начать перемещение каретки в сторону концевика
 8002314:	2201      	movs	r2, #1
 8002316:	2100      	movs	r1, #0
 8002318:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800231c:	f7fe fdb0 	bl	8000e80 <Carriage_Move>

			// Когда концевик замкнулся выдается семофор, что коретка дошла до самого начала

			// По какой-то причине при первой попытке взять 2-й семафор он берется (даже если не выдан). Потому семафор берется дважды
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY ); // Попытка взять семафор.
 8002320:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <vCarriage_Calibration+0xd4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	4618      	mov	r0, r3
 800232a:	f005 f82f 	bl	800738c <xQueueSemaphoreTake>
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <vCarriage_Calibration+0xd4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f04f 31ff 	mov.w	r1, #4294967295
 8002336:	4618      	mov	r0, r3
 8002338:	f005 f828 	bl	800738c <xQueueSemaphoreTake>

			Carriage_Move(0, 0, 1); // Стоп
 800233c:	2201      	movs	r2, #1
 800233e:	2100      	movs	r1, #0
 8002340:	2000      	movs	r0, #0
 8002342:	f7fe fd9d 	bl	8000e80 <Carriage_Move>

			Carriage_Move(200, 1, 1); // Отъехать немного назад
 8002346:	2201      	movs	r2, #1
 8002348:	2101      	movs	r1, #1
 800234a:	20c8      	movs	r0, #200	; 0xc8
 800234c:	f7fe fd98 	bl	8000e80 <Carriage_Move>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8002350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002354:	f005 fc66 	bl	8007c24 <vTaskDelay>

			Carriage_Move(0, 0, 1); // Стоп
 8002358:	2201      	movs	r2, #1
 800235a:	2100      	movs	r1, #0
 800235c:	2000      	movs	r0, #0
 800235e:	f7fe fd8f 	bl	8000e80 <Carriage_Move>

			vTaskDelay(100/ portTICK_RATE_MS);
 8002362:	2064      	movs	r0, #100	; 0x64
 8002364:	f005 fc5e 	bl	8007c24 <vTaskDelay>

			Carriage_Move(24, 0, 1); // Начать перемещение каретки в сторону концевика
 8002368:	2201      	movs	r2, #1
 800236a:	2100      	movs	r1, #0
 800236c:	2018      	movs	r0, #24
 800236e:	f7fe fd87 	bl	8000e80 <Carriage_Move>

			// По какой-то причине при первой попытке взять 2-й семафор он берется (даже если не выдан). Потому семафор берется дважды
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY ); // Попытка взять семафор по прерыванию срабатывания концевика
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <vCarriage_Calibration+0xd4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f04f 31ff 	mov.w	r1, #4294967295
 800237a:	4618      	mov	r0, r3
 800237c:	f005 f806 	bl	800738c <xQueueSemaphoreTake>
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <vCarriage_Calibration+0xd4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	4618      	mov	r0, r3
 800238a:	f004 ffff 	bl	800738c <xQueueSemaphoreTake>

			Carriage_Move(0, 0, 1); // Стоп
 800238e:	2201      	movs	r2, #1
 8002390:	2100      	movs	r1, #0
 8002392:	2000      	movs	r0, #0
 8002394:	f7fe fd74 	bl	8000e80 <Carriage_Move>

			WelderUnit.State |= 1<<1; //1 бит - Откалибровано
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <vCarriage_Calibration+0xd8>)
 800239a:	7c1b      	ldrb	r3, [r3, #16]
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <vCarriage_Calibration+0xd8>)
 80023a4:	741a      	strb	r2, [r3, #16]

			WelderUnit.Position = 0; // Позиция каретки
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <vCarriage_Calibration+0xd8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	809a      	strh	r2, [r3, #4]
		xQueueReceive(qWelderCalibrated, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 80023ac:	e79e      	b.n	80022ec <vCarriage_Calibration+0x8>
 80023ae:	bf00      	nop
 80023b0:	2000458c 	.word	0x2000458c
 80023b4:	40011000 	.word	0x40011000
 80023b8:	200045c4 	.word	0x200045c4
 80023bc:	20003d3c 	.word	0x20003d3c

080023c0 <vCarriage_GoTo>:
	vTaskDelete(NULL);
}


void vCarriage_GoTo(void *pvParameters)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		//Попытка получить команду для передвижения каретки в нужную позицию.
		// Данные из очереди при этом не удаляются
		xQueuePeek(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 80023c8:	4b5d      	ldr	r3, [pc, #372]	; (8002540 <vCarriage_GoTo+0x180>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f107 010b 	add.w	r1, r7, #11
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	4618      	mov	r0, r3
 80023d6:	f005 f8a1 	bl	800751c <xQueuePeek>

		if (lReceivedValue == Cmd_CarriageGoTo)
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d1f3      	bne.n	80023c8 <vCarriage_GoTo+0x8>
		{

		WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / (STEPS_PER_ROTATE * MICRO_STEP_DEV); // Вычисление текущей позиции каретки, мм
 80023e0:	4b58      	ldr	r3, [pc, #352]	; (8002544 <vCarriage_GoTo+0x184>)
 80023e2:	89db      	ldrh	r3, [r3, #14]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f870 	bl	80004d4 <__aeabi_i2d>
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	4b53      	ldr	r3, [pc, #332]	; (8002548 <vCarriage_GoTo+0x188>)
 80023fa:	f7fe f9ff 	bl	80007fc <__aeabi_ddiv>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f7fe fae1 	bl	80009cc <__aeabi_d2uiz>
 800240a:	4603      	mov	r3, r0
 800240c:	b29a      	uxth	r2, r3
 800240e:	4b4d      	ldr	r3, [pc, #308]	; (8002544 <vCarriage_GoTo+0x184>)
 8002410:	809a      	strh	r2, [r3, #4]

		dX = WelderUnit.GoTo - WelderUnit.Position; // Определение сколько и в какую сторону нужно сдвинуть каретку
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <vCarriage_GoTo+0x184>)
 8002414:	891b      	ldrh	r3, [r3, #8]
 8002416:	461a      	mov	r2, r3
 8002418:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <vCarriage_GoTo+0x184>)
 800241a:	889b      	ldrh	r3, [r3, #4]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	60fb      	str	r3, [r7, #12]

		// Если каретка на нужном месте, то остановить движение каретки, очищаем очередь и снова взврат к xQueuePeek, для ожидания след команды
		if (dX == 0)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11e      	bne.n	8002464 <vCarriage_GoTo+0xa4>
		{
			Carriage_Move(0, 1, 1); // стоп
 8002426:	2201      	movs	r2, #1
 8002428:	2101      	movs	r1, #1
 800242a:	2000      	movs	r0, #0
 800242c:	f7fe fd28 	bl	8000e80 <Carriage_Move>
			WelderUnit.State &= ~0x01;
 8002430:	4b44      	ldr	r3, [pc, #272]	; (8002544 <vCarriage_GoTo+0x184>)
 8002432:	7c1b      	ldrb	r3, [r3, #16]
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4b42      	ldr	r3, [pc, #264]	; (8002544 <vCarriage_GoTo+0x184>)
 800243c:	741a      	strb	r2, [r3, #16]
			SendVal = Carriage_Done;
 800243e:	2302      	movs	r3, #2
 8002440:	72bb      	strb	r3, [r7, #10]
			xQueueSendToBack( qGoToResponse, &SendVal, 0 );
 8002442:	4b42      	ldr	r3, [pc, #264]	; (800254c <vCarriage_GoTo+0x18c>)
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	f107 010a 	add.w	r1, r7, #10
 800244a:	2300      	movs	r3, #0
 800244c:	2200      	movs	r2, #0
 800244e:	f004 fda3 	bl	8006f98 <xQueueGenericSend>

			//xQueueSendToBack( qDebug, &SendVal, 0 );

			xQueueReceive(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 8002452:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <vCarriage_GoTo+0x180>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f107 010b 	add.w	r1, r7, #11
 800245a:	f04f 32ff 	mov.w	r2, #4294967295
 800245e:	4618      	mov	r0, r3
 8002460:	f004 fef2 	bl	8007248 <xQueueReceive>

		}

		if (dX > 0) // Если двигать в сторону концевика
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	dd20      	ble.n	80024ac <vCarriage_GoTo+0xec>
		{

			if (WelderUnit.Position <= WelderUnit.GoTo && !(WelderUnit.State & 0x01)) // Если позиция не достигнута и каретка находится не в движении, то начать перемещение
 800246a:	4b36      	ldr	r3, [pc, #216]	; (8002544 <vCarriage_GoTo+0x184>)
 800246c:	889a      	ldrh	r2, [r3, #4]
 800246e:	4b35      	ldr	r3, [pc, #212]	; (8002544 <vCarriage_GoTo+0x184>)
 8002470:	891b      	ldrh	r3, [r3, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	d81a      	bhi.n	80024ac <vCarriage_GoTo+0xec>
 8002476:	4b33      	ldr	r3, [pc, #204]	; (8002544 <vCarriage_GoTo+0x184>)
 8002478:	7c1b      	ldrb	r3, [r3, #16]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d114      	bne.n	80024ac <vCarriage_GoTo+0xec>
			{
				Carriage_Move(WelderUnit.Speed, 1, 1); // Начать перемещение
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <vCarriage_GoTo+0x184>)
 8002484:	88db      	ldrh	r3, [r3, #6]
 8002486:	2201      	movs	r2, #1
 8002488:	2101      	movs	r1, #1
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fcf8 	bl	8000e80 <Carriage_Move>
				WelderUnit.State |= 0x01; // Статус - каретка в движении
 8002490:	4b2c      	ldr	r3, [pc, #176]	; (8002544 <vCarriage_GoTo+0x184>)
 8002492:	7c1b      	ldrb	r3, [r3, #16]
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <vCarriage_GoTo+0x184>)
 800249c:	741a      	strb	r2, [r3, #16]
				WelderUnit.State &= ~0x04; // Статус картека движется на встречу концевику
 800249e:	4b29      	ldr	r3, [pc, #164]	; (8002544 <vCarriage_GoTo+0x184>)
 80024a0:	7c1b      	ldrb	r3, [r3, #16]
 80024a2:	f023 0304 	bic.w	r3, r3, #4
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b26      	ldr	r3, [pc, #152]	; (8002544 <vCarriage_GoTo+0x184>)
 80024aa:	741a      	strb	r2, [r3, #16]
			}
		}

		if (dX < 0) // Если нужно двигать от концевика
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	da20      	bge.n	80024f4 <vCarriage_GoTo+0x134>
		{
			if (WelderUnit.Position >= WelderUnit.GoTo && !(WelderUnit.State & 0x01)) // Если позиция не достигнута и каретка находится не в движении, то начать перемещение
 80024b2:	4b24      	ldr	r3, [pc, #144]	; (8002544 <vCarriage_GoTo+0x184>)
 80024b4:	889a      	ldrh	r2, [r3, #4]
 80024b6:	4b23      	ldr	r3, [pc, #140]	; (8002544 <vCarriage_GoTo+0x184>)
 80024b8:	891b      	ldrh	r3, [r3, #8]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d31a      	bcc.n	80024f4 <vCarriage_GoTo+0x134>
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <vCarriage_GoTo+0x184>)
 80024c0:	7c1b      	ldrb	r3, [r3, #16]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d114      	bne.n	80024f4 <vCarriage_GoTo+0x134>
			{
				Carriage_Move(WelderUnit.Speed, 0, 1); // Начать перемещение
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <vCarriage_GoTo+0x184>)
 80024cc:	88db      	ldrh	r3, [r3, #6]
 80024ce:	2201      	movs	r2, #1
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fcd4 	bl	8000e80 <Carriage_Move>
				WelderUnit.State |= 0x01; // Статус - каретка в движении
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <vCarriage_GoTo+0x184>)
 80024da:	7c1b      	ldrb	r3, [r3, #16]
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <vCarriage_GoTo+0x184>)
 80024e4:	741a      	strb	r2, [r3, #16]
				WelderUnit.State |= 0x04; // Статус картека движется от концевика
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <vCarriage_GoTo+0x184>)
 80024e8:	7c1b      	ldrb	r3, [r3, #16]
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <vCarriage_GoTo+0x184>)
 80024f2:	741a      	strb	r2, [r3, #16]
			}
		}

		if (xSemaphoreTake(xSemaphore_StepCount, (500 / portTICK_RATE_MS)) == pdTRUE) // Если через 100 мС семафор так и не получен, то считать что двигатель осановлен
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <vCarriage_GoTo+0x190>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80024fc:	4618      	mov	r0, r3
 80024fe:	f004 ff45 	bl	800738c <xQueueSemaphoreTake>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	f47f af5f 	bne.w	80023c8 <vCarriage_GoTo+0x8>
		//xSemaphoreTake(xSemaphore_StepCount, portMAX_DELAY );
		{
			if (!(WelderUnit.State & 0x04)) // Если каретка движется на встречу концевику, то инкрментирование Steps на каждый шаг ШД
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <vCarriage_GoTo+0x184>)
 800250c:	7c1b      	ldrb	r3, [r3, #16]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <vCarriage_GoTo+0x162>
				{
					WelderUnit.Steps++;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <vCarriage_GoTo+0x184>)
 8002518:	89db      	ldrh	r3, [r3, #14]
 800251a:	3301      	adds	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <vCarriage_GoTo+0x184>)
 8002520:	81da      	strh	r2, [r3, #14]
				}

				if (WelderUnit.State & 0x04) // Если каретка движется от концевика, то декрементирование Steps на каждый шаг ШД
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <vCarriage_GoTo+0x184>)
 8002524:	7c1b      	ldrb	r3, [r3, #16]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	f43f af4c 	beq.w	80023c8 <vCarriage_GoTo+0x8>
				{
						WelderUnit.Steps--;
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <vCarriage_GoTo+0x184>)
 8002532:	89db      	ldrh	r3, [r3, #14]
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b02      	ldr	r3, [pc, #8]	; (8002544 <vCarriage_GoTo+0x184>)
 800253a:	81da      	strh	r2, [r3, #14]
		xQueuePeek(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 800253c:	e744      	b.n	80023c8 <vCarriage_GoTo+0x8>
 800253e:	bf00      	nop
 8002540:	20004594 	.word	0x20004594
 8002544:	20003d3c 	.word	0x20003d3c
 8002548:	40890000 	.word	0x40890000
 800254c:	20004580 	.word	0x20004580
 8002550:	20003d60 	.word	0x20003d60

08002554 <vKeyScan>:
	}
	vTaskDelete(NULL);
}

void vKeyScan(void *pvParameters)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]


	uint8_t nKeyPressed; // Передача команды о том какая кнопка или комбинация кнопок нажаты
	//portBASE_TYPE xStatus;

	vTaskDelay(100 / portTICK_RATE_MS);
 800255c:	2064      	movs	r0, #100	; 0x64
 800255e:	f005 fb61 	bl	8007c24 <vTaskDelay>

	for(;;)
	{
		PCB_KeyScan();
 8002562:	f7fe fcd5 	bl	8000f10 <PCB_KeyScan>
		PCB_InputsScan();
 8002566:	f7fe fce9 	bl	8000f3c <PCB_InputsScan>

		if (WelderUnit.IndicatorPanel.KeyState[0] == 128) // ВЛЕВО: [0], "-" - 128, "+" - 64, , STLED №5;
 800256a:	4ba9      	ldr	r3, [pc, #676]	; (8002810 <vKeyScan+0x2bc>)
 800256c:	7f5b      	ldrb	r3, [r3, #29]
 800256e:	2b80      	cmp	r3, #128	; 0x80
 8002570:	d12f      	bne.n	80025d2 <vKeyScan+0x7e>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xs_ShortPress_L > CNT_KEY_SHORT && Key.Xs_ShortPress_L != CNT_KEY_SHORT + 2)
 8002572:	4ba8      	ldr	r3, [pc, #672]	; (8002814 <vKeyScan+0x2c0>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b04      	cmp	r3, #4
 8002578:	d906      	bls.n	8002588 <vKeyScan+0x34>
 800257a:	4ba6      	ldr	r3, [pc, #664]	; (8002814 <vKeyScan+0x2c0>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b06      	cmp	r3, #6
 8002580:	d002      	beq.n	8002588 <vKeyScan+0x34>
			{
//				nKeyPressed = press_short_Xs_L;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Xs_ShortPress_L = CNT_KEY_SHORT + 3; // Для ожидания отпускания клавиши
 8002582:	4ba4      	ldr	r3, [pc, #656]	; (8002814 <vKeyScan+0x2c0>)
 8002584:	2207      	movs	r2, #7
 8002586:	701a      	strb	r2, [r3, #0]
			}

			if (Key.Xs_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002588:	4ba2      	ldr	r3, [pc, #648]	; (8002814 <vKeyScan+0x2c0>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b06      	cmp	r3, #6
 800258e:	d005      	beq.n	800259c <vKeyScan+0x48>
			{
				Key.Xs_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002590:	4ba0      	ldr	r3, [pc, #640]	; (8002814 <vKeyScan+0x2c0>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	b2da      	uxtb	r2, r3
 8002598:	4b9e      	ldr	r3, [pc, #632]	; (8002814 <vKeyScan+0x2c0>)
 800259a:	701a      	strb	r2, [r3, #0]
			}


			Key.Xs_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 800259c:	4b9d      	ldr	r3, [pc, #628]	; (8002814 <vKeyScan+0x2c0>)
 800259e:	789b      	ldrb	r3, [r3, #2]
 80025a0:	3301      	adds	r3, #1
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b9b      	ldr	r3, [pc, #620]	; (8002814 <vKeyScan+0x2c0>)
 80025a6:	709a      	strb	r2, [r3, #2]
			if (Key.Xs_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80025a8:	4b9a      	ldr	r3, [pc, #616]	; (8002814 <vKeyScan+0x2c0>)
 80025aa:	789b      	ldrb	r3, [r3, #2]
 80025ac:	2b32      	cmp	r3, #50	; 0x32
 80025ae:	d924      	bls.n	80025fa <vKeyScan+0xa6>
			{
				nKeyPressed = press_long_Xs_L;
 80025b0:	2302      	movs	r3, #2
 80025b2:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80025b4:	4b98      	ldr	r3, [pc, #608]	; (8002818 <vKeyScan+0x2c4>)
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	f107 010f 	add.w	r1, r7, #15
 80025bc:	2300      	movs	r3, #0
 80025be:	2200      	movs	r2, #0
 80025c0:	f004 fcea 	bl	8006f98 <xQueueGenericSend>


				Key.Xs_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80025c4:	4b93      	ldr	r3, [pc, #588]	; (8002814 <vKeyScan+0x2c0>)
 80025c6:	2206      	movs	r2, #6
 80025c8:	701a      	strb	r2, [r3, #0]
				Key.Xs_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80025ca:	4b92      	ldr	r3, [pc, #584]	; (8002814 <vKeyScan+0x2c0>)
 80025cc:	2225      	movs	r2, #37	; 0x25
 80025ce:	709a      	strb	r2, [r3, #2]
 80025d0:	e013      	b.n	80025fa <vKeyScan+0xa6>
		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{


			if (Key.Xs_ShortPress_L >= CNT_KEY_SHORT + 3)
 80025d2:	4b90      	ldr	r3, [pc, #576]	; (8002814 <vKeyScan+0x2c0>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d909      	bls.n	80025ee <vKeyScan+0x9a>
			{
				nKeyPressed = press_short_Xs_L;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80025de:	4b8e      	ldr	r3, [pc, #568]	; (8002818 <vKeyScan+0x2c4>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	f107 010f 	add.w	r1, r7, #15
 80025e6:	2300      	movs	r3, #0
 80025e8:	2200      	movs	r2, #0
 80025ea:	f004 fcd5 	bl	8006f98 <xQueueGenericSend>
			}

			Key.Xs_ShortPress_L = 0;
 80025ee:	4b89      	ldr	r3, [pc, #548]	; (8002814 <vKeyScan+0x2c0>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
			Key.Xs_LongPress_L = 0;
 80025f4:	4b87      	ldr	r3, [pc, #540]	; (8002814 <vKeyScan+0x2c0>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	709a      	strb	r2, [r3, #2]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 64) // Если есть факт нажатия кнопки
 80025fa:	4b85      	ldr	r3, [pc, #532]	; (8002810 <vKeyScan+0x2bc>)
 80025fc:	7f5b      	ldrb	r3, [r3, #29]
 80025fe:	2b40      	cmp	r3, #64	; 0x40
 8002600:	d139      	bne.n	8002676 <vKeyScan+0x122>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xs_ShortPress_R > CNT_KEY_SHORT && Key.Xs_ShortPress_R != CNT_KEY_SHORT + 2)
 8002602:	4b84      	ldr	r3, [pc, #528]	; (8002814 <vKeyScan+0x2c0>)
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	2b04      	cmp	r3, #4
 8002608:	d910      	bls.n	800262c <vKeyScan+0xd8>
 800260a:	4b82      	ldr	r3, [pc, #520]	; (8002814 <vKeyScan+0x2c0>)
 800260c:	785b      	ldrb	r3, [r3, #1]
 800260e:	2b06      	cmp	r3, #6
 8002610:	d00c      	beq.n	800262c <vKeyScan+0xd8>
			{

				nKeyPressed = press_short_Xs_R;
 8002612:	2303      	movs	r3, #3
 8002614:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002616:	4b80      	ldr	r3, [pc, #512]	; (8002818 <vKeyScan+0x2c4>)
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	f107 010f 	add.w	r1, r7, #15
 800261e:	2300      	movs	r3, #0
 8002620:	2200      	movs	r2, #0
 8002622:	f004 fcb9 	bl	8006f98 <xQueueGenericSend>

				Key.Xs_ShortPress_R = 0; // Сброс счетика выдержки
 8002626:	4b7b      	ldr	r3, [pc, #492]	; (8002814 <vKeyScan+0x2c0>)
 8002628:	2200      	movs	r2, #0
 800262a:	705a      	strb	r2, [r3, #1]
			}

			if (Key.Xs_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 800262c:	4b79      	ldr	r3, [pc, #484]	; (8002814 <vKeyScan+0x2c0>)
 800262e:	785b      	ldrb	r3, [r3, #1]
 8002630:	2b06      	cmp	r3, #6
 8002632:	d005      	beq.n	8002640 <vKeyScan+0xec>
			{
				Key.Xs_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002634:	4b77      	ldr	r3, [pc, #476]	; (8002814 <vKeyScan+0x2c0>)
 8002636:	785b      	ldrb	r3, [r3, #1]
 8002638:	3301      	adds	r3, #1
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b75      	ldr	r3, [pc, #468]	; (8002814 <vKeyScan+0x2c0>)
 800263e:	705a      	strb	r2, [r3, #1]
			}


			Key.Xs_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002640:	4b74      	ldr	r3, [pc, #464]	; (8002814 <vKeyScan+0x2c0>)
 8002642:	78db      	ldrb	r3, [r3, #3]
 8002644:	3301      	adds	r3, #1
 8002646:	b2da      	uxtb	r2, r3
 8002648:	4b72      	ldr	r3, [pc, #456]	; (8002814 <vKeyScan+0x2c0>)
 800264a:	70da      	strb	r2, [r3, #3]
			if (Key.Xs_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 800264c:	4b71      	ldr	r3, [pc, #452]	; (8002814 <vKeyScan+0x2c0>)
 800264e:	78db      	ldrb	r3, [r3, #3]
 8002650:	2b32      	cmp	r3, #50	; 0x32
 8002652:	d916      	bls.n	8002682 <vKeyScan+0x12e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xs_R;
 8002654:	2304      	movs	r3, #4
 8002656:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002658:	4b6f      	ldr	r3, [pc, #444]	; (8002818 <vKeyScan+0x2c4>)
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	f107 010f 	add.w	r1, r7, #15
 8002660:	2300      	movs	r3, #0
 8002662:	2200      	movs	r2, #0
 8002664:	f004 fc98 	bl	8006f98 <xQueueGenericSend>

				Key.Xs_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002668:	4b6a      	ldr	r3, [pc, #424]	; (8002814 <vKeyScan+0x2c0>)
 800266a:	2206      	movs	r2, #6
 800266c:	705a      	strb	r2, [r3, #1]
				Key.Xs_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 800266e:	4b69      	ldr	r3, [pc, #420]	; (8002814 <vKeyScan+0x2c0>)
 8002670:	2225      	movs	r2, #37	; 0x25
 8002672:	70da      	strb	r2, [r3, #3]
 8002674:	e005      	b.n	8002682 <vKeyScan+0x12e>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xs_ShortPress_R = 0;
 8002676:	4b67      	ldr	r3, [pc, #412]	; (8002814 <vKeyScan+0x2c0>)
 8002678:	2200      	movs	r2, #0
 800267a:	705a      	strb	r2, [r3, #1]
			Key.Xs_LongPress_R = 0;
 800267c:	4b65      	ldr	r3, [pc, #404]	; (8002814 <vKeyScan+0x2c0>)
 800267e:	2200      	movs	r2, #0
 8002680:	70da      	strb	r2, [r3, #3]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 16) // ВПРАВО: [0], "-" - 16, "+" - 32, , STLED №5;
 8002682:	4b63      	ldr	r3, [pc, #396]	; (8002810 <vKeyScan+0x2bc>)
 8002684:	7f5b      	ldrb	r3, [r3, #29]
 8002686:	2b10      	cmp	r3, #16
 8002688:	d139      	bne.n	80026fe <vKeyScan+0x1aa>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xf_ShortPress_L > CNT_KEY_SHORT && Key.Xf_ShortPress_L != CNT_KEY_SHORT + 2)
 800268a:	4b62      	ldr	r3, [pc, #392]	; (8002814 <vKeyScan+0x2c0>)
 800268c:	791b      	ldrb	r3, [r3, #4]
 800268e:	2b04      	cmp	r3, #4
 8002690:	d910      	bls.n	80026b4 <vKeyScan+0x160>
 8002692:	4b60      	ldr	r3, [pc, #384]	; (8002814 <vKeyScan+0x2c0>)
 8002694:	791b      	ldrb	r3, [r3, #4]
 8002696:	2b06      	cmp	r3, #6
 8002698:	d00c      	beq.n	80026b4 <vKeyScan+0x160>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Xf_L;
 800269a:	2305      	movs	r3, #5
 800269c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800269e:	4b5e      	ldr	r3, [pc, #376]	; (8002818 <vKeyScan+0x2c4>)
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	f107 010f 	add.w	r1, r7, #15
 80026a6:	2300      	movs	r3, #0
 80026a8:	2200      	movs	r2, #0
 80026aa:	f004 fc75 	bl	8006f98 <xQueueGenericSend>


				Key.Xf_ShortPress_L = 0; // Сброс счетика выдержки
 80026ae:	4b59      	ldr	r3, [pc, #356]	; (8002814 <vKeyScan+0x2c0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	711a      	strb	r2, [r3, #4]
			}

			if (Key.Xf_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80026b4:	4b57      	ldr	r3, [pc, #348]	; (8002814 <vKeyScan+0x2c0>)
 80026b6:	791b      	ldrb	r3, [r3, #4]
 80026b8:	2b06      	cmp	r3, #6
 80026ba:	d005      	beq.n	80026c8 <vKeyScan+0x174>
			{
				Key.Xf_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 80026bc:	4b55      	ldr	r3, [pc, #340]	; (8002814 <vKeyScan+0x2c0>)
 80026be:	791b      	ldrb	r3, [r3, #4]
 80026c0:	3301      	adds	r3, #1
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	4b53      	ldr	r3, [pc, #332]	; (8002814 <vKeyScan+0x2c0>)
 80026c6:	711a      	strb	r2, [r3, #4]
			}


			Key.Xf_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 80026c8:	4b52      	ldr	r3, [pc, #328]	; (8002814 <vKeyScan+0x2c0>)
 80026ca:	799b      	ldrb	r3, [r3, #6]
 80026cc:	3301      	adds	r3, #1
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b50      	ldr	r3, [pc, #320]	; (8002814 <vKeyScan+0x2c0>)
 80026d2:	719a      	strb	r2, [r3, #6]
			if (Key.Xf_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80026d4:	4b4f      	ldr	r3, [pc, #316]	; (8002814 <vKeyScan+0x2c0>)
 80026d6:	799b      	ldrb	r3, [r3, #6]
 80026d8:	2b32      	cmp	r3, #50	; 0x32
 80026da:	d916      	bls.n	800270a <vKeyScan+0x1b6>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xf_L;
 80026dc:	2306      	movs	r3, #6
 80026de:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80026e0:	4b4d      	ldr	r3, [pc, #308]	; (8002818 <vKeyScan+0x2c4>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	f107 010f 	add.w	r1, r7, #15
 80026e8:	2300      	movs	r3, #0
 80026ea:	2200      	movs	r2, #0
 80026ec:	f004 fc54 	bl	8006f98 <xQueueGenericSend>


				Key.Xf_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80026f0:	4b48      	ldr	r3, [pc, #288]	; (8002814 <vKeyScan+0x2c0>)
 80026f2:	2206      	movs	r2, #6
 80026f4:	711a      	strb	r2, [r3, #4]
				Key.Xf_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80026f6:	4b47      	ldr	r3, [pc, #284]	; (8002814 <vKeyScan+0x2c0>)
 80026f8:	2225      	movs	r2, #37	; 0x25
 80026fa:	719a      	strb	r2, [r3, #6]
 80026fc:	e005      	b.n	800270a <vKeyScan+0x1b6>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xf_ShortPress_L = 0;
 80026fe:	4b45      	ldr	r3, [pc, #276]	; (8002814 <vKeyScan+0x2c0>)
 8002700:	2200      	movs	r2, #0
 8002702:	711a      	strb	r2, [r3, #4]
			Key.Xf_LongPress_L = 0;
 8002704:	4b43      	ldr	r3, [pc, #268]	; (8002814 <vKeyScan+0x2c0>)
 8002706:	2200      	movs	r2, #0
 8002708:	719a      	strb	r2, [r3, #6]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 32)
 800270a:	4b41      	ldr	r3, [pc, #260]	; (8002810 <vKeyScan+0x2bc>)
 800270c:	7f5b      	ldrb	r3, [r3, #29]
 800270e:	2b20      	cmp	r3, #32
 8002710:	d139      	bne.n	8002786 <vKeyScan+0x232>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xf_ShortPress_R > CNT_KEY_SHORT && Key.Xf_ShortPress_R != CNT_KEY_SHORT + 2)
 8002712:	4b40      	ldr	r3, [pc, #256]	; (8002814 <vKeyScan+0x2c0>)
 8002714:	795b      	ldrb	r3, [r3, #5]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d910      	bls.n	800273c <vKeyScan+0x1e8>
 800271a:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <vKeyScan+0x2c0>)
 800271c:	795b      	ldrb	r3, [r3, #5]
 800271e:	2b06      	cmp	r3, #6
 8002720:	d00c      	beq.n	800273c <vKeyScan+0x1e8>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Xf_R;
 8002722:	2307      	movs	r3, #7
 8002724:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002726:	4b3c      	ldr	r3, [pc, #240]	; (8002818 <vKeyScan+0x2c4>)
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	f107 010f 	add.w	r1, r7, #15
 800272e:	2300      	movs	r3, #0
 8002730:	2200      	movs	r2, #0
 8002732:	f004 fc31 	bl	8006f98 <xQueueGenericSend>


				Key.Xf_ShortPress_R = 0; // Сброс счетика выдержки
 8002736:	4b37      	ldr	r3, [pc, #220]	; (8002814 <vKeyScan+0x2c0>)
 8002738:	2200      	movs	r2, #0
 800273a:	715a      	strb	r2, [r3, #5]
			}

			if (Key.Xf_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 800273c:	4b35      	ldr	r3, [pc, #212]	; (8002814 <vKeyScan+0x2c0>)
 800273e:	795b      	ldrb	r3, [r3, #5]
 8002740:	2b06      	cmp	r3, #6
 8002742:	d005      	beq.n	8002750 <vKeyScan+0x1fc>
			{
				Key.Xf_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002744:	4b33      	ldr	r3, [pc, #204]	; (8002814 <vKeyScan+0x2c0>)
 8002746:	795b      	ldrb	r3, [r3, #5]
 8002748:	3301      	adds	r3, #1
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4b31      	ldr	r3, [pc, #196]	; (8002814 <vKeyScan+0x2c0>)
 800274e:	715a      	strb	r2, [r3, #5]
			}


			Key.Xf_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002750:	4b30      	ldr	r3, [pc, #192]	; (8002814 <vKeyScan+0x2c0>)
 8002752:	79db      	ldrb	r3, [r3, #7]
 8002754:	3301      	adds	r3, #1
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b2e      	ldr	r3, [pc, #184]	; (8002814 <vKeyScan+0x2c0>)
 800275a:	71da      	strb	r2, [r3, #7]
			if (Key.Xf_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <vKeyScan+0x2c0>)
 800275e:	79db      	ldrb	r3, [r3, #7]
 8002760:	2b32      	cmp	r3, #50	; 0x32
 8002762:	d916      	bls.n	8002792 <vKeyScan+0x23e>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xf_R;
 8002764:	2308      	movs	r3, #8
 8002766:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002768:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <vKeyScan+0x2c4>)
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	f107 010f 	add.w	r1, r7, #15
 8002770:	2300      	movs	r3, #0
 8002772:	2200      	movs	r2, #0
 8002774:	f004 fc10 	bl	8006f98 <xQueueGenericSend>

				Key.Xf_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002778:	4b26      	ldr	r3, [pc, #152]	; (8002814 <vKeyScan+0x2c0>)
 800277a:	2206      	movs	r2, #6
 800277c:	715a      	strb	r2, [r3, #5]
				Key.Xf_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 800277e:	4b25      	ldr	r3, [pc, #148]	; (8002814 <vKeyScan+0x2c0>)
 8002780:	2225      	movs	r2, #37	; 0x25
 8002782:	71da      	strb	r2, [r3, #7]
 8002784:	e005      	b.n	8002792 <vKeyScan+0x23e>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xf_ShortPress_R = 0;
 8002786:	4b23      	ldr	r3, [pc, #140]	; (8002814 <vKeyScan+0x2c0>)
 8002788:	2200      	movs	r2, #0
 800278a:	715a      	strb	r2, [r3, #5]
			Key.Xf_LongPress_R = 0;
 800278c:	4b21      	ldr	r3, [pc, #132]	; (8002814 <vKeyScan+0x2c0>)
 800278e:	2200      	movs	r2, #0
 8002790:	71da      	strb	r2, [r3, #7]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 8) //ЗАДЕРЖКА (Delay_s): [0], "-" - 8, "+" - 4, , STLED №5;
 8002792:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <vKeyScan+0x2bc>)
 8002794:	7f5b      	ldrb	r3, [r3, #29]
 8002796:	2b08      	cmp	r3, #8
 8002798:	d140      	bne.n	800281c <vKeyScan+0x2c8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_s_ShortPress_L > CNT_KEY_SHORT && Key.Delay_s_ShortPress_L != CNT_KEY_SHORT + 2)
 800279a:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <vKeyScan+0x2c0>)
 800279c:	7a1b      	ldrb	r3, [r3, #8]
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d910      	bls.n	80027c4 <vKeyScan+0x270>
 80027a2:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <vKeyScan+0x2c0>)
 80027a4:	7a1b      	ldrb	r3, [r3, #8]
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d00c      	beq.n	80027c4 <vKeyScan+0x270>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_s_L;
 80027aa:	2309      	movs	r3, #9
 80027ac:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <vKeyScan+0x2c4>)
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	f107 010f 	add.w	r1, r7, #15
 80027b6:	2300      	movs	r3, #0
 80027b8:	2200      	movs	r2, #0
 80027ba:	f004 fbed 	bl	8006f98 <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = 0; // Сброс счетика выдержки
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <vKeyScan+0x2c0>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	721a      	strb	r2, [r3, #8]
			}

			if (Key.Delay_s_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <vKeyScan+0x2c0>)
 80027c6:	7a1b      	ldrb	r3, [r3, #8]
 80027c8:	2b06      	cmp	r3, #6
 80027ca:	d005      	beq.n	80027d8 <vKeyScan+0x284>
			{
				Key.Delay_s_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <vKeyScan+0x2c0>)
 80027ce:	7a1b      	ldrb	r3, [r3, #8]
 80027d0:	3301      	adds	r3, #1
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <vKeyScan+0x2c0>)
 80027d6:	721a      	strb	r2, [r3, #8]
			}


			Key.Delay_s_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 80027d8:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <vKeyScan+0x2c0>)
 80027da:	7a9b      	ldrb	r3, [r3, #10]
 80027dc:	3301      	adds	r3, #1
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <vKeyScan+0x2c0>)
 80027e2:	729a      	strb	r2, [r3, #10]
			if (Key.Delay_s_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <vKeyScan+0x2c0>)
 80027e6:	7a9b      	ldrb	r3, [r3, #10]
 80027e8:	2b32      	cmp	r3, #50	; 0x32
 80027ea:	d91d      	bls.n	8002828 <vKeyScan+0x2d4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_s_L;
 80027ec:	230a      	movs	r3, #10
 80027ee:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <vKeyScan+0x2c4>)
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	f107 010f 	add.w	r1, r7, #15
 80027f8:	2300      	movs	r3, #0
 80027fa:	2200      	movs	r2, #0
 80027fc:	f004 fbcc 	bl	8006f98 <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <vKeyScan+0x2c0>)
 8002802:	2206      	movs	r2, #6
 8002804:	721a      	strb	r2, [r3, #8]
				Key.Delay_s_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002806:	4b03      	ldr	r3, [pc, #12]	; (8002814 <vKeyScan+0x2c0>)
 8002808:	2225      	movs	r2, #37	; 0x25
 800280a:	729a      	strb	r2, [r3, #10]
 800280c:	e00c      	b.n	8002828 <vKeyScan+0x2d4>
 800280e:	bf00      	nop
 8002810:	20003d3c 	.word	0x20003d3c
 8002814:	200045a0 	.word	0x200045a0
 8002818:	20004590 	.word	0x20004590


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_s_ShortPress_L = 0;
 800281c:	4ba9      	ldr	r3, [pc, #676]	; (8002ac4 <vKeyScan+0x570>)
 800281e:	2200      	movs	r2, #0
 8002820:	721a      	strb	r2, [r3, #8]
			Key.Delay_s_LongPress_L = 0;
 8002822:	4ba8      	ldr	r3, [pc, #672]	; (8002ac4 <vKeyScan+0x570>)
 8002824:	2200      	movs	r2, #0
 8002826:	729a      	strb	r2, [r3, #10]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 4)
 8002828:	4ba7      	ldr	r3, [pc, #668]	; (8002ac8 <vKeyScan+0x574>)
 800282a:	7f5b      	ldrb	r3, [r3, #29]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d139      	bne.n	80028a4 <vKeyScan+0x350>
			{
				// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
				if (Key.Delay_s_ShortPress_R > CNT_KEY_SHORT && Key.Delay_s_ShortPress_R != CNT_KEY_SHORT + 2)
 8002830:	4ba4      	ldr	r3, [pc, #656]	; (8002ac4 <vKeyScan+0x570>)
 8002832:	7a5b      	ldrb	r3, [r3, #9]
 8002834:	2b04      	cmp	r3, #4
 8002836:	d910      	bls.n	800285a <vKeyScan+0x306>
 8002838:	4ba2      	ldr	r3, [pc, #648]	; (8002ac4 <vKeyScan+0x570>)
 800283a:	7a5b      	ldrb	r3, [r3, #9]
 800283c:	2b06      	cmp	r3, #6
 800283e:	d00c      	beq.n	800285a <vKeyScan+0x306>
				{
					// Дейсвие при нажатии на клавишу
					nKeyPressed = press_short_Delay_s_R;
 8002840:	230b      	movs	r3, #11
 8002842:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002844:	4ba1      	ldr	r3, [pc, #644]	; (8002acc <vKeyScan+0x578>)
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	f107 010f 	add.w	r1, r7, #15
 800284c:	2300      	movs	r3, #0
 800284e:	2200      	movs	r2, #0
 8002850:	f004 fba2 	bl	8006f98 <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = 0; // Сброс счетика выдержки
 8002854:	4b9b      	ldr	r3, [pc, #620]	; (8002ac4 <vKeyScan+0x570>)
 8002856:	2200      	movs	r2, #0
 8002858:	725a      	strb	r2, [r3, #9]
				}

				if (Key.Delay_s_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 800285a:	4b9a      	ldr	r3, [pc, #616]	; (8002ac4 <vKeyScan+0x570>)
 800285c:	7a5b      	ldrb	r3, [r3, #9]
 800285e:	2b06      	cmp	r3, #6
 8002860:	d005      	beq.n	800286e <vKeyScan+0x31a>
				{
					Key.Delay_s_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002862:	4b98      	ldr	r3, [pc, #608]	; (8002ac4 <vKeyScan+0x570>)
 8002864:	7a5b      	ldrb	r3, [r3, #9]
 8002866:	3301      	adds	r3, #1
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4b96      	ldr	r3, [pc, #600]	; (8002ac4 <vKeyScan+0x570>)
 800286c:	725a      	strb	r2, [r3, #9]
				}


				Key.Delay_s_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 800286e:	4b95      	ldr	r3, [pc, #596]	; (8002ac4 <vKeyScan+0x570>)
 8002870:	7adb      	ldrb	r3, [r3, #11]
 8002872:	3301      	adds	r3, #1
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4b93      	ldr	r3, [pc, #588]	; (8002ac4 <vKeyScan+0x570>)
 8002878:	72da      	strb	r2, [r3, #11]
				if (Key.Delay_s_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 800287a:	4b92      	ldr	r3, [pc, #584]	; (8002ac4 <vKeyScan+0x570>)
 800287c:	7adb      	ldrb	r3, [r3, #11]
 800287e:	2b32      	cmp	r3, #50	; 0x32
 8002880:	d916      	bls.n	80028b0 <vKeyScan+0x35c>
				{
					// Дейсвие при нажатии на клавишу
					nKeyPressed = press_long_Delay_s_R;
 8002882:	230c      	movs	r3, #12
 8002884:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002886:	4b91      	ldr	r3, [pc, #580]	; (8002acc <vKeyScan+0x578>)
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	f107 010f 	add.w	r1, r7, #15
 800288e:	2300      	movs	r3, #0
 8002890:	2200      	movs	r2, #0
 8002892:	f004 fb81 	bl	8006f98 <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002896:	4b8b      	ldr	r3, [pc, #556]	; (8002ac4 <vKeyScan+0x570>)
 8002898:	2206      	movs	r2, #6
 800289a:	725a      	strb	r2, [r3, #9]
					Key.Delay_s_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 800289c:	4b89      	ldr	r3, [pc, #548]	; (8002ac4 <vKeyScan+0x570>)
 800289e:	2225      	movs	r2, #37	; 0x25
 80028a0:	72da      	strb	r2, [r3, #11]
 80028a2:	e005      	b.n	80028b0 <vKeyScan+0x35c>


			}
			else // Если кнопка была отпущена то сбросить все счетчики выдержки
			{
				Key.Delay_s_ShortPress_R = 0;
 80028a4:	4b87      	ldr	r3, [pc, #540]	; (8002ac4 <vKeyScan+0x570>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	725a      	strb	r2, [r3, #9]
				Key.Delay_s_LongPress_R = 0;
 80028aa:	4b86      	ldr	r3, [pc, #536]	; (8002ac4 <vKeyScan+0x570>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	72da      	strb	r2, [r3, #11]
			}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 2) // СКОРОСТЬ: [0], "-" - 2, "+" - 1, , STLED №5;
 80028b0:	4b85      	ldr	r3, [pc, #532]	; (8002ac8 <vKeyScan+0x574>)
 80028b2:	7f5b      	ldrb	r3, [r3, #29]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d139      	bne.n	800292c <vKeyScan+0x3d8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Speed_ShortPress_L > CNT_KEY_SHORT && Key.Speed_ShortPress_L != CNT_KEY_SHORT + 2)
 80028b8:	4b82      	ldr	r3, [pc, #520]	; (8002ac4 <vKeyScan+0x570>)
 80028ba:	7b1b      	ldrb	r3, [r3, #12]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d910      	bls.n	80028e2 <vKeyScan+0x38e>
 80028c0:	4b80      	ldr	r3, [pc, #512]	; (8002ac4 <vKeyScan+0x570>)
 80028c2:	7b1b      	ldrb	r3, [r3, #12]
 80028c4:	2b06      	cmp	r3, #6
 80028c6:	d00c      	beq.n	80028e2 <vKeyScan+0x38e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Speed_L;
 80028c8:	230d      	movs	r3, #13
 80028ca:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80028cc:	4b7f      	ldr	r3, [pc, #508]	; (8002acc <vKeyScan+0x578>)
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	f107 010f 	add.w	r1, r7, #15
 80028d4:	2300      	movs	r3, #0
 80028d6:	2200      	movs	r2, #0
 80028d8:	f004 fb5e 	bl	8006f98 <xQueueGenericSend>

				Key.Speed_ShortPress_L = 0; // Сброс счетика выдержки
 80028dc:	4b79      	ldr	r3, [pc, #484]	; (8002ac4 <vKeyScan+0x570>)
 80028de:	2200      	movs	r2, #0
 80028e0:	731a      	strb	r2, [r3, #12]
			}

			if (Key.Speed_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80028e2:	4b78      	ldr	r3, [pc, #480]	; (8002ac4 <vKeyScan+0x570>)
 80028e4:	7b1b      	ldrb	r3, [r3, #12]
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d005      	beq.n	80028f6 <vKeyScan+0x3a2>
			{
				Key.Speed_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 80028ea:	4b76      	ldr	r3, [pc, #472]	; (8002ac4 <vKeyScan+0x570>)
 80028ec:	7b1b      	ldrb	r3, [r3, #12]
 80028ee:	3301      	adds	r3, #1
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4b74      	ldr	r3, [pc, #464]	; (8002ac4 <vKeyScan+0x570>)
 80028f4:	731a      	strb	r2, [r3, #12]
			}


			Key.Speed_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 80028f6:	4b73      	ldr	r3, [pc, #460]	; (8002ac4 <vKeyScan+0x570>)
 80028f8:	7b9b      	ldrb	r3, [r3, #14]
 80028fa:	3301      	adds	r3, #1
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4b71      	ldr	r3, [pc, #452]	; (8002ac4 <vKeyScan+0x570>)
 8002900:	739a      	strb	r2, [r3, #14]
			if (Key.Speed_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002902:	4b70      	ldr	r3, [pc, #448]	; (8002ac4 <vKeyScan+0x570>)
 8002904:	7b9b      	ldrb	r3, [r3, #14]
 8002906:	2b32      	cmp	r3, #50	; 0x32
 8002908:	d916      	bls.n	8002938 <vKeyScan+0x3e4>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Speed_L;
 800290a:	230e      	movs	r3, #14
 800290c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800290e:	4b6f      	ldr	r3, [pc, #444]	; (8002acc <vKeyScan+0x578>)
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	f107 010f 	add.w	r1, r7, #15
 8002916:	2300      	movs	r3, #0
 8002918:	2200      	movs	r2, #0
 800291a:	f004 fb3d 	bl	8006f98 <xQueueGenericSend>

				Key.Speed_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800291e:	4b69      	ldr	r3, [pc, #420]	; (8002ac4 <vKeyScan+0x570>)
 8002920:	2206      	movs	r2, #6
 8002922:	731a      	strb	r2, [r3, #12]
				Key.Speed_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002924:	4b67      	ldr	r3, [pc, #412]	; (8002ac4 <vKeyScan+0x570>)
 8002926:	2225      	movs	r2, #37	; 0x25
 8002928:	739a      	strb	r2, [r3, #14]
 800292a:	e005      	b.n	8002938 <vKeyScan+0x3e4>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Speed_ShortPress_L = 0;
 800292c:	4b65      	ldr	r3, [pc, #404]	; (8002ac4 <vKeyScan+0x570>)
 800292e:	2200      	movs	r2, #0
 8002930:	731a      	strb	r2, [r3, #12]
			Key.Speed_LongPress_L = 0;
 8002932:	4b64      	ldr	r3, [pc, #400]	; (8002ac4 <vKeyScan+0x570>)
 8002934:	2200      	movs	r2, #0
 8002936:	739a      	strb	r2, [r3, #14]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 1)
 8002938:	4b63      	ldr	r3, [pc, #396]	; (8002ac8 <vKeyScan+0x574>)
 800293a:	7f5b      	ldrb	r3, [r3, #29]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d139      	bne.n	80029b4 <vKeyScan+0x460>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Speed_ShortPress_R > CNT_KEY_SHORT && Key.Speed_ShortPress_R != CNT_KEY_SHORT + 2)
 8002940:	4b60      	ldr	r3, [pc, #384]	; (8002ac4 <vKeyScan+0x570>)
 8002942:	7b5b      	ldrb	r3, [r3, #13]
 8002944:	2b04      	cmp	r3, #4
 8002946:	d910      	bls.n	800296a <vKeyScan+0x416>
 8002948:	4b5e      	ldr	r3, [pc, #376]	; (8002ac4 <vKeyScan+0x570>)
 800294a:	7b5b      	ldrb	r3, [r3, #13]
 800294c:	2b06      	cmp	r3, #6
 800294e:	d00c      	beq.n	800296a <vKeyScan+0x416>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Speed_R;
 8002950:	230f      	movs	r3, #15
 8002952:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002954:	4b5d      	ldr	r3, [pc, #372]	; (8002acc <vKeyScan+0x578>)
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	f107 010f 	add.w	r1, r7, #15
 800295c:	2300      	movs	r3, #0
 800295e:	2200      	movs	r2, #0
 8002960:	f004 fb1a 	bl	8006f98 <xQueueGenericSend>

				Key.Speed_ShortPress_R = 0; // Сброс счетика выдержки
 8002964:	4b57      	ldr	r3, [pc, #348]	; (8002ac4 <vKeyScan+0x570>)
 8002966:	2200      	movs	r2, #0
 8002968:	735a      	strb	r2, [r3, #13]
			}

			if (Key.Speed_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 800296a:	4b56      	ldr	r3, [pc, #344]	; (8002ac4 <vKeyScan+0x570>)
 800296c:	7b5b      	ldrb	r3, [r3, #13]
 800296e:	2b06      	cmp	r3, #6
 8002970:	d005      	beq.n	800297e <vKeyScan+0x42a>
			{
				Key.Speed_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002972:	4b54      	ldr	r3, [pc, #336]	; (8002ac4 <vKeyScan+0x570>)
 8002974:	7b5b      	ldrb	r3, [r3, #13]
 8002976:	3301      	adds	r3, #1
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b52      	ldr	r3, [pc, #328]	; (8002ac4 <vKeyScan+0x570>)
 800297c:	735a      	strb	r2, [r3, #13]
			}


			Key.Speed_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 800297e:	4b51      	ldr	r3, [pc, #324]	; (8002ac4 <vKeyScan+0x570>)
 8002980:	7bdb      	ldrb	r3, [r3, #15]
 8002982:	3301      	adds	r3, #1
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4b4f      	ldr	r3, [pc, #316]	; (8002ac4 <vKeyScan+0x570>)
 8002988:	73da      	strb	r2, [r3, #15]
			if (Key.Speed_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 800298a:	4b4e      	ldr	r3, [pc, #312]	; (8002ac4 <vKeyScan+0x570>)
 800298c:	7bdb      	ldrb	r3, [r3, #15]
 800298e:	2b32      	cmp	r3, #50	; 0x32
 8002990:	d916      	bls.n	80029c0 <vKeyScan+0x46c>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Speed_R;
 8002992:	2310      	movs	r3, #16
 8002994:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002996:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <vKeyScan+0x578>)
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	f107 010f 	add.w	r1, r7, #15
 800299e:	2300      	movs	r3, #0
 80029a0:	2200      	movs	r2, #0
 80029a2:	f004 faf9 	bl	8006f98 <xQueueGenericSend>

				Key.Speed_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <vKeyScan+0x570>)
 80029a8:	2206      	movs	r2, #6
 80029aa:	735a      	strb	r2, [r3, #13]
				Key.Speed_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80029ac:	4b45      	ldr	r3, [pc, #276]	; (8002ac4 <vKeyScan+0x570>)
 80029ae:	2225      	movs	r2, #37	; 0x25
 80029b0:	73da      	strb	r2, [r3, #15]
 80029b2:	e005      	b.n	80029c0 <vKeyScan+0x46c>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Speed_ShortPress_R = 0;
 80029b4:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <vKeyScan+0x570>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	735a      	strb	r2, [r3, #13]
			Key.Speed_LongPress_R = 0;
 80029ba:	4b42      	ldr	r3, [pc, #264]	; (8002ac4 <vKeyScan+0x570>)
 80029bc:	2200      	movs	r2, #0
 80029be:	73da      	strb	r2, [r3, #15]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 1) // ЗАДЕРЖКА (Delay_f): [1], "-" - 1, "+" - 4, , STLED №5;
 80029c0:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <vKeyScan+0x574>)
 80029c2:	7f9b      	ldrb	r3, [r3, #30]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d139      	bne.n	8002a3c <vKeyScan+0x4e8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_f_ShortPress_L > CNT_KEY_SHORT && Key.Delay_f_ShortPress_L != CNT_KEY_SHORT + 2)
 80029c8:	4b3e      	ldr	r3, [pc, #248]	; (8002ac4 <vKeyScan+0x570>)
 80029ca:	7c1b      	ldrb	r3, [r3, #16]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d910      	bls.n	80029f2 <vKeyScan+0x49e>
 80029d0:	4b3c      	ldr	r3, [pc, #240]	; (8002ac4 <vKeyScan+0x570>)
 80029d2:	7c1b      	ldrb	r3, [r3, #16]
 80029d4:	2b06      	cmp	r3, #6
 80029d6:	d00c      	beq.n	80029f2 <vKeyScan+0x49e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_f_L;
 80029d8:	2311      	movs	r3, #17
 80029da:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80029dc:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <vKeyScan+0x578>)
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	f107 010f 	add.w	r1, r7, #15
 80029e4:	2300      	movs	r3, #0
 80029e6:	2200      	movs	r2, #0
 80029e8:	f004 fad6 	bl	8006f98 <xQueueGenericSend>

				Key.Delay_f_ShortPress_L = 0; // Сброс счетика выдержки
 80029ec:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <vKeyScan+0x570>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	741a      	strb	r2, [r3, #16]
			}

			if (Key.Delay_f_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80029f2:	4b34      	ldr	r3, [pc, #208]	; (8002ac4 <vKeyScan+0x570>)
 80029f4:	7c1b      	ldrb	r3, [r3, #16]
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d005      	beq.n	8002a06 <vKeyScan+0x4b2>
			{
				Key.Delay_f_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 80029fa:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <vKeyScan+0x570>)
 80029fc:	7c1b      	ldrb	r3, [r3, #16]
 80029fe:	3301      	adds	r3, #1
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <vKeyScan+0x570>)
 8002a04:	741a      	strb	r2, [r3, #16]
			}


			Key.Delay_f_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002a06:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <vKeyScan+0x570>)
 8002a08:	7c9b      	ldrb	r3, [r3, #18]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <vKeyScan+0x570>)
 8002a10:	749a      	strb	r2, [r3, #18]
			if (Key.Delay_f_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002a12:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <vKeyScan+0x570>)
 8002a14:	7c9b      	ldrb	r3, [r3, #18]
 8002a16:	2b32      	cmp	r3, #50	; 0x32
 8002a18:	d916      	bls.n	8002a48 <vKeyScan+0x4f4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_f_L;
 8002a1a:	2312      	movs	r3, #18
 8002a1c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002a1e:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <vKeyScan+0x578>)
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	f107 010f 	add.w	r1, r7, #15
 8002a26:	2300      	movs	r3, #0
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f004 fab5 	bl	8006f98 <xQueueGenericSend>


				Key.Delay_f_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002a2e:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <vKeyScan+0x570>)
 8002a30:	2206      	movs	r2, #6
 8002a32:	741a      	strb	r2, [r3, #16]
				Key.Delay_f_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002a34:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <vKeyScan+0x570>)
 8002a36:	2225      	movs	r2, #37	; 0x25
 8002a38:	749a      	strb	r2, [r3, #18]
 8002a3a:	e005      	b.n	8002a48 <vKeyScan+0x4f4>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_f_ShortPress_L = 0;
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <vKeyScan+0x570>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	741a      	strb	r2, [r3, #16]
			Key.Delay_f_LongPress_L = 0;
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <vKeyScan+0x570>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	749a      	strb	r2, [r3, #18]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 4)
 8002a48:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <vKeyScan+0x574>)
 8002a4a:	7f9b      	ldrb	r3, [r3, #30]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d13f      	bne.n	8002ad0 <vKeyScan+0x57c>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_f_ShortPress_R > CNT_KEY_SHORT && Key.Delay_f_ShortPress_R != CNT_KEY_SHORT + 2)
 8002a50:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <vKeyScan+0x570>)
 8002a52:	7c5b      	ldrb	r3, [r3, #17]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d910      	bls.n	8002a7a <vKeyScan+0x526>
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <vKeyScan+0x570>)
 8002a5a:	7c5b      	ldrb	r3, [r3, #17]
 8002a5c:	2b06      	cmp	r3, #6
 8002a5e:	d00c      	beq.n	8002a7a <vKeyScan+0x526>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_f_R;
 8002a60:	2313      	movs	r3, #19
 8002a62:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <vKeyScan+0x578>)
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	f107 010f 	add.w	r1, r7, #15
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f004 fa92 	bl	8006f98 <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = 0; // Сброс счетика выдержки
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <vKeyScan+0x570>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	745a      	strb	r2, [r3, #17]
			}

			if (Key.Delay_f_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <vKeyScan+0x570>)
 8002a7c:	7c5b      	ldrb	r3, [r3, #17]
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d005      	beq.n	8002a8e <vKeyScan+0x53a>
			{
				Key.Delay_f_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <vKeyScan+0x570>)
 8002a84:	7c5b      	ldrb	r3, [r3, #17]
 8002a86:	3301      	adds	r3, #1
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <vKeyScan+0x570>)
 8002a8c:	745a      	strb	r2, [r3, #17]
			}


			Key.Delay_f_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <vKeyScan+0x570>)
 8002a90:	7cdb      	ldrb	r3, [r3, #19]
 8002a92:	3301      	adds	r3, #1
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <vKeyScan+0x570>)
 8002a98:	74da      	strb	r2, [r3, #19]
			if (Key.Delay_f_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <vKeyScan+0x570>)
 8002a9c:	7cdb      	ldrb	r3, [r3, #19]
 8002a9e:	2b32      	cmp	r3, #50	; 0x32
 8002aa0:	d91c      	bls.n	8002adc <vKeyScan+0x588>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_f_R;
 8002aa2:	2314      	movs	r3, #20
 8002aa4:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <vKeyScan+0x578>)
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	f107 010f 	add.w	r1, r7, #15
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f004 fa71 	bl	8006f98 <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002ab6:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <vKeyScan+0x570>)
 8002ab8:	2206      	movs	r2, #6
 8002aba:	745a      	strb	r2, [r3, #17]
				Key.Delay_f_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002abc:	4b01      	ldr	r3, [pc, #4]	; (8002ac4 <vKeyScan+0x570>)
 8002abe:	2225      	movs	r2, #37	; 0x25
 8002ac0:	74da      	strb	r2, [r3, #19]
 8002ac2:	e00b      	b.n	8002adc <vKeyScan+0x588>
 8002ac4:	200045a0 	.word	0x200045a0
 8002ac8:	20003d3c 	.word	0x20003d3c
 8002acc:	20004590 	.word	0x20004590


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_f_ShortPress_R = 0;
 8002ad0:	4b90      	ldr	r3, [pc, #576]	; (8002d14 <vKeyScan+0x7c0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	745a      	strb	r2, [r3, #17]
			Key.Delay_f_LongPress_R = 0;
 8002ad6:	4b8f      	ldr	r3, [pc, #572]	; (8002d14 <vKeyScan+0x7c0>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	74da      	strb	r2, [r3, #19]
		}

		if (WelderUnit.IndicatorPanel.KeyState[3] == 1 && !(WelderUnit.IndicatorPanel.KeyState[1] == 2)) // ВЛЕВО: [0], "-" - 128, "+" - 64, , STLED №5; ПРОГРАММА: [1], "-" - ..., "+" - 2, , STLED №5;
 8002adc:	4b8e      	ldr	r3, [pc, #568]	; (8002d18 <vKeyScan+0x7c4>)
 8002ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d133      	bne.n	8002b4e <vKeyScan+0x5fa>
 8002ae6:	4b8c      	ldr	r3, [pc, #560]	; (8002d18 <vKeyScan+0x7c4>)
 8002ae8:	7f9b      	ldrb	r3, [r3, #30]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d02f      	beq.n	8002b4e <vKeyScan+0x5fa>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_L > CNT_KEY_SHORT && Key.Program_ShortPress_L != CNT_KEY_SHORT + 2)
 8002aee:	4b89      	ldr	r3, [pc, #548]	; (8002d14 <vKeyScan+0x7c0>)
 8002af0:	7d1b      	ldrb	r3, [r3, #20]
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d906      	bls.n	8002b04 <vKeyScan+0x5b0>
 8002af6:	4b87      	ldr	r3, [pc, #540]	; (8002d14 <vKeyScan+0x7c0>)
 8002af8:	7d1b      	ldrb	r3, [r3, #20]
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d002      	beq.n	8002b04 <vKeyScan+0x5b0>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_Program_L;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_L = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 8002afe:	4b85      	ldr	r3, [pc, #532]	; (8002d14 <vKeyScan+0x7c0>)
 8002b00:	2207      	movs	r2, #7
 8002b02:	751a      	strb	r2, [r3, #20]
			}

			if (Key.Program_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002b04:	4b83      	ldr	r3, [pc, #524]	; (8002d14 <vKeyScan+0x7c0>)
 8002b06:	7d1b      	ldrb	r3, [r3, #20]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d005      	beq.n	8002b18 <vKeyScan+0x5c4>
			{
				Key.Program_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002b0c:	4b81      	ldr	r3, [pc, #516]	; (8002d14 <vKeyScan+0x7c0>)
 8002b0e:	7d1b      	ldrb	r3, [r3, #20]
 8002b10:	3301      	adds	r3, #1
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	4b7f      	ldr	r3, [pc, #508]	; (8002d14 <vKeyScan+0x7c0>)
 8002b16:	751a      	strb	r2, [r3, #20]
			}


			Key.Program_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002b18:	4b7e      	ldr	r3, [pc, #504]	; (8002d14 <vKeyScan+0x7c0>)
 8002b1a:	7d9b      	ldrb	r3, [r3, #22]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b7c      	ldr	r3, [pc, #496]	; (8002d14 <vKeyScan+0x7c0>)
 8002b22:	759a      	strb	r2, [r3, #22]
			if (Key.Program_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002b24:	4b7b      	ldr	r3, [pc, #492]	; (8002d14 <vKeyScan+0x7c0>)
 8002b26:	7d9b      	ldrb	r3, [r3, #22]
 8002b28:	2b32      	cmp	r3, #50	; 0x32
 8002b2a:	d924      	bls.n	8002b76 <vKeyScan+0x622>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Program_L;
 8002b2c:	2316      	movs	r3, #22
 8002b2e:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002b30:	4b7a      	ldr	r3, [pc, #488]	; (8002d1c <vKeyScan+0x7c8>)
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	f107 010f 	add.w	r1, r7, #15
 8002b38:	2300      	movs	r3, #0
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f004 fa2c 	bl	8006f98 <xQueueGenericSend>

				Key.Program_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002b40:	4b74      	ldr	r3, [pc, #464]	; (8002d14 <vKeyScan+0x7c0>)
 8002b42:	2206      	movs	r2, #6
 8002b44:	751a      	strb	r2, [r3, #20]
				Key.Program_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002b46:	4b73      	ldr	r3, [pc, #460]	; (8002d14 <vKeyScan+0x7c0>)
 8002b48:	2225      	movs	r2, #37	; 0x25
 8002b4a:	759a      	strb	r2, [r3, #22]
			if (Key.Program_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002b4c:	e013      	b.n	8002b76 <vKeyScan+0x622>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_L >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 8002b4e:	4b71      	ldr	r3, [pc, #452]	; (8002d14 <vKeyScan+0x7c0>)
 8002b50:	7d1b      	ldrb	r3, [r3, #20]
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d909      	bls.n	8002b6a <vKeyScan+0x616>
			{
				nKeyPressed = press_short_Program_L;
 8002b56:	2315      	movs	r3, #21
 8002b58:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002b5a:	4b70      	ldr	r3, [pc, #448]	; (8002d1c <vKeyScan+0x7c8>)
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	f107 010f 	add.w	r1, r7, #15
 8002b62:	2300      	movs	r3, #0
 8002b64:	2200      	movs	r2, #0
 8002b66:	f004 fa17 	bl	8006f98 <xQueueGenericSend>
			}

			Key.Program_ShortPress_L = 0;
 8002b6a:	4b6a      	ldr	r3, [pc, #424]	; (8002d14 <vKeyScan+0x7c0>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	751a      	strb	r2, [r3, #20]
			Key.Program_LongPress_L = 0;
 8002b70:	4b68      	ldr	r3, [pc, #416]	; (8002d14 <vKeyScan+0x7c0>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	759a      	strb	r2, [r3, #22]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 2 && !(WelderUnit.IndicatorPanel.KeyState[3] == 1))
 8002b76:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <vKeyScan+0x7c4>)
 8002b78:	7f9b      	ldrb	r3, [r3, #30]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d134      	bne.n	8002be8 <vKeyScan+0x694>
 8002b7e:	4b66      	ldr	r3, [pc, #408]	; (8002d18 <vKeyScan+0x7c4>)
 8002b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d02f      	beq.n	8002be8 <vKeyScan+0x694>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_R > CNT_KEY_SHORT && Key.Program_ShortPress_R != CNT_KEY_SHORT + 2)
 8002b88:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <vKeyScan+0x7c0>)
 8002b8a:	7d5b      	ldrb	r3, [r3, #21]
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d906      	bls.n	8002b9e <vKeyScan+0x64a>
 8002b90:	4b60      	ldr	r3, [pc, #384]	; (8002d14 <vKeyScan+0x7c0>)
 8002b92:	7d5b      	ldrb	r3, [r3, #21]
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	d002      	beq.n	8002b9e <vKeyScan+0x64a>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_Program_R;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_R = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 8002b98:	4b5e      	ldr	r3, [pc, #376]	; (8002d14 <vKeyScan+0x7c0>)
 8002b9a:	2207      	movs	r2, #7
 8002b9c:	755a      	strb	r2, [r3, #21]
			}

			if (Key.Program_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002b9e:	4b5d      	ldr	r3, [pc, #372]	; (8002d14 <vKeyScan+0x7c0>)
 8002ba0:	7d5b      	ldrb	r3, [r3, #21]
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d005      	beq.n	8002bb2 <vKeyScan+0x65e>
			{
				Key.Program_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002ba6:	4b5b      	ldr	r3, [pc, #364]	; (8002d14 <vKeyScan+0x7c0>)
 8002ba8:	7d5b      	ldrb	r3, [r3, #21]
 8002baa:	3301      	adds	r3, #1
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4b59      	ldr	r3, [pc, #356]	; (8002d14 <vKeyScan+0x7c0>)
 8002bb0:	755a      	strb	r2, [r3, #21]
			}


			Key.Program_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002bb2:	4b58      	ldr	r3, [pc, #352]	; (8002d14 <vKeyScan+0x7c0>)
 8002bb4:	7ddb      	ldrb	r3, [r3, #23]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <vKeyScan+0x7c0>)
 8002bbc:	75da      	strb	r2, [r3, #23]
			if (Key.Program_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002bbe:	4b55      	ldr	r3, [pc, #340]	; (8002d14 <vKeyScan+0x7c0>)
 8002bc0:	7ddb      	ldrb	r3, [r3, #23]
 8002bc2:	2b32      	cmp	r3, #50	; 0x32
 8002bc4:	d924      	bls.n	8002c10 <vKeyScan+0x6bc>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Program_R;
 8002bc6:	2318      	movs	r3, #24
 8002bc8:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002bca:	4b54      	ldr	r3, [pc, #336]	; (8002d1c <vKeyScan+0x7c8>)
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	f107 010f 	add.w	r1, r7, #15
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f004 f9df 	bl	8006f98 <xQueueGenericSend>

				Key.Program_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002bda:	4b4e      	ldr	r3, [pc, #312]	; (8002d14 <vKeyScan+0x7c0>)
 8002bdc:	2206      	movs	r2, #6
 8002bde:	755a      	strb	r2, [r3, #21]
				Key.Program_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002be0:	4b4c      	ldr	r3, [pc, #304]	; (8002d14 <vKeyScan+0x7c0>)
 8002be2:	2225      	movs	r2, #37	; 0x25
 8002be4:	75da      	strb	r2, [r3, #23]
			if (Key.Program_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002be6:	e013      	b.n	8002c10 <vKeyScan+0x6bc>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_R >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 8002be8:	4b4a      	ldr	r3, [pc, #296]	; (8002d14 <vKeyScan+0x7c0>)
 8002bea:	7d5b      	ldrb	r3, [r3, #21]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d909      	bls.n	8002c04 <vKeyScan+0x6b0>
			{
				nKeyPressed = press_short_Program_R;
 8002bf0:	2317      	movs	r3, #23
 8002bf2:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002bf4:	4b49      	ldr	r3, [pc, #292]	; (8002d1c <vKeyScan+0x7c8>)
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	f107 010f 	add.w	r1, r7, #15
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f004 f9ca 	bl	8006f98 <xQueueGenericSend>
			}

			Key.Program_ShortPress_R = 0;
 8002c04:	4b43      	ldr	r3, [pc, #268]	; (8002d14 <vKeyScan+0x7c0>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	755a      	strb	r2, [r3, #21]
			Key.Program_LongPress_R = 0;
 8002c0a:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <vKeyScan+0x7c0>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	75da      	strb	r2, [r3, #23]
		}



		if (WelderUnit.IndicatorPanel.KeyState[1] == 128) //ВВЕРХ, ВНИЗ: [1], "-" - 128, "+" - 64, , STLED №5;
 8002c10:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <vKeyScan+0x7c4>)
 8002c12:	7f9b      	ldrb	r3, [r3, #30]
 8002c14:	2b80      	cmp	r3, #128	; 0x80
 8002c16:	d139      	bne.n	8002c8c <vKeyScan+0x738>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Up_ShortPress > CNT_KEY_SHORT && Key.Up_ShortPress != CNT_KEY_SHORT + 2)
 8002c18:	4b3e      	ldr	r3, [pc, #248]	; (8002d14 <vKeyScan+0x7c0>)
 8002c1a:	7e9b      	ldrb	r3, [r3, #26]
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d910      	bls.n	8002c42 <vKeyScan+0x6ee>
 8002c20:	4b3c      	ldr	r3, [pc, #240]	; (8002d14 <vKeyScan+0x7c0>)
 8002c22:	7e9b      	ldrb	r3, [r3, #26]
 8002c24:	2b06      	cmp	r3, #6
 8002c26:	d00c      	beq.n	8002c42 <vKeyScan+0x6ee>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Up;
 8002c28:	2323      	movs	r3, #35	; 0x23
 8002c2a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002c2c:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <vKeyScan+0x7c8>)
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	f107 010f 	add.w	r1, r7, #15
 8002c34:	2300      	movs	r3, #0
 8002c36:	2200      	movs	r2, #0
 8002c38:	f004 f9ae 	bl	8006f98 <xQueueGenericSend>

				Key.Up_ShortPress = 0; // Сброс счетика выдержки
 8002c3c:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <vKeyScan+0x7c0>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	769a      	strb	r2, [r3, #26]
			}

			if (Key.Up_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002c42:	4b34      	ldr	r3, [pc, #208]	; (8002d14 <vKeyScan+0x7c0>)
 8002c44:	7e9b      	ldrb	r3, [r3, #26]
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d005      	beq.n	8002c56 <vKeyScan+0x702>
			{
				Key.Up_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002c4a:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <vKeyScan+0x7c0>)
 8002c4c:	7e9b      	ldrb	r3, [r3, #26]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <vKeyScan+0x7c0>)
 8002c54:	769a      	strb	r2, [r3, #26]
			}


			Key.Up_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002c56:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <vKeyScan+0x7c0>)
 8002c58:	7edb      	ldrb	r3, [r3, #27]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <vKeyScan+0x7c0>)
 8002c60:	76da      	strb	r2, [r3, #27]
			if (Key.Up_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002c62:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <vKeyScan+0x7c0>)
 8002c64:	7edb      	ldrb	r3, [r3, #27]
 8002c66:	2b32      	cmp	r3, #50	; 0x32
 8002c68:	d916      	bls.n	8002c98 <vKeyScan+0x744>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Up;
 8002c6a:	2324      	movs	r3, #36	; 0x24
 8002c6c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <vKeyScan+0x7c8>)
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	f107 010f 	add.w	r1, r7, #15
 8002c76:	2300      	movs	r3, #0
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f004 f98d 	bl	8006f98 <xQueueGenericSend>


				Key.Up_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002c7e:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <vKeyScan+0x7c0>)
 8002c80:	2206      	movs	r2, #6
 8002c82:	769a      	strb	r2, [r3, #26]
				Key.Up_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002c84:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <vKeyScan+0x7c0>)
 8002c86:	2225      	movs	r2, #37	; 0x25
 8002c88:	76da      	strb	r2, [r3, #27]
 8002c8a:	e005      	b.n	8002c98 <vKeyScan+0x744>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Up_ShortPress = 0;
 8002c8c:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <vKeyScan+0x7c0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	769a      	strb	r2, [r3, #26]
			Key.Up_LongPress = 0;
 8002c92:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <vKeyScan+0x7c0>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	76da      	strb	r2, [r3, #27]
		}
		if (WelderUnit.IndicatorPanel.KeyState[1] == 64)
 8002c98:	4b1f      	ldr	r3, [pc, #124]	; (8002d18 <vKeyScan+0x7c4>)
 8002c9a:	7f9b      	ldrb	r3, [r3, #30]
 8002c9c:	2b40      	cmp	r3, #64	; 0x40
 8002c9e:	d13f      	bne.n	8002d20 <vKeyScan+0x7cc>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Down_ShortPress > CNT_KEY_SHORT && Key.Down_ShortPress != CNT_KEY_SHORT + 2)
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <vKeyScan+0x7c0>)
 8002ca2:	7f1b      	ldrb	r3, [r3, #28]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d910      	bls.n	8002cca <vKeyScan+0x776>
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <vKeyScan+0x7c0>)
 8002caa:	7f1b      	ldrb	r3, [r3, #28]
 8002cac:	2b06      	cmp	r3, #6
 8002cae:	d00c      	beq.n	8002cca <vKeyScan+0x776>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Down;
 8002cb0:	2321      	movs	r3, #33	; 0x21
 8002cb2:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <vKeyScan+0x7c8>)
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	f107 010f 	add.w	r1, r7, #15
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f004 f96a 	bl	8006f98 <xQueueGenericSend>

				Key.Down_ShortPress = 0; // Сброс счетика выдержки
 8002cc4:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <vKeyScan+0x7c0>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	771a      	strb	r2, [r3, #28]
			}

			if (Key.Down_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <vKeyScan+0x7c0>)
 8002ccc:	7f1b      	ldrb	r3, [r3, #28]
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d005      	beq.n	8002cde <vKeyScan+0x78a>
			{
				Key.Down_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <vKeyScan+0x7c0>)
 8002cd4:	7f1b      	ldrb	r3, [r3, #28]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <vKeyScan+0x7c0>)
 8002cdc:	771a      	strb	r2, [r3, #28]
			}


			Key.Down_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <vKeyScan+0x7c0>)
 8002ce0:	7f5b      	ldrb	r3, [r3, #29]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <vKeyScan+0x7c0>)
 8002ce8:	775a      	strb	r2, [r3, #29]
			if (Key.Down_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <vKeyScan+0x7c0>)
 8002cec:	7f5b      	ldrb	r3, [r3, #29]
 8002cee:	2b32      	cmp	r3, #50	; 0x32
 8002cf0:	d91c      	bls.n	8002d2c <vKeyScan+0x7d8>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Down;
 8002cf2:	2322      	movs	r3, #34	; 0x22
 8002cf4:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <vKeyScan+0x7c8>)
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	f107 010f 	add.w	r1, r7, #15
 8002cfe:	2300      	movs	r3, #0
 8002d00:	2200      	movs	r2, #0
 8002d02:	f004 f949 	bl	8006f98 <xQueueGenericSend>


				Key.Down_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002d06:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <vKeyScan+0x7c0>)
 8002d08:	2206      	movs	r2, #6
 8002d0a:	771a      	strb	r2, [r3, #28]
				Key.Down_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002d0c:	4b01      	ldr	r3, [pc, #4]	; (8002d14 <vKeyScan+0x7c0>)
 8002d0e:	2225      	movs	r2, #37	; 0x25
 8002d10:	775a      	strb	r2, [r3, #29]
 8002d12:	e00b      	b.n	8002d2c <vKeyScan+0x7d8>
 8002d14:	200045a0 	.word	0x200045a0
 8002d18:	20003d3c 	.word	0x20003d3c
 8002d1c:	20004590 	.word	0x20004590


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Down_ShortPress = 0;
 8002d20:	4b94      	ldr	r3, [pc, #592]	; (8002f74 <vKeyScan+0xa20>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	771a      	strb	r2, [r3, #28]
			Key.Down_LongPress = 0;
 8002d26:	4b93      	ldr	r3, [pc, #588]	; (8002f74 <vKeyScan+0xa20>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	775a      	strb	r2, [r3, #29]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 32) // ПАРКОВКА, АВТО: [1], "-" - 32, "+" - 16, , STLED №5;
 8002d2c:	4b92      	ldr	r3, [pc, #584]	; (8002f78 <vKeyScan+0xa24>)
 8002d2e:	7f9b      	ldrb	r3, [r3, #30]
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d139      	bne.n	8002da8 <vKeyScan+0x854>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Parking_ShortPress > CNT_KEY_SHORT && Key.Parking_ShortPress != CNT_KEY_SHORT + 2)
 8002d34:	4b8f      	ldr	r3, [pc, #572]	; (8002f74 <vKeyScan+0xa20>)
 8002d36:	7f9b      	ldrb	r3, [r3, #30]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d910      	bls.n	8002d5e <vKeyScan+0x80a>
 8002d3c:	4b8d      	ldr	r3, [pc, #564]	; (8002f74 <vKeyScan+0xa20>)
 8002d3e:	7f9b      	ldrb	r3, [r3, #30]
 8002d40:	2b06      	cmp	r3, #6
 8002d42:	d00c      	beq.n	8002d5e <vKeyScan+0x80a>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Parking;
 8002d44:	2319      	movs	r3, #25
 8002d46:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002d48:	4b8c      	ldr	r3, [pc, #560]	; (8002f7c <vKeyScan+0xa28>)
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	f107 010f 	add.w	r1, r7, #15
 8002d50:	2300      	movs	r3, #0
 8002d52:	2200      	movs	r2, #0
 8002d54:	f004 f920 	bl	8006f98 <xQueueGenericSend>


				Key.Parking_ShortPress = 0; // Сброс счетика выдержки
 8002d58:	4b86      	ldr	r3, [pc, #536]	; (8002f74 <vKeyScan+0xa20>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	779a      	strb	r2, [r3, #30]
			}

			if (Key.Parking_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002d5e:	4b85      	ldr	r3, [pc, #532]	; (8002f74 <vKeyScan+0xa20>)
 8002d60:	7f9b      	ldrb	r3, [r3, #30]
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d005      	beq.n	8002d72 <vKeyScan+0x81e>
			{
				Key.Parking_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002d66:	4b83      	ldr	r3, [pc, #524]	; (8002f74 <vKeyScan+0xa20>)
 8002d68:	7f9b      	ldrb	r3, [r3, #30]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b81      	ldr	r3, [pc, #516]	; (8002f74 <vKeyScan+0xa20>)
 8002d70:	779a      	strb	r2, [r3, #30]
			}


			Key.Parking_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002d72:	4b80      	ldr	r3, [pc, #512]	; (8002f74 <vKeyScan+0xa20>)
 8002d74:	7fdb      	ldrb	r3, [r3, #31]
 8002d76:	3301      	adds	r3, #1
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4b7e      	ldr	r3, [pc, #504]	; (8002f74 <vKeyScan+0xa20>)
 8002d7c:	77da      	strb	r2, [r3, #31]
			if (Key.Parking_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002d7e:	4b7d      	ldr	r3, [pc, #500]	; (8002f74 <vKeyScan+0xa20>)
 8002d80:	7fdb      	ldrb	r3, [r3, #31]
 8002d82:	2b32      	cmp	r3, #50	; 0x32
 8002d84:	d916      	bls.n	8002db4 <vKeyScan+0x860>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Parking;
 8002d86:	231a      	movs	r3, #26
 8002d88:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002d8a:	4b7c      	ldr	r3, [pc, #496]	; (8002f7c <vKeyScan+0xa28>)
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	f107 010f 	add.w	r1, r7, #15
 8002d92:	2300      	movs	r3, #0
 8002d94:	2200      	movs	r2, #0
 8002d96:	f004 f8ff 	bl	8006f98 <xQueueGenericSend>

				Key.Parking_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002d9a:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <vKeyScan+0xa20>)
 8002d9c:	2206      	movs	r2, #6
 8002d9e:	779a      	strb	r2, [r3, #30]
				Key.Parking_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002da0:	4b74      	ldr	r3, [pc, #464]	; (8002f74 <vKeyScan+0xa20>)
 8002da2:	2225      	movs	r2, #37	; 0x25
 8002da4:	77da      	strb	r2, [r3, #31]
 8002da6:	e005      	b.n	8002db4 <vKeyScan+0x860>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Parking_ShortPress = 0;
 8002da8:	4b72      	ldr	r3, [pc, #456]	; (8002f74 <vKeyScan+0xa20>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	779a      	strb	r2, [r3, #30]
			Key.Parking_LongPress = 0;
 8002dae:	4b71      	ldr	r3, [pc, #452]	; (8002f74 <vKeyScan+0xa20>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	77da      	strb	r2, [r3, #31]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 16)
 8002db4:	4b70      	ldr	r3, [pc, #448]	; (8002f78 <vKeyScan+0xa24>)
 8002db6:	7f9b      	ldrb	r3, [r3, #30]
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d144      	bne.n	8002e46 <vKeyScan+0x8f2>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Auto_ShortPress > CNT_KEY_SHORT && Key.Auto_ShortPress != CNT_KEY_SHORT + 2)
 8002dbc:	4b6d      	ldr	r3, [pc, #436]	; (8002f74 <vKeyScan+0xa20>)
 8002dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d912      	bls.n	8002dec <vKeyScan+0x898>
 8002dc6:	4b6b      	ldr	r3, [pc, #428]	; (8002f74 <vKeyScan+0xa20>)
 8002dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dcc:	2b06      	cmp	r3, #6
 8002dce:	d00d      	beq.n	8002dec <vKeyScan+0x898>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Auto;
 8002dd0:	231b      	movs	r3, #27
 8002dd2:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002dd4:	4b69      	ldr	r3, [pc, #420]	; (8002f7c <vKeyScan+0xa28>)
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	f107 010f 	add.w	r1, r7, #15
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2200      	movs	r2, #0
 8002de0:	f004 f8da 	bl	8006f98 <xQueueGenericSend>

				Key.Auto_ShortPress = 0; // Сброс счетика выдержки
 8002de4:	4b63      	ldr	r3, [pc, #396]	; (8002f74 <vKeyScan+0xa20>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2020 	strb.w	r2, [r3, #32]
			}

			if (Key.Auto_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002dec:	4b61      	ldr	r3, [pc, #388]	; (8002f74 <vKeyScan+0xa20>)
 8002dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d007      	beq.n	8002e06 <vKeyScan+0x8b2>
			{
				Key.Auto_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002df6:	4b5f      	ldr	r3, [pc, #380]	; (8002f74 <vKeyScan+0xa20>)
 8002df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	4b5c      	ldr	r3, [pc, #368]	; (8002f74 <vKeyScan+0xa20>)
 8002e02:	f883 2020 	strb.w	r2, [r3, #32]
			}


			Key.Auto_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002e06:	4b5b      	ldr	r3, [pc, #364]	; (8002f74 <vKeyScan+0xa20>)
 8002e08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	4b58      	ldr	r3, [pc, #352]	; (8002f74 <vKeyScan+0xa20>)
 8002e12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			if (Key.Auto_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002e16:	4b57      	ldr	r3, [pc, #348]	; (8002f74 <vKeyScan+0xa20>)
 8002e18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e1c:	2b32      	cmp	r3, #50	; 0x32
 8002e1e:	d91a      	bls.n	8002e56 <vKeyScan+0x902>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Auto;
 8002e20:	231c      	movs	r3, #28
 8002e22:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002e24:	4b55      	ldr	r3, [pc, #340]	; (8002f7c <vKeyScan+0xa28>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	f107 010f 	add.w	r1, r7, #15
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f004 f8b2 	bl	8006f98 <xQueueGenericSend>

				Key.Auto_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002e34:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <vKeyScan+0xa20>)
 8002e36:	2206      	movs	r2, #6
 8002e38:	f883 2020 	strb.w	r2, [r3, #32]
				Key.Auto_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002e3c:	4b4d      	ldr	r3, [pc, #308]	; (8002f74 <vKeyScan+0xa20>)
 8002e3e:	2225      	movs	r2, #37	; 0x25
 8002e40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002e44:	e007      	b.n	8002e56 <vKeyScan+0x902>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Auto_ShortPress = 0;
 8002e46:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <vKeyScan+0xa20>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2020 	strb.w	r2, [r3, #32]
			Key.Auto_LongPress = 0;
 8002e4e:	4b49      	ldr	r3, [pc, #292]	; (8002f74 <vKeyScan+0xa20>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 8)
 8002e56:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <vKeyScan+0xa24>)
 8002e58:	7f9b      	ldrb	r3, [r3, #30]
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d144      	bne.n	8002ee8 <vKeyScan+0x994>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.StartStop_ShortPress > CNT_KEY_SHORT && Key.StartStop_ShortPress != CNT_KEY_SHORT + 2)
 8002e5e:	4b45      	ldr	r3, [pc, #276]	; (8002f74 <vKeyScan+0xa20>)
 8002e60:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d912      	bls.n	8002e8e <vKeyScan+0x93a>
 8002e68:	4b42      	ldr	r3, [pc, #264]	; (8002f74 <vKeyScan+0xa20>)
 8002e6a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d00d      	beq.n	8002e8e <vKeyScan+0x93a>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_StartStop;
 8002e72:	231d      	movs	r3, #29
 8002e74:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002e76:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <vKeyScan+0xa28>)
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	f107 010f 	add.w	r1, r7, #15
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2200      	movs	r2, #0
 8002e82:	f004 f889 	bl	8006f98 <xQueueGenericSend>

				Key.StartStop_ShortPress = 0; // Сброс счетика выдержки
 8002e86:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <vKeyScan+0xa20>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}

			if (Key.StartStop_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002e8e:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <vKeyScan+0xa20>)
 8002e90:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e94:	2b06      	cmp	r3, #6
 8002e96:	d007      	beq.n	8002ea8 <vKeyScan+0x954>
			{
				Key.StartStop_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002e98:	4b36      	ldr	r3, [pc, #216]	; (8002f74 <vKeyScan+0xa20>)
 8002e9a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <vKeyScan+0xa20>)
 8002ea4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}


			Key.StartStop_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002ea8:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <vKeyScan+0xa20>)
 8002eaa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002eae:	3301      	adds	r3, #1
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <vKeyScan+0xa20>)
 8002eb4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			if (Key.StartStop_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002eb8:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <vKeyScan+0xa20>)
 8002eba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002ebe:	2b32      	cmp	r3, #50	; 0x32
 8002ec0:	d91a      	bls.n	8002ef8 <vKeyScan+0x9a4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_StartStop;
 8002ec2:	231e      	movs	r3, #30
 8002ec4:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002ec6:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <vKeyScan+0xa28>)
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	f107 010f 	add.w	r1, r7, #15
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f004 f861 	bl	8006f98 <xQueueGenericSend>

				Key.StartStop_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002ed6:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <vKeyScan+0xa20>)
 8002ed8:	2206      	movs	r2, #6
 8002eda:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				Key.StartStop_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002ede:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <vKeyScan+0xa20>)
 8002ee0:	2225      	movs	r2, #37	; 0x25
 8002ee2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8002ee6:	e007      	b.n	8002ef8 <vKeyScan+0x9a4>
			}

		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.StartStop_ShortPress = 0;
 8002ee8:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <vKeyScan+0xa20>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			Key.StartStop_LongPress = 0;
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <vKeyScan+0xa20>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}

		// *********************************************************Комбинации клавишь*********************************************************

		if (WelderUnit.IndicatorPanel.KeyState[3] == 1 && WelderUnit.IndicatorPanel.KeyState[1] == 2) // "ПРОГРАММА" "-" одновременно с "+"
 8002ef8:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <vKeyScan+0xa24>)
 8002efa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d11f      	bne.n	8002f42 <vKeyScan+0x9ee>
 8002f02:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <vKeyScan+0xa24>)
 8002f04:	7f9b      	ldrb	r3, [r3, #30]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d11b      	bne.n	8002f42 <vKeyScan+0x9ee>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_L_and_R > CNT_KEY_SHORT && Key.Program_ShortPress_L_and_R != CNT_KEY_SHORT + 2)
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <vKeyScan+0xa20>)
 8002f0c:	7e1b      	ldrb	r3, [r3, #24]
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d906      	bls.n	8002f20 <vKeyScan+0x9cc>
 8002f12:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <vKeyScan+0xa20>)
 8002f14:	7e1b      	ldrb	r3, [r3, #24]
 8002f16:	2b06      	cmp	r3, #6
 8002f18:	d002      	beq.n	8002f20 <vKeyScan+0x9cc>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_StartStop;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_L_and_R = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 8002f1a:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <vKeyScan+0xa20>)
 8002f1c:	2207      	movs	r2, #7
 8002f1e:	761a      	strb	r2, [r3, #24]
			}

			if (Key.Program_ShortPress_L_and_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002f20:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <vKeyScan+0xa20>)
 8002f22:	7e1b      	ldrb	r3, [r3, #24]
 8002f24:	2b06      	cmp	r3, #6
 8002f26:	d005      	beq.n	8002f34 <vKeyScan+0x9e0>
			{
				Key.Program_ShortPress_L_and_R++; // Счетчик для определения короткого нажатия на кнопку
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <vKeyScan+0xa20>)
 8002f2a:	7e1b      	ldrb	r3, [r3, #24]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <vKeyScan+0xa20>)
 8002f32:	761a      	strb	r2, [r3, #24]
			}


			Key.Program_LongPress_L_and_R++; // Счетчик для определения длинного нажатия на кнопку
 8002f34:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <vKeyScan+0xa20>)
 8002f36:	7e5b      	ldrb	r3, [r3, #25]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <vKeyScan+0xa20>)
 8002f3e:	765a      	strb	r2, [r3, #25]
			if (Key.Program_LongPress_L_and_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002f40:	e013      	b.n	8002f6a <vKeyScan+0xa16>
			}

		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_L_and_R >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <vKeyScan+0xa20>)
 8002f44:	7e1b      	ldrb	r3, [r3, #24]
 8002f46:	2b06      	cmp	r3, #6
 8002f48:	d909      	bls.n	8002f5e <vKeyScan+0xa0a>
			{
				nKeyPressed = press_short_Program_L_and_R;
 8002f4a:	231f      	movs	r3, #31
 8002f4c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <vKeyScan+0xa28>)
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	f107 010f 	add.w	r1, r7, #15
 8002f56:	2300      	movs	r3, #0
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f004 f81d 	bl	8006f98 <xQueueGenericSend>
//
//				Key.Program_ShortPress_R = 0;
//				Key.Program_LongPress_R = 0;
			}

			Key.Program_ShortPress_L_and_R = 0;
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <vKeyScan+0xa20>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	761a      	strb	r2, [r3, #24]
			Key.Program_LongPress_L_and_R = 0;
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <vKeyScan+0xa20>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	765a      	strb	r2, [r3, #25]

		}



		vTaskDelay(TIME_KEY_SCAN / portTICK_RATE_MS);
 8002f6a:	2014      	movs	r0, #20
 8002f6c:	f004 fe5a 	bl	8007c24 <vTaskDelay>
		PCB_KeyScan();
 8002f70:	f7ff baf7 	b.w	8002562 <vKeyScan+0xe>
 8002f74:	200045a0 	.word	0x200045a0
 8002f78:	20003d3c 	.word	0x20003d3c
 8002f7c:	20004590 	.word	0x20004590

08002f80 <vIndicatorPanel_Out>:
	}
	vTaskDelete(NULL);
}

void vIndicatorPanel_Out(void *pvParameters)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	WelderUnit.Xs = 10;
 8002f88:	4b2c      	ldr	r3, [pc, #176]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002f8a:	220a      	movs	r2, #10
 8002f8c:	801a      	strh	r2, [r3, #0]
	WelderUnit.Xf = 30;
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002f90:	221e      	movs	r2, #30
 8002f92:	805a      	strh	r2, [r3, #2]
	WelderUnit.Steps = 0;
 8002f94:	4b29      	ldr	r3, [pc, #164]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	81da      	strh	r2, [r3, #14]
	WelderUnit.Delay_s = 10;
 8002f9a:	4b28      	ldr	r3, [pc, #160]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002f9c:	220a      	movs	r2, #10
 8002f9e:	729a      	strb	r2, [r3, #10]
	WelderUnit.Speed = 120;
 8002fa0:	4b26      	ldr	r3, [pc, #152]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002fa2:	2278      	movs	r2, #120	; 0x78
 8002fa4:	80da      	strh	r2, [r3, #6]
	WelderUnit.Delay_f = 20;
 8002fa6:	4b25      	ldr	r3, [pc, #148]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002fa8:	2214      	movs	r2, #20
 8002faa:	72da      	strb	r2, [r3, #11]
	WelderUnit.Program = 4;
 8002fac:	4b23      	ldr	r3, [pc, #140]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002fae:	2204      	movs	r2, #4
 8002fb0:	819a      	strh	r2, [r3, #12]

	WelderUnit.GoTo = WelderUnit.Xf;
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002fb4:	885a      	ldrh	r2, [r3, #2]
 8002fb6:	4b21      	ldr	r3, [pc, #132]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002fb8:	811a      	strh	r2, [r3, #8]
	WelderUnit.Position = 0;
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	809a      	strh	r2, [r3, #4]
	WelderUnit.State = 0;
 8002fc0:	4b1e      	ldr	r3, [pc, #120]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	741a      	strb	r2, [r3, #16]

	WelderUnit.IndicatorPanel.Brightness = 2;
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002fc8:	2202      	movs	r2, #2
 8002fca:	771a      	strb	r2, [r3, #28]

//	WelderUnit.IndicatorPanel.LEDsState |= LED_AUTO;
//
//	WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING;

	IndicatorPanel_Ini();
 8002fcc:	f7fd fd76 	bl	8000abc <IndicatorPanel_Ini>

	IndicatorPanel_SetBrightness(&WelderUnit.IndicatorPanel);
 8002fd0:	481b      	ldr	r0, [pc, #108]	; (8003040 <vIndicatorPanel_Out+0xc0>)
 8002fd2:	f7fd fe3f 	bl	8000c54 <IndicatorPanel_SetBrightness>

	vTaskDelay(100 / portTICK_RATE_MS);
 8002fd6:	2064      	movs	r0, #100	; 0x64
 8002fd8:	f004 fe24 	bl	8007c24 <vTaskDelay>

		//PCB_LEDs_OUT(PCB_LEDs_OUT(LEDs_val))



		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002fde:	7c1b      	ldrb	r3, [r3, #16]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <vIndicatorPanel_Out+0x70>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Position;
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002fea:	889a      	ldrh	r2, [r3, #4]
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002fee:	825a      	strh	r2, [r3, #18]
		}

		if (!(WelderUnit.State & 0x01)) // Если каретка не в движении то отображать точку начала варки
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002ff2:	7c1b      	ldrb	r3, [r3, #16]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d103      	bne.n	8003004 <vIndicatorPanel_Out+0x84>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Xs;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8002ffe:	881a      	ldrh	r2, [r3, #0]
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8003002:	825a      	strh	r2, [r3, #18]
		}

		WelderUnit.IndicatorPanel.Xf = WelderUnit.Xf;
 8003004:	4b0d      	ldr	r3, [pc, #52]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8003006:	885a      	ldrh	r2, [r3, #2]
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <vIndicatorPanel_Out+0xbc>)
 800300a:	829a      	strh	r2, [r3, #20]
		WelderUnit.IndicatorPanel.Delay_s = WelderUnit.Delay_s;
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <vIndicatorPanel_Out+0xbc>)
 800300e:	7a9a      	ldrb	r2, [r3, #10]
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8003012:	759a      	strb	r2, [r3, #22]
		WelderUnit.IndicatorPanel.Speed = WelderUnit.Speed;
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8003016:	88da      	ldrh	r2, [r3, #6]
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <vIndicatorPanel_Out+0xbc>)
 800301a:	831a      	strh	r2, [r3, #24]
		WelderUnit.IndicatorPanel.Delay_f = WelderUnit.Delay_f;
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <vIndicatorPanel_Out+0xbc>)
 800301e:	7ada      	ldrb	r2, [r3, #11]
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8003022:	75da      	strb	r2, [r3, #23]
		WelderUnit.IndicatorPanel.Program = WelderUnit.Program;
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <vIndicatorPanel_Out+0xbc>)
 8003026:	899a      	ldrh	r2, [r3, #12]
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <vIndicatorPanel_Out+0xbc>)
 800302a:	835a      	strh	r2, [r3, #26]


		IndicatorPanel_SetValue(&WelderUnit.IndicatorPanel);
 800302c:	4804      	ldr	r0, [pc, #16]	; (8003040 <vIndicatorPanel_Out+0xc0>)
 800302e:	f7fd fd5f 	bl	8000af0 <IndicatorPanel_SetValue>

		vTaskDelay(100 / portTICK_RATE_MS);
 8003032:	2064      	movs	r0, #100	; 0x64
 8003034:	f004 fdf6 	bl	8007c24 <vTaskDelay>
		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 8003038:	e7d0      	b.n	8002fdc <vIndicatorPanel_Out+0x5c>
 800303a:	bf00      	nop
 800303c:	20003d3c 	.word	0x20003d3c
 8003040:	20003d4e 	.word	0x20003d4e

08003044 <vBuzzer_beep>:
	vTaskDelete(NULL);
}


void vBuzzer_beep(void *pvParameters)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	uint8_t lReceivedValue;
	portBASE_TYPE xStatus;

	for(;;)
	{
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 800304c:	4b58      	ldr	r3, [pc, #352]	; (80031b0 <vBuzzer_beep+0x16c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f107 010b 	add.w	r1, r7, #11
 8003054:	f04f 32ff 	mov.w	r2, #4294967295
 8003058:	4618      	mov	r0, r3
 800305a:	f004 f8f5 	bl	8007248 <xQueueReceive>
 800305e:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS ) // Если данные были успешно приняты из очереди
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b01      	cmp	r3, #1
 8003064:	f040 80a0 	bne.w	80031a8 <vBuzzer_beep+0x164>
		{

		switch(lReceivedValue)
 8003068:	7afb      	ldrb	r3, [r7, #11]
 800306a:	2b05      	cmp	r3, #5
 800306c:	f200 809d 	bhi.w	80031aa <vBuzzer_beep+0x166>
 8003070:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <vBuzzer_beep+0x34>)
 8003072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003076:	bf00      	nop
 8003078:	08003091 	.word	0x08003091
 800307c:	0800309d 	.word	0x0800309d
 8003080:	080030bf 	.word	0x080030bf
 8003084:	080030e1 	.word	0x080030e1
 8003088:	08003123 	.word	0x08003123
 800308c:	08003185 	.word	0x08003185
		{
		case beep_off:
		{
			BUZZER_OFF
 8003090:	2200      	movs	r2, #0
 8003092:	2110      	movs	r1, #16
 8003094:	4847      	ldr	r0, [pc, #284]	; (80031b4 <vBuzzer_beep+0x170>)
 8003096:	f001 fa3a 	bl	800450e <HAL_GPIO_WritePin>
			break;
 800309a:	e086      	b.n	80031aa <vBuzzer_beep+0x166>
		}

		case beep_click:
		{
			BUZZER_ON
 800309c:	2201      	movs	r2, #1
 800309e:	2110      	movs	r1, #16
 80030a0:	4844      	ldr	r0, [pc, #272]	; (80031b4 <vBuzzer_beep+0x170>)
 80030a2:	f001 fa34 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(10 / portTICK_RATE_MS);
 80030a6:	200a      	movs	r0, #10
 80030a8:	f004 fdbc 	bl	8007c24 <vTaskDelay>
			BUZZER_OFF
 80030ac:	2200      	movs	r2, #0
 80030ae:	2110      	movs	r1, #16
 80030b0:	4840      	ldr	r0, [pc, #256]	; (80031b4 <vBuzzer_beep+0x170>)
 80030b2:	f001 fa2c 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(50 / portTICK_RATE_MS);
 80030b6:	2032      	movs	r0, #50	; 0x32
 80030b8:	f004 fdb4 	bl	8007c24 <vTaskDelay>
			break;
 80030bc:	e075      	b.n	80031aa <vBuzzer_beep+0x166>
		}

		case beep_1short:
		{
			BUZZER_ON
 80030be:	2201      	movs	r2, #1
 80030c0:	2110      	movs	r1, #16
 80030c2:	483c      	ldr	r0, [pc, #240]	; (80031b4 <vBuzzer_beep+0x170>)
 80030c4:	f001 fa23 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80030c8:	2064      	movs	r0, #100	; 0x64
 80030ca:	f004 fdab 	bl	8007c24 <vTaskDelay>
			BUZZER_OFF
 80030ce:	2200      	movs	r2, #0
 80030d0:	2110      	movs	r1, #16
 80030d2:	4838      	ldr	r0, [pc, #224]	; (80031b4 <vBuzzer_beep+0x170>)
 80030d4:	f001 fa1b 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80030d8:	2064      	movs	r0, #100	; 0x64
 80030da:	f004 fda3 	bl	8007c24 <vTaskDelay>
			break;
 80030de:	e064      	b.n	80031aa <vBuzzer_beep+0x166>
		}

		case beep_2short:
		{
			BUZZER_ON
 80030e0:	2201      	movs	r2, #1
 80030e2:	2110      	movs	r1, #16
 80030e4:	4833      	ldr	r0, [pc, #204]	; (80031b4 <vBuzzer_beep+0x170>)
 80030e6:	f001 fa12 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80030ea:	2064      	movs	r0, #100	; 0x64
 80030ec:	f004 fd9a 	bl	8007c24 <vTaskDelay>
			BUZZER_OFF
 80030f0:	2200      	movs	r2, #0
 80030f2:	2110      	movs	r1, #16
 80030f4:	482f      	ldr	r0, [pc, #188]	; (80031b4 <vBuzzer_beep+0x170>)
 80030f6:	f001 fa0a 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80030fa:	2064      	movs	r0, #100	; 0x64
 80030fc:	f004 fd92 	bl	8007c24 <vTaskDelay>

			BUZZER_ON
 8003100:	2201      	movs	r2, #1
 8003102:	2110      	movs	r1, #16
 8003104:	482b      	ldr	r0, [pc, #172]	; (80031b4 <vBuzzer_beep+0x170>)
 8003106:	f001 fa02 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 800310a:	2064      	movs	r0, #100	; 0x64
 800310c:	f004 fd8a 	bl	8007c24 <vTaskDelay>
			BUZZER_OFF
 8003110:	2200      	movs	r2, #0
 8003112:	2110      	movs	r1, #16
 8003114:	4827      	ldr	r0, [pc, #156]	; (80031b4 <vBuzzer_beep+0x170>)
 8003116:	f001 f9fa 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 800311a:	2064      	movs	r0, #100	; 0x64
 800311c:	f004 fd82 	bl	8007c24 <vTaskDelay>
			break;
 8003120:	e043      	b.n	80031aa <vBuzzer_beep+0x166>
		}

		case beep_3short:
		{
			BUZZER_ON
 8003122:	2201      	movs	r2, #1
 8003124:	2110      	movs	r1, #16
 8003126:	4823      	ldr	r0, [pc, #140]	; (80031b4 <vBuzzer_beep+0x170>)
 8003128:	f001 f9f1 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 800312c:	2064      	movs	r0, #100	; 0x64
 800312e:	f004 fd79 	bl	8007c24 <vTaskDelay>
			BUZZER_OFF
 8003132:	2200      	movs	r2, #0
 8003134:	2110      	movs	r1, #16
 8003136:	481f      	ldr	r0, [pc, #124]	; (80031b4 <vBuzzer_beep+0x170>)
 8003138:	f001 f9e9 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 800313c:	2064      	movs	r0, #100	; 0x64
 800313e:	f004 fd71 	bl	8007c24 <vTaskDelay>

			BUZZER_ON
 8003142:	2201      	movs	r2, #1
 8003144:	2110      	movs	r1, #16
 8003146:	481b      	ldr	r0, [pc, #108]	; (80031b4 <vBuzzer_beep+0x170>)
 8003148:	f001 f9e1 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 800314c:	2064      	movs	r0, #100	; 0x64
 800314e:	f004 fd69 	bl	8007c24 <vTaskDelay>
			BUZZER_OFF
 8003152:	2200      	movs	r2, #0
 8003154:	2110      	movs	r1, #16
 8003156:	4817      	ldr	r0, [pc, #92]	; (80031b4 <vBuzzer_beep+0x170>)
 8003158:	f001 f9d9 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 800315c:	2064      	movs	r0, #100	; 0x64
 800315e:	f004 fd61 	bl	8007c24 <vTaskDelay>

			BUZZER_ON
 8003162:	2201      	movs	r2, #1
 8003164:	2110      	movs	r1, #16
 8003166:	4813      	ldr	r0, [pc, #76]	; (80031b4 <vBuzzer_beep+0x170>)
 8003168:	f001 f9d1 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 800316c:	2064      	movs	r0, #100	; 0x64
 800316e:	f004 fd59 	bl	8007c24 <vTaskDelay>
			BUZZER_OFF
 8003172:	2200      	movs	r2, #0
 8003174:	2110      	movs	r1, #16
 8003176:	480f      	ldr	r0, [pc, #60]	; (80031b4 <vBuzzer_beep+0x170>)
 8003178:	f001 f9c9 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 800317c:	2064      	movs	r0, #100	; 0x64
 800317e:	f004 fd51 	bl	8007c24 <vTaskDelay>
			break;
 8003182:	e012      	b.n	80031aa <vBuzzer_beep+0x166>
		}

		case beep_long:
		{
			BUZZER_ON
 8003184:	2201      	movs	r2, #1
 8003186:	2110      	movs	r1, #16
 8003188:	480a      	ldr	r0, [pc, #40]	; (80031b4 <vBuzzer_beep+0x170>)
 800318a:	f001 f9c0 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(500 / portTICK_RATE_MS);
 800318e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003192:	f004 fd47 	bl	8007c24 <vTaskDelay>
			BUZZER_OFF
 8003196:	2200      	movs	r2, #0
 8003198:	2110      	movs	r1, #16
 800319a:	4806      	ldr	r0, [pc, #24]	; (80031b4 <vBuzzer_beep+0x170>)
 800319c:	f001 f9b7 	bl	800450e <HAL_GPIO_WritePin>
			vTaskDelay(200 / portTICK_RATE_MS);
 80031a0:	20c8      	movs	r0, #200	; 0xc8
 80031a2:	f004 fd3f 	bl	8007c24 <vTaskDelay>
			break;
 80031a6:	e000      	b.n	80031aa <vBuzzer_beep+0x166>
		}

		}

		}
 80031a8:	bf00      	nop

		vTaskMissedYield(); // Переключение контекста.
 80031aa:	f005 f843 	bl	8008234 <vTaskMissedYield>
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 80031ae:	e74d      	b.n	800304c <vBuzzer_beep+0x8>
 80031b0:	20003d38 	.word	0x20003d38
 80031b4:	40010800 	.word	0x40010800

080031b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031bc:	f000 fb84 	bl	80038c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031c0:	f000 f81c 	bl	80031fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031c4:	f000 f90e 	bl	80033e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80031c8:	f000 f85e 	bl	8003288 <MX_SPI1_Init>
  MX_TIM3_Init();
 80031cc:	f000 f894 	bl	80032f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80031d0:	f003 fc0e 	bl	80069f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80031d4:	4a06      	ldr	r2, [pc, #24]	; (80031f0 <main+0x38>)
 80031d6:	2100      	movs	r1, #0
 80031d8:	4806      	ldr	r0, [pc, #24]	; (80031f4 <main+0x3c>)
 80031da:	f003 fc6f 	bl	8006abc <osThreadNew>
 80031de:	4603      	mov	r3, r0
 80031e0:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <main+0x40>)
 80031e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  freeRTOS_Tasks_Ini();
 80031e4:	f7fe fa7e 	bl	80016e4 <freeRTOS_Tasks_Ini>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80031e8:	f003 fc34 	bl	8006a54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80031ec:	e7fe      	b.n	80031ec <main+0x34>
 80031ee:	bf00      	nop
 80031f0:	08009330 	.word	0x08009330
 80031f4:	080035dd 	.word	0x080035dd
 80031f8:	200045d0 	.word	0x200045d0

080031fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b090      	sub	sp, #64	; 0x40
 8003200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003202:	f107 0318 	add.w	r3, r7, #24
 8003206:	2228      	movs	r2, #40	; 0x28
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f006 f822 	bl	8009254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003210:	1d3b      	adds	r3, r7, #4
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800321e:	2301      	movs	r3, #1
 8003220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003226:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003228:	2300      	movs	r3, #0
 800322a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800322c:	2301      	movs	r3, #1
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003230:	2302      	movs	r3, #2
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800323a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003240:	f107 0318 	add.w	r3, r7, #24
 8003244:	4618      	mov	r0, r3
 8003246:	f001 f993 	bl	8004570 <HAL_RCC_OscConfig>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003250:	f000 f9cd 	bl	80035ee <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003254:	230f      	movs	r3, #15
 8003256:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003258:	2302      	movs	r3, #2
 800325a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800326a:	1d3b      	adds	r3, r7, #4
 800326c:	2102      	movs	r1, #2
 800326e:	4618      	mov	r0, r3
 8003270:	f001 fbfe 	bl	8004a70 <HAL_RCC_ClockConfig>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800327a:	f000 f9b8 	bl	80035ee <Error_Handler>
  }
}
 800327e:	bf00      	nop
 8003280:	3740      	adds	r7, #64	; 0x40
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800328c:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <MX_SPI1_Init+0x68>)
 800328e:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <MX_SPI1_Init+0x6c>)
 8003290:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003292:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <MX_SPI1_Init+0x68>)
 8003294:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003298:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800329a:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <MX_SPI1_Init+0x68>)
 800329c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032a2:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <MX_SPI1_Init+0x68>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <MX_SPI1_Init+0x68>)
 80032aa:	2202      	movs	r2, #2
 80032ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <MX_SPI1_Init+0x68>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <MX_SPI1_Init+0x68>)
 80032b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <MX_SPI1_Init+0x68>)
 80032be:	2238      	movs	r2, #56	; 0x38
 80032c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <MX_SPI1_Init+0x68>)
 80032c4:	2280      	movs	r2, #128	; 0x80
 80032c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <MX_SPI1_Init+0x68>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <MX_SPI1_Init+0x68>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <MX_SPI1_Init+0x68>)
 80032d6:	220a      	movs	r2, #10
 80032d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032da:	4805      	ldr	r0, [pc, #20]	; (80032f0 <MX_SPI1_Init+0x68>)
 80032dc:	f001 fd30 	bl	8004d40 <HAL_SPI_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80032e6:	f000 f982 	bl	80035ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	2000461c 	.word	0x2000461c
 80032f4:	40013000 	.word	0x40013000

080032f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08e      	sub	sp, #56	; 0x38
 80032fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800330c:	f107 0320 	add.w	r3, r7, #32
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
 8003324:	615a      	str	r2, [r3, #20]
 8003326:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003328:	4b2c      	ldr	r3, [pc, #176]	; (80033dc <MX_TIM3_Init+0xe4>)
 800332a:	4a2d      	ldr	r2, [pc, #180]	; (80033e0 <MX_TIM3_Init+0xe8>)
 800332c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800332e:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <MX_TIM3_Init+0xe4>)
 8003330:	2247      	movs	r2, #71	; 0x47
 8003332:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003334:	4b29      	ldr	r3, [pc, #164]	; (80033dc <MX_TIM3_Init+0xe4>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800333a:	4b28      	ldr	r3, [pc, #160]	; (80033dc <MX_TIM3_Init+0xe4>)
 800333c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003340:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003342:	4b26      	ldr	r3, [pc, #152]	; (80033dc <MX_TIM3_Init+0xe4>)
 8003344:	2200      	movs	r2, #0
 8003346:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <MX_TIM3_Init+0xe4>)
 800334a:	2200      	movs	r2, #0
 800334c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800334e:	4823      	ldr	r0, [pc, #140]	; (80033dc <MX_TIM3_Init+0xe4>)
 8003350:	f002 fb66 	bl	8005a20 <HAL_TIM_Base_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800335a:	f000 f948 	bl	80035ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800335e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003368:	4619      	mov	r1, r3
 800336a:	481c      	ldr	r0, [pc, #112]	; (80033dc <MX_TIM3_Init+0xe4>)
 800336c:	f002 fef0 	bl	8006150 <HAL_TIM_ConfigClockSource>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003376:	f000 f93a 	bl	80035ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800337a:	4818      	ldr	r0, [pc, #96]	; (80033dc <MX_TIM3_Init+0xe4>)
 800337c:	f002 fb9f 	bl	8005abe <HAL_TIM_PWM_Init>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003386:	f000 f932 	bl	80035ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003392:	f107 0320 	add.w	r3, r7, #32
 8003396:	4619      	mov	r1, r3
 8003398:	4810      	ldr	r0, [pc, #64]	; (80033dc <MX_TIM3_Init+0xe4>)
 800339a:	f003 faab 	bl	80068f4 <HAL_TIMEx_MasterConfigSynchronization>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80033a4:	f000 f923 	bl	80035ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033a8:	2360      	movs	r3, #96	; 0x60
 80033aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	2200      	movs	r2, #0
 80033bc:	4619      	mov	r1, r3
 80033be:	4807      	ldr	r0, [pc, #28]	; (80033dc <MX_TIM3_Init+0xe4>)
 80033c0:	f002 fe08 	bl	8005fd4 <HAL_TIM_PWM_ConfigChannel>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80033ca:	f000 f910 	bl	80035ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80033ce:	4803      	ldr	r0, [pc, #12]	; (80033dc <MX_TIM3_Init+0xe4>)
 80033d0:	f000 f9b6 	bl	8003740 <HAL_TIM_MspPostInit>

}
 80033d4:	bf00      	nop
 80033d6:	3738      	adds	r7, #56	; 0x38
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	200045d4 	.word	0x200045d4
 80033e0:	40000400 	.word	0x40000400

080033e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ea:	f107 0310 	add.w	r3, r7, #16
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033f8:	4b71      	ldr	r3, [pc, #452]	; (80035c0 <MX_GPIO_Init+0x1dc>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	4a70      	ldr	r2, [pc, #448]	; (80035c0 <MX_GPIO_Init+0x1dc>)
 80033fe:	f043 0320 	orr.w	r3, r3, #32
 8003402:	6193      	str	r3, [r2, #24]
 8003404:	4b6e      	ldr	r3, [pc, #440]	; (80035c0 <MX_GPIO_Init+0x1dc>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f003 0320 	and.w	r3, r3, #32
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003410:	4b6b      	ldr	r3, [pc, #428]	; (80035c0 <MX_GPIO_Init+0x1dc>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	4a6a      	ldr	r2, [pc, #424]	; (80035c0 <MX_GPIO_Init+0x1dc>)
 8003416:	f043 0310 	orr.w	r3, r3, #16
 800341a:	6193      	str	r3, [r2, #24]
 800341c:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <MX_GPIO_Init+0x1dc>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003428:	4b65      	ldr	r3, [pc, #404]	; (80035c0 <MX_GPIO_Init+0x1dc>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	4a64      	ldr	r2, [pc, #400]	; (80035c0 <MX_GPIO_Init+0x1dc>)
 800342e:	f043 0304 	orr.w	r3, r3, #4
 8003432:	6193      	str	r3, [r2, #24]
 8003434:	4b62      	ldr	r3, [pc, #392]	; (80035c0 <MX_GPIO_Init+0x1dc>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	607b      	str	r3, [r7, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003440:	4b5f      	ldr	r3, [pc, #380]	; (80035c0 <MX_GPIO_Init+0x1dc>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4a5e      	ldr	r2, [pc, #376]	; (80035c0 <MX_GPIO_Init+0x1dc>)
 8003446:	f043 0308 	orr.w	r3, r3, #8
 800344a:	6193      	str	r3, [r2, #24]
 800344c:	4b5c      	ldr	r3, [pc, #368]	; (80035c0 <MX_GPIO_Init+0x1dc>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	603b      	str	r3, [r7, #0]
 8003456:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oDIR1_Pin, GPIO_PIN_RESET);
 8003458:	2200      	movs	r2, #0
 800345a:	f44f 7183 	mov.w	r1, #262	; 0x106
 800345e:	4859      	ldr	r0, [pc, #356]	; (80035c4 <MX_GPIO_Init+0x1e0>)
 8003460:	f001 f855 	bl	800450e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, oBuzer_Pin|oSyncArc_Pin|oSMD_EN1_Pin, GPIO_PIN_RESET);
 8003464:	2200      	movs	r2, #0
 8003466:	f44f 6111 	mov.w	r1, #2320	; 0x910
 800346a:	4857      	ldr	r0, [pc, #348]	; (80035c8 <MX_GPIO_Init+0x1e4>)
 800346c:	f001 f84f 	bl	800450e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin, GPIO_PIN_SET);
 8003470:	2201      	movs	r2, #1
 8003472:	2140      	movs	r1, #64	; 0x40
 8003474:	4854      	ldr	r0, [pc, #336]	; (80035c8 <MX_GPIO_Init+0x1e4>)
 8003476:	f001 f84a 	bl	800450e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin, GPIO_PIN_SET);
 800347a:	2201      	movs	r2, #1
 800347c:	2130      	movs	r1, #48	; 0x30
 800347e:	4851      	ldr	r0, [pc, #324]	; (80035c4 <MX_GPIO_Init+0x1e0>)
 8003480:	f001 f845 	bl	800450e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin, GPIO_PIN_SET);
 8003484:	2201      	movs	r2, #1
 8003486:	2103      	movs	r1, #3
 8003488:	4850      	ldr	r0, [pc, #320]	; (80035cc <MX_GPIO_Init+0x1e8>)
 800348a:	f001 f840 	bl	800450e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSolenoidValve2_Pin|oSolenoidValve1_Pin, GPIO_PIN_RESET);
 800348e:	2200      	movs	r2, #0
 8003490:	21c0      	movs	r1, #192	; 0xc0
 8003492:	484e      	ldr	r0, [pc, #312]	; (80035cc <MX_GPIO_Init+0x1e8>)
 8003494:	f001 f83b 	bl	800450e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : oSol_Valve_b_Heade_Pin oSol_Valve_a_Heade_Pin oSTLED316S_STB1_Pin oSTLED316S_STB2_Pin
                           oDIR1_Pin */
  GPIO_InitStruct.Pin = oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin
 8003498:	f44f 739b 	mov.w	r3, #310	; 0x136
 800349c:	613b      	str	r3, [r7, #16]
                          |oDIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800349e:	2301      	movs	r3, #1
 80034a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a6:	2302      	movs	r3, #2
 80034a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034aa:	f107 0310 	add.w	r3, r7, #16
 80034ae:	4619      	mov	r1, r3
 80034b0:	4844      	ldr	r0, [pc, #272]	; (80035c4 <MX_GPIO_Init+0x1e0>)
 80034b2:	f000 fe81 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : iPedal_L_Pin iPedal_R_Pin */
  GPIO_InitStruct.Pin = iPedal_L_Pin|iPedal_R_Pin;
 80034b6:	2305      	movs	r3, #5
 80034b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c2:	f107 0310 	add.w	r3, r7, #16
 80034c6:	4619      	mov	r1, r3
 80034c8:	483f      	ldr	r0, [pc, #252]	; (80035c8 <MX_GPIO_Init+0x1e4>)
 80034ca:	f000 fe75 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : oBuzer_Pin oSTLED316S_STB5_Pin oSyncArc_Pin oSMD_EN1_Pin */
  GPIO_InitStruct.Pin = oBuzer_Pin|oSTLED316S_STB5_Pin|oSyncArc_Pin|oSMD_EN1_Pin;
 80034ce:	f44f 6315 	mov.w	r3, #2384	; 0x950
 80034d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d4:	2301      	movs	r3, #1
 80034d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034dc:	2302      	movs	r3, #2
 80034de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e0:	f107 0310 	add.w	r3, r7, #16
 80034e4:	4619      	mov	r1, r3
 80034e6:	4838      	ldr	r0, [pc, #224]	; (80035c8 <MX_GPIO_Init+0x1e4>)
 80034e8:	f000 fe66 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : oSTLED316S_STB3_Pin oSTLED316S_STB4_Pin oSolenoidValve2_Pin oSolenoidValve1_Pin */
  GPIO_InitStruct.Pin = oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin|oSolenoidValve2_Pin|oSolenoidValve1_Pin;
 80034ec:	23c3      	movs	r3, #195	; 0xc3
 80034ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f0:	2301      	movs	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	2302      	movs	r3, #2
 80034fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fc:	f107 0310 	add.w	r3, r7, #16
 8003500:	4619      	mov	r1, r3
 8003502:	4832      	ldr	r0, [pc, #200]	; (80035cc <MX_GPIO_Init+0x1e8>)
 8003504:	f000 fe58 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN5_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN5_Pin;
 8003508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800350c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800350e:	4b30      	ldr	r3, [pc, #192]	; (80035d0 <MX_GPIO_Init+0x1ec>)
 8003510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN5_GPIO_Port, &GPIO_InitStruct);
 8003516:	f107 0310 	add.w	r3, r7, #16
 800351a:	4619      	mov	r1, r3
 800351c:	482b      	ldr	r0, [pc, #172]	; (80035cc <MX_GPIO_Init+0x1e8>)
 800351e:	f000 fe4b 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : iBackDoor_Pin */
  GPIO_InitStruct.Pin = iBackDoor_Pin;
 8003522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iBackDoor_GPIO_Port, &GPIO_InitStruct);
 8003530:	f107 0310 	add.w	r3, r7, #16
 8003534:	4619      	mov	r1, r3
 8003536:	4825      	ldr	r0, [pc, #148]	; (80035cc <MX_GPIO_Init+0x1e8>)
 8003538:	f000 fe3e 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : iFB_STEP1_Pin */
  GPIO_InitStruct.Pin = iFB_STEP1_Pin;
 800353c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <MX_GPIO_Init+0x1f0>)
 8003544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iFB_STEP1_GPIO_Port, &GPIO_InitStruct);
 800354a:	f107 0310 	add.w	r3, r7, #16
 800354e:	4619      	mov	r1, r3
 8003550:	481c      	ldr	r0, [pc, #112]	; (80035c4 <MX_GPIO_Init+0x1e0>)
 8003552:	f000 fe31 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN3_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN3_Pin;
 8003556:	2304      	movs	r3, #4
 8003558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <MX_GPIO_Init+0x1ec>)
 800355c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800355e:	2301      	movs	r3, #1
 8003560:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN3_GPIO_Port, &GPIO_InitStruct);
 8003562:	f107 0310 	add.w	r3, r7, #16
 8003566:	4619      	mov	r1, r3
 8003568:	481b      	ldr	r0, [pc, #108]	; (80035d8 <MX_GPIO_Init+0x1f4>)
 800356a:	f000 fe25 	bl	80041b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : iCarriageStop_Pin */
  GPIO_InitStruct.Pin = iCarriageStop_Pin;
 800356e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003574:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <MX_GPIO_Init+0x1f0>)
 8003576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iCarriageStop_GPIO_Port, &GPIO_InitStruct);
 800357c:	f107 0310 	add.w	r3, r7, #16
 8003580:	4619      	mov	r1, r3
 8003582:	4812      	ldr	r0, [pc, #72]	; (80035cc <MX_GPIO_Init+0x1e8>)
 8003584:	f000 fe18 	bl	80041b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8003588:	2200      	movs	r2, #0
 800358a:	2105      	movs	r1, #5
 800358c:	2008      	movs	r0, #8
 800358e:	f000 fad4 	bl	8003b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003592:	2008      	movs	r0, #8
 8003594:	f000 faed 	bl	8003b72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003598:	2200      	movs	r2, #0
 800359a:	2105      	movs	r1, #5
 800359c:	2017      	movs	r0, #23
 800359e:	f000 facc 	bl	8003b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80035a2:	2017      	movs	r0, #23
 80035a4:	f000 fae5 	bl	8003b72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2105      	movs	r1, #5
 80035ac:	2028      	movs	r0, #40	; 0x28
 80035ae:	f000 fac4 	bl	8003b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80035b2:	2028      	movs	r0, #40	; 0x28
 80035b4:	f000 fadd 	bl	8003b72 <HAL_NVIC_EnableIRQ>

}
 80035b8:	bf00      	nop
 80035ba:	3720      	adds	r7, #32
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40011000 	.word	0x40011000
 80035c8:	40010800 	.word	0x40010800
 80035cc:	40010c00 	.word	0x40010c00
 80035d0:	10210000 	.word	0x10210000
 80035d4:	10110000 	.word	0x10110000
 80035d8:	40011400 	.word	0x40011400

080035dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	vTaskDelay(1000);
 80035e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035e8:	f004 fb1c 	bl	8007c24 <vTaskDelay>
 80035ec:	e7fa      	b.n	80035e4 <StartDefaultTask+0x8>

080035ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035f2:	b672      	cpsid	i
}
 80035f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035f6:	e7fe      	b.n	80035f6 <Error_Handler+0x8>

080035f8 <HAL_MspInit>:
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4b18      	ldr	r3, [pc, #96]	; (8003660 <HAL_MspInit+0x68>)
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	4a17      	ldr	r2, [pc, #92]	; (8003660 <HAL_MspInit+0x68>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6193      	str	r3, [r2, #24]
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <HAL_MspInit+0x68>)
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_MspInit+0x68>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4a11      	ldr	r2, [pc, #68]	; (8003660 <HAL_MspInit+0x68>)
 800361c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003620:	61d3      	str	r3, [r2, #28]
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <HAL_MspInit+0x68>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	210f      	movs	r1, #15
 8003632:	f06f 0001 	mvn.w	r0, #1
 8003636:	f000 fa80 	bl	8003b3a <HAL_NVIC_SetPriority>
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_MspInit+0x6c>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <HAL_MspInit+0x6c>)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6053      	str	r3, [r2, #4]
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
 8003664:	40010000 	.word	0x40010000

08003668 <HAL_SPI_MspInit>:
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	f107 0310 	add.w	r3, r7, #16
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <HAL_SPI_MspInit+0x80>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d12b      	bne.n	80036e0 <HAL_SPI_MspInit+0x78>
 8003688:	4b18      	ldr	r3, [pc, #96]	; (80036ec <HAL_SPI_MspInit+0x84>)
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	4a17      	ldr	r2, [pc, #92]	; (80036ec <HAL_SPI_MspInit+0x84>)
 800368e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003692:	6193      	str	r3, [r2, #24]
 8003694:	4b15      	ldr	r3, [pc, #84]	; (80036ec <HAL_SPI_MspInit+0x84>)
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_SPI_MspInit+0x84>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	4a11      	ldr	r2, [pc, #68]	; (80036ec <HAL_SPI_MspInit+0x84>)
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	6193      	str	r3, [r2, #24]
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <HAL_SPI_MspInit+0x84>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	23a0      	movs	r3, #160	; 0xa0
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	2302      	movs	r3, #2
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	2303      	movs	r3, #3
 80036c2:	61fb      	str	r3, [r7, #28]
 80036c4:	f107 0310 	add.w	r3, r7, #16
 80036c8:	4619      	mov	r1, r3
 80036ca:	4809      	ldr	r0, [pc, #36]	; (80036f0 <HAL_SPI_MspInit+0x88>)
 80036cc:	f000 fd74 	bl	80041b8 <HAL_GPIO_Init>
 80036d0:	2200      	movs	r2, #0
 80036d2:	2105      	movs	r1, #5
 80036d4:	2023      	movs	r0, #35	; 0x23
 80036d6:	f000 fa30 	bl	8003b3a <HAL_NVIC_SetPriority>
 80036da:	2023      	movs	r0, #35	; 0x23
 80036dc:	f000 fa49 	bl	8003b72 <HAL_NVIC_EnableIRQ>
 80036e0:	bf00      	nop
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40013000 	.word	0x40013000
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40010800 	.word	0x40010800

080036f4 <HAL_TIM_Base_MspInit>:
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0d      	ldr	r2, [pc, #52]	; (8003738 <HAL_TIM_Base_MspInit+0x44>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d113      	bne.n	800372e <HAL_TIM_Base_MspInit+0x3a>
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_TIM_Base_MspInit+0x48>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4a0c      	ldr	r2, [pc, #48]	; (800373c <HAL_TIM_Base_MspInit+0x48>)
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	61d3      	str	r3, [r2, #28]
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_TIM_Base_MspInit+0x48>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	2105      	movs	r1, #5
 8003722:	201d      	movs	r0, #29
 8003724:	f000 fa09 	bl	8003b3a <HAL_NVIC_SetPriority>
 8003728:	201d      	movs	r0, #29
 800372a:	f000 fa22 	bl	8003b72 <HAL_NVIC_EnableIRQ>
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40000400 	.word	0x40000400
 800373c:	40021000 	.word	0x40021000

08003740 <HAL_TIM_MspPostInit>:
 8003740:	b580      	push	{r7, lr}
 8003742:	b088      	sub	sp, #32
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a18      	ldr	r2, [pc, #96]	; (80037bc <HAL_TIM_MspPostInit+0x7c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d129      	bne.n	80037b4 <HAL_TIM_MspPostInit+0x74>
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <HAL_TIM_MspPostInit+0x80>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_TIM_MspPostInit+0x80>)
 8003766:	f043 0310 	orr.w	r3, r3, #16
 800376a:	6193      	str	r3, [r2, #24]
 800376c:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_TIM_MspPostInit+0x80>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2340      	movs	r3, #64	; 0x40
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	2302      	movs	r3, #2
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	2302      	movs	r3, #2
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	f107 030c 	add.w	r3, r7, #12
 8003788:	4619      	mov	r1, r3
 800378a:	480e      	ldr	r0, [pc, #56]	; (80037c4 <HAL_TIM_MspPostInit+0x84>)
 800378c:	f000 fd14 	bl	80041b8 <HAL_GPIO_Init>
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <HAL_TIM_MspPostInit+0x88>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80037ac:	61fb      	str	r3, [r7, #28]
 80037ae:	4a06      	ldr	r2, [pc, #24]	; (80037c8 <HAL_TIM_MspPostInit+0x88>)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	6053      	str	r3, [r2, #4]
 80037b4:	bf00      	nop
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40011000 	.word	0x40011000
 80037c8:	40010000 	.word	0x40010000

080037cc <NMI_Handler>:
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	e7fe      	b.n	80037d0 <NMI_Handler+0x4>

080037d2 <HardFault_Handler>:
 80037d2:	b480      	push	{r7}
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	e7fe      	b.n	80037d6 <HardFault_Handler+0x4>

080037d8 <MemManage_Handler>:
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
 80037dc:	e7fe      	b.n	80037dc <MemManage_Handler+0x4>

080037de <BusFault_Handler>:
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	e7fe      	b.n	80037e2 <BusFault_Handler+0x4>

080037e4 <UsageFault_Handler>:
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	e7fe      	b.n	80037e8 <UsageFault_Handler+0x4>

080037ea <DebugMon_Handler>:
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <SysTick_Handler>:
 80037f6:	b580      	push	{r7, lr}
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	f000 f8ab 	bl	8003954 <HAL_IncTick>
 80037fe:	f004 fded 	bl	80083dc <xTaskGetSchedulerState>
 8003802:	4603      	mov	r3, r0
 8003804:	2b01      	cmp	r3, #1
 8003806:	d001      	beq.n	800380c <SysTick_Handler+0x16>
 8003808:	f005 fb26 	bl	8008e58 <xPortSysTickHandler>
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}

08003810 <EXTI2_IRQHandler>:
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
 8003814:	2004      	movs	r0, #4
 8003816:	f000 fe93 	bl	8004540 <HAL_GPIO_EXTI_IRQHandler>
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}

0800381e <EXTI9_5_IRQHandler>:
 800381e:	b580      	push	{r7, lr}
 8003820:	af00      	add	r7, sp, #0
 8003822:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003826:	f000 fe8b 	bl	8004540 <HAL_GPIO_EXTI_IRQHandler>
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <TIM3_IRQHandler>:
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <TIM3_IRQHandler+0x10>)
 8003836:	f002 fac5 	bl	8005dc4 <HAL_TIM_IRQHandler>
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200045d4 	.word	0x200045d4

08003844 <SPI1_IRQHandler>:
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <SPI1_IRQHandler+0x10>)
 800384a:	f001 feed 	bl	8005628 <HAL_SPI_IRQHandler>
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	2000461c 	.word	0x2000461c

08003858 <EXTI15_10_IRQHandler>:
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
 800385c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003860:	f000 fe6e 	bl	8004540 <HAL_GPIO_EXTI_IRQHandler>
 8003864:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003868:	f000 fe6a 	bl	8004540 <HAL_GPIO_EXTI_IRQHandler>
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}

08003870 <SystemInit>:
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <Reset_Handler>:
 800387c:	2100      	movs	r1, #0
 800387e:	e003      	b.n	8003888 <LoopCopyDataInit>

08003880 <CopyDataInit>:
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <LoopFillZerobss+0x14>)
 8003882:	585b      	ldr	r3, [r3, r1]
 8003884:	5043      	str	r3, [r0, r1]
 8003886:	3104      	adds	r1, #4

08003888 <LoopCopyDataInit>:
 8003888:	480a      	ldr	r0, [pc, #40]	; (80038b4 <LoopFillZerobss+0x18>)
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <LoopFillZerobss+0x1c>)
 800388c:	1842      	adds	r2, r0, r1
 800388e:	429a      	cmp	r2, r3
 8003890:	d3f6      	bcc.n	8003880 <CopyDataInit>
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <LoopFillZerobss+0x20>)
 8003894:	e002      	b.n	800389c <LoopFillZerobss>

08003896 <FillZerobss>:
 8003896:	2300      	movs	r3, #0
 8003898:	f842 3b04 	str.w	r3, [r2], #4

0800389c <LoopFillZerobss>:
 800389c:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <LoopFillZerobss+0x24>)
 800389e:	429a      	cmp	r2, r3
 80038a0:	d3f9      	bcc.n	8003896 <FillZerobss>
 80038a2:	f7ff ffe5 	bl	8003870 <SystemInit>
 80038a6:	f005 fca3 	bl	80091f0 <__libc_init_array>
 80038aa:	f7ff fc85 	bl	80031b8 <main>
 80038ae:	4770      	bx	lr
 80038b0:	0800936c 	.word	0x0800936c
 80038b4:	20000000 	.word	0x20000000
 80038b8:	20000010 	.word	0x20000010
 80038bc:	20000010 	.word	0x20000010
 80038c0:	200046d8 	.word	0x200046d8

080038c4 <ADC1_2_IRQHandler>:
 80038c4:	e7fe      	b.n	80038c4 <ADC1_2_IRQHandler>
	...

080038c8 <HAL_Init>:
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_Init+0x28>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_Init+0x28>)
 80038d2:	f043 0310 	orr.w	r3, r3, #16
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	2003      	movs	r0, #3
 80038da:	f000 f923 	bl	8003b24 <HAL_NVIC_SetPriorityGrouping>
 80038de:	200f      	movs	r0, #15
 80038e0:	f000 f808 	bl	80038f4 <HAL_InitTick>
 80038e4:	f7ff fe88 	bl	80035f8 <HAL_MspInit>
 80038e8:	2300      	movs	r3, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40022000 	.word	0x40022000

080038f4 <HAL_InitTick>:
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_InitTick+0x54>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_InitTick+0x58>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800390a:	fbb3 f3f1 	udiv	r3, r3, r1
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f93b 	bl	8003b8e <HAL_SYSTICK_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_InitTick+0x2e>
 800391e:	2301      	movs	r3, #1
 8003920:	e00e      	b.n	8003940 <HAL_InitTick+0x4c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b0f      	cmp	r3, #15
 8003926:	d80a      	bhi.n	800393e <HAL_InitTick+0x4a>
 8003928:	2200      	movs	r2, #0
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	f000 f903 	bl	8003b3a <HAL_NVIC_SetPriority>
 8003934:	4a06      	ldr	r2, [pc, #24]	; (8003950 <HAL_InitTick+0x5c>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_InitTick+0x4c>
 800393e:	2301      	movs	r3, #1
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000000 	.word	0x20000000
 800394c:	20000008 	.word	0x20000008
 8003950:	20000004 	.word	0x20000004

08003954 <HAL_IncTick>:
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_IncTick+0x1c>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_IncTick+0x20>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4413      	add	r3, r2
 8003964:	4a03      	ldr	r2, [pc, #12]	; (8003974 <HAL_IncTick+0x20>)
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	20000008 	.word	0x20000008
 8003974:	20004674 	.word	0x20004674

08003978 <HAL_GetTick>:
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
 800397c:	4b02      	ldr	r3, [pc, #8]	; (8003988 <HAL_GetTick+0x10>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	20004674 	.word	0x20004674

0800398c <__NVIC_SetPriorityGrouping>:
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <__NVIC_SetPriorityGrouping+0x44>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039a8:	4013      	ands	r3, r2
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	021a      	lsls	r2, r3, #8
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <__NVIC_SetPriorityGrouping+0x44>)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	60d3      	str	r3, [r2, #12]
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <__NVIC_GetPriorityGrouping>:
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	4b04      	ldr	r3, [pc, #16]	; (80039ec <__NVIC_GetPriorityGrouping+0x18>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	4618      	mov	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <__NVIC_EnableIRQ>:
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	71fb      	strb	r3, [r7, #7]
 80039fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	db0b      	blt.n	8003a1a <__NVIC_EnableIRQ+0x2a>
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	f003 021f 	and.w	r2, r3, #31
 8003a08:	4906      	ldr	r1, [pc, #24]	; (8003a24 <__NVIC_EnableIRQ+0x34>)
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	2001      	movs	r0, #1
 8003a12:	fa00 f202 	lsl.w	r2, r0, r2
 8003a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	e000e100 	.word	0xe000e100

08003a28 <__NVIC_SetPriority>:
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	6039      	str	r1, [r7, #0]
 8003a32:	71fb      	strb	r3, [r7, #7]
 8003a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	db0a      	blt.n	8003a52 <__NVIC_SetPriority+0x2a>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	490c      	ldr	r1, [pc, #48]	; (8003a74 <__NVIC_SetPriority+0x4c>)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	0112      	lsls	r2, r2, #4
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003a50:	e00a      	b.n	8003a68 <__NVIC_SetPriority+0x40>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	4908      	ldr	r1, [pc, #32]	; (8003a78 <__NVIC_SetPriority+0x50>)
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	3b04      	subs	r3, #4
 8003a60:	0112      	lsls	r2, r2, #4
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	440b      	add	r3, r1
 8003a66:	761a      	strb	r2, [r3, #24]
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	e000e100 	.word	0xe000e100
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <NVIC_EncodePriority>:
 8003a7c:	b480      	push	{r7}
 8003a7e:	b089      	sub	sp, #36	; 0x24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f1c3 0307 	rsb	r3, r3, #7
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	bf28      	it	cs
 8003a9a:	2304      	movcs	r3, #4
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d902      	bls.n	8003aac <NVIC_EncodePriority+0x30>
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3b03      	subs	r3, #3
 8003aaa:	e000      	b.n	8003aae <NVIC_EncodePriority+0x32>
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43da      	mvns	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	401a      	ands	r2, r3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	43d9      	mvns	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	400b      	ands	r3, r1
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3724      	adds	r7, #36	; 0x24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <SysTick_Config>:
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af0:	d301      	bcc.n	8003af6 <SysTick_Config+0x16>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e00f      	b.n	8003b16 <SysTick_Config+0x36>
 8003af6:	4a0a      	ldr	r2, [pc, #40]	; (8003b20 <SysTick_Config+0x40>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	6053      	str	r3, [r2, #4]
 8003afe:	210f      	movs	r1, #15
 8003b00:	f04f 30ff 	mov.w	r0, #4294967295
 8003b04:	f7ff ff90 	bl	8003a28 <__NVIC_SetPriority>
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <SysTick_Config+0x40>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]
 8003b0e:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <SysTick_Config+0x40>)
 8003b10:	2207      	movs	r2, #7
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	2300      	movs	r3, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	e000e010 	.word	0xe000e010

08003b24 <HAL_NVIC_SetPriorityGrouping>:
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ff2d 	bl	800398c <__NVIC_SetPriorityGrouping>
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_NVIC_SetPriority>:
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b086      	sub	sp, #24
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	4603      	mov	r3, r0
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	f7ff ff42 	bl	80039d4 <__NVIC_GetPriorityGrouping>
 8003b50:	6178      	str	r0, [r7, #20]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	f7ff ff90 	bl	8003a7c <NVIC_EncodePriority>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff ff5f 	bl	8003a28 <__NVIC_SetPriority>
 8003b6a:	bf00      	nop
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_NVIC_EnableIRQ>:
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	4603      	mov	r3, r0
 8003b7a:	71fb      	strb	r3, [r7, #7]
 8003b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff35 	bl	80039f0 <__NVIC_EnableIRQ>
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_SYSTICK_Config>:
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff ffa2 	bl	8003ae0 <SysTick_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_DMA_Abort_IT>:
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d005      	beq.n	8003bca <HAL_DMA_Abort_IT+0x22>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	639a      	str	r2, [r3, #56]	; 0x38
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
 8003bc8:	e0d6      	b.n	8003d78 <HAL_DMA_Abort_IT+0x1d0>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 020e 	bic.w	r2, r2, #14
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4b64      	ldr	r3, [pc, #400]	; (8003d84 <HAL_DMA_Abort_IT+0x1dc>)
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d958      	bls.n	8003ca8 <HAL_DMA_Abort_IT+0x100>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a63      	ldr	r2, [pc, #396]	; (8003d88 <HAL_DMA_Abort_IT+0x1e0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d04f      	beq.n	8003ca0 <HAL_DMA_Abort_IT+0xf8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a61      	ldr	r2, [pc, #388]	; (8003d8c <HAL_DMA_Abort_IT+0x1e4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d048      	beq.n	8003c9c <HAL_DMA_Abort_IT+0xf4>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a60      	ldr	r2, [pc, #384]	; (8003d90 <HAL_DMA_Abort_IT+0x1e8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d040      	beq.n	8003c96 <HAL_DMA_Abort_IT+0xee>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a5e      	ldr	r2, [pc, #376]	; (8003d94 <HAL_DMA_Abort_IT+0x1ec>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d038      	beq.n	8003c90 <HAL_DMA_Abort_IT+0xe8>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a5d      	ldr	r2, [pc, #372]	; (8003d98 <HAL_DMA_Abort_IT+0x1f0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d030      	beq.n	8003c8a <HAL_DMA_Abort_IT+0xe2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a5b      	ldr	r2, [pc, #364]	; (8003d9c <HAL_DMA_Abort_IT+0x1f4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d028      	beq.n	8003c84 <HAL_DMA_Abort_IT+0xdc>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a53      	ldr	r2, [pc, #332]	; (8003d84 <HAL_DMA_Abort_IT+0x1dc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d020      	beq.n	8003c7e <HAL_DMA_Abort_IT+0xd6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a57      	ldr	r2, [pc, #348]	; (8003da0 <HAL_DMA_Abort_IT+0x1f8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d019      	beq.n	8003c7a <HAL_DMA_Abort_IT+0xd2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a56      	ldr	r2, [pc, #344]	; (8003da4 <HAL_DMA_Abort_IT+0x1fc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d012      	beq.n	8003c76 <HAL_DMA_Abort_IT+0xce>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a54      	ldr	r2, [pc, #336]	; (8003da8 <HAL_DMA_Abort_IT+0x200>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00a      	beq.n	8003c70 <HAL_DMA_Abort_IT+0xc8>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a53      	ldr	r2, [pc, #332]	; (8003dac <HAL_DMA_Abort_IT+0x204>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d102      	bne.n	8003c6a <HAL_DMA_Abort_IT+0xc2>
 8003c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c68:	e01b      	b.n	8003ca2 <HAL_DMA_Abort_IT+0xfa>
 8003c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c6e:	e018      	b.n	8003ca2 <HAL_DMA_Abort_IT+0xfa>
 8003c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c74:	e015      	b.n	8003ca2 <HAL_DMA_Abort_IT+0xfa>
 8003c76:	2310      	movs	r3, #16
 8003c78:	e013      	b.n	8003ca2 <HAL_DMA_Abort_IT+0xfa>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e011      	b.n	8003ca2 <HAL_DMA_Abort_IT+0xfa>
 8003c7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c82:	e00e      	b.n	8003ca2 <HAL_DMA_Abort_IT+0xfa>
 8003c84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c88:	e00b      	b.n	8003ca2 <HAL_DMA_Abort_IT+0xfa>
 8003c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c8e:	e008      	b.n	8003ca2 <HAL_DMA_Abort_IT+0xfa>
 8003c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c94:	e005      	b.n	8003ca2 <HAL_DMA_Abort_IT+0xfa>
 8003c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c9a:	e002      	b.n	8003ca2 <HAL_DMA_Abort_IT+0xfa>
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	e000      	b.n	8003ca2 <HAL_DMA_Abort_IT+0xfa>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	4a43      	ldr	r2, [pc, #268]	; (8003db0 <HAL_DMA_Abort_IT+0x208>)
 8003ca4:	6053      	str	r3, [r2, #4]
 8003ca6:	e057      	b.n	8003d58 <HAL_DMA_Abort_IT+0x1b0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a36      	ldr	r2, [pc, #216]	; (8003d88 <HAL_DMA_Abort_IT+0x1e0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d04f      	beq.n	8003d52 <HAL_DMA_Abort_IT+0x1aa>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a35      	ldr	r2, [pc, #212]	; (8003d8c <HAL_DMA_Abort_IT+0x1e4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d048      	beq.n	8003d4e <HAL_DMA_Abort_IT+0x1a6>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a33      	ldr	r2, [pc, #204]	; (8003d90 <HAL_DMA_Abort_IT+0x1e8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d040      	beq.n	8003d48 <HAL_DMA_Abort_IT+0x1a0>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a32      	ldr	r2, [pc, #200]	; (8003d94 <HAL_DMA_Abort_IT+0x1ec>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d038      	beq.n	8003d42 <HAL_DMA_Abort_IT+0x19a>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a30      	ldr	r2, [pc, #192]	; (8003d98 <HAL_DMA_Abort_IT+0x1f0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d030      	beq.n	8003d3c <HAL_DMA_Abort_IT+0x194>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2f      	ldr	r2, [pc, #188]	; (8003d9c <HAL_DMA_Abort_IT+0x1f4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d028      	beq.n	8003d36 <HAL_DMA_Abort_IT+0x18e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a26      	ldr	r2, [pc, #152]	; (8003d84 <HAL_DMA_Abort_IT+0x1dc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d020      	beq.n	8003d30 <HAL_DMA_Abort_IT+0x188>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a2b      	ldr	r2, [pc, #172]	; (8003da0 <HAL_DMA_Abort_IT+0x1f8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d019      	beq.n	8003d2c <HAL_DMA_Abort_IT+0x184>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <HAL_DMA_Abort_IT+0x1fc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d012      	beq.n	8003d28 <HAL_DMA_Abort_IT+0x180>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a28      	ldr	r2, [pc, #160]	; (8003da8 <HAL_DMA_Abort_IT+0x200>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00a      	beq.n	8003d22 <HAL_DMA_Abort_IT+0x17a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a26      	ldr	r2, [pc, #152]	; (8003dac <HAL_DMA_Abort_IT+0x204>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d102      	bne.n	8003d1c <HAL_DMA_Abort_IT+0x174>
 8003d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d1a:	e01b      	b.n	8003d54 <HAL_DMA_Abort_IT+0x1ac>
 8003d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d20:	e018      	b.n	8003d54 <HAL_DMA_Abort_IT+0x1ac>
 8003d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d26:	e015      	b.n	8003d54 <HAL_DMA_Abort_IT+0x1ac>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	e013      	b.n	8003d54 <HAL_DMA_Abort_IT+0x1ac>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e011      	b.n	8003d54 <HAL_DMA_Abort_IT+0x1ac>
 8003d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d34:	e00e      	b.n	8003d54 <HAL_DMA_Abort_IT+0x1ac>
 8003d36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d3a:	e00b      	b.n	8003d54 <HAL_DMA_Abort_IT+0x1ac>
 8003d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d40:	e008      	b.n	8003d54 <HAL_DMA_Abort_IT+0x1ac>
 8003d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d46:	e005      	b.n	8003d54 <HAL_DMA_Abort_IT+0x1ac>
 8003d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d4c:	e002      	b.n	8003d54 <HAL_DMA_Abort_IT+0x1ac>
 8003d4e:	2310      	movs	r3, #16
 8003d50:	e000      	b.n	8003d54 <HAL_DMA_Abort_IT+0x1ac>
 8003d52:	2301      	movs	r3, #1
 8003d54:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <HAL_DMA_Abort_IT+0x20c>)
 8003d56:	6053      	str	r3, [r2, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2020 	strb.w	r2, [r3, #32]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_DMA_Abort_IT+0x1d0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4798      	blx	r3
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40020080 	.word	0x40020080
 8003d88:	40020008 	.word	0x40020008
 8003d8c:	4002001c 	.word	0x4002001c
 8003d90:	40020030 	.word	0x40020030
 8003d94:	40020044 	.word	0x40020044
 8003d98:	40020058 	.word	0x40020058
 8003d9c:	4002006c 	.word	0x4002006c
 8003da0:	40020408 	.word	0x40020408
 8003da4:	4002041c 	.word	0x4002041c
 8003da8:	40020430 	.word	0x40020430
 8003dac:	40020444 	.word	0x40020444
 8003db0:	40020400 	.word	0x40020400
 8003db4:	40020000 	.word	0x40020000

08003db8 <HAL_FLASH_Program>:
 8003db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	e9c7 2300 	strd	r2, r3, [r7]
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	75bb      	strb	r3, [r7, #22]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	757b      	strb	r3, [r7, #21]
 8003dd2:	4b2f      	ldr	r3, [pc, #188]	; (8003e90 <HAL_FLASH_Program+0xd8>)
 8003dd4:	7e1b      	ldrb	r3, [r3, #24]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_FLASH_Program+0x26>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e054      	b.n	8003e88 <HAL_FLASH_Program+0xd0>
 8003dde:	4b2c      	ldr	r3, [pc, #176]	; (8003e90 <HAL_FLASH_Program+0xd8>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	761a      	strb	r2, [r3, #24]
 8003de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003de8:	f000 f8a8 	bl	8003f3c <FLASH_WaitForLastOperation>
 8003dec:	4603      	mov	r3, r0
 8003dee:	75fb      	strb	r3, [r7, #23]
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d144      	bne.n	8003e80 <HAL_FLASH_Program+0xc8>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d102      	bne.n	8003e02 <HAL_FLASH_Program+0x4a>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	757b      	strb	r3, [r7, #21]
 8003e00:	e007      	b.n	8003e12 <HAL_FLASH_Program+0x5a>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d102      	bne.n	8003e0e <HAL_FLASH_Program+0x56>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	757b      	strb	r3, [r7, #21]
 8003e0c:	e001      	b.n	8003e12 <HAL_FLASH_Program+0x5a>
 8003e0e:	2304      	movs	r3, #4
 8003e10:	757b      	strb	r3, [r7, #21]
 8003e12:	2300      	movs	r3, #0
 8003e14:	75bb      	strb	r3, [r7, #22]
 8003e16:	e02d      	b.n	8003e74 <HAL_FLASH_Program+0xbc>
 8003e18:	7dbb      	ldrb	r3, [r7, #22]
 8003e1a:	005a      	lsls	r2, r3, #1
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	eb02 0c03 	add.w	ip, r2, r3
 8003e22:	7dbb      	ldrb	r3, [r7, #22]
 8003e24:	0119      	lsls	r1, r3, #4
 8003e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e2a:	f1c1 0620 	rsb	r6, r1, #32
 8003e2e:	f1a1 0020 	sub.w	r0, r1, #32
 8003e32:	fa22 f401 	lsr.w	r4, r2, r1
 8003e36:	fa03 f606 	lsl.w	r6, r3, r6
 8003e3a:	4334      	orrs	r4, r6
 8003e3c:	fa23 f000 	lsr.w	r0, r3, r0
 8003e40:	4304      	orrs	r4, r0
 8003e42:	fa23 f501 	lsr.w	r5, r3, r1
 8003e46:	b2a3      	uxth	r3, r4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4660      	mov	r0, ip
 8003e4c:	f000 f85a 	bl	8003f04 <FLASH_Program_HalfWord>
 8003e50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e54:	f000 f872 	bl	8003f3c <FLASH_WaitForLastOperation>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	75fb      	strb	r3, [r7, #23]
 8003e5c:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <HAL_FLASH_Program+0xdc>)
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	4a0c      	ldr	r2, [pc, #48]	; (8003e94 <HAL_FLASH_Program+0xdc>)
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	6113      	str	r3, [r2, #16]
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d107      	bne.n	8003e7e <HAL_FLASH_Program+0xc6>
 8003e6e:	7dbb      	ldrb	r3, [r7, #22]
 8003e70:	3301      	adds	r3, #1
 8003e72:	75bb      	strb	r3, [r7, #22]
 8003e74:	7dba      	ldrb	r2, [r7, #22]
 8003e76:	7d7b      	ldrb	r3, [r7, #21]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d3cd      	bcc.n	8003e18 <HAL_FLASH_Program+0x60>
 8003e7c:	e000      	b.n	8003e80 <HAL_FLASH_Program+0xc8>
 8003e7e:	bf00      	nop
 8003e80:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <HAL_FLASH_Program+0xd8>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	761a      	strb	r2, [r3, #24]
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e90:	20004678 	.word	0x20004678
 8003e94:	40022000 	.word	0x40022000

08003e98 <HAL_FLASH_Unlock>:
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	71fb      	strb	r3, [r7, #7]
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <HAL_FLASH_Unlock+0x40>)
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00d      	beq.n	8003eca <HAL_FLASH_Unlock+0x32>
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <HAL_FLASH_Unlock+0x40>)
 8003eb0:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <HAL_FLASH_Unlock+0x44>)
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <HAL_FLASH_Unlock+0x40>)
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <HAL_FLASH_Unlock+0x48>)
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <HAL_FLASH_Unlock+0x40>)
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_FLASH_Unlock+0x32>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	71fb      	strb	r3, [r7, #7]
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40022000 	.word	0x40022000
 8003edc:	45670123 	.word	0x45670123
 8003ee0:	cdef89ab 	.word	0xcdef89ab

08003ee4 <HAL_FLASH_Lock>:
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_FLASH_Lock+0x1c>)
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	4a04      	ldr	r2, [pc, #16]	; (8003f00 <HAL_FLASH_Lock+0x1c>)
 8003eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef2:	6113      	str	r3, [r2, #16]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40022000 	.word	0x40022000

08003f04 <FLASH_Program_HalfWord>:
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	807b      	strh	r3, [r7, #2]
 8003f10:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <FLASH_Program_HalfWord+0x30>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
 8003f16:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <FLASH_Program_HalfWord+0x34>)
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	4a07      	ldr	r2, [pc, #28]	; (8003f38 <FLASH_Program_HalfWord+0x34>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	6113      	str	r3, [r2, #16]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	887a      	ldrh	r2, [r7, #2]
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20004678 	.word	0x20004678
 8003f38:	40022000 	.word	0x40022000

08003f3c <FLASH_WaitForLastOperation>:
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	f7ff fd18 	bl	8003978 <HAL_GetTick>
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	e010      	b.n	8003f6e <FLASH_WaitForLastOperation+0x32>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d00c      	beq.n	8003f6e <FLASH_WaitForLastOperation+0x32>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <FLASH_WaitForLastOperation+0x2e>
 8003f5a:	f7ff fd0d 	bl	8003978 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d201      	bcs.n	8003f6e <FLASH_WaitForLastOperation+0x32>
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e025      	b.n	8003fba <FLASH_WaitForLastOperation+0x7e>
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <FLASH_WaitForLastOperation+0x88>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e8      	bne.n	8003f4c <FLASH_WaitForLastOperation+0x10>
 8003f7a:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <FLASH_WaitForLastOperation+0x88>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <FLASH_WaitForLastOperation+0x50>
 8003f86:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <FLASH_WaitForLastOperation+0x88>)
 8003f88:	2220      	movs	r2, #32
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <FLASH_WaitForLastOperation+0x88>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <FLASH_WaitForLastOperation+0x74>
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <FLASH_WaitForLastOperation+0x88>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <FLASH_WaitForLastOperation+0x74>
 8003fa4:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <FLASH_WaitForLastOperation+0x88>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <FLASH_WaitForLastOperation+0x7c>
 8003fb0:	f000 f80a 	bl	8003fc8 <FLASH_SetErrorCode>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <FLASH_WaitForLastOperation+0x7e>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40022000 	.word	0x40022000

08003fc8 <FLASH_SetErrorCode>:
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	2300      	movs	r3, #0
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	4b23      	ldr	r3, [pc, #140]	; (8004060 <FLASH_SetErrorCode+0x98>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <FLASH_SetErrorCode+0x2a>
 8003fde:	4b21      	ldr	r3, [pc, #132]	; (8004064 <FLASH_SetErrorCode+0x9c>)
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f043 0302 	orr.w	r3, r3, #2
 8003fe6:	4a1f      	ldr	r2, [pc, #124]	; (8004064 <FLASH_SetErrorCode+0x9c>)
 8003fe8:	61d3      	str	r3, [r2, #28]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f043 0310 	orr.w	r3, r3, #16
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <FLASH_SetErrorCode+0x98>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <FLASH_SetErrorCode+0x4a>
 8003ffe:	4b19      	ldr	r3, [pc, #100]	; (8004064 <FLASH_SetErrorCode+0x9c>)
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	4a17      	ldr	r2, [pc, #92]	; (8004064 <FLASH_SetErrorCode+0x9c>)
 8004008:	61d3      	str	r3, [r2, #28]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f043 0304 	orr.w	r3, r3, #4
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	4b13      	ldr	r3, [pc, #76]	; (8004060 <FLASH_SetErrorCode+0x98>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <FLASH_SetErrorCode+0x6e>
 800401e:	4b11      	ldr	r3, [pc, #68]	; (8004064 <FLASH_SetErrorCode+0x9c>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f043 0304 	orr.w	r3, r3, #4
 8004026:	4a0f      	ldr	r2, [pc, #60]	; (8004064 <FLASH_SetErrorCode+0x9c>)
 8004028:	61d3      	str	r3, [r2, #28]
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <FLASH_SetErrorCode+0x98>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	4a0c      	ldr	r2, [pc, #48]	; (8004060 <FLASH_SetErrorCode+0x98>)
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	61d3      	str	r3, [r2, #28]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f240 1201 	movw	r2, #257	; 0x101
 800403c:	4293      	cmp	r3, r2
 800403e:	d106      	bne.n	800404e <FLASH_SetErrorCode+0x86>
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <FLASH_SetErrorCode+0x98>)
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	4a06      	ldr	r2, [pc, #24]	; (8004060 <FLASH_SetErrorCode+0x98>)
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	61d3      	str	r3, [r2, #28]
 800404c:	e002      	b.n	8004054 <FLASH_SetErrorCode+0x8c>
 800404e:	4a04      	ldr	r2, [pc, #16]	; (8004060 <FLASH_SetErrorCode+0x98>)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	60d3      	str	r3, [r2, #12]
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40022000 	.word	0x40022000
 8004064:	20004678 	.word	0x20004678

08004068 <HAL_FLASHEx_Erase>:
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	4b2f      	ldr	r3, [pc, #188]	; (8004138 <HAL_FLASHEx_Erase+0xd0>)
 800407c:	7e1b      	ldrb	r3, [r3, #24]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_FLASHEx_Erase+0x1e>
 8004082:	2302      	movs	r3, #2
 8004084:	e053      	b.n	800412e <HAL_FLASHEx_Erase+0xc6>
 8004086:	4b2c      	ldr	r3, [pc, #176]	; (8004138 <HAL_FLASHEx_Erase+0xd0>)
 8004088:	2201      	movs	r2, #1
 800408a:	761a      	strb	r2, [r3, #24]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d116      	bne.n	80040c2 <HAL_FLASHEx_Erase+0x5a>
 8004094:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004098:	f7ff ff50 	bl	8003f3c <FLASH_WaitForLastOperation>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d141      	bne.n	8004126 <HAL_FLASHEx_Erase+0xbe>
 80040a2:	2001      	movs	r0, #1
 80040a4:	f000 f84c 	bl	8004140 <FLASH_MassErase>
 80040a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040ac:	f7ff ff46 	bl	8003f3c <FLASH_WaitForLastOperation>
 80040b0:	4603      	mov	r3, r0
 80040b2:	73fb      	strb	r3, [r7, #15]
 80040b4:	4b21      	ldr	r3, [pc, #132]	; (800413c <HAL_FLASHEx_Erase+0xd4>)
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	4a20      	ldr	r2, [pc, #128]	; (800413c <HAL_FLASHEx_Erase+0xd4>)
 80040ba:	f023 0304 	bic.w	r3, r3, #4
 80040be:	6113      	str	r3, [r2, #16]
 80040c0:	e031      	b.n	8004126 <HAL_FLASHEx_Erase+0xbe>
 80040c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040c6:	f7ff ff39 	bl	8003f3c <FLASH_WaitForLastOperation>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d12a      	bne.n	8004126 <HAL_FLASHEx_Erase+0xbe>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	f04f 32ff 	mov.w	r2, #4294967295
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	e019      	b.n	8004114 <HAL_FLASHEx_Erase+0xac>
 80040e0:	68b8      	ldr	r0, [r7, #8]
 80040e2:	f000 f849 	bl	8004178 <FLASH_PageErase>
 80040e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040ea:	f7ff ff27 	bl	8003f3c <FLASH_WaitForLastOperation>
 80040ee:	4603      	mov	r3, r0
 80040f0:	73fb      	strb	r3, [r7, #15]
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <HAL_FLASHEx_Erase+0xd4>)
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	4a11      	ldr	r2, [pc, #68]	; (800413c <HAL_FLASHEx_Erase+0xd4>)
 80040f8:	f023 0302 	bic.w	r3, r3, #2
 80040fc:	6113      	str	r3, [r2, #16]
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_FLASHEx_Erase+0xa4>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	e00c      	b.n	8004126 <HAL_FLASHEx_Erase+0xbe>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	02da      	lsls	r2, r3, #11
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	4413      	add	r3, r2
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	d3dc      	bcc.n	80040e0 <HAL_FLASHEx_Erase+0x78>
 8004126:	4b04      	ldr	r3, [pc, #16]	; (8004138 <HAL_FLASHEx_Erase+0xd0>)
 8004128:	2200      	movs	r2, #0
 800412a:	761a      	strb	r2, [r3, #24]
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20004678 	.word	0x20004678
 800413c:	40022000 	.word	0x40022000

08004140 <FLASH_MassErase>:
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <FLASH_MassErase+0x30>)
 800414a:	2200      	movs	r2, #0
 800414c:	61da      	str	r2, [r3, #28]
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <FLASH_MassErase+0x34>)
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	4a08      	ldr	r2, [pc, #32]	; (8004174 <FLASH_MassErase+0x34>)
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	6113      	str	r3, [r2, #16]
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <FLASH_MassErase+0x34>)
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	4a05      	ldr	r2, [pc, #20]	; (8004174 <FLASH_MassErase+0x34>)
 8004160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004164:	6113      	str	r3, [r2, #16]
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	20004678 	.word	0x20004678
 8004174:	40022000 	.word	0x40022000

08004178 <FLASH_PageErase>:
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <FLASH_PageErase+0x38>)
 8004182:	2200      	movs	r2, #0
 8004184:	61da      	str	r2, [r3, #28]
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <FLASH_PageErase+0x3c>)
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	4a0a      	ldr	r2, [pc, #40]	; (80041b4 <FLASH_PageErase+0x3c>)
 800418c:	f043 0302 	orr.w	r3, r3, #2
 8004190:	6113      	str	r3, [r2, #16]
 8004192:	4a08      	ldr	r2, [pc, #32]	; (80041b4 <FLASH_PageErase+0x3c>)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6153      	str	r3, [r2, #20]
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <FLASH_PageErase+0x3c>)
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	4a05      	ldr	r2, [pc, #20]	; (80041b4 <FLASH_PageErase+0x3c>)
 800419e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a2:	6113      	str	r3, [r2, #16]
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20004678 	.word	0x20004678
 80041b4:	40022000 	.word	0x40022000

080041b8 <HAL_GPIO_Init>:
 80041b8:	b480      	push	{r7}
 80041ba:	b08b      	sub	sp, #44	; 0x2c
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
 80041c2:	2300      	movs	r3, #0
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
 80041c6:	2300      	movs	r3, #0
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	e179      	b.n	80044c0 <HAL_GPIO_Init+0x308>
 80041cc:	2201      	movs	r2, #1
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	f040 8168 	bne.w	80044ba <HAL_GPIO_Init+0x302>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4aa0      	ldr	r2, [pc, #640]	; (8004470 <HAL_GPIO_Init+0x2b8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d05e      	beq.n	80042b2 <HAL_GPIO_Init+0xfa>
 80041f4:	4a9e      	ldr	r2, [pc, #632]	; (8004470 <HAL_GPIO_Init+0x2b8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d875      	bhi.n	80042e6 <HAL_GPIO_Init+0x12e>
 80041fa:	4a9e      	ldr	r2, [pc, #632]	; (8004474 <HAL_GPIO_Init+0x2bc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d058      	beq.n	80042b2 <HAL_GPIO_Init+0xfa>
 8004200:	4a9c      	ldr	r2, [pc, #624]	; (8004474 <HAL_GPIO_Init+0x2bc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d86f      	bhi.n	80042e6 <HAL_GPIO_Init+0x12e>
 8004206:	4a9c      	ldr	r2, [pc, #624]	; (8004478 <HAL_GPIO_Init+0x2c0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d052      	beq.n	80042b2 <HAL_GPIO_Init+0xfa>
 800420c:	4a9a      	ldr	r2, [pc, #616]	; (8004478 <HAL_GPIO_Init+0x2c0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d869      	bhi.n	80042e6 <HAL_GPIO_Init+0x12e>
 8004212:	4a9a      	ldr	r2, [pc, #616]	; (800447c <HAL_GPIO_Init+0x2c4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d04c      	beq.n	80042b2 <HAL_GPIO_Init+0xfa>
 8004218:	4a98      	ldr	r2, [pc, #608]	; (800447c <HAL_GPIO_Init+0x2c4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d863      	bhi.n	80042e6 <HAL_GPIO_Init+0x12e>
 800421e:	4a98      	ldr	r2, [pc, #608]	; (8004480 <HAL_GPIO_Init+0x2c8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d046      	beq.n	80042b2 <HAL_GPIO_Init+0xfa>
 8004224:	4a96      	ldr	r2, [pc, #600]	; (8004480 <HAL_GPIO_Init+0x2c8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d85d      	bhi.n	80042e6 <HAL_GPIO_Init+0x12e>
 800422a:	2b12      	cmp	r3, #18
 800422c:	d82a      	bhi.n	8004284 <HAL_GPIO_Init+0xcc>
 800422e:	2b12      	cmp	r3, #18
 8004230:	d859      	bhi.n	80042e6 <HAL_GPIO_Init+0x12e>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <HAL_GPIO_Init+0x80>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	080042b3 	.word	0x080042b3
 800423c:	0800428d 	.word	0x0800428d
 8004240:	0800429f 	.word	0x0800429f
 8004244:	080042e1 	.word	0x080042e1
 8004248:	080042e7 	.word	0x080042e7
 800424c:	080042e7 	.word	0x080042e7
 8004250:	080042e7 	.word	0x080042e7
 8004254:	080042e7 	.word	0x080042e7
 8004258:	080042e7 	.word	0x080042e7
 800425c:	080042e7 	.word	0x080042e7
 8004260:	080042e7 	.word	0x080042e7
 8004264:	080042e7 	.word	0x080042e7
 8004268:	080042e7 	.word	0x080042e7
 800426c:	080042e7 	.word	0x080042e7
 8004270:	080042e7 	.word	0x080042e7
 8004274:	080042e7 	.word	0x080042e7
 8004278:	080042e7 	.word	0x080042e7
 800427c:	08004295 	.word	0x08004295
 8004280:	080042a9 	.word	0x080042a9
 8004284:	4a7f      	ldr	r2, [pc, #508]	; (8004484 <HAL_GPIO_Init+0x2cc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_GPIO_Init+0xfa>
 800428a:	e02c      	b.n	80042e6 <HAL_GPIO_Init+0x12e>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	623b      	str	r3, [r7, #32]
 8004292:	e029      	b.n	80042e8 <HAL_GPIO_Init+0x130>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	3304      	adds	r3, #4
 800429a:	623b      	str	r3, [r7, #32]
 800429c:	e024      	b.n	80042e8 <HAL_GPIO_Init+0x130>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	3308      	adds	r3, #8
 80042a4:	623b      	str	r3, [r7, #32]
 80042a6:	e01f      	b.n	80042e8 <HAL_GPIO_Init+0x130>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	330c      	adds	r3, #12
 80042ae:	623b      	str	r3, [r7, #32]
 80042b0:	e01a      	b.n	80042e8 <HAL_GPIO_Init+0x130>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <HAL_GPIO_Init+0x108>
 80042ba:	2304      	movs	r3, #4
 80042bc:	623b      	str	r3, [r7, #32]
 80042be:	e013      	b.n	80042e8 <HAL_GPIO_Init+0x130>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d105      	bne.n	80042d4 <HAL_GPIO_Init+0x11c>
 80042c8:	2308      	movs	r3, #8
 80042ca:	623b      	str	r3, [r7, #32]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	611a      	str	r2, [r3, #16]
 80042d2:	e009      	b.n	80042e8 <HAL_GPIO_Init+0x130>
 80042d4:	2308      	movs	r3, #8
 80042d6:	623b      	str	r3, [r7, #32]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	615a      	str	r2, [r3, #20]
 80042de:	e003      	b.n	80042e8 <HAL_GPIO_Init+0x130>
 80042e0:	2300      	movs	r3, #0
 80042e2:	623b      	str	r3, [r7, #32]
 80042e4:	e000      	b.n	80042e8 <HAL_GPIO_Init+0x130>
 80042e6:	bf00      	nop
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2bff      	cmp	r3, #255	; 0xff
 80042ec:	d801      	bhi.n	80042f2 <HAL_GPIO_Init+0x13a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	e001      	b.n	80042f6 <HAL_GPIO_Init+0x13e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2bff      	cmp	r3, #255	; 0xff
 80042fc:	d802      	bhi.n	8004304 <HAL_GPIO_Init+0x14c>
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	e002      	b.n	800430a <HAL_GPIO_Init+0x152>
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	3b08      	subs	r3, #8
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	210f      	movs	r1, #15
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	401a      	ands	r2, r3
 800431c:	6a39      	ldr	r1, [r7, #32]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	fa01 f303 	lsl.w	r3, r1, r3
 8004324:	431a      	orrs	r2, r3
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80c1 	beq.w	80044ba <HAL_GPIO_Init+0x302>
 8004338:	4b53      	ldr	r3, [pc, #332]	; (8004488 <HAL_GPIO_Init+0x2d0>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	4a52      	ldr	r2, [pc, #328]	; (8004488 <HAL_GPIO_Init+0x2d0>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6193      	str	r3, [r2, #24]
 8004344:	4b50      	ldr	r3, [pc, #320]	; (8004488 <HAL_GPIO_Init+0x2d0>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	4a4e      	ldr	r2, [pc, #312]	; (800448c <HAL_GPIO_Init+0x2d4>)
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	3302      	adds	r3, #2
 8004358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	220f      	movs	r2, #15
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4013      	ands	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a46      	ldr	r2, [pc, #280]	; (8004490 <HAL_GPIO_Init+0x2d8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d01f      	beq.n	80043bc <HAL_GPIO_Init+0x204>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a45      	ldr	r2, [pc, #276]	; (8004494 <HAL_GPIO_Init+0x2dc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d019      	beq.n	80043b8 <HAL_GPIO_Init+0x200>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a44      	ldr	r2, [pc, #272]	; (8004498 <HAL_GPIO_Init+0x2e0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <HAL_GPIO_Init+0x1fc>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a43      	ldr	r2, [pc, #268]	; (800449c <HAL_GPIO_Init+0x2e4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00d      	beq.n	80043b0 <HAL_GPIO_Init+0x1f8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a42      	ldr	r2, [pc, #264]	; (80044a0 <HAL_GPIO_Init+0x2e8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d007      	beq.n	80043ac <HAL_GPIO_Init+0x1f4>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a41      	ldr	r2, [pc, #260]	; (80044a4 <HAL_GPIO_Init+0x2ec>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d101      	bne.n	80043a8 <HAL_GPIO_Init+0x1f0>
 80043a4:	2305      	movs	r3, #5
 80043a6:	e00a      	b.n	80043be <HAL_GPIO_Init+0x206>
 80043a8:	2306      	movs	r3, #6
 80043aa:	e008      	b.n	80043be <HAL_GPIO_Init+0x206>
 80043ac:	2304      	movs	r3, #4
 80043ae:	e006      	b.n	80043be <HAL_GPIO_Init+0x206>
 80043b0:	2303      	movs	r3, #3
 80043b2:	e004      	b.n	80043be <HAL_GPIO_Init+0x206>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e002      	b.n	80043be <HAL_GPIO_Init+0x206>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <HAL_GPIO_Init+0x206>
 80043bc:	2300      	movs	r3, #0
 80043be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c0:	f002 0203 	and.w	r2, r2, #3
 80043c4:	0092      	lsls	r2, r2, #2
 80043c6:	4093      	lsls	r3, r2
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	492f      	ldr	r1, [pc, #188]	; (800448c <HAL_GPIO_Init+0x2d4>)
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	089b      	lsrs	r3, r3, #2
 80043d4:	3302      	adds	r3, #2
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d006      	beq.n	80043f6 <HAL_GPIO_Init+0x23e>
 80043e8:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	492e      	ldr	r1, [pc, #184]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]
 80043f4:	e006      	b.n	8004404 <HAL_GPIO_Init+0x24c>
 80043f6:	4b2c      	ldr	r3, [pc, #176]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	492a      	ldr	r1, [pc, #168]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 8004400:	4013      	ands	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d006      	beq.n	800441e <HAL_GPIO_Init+0x266>
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	4924      	ldr	r1, [pc, #144]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
 800441c:	e006      	b.n	800442c <HAL_GPIO_Init+0x274>
 800441e:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	43db      	mvns	r3, r3
 8004426:	4920      	ldr	r1, [pc, #128]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 8004428:	4013      	ands	r3, r2
 800442a:	604b      	str	r3, [r1, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d006      	beq.n	8004446 <HAL_GPIO_Init+0x28e>
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	491a      	ldr	r1, [pc, #104]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	4313      	orrs	r3, r2
 8004442:	608b      	str	r3, [r1, #8]
 8004444:	e006      	b.n	8004454 <HAL_GPIO_Init+0x29c>
 8004446:	4b18      	ldr	r3, [pc, #96]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	43db      	mvns	r3, r3
 800444e:	4916      	ldr	r1, [pc, #88]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 8004450:	4013      	ands	r3, r2
 8004452:	608b      	str	r3, [r1, #8]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d025      	beq.n	80044ac <HAL_GPIO_Init+0x2f4>
 8004460:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	4910      	ldr	r1, [pc, #64]	; (80044a8 <HAL_GPIO_Init+0x2f0>)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	4313      	orrs	r3, r2
 800446a:	60cb      	str	r3, [r1, #12]
 800446c:	e025      	b.n	80044ba <HAL_GPIO_Init+0x302>
 800446e:	bf00      	nop
 8004470:	10320000 	.word	0x10320000
 8004474:	10310000 	.word	0x10310000
 8004478:	10220000 	.word	0x10220000
 800447c:	10210000 	.word	0x10210000
 8004480:	10120000 	.word	0x10120000
 8004484:	10110000 	.word	0x10110000
 8004488:	40021000 	.word	0x40021000
 800448c:	40010000 	.word	0x40010000
 8004490:	40010800 	.word	0x40010800
 8004494:	40010c00 	.word	0x40010c00
 8004498:	40011000 	.word	0x40011000
 800449c:	40011400 	.word	0x40011400
 80044a0:	40011800 	.word	0x40011800
 80044a4:	40011c00 	.word	0x40011c00
 80044a8:	40010400 	.word	0x40010400
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_GPIO_Init+0x324>)
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	43db      	mvns	r3, r3
 80044b4:	4909      	ldr	r1, [pc, #36]	; (80044dc <HAL_GPIO_Init+0x324>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	60cb      	str	r3, [r1, #12]
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	3301      	adds	r3, #1
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f47f ae7e 	bne.w	80041cc <HAL_GPIO_Init+0x14>
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	372c      	adds	r7, #44	; 0x2c
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	40010400 	.word	0x40010400

080044e0 <HAL_GPIO_ReadPin>:
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	807b      	strh	r3, [r7, #2]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	887b      	ldrh	r3, [r7, #2]
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_GPIO_ReadPin+0x1e>
 80044f8:	2301      	movs	r3, #1
 80044fa:	73fb      	strb	r3, [r7, #15]
 80044fc:	e001      	b.n	8004502 <HAL_GPIO_ReadPin+0x22>
 80044fe:	2300      	movs	r3, #0
 8004500:	73fb      	strb	r3, [r7, #15]
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr

0800450e <HAL_GPIO_WritePin>:
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	460b      	mov	r3, r1
 8004518:	807b      	strh	r3, [r7, #2]
 800451a:	4613      	mov	r3, r2
 800451c:	707b      	strb	r3, [r7, #1]
 800451e:	787b      	ldrb	r3, [r7, #1]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_GPIO_WritePin+0x1e>
 8004524:	887a      	ldrh	r2, [r7, #2]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	611a      	str	r2, [r3, #16]
 800452a:	e003      	b.n	8004534 <HAL_GPIO_WritePin+0x26>
 800452c:	887b      	ldrh	r3, [r7, #2]
 800452e:	041a      	lsls	r2, r3, #16
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	611a      	str	r2, [r3, #16]
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr
	...

08004540 <HAL_GPIO_EXTI_IRQHandler>:
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	80fb      	strh	r3, [r7, #6]
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	88fb      	ldrh	r3, [r7, #6]
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d006      	beq.n	8004564 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8004556:	4a05      	ldr	r2, [pc, #20]	; (800456c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	6153      	str	r3, [r2, #20]
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fc fd50 	bl	8001004 <HAL_GPIO_EXTI_Callback>
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40010400 	.word	0x40010400

08004570 <HAL_RCC_OscConfig>:
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_OscConfig+0x12>
 800457e:	2301      	movs	r3, #1
 8004580:	e26c      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 8087 	beq.w	800469e <HAL_RCC_OscConfig+0x12e>
 8004590:	4b92      	ldr	r3, [pc, #584]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b04      	cmp	r3, #4
 800459a:	d00c      	beq.n	80045b6 <HAL_RCC_OscConfig+0x46>
 800459c:	4b8f      	ldr	r3, [pc, #572]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d112      	bne.n	80045ce <HAL_RCC_OscConfig+0x5e>
 80045a8:	4b8c      	ldr	r3, [pc, #560]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b4:	d10b      	bne.n	80045ce <HAL_RCC_OscConfig+0x5e>
 80045b6:	4b89      	ldr	r3, [pc, #548]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d06c      	beq.n	800469c <HAL_RCC_OscConfig+0x12c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d168      	bne.n	800469c <HAL_RCC_OscConfig+0x12c>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e246      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d6:	d106      	bne.n	80045e6 <HAL_RCC_OscConfig+0x76>
 80045d8:	4b80      	ldr	r3, [pc, #512]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a7f      	ldr	r2, [pc, #508]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80045de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	e02e      	b.n	8004644 <HAL_RCC_OscConfig+0xd4>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10c      	bne.n	8004608 <HAL_RCC_OscConfig+0x98>
 80045ee:	4b7b      	ldr	r3, [pc, #492]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a7a      	ldr	r2, [pc, #488]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80045f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	4b78      	ldr	r3, [pc, #480]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a77      	ldr	r2, [pc, #476]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 8004600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e01d      	b.n	8004644 <HAL_RCC_OscConfig+0xd4>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0xbc>
 8004612:	4b72      	ldr	r3, [pc, #456]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a71      	ldr	r2, [pc, #452]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 8004618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	4b6f      	ldr	r3, [pc, #444]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a6e      	ldr	r2, [pc, #440]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 8004624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	e00b      	b.n	8004644 <HAL_RCC_OscConfig+0xd4>
 800462c:	4b6b      	ldr	r3, [pc, #428]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a6a      	ldr	r2, [pc, #424]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 8004632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	4b68      	ldr	r3, [pc, #416]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a67      	ldr	r2, [pc, #412]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 800463e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d013      	beq.n	8004674 <HAL_RCC_OscConfig+0x104>
 800464c:	f7ff f994 	bl	8003978 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0xf6>
 8004654:	f7ff f990 	bl	8003978 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b64      	cmp	r3, #100	; 0x64
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0xf6>
 8004662:	2303      	movs	r3, #3
 8004664:	e1fa      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 8004666:	4b5d      	ldr	r3, [pc, #372]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0xe4>
 8004672:	e014      	b.n	800469e <HAL_RCC_OscConfig+0x12e>
 8004674:	f7ff f980 	bl	8003978 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x11e>
 800467c:	f7ff f97c 	bl	8003978 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b64      	cmp	r3, #100	; 0x64
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x11e>
 800468a:	2303      	movs	r3, #3
 800468c:	e1e6      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 800468e:	4b53      	ldr	r3, [pc, #332]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x10c>
 800469a:	e000      	b.n	800469e <HAL_RCC_OscConfig+0x12e>
 800469c:	bf00      	nop
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d063      	beq.n	8004772 <HAL_RCC_OscConfig+0x202>
 80046aa:	4b4c      	ldr	r3, [pc, #304]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00b      	beq.n	80046ce <HAL_RCC_OscConfig+0x15e>
 80046b6:	4b49      	ldr	r3, [pc, #292]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d11c      	bne.n	80046fc <HAL_RCC_OscConfig+0x18c>
 80046c2:	4b46      	ldr	r3, [pc, #280]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d116      	bne.n	80046fc <HAL_RCC_OscConfig+0x18c>
 80046ce:	4b43      	ldr	r3, [pc, #268]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <HAL_RCC_OscConfig+0x176>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_OscConfig+0x176>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e1ba      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 80046e6:	4b3d      	ldr	r3, [pc, #244]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	4939      	ldr	r1, [pc, #228]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
 80046fa:	e03a      	b.n	8004772 <HAL_RCC_OscConfig+0x202>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d020      	beq.n	8004746 <HAL_RCC_OscConfig+0x1d6>
 8004704:	4b36      	ldr	r3, [pc, #216]	; (80047e0 <HAL_RCC_OscConfig+0x270>)
 8004706:	2201      	movs	r2, #1
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f7ff f935 	bl	8003978 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x1b4>
 8004712:	f7ff f931 	bl	8003978 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x1b4>
 8004720:	2303      	movs	r3, #3
 8004722:	e19b      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 8004724:	4b2d      	ldr	r3, [pc, #180]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x1a2>
 8004730:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4927      	ldr	r1, [pc, #156]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 8004740:	4313      	orrs	r3, r2
 8004742:	600b      	str	r3, [r1, #0]
 8004744:	e015      	b.n	8004772 <HAL_RCC_OscConfig+0x202>
 8004746:	4b26      	ldr	r3, [pc, #152]	; (80047e0 <HAL_RCC_OscConfig+0x270>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	f7ff f914 	bl	8003978 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x1f6>
 8004754:	f7ff f910 	bl	8003978 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x1f6>
 8004762:	2303      	movs	r3, #3
 8004764:	e17a      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 8004766:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x1e4>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d03a      	beq.n	80047f4 <HAL_RCC_OscConfig+0x284>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d019      	beq.n	80047ba <HAL_RCC_OscConfig+0x24a>
 8004786:	4b17      	ldr	r3, [pc, #92]	; (80047e4 <HAL_RCC_OscConfig+0x274>)
 8004788:	2201      	movs	r2, #1
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	f7ff f8f4 	bl	8003978 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x236>
 8004794:	f7ff f8f0 	bl	8003978 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x236>
 80047a2:	2303      	movs	r3, #3
 80047a4:	e15a      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 80047a6:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <HAL_RCC_OscConfig+0x26c>)
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0x224>
 80047b2:	2001      	movs	r0, #1
 80047b4:	f000 faa6 	bl	8004d04 <RCC_Delay>
 80047b8:	e01c      	b.n	80047f4 <HAL_RCC_OscConfig+0x284>
 80047ba:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <HAL_RCC_OscConfig+0x274>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f7ff f8da 	bl	8003978 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]
 80047c6:	e00f      	b.n	80047e8 <HAL_RCC_OscConfig+0x278>
 80047c8:	f7ff f8d6 	bl	8003978 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d908      	bls.n	80047e8 <HAL_RCC_OscConfig+0x278>
 80047d6:	2303      	movs	r3, #3
 80047d8:	e140      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 80047da:	bf00      	nop
 80047dc:	40021000 	.word	0x40021000
 80047e0:	42420000 	.word	0x42420000
 80047e4:	42420480 	.word	0x42420480
 80047e8:	4b9e      	ldr	r3, [pc, #632]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1e9      	bne.n	80047c8 <HAL_RCC_OscConfig+0x258>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80a6 	beq.w	800494e <HAL_RCC_OscConfig+0x3de>
 8004802:	2300      	movs	r3, #0
 8004804:	75fb      	strb	r3, [r7, #23]
 8004806:	4b97      	ldr	r3, [pc, #604]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10d      	bne.n	800482e <HAL_RCC_OscConfig+0x2be>
 8004812:	4b94      	ldr	r3, [pc, #592]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	4a93      	ldr	r2, [pc, #588]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 8004818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481c:	61d3      	str	r3, [r2, #28]
 800481e:	4b91      	ldr	r3, [pc, #580]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004826:	60bb      	str	r3, [r7, #8]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2301      	movs	r3, #1
 800482c:	75fb      	strb	r3, [r7, #23]
 800482e:	4b8e      	ldr	r3, [pc, #568]	; (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d118      	bne.n	800486c <HAL_RCC_OscConfig+0x2fc>
 800483a:	4b8b      	ldr	r3, [pc, #556]	; (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a8a      	ldr	r2, [pc, #552]	; (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	f7ff f897 	bl	8003978 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x2f0>
 800484e:	f7ff f893 	bl	8003978 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b64      	cmp	r3, #100	; 0x64
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x2f0>
 800485c:	2303      	movs	r3, #3
 800485e:	e0fd      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 8004860:	4b81      	ldr	r3, [pc, #516]	; (8004a68 <HAL_RCC_OscConfig+0x4f8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x2de>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d106      	bne.n	8004882 <HAL_RCC_OscConfig+0x312>
 8004874:	4b7b      	ldr	r3, [pc, #492]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	4a7a      	ldr	r2, [pc, #488]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	6213      	str	r3, [r2, #32]
 8004880:	e02d      	b.n	80048de <HAL_RCC_OscConfig+0x36e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0x334>
 800488a:	4b76      	ldr	r3, [pc, #472]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	4a75      	ldr	r2, [pc, #468]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 8004890:	f023 0301 	bic.w	r3, r3, #1
 8004894:	6213      	str	r3, [r2, #32]
 8004896:	4b73      	ldr	r3, [pc, #460]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	4a72      	ldr	r2, [pc, #456]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 800489c:	f023 0304 	bic.w	r3, r3, #4
 80048a0:	6213      	str	r3, [r2, #32]
 80048a2:	e01c      	b.n	80048de <HAL_RCC_OscConfig+0x36e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b05      	cmp	r3, #5
 80048aa:	d10c      	bne.n	80048c6 <HAL_RCC_OscConfig+0x356>
 80048ac:	4b6d      	ldr	r3, [pc, #436]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	4a6c      	ldr	r2, [pc, #432]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80048b2:	f043 0304 	orr.w	r3, r3, #4
 80048b6:	6213      	str	r3, [r2, #32]
 80048b8:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	4a69      	ldr	r2, [pc, #420]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	6213      	str	r3, [r2, #32]
 80048c4:	e00b      	b.n	80048de <HAL_RCC_OscConfig+0x36e>
 80048c6:	4b67      	ldr	r3, [pc, #412]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	4a66      	ldr	r2, [pc, #408]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	6213      	str	r3, [r2, #32]
 80048d2:	4b64      	ldr	r3, [pc, #400]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	4a63      	ldr	r2, [pc, #396]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80048d8:	f023 0304 	bic.w	r3, r3, #4
 80048dc:	6213      	str	r3, [r2, #32]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d015      	beq.n	8004912 <HAL_RCC_OscConfig+0x3a2>
 80048e6:	f7ff f847 	bl	8003978 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]
 80048ec:	e00a      	b.n	8004904 <HAL_RCC_OscConfig+0x394>
 80048ee:	f7ff f843 	bl	8003978 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x394>
 8004900:	2303      	movs	r3, #3
 8004902:	e0ab      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 8004904:	4b57      	ldr	r3, [pc, #348]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0ee      	beq.n	80048ee <HAL_RCC_OscConfig+0x37e>
 8004910:	e014      	b.n	800493c <HAL_RCC_OscConfig+0x3cc>
 8004912:	f7ff f831 	bl	8003978 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]
 8004918:	e00a      	b.n	8004930 <HAL_RCC_OscConfig+0x3c0>
 800491a:	f7ff f82d 	bl	8003978 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f241 3288 	movw	r2, #5000	; 0x1388
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x3c0>
 800492c:	2303      	movs	r3, #3
 800492e:	e095      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 8004930:	4b4c      	ldr	r3, [pc, #304]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1ee      	bne.n	800491a <HAL_RCC_OscConfig+0x3aa>
 800493c:	7dfb      	ldrb	r3, [r7, #23]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d105      	bne.n	800494e <HAL_RCC_OscConfig+0x3de>
 8004942:	4b48      	ldr	r3, [pc, #288]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	4a47      	ldr	r2, [pc, #284]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 8004948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800494c:	61d3      	str	r3, [r2, #28]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8081 	beq.w	8004a5a <HAL_RCC_OscConfig+0x4ea>
 8004958:	4b42      	ldr	r3, [pc, #264]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f003 030c 	and.w	r3, r3, #12
 8004960:	2b08      	cmp	r3, #8
 8004962:	d061      	beq.n	8004a28 <HAL_RCC_OscConfig+0x4b8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	2b02      	cmp	r3, #2
 800496a:	d146      	bne.n	80049fa <HAL_RCC_OscConfig+0x48a>
 800496c:	4b3f      	ldr	r3, [pc, #252]	; (8004a6c <HAL_RCC_OscConfig+0x4fc>)
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f7ff f801 	bl	8003978 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x41c>
 800497a:	f7fe fffd 	bl	8003978 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x41c>
 8004988:	2303      	movs	r3, #3
 800498a:	e067      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 800498c:	4b35      	ldr	r3, [pc, #212]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f0      	bne.n	800497a <HAL_RCC_OscConfig+0x40a>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d108      	bne.n	80049b4 <HAL_RCC_OscConfig+0x444>
 80049a2:	4b30      	ldr	r3, [pc, #192]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	492d      	ldr	r1, [pc, #180]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	604b      	str	r3, [r1, #4]
 80049b4:	4b2b      	ldr	r3, [pc, #172]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a19      	ldr	r1, [r3, #32]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	430b      	orrs	r3, r1
 80049c6:	4927      	ldr	r1, [pc, #156]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	604b      	str	r3, [r1, #4]
 80049cc:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <HAL_RCC_OscConfig+0x4fc>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	f7fe ffd1 	bl	8003978 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x47c>
 80049da:	f7fe ffcd 	bl	8003978 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x47c>
 80049e8:	2303      	movs	r3, #3
 80049ea:	e037      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 80049ec:	4b1d      	ldr	r3, [pc, #116]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0x46a>
 80049f8:	e02f      	b.n	8004a5a <HAL_RCC_OscConfig+0x4ea>
 80049fa:	4b1c      	ldr	r3, [pc, #112]	; (8004a6c <HAL_RCC_OscConfig+0x4fc>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	f7fe ffba 	bl	8003978 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x4aa>
 8004a08:	f7fe ffb6 	bl	8003978 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x4aa>
 8004a16:	2303      	movs	r3, #3
 8004a18:	e020      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 8004a1a:	4b12      	ldr	r3, [pc, #72]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x498>
 8004a26:	e018      	b.n	8004a5a <HAL_RCC_OscConfig+0x4ea>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_OscConfig+0x4c4>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e013      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <HAL_RCC_OscConfig+0x4f4>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	60fb      	str	r3, [r7, #12]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d106      	bne.n	8004a56 <HAL_RCC_OscConfig+0x4e6>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d001      	beq.n	8004a5a <HAL_RCC_OscConfig+0x4ea>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <HAL_RCC_OscConfig+0x4ec>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40021000 	.word	0x40021000
 8004a68:	40007000 	.word	0x40007000
 8004a6c:	42420060 	.word	0x42420060

08004a70 <HAL_RCC_ClockConfig>:
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x14>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0d0      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1b6>
 8004a84:	4b6a      	ldr	r3, [pc, #424]	; (8004c30 <HAL_RCC_ClockConfig+0x1c0>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d910      	bls.n	8004ab4 <HAL_RCC_ClockConfig+0x44>
 8004a92:	4b67      	ldr	r3, [pc, #412]	; (8004c30 <HAL_RCC_ClockConfig+0x1c0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 0207 	bic.w	r2, r3, #7
 8004a9a:	4965      	ldr	r1, [pc, #404]	; (8004c30 <HAL_RCC_ClockConfig+0x1c0>)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]
 8004aa2:	4b63      	ldr	r3, [pc, #396]	; (8004c30 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x44>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0b8      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1b6>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d020      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x92>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x68>
 8004acc:	4b59      	ldr	r3, [pc, #356]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	4a58      	ldr	r2, [pc, #352]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ad6:	6053      	str	r3, [r2, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x80>
 8004ae4:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4a52      	ldr	r2, [pc, #328]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004aea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004aee:	6053      	str	r3, [r2, #4]
 8004af0:	4b50      	ldr	r3, [pc, #320]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	494d      	ldr	r1, [pc, #308]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	604b      	str	r3, [r1, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d040      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x120>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d107      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xb6>
 8004b16:	4b47      	ldr	r3, [pc, #284]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d115      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xde>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e07f      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1b6>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d107      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xce>
 8004b2e:	4b41      	ldr	r3, [pc, #260]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d109      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xde>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e073      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1b6>
 8004b3e:	4b3d      	ldr	r3, [pc, #244]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xde>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e06b      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1b6>
 8004b4e:	4b39      	ldr	r3, [pc, #228]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f023 0203 	bic.w	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4936      	ldr	r1, [pc, #216]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
 8004b60:	f7fe ff0a 	bl	8003978 <HAL_GetTick>
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	e00a      	b.n	8004b7e <HAL_RCC_ClockConfig+0x10e>
 8004b68:	f7fe ff06 	bl	8003978 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_ClockConfig+0x10e>
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e053      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1b6>
 8004b7e:	4b2d      	ldr	r3, [pc, #180]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f003 020c 	and.w	r2, r3, #12
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d1eb      	bne.n	8004b68 <HAL_RCC_ClockConfig+0xf8>
 8004b90:	4b27      	ldr	r3, [pc, #156]	; (8004c30 <HAL_RCC_ClockConfig+0x1c0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d210      	bcs.n	8004bc0 <HAL_RCC_ClockConfig+0x150>
 8004b9e:	4b24      	ldr	r3, [pc, #144]	; (8004c30 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 0207 	bic.w	r2, r3, #7
 8004ba6:	4922      	ldr	r1, [pc, #136]	; (8004c30 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]
 8004bae:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x150>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e032      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1b6>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d008      	beq.n	8004bde <HAL_RCC_ClockConfig+0x16e>
 8004bcc:	4b19      	ldr	r3, [pc, #100]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4916      	ldr	r1, [pc, #88]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	604b      	str	r3, [r1, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x18e>
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	490e      	ldr	r1, [pc, #56]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	604b      	str	r3, [r1, #4]
 8004bfe:	f000 f821 	bl	8004c44 <HAL_RCC_GetSysClockFreq>
 8004c02:	4602      	mov	r2, r0
 8004c04:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	490a      	ldr	r1, [pc, #40]	; (8004c38 <HAL_RCC_ClockConfig+0x1c8>)
 8004c10:	5ccb      	ldrb	r3, [r1, r3]
 8004c12:	fa22 f303 	lsr.w	r3, r2, r3
 8004c16:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <HAL_RCC_ClockConfig+0x1cc>)
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <HAL_RCC_ClockConfig+0x1d0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe fe68 	bl	80038f4 <HAL_InitTick>
 8004c24:	2300      	movs	r3, #0
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40022000 	.word	0x40022000
 8004c34:	40021000 	.word	0x40021000
 8004c38:	08009354 	.word	0x08009354
 8004c3c:	20000000 	.word	0x20000000
 8004c40:	20000004 	.word	0x20000004

08004c44 <HAL_RCC_GetSysClockFreq>:
 8004c44:	b490      	push	{r4, r7}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c4c:	1d3c      	adds	r4, r7, #4
 8004c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004c54:	f240 2301 	movw	r3, #513	; 0x201
 8004c58:	803b      	strh	r3, [r7, #0]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	2300      	movs	r3, #0
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	623b      	str	r3, [r7, #32]
 8004c6e:	4b22      	ldr	r3, [pc, #136]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d002      	beq.n	8004c84 <HAL_RCC_GetSysClockFreq+0x40>
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d003      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0x46>
 8004c82:	e02d      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x9c>
 8004c84:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c86:	623b      	str	r3, [r7, #32]
 8004c88:	e02d      	b.n	8004ce6 <HAL_RCC_GetSysClockFreq+0xa2>
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	0c9b      	lsrs	r3, r3, #18
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c96:	4413      	add	r3, r2
 8004c98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d013      	beq.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x8c>
 8004ca8:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	0c5b      	lsrs	r3, r3, #17
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	4a0e      	ldr	r2, [pc, #56]	; (8004cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc2:	fb02 f203 	mul.w	r2, r2, r3
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cce:	e004      	b.n	8004cda <HAL_RCC_GetSysClockFreq+0x96>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	4a0b      	ldr	r2, [pc, #44]	; (8004d00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cd4:	fb02 f303 	mul.w	r3, r2, r3
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	623b      	str	r3, [r7, #32]
 8004cde:	e002      	b.n	8004ce6 <HAL_RCC_GetSysClockFreq+0xa2>
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ce2:	623b      	str	r3, [r7, #32]
 8004ce4:	bf00      	nop
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3728      	adds	r7, #40	; 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc90      	pop	{r4, r7}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	080092f0 	.word	0x080092f0
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	007a1200 	.word	0x007a1200
 8004d00:	003d0900 	.word	0x003d0900

08004d04 <RCC_Delay>:
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <RCC_Delay+0x34>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <RCC_Delay+0x38>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	0a5b      	lsrs	r3, r3, #9
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	bf00      	nop
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1e5a      	subs	r2, r3, #1
 8004d26:	60fa      	str	r2, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f9      	bne.n	8004d20 <RCC_Delay+0x1c>
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	10624dd3 	.word	0x10624dd3

08004d40 <HAL_SPI_Init>:
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_SPI_Init+0x12>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e076      	b.n	8004e40 <HAL_SPI_Init+0x100>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d108      	bne.n	8004d6c <HAL_SPI_Init+0x2c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d62:	d009      	beq.n	8004d78 <HAL_SPI_Init+0x38>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	61da      	str	r2, [r3, #28]
 8004d6a:	e005      	b.n	8004d78 <HAL_SPI_Init+0x38>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	611a      	str	r2, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	615a      	str	r2, [r3, #20]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	629a      	str	r2, [r3, #40]	; 0x28
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_SPI_Init+0x58>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fe fc68 	bl	8003668 <HAL_SPI_MspInit>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfc:	ea42 0103 	orr.w	r1, r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	0c1a      	lsrs	r2, r3, #16
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f002 0204 	and.w	r2, r2, #4
 8004e1e:	605a      	str	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e2e:	61da      	str	r2, [r3, #28]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	655a      	str	r2, [r3, #84]	; 0x54
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004e3e:	2300      	movs	r3, #0
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_SPI_Transmit>:
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	4613      	mov	r3, r2
 8004e56:	80fb      	strh	r3, [r7, #6]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_SPI_Transmit+0x22>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e126      	b.n	80050b8 <HAL_SPI_Transmit+0x270>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004e72:	f7fe fd81 	bl	8003978 <HAL_GetTick>
 8004e76:	61b8      	str	r0, [r7, #24]
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	82fb      	strh	r3, [r7, #22]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d002      	beq.n	8004e8e <HAL_SPI_Transmit+0x46>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e10b      	b.n	80050a6 <HAL_SPI_Transmit+0x25e>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_SPI_Transmit+0x52>
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <HAL_SPI_Transmit+0x58>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e102      	b.n	80050a6 <HAL_SPI_Transmit+0x25e>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	655a      	str	r2, [r3, #84]	; 0x54
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	88fa      	ldrh	r2, [r7, #6]
 8004eb8:	869a      	strh	r2, [r3, #52]	; 0x34
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	88fa      	ldrh	r2, [r7, #6]
 8004ebe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	645a      	str	r2, [r3, #68]	; 0x44
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee6:	d10f      	bne.n	8004f08 <HAL_SPI_Transmit+0xc0>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b40      	cmp	r3, #64	; 0x40
 8004f14:	d007      	beq.n	8004f26 <HAL_SPI_Transmit+0xde>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f2e:	d14b      	bne.n	8004fc8 <HAL_SPI_Transmit+0x180>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <HAL_SPI_Transmit+0xf6>
 8004f38:	8afb      	ldrh	r3, [r7, #22]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d13e      	bne.n	8004fbc <HAL_SPI_Transmit+0x174>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	881a      	ldrh	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60da      	str	r2, [r3, #12]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	1c9a      	adds	r2, r3, #2
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f62:	e02b      	b.n	8004fbc <HAL_SPI_Transmit+0x174>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d112      	bne.n	8004f98 <HAL_SPI_Transmit+0x150>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	881a      	ldrh	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60da      	str	r2, [r3, #12]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	1c9a      	adds	r2, r3, #2
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f96:	e011      	b.n	8004fbc <HAL_SPI_Transmit+0x174>
 8004f98:	f7fe fcee 	bl	8003978 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d803      	bhi.n	8004fb0 <HAL_SPI_Transmit+0x168>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d102      	bne.n	8004fb6 <HAL_SPI_Transmit+0x16e>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <HAL_SPI_Transmit+0x174>
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e074      	b.n	80050a6 <HAL_SPI_Transmit+0x25e>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ce      	bne.n	8004f64 <HAL_SPI_Transmit+0x11c>
 8004fc6:	e04c      	b.n	8005062 <HAL_SPI_Transmit+0x21a>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_SPI_Transmit+0x18e>
 8004fd0:	8afb      	ldrh	r3, [r7, #22]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d140      	bne.n	8005058 <HAL_SPI_Transmit+0x210>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	7812      	ldrb	r2, [r2, #0]
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ffc:	e02c      	b.n	8005058 <HAL_SPI_Transmit+0x210>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b02      	cmp	r3, #2
 800500a:	d113      	bne.n	8005034 <HAL_SPI_Transmit+0x1ec>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	7812      	ldrb	r2, [r2, #0]
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	86da      	strh	r2, [r3, #54]	; 0x36
 8005032:	e011      	b.n	8005058 <HAL_SPI_Transmit+0x210>
 8005034:	f7fe fca0 	bl	8003978 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d803      	bhi.n	800504c <HAL_SPI_Transmit+0x204>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d102      	bne.n	8005052 <HAL_SPI_Transmit+0x20a>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <HAL_SPI_Transmit+0x210>
 8005052:	2303      	movs	r3, #3
 8005054:	77fb      	strb	r3, [r7, #31]
 8005056:	e026      	b.n	80050a6 <HAL_SPI_Transmit+0x25e>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1cd      	bne.n	8004ffe <HAL_SPI_Transmit+0x1b6>
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fcbc 	bl	80059e4 <SPI_EndRxTxTransaction>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_SPI_Transmit+0x230>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	655a      	str	r2, [r3, #84]	; 0x54
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <HAL_SPI_Transmit+0x24e>
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_SPI_Transmit+0x25c>
 800509e:	2301      	movs	r3, #1
 80050a0:	77fb      	strb	r3, [r7, #31]
 80050a2:	e000      	b.n	80050a6 <HAL_SPI_Transmit+0x25e>
 80050a4:	bf00      	nop
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80050b6:	7ffb      	ldrb	r3, [r7, #31]
 80050b8:	4618      	mov	r0, r3
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_SPI_Receive>:
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	4613      	mov	r3, r2
 80050ce:	80fb      	strh	r3, [r7, #6]
 80050d0:	2300      	movs	r3, #0
 80050d2:	75fb      	strb	r3, [r7, #23]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050dc:	d112      	bne.n	8005104 <HAL_SPI_Receive+0x44>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10e      	bne.n	8005104 <HAL_SPI_Receive+0x44>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2204      	movs	r2, #4
 80050ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80050ee:	88fa      	ldrh	r2, [r7, #6]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f8f1 	bl	80052e2 <HAL_SPI_TransmitReceive>
 8005100:	4603      	mov	r3, r0
 8005102:	e0ea      	b.n	80052da <HAL_SPI_Receive+0x21a>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_SPI_Receive+0x52>
 800510e:	2302      	movs	r3, #2
 8005110:	e0e3      	b.n	80052da <HAL_SPI_Receive+0x21a>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800511a:	f7fe fc2d 	bl	8003978 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	d002      	beq.n	8005132 <HAL_SPI_Receive+0x72>
 800512c:	2302      	movs	r3, #2
 800512e:	75fb      	strb	r3, [r7, #23]
 8005130:	e0ca      	b.n	80052c8 <HAL_SPI_Receive+0x208>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_SPI_Receive+0x7e>
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <HAL_SPI_Receive+0x84>
 800513e:	2301      	movs	r3, #1
 8005140:	75fb      	strb	r3, [r7, #23]
 8005142:	e0c1      	b.n	80052c8 <HAL_SPI_Receive+0x208>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2204      	movs	r2, #4
 8005148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	655a      	str	r2, [r3, #84]	; 0x54
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	639a      	str	r2, [r3, #56]	; 0x38
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	879a      	strh	r2, [r3, #60]	; 0x3c
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	; 0x30
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	869a      	strh	r2, [r3, #52]	; 0x34
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	86da      	strh	r2, [r3, #54]	; 0x36
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	641a      	str	r2, [r3, #64]	; 0x40
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	645a      	str	r2, [r3, #68]	; 0x44
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518a:	d10f      	bne.n	80051ac <HAL_SPI_Receive+0xec>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	d007      	beq.n	80051ca <HAL_SPI_Receive+0x10a>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d162      	bne.n	8005298 <HAL_SPI_Receive+0x1d8>
 80051d2:	e02e      	b.n	8005232 <HAL_SPI_Receive+0x172>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d115      	bne.n	800520e <HAL_SPI_Receive+0x14e>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f103 020c 	add.w	r2, r3, #12
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	7812      	ldrb	r2, [r2, #0]
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	639a      	str	r2, [r3, #56]	; 0x38
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800520c:	e011      	b.n	8005232 <HAL_SPI_Receive+0x172>
 800520e:	f7fe fbb3 	bl	8003978 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d803      	bhi.n	8005226 <HAL_SPI_Receive+0x166>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005224:	d102      	bne.n	800522c <HAL_SPI_Receive+0x16c>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d102      	bne.n	8005232 <HAL_SPI_Receive+0x172>
 800522c:	2303      	movs	r3, #3
 800522e:	75fb      	strb	r3, [r7, #23]
 8005230:	e04a      	b.n	80052c8 <HAL_SPI_Receive+0x208>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1cb      	bne.n	80051d4 <HAL_SPI_Receive+0x114>
 800523c:	e031      	b.n	80052a2 <HAL_SPI_Receive+0x1e2>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b01      	cmp	r3, #1
 800524a:	d113      	bne.n	8005274 <HAL_SPI_Receive+0x1b4>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	b292      	uxth	r2, r2
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	1c9a      	adds	r2, r3, #2
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	639a      	str	r2, [r3, #56]	; 0x38
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005272:	e011      	b.n	8005298 <HAL_SPI_Receive+0x1d8>
 8005274:	f7fe fb80 	bl	8003978 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d803      	bhi.n	800528c <HAL_SPI_Receive+0x1cc>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d102      	bne.n	8005292 <HAL_SPI_Receive+0x1d2>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d102      	bne.n	8005298 <HAL_SPI_Receive+0x1d8>
 8005292:	2303      	movs	r3, #3
 8005294:	75fb      	strb	r3, [r7, #23]
 8005296:	e017      	b.n	80052c8 <HAL_SPI_Receive+0x208>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1cd      	bne.n	800523e <HAL_SPI_Receive+0x17e>
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fb4a 	bl	8005940 <SPI_EndRxTransaction>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_SPI_Receive+0x1f8>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HAL_SPI_Receive+0x206>
 80052c0:	2301      	movs	r3, #1
 80052c2:	75fb      	strb	r3, [r7, #23]
 80052c4:	e000      	b.n	80052c8 <HAL_SPI_Receive+0x208>
 80052c6:	bf00      	nop
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_SPI_TransmitReceive>:
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b08c      	sub	sp, #48	; 0x30
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	807b      	strh	r3, [r7, #2]
 80052f0:	2301      	movs	r3, #1
 80052f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f4:	2300      	movs	r3, #0
 80052f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_SPI_TransmitReceive+0x26>
 8005304:	2302      	movs	r3, #2
 8005306:	e18a      	b.n	800561e <HAL_SPI_TransmitReceive+0x33c>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005310:	f7fe fb32 	bl	8003978 <HAL_GetTick>
 8005314:	6278      	str	r0, [r7, #36]	; 0x24
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800531c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	61fb      	str	r3, [r7, #28]
 8005326:	887b      	ldrh	r3, [r7, #2]
 8005328:	837b      	strh	r3, [r7, #26]
 800532a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800532e:	2b01      	cmp	r3, #1
 8005330:	d00f      	beq.n	8005352 <HAL_SPI_TransmitReceive+0x70>
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005338:	d107      	bne.n	800534a <HAL_SPI_TransmitReceive+0x68>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <HAL_SPI_TransmitReceive+0x68>
 8005342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005346:	2b04      	cmp	r3, #4
 8005348:	d003      	beq.n	8005352 <HAL_SPI_TransmitReceive+0x70>
 800534a:	2302      	movs	r3, #2
 800534c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005350:	e15b      	b.n	800560a <HAL_SPI_TransmitReceive+0x328>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <HAL_SPI_TransmitReceive+0x82>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_SPI_TransmitReceive+0x82>
 800535e:	887b      	ldrh	r3, [r7, #2]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d103      	bne.n	800536c <HAL_SPI_TransmitReceive+0x8a>
 8005364:	2301      	movs	r3, #1
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536a:	e14e      	b.n	800560a <HAL_SPI_TransmitReceive+0x328>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b04      	cmp	r3, #4
 8005376:	d003      	beq.n	8005380 <HAL_SPI_TransmitReceive+0x9e>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2205      	movs	r2, #5
 800537c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	639a      	str	r2, [r3, #56]	; 0x38
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	887a      	ldrh	r2, [r7, #2]
 8005390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	887a      	ldrh	r2, [r7, #2]
 8005396:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	887a      	ldrh	r2, [r7, #2]
 80053a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	887a      	ldrh	r2, [r7, #2]
 80053a8:	869a      	strh	r2, [r3, #52]	; 0x34
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	645a      	str	r2, [r3, #68]	; 0x44
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d007      	beq.n	80053d4 <HAL_SPI_TransmitReceive+0xf2>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053dc:	d178      	bne.n	80054d0 <HAL_SPI_TransmitReceive+0x1ee>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_SPI_TransmitReceive+0x10a>
 80053e6:	8b7b      	ldrh	r3, [r7, #26]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d166      	bne.n	80054ba <HAL_SPI_TransmitReceive+0x1d8>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	881a      	ldrh	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60da      	str	r2, [r3, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fc:	1c9a      	adds	r2, r3, #2
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	631a      	str	r2, [r3, #48]	; 0x30
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005410:	e053      	b.n	80054ba <HAL_SPI_TransmitReceive+0x1d8>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b02      	cmp	r3, #2
 800541e:	d11b      	bne.n	8005458 <HAL_SPI_TransmitReceive+0x176>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d016      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x176>
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d113      	bne.n	8005458 <HAL_SPI_TransmitReceive+0x176>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	881a      	ldrh	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60da      	str	r2, [r3, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	1c9a      	adds	r2, r3, #2
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	631a      	str	r2, [r3, #48]	; 0x30
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	86da      	strh	r2, [r3, #54]	; 0x36
 8005454:	2300      	movs	r3, #0
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b01      	cmp	r3, #1
 8005464:	d119      	bne.n	800549a <HAL_SPI_TransmitReceive+0x1b8>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d014      	beq.n	800549a <HAL_SPI_TransmitReceive+0x1b8>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	b292      	uxth	r2, r2
 800547c:	801a      	strh	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	1c9a      	adds	r2, r3, #2
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	639a      	str	r2, [r3, #56]	; 0x38
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005496:	2301      	movs	r3, #1
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800549a:	f7fe fa6d 	bl	8003978 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d807      	bhi.n	80054ba <HAL_SPI_TransmitReceive+0x1d8>
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d003      	beq.n	80054ba <HAL_SPI_TransmitReceive+0x1d8>
 80054b2:	2303      	movs	r3, #3
 80054b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054b8:	e0a7      	b.n	800560a <HAL_SPI_TransmitReceive+0x328>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1a6      	bne.n	8005412 <HAL_SPI_TransmitReceive+0x130>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1a1      	bne.n	8005412 <HAL_SPI_TransmitReceive+0x130>
 80054ce:	e07c      	b.n	80055ca <HAL_SPI_TransmitReceive+0x2e8>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <HAL_SPI_TransmitReceive+0x1fc>
 80054d8:	8b7b      	ldrh	r3, [r7, #26]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d16b      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x2d4>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	330c      	adds	r3, #12
 80054e8:	7812      	ldrb	r2, [r2, #0]
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	631a      	str	r2, [r3, #48]	; 0x30
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	86da      	strh	r2, [r3, #54]	; 0x36
 8005504:	e057      	b.n	80055b6 <HAL_SPI_TransmitReceive+0x2d4>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b02      	cmp	r3, #2
 8005512:	d11c      	bne.n	800554e <HAL_SPI_TransmitReceive+0x26c>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d017      	beq.n	800554e <HAL_SPI_TransmitReceive+0x26c>
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d114      	bne.n	800554e <HAL_SPI_TransmitReceive+0x26c>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	330c      	adds	r3, #12
 800552e:	7812      	ldrb	r2, [r2, #0]
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	86da      	strh	r2, [r3, #54]	; 0x36
 800554a:	2300      	movs	r3, #0
 800554c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b01      	cmp	r3, #1
 800555a:	d119      	bne.n	8005590 <HAL_SPI_TransmitReceive+0x2ae>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d014      	beq.n	8005590 <HAL_SPI_TransmitReceive+0x2ae>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	639a      	str	r2, [r3, #56]	; 0x38
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800558c:	2301      	movs	r3, #1
 800558e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005590:	f7fe f9f2 	bl	8003978 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800559c:	429a      	cmp	r2, r3
 800559e:	d803      	bhi.n	80055a8 <HAL_SPI_TransmitReceive+0x2c6>
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d102      	bne.n	80055ae <HAL_SPI_TransmitReceive+0x2cc>
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x2d4>
 80055ae:	2303      	movs	r3, #3
 80055b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055b4:	e029      	b.n	800560a <HAL_SPI_TransmitReceive+0x328>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1a2      	bne.n	8005506 <HAL_SPI_TransmitReceive+0x224>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d19d      	bne.n	8005506 <HAL_SPI_TransmitReceive+0x224>
 80055ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fa08 	bl	80059e4 <SPI_EndRxTxTransaction>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d006      	beq.n	80055e8 <HAL_SPI_TransmitReceive+0x306>
 80055da:	2301      	movs	r3, #1
 80055dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	655a      	str	r2, [r3, #84]	; 0x54
 80055e6:	e010      	b.n	800560a <HAL_SPI_TransmitReceive+0x328>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10b      	bne.n	8005608 <HAL_SPI_TransmitReceive+0x326>
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	e000      	b.n	800560a <HAL_SPI_TransmitReceive+0x328>
 8005608:	bf00      	nop
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800561a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800561e:	4618      	mov	r0, r3
 8005620:	3730      	adds	r7, #48	; 0x30
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <HAL_SPI_IRQHandler>:
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	61bb      	str	r3, [r7, #24]
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	099b      	lsrs	r3, r3, #6
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10f      	bne.n	800566c <HAL_SPI_IRQHandler+0x44>
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_SPI_IRQHandler+0x44>
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	099b      	lsrs	r3, r3, #6
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <HAL_SPI_IRQHandler+0x44>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	4798      	blx	r3
 800566a:	e0be      	b.n	80057ea <HAL_SPI_IRQHandler+0x1c2>
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_SPI_IRQHandler+0x66>
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	09db      	lsrs	r3, r3, #7
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <HAL_SPI_IRQHandler+0x66>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	4798      	blx	r3
 800568c:	e0ad      	b.n	80057ea <HAL_SPI_IRQHandler+0x1c2>
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_SPI_IRQHandler+0x80>
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	099b      	lsrs	r3, r3, #6
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 80a1 	beq.w	80057ea <HAL_SPI_IRQHandler+0x1c2>
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 809a 	beq.w	80057ea <HAL_SPI_IRQHandler+0x1c2>
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	099b      	lsrs	r3, r3, #6
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d023      	beq.n	800570a <HAL_SPI_IRQHandler+0xe2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d011      	beq.n	80056f2 <HAL_SPI_IRQHandler+0xca>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d2:	f043 0204 	orr.w	r2, r3, #4
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	655a      	str	r2, [r3, #84]	; 0x54
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	e00b      	b.n	800570a <HAL_SPI_IRQHandler+0xe2>
 80056f2:	2300      	movs	r3, #0
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	e06f      	b.n	80057ea <HAL_SPI_IRQHandler+0x1c2>
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d014      	beq.n	8005740 <HAL_SPI_IRQHandler+0x118>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	f043 0201 	orr.w	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	655a      	str	r2, [r3, #84]	; 0x54
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005744:	2b00      	cmp	r3, #0
 8005746:	d04f      	beq.n	80057e8 <HAL_SPI_IRQHandler+0x1c0>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005756:	605a      	str	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <HAL_SPI_IRQHandler+0x14c>
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d034      	beq.n	80057de <HAL_SPI_IRQHandler+0x1b6>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0203 	bic.w	r2, r2, #3
 8005782:	605a      	str	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d011      	beq.n	80057b0 <HAL_SPI_IRQHandler+0x188>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005790:	4a17      	ldr	r2, [pc, #92]	; (80057f0 <HAL_SPI_IRQHandler+0x1c8>)
 8005792:	635a      	str	r2, [r3, #52]	; 0x34
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005798:	4618      	mov	r0, r3
 800579a:	f7fe fa05 	bl	8003ba8 <HAL_DMA_Abort_IT>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <HAL_SPI_IRQHandler+0x188>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	655a      	str	r2, [r3, #84]	; 0x54
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d016      	beq.n	80057e6 <HAL_SPI_IRQHandler+0x1be>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057bc:	4a0c      	ldr	r2, [pc, #48]	; (80057f0 <HAL_SPI_IRQHandler+0x1c8>)
 80057be:	635a      	str	r2, [r3, #52]	; 0x34
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fe f9ef 	bl	8003ba8 <HAL_DMA_Abort_IT>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <HAL_SPI_IRQHandler+0x1be>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
 80057dc:	e003      	b.n	80057e6 <HAL_SPI_IRQHandler+0x1be>
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f808 	bl	80057f4 <HAL_SPI_ErrorCallback>
 80057e4:	e000      	b.n	80057e8 <HAL_SPI_IRQHandler+0x1c0>
 80057e6:	bf00      	nop
 80057e8:	bf00      	nop
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	08005807 	.word	0x08005807

080057f4 <HAL_SPI_ErrorCallback>:
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr

08005806 <SPI_DMAAbortOnError>:
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	87da      	strh	r2, [r3, #62]	; 0x3e
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff ffe7 	bl	80057f4 <HAL_SPI_ErrorCallback>
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <SPI_WaitFlagStateUntilTimeout>:
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	71fb      	strb	r3, [r7, #7]
 8005840:	f7fe f89a 	bl	8003978 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	4413      	add	r3, r2
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	f7fe f892 	bl	8003978 <HAL_GetTick>
 8005854:	61b8      	str	r0, [r7, #24]
 8005856:	4b39      	ldr	r3, [pc, #228]	; (800593c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	015b      	lsls	r3, r3, #5
 800585c:	0d1b      	lsrs	r3, r3, #20
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	fb02 f303 	mul.w	r3, r2, r3
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e054      	b.n	8005912 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d050      	beq.n	8005912 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005870:	f7fe f882 	bl	8003978 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	429a      	cmp	r2, r3
 800587e:	d902      	bls.n	8005886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d13d      	bne.n	8005902 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005894:	605a      	str	r2, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800589e:	d111      	bne.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a8:	d004      	beq.n	80058b4 <SPI_WaitFlagStateUntilTimeout+0x84>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b2:	d107      	bne.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058cc:	d10f      	bne.n	80058ee <SPI_WaitFlagStateUntilTimeout+0xbe>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80058fe:	2303      	movs	r3, #3
 8005900:	e017      	b.n	8005932 <SPI_WaitFlagStateUntilTimeout+0x102>
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	3b01      	subs	r3, #1
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4013      	ands	r3, r2
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	429a      	cmp	r2, r3
 8005920:	bf0c      	ite	eq
 8005922:	2301      	moveq	r3, #1
 8005924:	2300      	movne	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	429a      	cmp	r2, r3
 800592e:	d19b      	bne.n	8005868 <SPI_WaitFlagStateUntilTimeout+0x38>
 8005930:	2300      	movs	r3, #0
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000000 	.word	0x20000000

08005940 <SPI_EndRxTransaction>:
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005954:	d111      	bne.n	800597a <SPI_EndRxTransaction+0x3a>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800595e:	d004      	beq.n	800596a <SPI_EndRxTransaction+0x2a>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005968:	d107      	bne.n	800597a <SPI_EndRxTransaction+0x3a>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005982:	d117      	bne.n	80059b4 <SPI_EndRxTransaction+0x74>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800598c:	d112      	bne.n	80059b4 <SPI_EndRxTransaction+0x74>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	2101      	movs	r1, #1
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7ff ff49 	bl	8005830 <SPI_WaitFlagStateUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01a      	beq.n	80059da <SPI_EndRxTransaction+0x9a>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a8:	f043 0220 	orr.w	r2, r3, #32
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	655a      	str	r2, [r3, #84]	; 0x54
 80059b0:	2303      	movs	r3, #3
 80059b2:	e013      	b.n	80059dc <SPI_EndRxTransaction+0x9c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2200      	movs	r2, #0
 80059bc:	2180      	movs	r1, #128	; 0x80
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff ff36 	bl	8005830 <SPI_WaitFlagStateUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <SPI_EndRxTransaction+0x9a>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	f043 0220 	orr.w	r2, r3, #32
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	655a      	str	r2, [r3, #84]	; 0x54
 80059d6:	2303      	movs	r3, #3
 80059d8:	e000      	b.n	80059dc <SPI_EndRxTransaction+0x9c>
 80059da:	2300      	movs	r3, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <SPI_EndRxTxTransaction>:
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2200      	movs	r2, #0
 80059f8:	2180      	movs	r1, #128	; 0x80
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f7ff ff18 	bl	8005830 <SPI_WaitFlagStateUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d007      	beq.n	8005a16 <SPI_EndRxTxTransaction+0x32>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0a:	f043 0220 	orr.w	r2, r3, #32
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	655a      	str	r2, [r3, #84]	; 0x54
 8005a12:	2303      	movs	r3, #3
 8005a14:	e000      	b.n	8005a18 <SPI_EndRxTxTransaction+0x34>
 8005a16:	2300      	movs	r3, #0
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_Base_Init>:
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_TIM_Base_Init+0x12>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e041      	b.n	8005ab6 <HAL_TIM_Base_Init+0x96>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <HAL_TIM_Base_Init+0x2c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fd fe54 	bl	80036f4 <HAL_TIM_Base_MspInit>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4610      	mov	r0, r2
 8005a60:	f000 fc68 	bl	8006334 <TIM_Base_SetConfig>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_TIM_PWM_Init>:
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_TIM_PWM_Init+0x12>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e041      	b.n	8005b54 <HAL_TIM_PWM_Init+0x96>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <HAL_TIM_PWM_Init+0x2c>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f839 	bl	8005b5c <HAL_TIM_PWM_MspInit>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2202      	movs	r2, #2
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3304      	adds	r3, #4
 8005afa:	4619      	mov	r1, r3
 8005afc:	4610      	mov	r0, r2
 8005afe:	f000 fc19 	bl	8006334 <TIM_Base_SetConfig>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b52:	2300      	movs	r3, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_TIM_PWM_MspInit>:
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr
	...

08005b70 <HAL_TIM_PWM_Start>:
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <HAL_TIM_PWM_Start+0x24>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	bf14      	ite	ne
 8005b8c:	2301      	movne	r3, #1
 8005b8e:	2300      	moveq	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	e022      	b.n	8005bda <HAL_TIM_PWM_Start+0x6a>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d109      	bne.n	8005bae <HAL_TIM_PWM_Start+0x3e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	bf14      	ite	ne
 8005ba6:	2301      	movne	r3, #1
 8005ba8:	2300      	moveq	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	e015      	b.n	8005bda <HAL_TIM_PWM_Start+0x6a>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d109      	bne.n	8005bc8 <HAL_TIM_PWM_Start+0x58>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	bf14      	ite	ne
 8005bc0:	2301      	movne	r3, #1
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	e008      	b.n	8005bda <HAL_TIM_PWM_Start+0x6a>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	bf14      	ite	ne
 8005bd4:	2301      	movne	r3, #1
 8005bd6:	2300      	moveq	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_TIM_PWM_Start+0x72>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e072      	b.n	8005cc8 <HAL_TIM_PWM_Start+0x158>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d104      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0x82>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf0:	e013      	b.n	8005c1a <HAL_TIM_PWM_Start+0xaa>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d104      	bne.n	8005c02 <HAL_TIM_PWM_Start+0x92>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c00:	e00b      	b.n	8005c1a <HAL_TIM_PWM_Start+0xaa>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d104      	bne.n	8005c12 <HAL_TIM_PWM_Start+0xa2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c10:	e003      	b.n	8005c1a <HAL_TIM_PWM_Start+0xaa>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fe42 	bl	80068ac <TIM_CCxChannelCmd>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a28      	ldr	r2, [pc, #160]	; (8005cd0 <HAL_TIM_PWM_Start+0x160>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <HAL_TIM_PWM_Start+0xcc>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a27      	ldr	r2, [pc, #156]	; (8005cd4 <HAL_TIM_PWM_Start+0x164>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIM_PWM_Start+0xd0>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <HAL_TIM_PWM_Start+0xd2>
 8005c40:	2300      	movs	r3, #0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <HAL_TIM_PWM_Start+0xe6>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c54:	645a      	str	r2, [r3, #68]	; 0x44
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a1d      	ldr	r2, [pc, #116]	; (8005cd0 <HAL_TIM_PWM_Start+0x160>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d018      	beq.n	8005c92 <HAL_TIM_PWM_Start+0x122>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a1b      	ldr	r2, [pc, #108]	; (8005cd4 <HAL_TIM_PWM_Start+0x164>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d013      	beq.n	8005c92 <HAL_TIM_PWM_Start+0x122>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c72:	d00e      	beq.n	8005c92 <HAL_TIM_PWM_Start+0x122>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a17      	ldr	r2, [pc, #92]	; (8005cd8 <HAL_TIM_PWM_Start+0x168>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_TIM_PWM_Start+0x122>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a16      	ldr	r2, [pc, #88]	; (8005cdc <HAL_TIM_PWM_Start+0x16c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d004      	beq.n	8005c92 <HAL_TIM_PWM_Start+0x122>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a14      	ldr	r2, [pc, #80]	; (8005ce0 <HAL_TIM_PWM_Start+0x170>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d111      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0x146>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b06      	cmp	r3, #6
 8005ca2:	d010      	beq.n	8005cc6 <HAL_TIM_PWM_Start+0x156>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0201 	orr.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	e007      	b.n	8005cc6 <HAL_TIM_PWM_Start+0x156>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0201 	orr.w	r2, r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40012c00 	.word	0x40012c00
 8005cd4:	40013400 	.word	0x40013400
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40000800 	.word	0x40000800
 8005ce0:	40000c00 	.word	0x40000c00

08005ce4 <HAL_TIM_PWM_Stop>:
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fdd8 	bl	80068ac <TIM_CCxChannelCmd>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a2e      	ldr	r2, [pc, #184]	; (8005dbc <HAL_TIM_PWM_Stop+0xd8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d004      	beq.n	8005d10 <HAL_TIM_PWM_Stop+0x2c>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a2d      	ldr	r2, [pc, #180]	; (8005dc0 <HAL_TIM_PWM_Stop+0xdc>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d101      	bne.n	8005d14 <HAL_TIM_PWM_Stop+0x30>
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <HAL_TIM_PWM_Stop+0x32>
 8005d14:	2300      	movs	r3, #0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d017      	beq.n	8005d4a <HAL_TIM_PWM_Stop+0x66>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6a1a      	ldr	r2, [r3, #32]
 8005d20:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d24:	4013      	ands	r3, r2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10f      	bne.n	8005d4a <HAL_TIM_PWM_Stop+0x66>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6a1a      	ldr	r2, [r3, #32]
 8005d30:	f240 4344 	movw	r3, #1092	; 0x444
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d107      	bne.n	8005d4a <HAL_TIM_PWM_Stop+0x66>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d48:	645a      	str	r2, [r3, #68]	; 0x44
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6a1a      	ldr	r2, [r3, #32]
 8005d50:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d54:	4013      	ands	r3, r2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10f      	bne.n	8005d7a <HAL_TIM_PWM_Stop+0x96>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6a1a      	ldr	r2, [r3, #32]
 8005d60:	f240 4344 	movw	r3, #1092	; 0x444
 8005d64:	4013      	ands	r3, r2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d107      	bne.n	8005d7a <HAL_TIM_PWM_Stop+0x96>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d104      	bne.n	8005d8a <HAL_TIM_PWM_Stop+0xa6>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d88:	e013      	b.n	8005db2 <HAL_TIM_PWM_Stop+0xce>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d104      	bne.n	8005d9a <HAL_TIM_PWM_Stop+0xb6>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d98:	e00b      	b.n	8005db2 <HAL_TIM_PWM_Stop+0xce>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d104      	bne.n	8005daa <HAL_TIM_PWM_Stop+0xc6>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da8:	e003      	b.n	8005db2 <HAL_TIM_PWM_Stop+0xce>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005db2:	2300      	movs	r3, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40012c00 	.word	0x40012c00
 8005dc0:	40013400 	.word	0x40013400

08005dc4 <HAL_TIM_IRQHandler>:
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d122      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x5c>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d11b      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x5c>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f06f 0202 	mvn.w	r2, #2
 8005df0:	611a      	str	r2, [r3, #16]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	771a      	strb	r2, [r3, #28]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_TIM_IRQHandler+0x4a>
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa78 	bl	80062fc <HAL_TIM_IC_CaptureCallback>
 8005e0c:	e005      	b.n	8005e1a <HAL_TIM_IRQHandler+0x56>
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa6b 	bl	80062ea <HAL_TIM_OC_DelayElapsedCallback>
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fa7a 	bl	800630e <HAL_TIM_PWM_PulseFinishedCallback>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	771a      	strb	r2, [r3, #28]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d122      	bne.n	8005e74 <HAL_TIM_IRQHandler+0xb0>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d11b      	bne.n	8005e74 <HAL_TIM_IRQHandler+0xb0>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0204 	mvn.w	r2, #4
 8005e44:	611a      	str	r2, [r3, #16]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	771a      	strb	r2, [r3, #28]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x9e>
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fa4e 	bl	80062fc <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0xaa>
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fa41 	bl	80062ea <HAL_TIM_OC_DelayElapsedCallback>
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fa50 	bl	800630e <HAL_TIM_PWM_PulseFinishedCallback>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d122      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x104>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d11b      	bne.n	8005ec8 <HAL_TIM_IRQHandler+0x104>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0208 	mvn.w	r2, #8
 8005e98:	611a      	str	r2, [r3, #16]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	771a      	strb	r2, [r3, #28]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0xf2>
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa24 	bl	80062fc <HAL_TIM_IC_CaptureCallback>
 8005eb4:	e005      	b.n	8005ec2 <HAL_TIM_IRQHandler+0xfe>
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fa17 	bl	80062ea <HAL_TIM_OC_DelayElapsedCallback>
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fa26 	bl	800630e <HAL_TIM_PWM_PulseFinishedCallback>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	771a      	strb	r2, [r3, #28]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	2b10      	cmp	r3, #16
 8005ed4:	d122      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x158>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b10      	cmp	r3, #16
 8005ee2:	d11b      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x158>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0210 	mvn.w	r2, #16
 8005eec:	611a      	str	r2, [r3, #16]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	771a      	strb	r2, [r3, #28]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x146>
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f9fa 	bl	80062fc <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0x152>
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f9ed 	bl	80062ea <HAL_TIM_OC_DelayElapsedCallback>
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f9fc 	bl	800630e <HAL_TIM_PWM_PulseFinishedCallback>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d10e      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x184>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d107      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x184>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0201 	mvn.w	r2, #1
 8005f40:	611a      	str	r2, [r3, #16]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f9c8 	bl	80062d8 <HAL_TIM_PeriodElapsedCallback>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f52:	2b80      	cmp	r3, #128	; 0x80
 8005f54:	d10e      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x1b0>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f60:	2b80      	cmp	r3, #128	; 0x80
 8005f62:	d107      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x1b0>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f6c:	611a      	str	r2, [r3, #16]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fd35 	bl	80069de <HAL_TIMEx_BreakCallback>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b40      	cmp	r3, #64	; 0x40
 8005f80:	d10e      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x1dc>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8c:	2b40      	cmp	r3, #64	; 0x40
 8005f8e:	d107      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x1dc>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f98:	611a      	str	r2, [r3, #16]
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f9c0 	bl	8006320 <HAL_TIM_TriggerCallback>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d10e      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x208>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d107      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x208>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0220 	mvn.w	r2, #32
 8005fc4:	611a      	str	r2, [r3, #16]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fd00 	bl	80069cc <HAL_TIMEx_CommutCallback>
 8005fcc:	bf00      	nop
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_TIM_PWM_ConfigChannel>:
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e0ac      	b.n	8006148 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b0c      	cmp	r3, #12
 8005ffa:	f200 809f 	bhi.w	800613c <HAL_TIM_PWM_ConfigChannel+0x168>
 8005ffe:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006039 	.word	0x08006039
 8006008:	0800613d 	.word	0x0800613d
 800600c:	0800613d 	.word	0x0800613d
 8006010:	0800613d 	.word	0x0800613d
 8006014:	08006079 	.word	0x08006079
 8006018:	0800613d 	.word	0x0800613d
 800601c:	0800613d 	.word	0x0800613d
 8006020:	0800613d 	.word	0x0800613d
 8006024:	080060bb 	.word	0x080060bb
 8006028:	0800613d 	.word	0x0800613d
 800602c:	0800613d 	.word	0x0800613d
 8006030:	0800613d 	.word	0x0800613d
 8006034:	080060fb 	.word	0x080060fb
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f9f2 	bl	8006428 <TIM_OC1_SetConfig>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0208 	orr.w	r2, r2, #8
 8006052:	619a      	str	r2, [r3, #24]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0204 	bic.w	r2, r2, #4
 8006062:	619a      	str	r2, [r3, #24]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6999      	ldr	r1, [r3, #24]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	619a      	str	r2, [r3, #24]
 8006076:	e062      	b.n	800613e <HAL_TIM_PWM_ConfigChannel+0x16a>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fa42 	bl	8006508 <TIM_OC2_SetConfig>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699a      	ldr	r2, [r3, #24]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006092:	619a      	str	r2, [r3, #24]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a2:	619a      	str	r2, [r3, #24]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6999      	ldr	r1, [r3, #24]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	021a      	lsls	r2, r3, #8
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	619a      	str	r2, [r3, #24]
 80060b8:	e041      	b.n	800613e <HAL_TIM_PWM_ConfigChannel+0x16a>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fa95 	bl	80065f0 <TIM_OC3_SetConfig>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0208 	orr.w	r2, r2, #8
 80060d4:	61da      	str	r2, [r3, #28]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0204 	bic.w	r2, r2, #4
 80060e4:	61da      	str	r2, [r3, #28]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69d9      	ldr	r1, [r3, #28]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	61da      	str	r2, [r3, #28]
 80060f8:	e021      	b.n	800613e <HAL_TIM_PWM_ConfigChannel+0x16a>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	4618      	mov	r0, r3
 8006102:	f000 fae9 	bl	80066d8 <TIM_OC4_SetConfig>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69da      	ldr	r2, [r3, #28]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006114:	61da      	str	r2, [r3, #28]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69da      	ldr	r2, [r3, #28]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006124:	61da      	str	r2, [r3, #28]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69d9      	ldr	r1, [r3, #28]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	021a      	lsls	r2, r3, #8
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	61da      	str	r2, [r3, #28]
 800613a:	e000      	b.n	800613e <HAL_TIM_PWM_ConfigChannel+0x16a>
 800613c:	bf00      	nop
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006146:	2300      	movs	r3, #0
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_TIM_ConfigClockSource>:
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_TIM_ConfigClockSource+0x18>
 8006164:	2302      	movs	r3, #2
 8006166:	e0b3      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x180>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	609a      	str	r2, [r3, #8]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a0:	d03e      	beq.n	8006220 <HAL_TIM_ConfigClockSource+0xd0>
 80061a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a6:	f200 8087 	bhi.w	80062b8 <HAL_TIM_ConfigClockSource+0x168>
 80061aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ae:	f000 8085 	beq.w	80062bc <HAL_TIM_ConfigClockSource+0x16c>
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b6:	d87f      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x168>
 80061b8:	2b70      	cmp	r3, #112	; 0x70
 80061ba:	d01a      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0xa2>
 80061bc:	2b70      	cmp	r3, #112	; 0x70
 80061be:	d87b      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x168>
 80061c0:	2b60      	cmp	r3, #96	; 0x60
 80061c2:	d050      	beq.n	8006266 <HAL_TIM_ConfigClockSource+0x116>
 80061c4:	2b60      	cmp	r3, #96	; 0x60
 80061c6:	d877      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x168>
 80061c8:	2b50      	cmp	r3, #80	; 0x50
 80061ca:	d03c      	beq.n	8006246 <HAL_TIM_ConfigClockSource+0xf6>
 80061cc:	2b50      	cmp	r3, #80	; 0x50
 80061ce:	d873      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x168>
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	d058      	beq.n	8006286 <HAL_TIM_ConfigClockSource+0x136>
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	d86f      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x168>
 80061d8:	2b30      	cmp	r3, #48	; 0x30
 80061da:	d064      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x156>
 80061dc:	2b30      	cmp	r3, #48	; 0x30
 80061de:	d86b      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x168>
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d060      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x156>
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d867      	bhi.n	80062b8 <HAL_TIM_ConfigClockSource+0x168>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d05c      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x156>
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d05a      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0x156>
 80061f0:	e062      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x168>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6899      	ldr	r1, [r3, #8]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f000 fb34 	bl	800686e <TIM_ETR_SetConfig>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	609a      	str	r2, [r3, #8]
 800621e:	e04e      	b.n	80062be <HAL_TIM_ConfigClockSource+0x16e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	6899      	ldr	r1, [r3, #8]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f000 fb1d 	bl	800686e <TIM_ETR_SetConfig>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006242:	609a      	str	r2, [r3, #8]
 8006244:	e03b      	b.n	80062be <HAL_TIM_ConfigClockSource+0x16e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	6859      	ldr	r1, [r3, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	461a      	mov	r2, r3
 8006254:	f000 fa94 	bl	8006780 <TIM_TI1_ConfigInputStage>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2150      	movs	r1, #80	; 0x50
 800625e:	4618      	mov	r0, r3
 8006260:	f000 faeb 	bl	800683a <TIM_ITRx_SetConfig>
 8006264:	e02b      	b.n	80062be <HAL_TIM_ConfigClockSource+0x16e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6818      	ldr	r0, [r3, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6859      	ldr	r1, [r3, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	461a      	mov	r2, r3
 8006274:	f000 fab2 	bl	80067dc <TIM_TI2_ConfigInputStage>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2160      	movs	r1, #96	; 0x60
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fadb 	bl	800683a <TIM_ITRx_SetConfig>
 8006284:	e01b      	b.n	80062be <HAL_TIM_ConfigClockSource+0x16e>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6818      	ldr	r0, [r3, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6859      	ldr	r1, [r3, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	461a      	mov	r2, r3
 8006294:	f000 fa74 	bl	8006780 <TIM_TI1_ConfigInputStage>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2140      	movs	r1, #64	; 0x40
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 facb 	bl	800683a <TIM_ITRx_SetConfig>
 80062a4:	e00b      	b.n	80062be <HAL_TIM_ConfigClockSource+0x16e>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4619      	mov	r1, r3
 80062b0:	4610      	mov	r0, r2
 80062b2:	f000 fac2 	bl	800683a <TIM_ITRx_SetConfig>
 80062b6:	e002      	b.n	80062be <HAL_TIM_ConfigClockSource+0x16e>
 80062b8:	bf00      	nop
 80062ba:	e000      	b.n	80062be <HAL_TIM_ConfigClockSource+0x16e>
 80062bc:	bf00      	nop
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062ce:	2300      	movs	r3, #0
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_TIM_PeriodElapsedCallback>:
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc80      	pop	{r7}
 80062e8:	4770      	bx	lr

080062ea <HAL_TIM_OC_DelayElapsedCallback>:
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr

080062fc <HAL_TIM_IC_CaptureCallback>:
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr

0800630e <HAL_TIM_PWM_PulseFinishedCallback>:
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr

08006320 <HAL_TIM_TriggerCallback>:
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr
	...

08006334 <TIM_Base_SetConfig>:
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a33      	ldr	r2, [pc, #204]	; (8006414 <TIM_Base_SetConfig+0xe0>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d013      	beq.n	8006374 <TIM_Base_SetConfig+0x40>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a32      	ldr	r2, [pc, #200]	; (8006418 <TIM_Base_SetConfig+0xe4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00f      	beq.n	8006374 <TIM_Base_SetConfig+0x40>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635a:	d00b      	beq.n	8006374 <TIM_Base_SetConfig+0x40>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a2f      	ldr	r2, [pc, #188]	; (800641c <TIM_Base_SetConfig+0xe8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d007      	beq.n	8006374 <TIM_Base_SetConfig+0x40>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a2e      	ldr	r2, [pc, #184]	; (8006420 <TIM_Base_SetConfig+0xec>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_Base_SetConfig+0x40>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a2d      	ldr	r2, [pc, #180]	; (8006424 <TIM_Base_SetConfig+0xf0>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d108      	bne.n	8006386 <TIM_Base_SetConfig+0x52>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a22      	ldr	r2, [pc, #136]	; (8006414 <TIM_Base_SetConfig+0xe0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d013      	beq.n	80063b6 <TIM_Base_SetConfig+0x82>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a21      	ldr	r2, [pc, #132]	; (8006418 <TIM_Base_SetConfig+0xe4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00f      	beq.n	80063b6 <TIM_Base_SetConfig+0x82>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639c:	d00b      	beq.n	80063b6 <TIM_Base_SetConfig+0x82>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a1e      	ldr	r2, [pc, #120]	; (800641c <TIM_Base_SetConfig+0xe8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d007      	beq.n	80063b6 <TIM_Base_SetConfig+0x82>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a1d      	ldr	r2, [pc, #116]	; (8006420 <TIM_Base_SetConfig+0xec>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d003      	beq.n	80063b6 <TIM_Base_SetConfig+0x82>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a1c      	ldr	r2, [pc, #112]	; (8006424 <TIM_Base_SetConfig+0xf0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d108      	bne.n	80063c8 <TIM_Base_SetConfig+0x94>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	629a      	str	r2, [r3, #40]	; 0x28
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a09      	ldr	r2, [pc, #36]	; (8006414 <TIM_Base_SetConfig+0xe0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_Base_SetConfig+0xc8>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a08      	ldr	r2, [pc, #32]	; (8006418 <TIM_Base_SetConfig+0xe4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d103      	bne.n	8006404 <TIM_Base_SetConfig+0xd0>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	631a      	str	r2, [r3, #48]	; 0x30
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	615a      	str	r2, [r3, #20]
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	bc80      	pop	{r7}
 8006412:	4770      	bx	lr
 8006414:	40012c00 	.word	0x40012c00
 8006418:	40013400 	.word	0x40013400
 800641c:	40000400 	.word	0x40000400
 8006420:	40000800 	.word	0x40000800
 8006424:	40000c00 	.word	0x40000c00

08006428 <TIM_OC1_SetConfig>:
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f023 0201 	bic.w	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	621a      	str	r2, [r3, #32]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f023 0302 	bic.w	r3, r3, #2
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a20      	ldr	r2, [pc, #128]	; (8006500 <TIM_OC1_SetConfig+0xd8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_OC1_SetConfig+0x64>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a1f      	ldr	r2, [pc, #124]	; (8006504 <TIM_OC1_SetConfig+0xdc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d10c      	bne.n	80064a6 <TIM_OC1_SetConfig+0x7e>
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f023 0308 	bic.w	r3, r3, #8
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f023 0304 	bic.w	r3, r3, #4
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a15      	ldr	r2, [pc, #84]	; (8006500 <TIM_OC1_SetConfig+0xd8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d003      	beq.n	80064b6 <TIM_OC1_SetConfig+0x8e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a14      	ldr	r2, [pc, #80]	; (8006504 <TIM_OC1_SetConfig+0xdc>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d111      	bne.n	80064da <TIM_OC1_SetConfig+0xb2>
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	605a      	str	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	619a      	str	r2, [r3, #24]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	635a      	str	r2, [r3, #52]	; 0x34
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	621a      	str	r2, [r3, #32]
 80064f4:	bf00      	nop
 80064f6:	371c      	adds	r7, #28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bc80      	pop	{r7}
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40012c00 	.word	0x40012c00
 8006504:	40013400 	.word	0x40013400

08006508 <TIM_OC2_SetConfig>:
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f023 0210 	bic.w	r2, r3, #16
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	621a      	str	r2, [r3, #32]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0320 	bic.w	r3, r3, #32
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a21      	ldr	r2, [pc, #132]	; (80065e8 <TIM_OC2_SetConfig+0xe0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d003      	beq.n	8006570 <TIM_OC2_SetConfig+0x68>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a20      	ldr	r2, [pc, #128]	; (80065ec <TIM_OC2_SetConfig+0xe4>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d10d      	bne.n	800658c <TIM_OC2_SetConfig+0x84>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a16      	ldr	r2, [pc, #88]	; (80065e8 <TIM_OC2_SetConfig+0xe0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_OC2_SetConfig+0x94>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a15      	ldr	r2, [pc, #84]	; (80065ec <TIM_OC2_SetConfig+0xe4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d113      	bne.n	80065c4 <TIM_OC2_SetConfig+0xbc>
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	605a      	str	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	619a      	str	r2, [r3, #24]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	639a      	str	r2, [r3, #56]	; 0x38
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	621a      	str	r2, [r3, #32]
 80065de:	bf00      	nop
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bc80      	pop	{r7}
 80065e6:	4770      	bx	lr
 80065e8:	40012c00 	.word	0x40012c00
 80065ec:	40013400 	.word	0x40013400

080065f0 <TIM_OC3_SetConfig>:
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	621a      	str	r2, [r3, #32]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 0303 	bic.w	r3, r3, #3
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a21      	ldr	r2, [pc, #132]	; (80066d0 <TIM_OC3_SetConfig+0xe0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d003      	beq.n	8006656 <TIM_OC3_SetConfig+0x66>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a20      	ldr	r2, [pc, #128]	; (80066d4 <TIM_OC3_SetConfig+0xe4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d10d      	bne.n	8006672 <TIM_OC3_SetConfig+0x82>
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	021b      	lsls	r3, r3, #8
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a16      	ldr	r2, [pc, #88]	; (80066d0 <TIM_OC3_SetConfig+0xe0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d003      	beq.n	8006682 <TIM_OC3_SetConfig+0x92>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a15      	ldr	r2, [pc, #84]	; (80066d4 <TIM_OC3_SetConfig+0xe4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d113      	bne.n	80066aa <TIM_OC3_SetConfig+0xba>
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	605a      	str	r2, [r3, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	61da      	str	r2, [r3, #28]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	621a      	str	r2, [r3, #32]
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc80      	pop	{r7}
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40012c00 	.word	0x40012c00
 80066d4:	40013400 	.word	0x40013400

080066d8 <TIM_OC4_SetConfig>:
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	621a      	str	r2, [r3, #32]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	613b      	str	r3, [r7, #16]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	031b      	lsls	r3, r3, #12
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a11      	ldr	r2, [pc, #68]	; (8006778 <TIM_OC4_SetConfig+0xa0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_OC4_SetConfig+0x68>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a10      	ldr	r2, [pc, #64]	; (800677c <TIM_OC4_SetConfig+0xa4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d109      	bne.n	8006754 <TIM_OC4_SetConfig+0x7c>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	019b      	lsls	r3, r3, #6
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	605a      	str	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	61da      	str	r2, [r3, #28]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	641a      	str	r2, [r3, #64]	; 0x40
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	621a      	str	r2, [r3, #32]
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr
 8006778:	40012c00 	.word	0x40012c00
 800677c:	40013400 	.word	0x40013400

08006780 <TIM_TI1_ConfigInputStage>:
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f023 0201 	bic.w	r2, r3, #1
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	621a      	str	r2, [r3, #32]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f023 030a 	bic.w	r3, r3, #10
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	619a      	str	r2, [r3, #24]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	621a      	str	r2, [r3, #32]
 80067d2:	bf00      	nop
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bc80      	pop	{r7}
 80067da:	4770      	bx	lr

080067dc <TIM_TI2_ConfigInputStage>:
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f023 0210 	bic.w	r2, r3, #16
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	621a      	str	r2, [r3, #32]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	031b      	lsls	r3, r3, #12
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	4313      	orrs	r3, r2
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	619a      	str	r2, [r3, #24]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	621a      	str	r2, [r3, #32]
 8006830:	bf00      	nop
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr

0800683a <TIM_ITRx_SetConfig>:
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	f043 0307 	orr.w	r3, r3, #7
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	bf00      	nop
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	bc80      	pop	{r7}
 800686c:	4770      	bx	lr

0800686e <TIM_ETR_SetConfig>:
 800686e:	b480      	push	{r7}
 8006870:	b087      	sub	sp, #28
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	021a      	lsls	r2, r3, #8
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	431a      	orrs	r2, r3
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4313      	orrs	r3, r2
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	609a      	str	r2, [r3, #8]
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr

080068ac <TIM_CCxChannelCmd>:
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	2201      	movs	r2, #1
 80068c0:	fa02 f303 	lsl.w	r3, r2, r3
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a1a      	ldr	r2, [r3, #32]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	43db      	mvns	r3, r3
 80068ce:	401a      	ands	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	621a      	str	r2, [r3, #32]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1a      	ldr	r2, [r3, #32]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 031f 	and.w	r3, r3, #31
 80068de:	6879      	ldr	r1, [r7, #4]
 80068e0:	fa01 f303 	lsl.w	r3, r1, r3
 80068e4:	431a      	orrs	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	621a      	str	r2, [r3, #32]
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr

080068f4 <HAL_TIMEx_MasterConfigSynchronization>:
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006908:	2302      	movs	r3, #2
 800690a:	e050      	b.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	60bb      	str	r3, [r7, #8]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	605a      	str	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a1b      	ldr	r2, [pc, #108]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d018      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a19      	ldr	r2, [pc, #100]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006962:	d00e      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a15      	ldr	r2, [pc, #84]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d009      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a14      	ldr	r2, [pc, #80]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d004      	beq.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a12      	ldr	r2, [pc, #72]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d10c      	bne.n	800699c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	4313      	orrs	r3, r2
 8006992:	60bb      	str	r3, [r7, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	609a      	str	r2, [r3, #8]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80069ac:	2300      	movs	r3, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40013400 	.word	0x40013400
 80069c0:	40000400 	.word	0x40000400
 80069c4:	40000800 	.word	0x40000800
 80069c8:	40000c00 	.word	0x40000c00

080069cc <HAL_TIMEx_CommutCallback>:
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr

080069de <HAL_TIMEx_BreakCallback>:
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <osKernelInitialize>:
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	f3ef 8305 	mrs	r3, IPSR
 80069fa:	60bb      	str	r3, [r7, #8]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10f      	bne.n	8006a22 <osKernelInitialize+0x32>
 8006a02:	f3ef 8310 	mrs	r3, PRIMASK
 8006a06:	607b      	str	r3, [r7, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d109      	bne.n	8006a22 <osKernelInitialize+0x32>
 8006a0e:	4b10      	ldr	r3, [pc, #64]	; (8006a50 <osKernelInitialize+0x60>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d109      	bne.n	8006a2a <osKernelInitialize+0x3a>
 8006a16:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1a:	603b      	str	r3, [r7, #0]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <osKernelInitialize+0x3a>
 8006a22:	f06f 0305 	mvn.w	r3, #5
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e00c      	b.n	8006a44 <osKernelInitialize+0x54>
 8006a2a:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <osKernelInitialize+0x60>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d105      	bne.n	8006a3e <osKernelInitialize+0x4e>
 8006a32:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <osKernelInitialize+0x60>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	e002      	b.n	8006a44 <osKernelInitialize+0x54>
 8006a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr
 8006a50:	20000034 	.word	0x20000034

08006a54 <osKernelStart>:
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	f3ef 8305 	mrs	r3, IPSR
 8006a5e:	60bb      	str	r3, [r7, #8]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10f      	bne.n	8006a86 <osKernelStart+0x32>
 8006a66:	f3ef 8310 	mrs	r3, PRIMASK
 8006a6a:	607b      	str	r3, [r7, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <osKernelStart+0x32>
 8006a72:	4b11      	ldr	r3, [pc, #68]	; (8006ab8 <osKernelStart+0x64>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d109      	bne.n	8006a8e <osKernelStart+0x3a>
 8006a7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <osKernelStart+0x3a>
 8006a86:	f06f 0305 	mvn.w	r3, #5
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	e00e      	b.n	8006aac <osKernelStart+0x58>
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <osKernelStart+0x64>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d107      	bne.n	8006aa6 <osKernelStart+0x52>
 8006a96:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <osKernelStart+0x64>)
 8006a98:	2202      	movs	r2, #2
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	f001 f8e6 	bl	8007c6c <vTaskStartScheduler>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	e002      	b.n	8006aac <osKernelStart+0x58>
 8006aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000034 	.word	0x20000034

08006abc <osThreadNew>:
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b092      	sub	sp, #72	; 0x48
 8006ac0:	af04      	add	r7, sp, #16
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	f3ef 8305 	mrs	r3, IPSR
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f040 8094 	bne.w	8006c02 <osThreadNew+0x146>
 8006ada:	f3ef 8310 	mrs	r3, PRIMASK
 8006ade:	623b      	str	r3, [r7, #32]
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f040 808d 	bne.w	8006c02 <osThreadNew+0x146>
 8006ae8:	4b48      	ldr	r3, [pc, #288]	; (8006c0c <osThreadNew+0x150>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d106      	bne.n	8006afe <osThreadNew+0x42>
 8006af0:	f3ef 8311 	mrs	r3, BASEPRI
 8006af4:	61fb      	str	r3, [r7, #28]
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f040 8082 	bne.w	8006c02 <osThreadNew+0x146>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d07e      	beq.n	8006c02 <osThreadNew+0x146>
 8006b04:	2380      	movs	r3, #128	; 0x80
 8006b06:	633b      	str	r3, [r7, #48]	; 0x30
 8006b08:	2318      	movs	r3, #24
 8006b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	76fb      	strb	r3, [r7, #27]
 8006b10:	f107 031b 	add.w	r3, r7, #27
 8006b14:	637b      	str	r3, [r7, #52]	; 0x34
 8006b16:	f04f 33ff 	mov.w	r3, #4294967295
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d045      	beq.n	8006bae <osThreadNew+0xf2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <osThreadNew+0x74>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <osThreadNew+0x82>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <osThreadNew+0x9a>
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	2b38      	cmp	r3, #56	; 0x38
 8006b48:	d805      	bhi.n	8006b56 <osThreadNew+0x9a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <osThreadNew+0x9e>
 8006b56:	2300      	movs	r3, #0
 8006b58:	e054      	b.n	8006c04 <osThreadNew+0x148>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <osThreadNew+0xae>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	089b      	lsrs	r3, r3, #2
 8006b68:	633b      	str	r3, [r7, #48]	; 0x30
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00e      	beq.n	8006b90 <osThreadNew+0xd4>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	2b5b      	cmp	r3, #91	; 0x5b
 8006b78:	d90a      	bls.n	8006b90 <osThreadNew+0xd4>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d006      	beq.n	8006b90 <osThreadNew+0xd4>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <osThreadNew+0xd4>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b8e:	e010      	b.n	8006bb2 <osThreadNew+0xf6>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10c      	bne.n	8006bb2 <osThreadNew+0xf6>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d108      	bne.n	8006bb2 <osThreadNew+0xf6>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <osThreadNew+0xf6>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bac:	e001      	b.n	8006bb2 <osThreadNew+0xf6>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d110      	bne.n	8006bda <osThreadNew+0x11e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	6892      	ldr	r2, [r2, #8]
 8006bc0:	9202      	str	r2, [sp, #8]
 8006bc2:	9301      	str	r3, [sp, #4]
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 fecc 	bl	800796c <xTaskCreateStatic>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e013      	b.n	8006c02 <osThreadNew+0x146>
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d110      	bne.n	8006c02 <osThreadNew+0x146>
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	f107 0314 	add.w	r3, r7, #20
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 feea 	bl	80079cc <xTaskCreate>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d001      	beq.n	8006c02 <osThreadNew+0x146>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	4618      	mov	r0, r3
 8006c06:	3738      	adds	r7, #56	; 0x38
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20000034 	.word	0x20000034

08006c10 <vApplicationGetIdleTaskMemory>:
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4a06      	ldr	r2, [pc, #24]	; (8006c38 <vApplicationGetIdleTaskMemory+0x28>)
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	4a05      	ldr	r2, [pc, #20]	; (8006c3c <vApplicationGetIdleTaskMemory+0x2c>)
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2280      	movs	r2, #128	; 0x80
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr
 8006c38:	20000038 	.word	0x20000038
 8006c3c:	20000094 	.word	0x20000094

08006c40 <vApplicationGetTimerTaskMemory>:
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4a07      	ldr	r2, [pc, #28]	; (8006c6c <vApplicationGetTimerTaskMemory+0x2c>)
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	4a06      	ldr	r2, [pc, #24]	; (8006c70 <vApplicationGetTimerTaskMemory+0x30>)
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	bf00      	nop
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	20000294 	.word	0x20000294
 8006c70:	200002f0 	.word	0x200002f0

08006c74 <vListInitialise>:
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f103 0208 	add.w	r2, r3, #8
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	605a      	str	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8c:	609a      	str	r2, [r3, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f103 0208 	add.w	r2, r3, #8
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	60da      	str	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f103 0208 	add.w	r2, r3, #8
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	611a      	str	r2, [r3, #16]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr

08006cb2 <vListInitialiseItem>:
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	611a      	str	r2, [r3, #16]
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr

08006cca <vListInsertEnd>:
 8006cca:	b480      	push	{r7}
 8006ccc:	b085      	sub	sp, #20
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	605a      	str	r2, [r3, #4]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	609a      	str	r2, [r3, #8]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	605a      	str	r2, [r3, #4]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	609a      	str	r2, [r3, #8]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	611a      	str	r2, [r3, #16]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bc80      	pop	{r7}
 8006d0e:	4770      	bx	lr

08006d10 <vListInsert>:
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d26:	d103      	bne.n	8006d30 <vListInsert+0x20>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	e00c      	b.n	8006d4a <vListInsert+0x3a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3308      	adds	r3, #8
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	e002      	b.n	8006d3e <vListInsert+0x2e>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d2f6      	bcs.n	8006d38 <vListInsert+0x28>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	605a      	str	r2, [r3, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	609a      	str	r2, [r3, #8]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	605a      	str	r2, [r3, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	611a      	str	r2, [r3, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr

08006d80 <uxListRemove>:
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6892      	ldr	r2, [r2, #8]
 8006d96:	609a      	str	r2, [r3, #8]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6852      	ldr	r2, [r2, #4]
 8006da0:	605a      	str	r2, [r3, #4]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d103      	bne.n	8006db4 <uxListRemove+0x34>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	605a      	str	r2, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	611a      	str	r2, [r3, #16]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	1e5a      	subs	r2, r3, #1
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bc80      	pop	{r7}
 8006dd0:	4770      	bx	lr
	...

08006dd4 <xQueueGenericReset>:
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	f001 ffe1 	bl	8008da8 <vPortEnterCritical>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dee:	68f9      	ldr	r1, [r7, #12]
 8006df0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006df2:	fb01 f303 	mul.w	r3, r1, r3
 8006df6:	441a      	add	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	605a      	str	r2, [r3, #4]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	639a      	str	r2, [r3, #56]	; 0x38
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	609a      	str	r2, [r3, #8]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	3b01      	subs	r3, #1
 8006e14:	68f9      	ldr	r1, [r7, #12]
 8006e16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e18:	fb01 f303 	mul.w	r3, r1, r3
 8006e1c:	441a      	add	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	60da      	str	r2, [r3, #12]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	22ff      	movs	r2, #255	; 0xff
 8006e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	22ff      	movs	r2, #255	; 0xff
 8006e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d114      	bne.n	8006e62 <xQueueGenericReset+0x8e>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01a      	beq.n	8006e76 <xQueueGenericReset+0xa2>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3310      	adds	r3, #16
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 f943 	bl	80080d0 <xTaskRemoveFromEventList>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d012      	beq.n	8006e76 <xQueueGenericReset+0xa2>
 8006e50:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <xQueueGenericReset+0xb0>)
 8006e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	e009      	b.n	8006e76 <xQueueGenericReset+0xa2>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3310      	adds	r3, #16
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff ff04 	bl	8006c74 <vListInitialise>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3324      	adds	r3, #36	; 0x24
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff feff 	bl	8006c74 <vListInitialise>
 8006e76:	f001 ffb1 	bl	8008ddc <vPortExitCritical>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	e000ed04 	.word	0xe000ed04

08006e88 <xQueueGenericCreateStatic>:
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00d      	beq.n	8006ebc <xQueueGenericCreateStatic+0x34>
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ea8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	68b9      	ldr	r1, [r7, #8]
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 f835 	bl	8006f26 <prvInitialiseNewQueue>
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <xQueueGenericCreate>:
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b08a      	sub	sp, #40	; 0x28
 8006eca:	af02      	add	r7, sp, #8
 8006ecc:	60f8      	str	r0, [r7, #12]
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	71fb      	strb	r3, [r7, #7]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d102      	bne.n	8006ee0 <xQueueGenericCreate+0x1a>
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
 8006ede:	e004      	b.n	8006eea <xQueueGenericCreate+0x24>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	fb02 f303 	mul.w	r3, r2, r3
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	3350      	adds	r3, #80	; 0x50
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f001 fff6 	bl	8008ee0 <pvPortMalloc>
 8006ef4:	61b8      	str	r0, [r7, #24]
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00f      	beq.n	8006f1c <xQueueGenericCreate+0x56>
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	3350      	adds	r3, #80	; 0x50
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f0a:	79fa      	ldrb	r2, [r7, #7]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	4613      	mov	r3, r2
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 f805 	bl	8006f26 <prvInitialiseNewQueue>
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <prvInitialiseNewQueue>:
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	607a      	str	r2, [r7, #4]
 8006f32:	70fb      	strb	r3, [r7, #3]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d103      	bne.n	8006f42 <prvInitialiseNewQueue+0x1c>
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	e002      	b.n	8006f48 <prvInitialiseNewQueue+0x22>
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	641a      	str	r2, [r3, #64]	; 0x40
 8006f54:	2101      	movs	r1, #1
 8006f56:	69b8      	ldr	r0, [r7, #24]
 8006f58:	f7ff ff3c 	bl	8006dd4 <xQueueGenericReset>
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	78fa      	ldrb	r2, [r7, #3]
 8006f60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8006f64:	bf00      	nop
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <xQueueCreateCountingSemaphore>:
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
 8006f76:	2202      	movs	r2, #2
 8006f78:	2100      	movs	r1, #0
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff ffa3 	bl	8006ec6 <xQueueGenericCreate>
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <xQueueCreateCountingSemaphore+0x22>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <xQueueGenericSend>:
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08a      	sub	sp, #40	; 0x28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	623b      	str	r3, [r7, #32]
 8006fae:	f001 fefb 	bl	8008da8 <vPortEnterCritical>
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d302      	bcc.n	8006fc4 <xQueueGenericSend+0x2c>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d129      	bne.n	8007018 <xQueueGenericSend+0x80>
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	68b9      	ldr	r1, [r7, #8]
 8006fc8:	6a38      	ldr	r0, [r7, #32]
 8006fca:	f000 fb62 	bl	8007692 <prvCopyDataToQueue>
 8006fce:	61f8      	str	r0, [r7, #28]
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d010      	beq.n	8006ffa <xQueueGenericSend+0x62>
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	3324      	adds	r3, #36	; 0x24
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 f877 	bl	80080d0 <xTaskRemoveFromEventList>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d013      	beq.n	8007010 <xQueueGenericSend+0x78>
 8006fe8:	4b3f      	ldr	r3, [pc, #252]	; (80070e8 <xQueueGenericSend+0x150>)
 8006fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	e00a      	b.n	8007010 <xQueueGenericSend+0x78>
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d007      	beq.n	8007010 <xQueueGenericSend+0x78>
 8007000:	4b39      	ldr	r3, [pc, #228]	; (80070e8 <xQueueGenericSend+0x150>)
 8007002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f001 fee4 	bl	8008ddc <vPortExitCritical>
 8007014:	2301      	movs	r3, #1
 8007016:	e063      	b.n	80070e0 <xQueueGenericSend+0x148>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d103      	bne.n	8007026 <xQueueGenericSend+0x8e>
 800701e:	f001 fedd 	bl	8008ddc <vPortExitCritical>
 8007022:	2300      	movs	r3, #0
 8007024:	e05c      	b.n	80070e0 <xQueueGenericSend+0x148>
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	2b00      	cmp	r3, #0
 800702a:	d106      	bne.n	800703a <xQueueGenericSend+0xa2>
 800702c:	f107 0314 	add.w	r3, r7, #20
 8007030:	4618      	mov	r0, r3
 8007032:	f001 f8a3 	bl	800817c <vTaskInternalSetTimeOutState>
 8007036:	2301      	movs	r3, #1
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
 800703a:	f001 fecf 	bl	8008ddc <vPortExitCritical>
 800703e:	f000 fe6d 	bl	8007d1c <vTaskSuspendAll>
 8007042:	f001 feb1 	bl	8008da8 <vPortEnterCritical>
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800704c:	b25b      	sxtb	r3, r3
 800704e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007052:	d103      	bne.n	800705c <xQueueGenericSend+0xc4>
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007062:	b25b      	sxtb	r3, r3
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007068:	d103      	bne.n	8007072 <xQueueGenericSend+0xda>
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007072:	f001 feb3 	bl	8008ddc <vPortExitCritical>
 8007076:	1d3a      	adds	r2, r7, #4
 8007078:	f107 0314 	add.w	r3, r7, #20
 800707c:	4611      	mov	r1, r2
 800707e:	4618      	mov	r0, r3
 8007080:	f001 f892 	bl	80081a8 <xTaskCheckForTimeOut>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d124      	bne.n	80070d4 <xQueueGenericSend+0x13c>
 800708a:	6a38      	ldr	r0, [r7, #32]
 800708c:	f000 fbf9 	bl	8007882 <prvIsQueueFull>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d018      	beq.n	80070c8 <xQueueGenericSend+0x130>
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	3310      	adds	r3, #16
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	4611      	mov	r1, r2
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 ffe2 	bl	8008068 <vTaskPlaceOnEventList>
 80070a4:	6a38      	ldr	r0, [r7, #32]
 80070a6:	f000 fb84 	bl	80077b2 <prvUnlockQueue>
 80070aa:	f000 fe45 	bl	8007d38 <xTaskResumeAll>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f47f af7c 	bne.w	8006fae <xQueueGenericSend+0x16>
 80070b6:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <xQueueGenericSend+0x150>)
 80070b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	e772      	b.n	8006fae <xQueueGenericSend+0x16>
 80070c8:	6a38      	ldr	r0, [r7, #32]
 80070ca:	f000 fb72 	bl	80077b2 <prvUnlockQueue>
 80070ce:	f000 fe33 	bl	8007d38 <xTaskResumeAll>
 80070d2:	e76c      	b.n	8006fae <xQueueGenericSend+0x16>
 80070d4:	6a38      	ldr	r0, [r7, #32]
 80070d6:	f000 fb6c 	bl	80077b2 <prvUnlockQueue>
 80070da:	f000 fe2d 	bl	8007d38 <xTaskResumeAll>
 80070de:	2300      	movs	r3, #0
 80070e0:	4618      	mov	r0, r3
 80070e2:	3728      	adds	r7, #40	; 0x28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	e000ed04 	.word	0xe000ed04

080070ec <xQueueGenericSendFromISR>:
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08c      	sub	sp, #48	; 0x30
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	603b      	str	r3, [r7, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80070fe:	f3ef 8211 	mrs	r2, BASEPRI
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	61fa      	str	r2, [r7, #28]
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	627b      	str	r3, [r7, #36]	; 0x24
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007122:	429a      	cmp	r2, r3
 8007124:	d302      	bcc.n	800712c <xQueueGenericSendFromISR+0x40>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d12c      	bne.n	8007186 <xQueueGenericSendFromISR+0x9a>
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	68b9      	ldr	r1, [r7, #8]
 800713a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800713c:	f000 faa9 	bl	8007692 <prvCopyDataToQueue>
 8007140:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007148:	d112      	bne.n	8007170 <xQueueGenericSendFromISR+0x84>
 800714a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	2b00      	cmp	r3, #0
 8007150:	d016      	beq.n	8007180 <xQueueGenericSendFromISR+0x94>
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	3324      	adds	r3, #36	; 0x24
 8007156:	4618      	mov	r0, r3
 8007158:	f000 ffba 	bl	80080d0 <xTaskRemoveFromEventList>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00e      	beq.n	8007180 <xQueueGenericSendFromISR+0x94>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <xQueueGenericSendFromISR+0x94>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	e007      	b.n	8007180 <xQueueGenericSendFromISR+0x94>
 8007170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007174:	3301      	adds	r3, #1
 8007176:	b2db      	uxtb	r3, r3
 8007178:	b25a      	sxtb	r2, r3
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007180:	2301      	movs	r3, #1
 8007182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007184:	e001      	b.n	800718a <xQueueGenericSendFromISR+0x9e>
 8007186:	2300      	movs	r3, #0
 8007188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	bf00      	nop
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	4618      	mov	r0, r3
 800719a:	3730      	adds	r7, #48	; 0x30
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <xQueueGiveFromISR>:
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	; 0x28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	623b      	str	r3, [r7, #32]
 80071ae:	f3ef 8211 	mrs	r2, BASEPRI
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	613a      	str	r2, [r7, #16]
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	61fb      	str	r3, [r7, #28]
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	61bb      	str	r3, [r7, #24]
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d229      	bcs.n	800722e <xQueueGiveFromISR+0x8e>
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071e0:	75fb      	strb	r3, [r7, #23]
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	639a      	str	r2, [r3, #56]	; 0x38
 80071ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f2:	d112      	bne.n	800721a <xQueueGiveFromISR+0x7a>
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d015      	beq.n	8007228 <xQueueGiveFromISR+0x88>
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	3324      	adds	r3, #36	; 0x24
 8007200:	4618      	mov	r0, r3
 8007202:	f000 ff65 	bl	80080d0 <xTaskRemoveFromEventList>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00d      	beq.n	8007228 <xQueueGiveFromISR+0x88>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <xQueueGiveFromISR+0x88>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2201      	movs	r2, #1
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	e006      	b.n	8007228 <xQueueGiveFromISR+0x88>
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	3301      	adds	r3, #1
 800721e:	b2db      	uxtb	r3, r3
 8007220:	b25a      	sxtb	r2, r3
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007228:	2301      	movs	r3, #1
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
 800722c:	e001      	b.n	8007232 <xQueueGiveFromISR+0x92>
 800722e:	2300      	movs	r3, #0
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	60bb      	str	r3, [r7, #8]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	bf00      	nop
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	4618      	mov	r0, r3
 8007242:	3728      	adds	r7, #40	; 0x28
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <xQueueReceive>:
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	; 0x28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	2300      	movs	r3, #0
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	623b      	str	r3, [r7, #32]
 800725c:	f001 fda4 	bl	8008da8 <vPortEnterCritical>
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	61fb      	str	r3, [r7, #28]
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01f      	beq.n	80072ac <xQueueReceive+0x64>
 800726c:	68b9      	ldr	r1, [r7, #8]
 800726e:	6a38      	ldr	r0, [r7, #32]
 8007270:	f000 fa79 	bl	8007766 <prvCopyDataFromQueue>
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	1e5a      	subs	r2, r3, #1
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	639a      	str	r2, [r3, #56]	; 0x38
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00f      	beq.n	80072a4 <xQueueReceive+0x5c>
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	3310      	adds	r3, #16
 8007288:	4618      	mov	r0, r3
 800728a:	f000 ff21 	bl	80080d0 <xTaskRemoveFromEventList>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d007      	beq.n	80072a4 <xQueueReceive+0x5c>
 8007294:	4b3c      	ldr	r3, [pc, #240]	; (8007388 <xQueueReceive+0x140>)
 8007296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f001 fd9a 	bl	8008ddc <vPortExitCritical>
 80072a8:	2301      	movs	r3, #1
 80072aa:	e069      	b.n	8007380 <xQueueReceive+0x138>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d103      	bne.n	80072ba <xQueueReceive+0x72>
 80072b2:	f001 fd93 	bl	8008ddc <vPortExitCritical>
 80072b6:	2300      	movs	r3, #0
 80072b8:	e062      	b.n	8007380 <xQueueReceive+0x138>
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d106      	bne.n	80072ce <xQueueReceive+0x86>
 80072c0:	f107 0314 	add.w	r3, r7, #20
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 ff59 	bl	800817c <vTaskInternalSetTimeOutState>
 80072ca:	2301      	movs	r3, #1
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
 80072ce:	f001 fd85 	bl	8008ddc <vPortExitCritical>
 80072d2:	f000 fd23 	bl	8007d1c <vTaskSuspendAll>
 80072d6:	f001 fd67 	bl	8008da8 <vPortEnterCritical>
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072e0:	b25b      	sxtb	r3, r3
 80072e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e6:	d103      	bne.n	80072f0 <xQueueReceive+0xa8>
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072f6:	b25b      	sxtb	r3, r3
 80072f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fc:	d103      	bne.n	8007306 <xQueueReceive+0xbe>
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007306:	f001 fd69 	bl	8008ddc <vPortExitCritical>
 800730a:	1d3a      	adds	r2, r7, #4
 800730c:	f107 0314 	add.w	r3, r7, #20
 8007310:	4611      	mov	r1, r2
 8007312:	4618      	mov	r0, r3
 8007314:	f000 ff48 	bl	80081a8 <xTaskCheckForTimeOut>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d123      	bne.n	8007366 <xQueueReceive+0x11e>
 800731e:	6a38      	ldr	r0, [r7, #32]
 8007320:	f000 fa99 	bl	8007856 <prvIsQueueEmpty>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d017      	beq.n	800735a <xQueueReceive+0x112>
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	3324      	adds	r3, #36	; 0x24
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	4611      	mov	r1, r2
 8007332:	4618      	mov	r0, r3
 8007334:	f000 fe98 	bl	8008068 <vTaskPlaceOnEventList>
 8007338:	6a38      	ldr	r0, [r7, #32]
 800733a:	f000 fa3a 	bl	80077b2 <prvUnlockQueue>
 800733e:	f000 fcfb 	bl	8007d38 <xTaskResumeAll>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d189      	bne.n	800725c <xQueueReceive+0x14>
 8007348:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <xQueueReceive+0x140>)
 800734a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	e780      	b.n	800725c <xQueueReceive+0x14>
 800735a:	6a38      	ldr	r0, [r7, #32]
 800735c:	f000 fa29 	bl	80077b2 <prvUnlockQueue>
 8007360:	f000 fcea 	bl	8007d38 <xTaskResumeAll>
 8007364:	e77a      	b.n	800725c <xQueueReceive+0x14>
 8007366:	6a38      	ldr	r0, [r7, #32]
 8007368:	f000 fa23 	bl	80077b2 <prvUnlockQueue>
 800736c:	f000 fce4 	bl	8007d38 <xTaskResumeAll>
 8007370:	6a38      	ldr	r0, [r7, #32]
 8007372:	f000 fa70 	bl	8007856 <prvIsQueueEmpty>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	f43f af6f 	beq.w	800725c <xQueueReceive+0x14>
 800737e:	2300      	movs	r3, #0
 8007380:	4618      	mov	r0, r3
 8007382:	3728      	adds	r7, #40	; 0x28
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <xQueueSemaphoreTake>:
 800738c:	b580      	push	{r7, lr}
 800738e:	b08a      	sub	sp, #40	; 0x28
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
 8007396:	2300      	movs	r3, #0
 8007398:	627b      	str	r3, [r7, #36]	; 0x24
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	61fb      	str	r3, [r7, #28]
 800739e:	2300      	movs	r3, #0
 80073a0:	623b      	str	r3, [r7, #32]
 80073a2:	f001 fd01 	bl	8008da8 <vPortEnterCritical>
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d024      	beq.n	80073fc <xQueueSemaphoreTake+0x70>
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	1e5a      	subs	r2, r3, #1
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	639a      	str	r2, [r3, #56]	; 0x38
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <xQueueSemaphoreTake+0x40>
 80073c2:	f001 f949 	bl	8008658 <pvTaskIncrementMutexHeldCount>
 80073c6:	4602      	mov	r2, r0
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	605a      	str	r2, [r3, #4]
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00f      	beq.n	80073f4 <xQueueSemaphoreTake+0x68>
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	3310      	adds	r3, #16
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fe79 	bl	80080d0 <xTaskRemoveFromEventList>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d007      	beq.n	80073f4 <xQueueSemaphoreTake+0x68>
 80073e4:	4b4c      	ldr	r3, [pc, #304]	; (8007518 <xQueueSemaphoreTake+0x18c>)
 80073e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f001 fcf2 	bl	8008ddc <vPortExitCritical>
 80073f8:	2301      	movs	r3, #1
 80073fa:	e089      	b.n	8007510 <xQueueSemaphoreTake+0x184>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d103      	bne.n	800740a <xQueueSemaphoreTake+0x7e>
 8007402:	f001 fceb 	bl	8008ddc <vPortExitCritical>
 8007406:	2300      	movs	r3, #0
 8007408:	e082      	b.n	8007510 <xQueueSemaphoreTake+0x184>
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	2b00      	cmp	r3, #0
 800740e:	d106      	bne.n	800741e <xQueueSemaphoreTake+0x92>
 8007410:	f107 030c 	add.w	r3, r7, #12
 8007414:	4618      	mov	r0, r3
 8007416:	f000 feb1 	bl	800817c <vTaskInternalSetTimeOutState>
 800741a:	2301      	movs	r3, #1
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
 800741e:	f001 fcdd 	bl	8008ddc <vPortExitCritical>
 8007422:	f000 fc7b 	bl	8007d1c <vTaskSuspendAll>
 8007426:	f001 fcbf 	bl	8008da8 <vPortEnterCritical>
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007430:	b25b      	sxtb	r3, r3
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d103      	bne.n	8007440 <xQueueSemaphoreTake+0xb4>
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007446:	b25b      	sxtb	r3, r3
 8007448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744c:	d103      	bne.n	8007456 <xQueueSemaphoreTake+0xca>
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007456:	f001 fcc1 	bl	8008ddc <vPortExitCritical>
 800745a:	463a      	mov	r2, r7
 800745c:	f107 030c 	add.w	r3, r7, #12
 8007460:	4611      	mov	r1, r2
 8007462:	4618      	mov	r0, r3
 8007464:	f000 fea0 	bl	80081a8 <xTaskCheckForTimeOut>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d132      	bne.n	80074d4 <xQueueSemaphoreTake+0x148>
 800746e:	69f8      	ldr	r0, [r7, #28]
 8007470:	f000 f9f1 	bl	8007856 <prvIsQueueEmpty>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d026      	beq.n	80074c8 <xQueueSemaphoreTake+0x13c>
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <xQueueSemaphoreTake+0x10a>
 8007482:	f001 fc91 	bl	8008da8 <vPortEnterCritical>
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	4618      	mov	r0, r3
 800748c:	f000 ffc4 	bl	8008418 <xTaskPriorityInherit>
 8007490:	6238      	str	r0, [r7, #32]
 8007492:	f001 fca3 	bl	8008ddc <vPortExitCritical>
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	3324      	adds	r3, #36	; 0x24
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fde2 	bl	8008068 <vTaskPlaceOnEventList>
 80074a4:	69f8      	ldr	r0, [r7, #28]
 80074a6:	f000 f984 	bl	80077b2 <prvUnlockQueue>
 80074aa:	f000 fc45 	bl	8007d38 <xTaskResumeAll>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f47f af76 	bne.w	80073a2 <xQueueSemaphoreTake+0x16>
 80074b6:	4b18      	ldr	r3, [pc, #96]	; (8007518 <xQueueSemaphoreTake+0x18c>)
 80074b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	e76c      	b.n	80073a2 <xQueueSemaphoreTake+0x16>
 80074c8:	69f8      	ldr	r0, [r7, #28]
 80074ca:	f000 f972 	bl	80077b2 <prvUnlockQueue>
 80074ce:	f000 fc33 	bl	8007d38 <xTaskResumeAll>
 80074d2:	e766      	b.n	80073a2 <xQueueSemaphoreTake+0x16>
 80074d4:	69f8      	ldr	r0, [r7, #28]
 80074d6:	f000 f96c 	bl	80077b2 <prvUnlockQueue>
 80074da:	f000 fc2d 	bl	8007d38 <xTaskResumeAll>
 80074de:	69f8      	ldr	r0, [r7, #28]
 80074e0:	f000 f9b9 	bl	8007856 <prvIsQueueEmpty>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f43f af5b 	beq.w	80073a2 <xQueueSemaphoreTake+0x16>
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00d      	beq.n	800750e <xQueueSemaphoreTake+0x182>
 80074f2:	f001 fc59 	bl	8008da8 <vPortEnterCritical>
 80074f6:	69f8      	ldr	r0, [r7, #28]
 80074f8:	f000 f8b4 	bl	8007664 <prvGetDisinheritPriorityAfterTimeout>
 80074fc:	6178      	str	r0, [r7, #20]
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	6979      	ldr	r1, [r7, #20]
 8007504:	4618      	mov	r0, r3
 8007506:	f001 f841 	bl	800858c <vTaskPriorityDisinheritAfterTimeout>
 800750a:	f001 fc67 	bl	8008ddc <vPortExitCritical>
 800750e:	2300      	movs	r3, #0
 8007510:	4618      	mov	r0, r3
 8007512:	3728      	adds	r7, #40	; 0x28
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	e000ed04 	.word	0xe000ed04

0800751c <xQueuePeek>:
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	; 0x28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	2300      	movs	r3, #0
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	623b      	str	r3, [r7, #32]
 8007530:	f001 fc3a 	bl	8008da8 <vPortEnterCritical>
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	61fb      	str	r3, [r7, #28]
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d021      	beq.n	8007584 <xQueuePeek+0x68>
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	61bb      	str	r3, [r7, #24]
 8007546:	68b9      	ldr	r1, [r7, #8]
 8007548:	6a38      	ldr	r0, [r7, #32]
 800754a:	f000 f90c 	bl	8007766 <prvCopyDataFromQueue>
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	60da      	str	r2, [r3, #12]
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00f      	beq.n	800757c <xQueuePeek+0x60>
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	3324      	adds	r3, #36	; 0x24
 8007560:	4618      	mov	r0, r3
 8007562:	f000 fdb5 	bl	80080d0 <xTaskRemoveFromEventList>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d007      	beq.n	800757c <xQueuePeek+0x60>
 800756c:	4b3c      	ldr	r3, [pc, #240]	; (8007660 <xQueuePeek+0x144>)
 800756e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f001 fc2e 	bl	8008ddc <vPortExitCritical>
 8007580:	2301      	movs	r3, #1
 8007582:	e069      	b.n	8007658 <xQueuePeek+0x13c>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d103      	bne.n	8007592 <xQueuePeek+0x76>
 800758a:	f001 fc27 	bl	8008ddc <vPortExitCritical>
 800758e:	2300      	movs	r3, #0
 8007590:	e062      	b.n	8007658 <xQueuePeek+0x13c>
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	d106      	bne.n	80075a6 <xQueuePeek+0x8a>
 8007598:	f107 0310 	add.w	r3, r7, #16
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fded 	bl	800817c <vTaskInternalSetTimeOutState>
 80075a2:	2301      	movs	r3, #1
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
 80075a6:	f001 fc19 	bl	8008ddc <vPortExitCritical>
 80075aa:	f000 fbb7 	bl	8007d1c <vTaskSuspendAll>
 80075ae:	f001 fbfb 	bl	8008da8 <vPortEnterCritical>
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075b8:	b25b      	sxtb	r3, r3
 80075ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075be:	d103      	bne.n	80075c8 <xQueuePeek+0xac>
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075ce:	b25b      	sxtb	r3, r3
 80075d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d4:	d103      	bne.n	80075de <xQueuePeek+0xc2>
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075de:	f001 fbfd 	bl	8008ddc <vPortExitCritical>
 80075e2:	1d3a      	adds	r2, r7, #4
 80075e4:	f107 0310 	add.w	r3, r7, #16
 80075e8:	4611      	mov	r1, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fddc 	bl	80081a8 <xTaskCheckForTimeOut>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d123      	bne.n	800763e <xQueuePeek+0x122>
 80075f6:	6a38      	ldr	r0, [r7, #32]
 80075f8:	f000 f92d 	bl	8007856 <prvIsQueueEmpty>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d017      	beq.n	8007632 <xQueuePeek+0x116>
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	3324      	adds	r3, #36	; 0x24
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	4611      	mov	r1, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fd2c 	bl	8008068 <vTaskPlaceOnEventList>
 8007610:	6a38      	ldr	r0, [r7, #32]
 8007612:	f000 f8ce 	bl	80077b2 <prvUnlockQueue>
 8007616:	f000 fb8f 	bl	8007d38 <xTaskResumeAll>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d187      	bne.n	8007530 <xQueuePeek+0x14>
 8007620:	4b0f      	ldr	r3, [pc, #60]	; (8007660 <xQueuePeek+0x144>)
 8007622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	e77e      	b.n	8007530 <xQueuePeek+0x14>
 8007632:	6a38      	ldr	r0, [r7, #32]
 8007634:	f000 f8bd 	bl	80077b2 <prvUnlockQueue>
 8007638:	f000 fb7e 	bl	8007d38 <xTaskResumeAll>
 800763c:	e778      	b.n	8007530 <xQueuePeek+0x14>
 800763e:	6a38      	ldr	r0, [r7, #32]
 8007640:	f000 f8b7 	bl	80077b2 <prvUnlockQueue>
 8007644:	f000 fb78 	bl	8007d38 <xTaskResumeAll>
 8007648:	6a38      	ldr	r0, [r7, #32]
 800764a:	f000 f904 	bl	8007856 <prvIsQueueEmpty>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	f43f af6d 	beq.w	8007530 <xQueuePeek+0x14>
 8007656:	2300      	movs	r3, #0
 8007658:	4618      	mov	r0, r3
 800765a:	3728      	adds	r7, #40	; 0x28
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	e000ed04 	.word	0xe000ed04

08007664 <prvGetDisinheritPriorityAfterTimeout>:
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	d006      	beq.n	8007682 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	e001      	b.n	8007686 <prvGetDisinheritPriorityAfterTimeout+0x22>
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	bc80      	pop	{r7}
 8007690:	4770      	bx	lr

08007692 <prvCopyDataToQueue>:
 8007692:	b580      	push	{r7, lr}
 8007694:	b086      	sub	sp, #24
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	607a      	str	r2, [r7, #4]
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10d      	bne.n	80076cc <prvCopyDataToQueue+0x3a>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d14d      	bne.n	8007754 <prvCopyDataToQueue+0xc2>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 ff19 	bl	80084f4 <xTaskPriorityDisinherit>
 80076c2:	6178      	str	r0, [r7, #20]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	605a      	str	r2, [r3, #4]
 80076ca:	e043      	b.n	8007754 <prvCopyDataToQueue+0xc2>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d119      	bne.n	8007706 <prvCopyDataToQueue+0x74>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6898      	ldr	r0, [r3, #8]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	461a      	mov	r2, r3
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	f001 fdab 	bl	8009238 <memcpy>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	441a      	add	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	609a      	str	r2, [r3, #8]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d32b      	bcc.n	8007754 <prvCopyDataToQueue+0xc2>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	609a      	str	r2, [r3, #8]
 8007704:	e026      	b.n	8007754 <prvCopyDataToQueue+0xc2>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68d8      	ldr	r0, [r3, #12]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	461a      	mov	r2, r3
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	f001 fd91 	bl	8009238 <memcpy>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	425b      	negs	r3, r3
 8007720:	441a      	add	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	60da      	str	r2, [r3, #12]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	429a      	cmp	r2, r3
 8007730:	d207      	bcs.n	8007742 <prvCopyDataToQueue+0xb0>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	425b      	negs	r3, r3
 800773c:	441a      	add	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	60da      	str	r2, [r3, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b02      	cmp	r3, #2
 8007746:	d105      	bne.n	8007754 <prvCopyDataToQueue+0xc2>
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <prvCopyDataToQueue+0xc2>
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	3b01      	subs	r3, #1
 8007752:	613b      	str	r3, [r7, #16]
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	639a      	str	r2, [r3, #56]	; 0x38
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <prvCopyDataFromQueue>:
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007774:	2b00      	cmp	r3, #0
 8007776:	d018      	beq.n	80077aa <prvCopyDataFromQueue+0x44>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	441a      	add	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	60da      	str	r2, [r3, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	429a      	cmp	r2, r3
 8007790:	d303      	bcc.n	800779a <prvCopyDataFromQueue+0x34>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	60da      	str	r2, [r3, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68d9      	ldr	r1, [r3, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	461a      	mov	r2, r3
 80077a4:	6838      	ldr	r0, [r7, #0]
 80077a6:	f001 fd47 	bl	8009238 <memcpy>
 80077aa:	bf00      	nop
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <prvUnlockQueue>:
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	f001 faf5 	bl	8008da8 <vPortEnterCritical>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077c4:	73fb      	strb	r3, [r7, #15]
 80077c6:	e011      	b.n	80077ec <prvUnlockQueue+0x3a>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d012      	beq.n	80077f6 <prvUnlockQueue+0x44>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3324      	adds	r3, #36	; 0x24
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fc7b 	bl	80080d0 <xTaskRemoveFromEventList>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <prvUnlockQueue+0x32>
 80077e0:	f000 fd28 	bl	8008234 <vTaskMissedYield>
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	73fb      	strb	r3, [r7, #15]
 80077ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	dce9      	bgt.n	80077c8 <prvUnlockQueue+0x16>
 80077f4:	e000      	b.n	80077f8 <prvUnlockQueue+0x46>
 80077f6:	bf00      	nop
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	22ff      	movs	r2, #255	; 0xff
 80077fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007800:	f001 faec 	bl	8008ddc <vPortExitCritical>
 8007804:	f001 fad0 	bl	8008da8 <vPortEnterCritical>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800780e:	73bb      	strb	r3, [r7, #14]
 8007810:	e011      	b.n	8007836 <prvUnlockQueue+0x84>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d012      	beq.n	8007840 <prvUnlockQueue+0x8e>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	3310      	adds	r3, #16
 800781e:	4618      	mov	r0, r3
 8007820:	f000 fc56 	bl	80080d0 <xTaskRemoveFromEventList>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <prvUnlockQueue+0x7c>
 800782a:	f000 fd03 	bl	8008234 <vTaskMissedYield>
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	3b01      	subs	r3, #1
 8007832:	b2db      	uxtb	r3, r3
 8007834:	73bb      	strb	r3, [r7, #14]
 8007836:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800783a:	2b00      	cmp	r3, #0
 800783c:	dce9      	bgt.n	8007812 <prvUnlockQueue+0x60>
 800783e:	e000      	b.n	8007842 <prvUnlockQueue+0x90>
 8007840:	bf00      	nop
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	22ff      	movs	r2, #255	; 0xff
 8007846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800784a:	f001 fac7 	bl	8008ddc <vPortExitCritical>
 800784e:	bf00      	nop
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <prvIsQueueEmpty>:
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	f001 faa3 	bl	8008da8 <vPortEnterCritical>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007866:	2b00      	cmp	r3, #0
 8007868:	d102      	bne.n	8007870 <prvIsQueueEmpty+0x1a>
 800786a:	2301      	movs	r3, #1
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	e001      	b.n	8007874 <prvIsQueueEmpty+0x1e>
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	f001 fab2 	bl	8008ddc <vPortExitCritical>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <prvIsQueueFull>:
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	f001 fa8d 	bl	8008da8 <vPortEnterCritical>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007896:	429a      	cmp	r2, r3
 8007898:	d102      	bne.n	80078a0 <prvIsQueueFull+0x1e>
 800789a:	2301      	movs	r3, #1
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	e001      	b.n	80078a4 <prvIsQueueFull+0x22>
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	f001 fa9a 	bl	8008ddc <vPortExitCritical>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <vQueueAddToRegistry>:
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	e014      	b.n	80078ee <vQueueAddToRegistry+0x3a>
 80078c4:	4a0e      	ldr	r2, [pc, #56]	; (8007900 <vQueueAddToRegistry+0x4c>)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10b      	bne.n	80078e8 <vQueueAddToRegistry+0x34>
 80078d0:	490b      	ldr	r1, [pc, #44]	; (8007900 <vQueueAddToRegistry+0x4c>)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80078da:	4a09      	ldr	r2, [pc, #36]	; (8007900 <vQueueAddToRegistry+0x4c>)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	4413      	add	r3, r2
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	605a      	str	r2, [r3, #4]
 80078e6:	e006      	b.n	80078f6 <vQueueAddToRegistry+0x42>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3301      	adds	r3, #1
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b07      	cmp	r3, #7
 80078f2:	d9e7      	bls.n	80078c4 <vQueueAddToRegistry+0x10>
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc80      	pop	{r7}
 80078fe:	4770      	bx	lr
 8007900:	20004698 	.word	0x20004698

08007904 <vQueueWaitForMessageRestricted>:
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	f001 fa48 	bl	8008da8 <vPortEnterCritical>
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800791e:	b25b      	sxtb	r3, r3
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007924:	d103      	bne.n	800792e <vQueueWaitForMessageRestricted+0x2a>
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007934:	b25b      	sxtb	r3, r3
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793a:	d103      	bne.n	8007944 <vQueueWaitForMessageRestricted+0x40>
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007944:	f001 fa4a 	bl	8008ddc <vPortExitCritical>
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	2b00      	cmp	r3, #0
 800794e:	d106      	bne.n	800795e <vQueueWaitForMessageRestricted+0x5a>
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	3324      	adds	r3, #36	; 0x24
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	68b9      	ldr	r1, [r7, #8]
 8007958:	4618      	mov	r0, r3
 800795a:	f000 fb9b 	bl	8008094 <vTaskPlaceOnEventListRestricted>
 800795e:	6978      	ldr	r0, [r7, #20]
 8007960:	f7ff ff27 	bl	80077b2 <prvUnlockQueue>
 8007964:	bf00      	nop
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <xTaskCreateStatic>:
 800796c:	b580      	push	{r7, lr}
 800796e:	b08a      	sub	sp, #40	; 0x28
 8007970:	af04      	add	r7, sp, #16
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	603b      	str	r3, [r7, #0]
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01e      	beq.n	80079be <xTaskCreateStatic+0x52>
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	2b00      	cmp	r3, #0
 8007984:	d01b      	beq.n	80079be <xTaskCreateStatic+0x52>
 8007986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007988:	617b      	str	r3, [r7, #20]
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798e:	631a      	str	r2, [r3, #48]	; 0x30
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8007998:	2300      	movs	r3, #0
 800799a:	9303      	str	r3, [sp, #12]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	9302      	str	r3, [sp, #8]
 80079a0:	f107 0310 	add.w	r3, r7, #16
 80079a4:	9301      	str	r3, [sp, #4]
 80079a6:	6a3b      	ldr	r3, [r7, #32]
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 f850 	bl	8007a56 <prvInitialiseNewTask>
 80079b6:	6978      	ldr	r0, [r7, #20]
 80079b8:	f000 f8c4 	bl	8007b44 <prvAddNewTaskToReadyList>
 80079bc:	e001      	b.n	80079c2 <xTaskCreateStatic+0x56>
 80079be:	2300      	movs	r3, #0
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <xTaskCreate>:
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08c      	sub	sp, #48	; 0x30
 80079d0:	af04      	add	r7, sp, #16
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	603b      	str	r3, [r7, #0]
 80079d8:	4613      	mov	r3, r2
 80079da:	80fb      	strh	r3, [r7, #6]
 80079dc:	88fb      	ldrh	r3, [r7, #6]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 fa7d 	bl	8008ee0 <pvPortMalloc>
 80079e6:	6178      	str	r0, [r7, #20]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00e      	beq.n	8007a0c <xTaskCreate+0x40>
 80079ee:	205c      	movs	r0, #92	; 0x5c
 80079f0:	f001 fa76 	bl	8008ee0 <pvPortMalloc>
 80079f4:	61f8      	str	r0, [r7, #28]
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <xTaskCreate+0x38>
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	631a      	str	r2, [r3, #48]	; 0x30
 8007a02:	e005      	b.n	8007a10 <xTaskCreate+0x44>
 8007a04:	6978      	ldr	r0, [r7, #20]
 8007a06:	f001 faff 	bl	8009008 <vPortFree>
 8007a0a:	e001      	b.n	8007a10 <xTaskCreate+0x44>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	61fb      	str	r3, [r7, #28]
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d017      	beq.n	8007a46 <xTaskCreate+0x7a>
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8007a1e:	88fa      	ldrh	r2, [r7, #6]
 8007a20:	2300      	movs	r3, #0
 8007a22:	9303      	str	r3, [sp, #12]
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	9302      	str	r3, [sp, #8]
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	68b9      	ldr	r1, [r7, #8]
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 f80e 	bl	8007a56 <prvInitialiseNewTask>
 8007a3a:	69f8      	ldr	r0, [r7, #28]
 8007a3c:	f000 f882 	bl	8007b44 <prvAddNewTaskToReadyList>
 8007a40:	2301      	movs	r3, #1
 8007a42:	61bb      	str	r3, [r7, #24]
 8007a44:	e002      	b.n	8007a4c <xTaskCreate+0x80>
 8007a46:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4a:	61bb      	str	r3, [r7, #24]
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3720      	adds	r7, #32
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <prvInitialiseNewTask>:
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b086      	sub	sp, #24
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	607a      	str	r2, [r7, #4]
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	21a5      	movs	r1, #165	; 0xa5
 8007a70:	f001 fbf0 	bl	8009254 <memset>
 8007a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f023 0307 	bic.w	r3, r3, #7
 8007a8c:	613b      	str	r3, [r7, #16]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	e012      	b.n	8007aba <prvInitialiseNewTask+0x64>
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	4413      	add	r3, r2
 8007a9a:	7819      	ldrb	r1, [r3, #0]
 8007a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3334      	adds	r3, #52	; 0x34
 8007aa4:	460a      	mov	r2, r1
 8007aa6:	701a      	strb	r2, [r3, #0]
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	4413      	add	r3, r2
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d006      	beq.n	8007ac2 <prvInitialiseNewTask+0x6c>
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	617b      	str	r3, [r7, #20]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b0f      	cmp	r3, #15
 8007abe:	d9e9      	bls.n	8007a94 <prvInitialiseNewTask+0x3e>
 8007ac0:	e000      	b.n	8007ac4 <prvInitialiseNewTask+0x6e>
 8007ac2:	bf00      	nop
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	2b37      	cmp	r3, #55	; 0x37
 8007ad0:	d901      	bls.n	8007ad6 <prvInitialiseNewTask+0x80>
 8007ad2:	2337      	movs	r3, #55	; 0x37
 8007ad4:	623b      	str	r3, [r7, #32]
 8007ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad8:	6a3a      	ldr	r2, [r7, #32]
 8007ada:	62da      	str	r2, [r3, #44]	; 0x2c
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	6a3a      	ldr	r2, [r7, #32]
 8007ae0:	64da      	str	r2, [r3, #76]	; 0x4c
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	651a      	str	r2, [r3, #80]	; 0x50
 8007ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aea:	3304      	adds	r3, #4
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7ff f8e0 	bl	8006cb2 <vListInitialiseItem>
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	3318      	adds	r3, #24
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff f8db 	bl	8006cb2 <vListInitialiseItem>
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b00:	611a      	str	r2, [r3, #16]
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	619a      	str	r2, [r3, #24]
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b10:	625a      	str	r2, [r3, #36]	; 0x24
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b14:	2200      	movs	r2, #0
 8007b16:	655a      	str	r2, [r3, #84]	; 0x54
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	68f9      	ldr	r1, [r7, #12]
 8007b24:	6938      	ldr	r0, [r7, #16]
 8007b26:	f001 f8af 	bl	8008c88 <pxPortInitialiseStack>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <prvInitialiseNewTask+0xe6>
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	bf00      	nop
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <prvAddNewTaskToReadyList>:
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	f001 f92c 	bl	8008da8 <vPortEnterCritical>
 8007b50:	4b2d      	ldr	r3, [pc, #180]	; (8007c08 <prvAddNewTaskToReadyList+0xc4>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3301      	adds	r3, #1
 8007b56:	4a2c      	ldr	r2, [pc, #176]	; (8007c08 <prvAddNewTaskToReadyList+0xc4>)
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	4b2c      	ldr	r3, [pc, #176]	; (8007c0c <prvAddNewTaskToReadyList+0xc8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d109      	bne.n	8007b76 <prvAddNewTaskToReadyList+0x32>
 8007b62:	4a2a      	ldr	r2, [pc, #168]	; (8007c0c <prvAddNewTaskToReadyList+0xc8>)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6013      	str	r3, [r2, #0]
 8007b68:	4b27      	ldr	r3, [pc, #156]	; (8007c08 <prvAddNewTaskToReadyList+0xc4>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d110      	bne.n	8007b92 <prvAddNewTaskToReadyList+0x4e>
 8007b70:	f000 fb84 	bl	800827c <prvInitialiseTaskLists>
 8007b74:	e00d      	b.n	8007b92 <prvAddNewTaskToReadyList+0x4e>
 8007b76:	4b26      	ldr	r3, [pc, #152]	; (8007c10 <prvAddNewTaskToReadyList+0xcc>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d109      	bne.n	8007b92 <prvAddNewTaskToReadyList+0x4e>
 8007b7e:	4b23      	ldr	r3, [pc, #140]	; (8007c0c <prvAddNewTaskToReadyList+0xc8>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d802      	bhi.n	8007b92 <prvAddNewTaskToReadyList+0x4e>
 8007b8c:	4a1f      	ldr	r2, [pc, #124]	; (8007c0c <prvAddNewTaskToReadyList+0xc8>)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	4b20      	ldr	r3, [pc, #128]	; (8007c14 <prvAddNewTaskToReadyList+0xd0>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3301      	adds	r3, #1
 8007b98:	4a1e      	ldr	r2, [pc, #120]	; (8007c14 <prvAddNewTaskToReadyList+0xd0>)
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	4b1d      	ldr	r3, [pc, #116]	; (8007c14 <prvAddNewTaskToReadyList+0xd0>)
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	645a      	str	r2, [r3, #68]	; 0x44
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba8:	4b1b      	ldr	r3, [pc, #108]	; (8007c18 <prvAddNewTaskToReadyList+0xd4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d903      	bls.n	8007bb8 <prvAddNewTaskToReadyList+0x74>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	4a18      	ldr	r2, [pc, #96]	; (8007c18 <prvAddNewTaskToReadyList+0xd4>)
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4a15      	ldr	r2, [pc, #84]	; (8007c1c <prvAddNewTaskToReadyList+0xd8>)
 8007bc6:	441a      	add	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3304      	adds	r3, #4
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	f7ff f87b 	bl	8006cca <vListInsertEnd>
 8007bd4:	f001 f902 	bl	8008ddc <vPortExitCritical>
 8007bd8:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <prvAddNewTaskToReadyList+0xcc>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00e      	beq.n	8007bfe <prvAddNewTaskToReadyList+0xba>
 8007be0:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <prvAddNewTaskToReadyList+0xc8>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d207      	bcs.n	8007bfe <prvAddNewTaskToReadyList+0xba>
 8007bee:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <prvAddNewTaskToReadyList+0xdc>)
 8007bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	bf00      	nop
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	20000bc4 	.word	0x20000bc4
 8007c0c:	200006f0 	.word	0x200006f0
 8007c10:	20000bd0 	.word	0x20000bd0
 8007c14:	20000be0 	.word	0x20000be0
 8007c18:	20000bcc 	.word	0x20000bcc
 8007c1c:	200006f4 	.word	0x200006f4
 8007c20:	e000ed04 	.word	0xe000ed04

08007c24 <vTaskDelay>:
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d008      	beq.n	8007c48 <vTaskDelay+0x24>
 8007c36:	f000 f871 	bl	8007d1c <vTaskSuspendAll>
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fd1f 	bl	8008680 <prvAddCurrentTaskToDelayedList>
 8007c42:	f000 f879 	bl	8007d38 <xTaskResumeAll>
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d107      	bne.n	8007c5e <vTaskDelay+0x3a>
 8007c4e:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <vTaskDelay+0x44>)
 8007c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	bf00      	nop
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	e000ed04 	.word	0xe000ed04

08007c6c <vTaskStartScheduler>:
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08a      	sub	sp, #40	; 0x28
 8007c70:	af04      	add	r7, sp, #16
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	2300      	movs	r3, #0
 8007c78:	60bb      	str	r3, [r7, #8]
 8007c7a:	1d3a      	adds	r2, r7, #4
 8007c7c:	f107 0108 	add.w	r1, r7, #8
 8007c80:	f107 030c 	add.w	r3, r7, #12
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe ffc3 	bl	8006c10 <vApplicationGetIdleTaskMemory>
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	9202      	str	r2, [sp, #8]
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	2300      	movs	r3, #0
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	460a      	mov	r2, r1
 8007c9c:	4919      	ldr	r1, [pc, #100]	; (8007d04 <vTaskStartScheduler+0x98>)
 8007c9e:	481a      	ldr	r0, [pc, #104]	; (8007d08 <vTaskStartScheduler+0x9c>)
 8007ca0:	f7ff fe64 	bl	800796c <xTaskCreateStatic>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	4a19      	ldr	r2, [pc, #100]	; (8007d0c <vTaskStartScheduler+0xa0>)
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	4b18      	ldr	r3, [pc, #96]	; (8007d0c <vTaskStartScheduler+0xa0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <vTaskStartScheduler+0x4c>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	e001      	b.n	8007cbc <vTaskStartScheduler+0x50>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d102      	bne.n	8007cc8 <vTaskStartScheduler+0x5c>
 8007cc2:	f000 fd31 	bl	8008728 <xTimerCreateTimerTask>
 8007cc6:	6178      	str	r0, [r7, #20]
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d115      	bne.n	8007cfa <vTaskStartScheduler+0x8e>
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	613b      	str	r3, [r7, #16]
 8007ce0:	bf00      	nop
 8007ce2:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <vTaskStartScheduler+0xa4>)
 8007ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	4b0a      	ldr	r3, [pc, #40]	; (8007d14 <vTaskStartScheduler+0xa8>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	601a      	str	r2, [r3, #0]
 8007cf0:	4b09      	ldr	r3, [pc, #36]	; (8007d18 <vTaskStartScheduler+0xac>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	f001 f837 	bl	8008d68 <xPortStartScheduler>
 8007cfa:	bf00      	nop
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	08009300 	.word	0x08009300
 8007d08:	0800824d 	.word	0x0800824d
 8007d0c:	20000be8 	.word	0x20000be8
 8007d10:	20000be4 	.word	0x20000be4
 8007d14:	20000bd0 	.word	0x20000bd0
 8007d18:	20000bc8 	.word	0x20000bc8

08007d1c <vTaskSuspendAll>:
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	4b04      	ldr	r3, [pc, #16]	; (8007d34 <vTaskSuspendAll+0x18>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3301      	adds	r3, #1
 8007d26:	4a03      	ldr	r2, [pc, #12]	; (8007d34 <vTaskSuspendAll+0x18>)
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	bf00      	nop
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bc80      	pop	{r7}
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	20000bec 	.word	0x20000bec

08007d38 <xTaskResumeAll>:
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60fb      	str	r3, [r7, #12]
 8007d42:	2300      	movs	r3, #0
 8007d44:	60bb      	str	r3, [r7, #8]
 8007d46:	f001 f82f 	bl	8008da8 <vPortEnterCritical>
 8007d4a:	4b39      	ldr	r3, [pc, #228]	; (8007e30 <xTaskResumeAll+0xf8>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	4a37      	ldr	r2, [pc, #220]	; (8007e30 <xTaskResumeAll+0xf8>)
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	4b36      	ldr	r3, [pc, #216]	; (8007e30 <xTaskResumeAll+0xf8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d162      	bne.n	8007e22 <xTaskResumeAll+0xea>
 8007d5c:	4b35      	ldr	r3, [pc, #212]	; (8007e34 <xTaskResumeAll+0xfc>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d05e      	beq.n	8007e22 <xTaskResumeAll+0xea>
 8007d64:	e02f      	b.n	8007dc6 <xTaskResumeAll+0x8e>
 8007d66:	4b34      	ldr	r3, [pc, #208]	; (8007e38 <xTaskResumeAll+0x100>)
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3318      	adds	r3, #24
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7ff f804 	bl	8006d80 <uxListRemove>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe ffff 	bl	8006d80 <uxListRemove>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d86:	4b2d      	ldr	r3, [pc, #180]	; (8007e3c <xTaskResumeAll+0x104>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d903      	bls.n	8007d96 <xTaskResumeAll+0x5e>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d92:	4a2a      	ldr	r2, [pc, #168]	; (8007e3c <xTaskResumeAll+0x104>)
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4a27      	ldr	r2, [pc, #156]	; (8007e40 <xTaskResumeAll+0x108>)
 8007da4:	441a      	add	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3304      	adds	r3, #4
 8007daa:	4619      	mov	r1, r3
 8007dac:	4610      	mov	r0, r2
 8007dae:	f7fe ff8c 	bl	8006cca <vListInsertEnd>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db6:	4b23      	ldr	r3, [pc, #140]	; (8007e44 <xTaskResumeAll+0x10c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d302      	bcc.n	8007dc6 <xTaskResumeAll+0x8e>
 8007dc0:	4b21      	ldr	r3, [pc, #132]	; (8007e48 <xTaskResumeAll+0x110>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	4b1c      	ldr	r3, [pc, #112]	; (8007e38 <xTaskResumeAll+0x100>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1cb      	bne.n	8007d66 <xTaskResumeAll+0x2e>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <xTaskResumeAll+0xa0>
 8007dd4:	f000 fade 	bl	8008394 <prvResetNextTaskUnblockTime>
 8007dd8:	4b1c      	ldr	r3, [pc, #112]	; (8007e4c <xTaskResumeAll+0x114>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d010      	beq.n	8007e06 <xTaskResumeAll+0xce>
 8007de4:	f000 f844 	bl	8007e70 <xTaskIncrementTick>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d002      	beq.n	8007df4 <xTaskResumeAll+0xbc>
 8007dee:	4b16      	ldr	r3, [pc, #88]	; (8007e48 <xTaskResumeAll+0x110>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	607b      	str	r3, [r7, #4]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1f1      	bne.n	8007de4 <xTaskResumeAll+0xac>
 8007e00:	4b12      	ldr	r3, [pc, #72]	; (8007e4c <xTaskResumeAll+0x114>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <xTaskResumeAll+0x110>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d009      	beq.n	8007e22 <xTaskResumeAll+0xea>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	60bb      	str	r3, [r7, #8]
 8007e12:	4b0f      	ldr	r3, [pc, #60]	; (8007e50 <xTaskResumeAll+0x118>)
 8007e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f000 ffdb 	bl	8008ddc <vPortExitCritical>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20000bec 	.word	0x20000bec
 8007e34:	20000bc4 	.word	0x20000bc4
 8007e38:	20000b84 	.word	0x20000b84
 8007e3c:	20000bcc 	.word	0x20000bcc
 8007e40:	200006f4 	.word	0x200006f4
 8007e44:	200006f0 	.word	0x200006f0
 8007e48:	20000bd8 	.word	0x20000bd8
 8007e4c:	20000bd4 	.word	0x20000bd4
 8007e50:	e000ed04 	.word	0xe000ed04

08007e54 <xTaskGetTickCount>:
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4b04      	ldr	r3, [pc, #16]	; (8007e6c <xTaskGetTickCount+0x18>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	607b      	str	r3, [r7, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr
 8007e6c:	20000bc8 	.word	0x20000bc8

08007e70 <xTaskIncrementTick>:
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	2300      	movs	r3, #0
 8007e78:	617b      	str	r3, [r7, #20]
 8007e7a:	4b49      	ldr	r3, [pc, #292]	; (8007fa0 <xTaskIncrementTick+0x130>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d17d      	bne.n	8007f7e <xTaskIncrementTick+0x10e>
 8007e82:	4b48      	ldr	r3, [pc, #288]	; (8007fa4 <xTaskIncrementTick+0x134>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3301      	adds	r3, #1
 8007e88:	613b      	str	r3, [r7, #16]
 8007e8a:	4a46      	ldr	r2, [pc, #280]	; (8007fa4 <xTaskIncrementTick+0x134>)
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d110      	bne.n	8007eb8 <xTaskIncrementTick+0x48>
 8007e96:	4b44      	ldr	r3, [pc, #272]	; (8007fa8 <xTaskIncrementTick+0x138>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	4b43      	ldr	r3, [pc, #268]	; (8007fac <xTaskIncrementTick+0x13c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a41      	ldr	r2, [pc, #260]	; (8007fa8 <xTaskIncrementTick+0x138>)
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	4a41      	ldr	r2, [pc, #260]	; (8007fac <xTaskIncrementTick+0x13c>)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	4b41      	ldr	r3, [pc, #260]	; (8007fb0 <xTaskIncrementTick+0x140>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	4a3f      	ldr	r2, [pc, #252]	; (8007fb0 <xTaskIncrementTick+0x140>)
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	f000 fa6e 	bl	8008394 <prvResetNextTaskUnblockTime>
 8007eb8:	4b3e      	ldr	r3, [pc, #248]	; (8007fb4 <xTaskIncrementTick+0x144>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d34e      	bcc.n	8007f60 <xTaskIncrementTick+0xf0>
 8007ec2:	4b39      	ldr	r3, [pc, #228]	; (8007fa8 <xTaskIncrementTick+0x138>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <xTaskIncrementTick+0x60>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e000      	b.n	8007ed2 <xTaskIncrementTick+0x62>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d004      	beq.n	8007ee0 <xTaskIncrementTick+0x70>
 8007ed6:	4b37      	ldr	r3, [pc, #220]	; (8007fb4 <xTaskIncrementTick+0x144>)
 8007ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e03f      	b.n	8007f60 <xTaskIncrementTick+0xf0>
 8007ee0:	4b31      	ldr	r3, [pc, #196]	; (8007fa8 <xTaskIncrementTick+0x138>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	60bb      	str	r3, [r7, #8]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	607b      	str	r3, [r7, #4]
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d203      	bcs.n	8007f00 <xTaskIncrementTick+0x90>
 8007ef8:	4a2e      	ldr	r2, [pc, #184]	; (8007fb4 <xTaskIncrementTick+0x144>)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	e02f      	b.n	8007f60 <xTaskIncrementTick+0xf0>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe ff3b 	bl	8006d80 <uxListRemove>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d004      	beq.n	8007f1c <xTaskIncrementTick+0xac>
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	3318      	adds	r3, #24
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe ff32 	bl	8006d80 <uxListRemove>
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f20:	4b25      	ldr	r3, [pc, #148]	; (8007fb8 <xTaskIncrementTick+0x148>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d903      	bls.n	8007f30 <xTaskIncrementTick+0xc0>
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2c:	4a22      	ldr	r2, [pc, #136]	; (8007fb8 <xTaskIncrementTick+0x148>)
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4a1f      	ldr	r2, [pc, #124]	; (8007fbc <xTaskIncrementTick+0x14c>)
 8007f3e:	441a      	add	r2, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	3304      	adds	r3, #4
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f7fe febf 	bl	8006cca <vListInsertEnd>
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f50:	4b1b      	ldr	r3, [pc, #108]	; (8007fc0 <xTaskIncrementTick+0x150>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d3b3      	bcc.n	8007ec2 <xTaskIncrementTick+0x52>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	617b      	str	r3, [r7, #20]
 8007f5e:	e7b0      	b.n	8007ec2 <xTaskIncrementTick+0x52>
 8007f60:	4b17      	ldr	r3, [pc, #92]	; (8007fc0 <xTaskIncrementTick+0x150>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f66:	4915      	ldr	r1, [pc, #84]	; (8007fbc <xTaskIncrementTick+0x14c>)
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	440b      	add	r3, r1
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d907      	bls.n	8007f88 <xTaskIncrementTick+0x118>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	617b      	str	r3, [r7, #20]
 8007f7c:	e004      	b.n	8007f88 <xTaskIncrementTick+0x118>
 8007f7e:	4b11      	ldr	r3, [pc, #68]	; (8007fc4 <xTaskIncrementTick+0x154>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3301      	adds	r3, #1
 8007f84:	4a0f      	ldr	r2, [pc, #60]	; (8007fc4 <xTaskIncrementTick+0x154>)
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	4b0f      	ldr	r3, [pc, #60]	; (8007fc8 <xTaskIncrementTick+0x158>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <xTaskIncrementTick+0x124>
 8007f90:	2301      	movs	r3, #1
 8007f92:	617b      	str	r3, [r7, #20]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20000bec 	.word	0x20000bec
 8007fa4:	20000bc8 	.word	0x20000bc8
 8007fa8:	20000b7c 	.word	0x20000b7c
 8007fac:	20000b80 	.word	0x20000b80
 8007fb0:	20000bdc 	.word	0x20000bdc
 8007fb4:	20000be4 	.word	0x20000be4
 8007fb8:	20000bcc 	.word	0x20000bcc
 8007fbc:	200006f4 	.word	0x200006f4
 8007fc0:	200006f0 	.word	0x200006f0
 8007fc4:	20000bd4 	.word	0x20000bd4
 8007fc8:	20000bd8 	.word	0x20000bd8

08007fcc <vTaskSwitchContext>:
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4b20      	ldr	r3, [pc, #128]	; (8008054 <vTaskSwitchContext+0x88>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <vTaskSwitchContext+0x16>
 8007fda:	4b1f      	ldr	r3, [pc, #124]	; (8008058 <vTaskSwitchContext+0x8c>)
 8007fdc:	2201      	movs	r2, #1
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	e033      	b.n	800804a <vTaskSwitchContext+0x7e>
 8007fe2:	4b1d      	ldr	r3, [pc, #116]	; (8008058 <vTaskSwitchContext+0x8c>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	4b1c      	ldr	r3, [pc, #112]	; (800805c <vTaskSwitchContext+0x90>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	607b      	str	r3, [r7, #4]
 8007fee:	e002      	b.n	8007ff6 <vTaskSwitchContext+0x2a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	607b      	str	r3, [r7, #4]
 8007ff6:	491a      	ldr	r1, [pc, #104]	; (8008060 <vTaskSwitchContext+0x94>)
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	440b      	add	r3, r1
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d0f2      	beq.n	8007ff0 <vTaskSwitchContext+0x24>
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4a12      	ldr	r2, [pc, #72]	; (8008060 <vTaskSwitchContext+0x94>)
 8008016:	4413      	add	r3, r2
 8008018:	603b      	str	r3, [r7, #0]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	605a      	str	r2, [r3, #4]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	3308      	adds	r3, #8
 800802c:	429a      	cmp	r2, r3
 800802e:	d104      	bne.n	800803a <vTaskSwitchContext+0x6e>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	605a      	str	r2, [r3, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	4a08      	ldr	r2, [pc, #32]	; (8008064 <vTaskSwitchContext+0x98>)
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	4a05      	ldr	r2, [pc, #20]	; (800805c <vTaskSwitchContext+0x90>)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6013      	str	r3, [r2, #0]
 800804a:	bf00      	nop
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	bc80      	pop	{r7}
 8008052:	4770      	bx	lr
 8008054:	20000bec 	.word	0x20000bec
 8008058:	20000bd8 	.word	0x20000bd8
 800805c:	20000bcc 	.word	0x20000bcc
 8008060:	200006f4 	.word	0x200006f4
 8008064:	200006f0 	.word	0x200006f0

08008068 <vTaskPlaceOnEventList>:
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
 8008072:	4b07      	ldr	r3, [pc, #28]	; (8008090 <vTaskPlaceOnEventList+0x28>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3318      	adds	r3, #24
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fe fe48 	bl	8006d10 <vListInsert>
 8008080:	2101      	movs	r1, #1
 8008082:	6838      	ldr	r0, [r7, #0]
 8008084:	f000 fafc 	bl	8008680 <prvAddCurrentTaskToDelayedList>
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	200006f0 	.word	0x200006f0

08008094 <vTaskPlaceOnEventListRestricted>:
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <vTaskPlaceOnEventListRestricted+0x38>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3318      	adds	r3, #24
 80080a6:	4619      	mov	r1, r3
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7fe fe0e 	bl	8006cca <vListInsertEnd>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <vTaskPlaceOnEventListRestricted+0x26>
 80080b4:	f04f 33ff 	mov.w	r3, #4294967295
 80080b8:	60bb      	str	r3, [r7, #8]
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	68b8      	ldr	r0, [r7, #8]
 80080be:	f000 fadf 	bl	8008680 <prvAddCurrentTaskToDelayedList>
 80080c2:	bf00      	nop
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	200006f0 	.word	0x200006f0

080080d0 <xTaskRemoveFromEventList>:
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	60bb      	str	r3, [r7, #8]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	3318      	adds	r3, #24
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fe fe4b 	bl	8006d80 <uxListRemove>
 80080ea:	4b1e      	ldr	r3, [pc, #120]	; (8008164 <xTaskRemoveFromEventList+0x94>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d11d      	bne.n	800812e <xTaskRemoveFromEventList+0x5e>
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	3304      	adds	r3, #4
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fe42 	bl	8006d80 <uxListRemove>
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008100:	4b19      	ldr	r3, [pc, #100]	; (8008168 <xTaskRemoveFromEventList+0x98>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	429a      	cmp	r2, r3
 8008106:	d903      	bls.n	8008110 <xTaskRemoveFromEventList+0x40>
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	4a16      	ldr	r2, [pc, #88]	; (8008168 <xTaskRemoveFromEventList+0x98>)
 800810e:	6013      	str	r3, [r2, #0]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4a13      	ldr	r2, [pc, #76]	; (800816c <xTaskRemoveFromEventList+0x9c>)
 800811e:	441a      	add	r2, r3
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	3304      	adds	r3, #4
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f7fe fdcf 	bl	8006cca <vListInsertEnd>
 800812c:	e005      	b.n	800813a <xTaskRemoveFromEventList+0x6a>
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	3318      	adds	r3, #24
 8008132:	4619      	mov	r1, r3
 8008134:	480e      	ldr	r0, [pc, #56]	; (8008170 <xTaskRemoveFromEventList+0xa0>)
 8008136:	f7fe fdc8 	bl	8006cca <vListInsertEnd>
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813e:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <xTaskRemoveFromEventList+0xa4>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	429a      	cmp	r2, r3
 8008146:	d905      	bls.n	8008154 <xTaskRemoveFromEventList+0x84>
 8008148:	2301      	movs	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	4b0a      	ldr	r3, [pc, #40]	; (8008178 <xTaskRemoveFromEventList+0xa8>)
 800814e:	2201      	movs	r2, #1
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e001      	b.n	8008158 <xTaskRemoveFromEventList+0x88>
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000bec 	.word	0x20000bec
 8008168:	20000bcc 	.word	0x20000bcc
 800816c:	200006f4 	.word	0x200006f4
 8008170:	20000b84 	.word	0x20000b84
 8008174:	200006f0 	.word	0x200006f0
 8008178:	20000bd8 	.word	0x20000bd8

0800817c <vTaskInternalSetTimeOutState>:
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	4b06      	ldr	r3, [pc, #24]	; (80081a0 <vTaskInternalSetTimeOutState+0x24>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	4b05      	ldr	r3, [pc, #20]	; (80081a4 <vTaskInternalSetTimeOutState+0x28>)
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	605a      	str	r2, [r3, #4]
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	bc80      	pop	{r7}
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	20000bdc 	.word	0x20000bdc
 80081a4:	20000bc8 	.word	0x20000bc8

080081a8 <xTaskCheckForTimeOut>:
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
 80081b2:	f000 fdf9 	bl	8008da8 <vPortEnterCritical>
 80081b6:	4b1d      	ldr	r3, [pc, #116]	; (800822c <xTaskCheckForTimeOut+0x84>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	613b      	str	r3, [r7, #16]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ce:	d102      	bne.n	80081d6 <xTaskCheckForTimeOut+0x2e>
 80081d0:	2300      	movs	r3, #0
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e023      	b.n	800821e <xTaskCheckForTimeOut+0x76>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4b15      	ldr	r3, [pc, #84]	; (8008230 <xTaskCheckForTimeOut+0x88>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d007      	beq.n	80081f2 <xTaskCheckForTimeOut+0x4a>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d302      	bcc.n	80081f2 <xTaskCheckForTimeOut+0x4a>
 80081ec:	2301      	movs	r3, #1
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	e015      	b.n	800821e <xTaskCheckForTimeOut+0x76>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d20b      	bcs.n	8008214 <xTaskCheckForTimeOut+0x6c>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	1ad2      	subs	r2, r2, r3
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff ffb7 	bl	800817c <vTaskInternalSetTimeOutState>
 800820e:	2300      	movs	r3, #0
 8008210:	617b      	str	r3, [r7, #20]
 8008212:	e004      	b.n	800821e <xTaskCheckForTimeOut+0x76>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	2301      	movs	r3, #1
 800821c:	617b      	str	r3, [r7, #20]
 800821e:	f000 fddd 	bl	8008ddc <vPortExitCritical>
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20000bc8 	.word	0x20000bc8
 8008230:	20000bdc 	.word	0x20000bdc

08008234 <vTaskMissedYield>:
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
 8008238:	4b03      	ldr	r3, [pc, #12]	; (8008248 <vTaskMissedYield+0x14>)
 800823a:	2201      	movs	r2, #1
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	bf00      	nop
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	20000bd8 	.word	0x20000bd8

0800824c <prvIdleTask>:
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	f000 f852 	bl	80082fc <prvCheckTasksWaitingTermination>
 8008258:	4b06      	ldr	r3, [pc, #24]	; (8008274 <prvIdleTask+0x28>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d9f9      	bls.n	8008254 <prvIdleTask+0x8>
 8008260:	4b05      	ldr	r3, [pc, #20]	; (8008278 <prvIdleTask+0x2c>)
 8008262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	e7f0      	b.n	8008254 <prvIdleTask+0x8>
 8008272:	bf00      	nop
 8008274:	200006f4 	.word	0x200006f4
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <prvInitialiseTaskLists>:
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	2300      	movs	r3, #0
 8008284:	607b      	str	r3, [r7, #4]
 8008286:	e00c      	b.n	80082a2 <prvInitialiseTaskLists+0x26>
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4a12      	ldr	r2, [pc, #72]	; (80082dc <prvInitialiseTaskLists+0x60>)
 8008294:	4413      	add	r3, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe fcec 	bl	8006c74 <vListInitialise>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3301      	adds	r3, #1
 80082a0:	607b      	str	r3, [r7, #4]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b37      	cmp	r3, #55	; 0x37
 80082a6:	d9ef      	bls.n	8008288 <prvInitialiseTaskLists+0xc>
 80082a8:	480d      	ldr	r0, [pc, #52]	; (80082e0 <prvInitialiseTaskLists+0x64>)
 80082aa:	f7fe fce3 	bl	8006c74 <vListInitialise>
 80082ae:	480d      	ldr	r0, [pc, #52]	; (80082e4 <prvInitialiseTaskLists+0x68>)
 80082b0:	f7fe fce0 	bl	8006c74 <vListInitialise>
 80082b4:	480c      	ldr	r0, [pc, #48]	; (80082e8 <prvInitialiseTaskLists+0x6c>)
 80082b6:	f7fe fcdd 	bl	8006c74 <vListInitialise>
 80082ba:	480c      	ldr	r0, [pc, #48]	; (80082ec <prvInitialiseTaskLists+0x70>)
 80082bc:	f7fe fcda 	bl	8006c74 <vListInitialise>
 80082c0:	480b      	ldr	r0, [pc, #44]	; (80082f0 <prvInitialiseTaskLists+0x74>)
 80082c2:	f7fe fcd7 	bl	8006c74 <vListInitialise>
 80082c6:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <prvInitialiseTaskLists+0x78>)
 80082c8:	4a05      	ldr	r2, [pc, #20]	; (80082e0 <prvInitialiseTaskLists+0x64>)
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <prvInitialiseTaskLists+0x7c>)
 80082ce:	4a05      	ldr	r2, [pc, #20]	; (80082e4 <prvInitialiseTaskLists+0x68>)
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	bf00      	nop
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	200006f4 	.word	0x200006f4
 80082e0:	20000b54 	.word	0x20000b54
 80082e4:	20000b68 	.word	0x20000b68
 80082e8:	20000b84 	.word	0x20000b84
 80082ec:	20000b98 	.word	0x20000b98
 80082f0:	20000bb0 	.word	0x20000bb0
 80082f4:	20000b7c 	.word	0x20000b7c
 80082f8:	20000b80 	.word	0x20000b80

080082fc <prvCheckTasksWaitingTermination>:
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	e019      	b.n	8008338 <prvCheckTasksWaitingTermination+0x3c>
 8008304:	f000 fd50 	bl	8008da8 <vPortEnterCritical>
 8008308:	4b10      	ldr	r3, [pc, #64]	; (800834c <prvCheckTasksWaitingTermination+0x50>)
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	607b      	str	r3, [r7, #4]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3304      	adds	r3, #4
 8008314:	4618      	mov	r0, r3
 8008316:	f7fe fd33 	bl	8006d80 <uxListRemove>
 800831a:	4b0d      	ldr	r3, [pc, #52]	; (8008350 <prvCheckTasksWaitingTermination+0x54>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3b01      	subs	r3, #1
 8008320:	4a0b      	ldr	r2, [pc, #44]	; (8008350 <prvCheckTasksWaitingTermination+0x54>)
 8008322:	6013      	str	r3, [r2, #0]
 8008324:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <prvCheckTasksWaitingTermination+0x58>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3b01      	subs	r3, #1
 800832a:	4a0a      	ldr	r2, [pc, #40]	; (8008354 <prvCheckTasksWaitingTermination+0x58>)
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	f000 fd55 	bl	8008ddc <vPortExitCritical>
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f810 	bl	8008358 <prvDeleteTCB>
 8008338:	4b06      	ldr	r3, [pc, #24]	; (8008354 <prvCheckTasksWaitingTermination+0x58>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1e1      	bne.n	8008304 <prvCheckTasksWaitingTermination+0x8>
 8008340:	bf00      	nop
 8008342:	bf00      	nop
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20000b98 	.word	0x20000b98
 8008350:	20000bc4 	.word	0x20000bc4
 8008354:	20000bac 	.word	0x20000bac

08008358 <prvDeleteTCB>:
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008366:	2b00      	cmp	r3, #0
 8008368:	d108      	bne.n	800837c <prvDeleteTCB+0x24>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fe4a 	bl	8009008 <vPortFree>
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fe47 	bl	8009008 <vPortFree>
 800837a:	e007      	b.n	800838c <prvDeleteTCB+0x34>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008382:	2b01      	cmp	r3, #1
 8008384:	d102      	bne.n	800838c <prvDeleteTCB+0x34>
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fe3e 	bl	8009008 <vPortFree>
 800838c:	bf00      	nop
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <prvResetNextTaskUnblockTime>:
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	4b0e      	ldr	r3, [pc, #56]	; (80083d4 <prvResetNextTaskUnblockTime+0x40>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <prvResetNextTaskUnblockTime+0x14>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e000      	b.n	80083aa <prvResetNextTaskUnblockTime+0x16>
 80083a8:	2300      	movs	r3, #0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d004      	beq.n	80083b8 <prvResetNextTaskUnblockTime+0x24>
 80083ae:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <prvResetNextTaskUnblockTime+0x44>)
 80083b0:	f04f 32ff 	mov.w	r2, #4294967295
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	e008      	b.n	80083ca <prvResetNextTaskUnblockTime+0x36>
 80083b8:	4b06      	ldr	r3, [pc, #24]	; (80083d4 <prvResetNextTaskUnblockTime+0x40>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	607b      	str	r3, [r7, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	4a04      	ldr	r2, [pc, #16]	; (80083d8 <prvResetNextTaskUnblockTime+0x44>)
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bc80      	pop	{r7}
 80083d2:	4770      	bx	lr
 80083d4:	20000b7c 	.word	0x20000b7c
 80083d8:	20000be4 	.word	0x20000be4

080083dc <xTaskGetSchedulerState>:
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4b0b      	ldr	r3, [pc, #44]	; (8008410 <xTaskGetSchedulerState+0x34>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <xTaskGetSchedulerState+0x14>
 80083ea:	2301      	movs	r3, #1
 80083ec:	607b      	str	r3, [r7, #4]
 80083ee:	e008      	b.n	8008402 <xTaskGetSchedulerState+0x26>
 80083f0:	4b08      	ldr	r3, [pc, #32]	; (8008414 <xTaskGetSchedulerState+0x38>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d102      	bne.n	80083fe <xTaskGetSchedulerState+0x22>
 80083f8:	2302      	movs	r3, #2
 80083fa:	607b      	str	r3, [r7, #4]
 80083fc:	e001      	b.n	8008402 <xTaskGetSchedulerState+0x26>
 80083fe:	2300      	movs	r3, #0
 8008400:	607b      	str	r3, [r7, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4618      	mov	r0, r3
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	bc80      	pop	{r7}
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	20000bd0 	.word	0x20000bd0
 8008414:	20000bec 	.word	0x20000bec

08008418 <xTaskPriorityInherit>:
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	60bb      	str	r3, [r7, #8]
 8008424:	2300      	movs	r3, #0
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d056      	beq.n	80084dc <xTaskPriorityInherit+0xc4>
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008432:	4b2d      	ldr	r3, [pc, #180]	; (80084e8 <xTaskPriorityInherit+0xd0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	429a      	cmp	r2, r3
 800843a:	d246      	bcs.n	80084ca <xTaskPriorityInherit+0xb2>
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	2b00      	cmp	r3, #0
 8008442:	db06      	blt.n	8008452 <xTaskPriorityInherit+0x3a>
 8008444:	4b28      	ldr	r3, [pc, #160]	; (80084e8 <xTaskPriorityInherit+0xd0>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	619a      	str	r2, [r3, #24]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	6959      	ldr	r1, [r3, #20]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845a:	4613      	mov	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4a22      	ldr	r2, [pc, #136]	; (80084ec <xTaskPriorityInherit+0xd4>)
 8008464:	4413      	add	r3, r2
 8008466:	4299      	cmp	r1, r3
 8008468:	d101      	bne.n	800846e <xTaskPriorityInherit+0x56>
 800846a:	2301      	movs	r3, #1
 800846c:	e000      	b.n	8008470 <xTaskPriorityInherit+0x58>
 800846e:	2300      	movs	r3, #0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d022      	beq.n	80084ba <xTaskPriorityInherit+0xa2>
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	3304      	adds	r3, #4
 8008478:	4618      	mov	r0, r3
 800847a:	f7fe fc81 	bl	8006d80 <uxListRemove>
 800847e:	4b1a      	ldr	r3, [pc, #104]	; (80084e8 <xTaskPriorityInherit+0xd0>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	62da      	str	r2, [r3, #44]	; 0x2c
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848c:	4b18      	ldr	r3, [pc, #96]	; (80084f0 <xTaskPriorityInherit+0xd8>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d903      	bls.n	800849c <xTaskPriorityInherit+0x84>
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	4a15      	ldr	r2, [pc, #84]	; (80084f0 <xTaskPriorityInherit+0xd8>)
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4a10      	ldr	r2, [pc, #64]	; (80084ec <xTaskPriorityInherit+0xd4>)
 80084aa:	441a      	add	r2, r3
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	3304      	adds	r3, #4
 80084b0:	4619      	mov	r1, r3
 80084b2:	4610      	mov	r0, r2
 80084b4:	f7fe fc09 	bl	8006cca <vListInsertEnd>
 80084b8:	e004      	b.n	80084c4 <xTaskPriorityInherit+0xac>
 80084ba:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <xTaskPriorityInherit+0xd0>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80084c4:	2301      	movs	r3, #1
 80084c6:	60fb      	str	r3, [r7, #12]
 80084c8:	e008      	b.n	80084dc <xTaskPriorityInherit+0xc4>
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084ce:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <xTaskPriorityInherit+0xd0>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d201      	bcs.n	80084dc <xTaskPriorityInherit+0xc4>
 80084d8:	2301      	movs	r3, #1
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	200006f0 	.word	0x200006f0
 80084ec:	200006f4 	.word	0x200006f4
 80084f0:	20000bcc 	.word	0x20000bcc

080084f4 <xTaskPriorityDisinherit>:
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	60bb      	str	r3, [r7, #8]
 8008500:	2300      	movs	r3, #0
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d037      	beq.n	800857a <xTaskPriorityDisinherit+0x86>
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800850e:	1e5a      	subs	r2, r3, #1
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	651a      	str	r2, [r3, #80]	; 0x50
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800851c:	429a      	cmp	r2, r3
 800851e:	d02c      	beq.n	800857a <xTaskPriorityDisinherit+0x86>
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008524:	2b00      	cmp	r3, #0
 8008526:	d128      	bne.n	800857a <xTaskPriorityDisinherit+0x86>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	3304      	adds	r3, #4
 800852c:	4618      	mov	r0, r3
 800852e:	f7fe fc27 	bl	8006d80 <uxListRemove>
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	62da      	str	r2, [r3, #44]	; 0x2c
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	619a      	str	r2, [r3, #24]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854a:	4b0e      	ldr	r3, [pc, #56]	; (8008584 <xTaskPriorityDisinherit+0x90>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	429a      	cmp	r2, r3
 8008550:	d903      	bls.n	800855a <xTaskPriorityDisinherit+0x66>
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008556:	4a0b      	ldr	r2, [pc, #44]	; (8008584 <xTaskPriorityDisinherit+0x90>)
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4a08      	ldr	r2, [pc, #32]	; (8008588 <xTaskPriorityDisinherit+0x94>)
 8008568:	441a      	add	r2, r3
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	3304      	adds	r3, #4
 800856e:	4619      	mov	r1, r3
 8008570:	4610      	mov	r0, r2
 8008572:	f7fe fbaa 	bl	8006cca <vListInsertEnd>
 8008576:	2301      	movs	r3, #1
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20000bcc 	.word	0x20000bcc
 8008588:	200006f4 	.word	0x200006f4

0800858c <vTaskPriorityDisinheritAfterTimeout>:
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	613b      	str	r3, [r7, #16]
 800859a:	2301      	movs	r3, #1
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d050      	beq.n	8008646 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d902      	bls.n	80085b4 <vTaskPriorityDisinheritAfterTimeout+0x28>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	617b      	str	r3, [r7, #20]
 80085b2:	e002      	b.n	80085ba <vTaskPriorityDisinheritAfterTimeout+0x2e>
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b8:	617b      	str	r3, [r7, #20]
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d040      	beq.n	8008646 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d13b      	bne.n	8008646 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	60bb      	str	r3, [r7, #8]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	db04      	blt.n	80085ec <vTaskPriorityDisinheritAfterTimeout+0x60>
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	619a      	str	r2, [r3, #24]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	6959      	ldr	r1, [r3, #20]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4a15      	ldr	r2, [pc, #84]	; (8008650 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80085fc:	4413      	add	r3, r2
 80085fe:	4299      	cmp	r1, r3
 8008600:	d101      	bne.n	8008606 <vTaskPriorityDisinheritAfterTimeout+0x7a>
 8008602:	2301      	movs	r3, #1
 8008604:	e000      	b.n	8008608 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8008606:	2300      	movs	r3, #0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d01c      	beq.n	8008646 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	3304      	adds	r3, #4
 8008610:	4618      	mov	r0, r3
 8008612:	f7fe fbb5 	bl	8006d80 <uxListRemove>
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861a:	4b0e      	ldr	r3, [pc, #56]	; (8008654 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d903      	bls.n	800862a <vTaskPriorityDisinheritAfterTimeout+0x9e>
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008626:	4a0b      	ldr	r2, [pc, #44]	; (8008654 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4a06      	ldr	r2, [pc, #24]	; (8008650 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8008638:	441a      	add	r2, r3
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fe fb42 	bl	8006cca <vListInsertEnd>
 8008646:	bf00      	nop
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	200006f4 	.word	0x200006f4
 8008654:	20000bcc 	.word	0x20000bcc

08008658 <pvTaskIncrementMutexHeldCount>:
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
 800865c:	4b07      	ldr	r3, [pc, #28]	; (800867c <pvTaskIncrementMutexHeldCount+0x24>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d004      	beq.n	800866e <pvTaskIncrementMutexHeldCount+0x16>
 8008664:	4b05      	ldr	r3, [pc, #20]	; (800867c <pvTaskIncrementMutexHeldCount+0x24>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800866a:	3201      	adds	r2, #1
 800866c:	651a      	str	r2, [r3, #80]	; 0x50
 800866e:	4b03      	ldr	r3, [pc, #12]	; (800867c <pvTaskIncrementMutexHeldCount+0x24>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	46bd      	mov	sp, r7
 8008676:	bc80      	pop	{r7}
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	200006f0 	.word	0x200006f0

08008680 <prvAddCurrentTaskToDelayedList>:
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
 800868a:	4b21      	ldr	r3, [pc, #132]	; (8008710 <prvAddCurrentTaskToDelayedList+0x90>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	4b20      	ldr	r3, [pc, #128]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3304      	adds	r3, #4
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe fb72 	bl	8006d80 <uxListRemove>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a2:	d10a      	bne.n	80086ba <prvAddCurrentTaskToDelayedList+0x3a>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d007      	beq.n	80086ba <prvAddCurrentTaskToDelayedList+0x3a>
 80086aa:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3304      	adds	r3, #4
 80086b0:	4619      	mov	r1, r3
 80086b2:	4819      	ldr	r0, [pc, #100]	; (8008718 <prvAddCurrentTaskToDelayedList+0x98>)
 80086b4:	f7fe fb09 	bl	8006cca <vListInsertEnd>
 80086b8:	e026      	b.n	8008708 <prvAddCurrentTaskToDelayedList+0x88>
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4413      	add	r3, r2
 80086c0:	60bb      	str	r3, [r7, #8]
 80086c2:	4b14      	ldr	r3, [pc, #80]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	605a      	str	r2, [r3, #4]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d209      	bcs.n	80086e6 <prvAddCurrentTaskToDelayedList+0x66>
 80086d2:	4b12      	ldr	r3, [pc, #72]	; (800871c <prvAddCurrentTaskToDelayedList+0x9c>)
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4b0f      	ldr	r3, [pc, #60]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3304      	adds	r3, #4
 80086dc:	4619      	mov	r1, r3
 80086de:	4610      	mov	r0, r2
 80086e0:	f7fe fb16 	bl	8006d10 <vListInsert>
 80086e4:	e010      	b.n	8008708 <prvAddCurrentTaskToDelayedList+0x88>
 80086e6:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4619      	mov	r1, r3
 80086f2:	4610      	mov	r0, r2
 80086f4:	f7fe fb0c 	bl	8006d10 <vListInsert>
 80086f8:	4b0a      	ldr	r3, [pc, #40]	; (8008724 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d202      	bcs.n	8008708 <prvAddCurrentTaskToDelayedList+0x88>
 8008702:	4a08      	ldr	r2, [pc, #32]	; (8008724 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	bf00      	nop
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000bc8 	.word	0x20000bc8
 8008714:	200006f0 	.word	0x200006f0
 8008718:	20000bb0 	.word	0x20000bb0
 800871c:	20000b80 	.word	0x20000b80
 8008720:	20000b7c 	.word	0x20000b7c
 8008724:	20000be4 	.word	0x20000be4

08008728 <xTimerCreateTimerTask>:
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af04      	add	r7, sp, #16
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	f000 fa69 	bl	8008c08 <prvCheckForValidListAndQueue>
 8008736:	4b15      	ldr	r3, [pc, #84]	; (800878c <xTimerCreateTimerTask+0x64>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d020      	beq.n	8008780 <xTimerCreateTimerTask+0x58>
 800873e:	2300      	movs	r3, #0
 8008740:	60bb      	str	r3, [r7, #8]
 8008742:	2300      	movs	r3, #0
 8008744:	607b      	str	r3, [r7, #4]
 8008746:	463a      	mov	r2, r7
 8008748:	1d39      	adds	r1, r7, #4
 800874a:	f107 0308 	add.w	r3, r7, #8
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fa76 	bl	8006c40 <vApplicationGetTimerTaskMemory>
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	9202      	str	r2, [sp, #8]
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	2302      	movs	r3, #2
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	2300      	movs	r3, #0
 8008764:	460a      	mov	r2, r1
 8008766:	490a      	ldr	r1, [pc, #40]	; (8008790 <xTimerCreateTimerTask+0x68>)
 8008768:	480a      	ldr	r0, [pc, #40]	; (8008794 <xTimerCreateTimerTask+0x6c>)
 800876a:	f7ff f8ff 	bl	800796c <xTaskCreateStatic>
 800876e:	4603      	mov	r3, r0
 8008770:	4a09      	ldr	r2, [pc, #36]	; (8008798 <xTimerCreateTimerTask+0x70>)
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	4b08      	ldr	r3, [pc, #32]	; (8008798 <xTimerCreateTimerTask+0x70>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <xTimerCreateTimerTask+0x58>
 800877c:	2301      	movs	r3, #1
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4618      	mov	r0, r3
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20000c20 	.word	0x20000c20
 8008790:	08009308 	.word	0x08009308
 8008794:	08008881 	.word	0x08008881
 8008798:	20000c24 	.word	0x20000c24

0800879c <xTimerGenericCommand>:
 800879c:	b580      	push	{r7, lr}
 800879e:	b08a      	sub	sp, #40	; 0x28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	603b      	str	r3, [r7, #0]
 80087aa:	2300      	movs	r3, #0
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
 80087ae:	4b1a      	ldr	r3, [pc, #104]	; (8008818 <xTimerGenericCommand+0x7c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d02a      	beq.n	800880c <xTimerGenericCommand+0x70>
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	617b      	str	r3, [r7, #20]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	61fb      	str	r3, [r7, #28]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2b05      	cmp	r3, #5
 80087c6:	dc18      	bgt.n	80087fa <xTimerGenericCommand+0x5e>
 80087c8:	f7ff fe08 	bl	80083dc <xTaskGetSchedulerState>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d109      	bne.n	80087e6 <xTimerGenericCommand+0x4a>
 80087d2:	4b11      	ldr	r3, [pc, #68]	; (8008818 <xTimerGenericCommand+0x7c>)
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	f107 0114 	add.w	r1, r7, #20
 80087da:	2300      	movs	r3, #0
 80087dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087de:	f7fe fbdb 	bl	8006f98 <xQueueGenericSend>
 80087e2:	6278      	str	r0, [r7, #36]	; 0x24
 80087e4:	e012      	b.n	800880c <xTimerGenericCommand+0x70>
 80087e6:	4b0c      	ldr	r3, [pc, #48]	; (8008818 <xTimerGenericCommand+0x7c>)
 80087e8:	6818      	ldr	r0, [r3, #0]
 80087ea:	f107 0114 	add.w	r1, r7, #20
 80087ee:	2300      	movs	r3, #0
 80087f0:	2200      	movs	r2, #0
 80087f2:	f7fe fbd1 	bl	8006f98 <xQueueGenericSend>
 80087f6:	6278      	str	r0, [r7, #36]	; 0x24
 80087f8:	e008      	b.n	800880c <xTimerGenericCommand+0x70>
 80087fa:	4b07      	ldr	r3, [pc, #28]	; (8008818 <xTimerGenericCommand+0x7c>)
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	f107 0114 	add.w	r1, r7, #20
 8008802:	2300      	movs	r3, #0
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	f7fe fc71 	bl	80070ec <xQueueGenericSendFromISR>
 800880a:	6278      	str	r0, [r7, #36]	; 0x24
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	4618      	mov	r0, r3
 8008810:	3728      	adds	r7, #40	; 0x28
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	20000c20 	.word	0x20000c20

0800881c <prvProcessExpiredTimer>:
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af02      	add	r7, sp, #8
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
 8008826:	4b15      	ldr	r3, [pc, #84]	; (800887c <prvProcessExpiredTimer+0x60>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3304      	adds	r3, #4
 8008834:	4618      	mov	r0, r3
 8008836:	f7fe faa3 	bl	8006d80 <uxListRemove>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d114      	bne.n	800886c <prvProcessExpiredTimer+0x50>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	699a      	ldr	r2, [r3, #24]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	18d1      	adds	r1, r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 f8ba 	bl	80089c8 <prvInsertTimerInActiveList>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d008      	beq.n	800886c <prvProcessExpiredTimer+0x50>
 800885a:	2300      	movs	r3, #0
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	2300      	movs	r3, #0
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	2100      	movs	r1, #0
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f7ff ff99 	bl	800879c <xTimerGenericCommand>
 800886a:	60b8      	str	r0, [r7, #8]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	4798      	blx	r3
 8008874:	bf00      	nop
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	20000c18 	.word	0x20000c18

08008880 <prvTimerTask>:
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	f107 0308 	add.w	r3, r7, #8
 800888c:	4618      	mov	r0, r3
 800888e:	f000 f857 	bl	8008940 <prvGetNextExpireTime>
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	4619      	mov	r1, r3
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 f803 	bl	80088a4 <prvProcessTimerOrBlockTask>
 800889e:	f000 f8d5 	bl	8008a4c <prvProcessReceivedCommands>
 80088a2:	e7f1      	b.n	8008888 <prvTimerTask+0x8>

080088a4 <prvProcessTimerOrBlockTask>:
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
 80088ae:	f7ff fa35 	bl	8007d1c <vTaskSuspendAll>
 80088b2:	f107 0308 	add.w	r3, r7, #8
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 f866 	bl	8008988 <prvSampleTimeNow>
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d130      	bne.n	8008926 <prvProcessTimerOrBlockTask+0x82>
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <prvProcessTimerOrBlockTask+0x3c>
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d806      	bhi.n	80088e0 <prvProcessTimerOrBlockTask+0x3c>
 80088d2:	f7ff fa31 	bl	8007d38 <xTaskResumeAll>
 80088d6:	68f9      	ldr	r1, [r7, #12]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff ff9f 	bl	800881c <prvProcessExpiredTimer>
 80088de:	e024      	b.n	800892a <prvProcessTimerOrBlockTask+0x86>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d008      	beq.n	80088f8 <prvProcessTimerOrBlockTask+0x54>
 80088e6:	4b13      	ldr	r3, [pc, #76]	; (8008934 <prvProcessTimerOrBlockTask+0x90>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	bf0c      	ite	eq
 80088f0:	2301      	moveq	r3, #1
 80088f2:	2300      	movne	r3, #0
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	603b      	str	r3, [r7, #0]
 80088f8:	4b0f      	ldr	r3, [pc, #60]	; (8008938 <prvProcessTimerOrBlockTask+0x94>)
 80088fa:	6818      	ldr	r0, [r3, #0]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	4619      	mov	r1, r3
 8008906:	f7fe fffd 	bl	8007904 <vQueueWaitForMessageRestricted>
 800890a:	f7ff fa15 	bl	8007d38 <xTaskResumeAll>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10a      	bne.n	800892a <prvProcessTimerOrBlockTask+0x86>
 8008914:	4b09      	ldr	r3, [pc, #36]	; (800893c <prvProcessTimerOrBlockTask+0x98>)
 8008916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	e001      	b.n	800892a <prvProcessTimerOrBlockTask+0x86>
 8008926:	f7ff fa07 	bl	8007d38 <xTaskResumeAll>
 800892a:	bf00      	nop
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20000c1c 	.word	0x20000c1c
 8008938:	20000c20 	.word	0x20000c20
 800893c:	e000ed04 	.word	0xe000ed04

08008940 <prvGetNextExpireTime>:
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <prvGetNextExpireTime+0x44>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	bf0c      	ite	eq
 8008952:	2301      	moveq	r3, #1
 8008954:	2300      	movne	r3, #0
 8008956:	b2db      	uxtb	r3, r3
 8008958:	461a      	mov	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d105      	bne.n	8008972 <prvGetNextExpireTime+0x32>
 8008966:	4b07      	ldr	r3, [pc, #28]	; (8008984 <prvGetNextExpireTime+0x44>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	e001      	b.n	8008976 <prvGetNextExpireTime+0x36>
 8008972:	2300      	movs	r3, #0
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	bc80      	pop	{r7}
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	20000c18 	.word	0x20000c18

08008988 <prvSampleTimeNow>:
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	f7ff fa60 	bl	8007e54 <xTaskGetTickCount>
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <prvSampleTimeNow+0x3c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	429a      	cmp	r2, r3
 800899e:	d205      	bcs.n	80089ac <prvSampleTimeNow+0x24>
 80089a0:	f000 f8de 	bl	8008b60 <prvSwitchTimerLists>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	e002      	b.n	80089b2 <prvSampleTimeNow+0x2a>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	4a04      	ldr	r2, [pc, #16]	; (80089c4 <prvSampleTimeNow+0x3c>)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20000c28 	.word	0x20000c28

080089c8 <prvInsertTimerInActiveList>:
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	603b      	str	r3, [r7, #0]
 80089d6:	2300      	movs	r3, #0
 80089d8:	617b      	str	r3, [r7, #20]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	605a      	str	r2, [r3, #4]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	611a      	str	r2, [r3, #16]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d812      	bhi.n	8008a14 <prvInsertTimerInActiveList+0x4c>
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	1ad2      	subs	r2, r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d302      	bcc.n	8008a02 <prvInsertTimerInActiveList+0x3a>
 80089fc:	2301      	movs	r3, #1
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	e01b      	b.n	8008a3a <prvInsertTimerInActiveList+0x72>
 8008a02:	4b10      	ldr	r3, [pc, #64]	; (8008a44 <prvInsertTimerInActiveList+0x7c>)
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	f7fe f97f 	bl	8006d10 <vListInsert>
 8008a12:	e012      	b.n	8008a3a <prvInsertTimerInActiveList+0x72>
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d206      	bcs.n	8008a2a <prvInsertTimerInActiveList+0x62>
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d302      	bcc.n	8008a2a <prvInsertTimerInActiveList+0x62>
 8008a24:	2301      	movs	r3, #1
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	e007      	b.n	8008a3a <prvInsertTimerInActiveList+0x72>
 8008a2a:	4b07      	ldr	r3, [pc, #28]	; (8008a48 <prvInsertTimerInActiveList+0x80>)
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4619      	mov	r1, r3
 8008a34:	4610      	mov	r0, r2
 8008a36:	f7fe f96b 	bl	8006d10 <vListInsert>
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	20000c1c 	.word	0x20000c1c
 8008a48:	20000c18 	.word	0x20000c18

08008a4c <prvProcessReceivedCommands>:
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08c      	sub	sp, #48	; 0x30
 8008a50:	af02      	add	r7, sp, #8
 8008a52:	e073      	b.n	8008b3c <prvProcessReceivedCommands+0xf0>
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	da0b      	bge.n	8008a72 <prvProcessReceivedCommands+0x26>
 8008a5a:	f107 0308 	add.w	r3, r7, #8
 8008a5e:	3304      	adds	r3, #4
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a68:	6850      	ldr	r0, [r2, #4]
 8008a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a6c:	6892      	ldr	r2, [r2, #8]
 8008a6e:	4611      	mov	r1, r2
 8008a70:	4798      	blx	r3
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	db60      	blt.n	8008b3a <prvProcessReceivedCommands+0xee>
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	623b      	str	r3, [r7, #32]
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d004      	beq.n	8008a8e <prvProcessReceivedCommands+0x42>
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	3304      	adds	r3, #4
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fe f979 	bl	8006d80 <uxListRemove>
 8008a8e:	1d3b      	adds	r3, r7, #4
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7ff ff79 	bl	8008988 <prvSampleTimeNow>
 8008a96:	61f8      	str	r0, [r7, #28]
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2b09      	cmp	r3, #9
 8008a9c:	d84e      	bhi.n	8008b3c <prvProcessReceivedCommands+0xf0>
 8008a9e:	a201      	add	r2, pc, #4	; (adr r2, 8008aa4 <prvProcessReceivedCommands+0x58>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008acd 	.word	0x08008acd
 8008aa8:	08008acd 	.word	0x08008acd
 8008aac:	08008acd 	.word	0x08008acd
 8008ab0:	08008b3d 	.word	0x08008b3d
 8008ab4:	08008b0f 	.word	0x08008b0f
 8008ab8:	08008b29 	.word	0x08008b29
 8008abc:	08008acd 	.word	0x08008acd
 8008ac0:	08008acd 	.word	0x08008acd
 8008ac4:	08008b3d 	.word	0x08008b3d
 8008ac8:	08008b0f 	.word	0x08008b0f
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	18d1      	adds	r1, r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	6a38      	ldr	r0, [r7, #32]
 8008ada:	f7ff ff75 	bl	80089c8 <prvInsertTimerInActiveList>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d02b      	beq.n	8008b3c <prvProcessReceivedCommands+0xf0>
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae8:	6a38      	ldr	r0, [r7, #32]
 8008aea:	4798      	blx	r3
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	69db      	ldr	r3, [r3, #28]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d123      	bne.n	8008b3c <prvProcessReceivedCommands+0xf0>
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	441a      	add	r2, r3
 8008afc:	2300      	movs	r3, #0
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	2300      	movs	r3, #0
 8008b02:	2100      	movs	r1, #0
 8008b04:	6a38      	ldr	r0, [r7, #32]
 8008b06:	f7ff fe49 	bl	800879c <xTimerGenericCommand>
 8008b0a:	61b8      	str	r0, [r7, #24]
 8008b0c:	e016      	b.n	8008b3c <prvProcessReceivedCommands+0xf0>
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	619a      	str	r2, [r3, #24]
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	699a      	ldr	r2, [r3, #24]
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	18d1      	adds	r1, r2, r3
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	69fa      	ldr	r2, [r7, #28]
 8008b20:	6a38      	ldr	r0, [r7, #32]
 8008b22:	f7ff ff51 	bl	80089c8 <prvInsertTimerInActiveList>
 8008b26:	e009      	b.n	8008b3c <prvProcessReceivedCommands+0xf0>
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d104      	bne.n	8008b3c <prvProcessReceivedCommands+0xf0>
 8008b32:	6a38      	ldr	r0, [r7, #32]
 8008b34:	f000 fa68 	bl	8009008 <vPortFree>
 8008b38:	e000      	b.n	8008b3c <prvProcessReceivedCommands+0xf0>
 8008b3a:	bf00      	nop
 8008b3c:	4b07      	ldr	r3, [pc, #28]	; (8008b5c <prvProcessReceivedCommands+0x110>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f107 0108 	add.w	r1, r7, #8
 8008b44:	2200      	movs	r2, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe fb7e 	bl	8007248 <xQueueReceive>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d180      	bne.n	8008a54 <prvProcessReceivedCommands+0x8>
 8008b52:	bf00      	nop
 8008b54:	bf00      	nop
 8008b56:	3728      	adds	r7, #40	; 0x28
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	20000c20 	.word	0x20000c20

08008b60 <prvSwitchTimerLists>:
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	e037      	b.n	8008bd8 <prvSwitchTimerLists+0x78>
 8008b68:	4b25      	ldr	r3, [pc, #148]	; (8008c00 <prvSwitchTimerLists+0xa0>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	613b      	str	r3, [r7, #16]
 8008b72:	4b23      	ldr	r3, [pc, #140]	; (8008c00 <prvSwitchTimerLists+0xa0>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fe f8fd 	bl	8006d80 <uxListRemove>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	4798      	blx	r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d120      	bne.n	8008bd8 <prvSwitchTimerLists+0x78>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	60bb      	str	r3, [r7, #8]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d90e      	bls.n	8008bc6 <prvSwitchTimerLists+0x66>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	605a      	str	r2, [r3, #4]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	611a      	str	r2, [r3, #16]
 8008bb4:	4b12      	ldr	r3, [pc, #72]	; (8008c00 <prvSwitchTimerLists+0xa0>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3304      	adds	r3, #4
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	f7fe f8a6 	bl	8006d10 <vListInsert>
 8008bc4:	e008      	b.n	8008bd8 <prvSwitchTimerLists+0x78>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	2100      	movs	r1, #0
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff fde3 	bl	800879c <xTimerGenericCommand>
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <prvSwitchTimerLists+0xa0>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1c2      	bne.n	8008b68 <prvSwitchTimerLists+0x8>
 8008be2:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <prvSwitchTimerLists+0xa0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	617b      	str	r3, [r7, #20]
 8008be8:	4b06      	ldr	r3, [pc, #24]	; (8008c04 <prvSwitchTimerLists+0xa4>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a04      	ldr	r2, [pc, #16]	; (8008c00 <prvSwitchTimerLists+0xa0>)
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	4a04      	ldr	r2, [pc, #16]	; (8008c04 <prvSwitchTimerLists+0xa4>)
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	bf00      	nop
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20000c18 	.word	0x20000c18
 8008c04:	20000c1c 	.word	0x20000c1c

08008c08 <prvCheckForValidListAndQueue>:
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af02      	add	r7, sp, #8
 8008c0e:	f000 f8cb 	bl	8008da8 <vPortEnterCritical>
 8008c12:	4b15      	ldr	r3, [pc, #84]	; (8008c68 <prvCheckForValidListAndQueue+0x60>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d120      	bne.n	8008c5c <prvCheckForValidListAndQueue+0x54>
 8008c1a:	4814      	ldr	r0, [pc, #80]	; (8008c6c <prvCheckForValidListAndQueue+0x64>)
 8008c1c:	f7fe f82a 	bl	8006c74 <vListInitialise>
 8008c20:	4813      	ldr	r0, [pc, #76]	; (8008c70 <prvCheckForValidListAndQueue+0x68>)
 8008c22:	f7fe f827 	bl	8006c74 <vListInitialise>
 8008c26:	4b13      	ldr	r3, [pc, #76]	; (8008c74 <prvCheckForValidListAndQueue+0x6c>)
 8008c28:	4a10      	ldr	r2, [pc, #64]	; (8008c6c <prvCheckForValidListAndQueue+0x64>)
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	4b12      	ldr	r3, [pc, #72]	; (8008c78 <prvCheckForValidListAndQueue+0x70>)
 8008c2e:	4a10      	ldr	r2, [pc, #64]	; (8008c70 <prvCheckForValidListAndQueue+0x68>)
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	2300      	movs	r3, #0
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	4b11      	ldr	r3, [pc, #68]	; (8008c7c <prvCheckForValidListAndQueue+0x74>)
 8008c38:	4a11      	ldr	r2, [pc, #68]	; (8008c80 <prvCheckForValidListAndQueue+0x78>)
 8008c3a:	2110      	movs	r1, #16
 8008c3c:	200a      	movs	r0, #10
 8008c3e:	f7fe f923 	bl	8006e88 <xQueueGenericCreateStatic>
 8008c42:	4603      	mov	r3, r0
 8008c44:	4a08      	ldr	r2, [pc, #32]	; (8008c68 <prvCheckForValidListAndQueue+0x60>)
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	4b07      	ldr	r3, [pc, #28]	; (8008c68 <prvCheckForValidListAndQueue+0x60>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d005      	beq.n	8008c5c <prvCheckForValidListAndQueue+0x54>
 8008c50:	4b05      	ldr	r3, [pc, #20]	; (8008c68 <prvCheckForValidListAndQueue+0x60>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	490b      	ldr	r1, [pc, #44]	; (8008c84 <prvCheckForValidListAndQueue+0x7c>)
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fe fe2c 	bl	80078b4 <vQueueAddToRegistry>
 8008c5c:	f000 f8be 	bl	8008ddc <vPortExitCritical>
 8008c60:	bf00      	nop
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20000c20 	.word	0x20000c20
 8008c6c:	20000bf0 	.word	0x20000bf0
 8008c70:	20000c04 	.word	0x20000c04
 8008c74:	20000c18 	.word	0x20000c18
 8008c78:	20000c1c 	.word	0x20000c1c
 8008c7c:	20000ccc 	.word	0x20000ccc
 8008c80:	20000c2c 	.word	0x20000c2c
 8008c84:	08009310 	.word	0x08009310

08008c88 <pxPortInitialiseStack>:
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3b04      	subs	r3, #4
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3b04      	subs	r3, #4
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f023 0201 	bic.w	r2, r3, #1
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3b04      	subs	r3, #4
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	4a08      	ldr	r2, [pc, #32]	; (8008cdc <pxPortInitialiseStack+0x54>)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3b14      	subs	r3, #20
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	601a      	str	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3b20      	subs	r3, #32
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bc80      	pop	{r7}
 8008cda:	4770      	bx	lr
 8008cdc:	08008ce1 	.word	0x08008ce1

08008ce0 <prvTaskExitError>:
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	603b      	str	r3, [r7, #0]
 8008cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	607b      	str	r3, [r7, #4]
 8008cfc:	bf00      	nop
 8008cfe:	bf00      	nop
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0fc      	beq.n	8008d00 <prvTaskExitError+0x20>
 8008d06:	bf00      	nop
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bc80      	pop	{r7}
 8008d10:	4770      	bx	lr
	...

08008d20 <SVC_Handler>:
 8008d20:	4b07      	ldr	r3, [pc, #28]	; (8008d40 <pxCurrentTCBConst2>)
 8008d22:	6819      	ldr	r1, [r3, #0]
 8008d24:	6808      	ldr	r0, [r1, #0]
 8008d26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008d2a:	f380 8809 	msr	PSP, r0
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f04f 0000 	mov.w	r0, #0
 8008d36:	f380 8811 	msr	BASEPRI, r0
 8008d3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008d3e:	4770      	bx	lr

08008d40 <pxCurrentTCBConst2>:
 8008d40:	200006f0 	.word	0x200006f0
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop

08008d48 <prvPortStartFirstTask>:
 8008d48:	4806      	ldr	r0, [pc, #24]	; (8008d64 <prvPortStartFirstTask+0x1c>)
 8008d4a:	6800      	ldr	r0, [r0, #0]
 8008d4c:	6800      	ldr	r0, [r0, #0]
 8008d4e:	f380 8808 	msr	MSP, r0
 8008d52:	b662      	cpsie	i
 8008d54:	b661      	cpsie	f
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	df00      	svc	0
 8008d60:	bf00      	nop
 8008d62:	bf00      	nop
 8008d64:	e000ed08 	.word	0xe000ed08

08008d68 <xPortStartScheduler>:
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <xPortStartScheduler+0x38>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a0b      	ldr	r2, [pc, #44]	; (8008da0 <xPortStartScheduler+0x38>)
 8008d72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <xPortStartScheduler+0x38>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a08      	ldr	r2, [pc, #32]	; (8008da0 <xPortStartScheduler+0x38>)
 8008d7e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	f000 f88a 	bl	8008e9c <vPortSetupTimerInterrupt>
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <xPortStartScheduler+0x3c>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	f7ff ffdb 	bl	8008d48 <prvPortStartFirstTask>
 8008d92:	f7ff f91b 	bl	8007fcc <vTaskSwitchContext>
 8008d96:	f7ff ffa3 	bl	8008ce0 <prvTaskExitError>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	e000ed20 	.word	0xe000ed20
 8008da4:	2000000c 	.word	0x2000000c

08008da8 <vPortEnterCritical>:
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	607b      	str	r3, [r7, #4]
 8008dc0:	bf00      	nop
 8008dc2:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <vPortEnterCritical+0x30>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	4a03      	ldr	r2, [pc, #12]	; (8008dd8 <vPortEnterCritical+0x30>)
 8008dca:	6013      	str	r3, [r2, #0]
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bc80      	pop	{r7}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	2000000c 	.word	0x2000000c

08008ddc <vPortExitCritical>:
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <vPortExitCritical+0x30>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3b01      	subs	r3, #1
 8008de8:	4a08      	ldr	r2, [pc, #32]	; (8008e0c <vPortExitCritical+0x30>)
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	4b07      	ldr	r3, [pc, #28]	; (8008e0c <vPortExitCritical+0x30>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d105      	bne.n	8008e00 <vPortExitCritical+0x24>
 8008df4:	2300      	movs	r3, #0
 8008df6:	607b      	str	r3, [r7, #4]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	bf00      	nop
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bc80      	pop	{r7}
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	2000000c 	.word	0x2000000c

08008e10 <PendSV_Handler>:
 8008e10:	f3ef 8009 	mrs	r0, PSP
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	4b0d      	ldr	r3, [pc, #52]	; (8008e50 <pxCurrentTCBConst>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e20:	6010      	str	r0, [r2, #0]
 8008e22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008e26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e2a:	f380 8811 	msr	BASEPRI, r0
 8008e2e:	f7ff f8cd 	bl	8007fcc <vTaskSwitchContext>
 8008e32:	f04f 0000 	mov.w	r0, #0
 8008e36:	f380 8811 	msr	BASEPRI, r0
 8008e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008e3e:	6819      	ldr	r1, [r3, #0]
 8008e40:	6808      	ldr	r0, [r1, #0]
 8008e42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e46:	f380 8809 	msr	PSP, r0
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	4770      	bx	lr

08008e50 <pxCurrentTCBConst>:
 8008e50:	200006f0 	.word	0x200006f0
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop

08008e58 <xPortSysTickHandler>:
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
 8008e70:	bf00      	nop
 8008e72:	f7fe fffd 	bl	8007e70 <xTaskIncrementTick>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <xPortSysTickHandler+0x2c>
 8008e7c:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <xPortSysTickHandler+0x40>)
 8008e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	2300      	movs	r3, #0
 8008e86:	603b      	str	r3, [r7, #0]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	bf00      	nop
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	e000ed04 	.word	0xe000ed04

08008e9c <vPortSetupTimerInterrupt>:
 8008e9c:	b480      	push	{r7}
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <vPortSetupTimerInterrupt+0x30>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <vPortSetupTimerInterrupt+0x34>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <vPortSetupTimerInterrupt+0x38>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a09      	ldr	r2, [pc, #36]	; (8008ed8 <vPortSetupTimerInterrupt+0x3c>)
 8008eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb6:	099b      	lsrs	r3, r3, #6
 8008eb8:	4a08      	ldr	r2, [pc, #32]	; (8008edc <vPortSetupTimerInterrupt+0x40>)
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	4b03      	ldr	r3, [pc, #12]	; (8008ecc <vPortSetupTimerInterrupt+0x30>)
 8008ec0:	2207      	movs	r2, #7
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	bf00      	nop
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr
 8008ecc:	e000e010 	.word	0xe000e010
 8008ed0:	e000e018 	.word	0xe000e018
 8008ed4:	20000000 	.word	0x20000000
 8008ed8:	10624dd3 	.word	0x10624dd3
 8008edc:	e000e014 	.word	0xe000e014

08008ee0 <pvPortMalloc>:
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	f7fe ff16 	bl	8007d1c <vTaskSuspendAll>
 8008ef0:	4b40      	ldr	r3, [pc, #256]	; (8008ff4 <pvPortMalloc+0x114>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <pvPortMalloc+0x1c>
 8008ef8:	f000 f8c0 	bl	800907c <prvHeapInit>
 8008efc:	4b3e      	ldr	r3, [pc, #248]	; (8008ff8 <pvPortMalloc+0x118>)
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4013      	ands	r3, r2
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d16d      	bne.n	8008fe4 <pvPortMalloc+0x104>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00d      	beq.n	8008f2a <pvPortMalloc+0x4a>
 8008f0e:	2208      	movs	r2, #8
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4413      	add	r3, r2
 8008f14:	607b      	str	r3, [r7, #4]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f003 0307 	and.w	r3, r3, #7
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <pvPortMalloc+0x4a>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f023 0307 	bic.w	r3, r3, #7
 8008f26:	3308      	adds	r3, #8
 8008f28:	607b      	str	r3, [r7, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d059      	beq.n	8008fe4 <pvPortMalloc+0x104>
 8008f30:	4b32      	ldr	r3, [pc, #200]	; (8008ffc <pvPortMalloc+0x11c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d854      	bhi.n	8008fe4 <pvPortMalloc+0x104>
 8008f3a:	4b31      	ldr	r3, [pc, #196]	; (8009000 <pvPortMalloc+0x120>)
 8008f3c:	613b      	str	r3, [r7, #16]
 8008f3e:	4b30      	ldr	r3, [pc, #192]	; (8009000 <pvPortMalloc+0x120>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	617b      	str	r3, [r7, #20]
 8008f44:	e004      	b.n	8008f50 <pvPortMalloc+0x70>
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	613b      	str	r3, [r7, #16]
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d903      	bls.n	8008f62 <pvPortMalloc+0x82>
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1f1      	bne.n	8008f46 <pvPortMalloc+0x66>
 8008f62:	4b24      	ldr	r3, [pc, #144]	; (8008ff4 <pvPortMalloc+0x114>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d03b      	beq.n	8008fe4 <pvPortMalloc+0x104>
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2208      	movs	r2, #8
 8008f72:	4413      	add	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	1ad2      	subs	r2, r2, r3
 8008f86:	2308      	movs	r3, #8
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d90f      	bls.n	8008fae <pvPortMalloc+0xce>
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4413      	add	r3, r2
 8008f94:	60bb      	str	r3, [r7, #8]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	1ad2      	subs	r2, r2, r3
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	605a      	str	r2, [r3, #4]
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	605a      	str	r2, [r3, #4]
 8008fa8:	68b8      	ldr	r0, [r7, #8]
 8008faa:	f000 f8c9 	bl	8009140 <prvInsertBlockIntoFreeList>
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <pvPortMalloc+0x11c>)
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	4a10      	ldr	r2, [pc, #64]	; (8008ffc <pvPortMalloc+0x11c>)
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <pvPortMalloc+0x11c>)
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	4b10      	ldr	r3, [pc, #64]	; (8009004 <pvPortMalloc+0x124>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d203      	bcs.n	8008fd0 <pvPortMalloc+0xf0>
 8008fc8:	4b0c      	ldr	r3, [pc, #48]	; (8008ffc <pvPortMalloc+0x11c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a0d      	ldr	r2, [pc, #52]	; (8009004 <pvPortMalloc+0x124>)
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	4b08      	ldr	r3, [pc, #32]	; (8008ff8 <pvPortMalloc+0x118>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	605a      	str	r2, [r3, #4]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	f7fe fea8 	bl	8007d38 <xTaskResumeAll>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4618      	mov	r0, r3
 8008fec:	3718      	adds	r7, #24
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	20003d24 	.word	0x20003d24
 8008ff8:	20003d30 	.word	0x20003d30
 8008ffc:	20003d28 	.word	0x20003d28
 8009000:	20003d1c 	.word	0x20003d1c
 8009004:	20003d2c 	.word	0x20003d2c

08009008 <vPortFree>:
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	60fb      	str	r3, [r7, #12]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d027      	beq.n	800906a <vPortFree+0x62>
 800901a:	2308      	movs	r3, #8
 800901c:	425b      	negs	r3, r3
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	4413      	add	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	60bb      	str	r3, [r7, #8]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	4b11      	ldr	r3, [pc, #68]	; (8009074 <vPortFree+0x6c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4013      	ands	r3, r2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d019      	beq.n	800906a <vPortFree+0x62>
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d115      	bne.n	800906a <vPortFree+0x62>
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <vPortFree+0x6c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	43db      	mvns	r3, r3
 8009048:	401a      	ands	r2, r3
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	605a      	str	r2, [r3, #4]
 800904e:	f7fe fe65 	bl	8007d1c <vTaskSuspendAll>
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	4b08      	ldr	r3, [pc, #32]	; (8009078 <vPortFree+0x70>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4413      	add	r3, r2
 800905c:	4a06      	ldr	r2, [pc, #24]	; (8009078 <vPortFree+0x70>)
 800905e:	6013      	str	r3, [r2, #0]
 8009060:	68b8      	ldr	r0, [r7, #8]
 8009062:	f000 f86d 	bl	8009140 <prvInsertBlockIntoFreeList>
 8009066:	f7fe fe67 	bl	8007d38 <xTaskResumeAll>
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20003d30 	.word	0x20003d30
 8009078:	20003d28 	.word	0x20003d28

0800907c <prvHeapInit>:
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009086:	60bb      	str	r3, [r7, #8]
 8009088:	4b27      	ldr	r3, [pc, #156]	; (8009128 <prvHeapInit+0xac>)
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00c      	beq.n	80090b0 <prvHeapInit+0x34>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3307      	adds	r3, #7
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f023 0307 	bic.w	r3, r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	4a1f      	ldr	r2, [pc, #124]	; (8009128 <prvHeapInit+0xac>)
 80090ac:	4413      	add	r3, r2
 80090ae:	60bb      	str	r3, [r7, #8]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	607b      	str	r3, [r7, #4]
 80090b4:	4a1d      	ldr	r2, [pc, #116]	; (800912c <prvHeapInit+0xb0>)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6013      	str	r3, [r2, #0]
 80090ba:	4b1c      	ldr	r3, [pc, #112]	; (800912c <prvHeapInit+0xb0>)
 80090bc:	2200      	movs	r2, #0
 80090be:	605a      	str	r2, [r3, #4]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	4413      	add	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	2208      	movs	r2, #8
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	1a9b      	subs	r3, r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 0307 	bic.w	r3, r3, #7
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4a15      	ldr	r2, [pc, #84]	; (8009130 <prvHeapInit+0xb4>)
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	4b14      	ldr	r3, [pc, #80]	; (8009130 <prvHeapInit+0xb4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2200      	movs	r2, #0
 80090e4:	605a      	str	r2, [r3, #4]
 80090e6:	4b12      	ldr	r3, [pc, #72]	; (8009130 <prvHeapInit+0xb4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	603b      	str	r3, [r7, #0]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	605a      	str	r2, [r3, #4]
 80090fc:	4b0c      	ldr	r3, [pc, #48]	; (8009130 <prvHeapInit+0xb4>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	4a0a      	ldr	r2, [pc, #40]	; (8009134 <prvHeapInit+0xb8>)
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a09      	ldr	r2, [pc, #36]	; (8009138 <prvHeapInit+0xbc>)
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	4b09      	ldr	r3, [pc, #36]	; (800913c <prvHeapInit+0xc0>)
 8009116:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	bf00      	nop
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	bc80      	pop	{r7}
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	20000d1c 	.word	0x20000d1c
 800912c:	20003d1c 	.word	0x20003d1c
 8009130:	20003d24 	.word	0x20003d24
 8009134:	20003d2c 	.word	0x20003d2c
 8009138:	20003d28 	.word	0x20003d28
 800913c:	20003d30 	.word	0x20003d30

08009140 <prvInsertBlockIntoFreeList>:
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	4b27      	ldr	r3, [pc, #156]	; (80091e8 <prvInsertBlockIntoFreeList+0xa8>)
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	e002      	b.n	8009154 <prvInsertBlockIntoFreeList+0x14>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	429a      	cmp	r2, r3
 800915c:	d8f7      	bhi.n	800914e <prvInsertBlockIntoFreeList+0xe>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	60bb      	str	r3, [r7, #8]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	4413      	add	r3, r2
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	429a      	cmp	r2, r3
 800916e:	d108      	bne.n	8009182 <prvInsertBlockIntoFreeList+0x42>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	441a      	add	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	605a      	str	r2, [r3, #4]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	607b      	str	r3, [r7, #4]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	60bb      	str	r3, [r7, #8]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	441a      	add	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	429a      	cmp	r2, r3
 8009194:	d118      	bne.n	80091c8 <prvInsertBlockIntoFreeList+0x88>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	4b14      	ldr	r3, [pc, #80]	; (80091ec <prvInsertBlockIntoFreeList+0xac>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d00d      	beq.n	80091be <prvInsertBlockIntoFreeList+0x7e>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	441a      	add	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	605a      	str	r2, [r3, #4]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	e008      	b.n	80091d0 <prvInsertBlockIntoFreeList+0x90>
 80091be:	4b0b      	ldr	r3, [pc, #44]	; (80091ec <prvInsertBlockIntoFreeList+0xac>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	e003      	b.n	80091d0 <prvInsertBlockIntoFreeList+0x90>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d002      	beq.n	80091de <prvInsertBlockIntoFreeList+0x9e>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	bf00      	nop
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bc80      	pop	{r7}
 80091e6:	4770      	bx	lr
 80091e8:	20003d1c 	.word	0x20003d1c
 80091ec:	20003d24 	.word	0x20003d24

080091f0 <__libc_init_array>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	2600      	movs	r6, #0
 80091f4:	4d0c      	ldr	r5, [pc, #48]	; (8009228 <__libc_init_array+0x38>)
 80091f6:	4c0d      	ldr	r4, [pc, #52]	; (800922c <__libc_init_array+0x3c>)
 80091f8:	1b64      	subs	r4, r4, r5
 80091fa:	10a4      	asrs	r4, r4, #2
 80091fc:	42a6      	cmp	r6, r4
 80091fe:	d109      	bne.n	8009214 <__libc_init_array+0x24>
 8009200:	f000 f830 	bl	8009264 <_init>
 8009204:	2600      	movs	r6, #0
 8009206:	4d0a      	ldr	r5, [pc, #40]	; (8009230 <__libc_init_array+0x40>)
 8009208:	4c0a      	ldr	r4, [pc, #40]	; (8009234 <__libc_init_array+0x44>)
 800920a:	1b64      	subs	r4, r4, r5
 800920c:	10a4      	asrs	r4, r4, #2
 800920e:	42a6      	cmp	r6, r4
 8009210:	d105      	bne.n	800921e <__libc_init_array+0x2e>
 8009212:	bd70      	pop	{r4, r5, r6, pc}
 8009214:	f855 3b04 	ldr.w	r3, [r5], #4
 8009218:	4798      	blx	r3
 800921a:	3601      	adds	r6, #1
 800921c:	e7ee      	b.n	80091fc <__libc_init_array+0xc>
 800921e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009222:	4798      	blx	r3
 8009224:	3601      	adds	r6, #1
 8009226:	e7f2      	b.n	800920e <__libc_init_array+0x1e>
 8009228:	08009364 	.word	0x08009364
 800922c:	08009364 	.word	0x08009364
 8009230:	08009364 	.word	0x08009364
 8009234:	08009368 	.word	0x08009368

08009238 <memcpy>:
 8009238:	440a      	add	r2, r1
 800923a:	4291      	cmp	r1, r2
 800923c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009240:	d100      	bne.n	8009244 <memcpy+0xc>
 8009242:	4770      	bx	lr
 8009244:	b510      	push	{r4, lr}
 8009246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800924a:	4291      	cmp	r1, r2
 800924c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009250:	d1f9      	bne.n	8009246 <memcpy+0xe>
 8009252:	bd10      	pop	{r4, pc}

08009254 <memset>:
 8009254:	4603      	mov	r3, r0
 8009256:	4402      	add	r2, r0
 8009258:	4293      	cmp	r3, r2
 800925a:	d100      	bne.n	800925e <memset+0xa>
 800925c:	4770      	bx	lr
 800925e:	f803 1b01 	strb.w	r1, [r3], #1
 8009262:	e7f9      	b.n	8009258 <memset+0x4>

08009264 <_init>:
 8009264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009266:	bf00      	nop
 8009268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800926a:	bc08      	pop	{r3}
 800926c:	469e      	mov	lr, r3
 800926e:	4770      	bx	lr

08009270 <_fini>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr
