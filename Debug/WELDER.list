
WELDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000971c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800990c  0800990c  0001990c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f4  080099f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080099f4  080099f4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099f4  080099f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099f8  080099f8  000199f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080099fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ec8  20000010  08009a0c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20003ed8  08009a0c  00023ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be7d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d5d  00000000  00000000  0003beb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003fc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  000411e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8e6  00000000  00000000  00042610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c14  00000000  00000000  0005def6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a27a9  00000000  00000000  00076b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001192b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae0  00000000  00000000  00119308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	080098f4 	.word	0x080098f4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	080098f4 	.word	0x080098f4

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <MicrostepDriver_Ini>:
#include  "MicrostepDriver.h"


void MicrostepDriver_Ini(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
    htim3.Init.Prescaler = 7199; // Предделитель таймера 3
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a12:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000a16:	605a      	str	r2, [r3, #4]
    htim3.Init.Period = 10000; // Период ШИМа
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a1e:	60da      	str	r2, [r3, #12]
    TIM3->CCR1 = 5000; // Длительность импульса
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <MicrostepDriver_Ini+0x2c>)
 8000a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a26:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_Base_Init(&htim3);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a2a:	f005 fb7b 	bl	8006124 <HAL_TIM_Base_Init>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20003dd4 	.word	0x20003dd4
 8000a38:	40000400 	.word	0x40000400

08000a3c <MicrostepDriver_Run>:


void MicrostepDriver_Run (uint16_t freq, uint8_t dir, GPIO_TypeDef *EN1_Port, uint16_t EN1_Pin, GPIO_TypeDef *DIR1_Port, uint16_t DIR1_Pin, uint32_t PWM_Channel)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60ba      	str	r2, [r7, #8]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4603      	mov	r3, r0
 8000a48:	81fb      	strh	r3, [r7, #14]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	737b      	strb	r3, [r7, #13]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	80fb      	strh	r3, [r7, #6]
	if (freq != 0)
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d024      	beq.n	8000aa2 <MicrostepDriver_Run+0x66>
	{

	htim3.Init.Period = (htim3.Init.Prescaler /  freq) / MICRO_STEP_DEV; // Расчет периода следования импульсов
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a66:	60d3      	str	r3, [r2, #12]
	TIM3->CCR1 = htim3.Init.Period / 2; // Расчет коэффицента заполнения
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MicrostepDriver_Run+0x7c>)
 8000a6e:	085b      	lsrs	r3, r3, #1
 8000a70:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_TIM_Base_Init(&htim3);
 8000a72:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a74:	f005 fb56 	bl	8006124 <HAL_TIM_Base_Init>

	if (dir == 0) // Направление вращения
 8000a78:	7b7b      	ldrb	r3, [r7, #13]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d106      	bne.n	8000a8c <MicrostepDriver_Run+0x50>
	{
		HAL_GPIO_WritePin(DIR1_Port, DIR1_Pin, GPIO_PIN_RESET);
 8000a7e:	8bbb      	ldrh	r3, [r7, #28]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	69b8      	ldr	r0, [r7, #24]
 8000a86:	f004 f8c4 	bl	8004c12 <HAL_GPIO_WritePin>
 8000a8a:	e005      	b.n	8000a98 <MicrostepDriver_Run+0x5c>

	}
	else
	{
		HAL_GPIO_WritePin(DIR1_Port, DIR1_Pin, GPIO_PIN_SET);
 8000a8c:	8bbb      	ldrh	r3, [r7, #28]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4619      	mov	r1, r3
 8000a92:	69b8      	ldr	r0, [r7, #24]
 8000a94:	f004 f8bd 	bl	8004c12 <HAL_GPIO_WritePin>
	}


	HAL_TIM_PWM_Start(&htim3, PWM_Channel); // Начало генерации ШИМ сигнала
 8000a98:	6a39      	ldr	r1, [r7, #32]
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a9c:	f005 fbea 	bl	8006274 <HAL_TIM_PWM_Start>
	else // Если частота задана как 0, то останов ШД
	{
		HAL_TIM_PWM_Stop(&htim3, PWM_Channel);
	}

}
 8000aa0:	e003      	b.n	8000aaa <MicrostepDriver_Run+0x6e>
		HAL_TIM_PWM_Stop(&htim3, PWM_Channel);
 8000aa2:	6a39      	ldr	r1, [r7, #32]
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000aa6:	f005 fc9f 	bl	80063e8 <HAL_TIM_PWM_Stop>
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20003dd4 	.word	0x20003dd4
 8000ab8:	40000400 	.word	0x40000400

08000abc <IndicatorPanel_Ini>:
#include "PCB_WELDER.h"

void IndicatorPanel_Ini (void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	STLED316S_Ini(oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); // Индикатор "ВЛЕВО"
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <IndicatorPanel_Ini+0x28>)
 8000ac4:	f000 fc7e 	bl	80013c4 <STLED316S_Ini>
	STLED316S_Ini(oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin); // Индикатор "ВПРАВО"
 8000ac8:	2120      	movs	r1, #32
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <IndicatorPanel_Ini+0x28>)
 8000acc:	f000 fc7a 	bl	80013c4 <STLED316S_Ini>
	STLED316S_Ini(oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin); // Индикаторы "СКОРОСТЬ" (ст. 3 разряда) и "ПРОГРАММА" (мл. 3 разряда)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <IndicatorPanel_Ini+0x2c>)
 8000ad4:	f000 fc76 	bl	80013c4 <STLED316S_Ini>
  //STLED316S_Ini(oSTLED316S_STB4_GPIO_Port, oSTLED316S_STB4_Pin); // Микросхема не установлена, резерв
	STLED316S_Ini(oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin); // Индикаторы "ЗАДЕРЖКА" (слева, ст. 2 разряда) "ЗАДЕРЖКА" (справа, 2 и 3  разряды драйвера)
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <IndicatorPanel_Ini+0x30>)
 8000adc:	f000 fc72 	bl	80013c4 <STLED316S_Ini>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	40010800 	.word	0x40010800

08000af0 <IndicatorPanel_SetValue>:

void IndicatorPanel_SetValue (IndicatorValues *IndicatorPanel0)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]
	uint8_t num;

	uint8_t LEDsOut;

	LEDsOut = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	737b      	strb	r3, [r7, #13]

	for(uint8_t i = 0; i < 6; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e006      	b.n	8000b10 <IndicatorPanel_SetValue+0x20>
	{
	    STLED_digVal[i] = 0;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	4a5b      	ldr	r2, [pc, #364]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 6; i++)
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b05      	cmp	r3, #5
 8000b14:	d9f5      	bls.n	8000b02 <IndicatorPanel_SetValue+0x12>
	}

	//uint8_t gg = 11;

	// Индикатор "ВЛЕВО"
	num = separate(IndicatorPanel0->Xs,  &STLED_digVal[0]);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	4956      	ldr	r1, [pc, #344]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f8e9 	bl	8000cf4 <separate>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_4dig(num, STLED_digVal);
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	4952      	ldr	r1, [pc, #328]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f926 	bl	8000d7c <IndicatorPanel_offset_4dig>
	STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin);
 8000b30:	2310      	movs	r3, #16
 8000b32:	4a51      	ldr	r2, [pc, #324]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000b34:	2104      	movs	r1, #4
 8000b36:	484f      	ldr	r0, [pc, #316]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b38:	f000 fc78 	bl	800142c <STLED316S_OutData>

	// Индикатор "ВПРАВО"
	num = separate(IndicatorPanel0->Xf,  &STLED_digVal[0]);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	885b      	ldrh	r3, [r3, #2]
 8000b40:	494c      	ldr	r1, [pc, #304]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f8d6 	bl	8000cf4 <separate>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_4dig(num, STLED_digVal);
 8000b4c:	7bbb      	ldrb	r3, [r7, #14]
 8000b4e:	4949      	ldr	r1, [pc, #292]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f913 	bl	8000d7c <IndicatorPanel_offset_4dig>
	STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin);
 8000b56:	2320      	movs	r3, #32
 8000b58:	4a47      	ldr	r2, [pc, #284]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	4845      	ldr	r0, [pc, #276]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b5e:	f000 fc65 	bl	800142c <STLED316S_OutData>

	// Вывод пред и пост задержки
	num = separate(IndicatorPanel0->Delay_s, &STLED_digVal[0]);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	791b      	ldrb	r3, [r3, #4]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4942      	ldr	r1, [pc, #264]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f8c2 	bl	8000cf4 <separate>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73bb      	strb	r3, [r7, #14]
	//IndicatorPanel_offset_2dig(num, &STLED_digVal[0]);
	num = separate(IndicatorPanel0->Delay_f, &STLED_digVal[2]);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4940      	ldr	r1, [pc, #256]	; (8000c7c <IndicatorPanel_SetValue+0x18c>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f8b9 	bl	8000cf4 <separate>
 8000b82:	4603      	mov	r3, r0
 8000b84:	73bb      	strb	r3, [r7, #14]
	//IndicatorPanel_offset_2dig(num, &STLED_digVal[2]);
	//STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);

	STLED316S_Single_Out(&STLED_digVal[0], 6, 1, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2106      	movs	r1, #6
 8000b90:	4838      	ldr	r0, [pc, #224]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b92:	f000 fca9 	bl	80014e8 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[1], 5, 0, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000b96:	2340      	movs	r3, #64	; 0x40
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2105      	movs	r1, #5
 8000ba0:	4838      	ldr	r0, [pc, #224]	; (8000c84 <IndicatorPanel_SetValue+0x194>)
 8000ba2:	f000 fca1 	bl	80014e8 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[2], 4, 1, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000ba6:	2340      	movs	r3, #64	; 0x40
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4832      	ldr	r0, [pc, #200]	; (8000c7c <IndicatorPanel_SetValue+0x18c>)
 8000bb2:	f000 fc99 	bl	80014e8 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[3], 3, 0, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2103      	movs	r1, #3
 8000bc0:	4831      	ldr	r0, [pc, #196]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000bc2:	f000 fc91 	bl	80014e8 <STLED316S_Single_Out>


	// Индикаторы "СКОРОСТЬ" (ст. 3 разряда) и "ПРОГРАММА" (мл. 3 разряда)
	num = separate(IndicatorPanel0->Speed, &STLED_digVal[0]);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	88db      	ldrh	r3, [r3, #6]
 8000bca:	492a      	ldr	r1, [pc, #168]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f891 	bl	8000cf4 <separate>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_3dig(num, &STLED_digVal[0]);
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	4926      	ldr	r1, [pc, #152]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f920 	bl	8000e20 <IndicatorPanel_offset_3dig>

	num = separate(IndicatorPanel0->Program, &STLED_digVal[3]);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	891b      	ldrh	r3, [r3, #8]
 8000be4:	4928      	ldr	r1, [pc, #160]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f884 	bl	8000cf4 <separate>
 8000bec:	4603      	mov	r3, r0
 8000bee:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_3dig(num, &STLED_digVal[3]);
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	4925      	ldr	r1, [pc, #148]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f913 	bl	8000e20 <IndicatorPanel_offset_3dig>
	STLED316S_OutData(STLED_digVal, 6, oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <IndicatorPanel_SetValue+0x19c>)
 8000bfe:	2106      	movs	r1, #6
 8000c00:	481c      	ldr	r0, [pc, #112]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000c02:	f000 fc13 	bl	800142c <STLED316S_OutData>


	if((IndicatorPanel0->LEDsState & LED_AUTO) == LED_AUTO)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7bdb      	ldrb	r3, [r3, #15]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <IndicatorPanel_SetValue+0x12c>
	{
		LEDsOut |= 0x10;
 8000c12:	7b7b      	ldrb	r3, [r7, #13]
 8000c14:	f043 0310 	orr.w	r3, r3, #16
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_PARKING) == LED_PARKING)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7bdb      	ldrb	r3, [r3, #15]
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <IndicatorPanel_SetValue+0x142>
	{
		LEDsOut |= 0x20;
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	f043 0320 	orr.w	r3, r3, #32
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_DOWN) == LED_DOWN)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7bdb      	ldrb	r3, [r3, #15]
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d004      	beq.n	8000c48 <IndicatorPanel_SetValue+0x158>
	{
		LEDsOut |= 0x40;
 8000c3e:	7b7b      	ldrb	r3, [r7, #13]
 8000c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_UP) == LED_UP)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7bdb      	ldrb	r3, [r3, #15]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d004      	beq.n	8000c5e <IndicatorPanel_SetValue+0x16e>
	{
		LEDsOut |= 0x80;
 8000c54:	7b7b      	ldrb	r3, [r7, #13]
 8000c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	737b      	strb	r3, [r7, #13]
	}

	// Вывод состояния светодиодов
	STLED316S_Direct_Single_Out(&LEDsOut, 2, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора
 8000c5e:	f107 000d 	add.w	r0, r7, #13
 8000c62:	2310      	movs	r3, #16
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000c66:	2102      	movs	r1, #2
 8000c68:	f000 fca0 	bl	80015ac <STLED316S_Direct_Single_Out>
}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20003dc8 	.word	0x20003dc8
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	20003dca 	.word	0x20003dca
 8000c80:	40010800 	.word	0x40010800
 8000c84:	20003dc9 	.word	0x20003dc9
 8000c88:	20003dcb 	.word	0x20003dcb
 8000c8c:	40010c00 	.word	0x40010c00

08000c90 <IndicatorPanel_SetBrightness>:
	STLED316S_Direct_Single_Out(&LEDsOut, 2, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора

}

void IndicatorPanel_SetBrightness (IndicatorValues *IndicatorPanel0)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if (IndicatorPanel0->Brightness > 7)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7a9b      	ldrb	r3, [r3, #10]
 8000c9c:	2b07      	cmp	r3, #7
 8000c9e:	d902      	bls.n	8000ca6 <IndicatorPanel_SetBrightness+0x16>
	{
		IndicatorPanel0->Brightness = 7;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	729a      	strb	r2, [r3, #10]
	}
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7a9b      	ldrb	r3, [r3, #10]
 8000caa:	2210      	movs	r2, #16
 8000cac:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <IndicatorPanel_SetBrightness+0x58>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fccc 	bl	800164c <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7a9b      	ldrb	r3, [r3, #10]
 8000cb8:	2220      	movs	r2, #32
 8000cba:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <IndicatorPanel_SetBrightness+0x58>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fcc5 	bl	800164c <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7a9b      	ldrb	r3, [r3, #10]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4908      	ldr	r1, [pc, #32]	; (8000cec <IndicatorPanel_SetBrightness+0x5c>)
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fcbe 	bl	800164c <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7a9b      	ldrb	r3, [r3, #10]
 8000cd4:	2240      	movs	r2, #64	; 0x40
 8000cd6:	4906      	ldr	r1, [pc, #24]	; (8000cf0 <IndicatorPanel_SetBrightness+0x60>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fcb7 	bl	800164c <STLED316S_SetBrightness>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <separate>:

int32_t separate (uint16_t in_data, uint8_t *out_data)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	80fb      	strh	r3, [r7, #6]
    int32_t k,i,m;
    k = in_data;
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	617b      	str	r3, [r7, #20]
    m = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]

    while(k != 0)       //цикл чтобы найти количество цифр в числе
 8000d08:	e00a      	b.n	8000d20 <separate+0x2c>
    {
        k = k / 10;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <separate+0x80>)
 8000d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d12:	1092      	asrs	r2, r2, #2
 8000d14:	17db      	asrs	r3, r3, #31
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
        m++;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
    while(k != 0)       //цикл чтобы найти количество цифр в числе
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f1      	bne.n	8000d0a <separate+0x16>
    }

    for(i=m-1;i>=0;i--)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	e018      	b.n	8000d60 <separate+0x6c>
    {
    	out_data[i] = in_data%10;      //берем последнюю цифру с числа
 8000d2e:	88fa      	ldrh	r2, [r7, #6]
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <separate+0x84>)
 8000d32:	fba3 1302 	umull	r1, r3, r3, r2
 8000d36:	08d9      	lsrs	r1, r3, #3
 8000d38:	460b      	mov	r3, r1
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	b299      	uxth	r1, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
    	in_data = in_data / 10;         //забираем эту цифру с числа
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <separate+0x84>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	80fb      	strh	r3, [r7, #6]
    for(i=m-1;i>=0;i--)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	dae3      	bge.n	8000d2e <separate+0x3a>
    }

    return m;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	66666667 	.word	0x66666667
 8000d78:	cccccccd 	.word	0xcccccccd

08000d7c <IndicatorPanel_offset_4dig>:

void IndicatorPanel_offset_4dig (uint8_t num, uint8_t *dataArray)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d841      	bhi.n	8000e14 <IndicatorPanel_offset_4dig+0x98>
 8000d90:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <IndicatorPanel_offset_4dig+0x1c>)
 8000d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d96:	bf00      	nop
 8000d98:	08000da9 	.word	0x08000da9
 8000d9c:	08000dcb 	.word	0x08000dcb
 8000da0:	08000def 	.word	0x08000def
 8000da4:	08000e15 	.word	0x08000e15
	{

	case 1:
	{
		dataArray[3] = dataArray[0];
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	3303      	adds	r3, #3
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	701a      	strb	r2, [r3, #0]
		dataArray[2] = 0;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	3302      	adds	r3, #2
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
		break;
 8000dc8:	e025      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
	}

	case 2:
	{
		dataArray[3] = dataArray[1];
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3303      	adds	r3, #3
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	7852      	ldrb	r2, [r2, #1]
 8000dd2:	701a      	strb	r2, [r3, #0]
		dataArray[2] = dataArray[0];
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	7812      	ldrb	r2, [r2, #0]
 8000ddc:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
		break;
 8000dec:	e013      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
	}

	case 3:
	{
		dataArray[3] = dataArray[2];
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	3303      	adds	r3, #3
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	7892      	ldrb	r2, [r2, #2]
 8000df6:	701a      	strb	r2, [r3, #0]
		dataArray[2] = dataArray[1];
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	7852      	ldrb	r2, [r2, #1]
 8000e00:	701a      	strb	r2, [r3, #0]
		dataArray[1] = dataArray[0];
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]

		break;
 8000e12:	e000      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
		break;
	}

default:
{
	break;
 8000e14:	bf00      	nop
}

	}

}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <IndicatorPanel_offset_3dig>:

}


void IndicatorPanel_offset_3dig (uint8_t num, uint8_t *dataArray)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d021      	beq.n	8000e76 <IndicatorPanel_offset_3dig+0x56>
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	dc21      	bgt.n	8000e7a <IndicatorPanel_offset_3dig+0x5a>
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d002      	beq.n	8000e40 <IndicatorPanel_offset_3dig+0x20>
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d00d      	beq.n	8000e5a <IndicatorPanel_offset_3dig+0x3a>
		break;
	}

default:
{
	break;
 8000e3e:	e01c      	b.n	8000e7a <IndicatorPanel_offset_3dig+0x5a>
		dataArray[2] = dataArray[0];
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3302      	adds	r3, #2
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
		break;
 8000e58:	e010      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
		dataArray[2] = dataArray[1];
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	7852      	ldrb	r2, [r2, #1]
 8000e62:	701a      	strb	r2, [r3, #0]
		dataArray[1] = dataArray[0];
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	7812      	ldrb	r2, [r2, #0]
 8000e6c:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
		break;
 8000e74:	e002      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
		break;
 8000e76:	bf00      	nop
 8000e78:	e000      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
	break;
 8000e7a:	bf00      	nop
}

	}

}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
	...

08000e88 <Carriage_Move>:

void Carriage_Move (uint16_t Speed, uint8_t Dir, uint8_t NumSM)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
 8000e92:	460b      	mov	r3, r1
 8000e94:	717b      	strb	r3, [r7, #5]
 8000e96:	4613      	mov	r3, r2
 8000e98:	713b      	strb	r3, [r7, #4]

uint16_t freq_pwm;

	freq_pwm = ((Speed / (60/10)) * STEPS_PER_ROTATE) / DISTANCE_PER_ROTATE; // Вычисление частоты ШИМ для скорости в см/мин
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <Carriage_Move+0x7c>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fb14 	bl	80004d4 <__aeabi_i2d>
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <Carriage_Move+0x80>)
 8000eb2:	f7ff fb79 	bl	80005a8 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <Carriage_Move+0x84>)
 8000ec4:	f7ff fc9a 	bl	80007fc <__aeabi_ddiv>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fd7c 	bl	80009cc <__aeabi_d2uiz>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	81fb      	strh	r3, [r7, #14]

	if (NumSM == 1)
 8000ed8:	793b      	ldrb	r3, [r7, #4]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10d      	bne.n	8000efa <Carriage_Move+0x72>
	{
		MicrostepDriver_Run (freq_pwm, Dir, oSMD_EN1_GPIO_Port, oSMD_EN1_Pin, oDIR1_GPIO_Port,  oDIR1_Pin, TIM_CHANNEL_1);
 8000ede:	7979      	ldrb	r1, [r7, #5]
 8000ee0:	89f8      	ldrh	r0, [r7, #14]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <Carriage_Move+0x88>)
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <Carriage_Move+0x8c>)
 8000ef6:	f7ff fda1 	bl	8000a3c <MicrostepDriver_Run>
	}
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	aaaaaaab 	.word	0xaaaaaaab
 8000f08:	40690000 	.word	0x40690000
 8000f0c:	404e0000 	.word	0x404e0000
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40010800 	.word	0x40010800

08000f18 <PCB_KeyScan>:

void PCB_KeyScan (void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	STLED316S_ReciveData(&WelderUnit.IndicatorPanel.KeyState[0], oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	4905      	ldr	r1, [pc, #20]	; (8000f34 <PCB_KeyScan+0x1c>)
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <PCB_KeyScan+0x20>)
 8000f22:	f000 fbed 	bl	8001700 <STLED316S_ReciveData>
	STLED316S_ReciveData(&WelderUnit.IndicatorPanel.KeyState[2], oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000f26:	2201      	movs	r2, #1
 8000f28:	4904      	ldr	r1, [pc, #16]	; (8000f3c <PCB_KeyScan+0x24>)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <PCB_KeyScan+0x28>)
 8000f2c:	f000 fbe8 	bl	8001700 <STLED316S_ReciveData>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40010800 	.word	0x40010800
 8000f38:	20003559 	.word	0x20003559
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	2000355b 	.word	0x2000355b

08000f44 <PCB_InputsScan>:

void PCB_InputsScan (void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(iPedal_L_GPIO_Port, iPedal_L_Pin)) // Если Нажата педаль для зажима левой части заготовки, то установить бит, иначе сбросить
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4824      	ldr	r0, [pc, #144]	; (8000fdc <PCB_InputsScan+0x98>)
 8000f4c:	f003 fe4a 	bl	8004be4 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <PCB_InputsScan+0x22>
	{
		WelderUnit.HolderState |= WELDER_STATE_PEDAL_L;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f58:	7c5b      	ldrb	r3, [r3, #17]
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f62:	745a      	strb	r2, [r3, #17]
 8000f64:	e006      	b.n	8000f74 <PCB_InputsScan+0x30>
	}
	else
	{
		WelderUnit.HolderState &= ~WELDER_STATE_PEDAL_L;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f68:	7c5b      	ldrb	r3, [r3, #17]
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f72:	745a      	strb	r2, [r3, #17]
	}

	if (HAL_GPIO_ReadPin(iPedal_R_GPIO_Port, iPedal_R_Pin)) // Если Нажата педаль для зажима правой части заготовки, то установить бит, иначе сбросить
 8000f74:	2108      	movs	r1, #8
 8000f76:	4819      	ldr	r0, [pc, #100]	; (8000fdc <PCB_InputsScan+0x98>)
 8000f78:	f003 fe34 	bl	8004be4 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <PCB_InputsScan+0x4e>
	{
		WelderUnit.HolderState |= WELDER_STATE_PEDAL_R;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f8e:	745a      	strb	r2, [r3, #17]
 8000f90:	e006      	b.n	8000fa0 <PCB_InputsScan+0x5c>
	}
	else
	{
		WelderUnit.HolderState &= ~WELDER_STATE_PEDAL_R;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f94:	7c5b      	ldrb	r3, [r3, #17]
 8000f96:	f023 0302 	bic.w	r3, r3, #2
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f9e:	745a      	strb	r2, [r3, #17]
	}

	if (HAL_GPIO_ReadPin(iBackDoor_GPIO_Port, iBackDoor_Pin)) // Если задняя дверца закрыта, то установить бит, иначе сбросить
 8000fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa4:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <PCB_InputsScan+0xa0>)
 8000fa6:	f003 fe1d 	bl	8004be4 <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d007      	beq.n	8000fc0 <PCB_InputsScan+0x7c>
	{
		WelderUnit.State |= WELDER_STATE_BACK_DOOR_CLOSE;
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fb2:	7c1b      	ldrb	r3, [r3, #16]
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fbc:	741a      	strb	r2, [r3, #16]
	else
	{
		WelderUnit.State &= ~WELDER_STATE_BACK_DOOR_CLOSE;
		WELDER_HEAD_UP
	}
}
 8000fbe:	e00b      	b.n	8000fd8 <PCB_InputsScan+0x94>
		WelderUnit.State &= ~WELDER_STATE_BACK_DOOR_CLOSE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fc2:	7c1b      	ldrb	r3, [r3, #16]
 8000fc4:	f023 0310 	bic.w	r3, r3, #16
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fcc:	741a      	strb	r2, [r3, #16]
		WELDER_HEAD_UP
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2106      	movs	r1, #6
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <PCB_InputsScan+0xa4>)
 8000fd4:	f003 fe1d 	bl	8004c12 <HAL_GPIO_WritePin>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	2000353c 	.word	0x2000353c
 8000fe4:	40010c00 	.word	0x40010c00
 8000fe8:	40011000 	.word	0x40011000

08000fec <PCB_OutputControl>:

void PCB_OutputControl(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	static uint8_t StateOld = 0;

	PCB_InputsScan(); // Опрос входов платы
 8000ff0:	f7ff ffa8 	bl	8000f44 <PCB_InputsScan>


	if ((WelderUnit.HolderState & WELDER_STATE_PEDAL_L) != (StateOld & WELDER_STATE_PEDAL_L)) // Если произошли изменения на входе отвечающим за девую педаль
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <PCB_OutputControl+0xb4>)
 8000ff6:	7c5a      	ldrb	r2, [r3, #17]
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <PCB_OutputControl+0xb8>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4053      	eors	r3, r2
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00c      	beq.n	8001022 <PCB_OutputControl+0x36>
	{
		if(WelderUnit.HolderState & WELDER_STATE_PEDAL_L) // Если педаль была нажата (фронт импульса)
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <PCB_OutputControl+0xb4>)
 800100a:	7c5b      	ldrb	r3, [r3, #17]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <PCB_OutputControl+0x36>
		{
			WelderUnit.HolderState = WelderUnit.HolderState ^ WELDER_STATE_HOLDER_L; // Инвертировать состояние бита держателя затовки
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001016:	7c5b      	ldrb	r3, [r3, #17]
 8001018:	f083 0304 	eor.w	r3, r3, #4
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001020:	745a      	strb	r2, [r3, #17]
		}

	}

	if ((WelderUnit.HolderState & WELDER_STATE_PEDAL_R) != (StateOld & WELDER_STATE_PEDAL_R)) // Если произошли изменения на входе отвечающим за девую педаль
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001024:	7c5a      	ldrb	r2, [r3, #17]
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <PCB_OutputControl+0xb8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4053      	eors	r3, r2
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00c      	beq.n	8001050 <PCB_OutputControl+0x64>
	{
		if(WelderUnit.HolderState & WELDER_STATE_PEDAL_R) // Если педаль была нажата (фронт импульса)
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001038:	7c5b      	ldrb	r3, [r3, #17]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <PCB_OutputControl+0x64>
		{
			WelderUnit.HolderState = WelderUnit.HolderState ^ WELDER_STATE_HOLDER_R; // Инвертировать состояние бита держателя затовки
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001044:	7c5b      	ldrb	r3, [r3, #17]
 8001046:	f083 0308 	eor.w	r3, r3, #8
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <PCB_OutputControl+0xb4>)
 800104e:	745a      	strb	r2, [r3, #17]
		}

	}

	if(WelderUnit.HolderState & WELDER_STATE_HOLDER_L) // Если бит установлен, то зажать зажать заготвку, иначе отпустить
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001052:	7c5b      	ldrb	r3, [r3, #17]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <PCB_OutputControl+0x7c>
	{
		Valve_L_CLOSE
 800105c:	2201      	movs	r2, #1
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	4811      	ldr	r0, [pc, #68]	; (80010a8 <PCB_OutputControl+0xbc>)
 8001062:	f003 fdd6 	bl	8004c12 <HAL_GPIO_WritePin>
 8001066:	e004      	b.n	8001072 <PCB_OutputControl+0x86>
	}
	else
	{
		Valve_L_OPEN
 8001068:	2200      	movs	r2, #0
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	480e      	ldr	r0, [pc, #56]	; (80010a8 <PCB_OutputControl+0xbc>)
 800106e:	f003 fdd0 	bl	8004c12 <HAL_GPIO_WritePin>
	}

	if(WelderUnit.HolderState & WELDER_STATE_HOLDER_R) // Если бит установлен, то зажать зажать заготвку, иначе отпустить
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001074:	7c5b      	ldrb	r3, [r3, #17]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <PCB_OutputControl+0x9e>
	{
		Valve_R_CLOSE
 800107e:	2201      	movs	r2, #1
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <PCB_OutputControl+0xbc>)
 8001084:	f003 fdc5 	bl	8004c12 <HAL_GPIO_WritePin>
 8001088:	e004      	b.n	8001094 <PCB_OutputControl+0xa8>
	}
	else
	{
		Valve_R_OPEN
 800108a:	2200      	movs	r2, #0
 800108c:	2140      	movs	r1, #64	; 0x40
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <PCB_OutputControl+0xbc>)
 8001090:	f003 fdbf 	bl	8004c12 <HAL_GPIO_WritePin>
	}

	StateOld = WelderUnit.HolderState; // Сохранить текущее состояние
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001096:	7c5a      	ldrb	r2, [r3, #17]
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <PCB_OutputControl+0xb8>)
 800109a:	701a      	strb	r2, [r3, #0]

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000353c 	.word	0x2000353c
 80010a4:	2000002c 	.word	0x2000002c
 80010a8:	40010c00 	.word	0x40010c00

080010ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(iSTLED316S_IRQN5_GPIO_Port, iSTLED316S_IRQN5_Pin) == GPIO_PIN_RESET)
 80010b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ba:	482a      	ldr	r0, [pc, #168]	; (8001164 <HAL_GPIO_EXTI_Callback+0xb8>)
 80010bc:	f003 fd92 	bl	8004be4 <HAL_GPIO_ReadPin>

	}



	if (HAL_GPIO_ReadPin(iFB_STEP1_GPIO_Port, iFB_STEP1_Pin) == GPIO_PIN_SET)
 80010c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c4:	4828      	ldr	r0, [pc, #160]	; (8001168 <HAL_GPIO_EXTI_Callback+0xbc>)
 80010c6:	f003 fd8d 	bl	8004be4 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10e      	bne.n	80010ee <HAL_GPIO_EXTI_Callback+0x42>
		//#define configASSERT( x ) if ((x) == 0) {taskDISABLE_INTERRUPTS(); for( ;; );}
		// Без этого не работают семафоры


		static portBASE_TYPE xHigherPriorityTaskWoken;
		  xHigherPriorityTaskWoken = pdFALSE; // Не переключать контекст
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_GPIO_EXTI_Callback+0xc0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

		  //WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / STEPS_PER_ROTATE; // Вычисление текущей позиции каретки, мм

			  xSemaphoreGiveFromISR(xSemaphore_StepCount,&xHigherPriorityTaskWoken);
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_GPIO_EXTI_Callback+0xc4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4924      	ldr	r1, [pc, #144]	; (800116c <HAL_GPIO_EXTI_Callback+0xc0>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 fbad 	bl	800783c <xQueueGiveFromISR>


		if( xHigherPriorityTaskWoken == pdTRUE )
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <HAL_GPIO_EXTI_Callback+0xc0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_EXTI_Callback+0x42>
				вместе с портом FreeRTOS. */
			 //portSWITCH_CONTEXT();
			//vTaskSwitchContext();
			//portYIELD_FROM_ISR(NULL);

			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 80010ea:	f007 fbf1 	bl	80088d0 <vTaskMissedYield>

		  }
	}

	if (HAL_GPIO_ReadPin(iCarriageStop_GPIO_Port, iCarriageStop_Pin) == GPIO_PIN_SET)
 80010ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f2:	481c      	ldr	r0, [pc, #112]	; (8001164 <HAL_GPIO_EXTI_Callback+0xb8>)
 80010f4:	f003 fd76 	bl	8004be4 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d126      	bne.n	800114c <HAL_GPIO_EXTI_Callback+0xa0>
		// В файле FreeRTOSConfig.h закомментировать
		//#define configASSERT( x ) if ((x) == 0) {taskDISABLE_INTERRUPTS(); for( ;; );}
		// Без этого не работают семафоры

		static portBASE_TYPE xHigherPriorityTaskWoken2;
		  xHigherPriorityTaskWoken2 = pdFALSE; // Не переключать контекст
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

		  //WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / STEPS_PER_ROTATE; // Вычисление текущей позиции каретки, мм

			  xSemaphoreGiveFromISR(xSemaphore_Calibration, &xHigherPriorityTaskWoken2);
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	491a      	ldr	r1, [pc, #104]	; (8001174 <HAL_GPIO_EXTI_Callback+0xc8>)
 800110a:	4618      	mov	r0, r3
 800110c:	f006 fb96 	bl	800783c <xQueueGiveFromISR>

			  if (HAL_GPIO_ReadPin(iCarriageStop_GPIO_Port, iCarriageStop_Pin))
 8001110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001116:	f003 fd65 	bl	8004be4 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <HAL_GPIO_EXTI_Callback+0x84>
			  {
				  WelderUnit.State |= 1<<3; // 3 бит - Состояние вывода iCarriageStop, 1 - коневик нажат кареткой
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001122:	7c1b      	ldrb	r3, [r3, #16]
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_GPIO_EXTI_Callback+0xd0>)
 800112c:	741a      	strb	r2, [r3, #16]
 800112e:	e006      	b.n	800113e <HAL_GPIO_EXTI_Callback+0x92>
			  }
			  else
			  {
				  WelderUnit.State &= ~0x08; // 3 бит - Состояние вывода iCarriageStop, 0 - коневик отжат
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001132:	7c1b      	ldrb	r3, [r3, #16]
 8001134:	f023 0308 	bic.w	r3, r3, #8
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_GPIO_EXTI_Callback+0xd0>)
 800113c:	741a      	strb	r2, [r3, #16]
			  }




		if( xHigherPriorityTaskWoken2 == pdTRUE )
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d109      	bne.n	800115a <HAL_GPIO_EXTI_Callback+0xae>
		  {
			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 8001146:	f007 fbc3 	bl	80088d0 <vTaskMissedYield>
	{
		WelderUnit.State &= ~0x08; //// 3 бит - Состояние вывода iCarriageStop 0 - коневик отжат.

	}

}
 800114a:	e006      	b.n	800115a <HAL_GPIO_EXTI_Callback+0xae>
		WelderUnit.State &= ~0x08; //// 3 бит - Состояние вывода iCarriageStop 0 - коневик отжат.
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_GPIO_EXTI_Callback+0xd0>)
 800114e:	7c1b      	ldrb	r3, [r3, #16]
 8001150:	f023 0308 	bic.w	r3, r3, #8
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001158:	741a      	strb	r2, [r3, #16]
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40010c00 	.word	0x40010c00
 8001168:	40011000 	.word	0x40011000
 800116c:	20000030 	.word	0x20000030
 8001170:	20003564 	.word	0x20003564
 8001174:	20000034 	.word	0x20000034
 8001178:	20003dc4 	.word	0x20003dc4
 800117c:	2000353c 	.word	0x2000353c

08001180 <SaveProgramToFlash2>:

void SaveProgramToFlash2()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	uint32_t *p; // Указатель на считваемые из flash памяти данные

	uint16_t offset = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	80bb      	strh	r3, [r7, #4]

	p = (uint32_t*)PAGE; // p содержит начальный адрес записи параметров программы
 800118a:	4b3c      	ldr	r3, [pc, #240]	; (800127c <SaveProgramToFlash2+0xfc>)
 800118c:	603b      	str	r3, [r7, #0]

	for(uint16_t i = 0; i < 256; i++)
 800118e:	2300      	movs	r3, #0
 8001190:	80fb      	strh	r3, [r7, #6]
 8001192:	e010      	b.n	80011b6 <SaveProgramToFlash2+0x36>
	{
		ReadFlashPage[i] = *(p + i);
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	4413      	add	r3, r2
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	88f9      	ldrh	r1, [r7, #6]
 80011a0:	461a      	mov	r2, r3
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	4836      	ldr	r0, [pc, #216]	; (8001280 <SaveProgramToFlash2+0x100>)
 80011a8:	00c9      	lsls	r1, r1, #3
 80011aa:	4401      	add	r1, r0
 80011ac:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i = 0; i < 256; i++)
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	3301      	adds	r3, #1
 80011b4:	80fb      	strh	r3, [r7, #6]
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	2bff      	cmp	r3, #255	; 0xff
 80011ba:	d9eb      	bls.n	8001194 <SaveProgramToFlash2+0x14>
	}

	offset = WelderUnit.Program * 6;
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <SaveProgramToFlash2+0x104>)
 80011be:	899b      	ldrh	r3, [r3, #12]
 80011c0:	461a      	mov	r2, r3
 80011c2:	0052      	lsls	r2, r2, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	80bb      	strh	r3, [r7, #4]

	ReadFlashPage[offset] = WelderUnit.Program;
 80011ca:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <SaveProgramToFlash2+0x104>)
 80011cc:	899b      	ldrh	r3, [r3, #12]
 80011ce:	88b9      	ldrh	r1, [r7, #4]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	482a      	ldr	r0, [pc, #168]	; (8001280 <SaveProgramToFlash2+0x100>)
 80011d8:	00c9      	lsls	r1, r1, #3
 80011da:	4401      	add	r1, r0
 80011dc:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 1] = WelderUnit.Xs;
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <SaveProgramToFlash2+0x104>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	88ba      	ldrh	r2, [r7, #4]
 80011e6:	1c51      	adds	r1, r2, #1
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	4824      	ldr	r0, [pc, #144]	; (8001280 <SaveProgramToFlash2+0x100>)
 80011f0:	00c9      	lsls	r1, r1, #3
 80011f2:	4401      	add	r1, r0
 80011f4:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 2] = WelderUnit.Xf;
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <SaveProgramToFlash2+0x104>)
 80011fa:	885b      	ldrh	r3, [r3, #2]
 80011fc:	88ba      	ldrh	r2, [r7, #4]
 80011fe:	1c91      	adds	r1, r2, #2
 8001200:	b29a      	uxth	r2, r3
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	481e      	ldr	r0, [pc, #120]	; (8001280 <SaveProgramToFlash2+0x100>)
 8001208:	00c9      	lsls	r1, r1, #3
 800120a:	4401      	add	r1, r0
 800120c:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 3] = WelderUnit.Speed;
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <SaveProgramToFlash2+0x104>)
 8001212:	88db      	ldrh	r3, [r3, #6]
 8001214:	88ba      	ldrh	r2, [r7, #4]
 8001216:	1cd1      	adds	r1, r2, #3
 8001218:	b29a      	uxth	r2, r3
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	4818      	ldr	r0, [pc, #96]	; (8001280 <SaveProgramToFlash2+0x100>)
 8001220:	00c9      	lsls	r1, r1, #3
 8001222:	4401      	add	r1, r0
 8001224:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 4] = WelderUnit.Delay_s;
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <SaveProgramToFlash2+0x104>)
 800122a:	7a9b      	ldrb	r3, [r3, #10]
 800122c:	88ba      	ldrh	r2, [r7, #4]
 800122e:	1d11      	adds	r1, r2, #4
 8001230:	b2da      	uxtb	r2, r3
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	4812      	ldr	r0, [pc, #72]	; (8001280 <SaveProgramToFlash2+0x100>)
 8001238:	00c9      	lsls	r1, r1, #3
 800123a:	4401      	add	r1, r0
 800123c:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 5] = WelderUnit.Delay_f;
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <SaveProgramToFlash2+0x104>)
 8001242:	7adb      	ldrb	r3, [r3, #11]
 8001244:	88ba      	ldrh	r2, [r7, #4]
 8001246:	1d51      	adds	r1, r2, #5
 8001248:	b2da      	uxtb	r2, r3
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	480c      	ldr	r0, [pc, #48]	; (8001280 <SaveProgramToFlash2+0x100>)
 8001250:	00c9      	lsls	r1, r1, #3
 8001252:	4401      	add	r1, r0
 8001254:	e9c1 2300 	strd	r2, r3, [r1]

	STM32_WriteToFlash3(ReadFlashPage, 64);
 8001258:	2140      	movs	r1, #64	; 0x40
 800125a:	4809      	ldr	r0, [pc, #36]	; (8001280 <SaveProgramToFlash2+0x100>)
 800125c:	f000 face 	bl	80017fc <STM32_WriteToFlash3>

	p = (uint32_t*)PAGE + offset/4; // p содержит начальный адрес записи параметров программы
 8001260:	88bb      	ldrh	r3, [r7, #4]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	b29b      	uxth	r3, r3
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800126c:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 8001270:	603b      	str	r3, [r7, #0]

}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	0803f800 	.word	0x0803f800
 8001280:	20003570 	.word	0x20003570
 8001284:	2000353c 	.word	0x2000353c

08001288 <ReadProgramFromFlash2>:

void ReadProgramFromFlash2()
{
 8001288:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
	uint32_t *p; // Указатель на считваемые из flash памяти данные

	uint16_t offset = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	80bb      	strh	r3, [r7, #4]

	p = (uint32_t*)PAGE; // p содержит начальный адрес записи параметров программы
 8001294:	4b48      	ldr	r3, [pc, #288]	; (80013b8 <ReadProgramFromFlash2+0x130>)
 8001296:	603b      	str	r3, [r7, #0]

	for(uint16_t i = 0; i < 256; i++)
 8001298:	2300      	movs	r3, #0
 800129a:	80fb      	strh	r3, [r7, #6]
 800129c:	e010      	b.n	80012c0 <ReadProgramFromFlash2+0x38>
	{
		ReadFlashPage[i] = *(p + i);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	88f9      	ldrh	r1, [r7, #6]
 80012aa:	461a      	mov	r2, r3
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	4842      	ldr	r0, [pc, #264]	; (80013bc <ReadProgramFromFlash2+0x134>)
 80012b2:	00c9      	lsls	r1, r1, #3
 80012b4:	4401      	add	r1, r0
 80012b6:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i = 0; i < 256; i++)
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	3301      	adds	r3, #1
 80012be:	80fb      	strh	r3, [r7, #6]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d9eb      	bls.n	800129e <ReadProgramFromFlash2+0x16>
	}

	offset = WelderUnit.Program * 6;
 80012c6:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <ReadProgramFromFlash2+0x138>)
 80012c8:	899b      	ldrh	r3, [r3, #12]
 80012ca:	461a      	mov	r2, r3
 80012cc:	0052      	lsls	r2, r2, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	80bb      	strh	r3, [r7, #4]

	if (WelderUnit.Program - ReadFlashPage[offset] <= 1 || ReadFlashPage[offset] - WelderUnit.Program <= 1)
 80012d4:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <ReadProgramFromFlash2+0x138>)
 80012d6:	899b      	ldrh	r3, [r3, #12]
 80012d8:	b298      	uxth	r0, r3
 80012da:	f04f 0100 	mov.w	r1, #0
 80012de:	88bb      	ldrh	r3, [r7, #4]
 80012e0:	4a36      	ldr	r2, [pc, #216]	; (80013bc <ReadProgramFromFlash2+0x134>)
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	ebb0 0802 	subs.w	r8, r0, r2
 80012ee:	eb61 0903 	sbc.w	r9, r1, r3
 80012f2:	f1b9 0f00 	cmp.w	r9, #0
 80012f6:	bf08      	it	eq
 80012f8:	f1b8 0f02 	cmpeq.w	r8, #2
 80012fc:	d311      	bcc.n	8001322 <ReadProgramFromFlash2+0x9a>
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	4a2e      	ldr	r2, [pc, #184]	; (80013bc <ReadProgramFromFlash2+0x134>)
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4413      	add	r3, r2
 8001306:	e9d3 0100 	ldrd	r0, r1, [r3]
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <ReadProgramFromFlash2+0x138>)
 800130c:	899b      	ldrh	r3, [r3, #12]
 800130e:	b29a      	uxth	r2, r3
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	1a84      	subs	r4, r0, r2
 8001316:	eb61 0503 	sbc.w	r5, r1, r3
 800131a:	2d00      	cmp	r5, #0
 800131c:	bf08      	it	eq
 800131e:	2c02      	cmpeq	r4, #2
 8001320:	d244      	bcs.n	80013ac <ReadProgramFromFlash2+0x124>
	{
		if (ReadFlashPage[offset] <= PROGRAM_MAX)
 8001322:	88bb      	ldrh	r3, [r7, #4]
 8001324:	4a25      	ldr	r2, [pc, #148]	; (80013bc <ReadProgramFromFlash2+0x134>)
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4413      	add	r3, r2
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf08      	it	eq
 8001332:	2a47      	cmpeq	r2, #71	; 0x47
 8001334:	d23a      	bcs.n	80013ac <ReadProgramFromFlash2+0x124>
		{
			WelderUnit.Program = ReadFlashPage[offset];
 8001336:	88bb      	ldrh	r3, [r7, #4]
 8001338:	4a20      	ldr	r2, [pc, #128]	; (80013bc <ReadProgramFromFlash2+0x134>)
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	b292      	uxth	r2, r2
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <ReadProgramFromFlash2+0x138>)
 8001346:	819a      	strh	r2, [r3, #12]
			WelderUnit.Xs = ReadFlashPage[offset + 1];
 8001348:	88bb      	ldrh	r3, [r7, #4]
 800134a:	3301      	adds	r3, #1
 800134c:	4a1b      	ldr	r2, [pc, #108]	; (80013bc <ReadProgramFromFlash2+0x134>)
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4413      	add	r3, r2
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	b292      	uxth	r2, r2
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <ReadProgramFromFlash2+0x138>)
 800135a:	801a      	strh	r2, [r3, #0]
			WelderUnit.Xf = ReadFlashPage[offset + 2];
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	3302      	adds	r3, #2
 8001360:	4a16      	ldr	r2, [pc, #88]	; (80013bc <ReadProgramFromFlash2+0x134>)
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4413      	add	r3, r2
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	b292      	uxth	r2, r2
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <ReadProgramFromFlash2+0x138>)
 800136e:	805a      	strh	r2, [r3, #2]
			WelderUnit.Speed = ReadFlashPage[offset + 3];
 8001370:	88bb      	ldrh	r3, [r7, #4]
 8001372:	3303      	adds	r3, #3
 8001374:	4a11      	ldr	r2, [pc, #68]	; (80013bc <ReadProgramFromFlash2+0x134>)
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	b292      	uxth	r2, r2
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <ReadProgramFromFlash2+0x138>)
 8001382:	80da      	strh	r2, [r3, #6]
			WelderUnit.Delay_s = ReadFlashPage[offset + 4];
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	3304      	adds	r3, #4
 8001388:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <ReadProgramFromFlash2+0x134>)
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4413      	add	r3, r2
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <ReadProgramFromFlash2+0x138>)
 8001396:	729a      	strb	r2, [r3, #10]
			WelderUnit.Delay_f = ReadFlashPage[offset + 5];
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	3305      	adds	r3, #5
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <ReadProgramFromFlash2+0x134>)
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4413      	add	r3, r2
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <ReadProgramFromFlash2+0x138>)
 80013aa:	72da      	strb	r2, [r3, #11]

//	STM32_WriteToFlash3(ReadFlashPage, 64);
//
//	p = (uint32_t*)PAGE + offset/4; // p содержит начальный адрес записи параметров программы

}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80013b6:	4770      	bx	lr
 80013b8:	0803f800 	.word	0x0803f800
 80013bc:	20003570 	.word	0x20003570
 80013c0:	2000353c 	.word	0x2000353c

080013c4 <STLED316S_Ini>:
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	461a      	mov	r2, r3
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	2007      	movs	r0, #7
 80013d8:	f000 f938 	bl	800164c <STLED316S_SetBrightness>
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <STLED316S_Ini+0x60>)
 80013de:	220d      	movs	r2, #13
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f003 fc12 	bl	8004c12 <HAL_GPIO_WritePin>
 80013ee:	2005      	movs	r0, #5
 80013f0:	f000 f9e6 	bl	80017c0 <DelayMicro>
 80013f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80013f8:	2201      	movs	r2, #1
 80013fa:	490a      	ldr	r1, [pc, #40]	; (8001424 <STLED316S_Ini+0x60>)
 80013fc:	480a      	ldr	r0, [pc, #40]	; (8001428 <STLED316S_Ini+0x64>)
 80013fe:	f004 f8a5 	bl	800554c <HAL_SPI_Transmit>
 8001402:	2005      	movs	r0, #5
 8001404:	f000 f9dc 	bl	80017c0 <DelayMicro>
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	2201      	movs	r2, #1
 800140c:	4619      	mov	r1, r3
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f003 fbff 	bl	8004c12 <HAL_GPIO_WritePin>
 8001414:	2005      	movs	r0, #5
 8001416:	f000 f9d3 	bl	80017c0 <DelayMicro>
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20003d98 	.word	0x20003d98
 8001428:	20003e1c 	.word	0x20003e1c

0800142c <STLED316S_OutData>:
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	461a      	mov	r2, r3
 8001438:	460b      	mov	r3, r1
 800143a:	72fb      	strb	r3, [r7, #11]
 800143c:	4613      	mov	r3, r2
 800143e:	813b      	strh	r3, [r7, #8]
 8001440:	4b26      	ldr	r3, [pc, #152]	; (80014dc <STLED316S_OutData+0xb0>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	4b25      	ldr	r3, [pc, #148]	; (80014dc <STLED316S_OutData+0xb0>)
 8001448:	2200      	movs	r2, #0
 800144a:	705a      	strb	r2, [r3, #1]
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <STLED316S_OutData+0xb0>)
 800144e:	2200      	movs	r2, #0
 8001450:	709a      	strb	r2, [r3, #2]
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <STLED316S_OutData+0xb0>)
 8001454:	2200      	movs	r2, #0
 8001456:	70da      	strb	r2, [r3, #3]
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <STLED316S_OutData+0xb0>)
 800145a:	2200      	movs	r2, #0
 800145c:	711a      	strb	r2, [r3, #4]
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <STLED316S_OutData+0xb0>)
 8001460:	2200      	movs	r2, #0
 8001462:	715a      	strb	r2, [r3, #5]
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <STLED316S_OutData+0xb0>)
 8001466:	2200      	movs	r2, #0
 8001468:	719a      	strb	r2, [r3, #6]
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]
 800146e:	e00d      	b.n	800148c <STLED316S_OutData+0x60>
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	7dfb      	ldrb	r3, [r7, #23]
 800147c:	3301      	adds	r3, #1
 800147e:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <STLED316S_OutData+0xb4>)
 8001480:	5c51      	ldrb	r1, [r2, r1]
 8001482:	4a16      	ldr	r2, [pc, #88]	; (80014dc <STLED316S_OutData+0xb0>)
 8001484:	54d1      	strb	r1, [r2, r3]
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	3301      	adds	r3, #1
 800148a:	75fb      	strb	r3, [r7, #23]
 800148c:	7dfa      	ldrb	r2, [r7, #23]
 800148e:	7afb      	ldrb	r3, [r7, #11]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3ed      	bcc.n	8001470 <STLED316S_OutData+0x44>
 8001494:	893b      	ldrh	r3, [r7, #8]
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f003 fbb9 	bl	8004c12 <HAL_GPIO_WritePin>
 80014a0:	2005      	movs	r0, #5
 80014a2:	f000 f98d 	bl	80017c0 <DelayMicro>
 80014a6:	7afb      	ldrb	r3, [r7, #11]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80014b2:	490a      	ldr	r1, [pc, #40]	; (80014dc <STLED316S_OutData+0xb0>)
 80014b4:	480b      	ldr	r0, [pc, #44]	; (80014e4 <STLED316S_OutData+0xb8>)
 80014b6:	f004 f849 	bl	800554c <HAL_SPI_Transmit>
 80014ba:	2005      	movs	r0, #5
 80014bc:	f000 f980 	bl	80017c0 <DelayMicro>
 80014c0:	893b      	ldrh	r3, [r7, #8]
 80014c2:	2201      	movs	r2, #1
 80014c4:	4619      	mov	r1, r3
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f003 fba3 	bl	8004c12 <HAL_GPIO_WritePin>
 80014cc:	2005      	movs	r0, #5
 80014ce:	f000 f977 	bl	80017c0 <DelayMicro>
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20003d98 	.word	0x20003d98
 80014e0:	080099a8 	.word	0x080099a8
 80014e4:	20003e1c 	.word	0x20003e1c

080014e8 <STLED316S_Single_Out>:
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	460b      	mov	r3, r1
 80014f4:	72fb      	strb	r3, [r7, #11]
 80014f6:	4613      	mov	r3, r2
 80014f8:	72bb      	strb	r3, [r7, #10]
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <STLED316S_Single_Out+0xb8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <STLED316S_Single_Out+0xb8>)
 8001502:	2200      	movs	r2, #0
 8001504:	705a      	strb	r2, [r3, #1]
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <STLED316S_Single_Out+0xb8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	f043 0320 	orr.w	r3, r3, #32
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <STLED316S_Single_Out+0xb8>)
 8001512:	701a      	strb	r2, [r3, #0]
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <STLED316S_Single_Out+0xb8>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b25a      	sxtb	r2, r3
 800151a:	7afb      	ldrb	r3, [r7, #11]
 800151c:	f1c3 0306 	rsb	r3, r3, #6
 8001520:	b2db      	uxtb	r3, r3
 8001522:	b25b      	sxtb	r3, r3
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	b25b      	sxtb	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b25b      	sxtb	r3, r3
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <STLED316S_Single_Out+0xb8>)
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <STLED316S_Single_Out+0xb8>)
 800153a:	705a      	strb	r2, [r3, #1]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <STLED316S_Single_Out+0xbc>)
 8001544:	5c9a      	ldrb	r2, [r3, r2]
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <STLED316S_Single_Out+0xb8>)
 8001548:	705a      	strb	r2, [r3, #1]
 800154a:	7abb      	ldrb	r3, [r7, #10]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <STLED316S_Single_Out+0x76>
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <STLED316S_Single_Out+0xb8>)
 8001552:	785b      	ldrb	r3, [r3, #1]
 8001554:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <STLED316S_Single_Out+0xb8>)
 800155c:	705a      	strb	r2, [r3, #1]
 800155e:	8b3b      	ldrh	r3, [r7, #24]
 8001560:	2200      	movs	r2, #0
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f003 fb54 	bl	8004c12 <HAL_GPIO_WritePin>
 800156a:	2005      	movs	r0, #5
 800156c:	f000 f928 	bl	80017c0 <DelayMicro>
 8001570:	f242 7310 	movw	r3, #10000	; 0x2710
 8001574:	2202      	movs	r2, #2
 8001576:	490a      	ldr	r1, [pc, #40]	; (80015a0 <STLED316S_Single_Out+0xb8>)
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <STLED316S_Single_Out+0xc0>)
 800157a:	f003 ffe7 	bl	800554c <HAL_SPI_Transmit>
 800157e:	2005      	movs	r0, #5
 8001580:	f000 f91e 	bl	80017c0 <DelayMicro>
 8001584:	8b3b      	ldrh	r3, [r7, #24]
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f003 fb41 	bl	8004c12 <HAL_GPIO_WritePin>
 8001590:	2069      	movs	r0, #105	; 0x69
 8001592:	f000 f915 	bl	80017c0 <DelayMicro>
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20003d98 	.word	0x20003d98
 80015a4:	080099a8 	.word	0x080099a8
 80015a8:	20003e1c 	.word	0x20003e1c

080015ac <STLED316S_Direct_Single_Out>:
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	461a      	mov	r2, r3
 80015b8:	460b      	mov	r3, r1
 80015ba:	72fb      	strb	r3, [r7, #11]
 80015bc:	4613      	mov	r3, r2
 80015be:	813b      	strh	r3, [r7, #8]
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <STLED316S_Direct_Single_Out+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <STLED316S_Direct_Single_Out+0x98>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	705a      	strb	r2, [r3, #1]
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <STLED316S_Direct_Single_Out+0x98>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	f043 0320 	orr.w	r3, r3, #32
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <STLED316S_Direct_Single_Out+0x98>)
 80015d8:	701a      	strb	r2, [r3, #0]
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <STLED316S_Direct_Single_Out+0x98>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	7afb      	ldrb	r3, [r7, #11]
 80015e2:	f1c3 0306 	rsb	r3, r3, #6
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <STLED316S_Direct_Single_Out+0x98>)
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <STLED316S_Direct_Single_Out+0x98>)
 8001600:	705a      	strb	r2, [r3, #1]
 8001602:	893b      	ldrh	r3, [r7, #8]
 8001604:	2200      	movs	r2, #0
 8001606:	4619      	mov	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f003 fb02 	bl	8004c12 <HAL_GPIO_WritePin>
 800160e:	2005      	movs	r0, #5
 8001610:	f000 f8d6 	bl	80017c0 <DelayMicro>
 8001614:	f242 7310 	movw	r3, #10000	; 0x2710
 8001618:	2202      	movs	r2, #2
 800161a:	490a      	ldr	r1, [pc, #40]	; (8001644 <STLED316S_Direct_Single_Out+0x98>)
 800161c:	480a      	ldr	r0, [pc, #40]	; (8001648 <STLED316S_Direct_Single_Out+0x9c>)
 800161e:	f003 ff95 	bl	800554c <HAL_SPI_Transmit>
 8001622:	2005      	movs	r0, #5
 8001624:	f000 f8cc 	bl	80017c0 <DelayMicro>
 8001628:	893b      	ldrh	r3, [r7, #8]
 800162a:	2201      	movs	r2, #1
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f003 faef 	bl	8004c12 <HAL_GPIO_WritePin>
 8001634:	2005      	movs	r0, #5
 8001636:	f000 f8c3 	bl	80017c0 <DelayMicro>
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20003d98 	.word	0x20003d98
 8001648:	20003e1c 	.word	0x20003e1c

0800164c <STLED316S_SetBrightness>:
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	80bb      	strh	r3, [r7, #4]
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <STLED316S_SetBrightness+0xac>)
 800165e:	2210      	movs	r2, #16
 8001660:	701a      	strb	r2, [r3, #0]
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <STLED316S_SetBrightness+0xac>)
 8001664:	22e5      	movs	r2, #229	; 0xe5
 8001666:	705a      	strb	r2, [r3, #1]
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <STLED316S_SetBrightness+0xac>)
 800166a:	2200      	movs	r2, #0
 800166c:	709a      	strb	r2, [r3, #2]
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <STLED316S_SetBrightness+0xac>)
 8001670:	2200      	movs	r2, #0
 8001672:	70da      	strb	r2, [r3, #3]
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <STLED316S_SetBrightness+0xac>)
 8001676:	2200      	movs	r2, #0
 8001678:	711a      	strb	r2, [r3, #4]
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	b25a      	sxtb	r2, r3
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	4313      	orrs	r3, r2
 8001686:	b25b      	sxtb	r3, r3
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <STLED316S_SetBrightness+0xac>)
 800168c:	709a      	strb	r2, [r3, #2]
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	b25a      	sxtb	r2, r3
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	4313      	orrs	r3, r2
 800169a:	b25b      	sxtb	r3, r3
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <STLED316S_SetBrightness+0xac>)
 80016a0:	70da      	strb	r2, [r3, #3]
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <STLED316S_SetBrightness+0xac>)
 80016b4:	711a      	strb	r2, [r3, #4]
 80016b6:	88bb      	ldrh	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	6838      	ldr	r0, [r7, #0]
 80016be:	f003 faa8 	bl	8004c12 <HAL_GPIO_WritePin>
 80016c2:	2005      	movs	r0, #5
 80016c4:	f000 f87c 	bl	80017c0 <DelayMicro>
 80016c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80016cc:	2205      	movs	r2, #5
 80016ce:	490a      	ldr	r1, [pc, #40]	; (80016f8 <STLED316S_SetBrightness+0xac>)
 80016d0:	480a      	ldr	r0, [pc, #40]	; (80016fc <STLED316S_SetBrightness+0xb0>)
 80016d2:	f003 ff3b 	bl	800554c <HAL_SPI_Transmit>
 80016d6:	2005      	movs	r0, #5
 80016d8:	f000 f872 	bl	80017c0 <DelayMicro>
 80016dc:	88bb      	ldrh	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	4619      	mov	r1, r3
 80016e2:	6838      	ldr	r0, [r7, #0]
 80016e4:	f003 fa95 	bl	8004c12 <HAL_GPIO_WritePin>
 80016e8:	2005      	movs	r0, #5
 80016ea:	f000 f869 	bl	80017c0 <DelayMicro>
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20003d98 	.word	0x20003d98
 80016fc:	20003e1c 	.word	0x20003e1c

08001700 <STLED316S_ReciveData>:
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	4613      	mov	r3, r2
 800170c:	80fb      	strh	r3, [r7, #6]
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <STLED316S_ReciveData+0xb4>)
 8001710:	2249      	movs	r2, #73	; 0x49
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <STLED316S_ReciveData+0xb4>)
 8001716:	2200      	movs	r2, #0
 8001718:	705a      	strb	r2, [r3, #1]
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <STLED316S_ReciveData+0xb4>)
 800171c:	2200      	movs	r2, #0
 800171e:	709a      	strb	r2, [r3, #2]
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <STLED316S_ReciveData+0xb4>)
 8001722:	2200      	movs	r2, #0
 8001724:	70da      	strb	r2, [r3, #3]
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <STLED316S_ReciveData+0xb8>)
 8001728:	2249      	movs	r2, #73	; 0x49
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <STLED316S_ReciveData+0xb8>)
 800172e:	2202      	movs	r2, #2
 8001730:	705a      	strb	r2, [r3, #1]
 8001732:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <STLED316S_ReciveData+0xb8>)
 8001734:	2202      	movs	r2, #2
 8001736:	709a      	strb	r2, [r3, #2]
 8001738:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <STLED316S_ReciveData+0xb8>)
 800173a:	2202      	movs	r2, #2
 800173c:	70da      	strb	r2, [r3, #3]
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]
 8001742:	e006      	b.n	8001752 <STLED316S_ReciveData+0x52>
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <STLED316S_ReciveData+0xb8>)
 8001748:	2100      	movs	r1, #0
 800174a:	54d1      	strb	r1, [r2, r3]
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	3301      	adds	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	2b07      	cmp	r3, #7
 8001756:	d9f5      	bls.n	8001744 <STLED316S_ReciveData+0x44>
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	2200      	movs	r2, #0
 800175c:	4619      	mov	r1, r3
 800175e:	68b8      	ldr	r0, [r7, #8]
 8001760:	f003 fa57 	bl	8004c12 <HAL_GPIO_WritePin>
 8001764:	2005      	movs	r0, #5
 8001766:	f000 f82b 	bl	80017c0 <DelayMicro>
 800176a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176e:	2201      	movs	r2, #1
 8001770:	4910      	ldr	r1, [pc, #64]	; (80017b4 <STLED316S_ReciveData+0xb4>)
 8001772:	4812      	ldr	r0, [pc, #72]	; (80017bc <STLED316S_ReciveData+0xbc>)
 8001774:	f003 feea 	bl	800554c <HAL_SPI_Transmit>
 8001778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177c:	2202      	movs	r2, #2
 800177e:	490e      	ldr	r1, [pc, #56]	; (80017b8 <STLED316S_ReciveData+0xb8>)
 8001780:	480e      	ldr	r0, [pc, #56]	; (80017bc <STLED316S_ReciveData+0xbc>)
 8001782:	f004 f81f 	bl	80057c4 <HAL_SPI_Receive>
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	2201      	movs	r2, #1
 800178a:	4619      	mov	r1, r3
 800178c:	68b8      	ldr	r0, [r7, #8]
 800178e:	f003 fa40 	bl	8004c12 <HAL_GPIO_WritePin>
 8001792:	2005      	movs	r0, #5
 8001794:	f000 f814 	bl	80017c0 <DelayMicro>
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <STLED316S_ReciveData+0xb8>)
 800179a:	781a      	ldrb	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3301      	adds	r3, #1
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <STLED316S_ReciveData+0xb8>)
 80017a6:	7852      	ldrb	r2, [r2, #1]
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20003d98 	.word	0x20003d98
 80017b8:	20003568 	.word	0x20003568
 80017bc:	20003e1c 	.word	0x20003e1c

080017c0 <DelayMicro>:
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <DelayMicro+0x34>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <DelayMicro+0x38>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	0d5b      	lsrs	r3, r3, #21
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	bf00      	nop
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1fa      	bne.n	80017de <DelayMicro+0x1e>
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	20000000 	.word	0x20000000
 80017f8:	6b5fca6b 	.word	0x6b5fca6b

080017fc <STM32_WriteToFlash3>:
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	f002 fec9 	bl	800459c <HAL_FLASH_Unlock>
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <STM32_WriteToFlash3+0x70>)
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	2301      	movs	r3, #1
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	f107 0208 	add.w	r2, r7, #8
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f002 ffa1 	bl	800476c <HAL_FLASHEx_Erase>
 800182a:	2300      	movs	r3, #0
 800182c:	83fb      	strh	r3, [r7, #30]
 800182e:	e012      	b.n	8001856 <STM32_WriteToFlash3+0x5a>
 8001830:	8bfb      	ldrh	r3, [r7, #30]
 8001832:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001836:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4619      	mov	r1, r3
 800183e:	8bfb      	ldrh	r3, [r7, #30]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	2002      	movs	r0, #2
 800184c:	f002 fe36 	bl	80044bc <HAL_FLASH_Program>
 8001850:	8bfb      	ldrh	r3, [r7, #30]
 8001852:	3301      	adds	r3, #1
 8001854:	83fb      	strh	r3, [r7, #30]
 8001856:	8bfb      	ldrh	r3, [r7, #30]
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d8e8      	bhi.n	8001830 <STM32_WriteToFlash3+0x34>
 800185e:	f002 fec3 	bl	80045e8 <HAL_FLASH_Lock>
 8001862:	bf00      	nop
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	0803f800 	.word	0x0803f800

08001870 <freeRTOS_Tasks_Ini>:
	uint8_t STLED_Rx[8];



void freeRTOS_Tasks_Ini (void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af02      	add	r7, sp, #8
	xSemaphore_StepCount = xQueueCreateCountingSemaphore(4, 0);
 8001876:	2100      	movs	r1, #0
 8001878:	2004      	movs	r0, #4
 800187a:	f005 fec5 	bl	8007608 <xQueueCreateCountingSemaphore>
 800187e:	4603      	mov	r3, r0
 8001880:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <freeRTOS_Tasks_Ini+0x134>)
 8001882:	6013      	str	r3, [r2, #0]

	//xSemaphore_Calibration = xQueueCreateCountingSemaphore(1, 0); // Первый аргмент - это максимальное количество счета, второй - начальное значение счетчика

	vSemaphoreCreateBinary(xSemaphore_Calibration); // Создание двоичного семафора
 8001884:	2203      	movs	r2, #3
 8001886:	2100      	movs	r1, #0
 8001888:	2001      	movs	r0, #1
 800188a:	f005 fe6a 	bl	8007562 <xQueueGenericCreate>
 800188e:	4603      	mov	r3, r0
 8001890:	4a45      	ldr	r2, [pc, #276]	; (80019a8 <freeRTOS_Tasks_Ini+0x138>)
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b44      	ldr	r3, [pc, #272]	; (80019a8 <freeRTOS_Tasks_Ini+0x138>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <freeRTOS_Tasks_Ini+0x3a>
 800189c:	4b42      	ldr	r3, [pc, #264]	; (80019a8 <freeRTOS_Tasks_Ini+0x138>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	2300      	movs	r3, #0
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	f005 fec5 	bl	8007634 <xQueueGenericSend>

	qBeepMode = xQueueCreate(1, sizeof( uint8_t )); // Очередь для передачи режима работы бипера
 80018aa:	2200      	movs	r2, #0
 80018ac:	2101      	movs	r1, #1
 80018ae:	2001      	movs	r0, #1
 80018b0:	f005 fe57 	bl	8007562 <xQueueGenericCreate>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a3d      	ldr	r2, [pc, #244]	; (80019ac <freeRTOS_Tasks_Ini+0x13c>)
 80018b8:	6013      	str	r3, [r2, #0]

	qWelderCmd = xQueueCreate(1, sizeof( uint8_t )); // Очередь для передачи команд управления кареткой
 80018ba:	2200      	movs	r2, #0
 80018bc:	2101      	movs	r1, #1
 80018be:	2001      	movs	r0, #1
 80018c0:	f005 fe4f 	bl	8007562 <xQueueGenericCreate>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a3a      	ldr	r2, [pc, #232]	; (80019b0 <freeRTOS_Tasks_Ini+0x140>)
 80018c8:	6013      	str	r3, [r2, #0]

	qGoToResponse = xQueueCreate(1, sizeof( uint8_t )); // Требуемая позиция занята
 80018ca:	2200      	movs	r2, #0
 80018cc:	2101      	movs	r1, #1
 80018ce:	2001      	movs	r0, #1
 80018d0:	f005 fe47 	bl	8007562 <xQueueGenericCreate>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a37      	ldr	r2, [pc, #220]	; (80019b4 <freeRTOS_Tasks_Ini+0x144>)
 80018d8:	6013      	str	r3, [r2, #0]

	//vSemaphoreCreateBinary(qDebug);

	qWelderRun = xQueueCreate(1, sizeof( uint8_t )); // Начать процесс варки
 80018da:	2200      	movs	r2, #0
 80018dc:	2101      	movs	r1, #1
 80018de:	2001      	movs	r0, #1
 80018e0:	f005 fe3f 	bl	8007562 <xQueueGenericCreate>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a34      	ldr	r2, [pc, #208]	; (80019b8 <freeRTOS_Tasks_Ini+0x148>)
 80018e8:	6013      	str	r3, [r2, #0]

	qWelderCalibrated = xQueueCreate(1, sizeof( uint8_t )); // Начать калибровку
 80018ea:	2200      	movs	r2, #0
 80018ec:	2101      	movs	r1, #1
 80018ee:	2001      	movs	r0, #1
 80018f0:	f005 fe37 	bl	8007562 <xQueueGenericCreate>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4a31      	ldr	r2, [pc, #196]	; (80019bc <freeRTOS_Tasks_Ini+0x14c>)
 80018f8:	6013      	str	r3, [r2, #0]

	qKeyPress = xQueueCreate(1, sizeof( uint8_t )); // Предача события о нажатии кнопки
 80018fa:	2200      	movs	r2, #0
 80018fc:	2101      	movs	r1, #1
 80018fe:	2001      	movs	r0, #1
 8001900:	f005 fe2f 	bl	8007562 <xQueueGenericCreate>
 8001904:	4603      	mov	r3, r0
 8001906:	4a2e      	ldr	r2, [pc, #184]	; (80019c0 <freeRTOS_Tasks_Ini+0x150>)
 8001908:	6013      	str	r3, [r2, #0]

	MicrostepDriver_Ini();
 800190a:	f7ff f87f 	bl	8000a0c <MicrostepDriver_Ini>

//	WELDER_Preset();

	xTaskCreate(vIndicatorPanel_Out, "IndicatorPanel_Out", 250, NULL, 2, NULL); // З-а вывода значений на панель
 800190e:	2300      	movs	r3, #0
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	2302      	movs	r3, #2
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	22fa      	movs	r2, #250	; 0xfa
 800191a:	492a      	ldr	r1, [pc, #168]	; (80019c4 <freeRTOS_Tasks_Ini+0x154>)
 800191c:	482a      	ldr	r0, [pc, #168]	; (80019c8 <freeRTOS_Tasks_Ini+0x158>)
 800191e:	f006 fba3 	bl	8008068 <xTaskCreate>

	xTaskCreate(vKeyScan, "KeyScan", 200, NULL, 2, NULL); // З-а опроса кнопок
 8001922:	2300      	movs	r3, #0
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	2302      	movs	r3, #2
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	22c8      	movs	r2, #200	; 0xc8
 800192e:	4927      	ldr	r1, [pc, #156]	; (80019cc <freeRTOS_Tasks_Ini+0x15c>)
 8001930:	4827      	ldr	r0, [pc, #156]	; (80019d0 <freeRTOS_Tasks_Ini+0x160>)
 8001932:	f006 fb99 	bl	8008068 <xTaskCreate>

	xTaskCreate(vBuzzer_beep, "Buzzer_beep", 200, NULL, 1, NULL); // З-а опроса кнопок
 8001936:	2300      	movs	r3, #0
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	2301      	movs	r3, #1
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2300      	movs	r3, #0
 8001940:	22c8      	movs	r2, #200	; 0xc8
 8001942:	4924      	ldr	r1, [pc, #144]	; (80019d4 <freeRTOS_Tasks_Ini+0x164>)
 8001944:	4824      	ldr	r0, [pc, #144]	; (80019d8 <freeRTOS_Tasks_Ini+0x168>)
 8001946:	f006 fb8f 	bl	8008068 <xTaskCreate>

	xTaskCreate(vWelder_Run, "Weleder_Run", 200, NULL, 2, NULL);
 800194a:	2300      	movs	r3, #0
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	2302      	movs	r3, #2
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2300      	movs	r3, #0
 8001954:	22c8      	movs	r2, #200	; 0xc8
 8001956:	4921      	ldr	r1, [pc, #132]	; (80019dc <freeRTOS_Tasks_Ini+0x16c>)
 8001958:	4821      	ldr	r0, [pc, #132]	; (80019e0 <freeRTOS_Tasks_Ini+0x170>)
 800195a:	f006 fb85 	bl	8008068 <xTaskCreate>

	xTaskCreate(vCarriage_GoTo, "Carriage_GoTo", 200, NULL, 3, NULL); // З-а перемещения каретки в заданную точку
 800195e:	2300      	movs	r3, #0
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	2303      	movs	r3, #3
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2300      	movs	r3, #0
 8001968:	22c8      	movs	r2, #200	; 0xc8
 800196a:	491e      	ldr	r1, [pc, #120]	; (80019e4 <freeRTOS_Tasks_Ini+0x174>)
 800196c:	481e      	ldr	r0, [pc, #120]	; (80019e8 <freeRTOS_Tasks_Ini+0x178>)
 800196e:	f006 fb7b 	bl	8008068 <xTaskCreate>

	xTaskCreate(vCarriage_Calibration, "Carriage_Calibration", 200, NULL, 2, NULL); // З-а перемещения каретки в заданную точку
 8001972:	2300      	movs	r3, #0
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	2302      	movs	r3, #2
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2300      	movs	r3, #0
 800197c:	22c8      	movs	r2, #200	; 0xc8
 800197e:	491b      	ldr	r1, [pc, #108]	; (80019ec <freeRTOS_Tasks_Ini+0x17c>)
 8001980:	481b      	ldr	r0, [pc, #108]	; (80019f0 <freeRTOS_Tasks_Ini+0x180>)
 8001982:	f006 fb71 	bl	8008068 <xTaskCreate>

	xTaskCreate(vKey_Action, "Key_Action", 200, NULL, 2, NULL); // З-а выполняет дейсвия в зависимости от нажатой кнопки и режима работы устройсво
 8001986:	2300      	movs	r3, #0
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	2302      	movs	r3, #2
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2300      	movs	r3, #0
 8001990:	22c8      	movs	r2, #200	; 0xc8
 8001992:	4918      	ldr	r1, [pc, #96]	; (80019f4 <freeRTOS_Tasks_Ini+0x184>)
 8001994:	4818      	ldr	r0, [pc, #96]	; (80019f8 <freeRTOS_Tasks_Ini+0x188>)
 8001996:	f006 fb67 	bl	8008068 <xTaskCreate>

	vTaskStartScheduler();
 800199a:	f006 fcb5 	bl	8008308 <vTaskStartScheduler>

}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20003564 	.word	0x20003564
 80019a8:	20003dc4 	.word	0x20003dc4
 80019ac:	20003538 	.word	0x20003538
 80019b0:	20003d94 	.word	0x20003d94
 80019b4:	20003d80 	.word	0x20003d80
 80019b8:	20003d88 	.word	0x20003d88
 80019bc:	20003d8c 	.word	0x20003d8c
 80019c0:	20003d90 	.word	0x20003d90
 80019c4:	0800990c 	.word	0x0800990c
 80019c8:	08003619 	.word	0x08003619
 80019cc:	08009920 	.word	0x08009920
 80019d0:	08002bed 	.word	0x08002bed
 80019d4:	08009928 	.word	0x08009928
 80019d8:	080036dd 	.word	0x080036dd
 80019dc:	08009934 	.word	0x08009934
 80019e0:	08002581 	.word	0x08002581
 80019e4:	08009940 	.word	0x08009940
 80019e8:	08002a1d 	.word	0x08002a1d
 80019ec:	08009950 	.word	0x08009950
 80019f0:	0800281d 	.word	0x0800281d
 80019f4:	08009968 	.word	0x08009968
 80019f8:	080019fd 	.word	0x080019fd

080019fc <vKey_Action>:

void vKey_Action(void *pvParameters)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed; // Номер нажатой кнопки или комбинации кнопок
	uint8_t beep_mode_send = beep_click; // Режим работы бипера
 8001a04:	2301      	movs	r3, #1
 8001a06:	73bb      	strb	r3, [r7, #14]
	uint8_t Cal = 0; // Передача команды калибровка
 8001a08:	2300      	movs	r3, #0
 8001a0a:	737b      	strb	r3, [r7, #13]
	uint8_t Run; // Переменная для передачи команды начало варки
	uint8_t Carriage_cmd = Cmd_CarriageGoTo; //Передача команды для начала движения каретки в заданную точку
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	72fb      	strb	r3, [r7, #11]


	for(;;)
	{
		xQueueReceive(qKeyPress, &KeyPressed, portMAX_DELAY ); // Ждать нажатия кнопки
 8001a10:	4ba9      	ldr	r3, [pc, #676]	; (8001cb8 <vKey_Action+0x2bc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f107 010f 	add.w	r1, r7, #15
 8001a18:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f005 ff61 	bl	80078e4 <xQueueReceive>

		switch(KeyPressed)
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	2b24      	cmp	r3, #36	; 0x24
 8001a26:	d8f3      	bhi.n	8001a10 <vKey_Action+0x14>
 8001a28:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <vKey_Action+0x34>)
 8001a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2e:	bf00      	nop
 8001a30:	08001a11 	.word	0x08001a11
 8001a34:	08001ac5 	.word	0x08001ac5
 8001a38:	08001b25 	.word	0x08001b25
 8001a3c:	08001b4f 	.word	0x08001b4f
 8001a40:	08001bbf 	.word	0x08001bbf
 8001a44:	08001bff 	.word	0x08001bff
 8001a48:	08001c75 	.word	0x08001c75
 8001a4c:	08001cc9 	.word	0x08001cc9
 8001a50:	08001d33 	.word	0x08001d33
 8001a54:	08001d67 	.word	0x08001d67
 8001a58:	08001d8f 	.word	0x08001d8f
 8001a5c:	08001db7 	.word	0x08001db7
 8001a60:	08001ddf 	.word	0x08001ddf
 8001a64:	08001e07 	.word	0x08001e07
 8001a68:	08001e2f 	.word	0x08001e2f
 8001a6c:	08001e57 	.word	0x08001e57
 8001a70:	08001e83 	.word	0x08001e83
 8001a74:	08001eaf 	.word	0x08001eaf
 8001a78:	08001ed7 	.word	0x08001ed7
 8001a7c:	08001eff 	.word	0x08001eff
 8001a80:	08001f27 	.word	0x08001f27
 8001a84:	08001f4f 	.word	0x08001f4f
 8001a88:	08001f89 	.word	0x08001f89
 8001a8c:	08001fb1 	.word	0x08001fb1
 8001a90:	08001fdd 	.word	0x08001fdd
 8001a94:	080020f7 	.word	0x080020f7
 8001a98:	08002123 	.word	0x08002123
 8001a9c:	08002141 	.word	0x08002141
 8001aa0:	080021a1 	.word	0x080021a1
 8001aa4:	080021bf 	.word	0x080021bf
 8001aa8:	08002483 	.word	0x08002483
 8001aac:	08002491 	.word	0x08002491
 8001ab0:	08001a11 	.word	0x08001a11
 8001ab4:	08002005 	.word	0x08002005
 8001ab8:	0800205f 	.word	0x0800205f
 8001abc:	08002071 	.word	0x08002071
 8001ac0:	080020cb 	.word	0x080020cb
			break;
		}

		case press_short_Xs_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001ac4:	4b7d      	ldr	r3, [pc, #500]	; (8001cbc <vKey_Action+0x2c0>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	f107 010e 	add.w	r1, r7, #14
 8001acc:	2300      	movs	r3, #0
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f005 fdb0 	bl	8007634 <xQueueGenericSend>

			if (WelderUnit.Xs > XS_MIN) // Проверка на попадание в допустимый диапазон значений
 8001ad4:	4b7a      	ldr	r3, [pc, #488]	; (8001cc0 <vKey_Action+0x2c4>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	2b0a      	cmp	r3, #10
 8001ada:	f240 84e8 	bls.w	80024ae <vKey_Action+0xab2>
			{
				WelderUnit.Xs--; // Исполнить
 8001ade:	4b78      	ldr	r3, [pc, #480]	; (8001cc0 <vKey_Action+0x2c4>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	4b76      	ldr	r3, [pc, #472]	; (8001cc0 <vKey_Action+0x2c4>)
 8001ae8:	801a      	strh	r2, [r3, #0]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001aea:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <vKey_Action+0x2c4>)
 8001aec:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	f040 84dc 	bne.w	80024ae <vKey_Action+0xab2>
 8001af6:	4b72      	ldr	r3, [pc, #456]	; (8001cc0 <vKey_Action+0x2c4>)
 8001af8:	7c1b      	ldrb	r3, [r3, #16]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 84d5 	beq.w	80024ae <vKey_Action+0xab2>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001b04:	2301      	movs	r3, #1
 8001b06:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xs;
 8001b08:	4b6d      	ldr	r3, [pc, #436]	; (8001cc0 <vKey_Action+0x2c4>)
 8001b0a:	881a      	ldrh	r2, [r3, #0]
 8001b0c:	4b6c      	ldr	r3, [pc, #432]	; (8001cc0 <vKey_Action+0x2c4>)
 8001b0e:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001b10:	4b6c      	ldr	r3, [pc, #432]	; (8001cc4 <vKey_Action+0x2c8>)
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	f107 010b 	add.w	r1, r7, #11
 8001b18:	2300      	movs	r3, #0
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f005 fd8a 	bl	8007634 <xQueueGenericSend>

				}
			}
			break;
 8001b20:	f000 bcc5 	b.w	80024ae <vKey_Action+0xab2>
		}

		case press_long_Xs_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b24:	4b65      	ldr	r3, [pc, #404]	; (8001cbc <vKey_Action+0x2c0>)
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	f107 010e 	add.w	r1, r7, #14
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f005 fd80 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Xs > XS_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001b34:	4b62      	ldr	r3, [pc, #392]	; (8001cc0 <vKey_Action+0x2c4>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	2b1e      	cmp	r3, #30
 8001b3a:	f240 84bb 	bls.w	80024b4 <vKey_Action+0xab8>
			{
				WelderUnit.Xs -= 20; // Дейсвия при длинном нажатии
 8001b3e:	4b60      	ldr	r3, [pc, #384]	; (8001cc0 <vKey_Action+0x2c4>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	3b14      	subs	r3, #20
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <vKey_Action+0x2c4>)
 8001b48:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001b4a:	f000 bcb3 	b.w	80024b4 <vKey_Action+0xab8>
		}

		case press_short_Xs_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b4e:	4b5b      	ldr	r3, [pc, #364]	; (8001cbc <vKey_Action+0x2c0>)
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	f107 010e 	add.w	r1, r7, #14
 8001b56:	2300      	movs	r3, #0
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f005 fd6b 	bl	8007634 <xQueueGenericSend>
			if ((WelderUnit.Xs < XS_MAX) && (WelderUnit.Xs < WelderUnit.Xf)) // Проверка на попадание в допустимый диапазон значений  и что бы Xs была меньше Xf
 8001b5e:	4b58      	ldr	r3, [pc, #352]	; (8001cc0 <vKey_Action+0x2c4>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001b66:	f080 84a8 	bcs.w	80024ba <vKey_Action+0xabe>
 8001b6a:	4b55      	ldr	r3, [pc, #340]	; (8001cc0 <vKey_Action+0x2c4>)
 8001b6c:	881a      	ldrh	r2, [r3, #0]
 8001b6e:	4b54      	ldr	r3, [pc, #336]	; (8001cc0 <vKey_Action+0x2c4>)
 8001b70:	885b      	ldrh	r3, [r3, #2]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	f080 84a1 	bcs.w	80024ba <vKey_Action+0xabe>
			{

			WelderUnit.Xs++; // Исполнить
 8001b78:	4b51      	ldr	r3, [pc, #324]	; (8001cc0 <vKey_Action+0x2c4>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	4b4f      	ldr	r3, [pc, #316]	; (8001cc0 <vKey_Action+0x2c4>)
 8001b82:	801a      	strh	r2, [r3, #0]

			// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
			if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001b84:	4b4e      	ldr	r3, [pc, #312]	; (8001cc0 <vKey_Action+0x2c4>)
 8001b86:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	f040 8495 	bne.w	80024ba <vKey_Action+0xabe>
 8001b90:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <vKey_Action+0x2c4>)
 8001b92:	7c1b      	ldrb	r3, [r3, #16]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 848e 	beq.w	80024ba <vKey_Action+0xabe>
			{
				Carriage_cmd = Cmd_CarriageGoTo;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	72fb      	strb	r3, [r7, #11]
				WelderUnit.GoTo = WelderUnit.Xs;
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <vKey_Action+0x2c4>)
 8001ba4:	881a      	ldrh	r2, [r3, #0]
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <vKey_Action+0x2c4>)
 8001ba8:	811a      	strh	r2, [r3, #8]
				xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001baa:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <vKey_Action+0x2c8>)
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	f107 010b 	add.w	r1, r7, #11
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f005 fd3d 	bl	8007634 <xQueueGenericSend>
			}

			}
			break;
 8001bba:	f000 bc7e 	b.w	80024ba <vKey_Action+0xabe>
		}

		case press_long_Xs_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001bbe:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <vKey_Action+0x2c0>)
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	f107 010e 	add.w	r1, r7, #14
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f005 fd33 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Xs < XS_MAX - 20 && WelderUnit.Xs < WelderUnit.Xf - 20) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
 8001bce:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <vKey_Action+0x2c4>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	f240 622b 	movw	r2, #1579	; 0x62b
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	f200 8472 	bhi.w	80024c0 <vKey_Action+0xac4>
 8001bdc:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <vKey_Action+0x2c4>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <vKey_Action+0x2c4>)
 8001be4:	885b      	ldrh	r3, [r3, #2]
 8001be6:	3b14      	subs	r3, #20
 8001be8:	429a      	cmp	r2, r3
 8001bea:	f280 8469 	bge.w	80024c0 <vKey_Action+0xac4>
			{
				WelderUnit.Xs += 20; // Дейсвия при длинном нажатии
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <vKey_Action+0x2c4>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	3314      	adds	r3, #20
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <vKey_Action+0x2c4>)
 8001bf8:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001bfa:	f000 bc61 	b.w	80024c0 <vKey_Action+0xac4>
		}

		case press_short_Xf_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <vKey_Action+0x2c0>)
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	f107 010e 	add.w	r1, r7, #14
 8001c06:	2300      	movs	r3, #0
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f005 fd13 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN && WelderUnit.Xf > WelderUnit.Xs) // Проверка на попадание в допустимый диапазон значений
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c10:	885b      	ldrh	r3, [r3, #2]
 8001c12:	2b14      	cmp	r3, #20
 8001c14:	f240 8457 	bls.w	80024c6 <vKey_Action+0xaca>
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c1a:	885a      	ldrh	r2, [r3, #2]
 8001c1c:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	f240 8450 	bls.w	80024c6 <vKey_Action+0xaca>
			{
				WelderUnit.Xf--; // Исполнить
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c28:	885b      	ldrh	r3, [r3, #2]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c30:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c34:	885a      	ldrh	r2, [r3, #2]
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c38:	811a      	strh	r2, [r3, #8]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c3c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	f040 8440 	bne.w	80024c6 <vKey_Action+0xaca>
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c48:	7c1b      	ldrb	r3, [r3, #16]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8439 	beq.w	80024c6 <vKey_Action+0xaca>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001c54:	2301      	movs	r3, #1
 8001c56:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xf;
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c5a:	885a      	ldrh	r2, [r3, #2]
 8001c5c:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c5e:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <vKey_Action+0x2c8>)
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	f107 010b 	add.w	r1, r7, #11
 8001c68:	2300      	movs	r3, #0
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f005 fce2 	bl	8007634 <xQueueGenericSend>

				}
			}
			break;
 8001c70:	f000 bc29 	b.w	80024c6 <vKey_Action+0xaca>
		}

		case press_long_Xf_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <vKey_Action+0x2c0>)
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	f107 010e 	add.w	r1, r7, #14
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f005 fcd8 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN + 20 && WelderUnit.Xf > WelderUnit.Xs + 20 ) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c86:	885b      	ldrh	r3, [r3, #2]
 8001c88:	2b28      	cmp	r3, #40	; 0x28
 8001c8a:	f240 841f 	bls.w	80024cc <vKey_Action+0xad0>
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c90:	885b      	ldrh	r3, [r3, #2]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <vKey_Action+0x2c4>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	3314      	adds	r3, #20
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	f340 8416 	ble.w	80024cc <vKey_Action+0xad0>
			{
				WelderUnit.Xf -= 20; // Дейсвия при длинном нажатии
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <vKey_Action+0x2c4>)
 8001ca2:	885b      	ldrh	r3, [r3, #2]
 8001ca4:	3b14      	subs	r3, #20
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <vKey_Action+0x2c4>)
 8001caa:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <vKey_Action+0x2c4>)
 8001cae:	885a      	ldrh	r2, [r3, #2]
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <vKey_Action+0x2c4>)
 8001cb2:	811a      	strh	r2, [r3, #8]
			}
			break;
 8001cb4:	f000 bc0a 	b.w	80024cc <vKey_Action+0xad0>
 8001cb8:	20003d90 	.word	0x20003d90
 8001cbc:	20003538 	.word	0x20003538
 8001cc0:	2000353c 	.word	0x2000353c
 8001cc4:	20003d94 	.word	0x20003d94
		}

		case press_short_Xf_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001cc8:	4bac      	ldr	r3, [pc, #688]	; (8001f7c <vKey_Action+0x580>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	f107 010e 	add.w	r1, r7, #14
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f005 fcae 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001cd8:	4ba9      	ldr	r3, [pc, #676]	; (8001f80 <vKey_Action+0x584>)
 8001cda:	885b      	ldrh	r3, [r3, #2]
 8001cdc:	f240 6271 	movw	r2, #1649	; 0x671
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	f200 83f6 	bhi.w	80024d2 <vKey_Action+0xad6>
			{
				WelderUnit.Xf++; // Исполнить
 8001ce6:	4ba6      	ldr	r3, [pc, #664]	; (8001f80 <vKey_Action+0x584>)
 8001ce8:	885b      	ldrh	r3, [r3, #2]
 8001cea:	3301      	adds	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	4ba4      	ldr	r3, [pc, #656]	; (8001f80 <vKey_Action+0x584>)
 8001cf0:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001cf2:	4ba3      	ldr	r3, [pc, #652]	; (8001f80 <vKey_Action+0x584>)
 8001cf4:	885a      	ldrh	r2, [r3, #2]
 8001cf6:	4ba2      	ldr	r3, [pc, #648]	; (8001f80 <vKey_Action+0x584>)
 8001cf8:	811a      	strh	r2, [r3, #8]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001cfa:	4ba1      	ldr	r3, [pc, #644]	; (8001f80 <vKey_Action+0x584>)
 8001cfc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	f040 83e6 	bne.w	80024d2 <vKey_Action+0xad6>
 8001d06:	4b9e      	ldr	r3, [pc, #632]	; (8001f80 <vKey_Action+0x584>)
 8001d08:	7c1b      	ldrb	r3, [r3, #16]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 83df 	beq.w	80024d2 <vKey_Action+0xad6>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001d14:	2301      	movs	r3, #1
 8001d16:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xf;
 8001d18:	4b99      	ldr	r3, [pc, #612]	; (8001f80 <vKey_Action+0x584>)
 8001d1a:	885a      	ldrh	r2, [r3, #2]
 8001d1c:	4b98      	ldr	r3, [pc, #608]	; (8001f80 <vKey_Action+0x584>)
 8001d1e:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001d20:	4b98      	ldr	r3, [pc, #608]	; (8001f84 <vKey_Action+0x588>)
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	f107 010b 	add.w	r1, r7, #11
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f005 fc82 	bl	8007634 <xQueueGenericSend>

				}
			}
			break;
 8001d30:	e3cf      	b.n	80024d2 <vKey_Action+0xad6>
		}

		case press_long_Xf_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d32:	4b92      	ldr	r3, [pc, #584]	; (8001f7c <vKey_Action+0x580>)
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	f107 010e 	add.w	r1, r7, #14
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f005 fc79 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX - 20 ) // Проверка на попадание в допустимый диапазон значений
 8001d42:	4b8f      	ldr	r3, [pc, #572]	; (8001f80 <vKey_Action+0x584>)
 8001d44:	885b      	ldrh	r3, [r3, #2]
 8001d46:	f240 625d 	movw	r2, #1629	; 0x65d
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	f200 83c4 	bhi.w	80024d8 <vKey_Action+0xadc>
			{
				WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 8001d50:	4b8b      	ldr	r3, [pc, #556]	; (8001f80 <vKey_Action+0x584>)
 8001d52:	885b      	ldrh	r3, [r3, #2]
 8001d54:	3314      	adds	r3, #20
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	4b89      	ldr	r3, [pc, #548]	; (8001f80 <vKey_Action+0x584>)
 8001d5a:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001d5c:	4b88      	ldr	r3, [pc, #544]	; (8001f80 <vKey_Action+0x584>)
 8001d5e:	885a      	ldrh	r2, [r3, #2]
 8001d60:	4b87      	ldr	r3, [pc, #540]	; (8001f80 <vKey_Action+0x584>)
 8001d62:	811a      	strh	r2, [r3, #8]
			}
			break;
 8001d64:	e3b8      	b.n	80024d8 <vKey_Action+0xadc>

		}

		case press_short_Delay_s_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d66:	4b85      	ldr	r3, [pc, #532]	; (8001f7c <vKey_Action+0x580>)
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	f107 010e 	add.w	r1, r7, #14
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2200      	movs	r2, #0
 8001d72:	f005 fc5f 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN) // Проверка на попадание в допустимый диапазон значений
 8001d76:	4b82      	ldr	r3, [pc, #520]	; (8001f80 <vKey_Action+0x584>)
 8001d78:	7a9b      	ldrb	r3, [r3, #10]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	f240 83af 	bls.w	80024de <vKey_Action+0xae2>
			{
				WelderUnit.Delay_s--; // Исполнить
 8001d80:	4b7f      	ldr	r3, [pc, #508]	; (8001f80 <vKey_Action+0x584>)
 8001d82:	7a9b      	ldrb	r3, [r3, #10]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	4b7d      	ldr	r3, [pc, #500]	; (8001f80 <vKey_Action+0x584>)
 8001d8a:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001d8c:	e3a7      	b.n	80024de <vKey_Action+0xae2>
		}

		case press_long_Delay_s_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d8e:	4b7b      	ldr	r3, [pc, #492]	; (8001f7c <vKey_Action+0x580>)
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	f107 010e 	add.w	r1, r7, #14
 8001d96:	2300      	movs	r3, #0
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f005 fc4b 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN + 10) // Проверка на попадание в допустимый диапазон значений
 8001d9e:	4b78      	ldr	r3, [pc, #480]	; (8001f80 <vKey_Action+0x584>)
 8001da0:	7a9b      	ldrb	r3, [r3, #10]
 8001da2:	2b0b      	cmp	r3, #11
 8001da4:	f240 839e 	bls.w	80024e4 <vKey_Action+0xae8>
			{
				WelderUnit.Delay_s -= 10; // Дейсвия при длинном нажатии
 8001da8:	4b75      	ldr	r3, [pc, #468]	; (8001f80 <vKey_Action+0x584>)
 8001daa:	7a9b      	ldrb	r3, [r3, #10]
 8001dac:	3b0a      	subs	r3, #10
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	4b73      	ldr	r3, [pc, #460]	; (8001f80 <vKey_Action+0x584>)
 8001db2:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001db4:	e396      	b.n	80024e4 <vKey_Action+0xae8>
		}

		case press_short_Delay_s_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001db6:	4b71      	ldr	r3, [pc, #452]	; (8001f7c <vKey_Action+0x580>)
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	f107 010e 	add.w	r1, r7, #14
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f005 fc37 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001dc6:	4b6e      	ldr	r3, [pc, #440]	; (8001f80 <vKey_Action+0x584>)
 8001dc8:	7a9b      	ldrb	r3, [r3, #10]
 8001dca:	2b31      	cmp	r3, #49	; 0x31
 8001dcc:	f200 838d 	bhi.w	80024ea <vKey_Action+0xaee>
			{
				WelderUnit.Delay_s++; // Исполнить
 8001dd0:	4b6b      	ldr	r3, [pc, #428]	; (8001f80 <vKey_Action+0x584>)
 8001dd2:	7a9b      	ldrb	r3, [r3, #10]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	4b69      	ldr	r3, [pc, #420]	; (8001f80 <vKey_Action+0x584>)
 8001dda:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001ddc:	e385      	b.n	80024ea <vKey_Action+0xaee>
		}

		case press_long_Delay_s_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001dde:	4b67      	ldr	r3, [pc, #412]	; (8001f7c <vKey_Action+0x580>)
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	f107 010e 	add.w	r1, r7, #14
 8001de6:	2300      	movs	r3, #0
 8001de8:	2200      	movs	r2, #0
 8001dea:	f005 fc23 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
 8001dee:	4b64      	ldr	r3, [pc, #400]	; (8001f80 <vKey_Action+0x584>)
 8001df0:	7a9b      	ldrb	r3, [r3, #10]
 8001df2:	2b27      	cmp	r3, #39	; 0x27
 8001df4:	f200 837c 	bhi.w	80024f0 <vKey_Action+0xaf4>
			{
				WelderUnit.Delay_s += 10; // Дейсвия при длинном нажатии
 8001df8:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <vKey_Action+0x584>)
 8001dfa:	7a9b      	ldrb	r3, [r3, #10]
 8001dfc:	330a      	adds	r3, #10
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	4b5f      	ldr	r3, [pc, #380]	; (8001f80 <vKey_Action+0x584>)
 8001e02:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001e04:	e374      	b.n	80024f0 <vKey_Action+0xaf4>
		}

		case press_short_Speed_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e06:	4b5d      	ldr	r3, [pc, #372]	; (8001f7c <vKey_Action+0x580>)
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	f107 010e 	add.w	r1, r7, #14
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2200      	movs	r2, #0
 8001e12:	f005 fc0f 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN) // Проверка на попадание в допустимый диапазон значений
 8001e16:	4b5a      	ldr	r3, [pc, #360]	; (8001f80 <vKey_Action+0x584>)
 8001e18:	88db      	ldrh	r3, [r3, #6]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	f240 836b 	bls.w	80024f6 <vKey_Action+0xafa>
			{
				WelderUnit.Speed--; // Исполнить
 8001e20:	4b57      	ldr	r3, [pc, #348]	; (8001f80 <vKey_Action+0x584>)
 8001e22:	88db      	ldrh	r3, [r3, #6]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b55      	ldr	r3, [pc, #340]	; (8001f80 <vKey_Action+0x584>)
 8001e2a:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e2c:	e363      	b.n	80024f6 <vKey_Action+0xafa>
		}

		case press_long_Speed_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e2e:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <vKey_Action+0x580>)
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	f107 010e 	add.w	r1, r7, #14
 8001e36:	2300      	movs	r3, #0
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f005 fbfb 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001e3e:	4b50      	ldr	r3, [pc, #320]	; (8001f80 <vKey_Action+0x584>)
 8001e40:	88db      	ldrh	r3, [r3, #6]
 8001e42:	2b15      	cmp	r3, #21
 8001e44:	f240 835a 	bls.w	80024fc <vKey_Action+0xb00>
			{
				WelderUnit.Speed -= 20; // Дейсвия при длинном нажатии
 8001e48:	4b4d      	ldr	r3, [pc, #308]	; (8001f80 <vKey_Action+0x584>)
 8001e4a:	88db      	ldrh	r3, [r3, #6]
 8001e4c:	3b14      	subs	r3, #20
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	4b4b      	ldr	r3, [pc, #300]	; (8001f80 <vKey_Action+0x584>)
 8001e52:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e54:	e352      	b.n	80024fc <vKey_Action+0xb00>
		}

		case press_short_Speed_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e56:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <vKey_Action+0x580>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	f107 010e 	add.w	r1, r7, #14
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2200      	movs	r2, #0
 8001e62:	f005 fbe7 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <vKey_Action+0x584>)
 8001e68:	88db      	ldrh	r3, [r3, #6]
 8001e6a:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	f200 8358 	bhi.w	8002524 <vKey_Action+0xb28>
			{
				WelderUnit.Speed++; // Исполнить
 8001e74:	4b42      	ldr	r3, [pc, #264]	; (8001f80 <vKey_Action+0x584>)
 8001e76:	88db      	ldrh	r3, [r3, #6]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <vKey_Action+0x584>)
 8001e7e:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e80:	e350      	b.n	8002524 <vKey_Action+0xb28>
		}

		case press_long_Speed_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e82:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <vKey_Action+0x580>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	f107 010e 	add.w	r1, r7, #14
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f005 fbd1 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8001e92:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <vKey_Action+0x584>)
 8001e94:	88db      	ldrh	r3, [r3, #6]
 8001e96:	f240 32d2 	movw	r2, #978	; 0x3d2
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	f200 8345 	bhi.w	800252a <vKey_Action+0xb2e>
			{
				WelderUnit.Speed += 20; // Дейсвия при длинном нажатии
 8001ea0:	4b37      	ldr	r3, [pc, #220]	; (8001f80 <vKey_Action+0x584>)
 8001ea2:	88db      	ldrh	r3, [r3, #6]
 8001ea4:	3314      	adds	r3, #20
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <vKey_Action+0x584>)
 8001eaa:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001eac:	e33d      	b.n	800252a <vKey_Action+0xb2e>
		}

		case press_short_Delay_f_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001eae:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <vKey_Action+0x580>)
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	f107 010e 	add.w	r1, r7, #14
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f005 fbbb 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN) // Проверка на попадание в допустимый диапазон значений
 8001ebe:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <vKey_Action+0x584>)
 8001ec0:	7adb      	ldrb	r3, [r3, #11]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	f240 8334 	bls.w	8002530 <vKey_Action+0xb34>
			{
				WelderUnit.Delay_f--; // Исполнить
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <vKey_Action+0x584>)
 8001eca:	7adb      	ldrb	r3, [r3, #11]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <vKey_Action+0x584>)
 8001ed2:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001ed4:	e32c      	b.n	8002530 <vKey_Action+0xb34>
		}

		case press_long_Delay_f_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <vKey_Action+0x580>)
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	f107 010e 	add.w	r1, r7, #14
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f005 fba7 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN + 10) // Проверка на попадание в допустимый диапазон значений
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <vKey_Action+0x584>)
 8001ee8:	7adb      	ldrb	r3, [r3, #11]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	f240 8323 	bls.w	8002536 <vKey_Action+0xb3a>
			{
				WelderUnit.Delay_f -= 10; // Дейсвия при длинном нажатии
 8001ef0:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <vKey_Action+0x584>)
 8001ef2:	7adb      	ldrb	r3, [r3, #11]
 8001ef4:	3b0a      	subs	r3, #10
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <vKey_Action+0x584>)
 8001efa:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001efc:	e31b      	b.n	8002536 <vKey_Action+0xb3a>
		}

		case press_short_Delay_f_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <vKey_Action+0x580>)
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	f107 010e 	add.w	r1, r7, #14
 8001f06:	2300      	movs	r3, #0
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f005 fb93 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX) // Проверка на попадание в допустимый диапазон значений
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <vKey_Action+0x584>)
 8001f10:	7adb      	ldrb	r3, [r3, #11]
 8001f12:	2b45      	cmp	r3, #69	; 0x45
 8001f14:	f200 8312 	bhi.w	800253c <vKey_Action+0xb40>
			{
				WelderUnit.Delay_f++; // Исполнить
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <vKey_Action+0x584>)
 8001f1a:	7adb      	ldrb	r3, [r3, #11]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <vKey_Action+0x584>)
 8001f22:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001f24:	e30a      	b.n	800253c <vKey_Action+0xb40>
		}

		case press_long_Delay_f_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <vKey_Action+0x580>)
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	f107 010e 	add.w	r1, r7, #14
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2200      	movs	r2, #0
 8001f32:	f005 fb7f 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <vKey_Action+0x584>)
 8001f38:	7adb      	ldrb	r3, [r3, #11]
 8001f3a:	2b3b      	cmp	r3, #59	; 0x3b
 8001f3c:	f200 8301 	bhi.w	8002542 <vKey_Action+0xb46>
			{
				WelderUnit.Delay_f += 10; // Дейсвия при длинном нажатии
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <vKey_Action+0x584>)
 8001f42:	7adb      	ldrb	r3, [r3, #11]
 8001f44:	330a      	adds	r3, #10
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <vKey_Action+0x584>)
 8001f4a:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001f4c:	e2f9      	b.n	8002542 <vKey_Action+0xb46>
		}

		case press_short_Program_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <vKey_Action+0x580>)
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	f107 010e 	add.w	r1, r7, #14
 8001f56:	2300      	movs	r3, #0
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f005 fb6b 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN) // Проверка на попадание в допустимый диапазон значений
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <vKey_Action+0x584>)
 8001f60:	899b      	ldrh	r3, [r3, #12]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	f240 82f0 	bls.w	8002548 <vKey_Action+0xb4c>
			{
				WelderUnit.Program--; // Исполнить
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <vKey_Action+0x584>)
 8001f6a:	899b      	ldrh	r3, [r3, #12]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <vKey_Action+0x584>)
 8001f72:	819a      	strh	r2, [r3, #12]
				ReadProgramFromFlash2();
 8001f74:	f7ff f988 	bl	8001288 <ReadProgramFromFlash2>
			}
			break;
 8001f78:	e2e6      	b.n	8002548 <vKey_Action+0xb4c>
 8001f7a:	bf00      	nop
 8001f7c:	20003538 	.word	0x20003538
 8001f80:	2000353c 	.word	0x2000353c
 8001f84:	20003d94 	.word	0x20003d94
		}

		case press_long_Program_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f88:	4b98      	ldr	r3, [pc, #608]	; (80021ec <vKey_Action+0x7f0>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	f107 010e 	add.w	r1, r7, #14
 8001f90:	2300      	movs	r3, #0
 8001f92:	2200      	movs	r2, #0
 8001f94:	f005 fb4e 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001f98:	4b95      	ldr	r3, [pc, #596]	; (80021f0 <vKey_Action+0x7f4>)
 8001f9a:	899b      	ldrh	r3, [r3, #12]
 8001f9c:	2b15      	cmp	r3, #21
 8001f9e:	f240 82d6 	bls.w	800254e <vKey_Action+0xb52>
			{
				WelderUnit.Program -= 20; // Дейсвия при длинном нажатии
 8001fa2:	4b93      	ldr	r3, [pc, #588]	; (80021f0 <vKey_Action+0x7f4>)
 8001fa4:	899b      	ldrh	r3, [r3, #12]
 8001fa6:	3b14      	subs	r3, #20
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	4b91      	ldr	r3, [pc, #580]	; (80021f0 <vKey_Action+0x7f4>)
 8001fac:	819a      	strh	r2, [r3, #12]
			}
			break;
 8001fae:	e2ce      	b.n	800254e <vKey_Action+0xb52>
		}

		case press_short_Program_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 );
 8001fb0:	4b8e      	ldr	r3, [pc, #568]	; (80021ec <vKey_Action+0x7f0>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	f107 010e 	add.w	r1, r7, #14
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f005 fb3a 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX) // Проверка на попадание в допустимый диапазон значений
 8001fc0:	4b8b      	ldr	r3, [pc, #556]	; (80021f0 <vKey_Action+0x7f4>)
 8001fc2:	899b      	ldrh	r3, [r3, #12]
 8001fc4:	2b45      	cmp	r3, #69	; 0x45
 8001fc6:	f200 82c5 	bhi.w	8002554 <vKey_Action+0xb58>
			{
				WelderUnit.Program++; // Исполнить
 8001fca:	4b89      	ldr	r3, [pc, #548]	; (80021f0 <vKey_Action+0x7f4>)
 8001fcc:	899b      	ldrh	r3, [r3, #12]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b87      	ldr	r3, [pc, #540]	; (80021f0 <vKey_Action+0x7f4>)
 8001fd4:	819a      	strh	r2, [r3, #12]
				ReadProgramFromFlash2(); //
 8001fd6:	f7ff f957 	bl	8001288 <ReadProgramFromFlash2>
				//SaveProgramToFlash2();
			}
			break;
 8001fda:	e2bb      	b.n	8002554 <vKey_Action+0xb58>
		}

		case press_long_Program_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001fdc:	4b83      	ldr	r3, [pc, #524]	; (80021ec <vKey_Action+0x7f0>)
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	f107 010e 	add.w	r1, r7, #14
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f005 fb24 	bl	8007634 <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8001fec:	4b80      	ldr	r3, [pc, #512]	; (80021f0 <vKey_Action+0x7f4>)
 8001fee:	899b      	ldrh	r3, [r3, #12]
 8001ff0:	2b31      	cmp	r3, #49	; 0x31
 8001ff2:	f200 82b2 	bhi.w	800255a <vKey_Action+0xb5e>
			{
				WelderUnit.Program += 20; // Дейсвия при длинном нажатии
 8001ff6:	4b7e      	ldr	r3, [pc, #504]	; (80021f0 <vKey_Action+0x7f4>)
 8001ff8:	899b      	ldrh	r3, [r3, #12]
 8001ffa:	3314      	adds	r3, #20
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	4b7c      	ldr	r3, [pc, #496]	; (80021f0 <vKey_Action+0x7f4>)
 8002000:	819a      	strh	r2, [r3, #12]
			}
			break;
 8002002:	e2aa      	b.n	800255a <vKey_Action+0xb5e>
		}


		case press_short_Down:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002004:	4b79      	ldr	r3, [pc, #484]	; (80021ec <vKey_Action+0x7f0>)
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	f107 010e 	add.w	r1, r7, #14
 800200c:	2300      	movs	r3, #0
 800200e:	2200      	movs	r2, #0
 8002010:	f005 fb10 	bl	8007634 <xQueueGenericSend>
					if ((WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) && WelderUnit.Mode == WELDER_MODE_MANUAL) // Если задняя дверца закрыта и режим работы аппарата ручной, то разрешить опускание головки.
 8002014:	4b76      	ldr	r3, [pc, #472]	; (80021f0 <vKey_Action+0x7f4>)
 8002016:	7c1b      	ldrb	r3, [r3, #16]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 829f 	beq.w	8002560 <vKey_Action+0xb64>
 8002022:	4b73      	ldr	r3, [pc, #460]	; (80021f0 <vKey_Action+0x7f4>)
 8002024:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002028:	2b02      	cmp	r3, #2
 800202a:	f040 8299 	bne.w	8002560 <vKey_Action+0xb64>
					{
						WELDER_HEAD_DOWN // Опустить сварочную головку
 800202e:	2201      	movs	r2, #1
 8002030:	2106      	movs	r1, #6
 8002032:	4870      	ldr	r0, [pc, #448]	; (80021f4 <vKey_Action+0x7f8>)
 8002034:	f002 fded 	bl	8004c12 <HAL_GPIO_WritePin>
						WelderUnit.IndicatorPanel.LEDsState |= LED_DOWN; // Индикация что головка опущена
 8002038:	4b6d      	ldr	r3, [pc, #436]	; (80021f0 <vKey_Action+0x7f4>)
 800203a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <vKey_Action+0x7f4>)
 8002046:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						WelderUnit.IndicatorPanel.LEDsState &= ~LED_UP; // Индикация что головка опущена
 800204a:	4b69      	ldr	r3, [pc, #420]	; (80021f0 <vKey_Action+0x7f4>)
 800204c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002050:	f023 0308 	bic.w	r3, r3, #8
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b66      	ldr	r3, [pc, #408]	; (80021f0 <vKey_Action+0x7f4>)
 8002058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					}

					break;
 800205c:	e280      	b.n	8002560 <vKey_Action+0xb64>
				}

				case press_long_Down:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 800205e:	4b63      	ldr	r3, [pc, #396]	; (80021ec <vKey_Action+0x7f0>)
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	f107 010e 	add.w	r1, r7, #14
 8002066:	2300      	movs	r3, #0
 8002068:	2200      	movs	r2, #0
 800206a:	f005 fae3 	bl	8007634 <xQueueGenericSend>
//					if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
//					{
//						WelderUnit.Speed -= 20; // Дейсвия при длинном нажатии
//					}
					break;
 800206e:	e284      	b.n	800257a <vKey_Action+0xb7e>
				}

				case press_short_Up:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002070:	4b5e      	ldr	r3, [pc, #376]	; (80021ec <vKey_Action+0x7f0>)
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	f107 010e 	add.w	r1, r7, #14
 8002078:	2300      	movs	r3, #0
 800207a:	2200      	movs	r2, #0
 800207c:	f005 fada 	bl	8007634 <xQueueGenericSend>
					if ((WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) && WelderUnit.Mode == WELDER_MODE_MANUAL) // Если задняя дверца закрыта и режим работы аппарата ручной, то разрешить подъем головки
 8002080:	4b5b      	ldr	r3, [pc, #364]	; (80021f0 <vKey_Action+0x7f4>)
 8002082:	7c1b      	ldrb	r3, [r3, #16]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 826c 	beq.w	8002566 <vKey_Action+0xb6a>
 800208e:	4b58      	ldr	r3, [pc, #352]	; (80021f0 <vKey_Action+0x7f4>)
 8002090:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002094:	2b02      	cmp	r3, #2
 8002096:	f040 8266 	bne.w	8002566 <vKey_Action+0xb6a>
					{
					WELDER_HEAD_UP // Поднять сварочную головку
 800209a:	2200      	movs	r2, #0
 800209c:	2106      	movs	r1, #6
 800209e:	4855      	ldr	r0, [pc, #340]	; (80021f4 <vKey_Action+0x7f8>)
 80020a0:	f002 fdb7 	bl	8004c12 <HAL_GPIO_WritePin>
					WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация что головка поднята
 80020a4:	4b52      	ldr	r3, [pc, #328]	; (80021f0 <vKey_Action+0x7f4>)
 80020a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020aa:	f043 0308 	orr.w	r3, r3, #8
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b4f      	ldr	r3, [pc, #316]	; (80021f0 <vKey_Action+0x7f4>)
 80020b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN; // Индикация что головка поднята
 80020b6:	4b4e      	ldr	r3, [pc, #312]	; (80021f0 <vKey_Action+0x7f4>)
 80020b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020bc:	f023 0304 	bic.w	r3, r3, #4
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <vKey_Action+0x7f4>)
 80020c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					}
					break;
 80020c8:	e24d      	b.n	8002566 <vKey_Action+0xb6a>
				}

				case press_long_Up:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80020ca:	4b48      	ldr	r3, [pc, #288]	; (80021ec <vKey_Action+0x7f0>)
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	f107 010e 	add.w	r1, r7, #14
 80020d2:	2300      	movs	r3, #0
 80020d4:	2200      	movs	r2, #0
 80020d6:	f005 faad 	bl	8007634 <xQueueGenericSend>
					if (WelderUnit.Speed < SPEED_MAX - 20 ) // Проверка на попадание в допустимый диапазон значений
 80020da:	4b45      	ldr	r3, [pc, #276]	; (80021f0 <vKey_Action+0x7f4>)
 80020dc:	88db      	ldrh	r3, [r3, #6]
 80020de:	f240 32d2 	movw	r2, #978	; 0x3d2
 80020e2:	4293      	cmp	r3, r2
 80020e4:	f200 8242 	bhi.w	800256c <vKey_Action+0xb70>
					{
						WelderUnit.Speed += 20; // Дейсвия при длинном нажатии
 80020e8:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <vKey_Action+0x7f4>)
 80020ea:	88db      	ldrh	r3, [r3, #6]
 80020ec:	3314      	adds	r3, #20
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <vKey_Action+0x7f4>)
 80020f2:	80da      	strh	r2, [r3, #6]
					}
					break;
 80020f4:	e23a      	b.n	800256c <vKey_Action+0xb70>



		case press_short_Parking:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80020f6:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <vKey_Action+0x7f0>)
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	f107 010e 	add.w	r1, r7, #14
 80020fe:	2300      	movs	r3, #0
 8002100:	2200      	movs	r2, #0
 8002102:	f005 fa97 	bl	8007634 <xQueueGenericSend>

			WelderUnit.Mode = WELDER_MODE_CALIBRATION; //Задать режим работы аппарата - калибровка
 8002106:	4b3a      	ldr	r3, [pc, #232]	; (80021f0 <vKey_Action+0x7f4>)
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

			//WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отключении индикации режима АВТО
			WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING; // Отображение что выбран режим калибровки
 800210e:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <vKey_Action+0x7f4>)
 8002110:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <vKey_Action+0x7f4>)
 800211c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

			break;
 8002120:	e22b      	b.n	800257a <vKey_Action+0xb7e>
		}

		case press_long_Parking:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002122:	4b32      	ldr	r3, [pc, #200]	; (80021ec <vKey_Action+0x7f0>)
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	f107 010e 	add.w	r1, r7, #14
 800212a:	2300      	movs	r3, #0
 800212c:	2200      	movs	r2, #0
 800212e:	f005 fa81 	bl	8007634 <xQueueGenericSend>
			WelderUnit.Xf -= 20; // Дейсвия при длинном нажатии
 8002132:	4b2f      	ldr	r3, [pc, #188]	; (80021f0 <vKey_Action+0x7f4>)
 8002134:	885b      	ldrh	r3, [r3, #2]
 8002136:	3b14      	subs	r3, #20
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <vKey_Action+0x7f4>)
 800213c:	805a      	strh	r2, [r3, #2]

			break;
 800213e:	e21c      	b.n	800257a <vKey_Action+0xb7e>
		}

		case press_short_Auto:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 );
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <vKey_Action+0x7f0>)
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	f107 010e 	add.w	r1, r7, #14
 8002148:	2300      	movs	r3, #0
 800214a:	2200      	movs	r2, #0
 800214c:	f005 fa72 	bl	8007634 <xQueueGenericSend>


			if (WelderUnit.State & WELDER_STATE_CALIBRATED) // Если аппарат откалиброван, то разрешить включение режима АВТО
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <vKey_Action+0x7f4>)
 8002152:	7c1b      	ldrb	r3, [r3, #16]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 820a 	beq.w	8002572 <vKey_Action+0xb76>
			{
				if (WelderUnit.Mode != WELDER_MODE_AUTO) // Если уже не выбран режим АВТО, то включить его, иначе включить Ручной режим
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <vKey_Action+0x7f4>)
 8002160:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002164:	2b03      	cmp	r3, #3
 8002166:	d00d      	beq.n	8002184 <vKey_Action+0x788>
				{
					WelderUnit.Mode = WELDER_MODE_AUTO;
 8002168:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <vKey_Action+0x7f4>)
 800216a:	2203      	movs	r2, #3
 800216c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					WelderUnit.IndicatorPanel.LEDsState |= LED_AUTO; // Отображение что выбран режим калибровки
 8002170:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <vKey_Action+0x7f4>)
 8002172:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	b2da      	uxtb	r2, r3
 800217c:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <vKey_Action+0x7f4>)
 800217e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отображение что выбран режим калибровки
				}

			}

			break;
 8002182:	e1f6      	b.n	8002572 <vKey_Action+0xb76>
					WelderUnit.Mode = WELDER_MODE_MANUAL;
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <vKey_Action+0x7f4>)
 8002186:	2202      	movs	r2, #2
 8002188:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отображение что выбран режим калибровки
 800218c:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <vKey_Action+0x7f4>)
 800218e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	b2da      	uxtb	r2, r3
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <vKey_Action+0x7f4>)
 800219a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			break;
 800219e:	e1e8      	b.n	8002572 <vKey_Action+0xb76>
		}

		case press_long_Auto:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <vKey_Action+0x7f0>)
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	f107 010e 	add.w	r1, r7, #14
 80021a8:	2300      	movs	r3, #0
 80021aa:	2200      	movs	r2, #0
 80021ac:	f005 fa42 	bl	8007634 <xQueueGenericSend>
			WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <vKey_Action+0x7f4>)
 80021b2:	885b      	ldrh	r3, [r3, #2]
 80021b4:	3314      	adds	r3, #20
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <vKey_Action+0x7f4>)
 80021ba:	805a      	strh	r2, [r3, #2]
			break;
 80021bc:	e1dd      	b.n	800257a <vKey_Action+0xb7e>
		}

		case press_short_StartStop:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <vKey_Action+0x7f0>)
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	f107 010e 	add.w	r1, r7, #14
 80021c6:	2300      	movs	r3, #0
 80021c8:	2200      	movs	r2, #0
 80021ca:	f005 fa33 	bl	8007634 <xQueueGenericSend>

			// Дейсвия при нажатии на кнопку СТАРТ/СТОП в зависимости от установленного режима работы аппарата
			switch(WelderUnit.Mode)
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <vKey_Action+0x7f4>)
 80021d0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	f000 80d8 	beq.w	800238a <vKey_Action+0x98e>
 80021da:	2b03      	cmp	r3, #3
 80021dc:	f300 81cc 	bgt.w	8002578 <vKey_Action+0xb7c>
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d009      	beq.n	80021f8 <vKey_Action+0x7fc>
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d061      	beq.n	80022ac <vKey_Action+0x8b0>


//			Carriage_cmd = Cmd_CarriageGoTo;
//			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к

			break;
 80021e8:	e1c6      	b.n	8002578 <vKey_Action+0xb7c>
 80021ea:	bf00      	nop
 80021ec:	20003538 	.word	0x20003538
 80021f0:	2000353c 	.word	0x2000353c
 80021f4:	40011000 	.word	0x40011000
				if (WelderUnit.State & WELDER_CLIBRATION_PROCESS)
 80021f8:	4bc2      	ldr	r3, [pc, #776]	; (8002504 <vKey_Action+0xb08>)
 80021fa:	7c1b      	ldrb	r3, [r3, #16]
 80021fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d041      	beq.n	8002288 <vKey_Action+0x88c>
					WelderUnit.State &= ~WELDER_CLIBRATION_PROCESS; // Запретить калибровку
 8002204:	4bbf      	ldr	r3, [pc, #764]	; (8002504 <vKey_Action+0xb08>)
 8002206:	7c1b      	ldrb	r3, [r3, #16]
 8002208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4bbd      	ldr	r3, [pc, #756]	; (8002504 <vKey_Action+0xb08>)
 8002210:	741a      	strb	r2, [r3, #16]
					if (WelderUnit.Calibration_level == 02)
 8002212:	4bbc      	ldr	r3, [pc, #752]	; (8002504 <vKey_Action+0xb08>)
 8002214:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002218:	2b02      	cmp	r3, #2
 800221a:	d108      	bne.n	800222e <vKey_Action+0x832>
						Carriage_Move(0, 0, 1); // Стоп
 800221c:	2201      	movs	r2, #1
 800221e:	2100      	movs	r1, #0
 8002220:	2000      	movs	r0, #0
 8002222:	f7fe fe31 	bl	8000e88 <Carriage_Move>
						WelderUnit.Calibration_level = 05; // Калибровка остановлена
 8002226:	4bb7      	ldr	r3, [pc, #732]	; (8002504 <vKey_Action+0xb08>)
 8002228:	2205      	movs	r2, #5
 800222a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					WelderUnit.Calibration_level = 05; // Калибровка остановлена
 800222e:	4bb5      	ldr	r3, [pc, #724]	; (8002504 <vKey_Action+0xb08>)
 8002230:	2205      	movs	r2, #5
 8002232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					xSemaphoreGive(xSemaphore_Calibration);
 8002236:	4bb4      	ldr	r3, [pc, #720]	; (8002508 <vKey_Action+0xb0c>)
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	2300      	movs	r3, #0
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	f005 f9f8 	bl	8007634 <xQueueGenericSend>
					vTaskDelay(10);
 8002244:	200a      	movs	r0, #10
 8002246:	f006 f83b 	bl	80082c0 <vTaskDelay>
					xSemaphoreGive(xSemaphore_Calibration);
 800224a:	4baf      	ldr	r3, [pc, #700]	; (8002508 <vKey_Action+0xb0c>)
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	2300      	movs	r3, #0
 8002250:	2200      	movs	r2, #0
 8002252:	2100      	movs	r1, #0
 8002254:	f005 f9ee 	bl	8007634 <xQueueGenericSend>
					vTaskDelay(10);
 8002258:	200a      	movs	r0, #10
 800225a:	f006 f831 	bl	80082c0 <vTaskDelay>
					xSemaphoreGive(xSemaphore_Calibration);
 800225e:	4baa      	ldr	r3, [pc, #680]	; (8002508 <vKey_Action+0xb0c>)
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	2300      	movs	r3, #0
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	f005 f9e4 	bl	8007634 <xQueueGenericSend>
					vTaskDelay(10);
 800226c:	200a      	movs	r0, #10
 800226e:	f006 f827 	bl	80082c0 <vTaskDelay>
					xSemaphoreGive(xSemaphore_Calibration);
 8002272:	4ba5      	ldr	r3, [pc, #660]	; (8002508 <vKey_Action+0xb0c>)
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	f005 f9da 	bl	8007634 <xQueueGenericSend>
					vTaskDelay(10);
 8002280:	200a      	movs	r0, #10
 8002282:	f006 f81d 	bl	80082c0 <vTaskDelay>
				break;
 8002286:	e0fb      	b.n	8002480 <vKey_Action+0xa84>
					WelderUnit.State |= WELDER_CLIBRATION_PROCESS; // Разрешить калибровку
 8002288:	4b9e      	ldr	r3, [pc, #632]	; (8002504 <vKey_Action+0xb08>)
 800228a:	7c1b      	ldrb	r3, [r3, #16]
 800228c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b9c      	ldr	r3, [pc, #624]	; (8002504 <vKey_Action+0xb08>)
 8002294:	741a      	strb	r2, [r3, #16]
					Cal = Calibrated;
 8002296:	2304      	movs	r3, #4
 8002298:	737b      	strb	r3, [r7, #13]
					xQueueSendToBack( qWelderCalibrated, &Cal, 0 ); // Начать калибровку
 800229a:	4b9c      	ldr	r3, [pc, #624]	; (800250c <vKey_Action+0xb10>)
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	f107 010d 	add.w	r1, r7, #13
 80022a2:	2300      	movs	r3, #0
 80022a4:	2200      	movs	r2, #0
 80022a6:	f005 f9c5 	bl	8007634 <xQueueGenericSend>
				break;
 80022aa:	e0e9      	b.n	8002480 <vKey_Action+0xa84>
				Run = Welder_Run;
 80022ac:	2303      	movs	r3, #3
 80022ae:	733b      	strb	r3, [r7, #12]
				if (WelderUnit.State & 0x01) // Если каретка уже движеся, то остановать её (остановка варки)
 80022b0:	4b94      	ldr	r3, [pc, #592]	; (8002504 <vKey_Action+0xb08>)
 80022b2:	7c1b      	ldrb	r3, [r3, #16]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d046      	beq.n	800234a <vKey_Action+0x94e>
					WelderUnit.State &= ~WELDER_MOVE_ENABLE; // Заппретить движение каретки
 80022bc:	4b91      	ldr	r3, [pc, #580]	; (8002504 <vKey_Action+0xb08>)
 80022be:	7c1b      	ldrb	r3, [r3, #16]
 80022c0:	f023 0320 	bic.w	r3, r3, #32
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b8f      	ldr	r3, [pc, #572]	; (8002504 <vKey_Action+0xb08>)
 80022c8:	741a      	strb	r2, [r3, #16]
					SYNC_ARC_OFF // Прекращение подачи дуги
 80022ca:	2200      	movs	r2, #0
 80022cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d0:	488f      	ldr	r0, [pc, #572]	; (8002510 <vKey_Action+0xb14>)
 80022d2:	f002 fc9e 	bl	8004c12 <HAL_GPIO_WritePin>
					WELDER_HEAD_UP // Поднять головку
 80022d6:	2200      	movs	r2, #0
 80022d8:	2106      	movs	r1, #6
 80022da:	488e      	ldr	r0, [pc, #568]	; (8002514 <vKey_Action+0xb18>)
 80022dc:	f002 fc99 	bl	8004c12 <HAL_GPIO_WritePin>
					WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 80022e0:	4b88      	ldr	r3, [pc, #544]	; (8002504 <vKey_Action+0xb08>)
 80022e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b85      	ldr	r3, [pc, #532]	; (8002504 <vKey_Action+0xb08>)
 80022ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 80022f2:	4b84      	ldr	r3, [pc, #528]	; (8002504 <vKey_Action+0xb08>)
 80022f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b81      	ldr	r3, [pc, #516]	; (8002504 <vKey_Action+0xb08>)
 8002300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.vWelder_Run_level = 8; // Остановка варки
 8002304:	4b7f      	ldr	r3, [pc, #508]	; (8002504 <vKey_Action+0xb08>)
 8002306:	2208      	movs	r2, #8
 8002308:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					Run = Carriage_Done;
 800230c:	2302      	movs	r3, #2
 800230e:	733b      	strb	r3, [r7, #12]
					xQueueSendToBack(qGoToResponse, &Run, 0 );
 8002310:	4b81      	ldr	r3, [pc, #516]	; (8002518 <vKey_Action+0xb1c>)
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	f107 010c 	add.w	r1, r7, #12
 8002318:	2300      	movs	r3, #0
 800231a:	2200      	movs	r2, #0
 800231c:	f005 f98a 	bl	8007634 <xQueueGenericSend>
					vTaskDelay(10);
 8002320:	200a      	movs	r0, #10
 8002322:	f005 ffcd 	bl	80082c0 <vTaskDelay>
					xQueueSendToBack(qGoToResponse, &Run, 0 );
 8002326:	4b7c      	ldr	r3, [pc, #496]	; (8002518 <vKey_Action+0xb1c>)
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	f107 010c 	add.w	r1, r7, #12
 800232e:	2300      	movs	r3, #0
 8002330:	2200      	movs	r2, #0
 8002332:	f005 f97f 	bl	8007634 <xQueueGenericSend>
					vTaskDelay(10);
 8002336:	200a      	movs	r0, #10
 8002338:	f005 ffc2 	bl	80082c0 <vTaskDelay>
					xQueueReset(qGoToResponse); // Сброс очереди в исходное состояние
 800233c:	4b76      	ldr	r3, [pc, #472]	; (8002518 <vKey_Action+0xb1c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f005 f894 	bl	8007470 <xQueueGenericReset>
				break;
 8002348:	e09a      	b.n	8002480 <vKey_Action+0xa84>
					if (!(WelderUnit.State & WELDER_MOVE_ENABLE)) // Если движение было запрещено (остановлено), то просто разрешить движение каретки
 800234a:	4b6e      	ldr	r3, [pc, #440]	; (8002504 <vKey_Action+0xb08>)
 800234c:	7c1b      	ldrb	r3, [r3, #16]
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	2b00      	cmp	r3, #0
 8002354:	d107      	bne.n	8002366 <vKey_Action+0x96a>
					WelderUnit.State |= WELDER_MOVE_ENABLE; // Разрешить движение каретки
 8002356:	4b6b      	ldr	r3, [pc, #428]	; (8002504 <vKey_Action+0xb08>)
 8002358:	7c1b      	ldrb	r3, [r3, #16]
 800235a:	f043 0320 	orr.w	r3, r3, #32
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b68      	ldr	r3, [pc, #416]	; (8002504 <vKey_Action+0xb08>)
 8002362:	741a      	strb	r2, [r3, #16]
				break;
 8002364:	e08c      	b.n	8002480 <vKey_Action+0xa84>
						Run = Welder_Run;
 8002366:	2303      	movs	r3, #3
 8002368:	733b      	strb	r3, [r7, #12]
						WelderUnit.State |= WELDER_MOVE_ENABLE; // Разрешить движение каретки
 800236a:	4b66      	ldr	r3, [pc, #408]	; (8002504 <vKey_Action+0xb08>)
 800236c:	7c1b      	ldrb	r3, [r3, #16]
 800236e:	f043 0320 	orr.w	r3, r3, #32
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b63      	ldr	r3, [pc, #396]	; (8002504 <vKey_Action+0xb08>)
 8002376:	741a      	strb	r2, [r3, #16]
						xQueueSendToBack(qWelderRun, &Run, 0 ); // Начать варку в автоматическом режиме
 8002378:	4b68      	ldr	r3, [pc, #416]	; (800251c <vKey_Action+0xb20>)
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	f107 010c 	add.w	r1, r7, #12
 8002380:	2300      	movs	r3, #0
 8002382:	2200      	movs	r2, #0
 8002384:	f005 f956 	bl	8007634 <xQueueGenericSend>
				break;
 8002388:	e07a      	b.n	8002480 <vKey_Action+0xa84>
				Run = Welder_Run;
 800238a:	2303      	movs	r3, #3
 800238c:	733b      	strb	r3, [r7, #12]
				if ((WelderUnit.State & 0x01)  ) // Если каретка уже движеся, то остановать её (остановка варки)
 800238e:	4b5d      	ldr	r3, [pc, #372]	; (8002504 <vKey_Action+0xb08>)
 8002390:	7c1b      	ldrb	r3, [r3, #16]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d046      	beq.n	8002428 <vKey_Action+0xa2c>
					WelderUnit.State &= ~WELDER_MOVE_ENABLE; // Заппретить движение каретки
 800239a:	4b5a      	ldr	r3, [pc, #360]	; (8002504 <vKey_Action+0xb08>)
 800239c:	7c1b      	ldrb	r3, [r3, #16]
 800239e:	f023 0320 	bic.w	r3, r3, #32
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b57      	ldr	r3, [pc, #348]	; (8002504 <vKey_Action+0xb08>)
 80023a6:	741a      	strb	r2, [r3, #16]
					SYNC_ARC_OFF // Прекращение подачи дуги
 80023a8:	2200      	movs	r2, #0
 80023aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ae:	4858      	ldr	r0, [pc, #352]	; (8002510 <vKey_Action+0xb14>)
 80023b0:	f002 fc2f 	bl	8004c12 <HAL_GPIO_WritePin>
					WELDER_HEAD_UP // Поднять головку
 80023b4:	2200      	movs	r2, #0
 80023b6:	2106      	movs	r1, #6
 80023b8:	4856      	ldr	r0, [pc, #344]	; (8002514 <vKey_Action+0xb18>)
 80023ba:	f002 fc2a 	bl	8004c12 <HAL_GPIO_WritePin>
					WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 80023be:	4b51      	ldr	r3, [pc, #324]	; (8002504 <vKey_Action+0xb08>)
 80023c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4b4e      	ldr	r3, [pc, #312]	; (8002504 <vKey_Action+0xb08>)
 80023cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 80023d0:	4b4c      	ldr	r3, [pc, #304]	; (8002504 <vKey_Action+0xb08>)
 80023d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023d6:	f023 0304 	bic.w	r3, r3, #4
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b49      	ldr	r3, [pc, #292]	; (8002504 <vKey_Action+0xb08>)
 80023de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.vWelder_Run_level = 8; // Остановка варки
 80023e2:	4b48      	ldr	r3, [pc, #288]	; (8002504 <vKey_Action+0xb08>)
 80023e4:	2208      	movs	r2, #8
 80023e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					Run = Carriage_Done;
 80023ea:	2302      	movs	r3, #2
 80023ec:	733b      	strb	r3, [r7, #12]
					xQueueSendToBack(qGoToResponse, &Run, 0 );
 80023ee:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <vKey_Action+0xb1c>)
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	f107 010c 	add.w	r1, r7, #12
 80023f6:	2300      	movs	r3, #0
 80023f8:	2200      	movs	r2, #0
 80023fa:	f005 f91b 	bl	8007634 <xQueueGenericSend>
					vTaskDelay(10);
 80023fe:	200a      	movs	r0, #10
 8002400:	f005 ff5e 	bl	80082c0 <vTaskDelay>
					xQueueSendToBack(qGoToResponse, &Run, 0 );
 8002404:	4b44      	ldr	r3, [pc, #272]	; (8002518 <vKey_Action+0xb1c>)
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	f107 010c 	add.w	r1, r7, #12
 800240c:	2300      	movs	r3, #0
 800240e:	2200      	movs	r2, #0
 8002410:	f005 f910 	bl	8007634 <xQueueGenericSend>
					vTaskDelay(10);
 8002414:	200a      	movs	r0, #10
 8002416:	f005 ff53 	bl	80082c0 <vTaskDelay>
					xQueueReset(qGoToResponse); // Сброс очереди в исходное состояние
 800241a:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <vKey_Action+0xb1c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f005 f825 	bl	8007470 <xQueueGenericReset>
				break;
 8002426:	e02a      	b.n	800247e <vKey_Action+0xa82>
					if (!(WelderUnit.State & WELDER_MOVE_ENABLE) ) // Если движение было запрещено (остановлено), то просто разрешить движение каретки
 8002428:	4b36      	ldr	r3, [pc, #216]	; (8002504 <vKey_Action+0xb08>)
 800242a:	7c1b      	ldrb	r3, [r3, #16]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b00      	cmp	r3, #0
 8002432:	d107      	bne.n	8002444 <vKey_Action+0xa48>
					WelderUnit.State |= WELDER_MOVE_ENABLE; // Разрешить движение каретки
 8002434:	4b33      	ldr	r3, [pc, #204]	; (8002504 <vKey_Action+0xb08>)
 8002436:	7c1b      	ldrb	r3, [r3, #16]
 8002438:	f043 0320 	orr.w	r3, r3, #32
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <vKey_Action+0xb08>)
 8002440:	741a      	strb	r2, [r3, #16]
				break;
 8002442:	e01c      	b.n	800247e <vKey_Action+0xa82>
						if( ((WelderUnit.HolderState & WELDER_STATE_HOLDER_L)) && ((WelderUnit.HolderState & WELDER_STATE_HOLDER_R)))
 8002444:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <vKey_Action+0xb08>)
 8002446:	7c5b      	ldrb	r3, [r3, #17]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d016      	beq.n	800247e <vKey_Action+0xa82>
 8002450:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <vKey_Action+0xb08>)
 8002452:	7c5b      	ldrb	r3, [r3, #17]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d010      	beq.n	800247e <vKey_Action+0xa82>
						Run = Welder_Run;
 800245c:	2303      	movs	r3, #3
 800245e:	733b      	strb	r3, [r7, #12]
						WelderUnit.State |= WELDER_MOVE_ENABLE; // Разрешить движение каретки
 8002460:	4b28      	ldr	r3, [pc, #160]	; (8002504 <vKey_Action+0xb08>)
 8002462:	7c1b      	ldrb	r3, [r3, #16]
 8002464:	f043 0320 	orr.w	r3, r3, #32
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4b26      	ldr	r3, [pc, #152]	; (8002504 <vKey_Action+0xb08>)
 800246c:	741a      	strb	r2, [r3, #16]
						xQueueSendToBack(qWelderRun, &Run, 0 ); // Начать варку в автоматическом режиме
 800246e:	4b2b      	ldr	r3, [pc, #172]	; (800251c <vKey_Action+0xb20>)
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	f107 010c 	add.w	r1, r7, #12
 8002476:	2300      	movs	r3, #0
 8002478:	2200      	movs	r2, #0
 800247a:	f005 f8db 	bl	8007634 <xQueueGenericSend>
				break;
 800247e:	bf00      	nop
			break;
 8002480:	e07a      	b.n	8002578 <vKey_Action+0xb7c>
		}

		case press_long_StartStop:
		{
			WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <vKey_Action+0xb08>)
 8002484:	885b      	ldrh	r3, [r3, #2]
 8002486:	3314      	adds	r3, #20
 8002488:	b29a      	uxth	r2, r3
 800248a:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <vKey_Action+0xb08>)
 800248c:	805a      	strh	r2, [r3, #2]
//			Key.StartStop_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
//			Key.StartStop_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
			break;
 800248e:	e074      	b.n	800257a <vKey_Action+0xb7e>

		// *********************************************************Комбинации клавишь*********************************************************

		case press_short_Program_L_and_R:
		{
			beep_mode_send = beep_long;
 8002490:	2305      	movs	r3, #5
 8002492:	73bb      	strb	r3, [r7, #14]
			xQueueSendToBack( qBeepMode, &beep_mode_send , 0 ); // Звук нажатия
 8002494:	4b22      	ldr	r3, [pc, #136]	; (8002520 <vKey_Action+0xb24>)
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	f107 010e 	add.w	r1, r7, #14
 800249c:	2300      	movs	r3, #0
 800249e:	2200      	movs	r2, #0
 80024a0:	f005 f8c8 	bl	8007634 <xQueueGenericSend>
			SaveProgramToFlash2();
 80024a4:	f7fe fe6c 	bl	8001180 <SaveProgramToFlash2>
			beep_mode_send = beep_click;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73bb      	strb	r3, [r7, #14]
			break;
 80024ac:	e065      	b.n	800257a <vKey_Action+0xb7e>
			break;
 80024ae:	bf00      	nop
 80024b0:	f7ff baae 	b.w	8001a10 <vKey_Action+0x14>
			break;
 80024b4:	bf00      	nop
 80024b6:	f7ff baab 	b.w	8001a10 <vKey_Action+0x14>
			break;
 80024ba:	bf00      	nop
 80024bc:	f7ff baa8 	b.w	8001a10 <vKey_Action+0x14>
			break;
 80024c0:	bf00      	nop
 80024c2:	f7ff baa5 	b.w	8001a10 <vKey_Action+0x14>
			break;
 80024c6:	bf00      	nop
 80024c8:	f7ff baa2 	b.w	8001a10 <vKey_Action+0x14>
			break;
 80024cc:	bf00      	nop
 80024ce:	f7ff ba9f 	b.w	8001a10 <vKey_Action+0x14>
			break;
 80024d2:	bf00      	nop
 80024d4:	f7ff ba9c 	b.w	8001a10 <vKey_Action+0x14>
			break;
 80024d8:	bf00      	nop
 80024da:	f7ff ba99 	b.w	8001a10 <vKey_Action+0x14>
			break;
 80024de:	bf00      	nop
 80024e0:	f7ff ba96 	b.w	8001a10 <vKey_Action+0x14>
			break;
 80024e4:	bf00      	nop
 80024e6:	f7ff ba93 	b.w	8001a10 <vKey_Action+0x14>
			break;
 80024ea:	bf00      	nop
 80024ec:	f7ff ba90 	b.w	8001a10 <vKey_Action+0x14>
			break;
 80024f0:	bf00      	nop
 80024f2:	f7ff ba8d 	b.w	8001a10 <vKey_Action+0x14>
			break;
 80024f6:	bf00      	nop
 80024f8:	f7ff ba8a 	b.w	8001a10 <vKey_Action+0x14>
			break;
 80024fc:	bf00      	nop
 80024fe:	f7ff ba87 	b.w	8001a10 <vKey_Action+0x14>
 8002502:	bf00      	nop
 8002504:	2000353c 	.word	0x2000353c
 8002508:	20003dc4 	.word	0x20003dc4
 800250c:	20003d8c 	.word	0x20003d8c
 8002510:	40010800 	.word	0x40010800
 8002514:	40011000 	.word	0x40011000
 8002518:	20003d80 	.word	0x20003d80
 800251c:	20003d88 	.word	0x20003d88
 8002520:	20003538 	.word	0x20003538
			break;
 8002524:	bf00      	nop
 8002526:	f7ff ba73 	b.w	8001a10 <vKey_Action+0x14>
			break;
 800252a:	bf00      	nop
 800252c:	f7ff ba70 	b.w	8001a10 <vKey_Action+0x14>
			break;
 8002530:	bf00      	nop
 8002532:	f7ff ba6d 	b.w	8001a10 <vKey_Action+0x14>
			break;
 8002536:	bf00      	nop
 8002538:	f7ff ba6a 	b.w	8001a10 <vKey_Action+0x14>
			break;
 800253c:	bf00      	nop
 800253e:	f7ff ba67 	b.w	8001a10 <vKey_Action+0x14>
			break;
 8002542:	bf00      	nop
 8002544:	f7ff ba64 	b.w	8001a10 <vKey_Action+0x14>
			break;
 8002548:	bf00      	nop
 800254a:	f7ff ba61 	b.w	8001a10 <vKey_Action+0x14>
			break;
 800254e:	bf00      	nop
 8002550:	f7ff ba5e 	b.w	8001a10 <vKey_Action+0x14>
			break;
 8002554:	bf00      	nop
 8002556:	f7ff ba5b 	b.w	8001a10 <vKey_Action+0x14>
			break;
 800255a:	bf00      	nop
 800255c:	f7ff ba58 	b.w	8001a10 <vKey_Action+0x14>
					break;
 8002560:	bf00      	nop
 8002562:	f7ff ba55 	b.w	8001a10 <vKey_Action+0x14>
					break;
 8002566:	bf00      	nop
 8002568:	f7ff ba52 	b.w	8001a10 <vKey_Action+0x14>
					break;
 800256c:	bf00      	nop
 800256e:	f7ff ba4f 	b.w	8001a10 <vKey_Action+0x14>
			break;
 8002572:	bf00      	nop
 8002574:	f7ff ba4c 	b.w	8001a10 <vKey_Action+0x14>
			break;
 8002578:	bf00      	nop
		xQueueReceive(qKeyPress, &KeyPressed, portMAX_DELAY ); // Ждать нажатия кнопки
 800257a:	f7ff ba49 	b.w	8001a10 <vKey_Action+0x14>
 800257e:	bf00      	nop

08002580 <vWelder_Run>:
	vTaskDelete(NULL);

}

void vWelder_Run(void *pvParameters)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

	uint8_t beep;

	for(;;)
	{
		xQueueReceive(qWelderRun, &lReceivedValue, portMAX_DELAY ); // Ожидание команды на начало варки
 8002588:	4b9d      	ldr	r3, [pc, #628]	; (8002800 <vWelder_Run+0x280>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f107 010e 	add.w	r1, r7, #14
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	4618      	mov	r0, r3
 8002596:	f005 f9a5 	bl	80078e4 <xQueueReceive>

		if (lReceivedValue == Welder_Run && (WelderUnit.State & WELDER_MOVE_ENABLE) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) ) // Если пришла команда на начло калибровки и движение каретки разрешено и задняя дверца закрыта
 800259a:	7bbb      	ldrb	r3, [r7, #14]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d1f3      	bne.n	8002588 <vWelder_Run+0x8>
 80025a0:	4b98      	ldr	r3, [pc, #608]	; (8002804 <vWelder_Run+0x284>)
 80025a2:	7c1b      	ldrb	r3, [r3, #16]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ed      	beq.n	8002588 <vWelder_Run+0x8>
 80025ac:	4b95      	ldr	r3, [pc, #596]	; (8002804 <vWelder_Run+0x284>)
 80025ae:	7c1b      	ldrb	r3, [r3, #16]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0e7      	beq.n	8002588 <vWelder_Run+0x8>
		{
			beep = beep_1short;
 80025b8:	2302      	movs	r3, #2
 80025ba:	737b      	strb	r3, [r7, #13]
			xQueueSendToBack( qBeepMode, &beep, 0 ); // Звук нажатия
 80025bc:	4b92      	ldr	r3, [pc, #584]	; (8002808 <vWelder_Run+0x288>)
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	f107 010d 	add.w	r1, r7, #13
 80025c4:	2300      	movs	r3, #0
 80025c6:	2200      	movs	r2, #0
 80025c8:	f005 f834 	bl	8007634 <xQueueGenericSend>

		if (WelderUnit.Position != WelderUnit.Xs) // Если текущая позиция каретки не равна стартовой позиции, то занять её
 80025cc:	4b8d      	ldr	r3, [pc, #564]	; (8002804 <vWelder_Run+0x284>)
 80025ce:	889a      	ldrh	r2, [r3, #4]
 80025d0:	4b8c      	ldr	r3, [pc, #560]	; (8002804 <vWelder_Run+0x284>)
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d027      	beq.n	8002628 <vWelder_Run+0xa8>
		{
			if (WelderUnit.vWelder_Run_level != 8)
 80025d8:	4b8a      	ldr	r3, [pc, #552]	; (8002804 <vWelder_Run+0x284>)
 80025da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d022      	beq.n	8002628 <vWelder_Run+0xa8>
			{
			WelderUnit.vWelder_Run_level = 01; // Движение каретки к точке начла варки
 80025e2:	4b88      	ldr	r3, [pc, #544]	; (8002804 <vWelder_Run+0x284>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			Carriage_cmd = Cmd_CarriageGoTo;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
			WelderUnit.GoTo = WelderUnit.Xs;
 80025ee:	4b85      	ldr	r3, [pc, #532]	; (8002804 <vWelder_Run+0x284>)
 80025f0:	881a      	ldrh	r2, [r3, #0]
 80025f2:	4b84      	ldr	r3, [pc, #528]	; (8002804 <vWelder_Run+0x284>)
 80025f4:	811a      	strh	r2, [r3, #8]
			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идти к
 80025f6:	4b85      	ldr	r3, [pc, #532]	; (800280c <vWelder_Run+0x28c>)
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	f107 010f 	add.w	r1, r7, #15
 80025fe:	2300      	movs	r3, #0
 8002600:	2200      	movs	r2, #0
 8002602:	f005 f817 	bl	8007634 <xQueueGenericSend>

			xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Без этого не работает. В очереди откуда то берутся данные
 8002606:	4b82      	ldr	r3, [pc, #520]	; (8002810 <vWelder_Run+0x290>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f107 010e 	add.w	r1, r7, #14
 800260e:	2200      	movs	r2, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f005 f967 	bl	80078e4 <xQueueReceive>
			xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 8002616:	4b7e      	ldr	r3, [pc, #504]	; (8002810 <vWelder_Run+0x290>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f107 010e 	add.w	r1, r7, #14
 800261e:	f04f 32ff 	mov.w	r2, #4294967295
 8002622:	4618      	mov	r0, r3
 8002624:	f005 f95e 	bl	80078e4 <xQueueReceive>
			}
		}

		if ((WelderUnit.Position == WelderUnit.Xs) && (WelderUnit.State & WELDER_MOVE_ENABLE)) // Если каретка на заданной позиции и движение каретки разрешено
 8002628:	4b76      	ldr	r3, [pc, #472]	; (8002804 <vWelder_Run+0x284>)
 800262a:	889a      	ldrh	r2, [r3, #4]
 800262c:	4b75      	ldr	r3, [pc, #468]	; (8002804 <vWelder_Run+0x284>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d1a9      	bne.n	8002588 <vWelder_Run+0x8>
 8002634:	4b73      	ldr	r3, [pc, #460]	; (8002804 <vWelder_Run+0x284>)
 8002636:	7c1b      	ldrb	r3, [r3, #16]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0a3      	beq.n	8002588 <vWelder_Run+0x8>
		{

		if (WelderUnit.vWelder_Run_level != 8)
 8002640:	4b70      	ldr	r3, [pc, #448]	; (8002804 <vWelder_Run+0x284>)
 8002642:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002646:	2b08      	cmp	r3, #8
 8002648:	d01e      	beq.n	8002688 <vWelder_Run+0x108>
		{
		WelderUnit.vWelder_Run_level = 02; // Ожидание опускания сварочной головки
 800264a:	4b6e      	ldr	r3, [pc, #440]	; (8002804 <vWelder_Run+0x284>)
 800264c:	2202      	movs	r2, #2
 800264e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		WELDER_HEAD_DOWN // Опустить головку
 8002652:	2201      	movs	r2, #1
 8002654:	2106      	movs	r1, #6
 8002656:	486f      	ldr	r0, [pc, #444]	; (8002814 <vWelder_Run+0x294>)
 8002658:	f002 fadb 	bl	8004c12 <HAL_GPIO_WritePin>
		WelderUnit.IndicatorPanel.LEDsState |= LED_DOWN; // Индикация опущенной сварочной головки
 800265c:	4b69      	ldr	r3, [pc, #420]	; (8002804 <vWelder_Run+0x284>)
 800265e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	b2da      	uxtb	r2, r3
 8002668:	4b66      	ldr	r3, [pc, #408]	; (8002804 <vWelder_Run+0x284>)
 800266a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		vTaskDelay(500 / portTICK_RATE_MS); // Ожидание опускания головки
 800266e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002672:	f005 fe25 	bl	80082c0 <vTaskDelay>
		WelderUnit.IndicatorPanel.LEDsState &= ~LED_UP;
 8002676:	4b63      	ldr	r3, [pc, #396]	; (8002804 <vWelder_Run+0x284>)
 8002678:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800267c:	f023 0308 	bic.w	r3, r3, #8
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4b60      	ldr	r3, [pc, #384]	; (8002804 <vWelder_Run+0x284>)
 8002684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}

		if (WelderUnit.vWelder_Run_level != 8)
 8002688:	4b5e      	ldr	r3, [pc, #376]	; (8002804 <vWelder_Run+0x284>)
 800268a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800268e:	2b08      	cmp	r3, #8
 8002690:	d012      	beq.n	80026b8 <vWelder_Run+0x138>
		{
		WelderUnit.vWelder_Run_level = 03;
 8002692:	4b5c      	ldr	r3, [pc, #368]	; (8002804 <vWelder_Run+0x284>)
 8002694:	2203      	movs	r2, #3
 8002696:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		vTaskDelay(WelderUnit.Delay_s * 100 / portTICK_RATE_MS); // Выдержка времени для заполнения точки начала сварки аргоном.
 800269a:	4b5a      	ldr	r3, [pc, #360]	; (8002804 <vWelder_Run+0x284>)
 800269c:	7a9b      	ldrb	r3, [r3, #10]
 800269e:	461a      	mov	r2, r3
 80026a0:	2364      	movs	r3, #100	; 0x64
 80026a2:	fb03 f302 	mul.w	r3, r3, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f005 fe0a 	bl	80082c0 <vTaskDelay>
		SYNC_ARC_ON // Подача дуги
 80026ac:	2201      	movs	r2, #1
 80026ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026b2:	4859      	ldr	r0, [pc, #356]	; (8002818 <vWelder_Run+0x298>)
 80026b4:	f002 faad 	bl	8004c12 <HAL_GPIO_WritePin>
		}

		if (WelderUnit.vWelder_Run_level != 8)
 80026b8:	4b52      	ldr	r3, [pc, #328]	; (8002804 <vWelder_Run+0x284>)
 80026ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d022      	beq.n	8002708 <vWelder_Run+0x188>
		{
		WelderUnit.vWelder_Run_level = 04; // Движение к точке окончания варки
 80026c2:	4b50      	ldr	r3, [pc, #320]	; (8002804 <vWelder_Run+0x284>)
 80026c4:	2204      	movs	r2, #4
 80026c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		WelderUnit.GoTo = WelderUnit.Xf; // Указание точки осановки головки
 80026ca:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <vWelder_Run+0x284>)
 80026cc:	885a      	ldrh	r2, [r3, #2]
 80026ce:	4b4d      	ldr	r3, [pc, #308]	; (8002804 <vWelder_Run+0x284>)
 80026d0:	811a      	strh	r2, [r3, #8]
		Carriage_cmd = Cmd_CarriageGoTo; // Команда на начала движение каретки
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
		xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идти к
 80026d6:	4b4d      	ldr	r3, [pc, #308]	; (800280c <vWelder_Run+0x28c>)
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	f107 010f 	add.w	r1, r7, #15
 80026de:	2300      	movs	r3, #0
 80026e0:	2200      	movs	r2, #0
 80026e2:	f004 ffa7 	bl	8007634 <xQueueGenericSend>

		xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Без этого не работает. В очереди откуда то берутся данные
 80026e6:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <vWelder_Run+0x290>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f107 010e 	add.w	r1, r7, #14
 80026ee:	2200      	movs	r2, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f005 f8f7 	bl	80078e4 <xQueueReceive>
		xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 80026f6:	4b46      	ldr	r3, [pc, #280]	; (8002810 <vWelder_Run+0x290>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f107 010e 	add.w	r1, r7, #14
 80026fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002702:	4618      	mov	r0, r3
 8002704:	f005 f8ee 	bl	80078e4 <xQueueReceive>
		}

		if (WelderUnit.vWelder_Run_level != 8)
 8002708:	4b3e      	ldr	r3, [pc, #248]	; (8002804 <vWelder_Run+0x284>)
 800270a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800270e:	2b08      	cmp	r3, #8
 8002710:	d01c      	beq.n	800274c <vWelder_Run+0x1cc>
		{
		WelderUnit.vWelder_Run_level = 05; // Выдерживание времеи конца варки
 8002712:	4b3c      	ldr	r3, [pc, #240]	; (8002804 <vWelder_Run+0x284>)
 8002714:	2205      	movs	r2, #5
 8002716:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		SYNC_ARC_OFF // Прекращение подачи дуги
 800271a:	2200      	movs	r2, #0
 800271c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002720:	483d      	ldr	r0, [pc, #244]	; (8002818 <vWelder_Run+0x298>)
 8002722:	f002 fa76 	bl	8004c12 <HAL_GPIO_WritePin>
		vTaskDelay(WelderUnit.Delay_f * 100 / portTICK_RATE_MS); // Выдержка времени для заполнения точки останова сварки аргоном.
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <vWelder_Run+0x284>)
 8002728:	7adb      	ldrb	r3, [r3, #11]
 800272a:	461a      	mov	r2, r3
 800272c:	2364      	movs	r3, #100	; 0x64
 800272e:	fb03 f302 	mul.w	r3, r3, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f005 fdc4 	bl	80082c0 <vTaskDelay>

		beep = beep_3short;
 8002738:	2304      	movs	r3, #4
 800273a:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack( qBeepMode, &beep, 0 ); // Звук окончания варки
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <vWelder_Run+0x288>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	f107 010d 	add.w	r1, r7, #13
 8002744:	2300      	movs	r3, #0
 8002746:	2200      	movs	r2, #0
 8002748:	f004 ff74 	bl	8007634 <xQueueGenericSend>
		}

		if (WelderUnit.vWelder_Run_level != 8)
 800274c:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <vWelder_Run+0x284>)
 800274e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002752:	2b08      	cmp	r3, #8
 8002754:	d01e      	beq.n	8002794 <vWelder_Run+0x214>
		{
		WelderUnit.vWelder_Run_level = 06; // Ожидание подъема головки
 8002756:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <vWelder_Run+0x284>)
 8002758:	2206      	movs	r2, #6
 800275a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		WELDER_HEAD_UP // Поднять головку
 800275e:	2200      	movs	r2, #0
 8002760:	2106      	movs	r1, #6
 8002762:	482c      	ldr	r0, [pc, #176]	; (8002814 <vWelder_Run+0x294>)
 8002764:	f002 fa55 	bl	8004c12 <HAL_GPIO_WritePin>

		WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 8002768:	4b26      	ldr	r3, [pc, #152]	; (8002804 <vWelder_Run+0x284>)
 800276a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800276e:	f043 0308 	orr.w	r3, r3, #8
 8002772:	b2da      	uxtb	r2, r3
 8002774:	4b23      	ldr	r3, [pc, #140]	; (8002804 <vWelder_Run+0x284>)
 8002776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		vTaskDelay(500 / portTICK_RATE_MS); // Ожидание подъема головки
 800277a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800277e:	f005 fd9f 	bl	80082c0 <vTaskDelay>
		WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <vWelder_Run+0x284>)
 8002784:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002788:	f023 0304 	bic.w	r3, r3, #4
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <vWelder_Run+0x284>)
 8002790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}

		if (WelderUnit.vWelder_Run_level != 8)
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <vWelder_Run+0x284>)
 8002796:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800279a:	2b08      	cmp	r3, #8
 800279c:	d003      	beq.n	80027a6 <vWelder_Run+0x226>

		// Откат каретки
		WelderUnit.vWelder_Run_level = 07;
 800279e:	4b19      	ldr	r3, [pc, #100]	; (8002804 <vWelder_Run+0x284>)
 80027a0:	2207      	movs	r2, #7
 80027a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		{
			if (WelderUnit.Position > KICKBACK)
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <vWelder_Run+0x284>)
 80027a8:	889b      	ldrh	r3, [r3, #4]
 80027aa:	2bc8      	cmp	r3, #200	; 0xc8
 80027ac:	d906      	bls.n	80027bc <vWelder_Run+0x23c>
			{
				WelderUnit.GoTo = WelderUnit.Position -	KICKBACK;
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <vWelder_Run+0x284>)
 80027b0:	889b      	ldrh	r3, [r3, #4]
 80027b2:	3bc8      	subs	r3, #200	; 0xc8
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <vWelder_Run+0x284>)
 80027b8:	811a      	strh	r2, [r3, #8]
 80027ba:	e002      	b.n	80027c2 <vWelder_Run+0x242>
			}
			else
			{
				WelderUnit.GoTo = 0;
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <vWelder_Run+0x284>)
 80027be:	2200      	movs	r2, #0
 80027c0:	811a      	strh	r2, [r3, #8]
			}

			Carriage_cmd = Cmd_CarriageGoTo;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <vWelder_Run+0x28c>)
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	f107 010f 	add.w	r1, r7, #15
 80027ce:	2300      	movs	r3, #0
 80027d0:	2200      	movs	r2, #0
 80027d2:	f004 ff2f 	bl	8007634 <xQueueGenericSend>
			xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <vWelder_Run+0x290>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f107 010e 	add.w	r1, r7, #14
 80027de:	f04f 32ff 	mov.w	r2, #4294967295
 80027e2:	4618      	mov	r0, r3
 80027e4:	f005 f87e 	bl	80078e4 <xQueueReceive>
		}

		if (WelderUnit.vWelder_Run_level == 8)
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <vWelder_Run+0x284>)
 80027ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	f47f aeca 	bne.w	8002588 <vWelder_Run+0x8>
		{
			WelderUnit.vWelder_Run_level = 0;
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <vWelder_Run+0x284>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		xQueueReceive(qWelderRun, &lReceivedValue, portMAX_DELAY ); // Ожидание команды на начало варки
 80027fc:	e6c4      	b.n	8002588 <vWelder_Run+0x8>
 80027fe:	bf00      	nop
 8002800:	20003d88 	.word	0x20003d88
 8002804:	2000353c 	.word	0x2000353c
 8002808:	20003538 	.word	0x20003538
 800280c:	20003d94 	.word	0x20003d94
 8002810:	20003d80 	.word	0x20003d80
 8002814:	40011000 	.word	0x40011000
 8002818:	40010800 	.word	0x40010800

0800281c <vCarriage_Calibration>:
}



void vCarriage_Calibration(void *pvParameters)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	uint8_t lReceivedValue;


	for(;;)
	{
		xQueueReceive(qWelderCalibrated, &lReceivedValue, portMAX_DELAY ); // Ждать команды на начало калибровки
 8002824:	4b79      	ldr	r3, [pc, #484]	; (8002a0c <vCarriage_Calibration+0x1f0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f107 010f 	add.w	r1, r7, #15
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	4618      	mov	r0, r3
 8002832:	f005 f857 	bl	80078e4 <xQueueReceive>

		if (lReceivedValue == Calibrated && (WelderUnit.State & 0x10) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) && ((WelderUnit.State & WELDER_CLIBRATION_PROCESS))) // Если пришла команда на калибровку и движение каретки разрешено и задняя дверца закрыта
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	2b04      	cmp	r3, #4
 800283a:	d1f3      	bne.n	8002824 <vCarriage_Calibration+0x8>
 800283c:	4b74      	ldr	r3, [pc, #464]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 800283e:	7c1b      	ldrb	r3, [r3, #16]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ed      	beq.n	8002824 <vCarriage_Calibration+0x8>
 8002848:	4b71      	ldr	r3, [pc, #452]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 800284a:	7c1b      	ldrb	r3, [r3, #16]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0e7      	beq.n	8002824 <vCarriage_Calibration+0x8>
 8002854:	4b6e      	ldr	r3, [pc, #440]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 8002856:	7c1b      	ldrb	r3, [r3, #16]
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0e1      	beq.n	8002824 <vCarriage_Calibration+0x8>
		{																																										// и если калибровка разрешена
			WelderUnit.Calibration_level = 01; // Первая фаза калибровки - движение каретки к концевуику с большной скоростью
 8002860:	4b6b      	ldr	r3, [pc, #428]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			WELDER_HEAD_UP // Поднять головку
 8002868:	2200      	movs	r2, #0
 800286a:	2106      	movs	r1, #6
 800286c:	4869      	ldr	r0, [pc, #420]	; (8002a14 <vCarriage_Calibration+0x1f8>)
 800286e:	f002 f9d0 	bl	8004c12 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS); // Ожидание подъема головки
 8002872:	2064      	movs	r0, #100	; 0x64
 8002874:	f005 fd24 	bl	80082c0 <vTaskDelay>

			WelderUnit.IndicatorPanel.LEDsState &= ~LED_PARKING; // индикации калибровки
 8002878:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 800287a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800287e:	f023 0302 	bic.w	r3, r3, #2
 8002882:	b2da      	uxtb	r2, r3
 8002884:	4b62      	ldr	r3, [pc, #392]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 8002886:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


			WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 800288a:	4b61      	ldr	r3, [pc, #388]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 800288c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002890:	f043 0308 	orr.w	r3, r3, #8
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4b5e      	ldr	r3, [pc, #376]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 8002898:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 800289c:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 800289e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028a2:	f023 0304 	bic.w	r3, r3, #4
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80028aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

			Carriage_Move(CALIBRATION_PHASE_SPEED_1, 0, 1); // Начать перемещение каретки в сторону концевика
 80028ae:	2201      	movs	r2, #1
 80028b0:	2100      	movs	r1, #0
 80028b2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80028b6:	f7fe fae7 	bl	8000e88 <Carriage_Move>

			// Когда концевик замкнулся выдается семофор, что коретка дошла до самого начала

			// По какой-то причине при первой попытке взять 2-й семафор он берется (даже если не выдан). Потому семафор берется дважды
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY ); // Попытка взять семафор.
 80028ba:	4b57      	ldr	r3, [pc, #348]	; (8002a18 <vCarriage_Calibration+0x1fc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f04f 31ff 	mov.w	r1, #4294967295
 80028c2:	4618      	mov	r0, r3
 80028c4:	f005 f8b0 	bl	8007a28 <xQueueSemaphoreTake>
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <vCarriage_Calibration+0x1fc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295
 80028d0:	4618      	mov	r0, r3
 80028d2:	f005 f8a9 	bl	8007a28 <xQueueSemaphoreTake>

			Carriage_Move(0, 0, 1); // Стоп
 80028d6:	2201      	movs	r2, #1
 80028d8:	2100      	movs	r1, #0
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fe fad4 	bl	8000e88 <Carriage_Move>

				if ((WelderUnit.State & 0x10) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) && ((WelderUnit.State & WELDER_CLIBRATION_PROCESS)) ) // Если движение каретки разрешено и задняя дверца закрыта
 80028e0:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80028e2:	7c1b      	ldrb	r3, [r3, #16]
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d09b      	beq.n	8002824 <vCarriage_Calibration+0x8>
 80028ec:	4b48      	ldr	r3, [pc, #288]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80028ee:	7c1b      	ldrb	r3, [r3, #16]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d095      	beq.n	8002824 <vCarriage_Calibration+0x8>
 80028f8:	4b45      	ldr	r3, [pc, #276]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80028fa:	7c1b      	ldrb	r3, [r3, #16]
 80028fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d08f      	beq.n	8002824 <vCarriage_Calibration+0x8>
				{
					WelderUnit.Calibration_level = 02; // Вторая фаза калибровки - откат каретки от концевика в течении некторого времени
 8002904:	4b42      	ldr	r3, [pc, #264]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 8002906:	2202      	movs	r2, #2
 8002908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					Carriage_Move(CALIBRATION_PHASE_SPEED_2, 1, 1); // Отъехать немного назад
 800290c:	2201      	movs	r2, #1
 800290e:	2101      	movs	r1, #1
 8002910:	20c8      	movs	r0, #200	; 0xc8
 8002912:	f7fe fab9 	bl	8000e88 <Carriage_Move>
					vTaskDelay(500 / portTICK_RATE_MS);
 8002916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800291a:	f005 fcd1 	bl	80082c0 <vTaskDelay>

					Carriage_Move(0, 0, 1); // Стоп
 800291e:	2201      	movs	r2, #1
 8002920:	2100      	movs	r1, #0
 8002922:	2000      	movs	r0, #0
 8002924:	f7fe fab0 	bl	8000e88 <Carriage_Move>

					vTaskDelay(100/ portTICK_RATE_MS);
 8002928:	2064      	movs	r0, #100	; 0x64
 800292a:	f005 fcc9 	bl	80082c0 <vTaskDelay>

					if (WelderUnit.Calibration_level == 02) // Если фаза калибровки 2 (а не 05, что значит остановить калибровку)
 800292e:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 8002930:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002934:	2b02      	cmp	r3, #2
 8002936:	d11b      	bne.n	8002970 <vCarriage_Calibration+0x154>
					{

					WelderUnit.Calibration_level = 03; // Третья фаза калибровки - медленное движение каретки к концевуику на низкой скорости
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 800293a:	2203      	movs	r2, #3
 800293c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

					Carriage_Move(CALIBRATION_PHASE_SPEED_3, 0, 1); // Начать перемещение каретки в сторону концевика
 8002940:	2201      	movs	r2, #1
 8002942:	2100      	movs	r1, #0
 8002944:	2018      	movs	r0, #24
 8002946:	f7fe fa9f 	bl	8000e88 <Carriage_Move>

					// По какой-то причине при первой попытке взять 2-й семафор он берется (даже если не выдан). Потому семафор берется дважды
					xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY ); // Попытка взять семафор по прерыванию срабатывания концевика
 800294a:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <vCarriage_Calibration+0x1fc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f04f 31ff 	mov.w	r1, #4294967295
 8002952:	4618      	mov	r0, r3
 8002954:	f005 f868 	bl	8007a28 <xQueueSemaphoreTake>
					xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
 8002958:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <vCarriage_Calibration+0x1fc>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f04f 31ff 	mov.w	r1, #4294967295
 8002960:	4618      	mov	r0, r3
 8002962:	f005 f861 	bl	8007a28 <xQueueSemaphoreTake>

					Carriage_Move(0, 0, 1); // Стоп
 8002966:	2201      	movs	r2, #1
 8002968:	2100      	movs	r1, #0
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe fa8c 	bl	8000e88 <Carriage_Move>

					}

					if ((WelderUnit.State & 0x10) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) && ((WelderUnit.State & WELDER_CLIBRATION_PROCESS)) && (WelderUnit.Calibration_level == 03) )
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 8002972:	7c1b      	ldrb	r3, [r3, #16]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	d032      	beq.n	80029e2 <vCarriage_Calibration+0x1c6>
 800297c:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 800297e:	7c1b      	ldrb	r3, [r3, #16]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b00      	cmp	r3, #0
 8002986:	d02c      	beq.n	80029e2 <vCarriage_Calibration+0x1c6>
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 800298a:	7c1b      	ldrb	r3, [r3, #16]
 800298c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d026      	beq.n	80029e2 <vCarriage_Calibration+0x1c6>
 8002994:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 8002996:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800299a:	2b03      	cmp	r3, #3
 800299c:	d121      	bne.n	80029e2 <vCarriage_Calibration+0x1c6>
					{
						WelderUnit.Calibration_level = 04; // Откалибровано
 800299e:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80029a0:	2204      	movs	r2, #4
 80029a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

						WelderUnit.State |= 1<<1; //1 бит - Откалибровано
 80029a6:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80029a8:	7c1b      	ldrb	r3, [r3, #16]
 80029aa:	f043 0302 	orr.w	r3, r3, #2
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80029b2:	741a      	strb	r2, [r3, #16]

						WelderUnit.Position = 0; // Позиция каретки
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	809a      	strh	r2, [r3, #4]

						WelderUnit.Mode = WELDER_MODE_MANUAL; // После калибровки режим работы аппарата - ручной.
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80029bc:	2202      	movs	r2, #2
 80029be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

						WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING; // Отображение что выбран режим калибровки
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80029c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80029d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

						WelderUnit.State |= WELDER_MOVE_ENABLE; // Разрешить движение каретки
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80029d6:	7c1b      	ldrb	r3, [r3, #16]
 80029d8:	f043 0320 	orr.w	r3, r3, #32
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80029e0:	741a      	strb	r2, [r3, #16]
					}

					if (WelderUnit.Calibration_level  == 05) // Остановка калибровки
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80029e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	f47f af1b 	bne.w	8002824 <vCarriage_Calibration+0x8>
					{
						WelderUnit.Mode = 00; // Режим работа аппарата не выбран
 80029ee:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
						WelderUnit.IndicatorPanel.LEDsState &= ~LED_PARKING; // индикации калибровки
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 80029f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029fc:	f023 0302 	bic.w	r3, r3, #2
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <vCarriage_Calibration+0x1f4>)
 8002a04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		xQueueReceive(qWelderCalibrated, &lReceivedValue, portMAX_DELAY ); // Ждать команды на начало калибровки
 8002a08:	e70c      	b.n	8002824 <vCarriage_Calibration+0x8>
 8002a0a:	bf00      	nop
 8002a0c:	20003d8c 	.word	0x20003d8c
 8002a10:	2000353c 	.word	0x2000353c
 8002a14:	40011000 	.word	0x40011000
 8002a18:	20003dc4 	.word	0x20003dc4

08002a1c <vCarriage_GoTo>:
	vTaskDelete(NULL);
}


void vCarriage_GoTo(void *pvParameters)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		//Попытка получить команду для передвижения каретки в нужную позицию.
		// Данные из очереди при этом не удаляются
		xQueuePeek(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 8002a24:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <vCarriage_GoTo+0x1bc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f107 010b 	add.w	r1, r7, #11
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	4618      	mov	r0, r3
 8002a32:	f005 f8c1 	bl	8007bb8 <xQueuePeek>
//			WelderUnit.State &= ~0x01;
//			xQueueReceive(qWelderCmd, &lReceivedValue, portMAX_DELAY );
//			//WelderUnit.GoTo = WelderUnit.Position;
//		}

		if ((lReceivedValue == Cmd_CarriageGoTo) ) // Если пришла команда на начло движения
 8002a36:	7afb      	ldrb	r3, [r7, #11]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d1f3      	bne.n	8002a24 <vCarriage_GoTo+0x8>
		{

		WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / (STEPS_PER_ROTATE * MICRO_STEP_DEV); // Вычисление текущей позиции каретки, мм
 8002a3c:	4b67      	ldr	r3, [pc, #412]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002a3e:	89db      	ldrh	r3, [r3, #14]
 8002a40:	461a      	mov	r2, r3
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fd42 	bl	80004d4 <__aeabi_i2d>
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	4b62      	ldr	r3, [pc, #392]	; (8002be0 <vCarriage_GoTo+0x1c4>)
 8002a56:	f7fd fed1 	bl	80007fc <__aeabi_ddiv>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f7fd ffb3 	bl	80009cc <__aeabi_d2uiz>
 8002a66:	4603      	mov	r3, r0
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	4b5c      	ldr	r3, [pc, #368]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002a6c:	809a      	strh	r2, [r3, #4]

		dX = WelderUnit.GoTo - WelderUnit.Position; // Определение сколько и в какую сторону нужно сдвинуть каретку
 8002a6e:	4b5b      	ldr	r3, [pc, #364]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002a70:	891b      	ldrh	r3, [r3, #8]
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b59      	ldr	r3, [pc, #356]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002a76:	889b      	ldrh	r3, [r3, #4]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	60fb      	str	r3, [r7, #12]

		// Если каретка на нужном месте, то остановить движение каретки, очищаем очередь и снова взврат к xQueuePeek, для ожидания след команды
		if (dX == 0)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11e      	bne.n	8002ac0 <vCarriage_GoTo+0xa4>
		{
			Carriage_Move(0, 1, 1); // стоп
 8002a82:	2201      	movs	r2, #1
 8002a84:	2101      	movs	r1, #1
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fe f9fe 	bl	8000e88 <Carriage_Move>
			WelderUnit.State &= ~0x01;
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002a8e:	7c1b      	ldrb	r3, [r3, #16]
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b51      	ldr	r3, [pc, #324]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002a98:	741a      	strb	r2, [r3, #16]
			SendVal = Carriage_Done;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	72bb      	strb	r3, [r7, #10]
			xQueueSendToBack( qGoToResponse, &SendVal, 0 );
 8002a9e:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <vCarriage_GoTo+0x1c8>)
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	f107 010a 	add.w	r1, r7, #10
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f004 fdc3 	bl	8007634 <xQueueGenericSend>

			//xQueueSendToBack( qDebug, &SendVal, 0 );

			xQueueReceive(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 8002aae:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <vCarriage_GoTo+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f107 010b 	add.w	r1, r7, #11
 8002ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 ff12 	bl	80078e4 <xQueueReceive>

		}

		if (dX > 0 && (WelderUnit.State & WELDER_MOVE_ENABLE)) // Если двигать в сторону концевика
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	dd26      	ble.n	8002b14 <vCarriage_GoTo+0xf8>
 8002ac6:	4b45      	ldr	r3, [pc, #276]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002ac8:	7c1b      	ldrb	r3, [r3, #16]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d020      	beq.n	8002b14 <vCarriage_GoTo+0xf8>
		{

			if (WelderUnit.Position <= WelderUnit.GoTo && !(WelderUnit.State & 0x01)) // Если позиция не достигнута и каретка находится не в движении, то начать перемещение
 8002ad2:	4b42      	ldr	r3, [pc, #264]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002ad4:	889a      	ldrh	r2, [r3, #4]
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002ad8:	891b      	ldrh	r3, [r3, #8]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d81a      	bhi.n	8002b14 <vCarriage_GoTo+0xf8>
 8002ade:	4b3f      	ldr	r3, [pc, #252]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002ae0:	7c1b      	ldrb	r3, [r3, #16]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d114      	bne.n	8002b14 <vCarriage_GoTo+0xf8>
			{
				Carriage_Move(WelderUnit.Speed, 1, 1); // Начать перемещение
 8002aea:	4b3c      	ldr	r3, [pc, #240]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002aec:	88db      	ldrh	r3, [r3, #6]
 8002aee:	2201      	movs	r2, #1
 8002af0:	2101      	movs	r1, #1
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe f9c8 	bl	8000e88 <Carriage_Move>
				WelderUnit.State |= 0x01; // Статус - каретка в движении
 8002af8:	4b38      	ldr	r3, [pc, #224]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002afa:	7c1b      	ldrb	r3, [r3, #16]
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b36      	ldr	r3, [pc, #216]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b04:	741a      	strb	r2, [r3, #16]
				WelderUnit.State &= ~0x04; // Статус картека движется на встречу концевику
 8002b06:	4b35      	ldr	r3, [pc, #212]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b08:	7c1b      	ldrb	r3, [r3, #16]
 8002b0a:	f023 0304 	bic.w	r3, r3, #4
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b12:	741a      	strb	r2, [r3, #16]
			}
		}

		if (dX < 0 && (WelderUnit.State & WELDER_MOVE_ENABLE)) // Если нужно двигать от концевика
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	da26      	bge.n	8002b68 <vCarriage_GoTo+0x14c>
 8002b1a:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b1c:	7c1b      	ldrb	r3, [r3, #16]
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d020      	beq.n	8002b68 <vCarriage_GoTo+0x14c>
		{
			if (WelderUnit.Position >= WelderUnit.GoTo && !(WelderUnit.State & 0x01)) // Если позиция не достигнута и каретка находится не в движении, то начать перемещение
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b28:	889a      	ldrh	r2, [r3, #4]
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b2c:	891b      	ldrh	r3, [r3, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d31a      	bcc.n	8002b68 <vCarriage_GoTo+0x14c>
 8002b32:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b34:	7c1b      	ldrb	r3, [r3, #16]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d114      	bne.n	8002b68 <vCarriage_GoTo+0x14c>
			{
				Carriage_Move(WelderUnit.Speed, 0, 1); // Начать перемещение
 8002b3e:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b40:	88db      	ldrh	r3, [r3, #6]
 8002b42:	2201      	movs	r2, #1
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe f99e 	bl	8000e88 <Carriage_Move>
				WelderUnit.State |= 0x01; // Статус - каретка в движении
 8002b4c:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b4e:	7c1b      	ldrb	r3, [r3, #16]
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b58:	741a      	strb	r2, [r3, #16]
				WelderUnit.State |= 0x04; // Статус картека движется от концевика
 8002b5a:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b5c:	7c1b      	ldrb	r3, [r3, #16]
 8002b5e:	f043 0304 	orr.w	r3, r3, #4
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b66:	741a      	strb	r2, [r3, #16]
			}
		}

		if(!(WelderUnit.State & WELDER_MOVE_ENABLE))
 8002b68:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b6a:	7c1b      	ldrb	r3, [r3, #16]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <vCarriage_GoTo+0x170>
		{
			Carriage_Move(0, 1, 1); // стоп
 8002b74:	2201      	movs	r2, #1
 8002b76:	2101      	movs	r1, #1
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fe f985 	bl	8000e88 <Carriage_Move>
			WelderUnit.State &= ~0x01;
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b80:	7c1b      	ldrb	r3, [r3, #16]
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002b8a:	741a      	strb	r2, [r3, #16]
		}

		if (xSemaphoreTake(xSemaphore_StepCount, (500 / portTICK_RATE_MS)) == pdTRUE) // Если через 100 мС семафор так и не получен, то считать что двигатель осановлен
 8002b8c:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <vCarriage_GoTo+0x1cc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b94:	4618      	mov	r0, r3
 8002b96:	f004 ff47 	bl	8007a28 <xQueueSemaphoreTake>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	f47f af41 	bne.w	8002a24 <vCarriage_GoTo+0x8>
		//xSemaphoreTake(xSemaphore_StepCount, portMAX_DELAY );
		{
			if (!(WelderUnit.State & 0x04)) // Если каретка движется на встречу концевику, то инкрментирование Steps на каждый шаг ШД
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002ba4:	7c1b      	ldrb	r3, [r3, #16]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <vCarriage_GoTo+0x19e>
				{
					WelderUnit.Steps++;
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002bb0:	89db      	ldrh	r3, [r3, #14]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002bb8:	81da      	strh	r2, [r3, #14]
				}

				if (WelderUnit.State & 0x04) // Если каретка движется от концевика, то декрементирование Steps на каждый шаг ШД
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002bbc:	7c1b      	ldrb	r3, [r3, #16]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f43f af2e 	beq.w	8002a24 <vCarriage_GoTo+0x8>
				{
						WelderUnit.Steps--;
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002bca:	89db      	ldrh	r3, [r3, #14]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	4b02      	ldr	r3, [pc, #8]	; (8002bdc <vCarriage_GoTo+0x1c0>)
 8002bd2:	81da      	strh	r2, [r3, #14]
		xQueuePeek(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 8002bd4:	e726      	b.n	8002a24 <vCarriage_GoTo+0x8>
 8002bd6:	bf00      	nop
 8002bd8:	20003d94 	.word	0x20003d94
 8002bdc:	2000353c 	.word	0x2000353c
 8002be0:	40890000 	.word	0x40890000
 8002be4:	20003d80 	.word	0x20003d80
 8002be8:	20003564 	.word	0x20003564

08002bec <vKeyScan>:
	}
	vTaskDelete(NULL);
}

void vKeyScan(void *pvParameters)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]


	uint8_t nKeyPressed; // Передача команды о том какая кнопка или комбинация кнопок нажаты
	//portBASE_TYPE xStatus;

	vTaskDelay(100 / portTICK_RATE_MS);
 8002bf4:	2064      	movs	r0, #100	; 0x64
 8002bf6:	f005 fb63 	bl	80082c0 <vTaskDelay>

	for(;;)
	{
		PCB_KeyScan();
 8002bfa:	f7fe f98d 	bl	8000f18 <PCB_KeyScan>
		PCB_OutputControl();
 8002bfe:	f7fe f9f5 	bl	8000fec <PCB_OutputControl>
		//PCB_InputsScan();

		if (WelderUnit.IndicatorPanel.KeyState[0] == 128) // ВЛЕВО: [0], "-" - 128, "+" - 64, , STLED №5;
 8002c02:	4ba9      	ldr	r3, [pc, #676]	; (8002ea8 <vKeyScan+0x2bc>)
 8002c04:	7f5b      	ldrb	r3, [r3, #29]
 8002c06:	2b80      	cmp	r3, #128	; 0x80
 8002c08:	d12f      	bne.n	8002c6a <vKeyScan+0x7e>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xs_ShortPress_L > CNT_KEY_SHORT && Key.Xs_ShortPress_L != CNT_KEY_SHORT + 2)
 8002c0a:	4ba8      	ldr	r3, [pc, #672]	; (8002eac <vKeyScan+0x2c0>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d906      	bls.n	8002c20 <vKeyScan+0x34>
 8002c12:	4ba6      	ldr	r3, [pc, #664]	; (8002eac <vKeyScan+0x2c0>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d002      	beq.n	8002c20 <vKeyScan+0x34>
			{
//				nKeyPressed = press_short_Xs_L;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Xs_ShortPress_L = CNT_KEY_SHORT + 3; // Для ожидания отпускания клавиши
 8002c1a:	4ba4      	ldr	r3, [pc, #656]	; (8002eac <vKeyScan+0x2c0>)
 8002c1c:	2207      	movs	r2, #7
 8002c1e:	701a      	strb	r2, [r3, #0]
			}

			if (Key.Xs_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002c20:	4ba2      	ldr	r3, [pc, #648]	; (8002eac <vKeyScan+0x2c0>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b06      	cmp	r3, #6
 8002c26:	d005      	beq.n	8002c34 <vKeyScan+0x48>
			{
				Key.Xs_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002c28:	4ba0      	ldr	r3, [pc, #640]	; (8002eac <vKeyScan+0x2c0>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b9e      	ldr	r3, [pc, #632]	; (8002eac <vKeyScan+0x2c0>)
 8002c32:	701a      	strb	r2, [r3, #0]
			}


			Key.Xs_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002c34:	4b9d      	ldr	r3, [pc, #628]	; (8002eac <vKeyScan+0x2c0>)
 8002c36:	789b      	ldrb	r3, [r3, #2]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	4b9b      	ldr	r3, [pc, #620]	; (8002eac <vKeyScan+0x2c0>)
 8002c3e:	709a      	strb	r2, [r3, #2]
			if (Key.Xs_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002c40:	4b9a      	ldr	r3, [pc, #616]	; (8002eac <vKeyScan+0x2c0>)
 8002c42:	789b      	ldrb	r3, [r3, #2]
 8002c44:	2b32      	cmp	r3, #50	; 0x32
 8002c46:	d924      	bls.n	8002c92 <vKeyScan+0xa6>
			{
				nKeyPressed = press_long_Xs_L;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002c4c:	4b98      	ldr	r3, [pc, #608]	; (8002eb0 <vKeyScan+0x2c4>)
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	f107 010f 	add.w	r1, r7, #15
 8002c54:	2300      	movs	r3, #0
 8002c56:	2200      	movs	r2, #0
 8002c58:	f004 fcec 	bl	8007634 <xQueueGenericSend>


				Key.Xs_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002c5c:	4b93      	ldr	r3, [pc, #588]	; (8002eac <vKeyScan+0x2c0>)
 8002c5e:	2206      	movs	r2, #6
 8002c60:	701a      	strb	r2, [r3, #0]
				Key.Xs_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002c62:	4b92      	ldr	r3, [pc, #584]	; (8002eac <vKeyScan+0x2c0>)
 8002c64:	2225      	movs	r2, #37	; 0x25
 8002c66:	709a      	strb	r2, [r3, #2]
 8002c68:	e013      	b.n	8002c92 <vKeyScan+0xa6>
		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{


			if (Key.Xs_ShortPress_L >= CNT_KEY_SHORT + 3)
 8002c6a:	4b90      	ldr	r3, [pc, #576]	; (8002eac <vKeyScan+0x2c0>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d909      	bls.n	8002c86 <vKeyScan+0x9a>
			{
				nKeyPressed = press_short_Xs_L;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002c76:	4b8e      	ldr	r3, [pc, #568]	; (8002eb0 <vKeyScan+0x2c4>)
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	f107 010f 	add.w	r1, r7, #15
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2200      	movs	r2, #0
 8002c82:	f004 fcd7 	bl	8007634 <xQueueGenericSend>
			}

			Key.Xs_ShortPress_L = 0;
 8002c86:	4b89      	ldr	r3, [pc, #548]	; (8002eac <vKeyScan+0x2c0>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
			Key.Xs_LongPress_L = 0;
 8002c8c:	4b87      	ldr	r3, [pc, #540]	; (8002eac <vKeyScan+0x2c0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	709a      	strb	r2, [r3, #2]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 64) // Если есть факт нажатия кнопки
 8002c92:	4b85      	ldr	r3, [pc, #532]	; (8002ea8 <vKeyScan+0x2bc>)
 8002c94:	7f5b      	ldrb	r3, [r3, #29]
 8002c96:	2b40      	cmp	r3, #64	; 0x40
 8002c98:	d139      	bne.n	8002d0e <vKeyScan+0x122>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xs_ShortPress_R > CNT_KEY_SHORT && Key.Xs_ShortPress_R != CNT_KEY_SHORT + 2)
 8002c9a:	4b84      	ldr	r3, [pc, #528]	; (8002eac <vKeyScan+0x2c0>)
 8002c9c:	785b      	ldrb	r3, [r3, #1]
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d910      	bls.n	8002cc4 <vKeyScan+0xd8>
 8002ca2:	4b82      	ldr	r3, [pc, #520]	; (8002eac <vKeyScan+0x2c0>)
 8002ca4:	785b      	ldrb	r3, [r3, #1]
 8002ca6:	2b06      	cmp	r3, #6
 8002ca8:	d00c      	beq.n	8002cc4 <vKeyScan+0xd8>
			{

				nKeyPressed = press_short_Xs_R;
 8002caa:	2303      	movs	r3, #3
 8002cac:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002cae:	4b80      	ldr	r3, [pc, #512]	; (8002eb0 <vKeyScan+0x2c4>)
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	f107 010f 	add.w	r1, r7, #15
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f004 fcbb 	bl	8007634 <xQueueGenericSend>

				Key.Xs_ShortPress_R = 0; // Сброс счетика выдержки
 8002cbe:	4b7b      	ldr	r3, [pc, #492]	; (8002eac <vKeyScan+0x2c0>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	705a      	strb	r2, [r3, #1]
			}

			if (Key.Xs_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002cc4:	4b79      	ldr	r3, [pc, #484]	; (8002eac <vKeyScan+0x2c0>)
 8002cc6:	785b      	ldrb	r3, [r3, #1]
 8002cc8:	2b06      	cmp	r3, #6
 8002cca:	d005      	beq.n	8002cd8 <vKeyScan+0xec>
			{
				Key.Xs_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002ccc:	4b77      	ldr	r3, [pc, #476]	; (8002eac <vKeyScan+0x2c0>)
 8002cce:	785b      	ldrb	r3, [r3, #1]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	4b75      	ldr	r3, [pc, #468]	; (8002eac <vKeyScan+0x2c0>)
 8002cd6:	705a      	strb	r2, [r3, #1]
			}


			Key.Xs_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002cd8:	4b74      	ldr	r3, [pc, #464]	; (8002eac <vKeyScan+0x2c0>)
 8002cda:	78db      	ldrb	r3, [r3, #3]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	4b72      	ldr	r3, [pc, #456]	; (8002eac <vKeyScan+0x2c0>)
 8002ce2:	70da      	strb	r2, [r3, #3]
			if (Key.Xs_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002ce4:	4b71      	ldr	r3, [pc, #452]	; (8002eac <vKeyScan+0x2c0>)
 8002ce6:	78db      	ldrb	r3, [r3, #3]
 8002ce8:	2b32      	cmp	r3, #50	; 0x32
 8002cea:	d916      	bls.n	8002d1a <vKeyScan+0x12e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xs_R;
 8002cec:	2304      	movs	r3, #4
 8002cee:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <vKeyScan+0x2c4>)
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	f107 010f 	add.w	r1, r7, #15
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f004 fc9a 	bl	8007634 <xQueueGenericSend>

				Key.Xs_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002d00:	4b6a      	ldr	r3, [pc, #424]	; (8002eac <vKeyScan+0x2c0>)
 8002d02:	2206      	movs	r2, #6
 8002d04:	705a      	strb	r2, [r3, #1]
				Key.Xs_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002d06:	4b69      	ldr	r3, [pc, #420]	; (8002eac <vKeyScan+0x2c0>)
 8002d08:	2225      	movs	r2, #37	; 0x25
 8002d0a:	70da      	strb	r2, [r3, #3]
 8002d0c:	e005      	b.n	8002d1a <vKeyScan+0x12e>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xs_ShortPress_R = 0;
 8002d0e:	4b67      	ldr	r3, [pc, #412]	; (8002eac <vKeyScan+0x2c0>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	705a      	strb	r2, [r3, #1]
			Key.Xs_LongPress_R = 0;
 8002d14:	4b65      	ldr	r3, [pc, #404]	; (8002eac <vKeyScan+0x2c0>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	70da      	strb	r2, [r3, #3]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 16) // ВПРАВО: [0], "-" - 16, "+" - 32, , STLED №5;
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <vKeyScan+0x2bc>)
 8002d1c:	7f5b      	ldrb	r3, [r3, #29]
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	d139      	bne.n	8002d96 <vKeyScan+0x1aa>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xf_ShortPress_L > CNT_KEY_SHORT && Key.Xf_ShortPress_L != CNT_KEY_SHORT + 2)
 8002d22:	4b62      	ldr	r3, [pc, #392]	; (8002eac <vKeyScan+0x2c0>)
 8002d24:	791b      	ldrb	r3, [r3, #4]
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d910      	bls.n	8002d4c <vKeyScan+0x160>
 8002d2a:	4b60      	ldr	r3, [pc, #384]	; (8002eac <vKeyScan+0x2c0>)
 8002d2c:	791b      	ldrb	r3, [r3, #4]
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d00c      	beq.n	8002d4c <vKeyScan+0x160>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Xf_L;
 8002d32:	2305      	movs	r3, #5
 8002d34:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002d36:	4b5e      	ldr	r3, [pc, #376]	; (8002eb0 <vKeyScan+0x2c4>)
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	f107 010f 	add.w	r1, r7, #15
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2200      	movs	r2, #0
 8002d42:	f004 fc77 	bl	8007634 <xQueueGenericSend>


				Key.Xf_ShortPress_L = 0; // Сброс счетика выдержки
 8002d46:	4b59      	ldr	r3, [pc, #356]	; (8002eac <vKeyScan+0x2c0>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	711a      	strb	r2, [r3, #4]
			}

			if (Key.Xf_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002d4c:	4b57      	ldr	r3, [pc, #348]	; (8002eac <vKeyScan+0x2c0>)
 8002d4e:	791b      	ldrb	r3, [r3, #4]
 8002d50:	2b06      	cmp	r3, #6
 8002d52:	d005      	beq.n	8002d60 <vKeyScan+0x174>
			{
				Key.Xf_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002d54:	4b55      	ldr	r3, [pc, #340]	; (8002eac <vKeyScan+0x2c0>)
 8002d56:	791b      	ldrb	r3, [r3, #4]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	4b53      	ldr	r3, [pc, #332]	; (8002eac <vKeyScan+0x2c0>)
 8002d5e:	711a      	strb	r2, [r3, #4]
			}


			Key.Xf_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002d60:	4b52      	ldr	r3, [pc, #328]	; (8002eac <vKeyScan+0x2c0>)
 8002d62:	799b      	ldrb	r3, [r3, #6]
 8002d64:	3301      	adds	r3, #1
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	4b50      	ldr	r3, [pc, #320]	; (8002eac <vKeyScan+0x2c0>)
 8002d6a:	719a      	strb	r2, [r3, #6]
			if (Key.Xf_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002d6c:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <vKeyScan+0x2c0>)
 8002d6e:	799b      	ldrb	r3, [r3, #6]
 8002d70:	2b32      	cmp	r3, #50	; 0x32
 8002d72:	d916      	bls.n	8002da2 <vKeyScan+0x1b6>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xf_L;
 8002d74:	2306      	movs	r3, #6
 8002d76:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002d78:	4b4d      	ldr	r3, [pc, #308]	; (8002eb0 <vKeyScan+0x2c4>)
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	f107 010f 	add.w	r1, r7, #15
 8002d80:	2300      	movs	r3, #0
 8002d82:	2200      	movs	r2, #0
 8002d84:	f004 fc56 	bl	8007634 <xQueueGenericSend>


				Key.Xf_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002d88:	4b48      	ldr	r3, [pc, #288]	; (8002eac <vKeyScan+0x2c0>)
 8002d8a:	2206      	movs	r2, #6
 8002d8c:	711a      	strb	r2, [r3, #4]
				Key.Xf_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002d8e:	4b47      	ldr	r3, [pc, #284]	; (8002eac <vKeyScan+0x2c0>)
 8002d90:	2225      	movs	r2, #37	; 0x25
 8002d92:	719a      	strb	r2, [r3, #6]
 8002d94:	e005      	b.n	8002da2 <vKeyScan+0x1b6>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xf_ShortPress_L = 0;
 8002d96:	4b45      	ldr	r3, [pc, #276]	; (8002eac <vKeyScan+0x2c0>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	711a      	strb	r2, [r3, #4]
			Key.Xf_LongPress_L = 0;
 8002d9c:	4b43      	ldr	r3, [pc, #268]	; (8002eac <vKeyScan+0x2c0>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	719a      	strb	r2, [r3, #6]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 32)
 8002da2:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <vKeyScan+0x2bc>)
 8002da4:	7f5b      	ldrb	r3, [r3, #29]
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d139      	bne.n	8002e1e <vKeyScan+0x232>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xf_ShortPress_R > CNT_KEY_SHORT && Key.Xf_ShortPress_R != CNT_KEY_SHORT + 2)
 8002daa:	4b40      	ldr	r3, [pc, #256]	; (8002eac <vKeyScan+0x2c0>)
 8002dac:	795b      	ldrb	r3, [r3, #5]
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d910      	bls.n	8002dd4 <vKeyScan+0x1e8>
 8002db2:	4b3e      	ldr	r3, [pc, #248]	; (8002eac <vKeyScan+0x2c0>)
 8002db4:	795b      	ldrb	r3, [r3, #5]
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d00c      	beq.n	8002dd4 <vKeyScan+0x1e8>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Xf_R;
 8002dba:	2307      	movs	r3, #7
 8002dbc:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002dbe:	4b3c      	ldr	r3, [pc, #240]	; (8002eb0 <vKeyScan+0x2c4>)
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	f107 010f 	add.w	r1, r7, #15
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f004 fc33 	bl	8007634 <xQueueGenericSend>


				Key.Xf_ShortPress_R = 0; // Сброс счетика выдержки
 8002dce:	4b37      	ldr	r3, [pc, #220]	; (8002eac <vKeyScan+0x2c0>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	715a      	strb	r2, [r3, #5]
			}

			if (Key.Xf_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002dd4:	4b35      	ldr	r3, [pc, #212]	; (8002eac <vKeyScan+0x2c0>)
 8002dd6:	795b      	ldrb	r3, [r3, #5]
 8002dd8:	2b06      	cmp	r3, #6
 8002dda:	d005      	beq.n	8002de8 <vKeyScan+0x1fc>
			{
				Key.Xf_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002ddc:	4b33      	ldr	r3, [pc, #204]	; (8002eac <vKeyScan+0x2c0>)
 8002dde:	795b      	ldrb	r3, [r3, #5]
 8002de0:	3301      	adds	r3, #1
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	4b31      	ldr	r3, [pc, #196]	; (8002eac <vKeyScan+0x2c0>)
 8002de6:	715a      	strb	r2, [r3, #5]
			}


			Key.Xf_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002de8:	4b30      	ldr	r3, [pc, #192]	; (8002eac <vKeyScan+0x2c0>)
 8002dea:	79db      	ldrb	r3, [r3, #7]
 8002dec:	3301      	adds	r3, #1
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	4b2e      	ldr	r3, [pc, #184]	; (8002eac <vKeyScan+0x2c0>)
 8002df2:	71da      	strb	r2, [r3, #7]
			if (Key.Xf_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002df4:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <vKeyScan+0x2c0>)
 8002df6:	79db      	ldrb	r3, [r3, #7]
 8002df8:	2b32      	cmp	r3, #50	; 0x32
 8002dfa:	d916      	bls.n	8002e2a <vKeyScan+0x23e>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xf_R;
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002e00:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <vKeyScan+0x2c4>)
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	f107 010f 	add.w	r1, r7, #15
 8002e08:	2300      	movs	r3, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f004 fc12 	bl	8007634 <xQueueGenericSend>

				Key.Xf_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002e10:	4b26      	ldr	r3, [pc, #152]	; (8002eac <vKeyScan+0x2c0>)
 8002e12:	2206      	movs	r2, #6
 8002e14:	715a      	strb	r2, [r3, #5]
				Key.Xf_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002e16:	4b25      	ldr	r3, [pc, #148]	; (8002eac <vKeyScan+0x2c0>)
 8002e18:	2225      	movs	r2, #37	; 0x25
 8002e1a:	71da      	strb	r2, [r3, #7]
 8002e1c:	e005      	b.n	8002e2a <vKeyScan+0x23e>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xf_ShortPress_R = 0;
 8002e1e:	4b23      	ldr	r3, [pc, #140]	; (8002eac <vKeyScan+0x2c0>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	715a      	strb	r2, [r3, #5]
			Key.Xf_LongPress_R = 0;
 8002e24:	4b21      	ldr	r3, [pc, #132]	; (8002eac <vKeyScan+0x2c0>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	71da      	strb	r2, [r3, #7]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 8) //ЗАДЕРЖКА (Delay_s): [0], "-" - 8, "+" - 4, , STLED №5;
 8002e2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ea8 <vKeyScan+0x2bc>)
 8002e2c:	7f5b      	ldrb	r3, [r3, #29]
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d140      	bne.n	8002eb4 <vKeyScan+0x2c8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_s_ShortPress_L > CNT_KEY_SHORT && Key.Delay_s_ShortPress_L != CNT_KEY_SHORT + 2)
 8002e32:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <vKeyScan+0x2c0>)
 8002e34:	7a1b      	ldrb	r3, [r3, #8]
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d910      	bls.n	8002e5c <vKeyScan+0x270>
 8002e3a:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <vKeyScan+0x2c0>)
 8002e3c:	7a1b      	ldrb	r3, [r3, #8]
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d00c      	beq.n	8002e5c <vKeyScan+0x270>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_s_L;
 8002e42:	2309      	movs	r3, #9
 8002e44:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002e46:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <vKeyScan+0x2c4>)
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	f107 010f 	add.w	r1, r7, #15
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2200      	movs	r2, #0
 8002e52:	f004 fbef 	bl	8007634 <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = 0; // Сброс счетика выдержки
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <vKeyScan+0x2c0>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	721a      	strb	r2, [r3, #8]
			}

			if (Key.Delay_s_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <vKeyScan+0x2c0>)
 8002e5e:	7a1b      	ldrb	r3, [r3, #8]
 8002e60:	2b06      	cmp	r3, #6
 8002e62:	d005      	beq.n	8002e70 <vKeyScan+0x284>
			{
				Key.Delay_s_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <vKeyScan+0x2c0>)
 8002e66:	7a1b      	ldrb	r3, [r3, #8]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <vKeyScan+0x2c0>)
 8002e6e:	721a      	strb	r2, [r3, #8]
			}


			Key.Delay_s_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <vKeyScan+0x2c0>)
 8002e72:	7a9b      	ldrb	r3, [r3, #10]
 8002e74:	3301      	adds	r3, #1
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <vKeyScan+0x2c0>)
 8002e7a:	729a      	strb	r2, [r3, #10]
			if (Key.Delay_s_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <vKeyScan+0x2c0>)
 8002e7e:	7a9b      	ldrb	r3, [r3, #10]
 8002e80:	2b32      	cmp	r3, #50	; 0x32
 8002e82:	d91d      	bls.n	8002ec0 <vKeyScan+0x2d4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_s_L;
 8002e84:	230a      	movs	r3, #10
 8002e86:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <vKeyScan+0x2c4>)
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	f107 010f 	add.w	r1, r7, #15
 8002e90:	2300      	movs	r3, #0
 8002e92:	2200      	movs	r2, #0
 8002e94:	f004 fbce 	bl	8007634 <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <vKeyScan+0x2c0>)
 8002e9a:	2206      	movs	r2, #6
 8002e9c:	721a      	strb	r2, [r3, #8]
				Key.Delay_s_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002e9e:	4b03      	ldr	r3, [pc, #12]	; (8002eac <vKeyScan+0x2c0>)
 8002ea0:	2225      	movs	r2, #37	; 0x25
 8002ea2:	729a      	strb	r2, [r3, #10]
 8002ea4:	e00c      	b.n	8002ec0 <vKeyScan+0x2d4>
 8002ea6:	bf00      	nop
 8002ea8:	2000353c 	.word	0x2000353c
 8002eac:	20003da0 	.word	0x20003da0
 8002eb0:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_s_ShortPress_L = 0;
 8002eb4:	4ba9      	ldr	r3, [pc, #676]	; (800315c <vKeyScan+0x570>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	721a      	strb	r2, [r3, #8]
			Key.Delay_s_LongPress_L = 0;
 8002eba:	4ba8      	ldr	r3, [pc, #672]	; (800315c <vKeyScan+0x570>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	729a      	strb	r2, [r3, #10]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 4)
 8002ec0:	4ba7      	ldr	r3, [pc, #668]	; (8003160 <vKeyScan+0x574>)
 8002ec2:	7f5b      	ldrb	r3, [r3, #29]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d139      	bne.n	8002f3c <vKeyScan+0x350>
			{
				// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
				if (Key.Delay_s_ShortPress_R > CNT_KEY_SHORT && Key.Delay_s_ShortPress_R != CNT_KEY_SHORT + 2)
 8002ec8:	4ba4      	ldr	r3, [pc, #656]	; (800315c <vKeyScan+0x570>)
 8002eca:	7a5b      	ldrb	r3, [r3, #9]
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d910      	bls.n	8002ef2 <vKeyScan+0x306>
 8002ed0:	4ba2      	ldr	r3, [pc, #648]	; (800315c <vKeyScan+0x570>)
 8002ed2:	7a5b      	ldrb	r3, [r3, #9]
 8002ed4:	2b06      	cmp	r3, #6
 8002ed6:	d00c      	beq.n	8002ef2 <vKeyScan+0x306>
				{
					// Дейсвие при нажатии на клавишу
					nKeyPressed = press_short_Delay_s_R;
 8002ed8:	230b      	movs	r3, #11
 8002eda:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002edc:	4ba1      	ldr	r3, [pc, #644]	; (8003164 <vKeyScan+0x578>)
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	f107 010f 	add.w	r1, r7, #15
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f004 fba4 	bl	8007634 <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = 0; // Сброс счетика выдержки
 8002eec:	4b9b      	ldr	r3, [pc, #620]	; (800315c <vKeyScan+0x570>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	725a      	strb	r2, [r3, #9]
				}

				if (Key.Delay_s_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002ef2:	4b9a      	ldr	r3, [pc, #616]	; (800315c <vKeyScan+0x570>)
 8002ef4:	7a5b      	ldrb	r3, [r3, #9]
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d005      	beq.n	8002f06 <vKeyScan+0x31a>
				{
					Key.Delay_s_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002efa:	4b98      	ldr	r3, [pc, #608]	; (800315c <vKeyScan+0x570>)
 8002efc:	7a5b      	ldrb	r3, [r3, #9]
 8002efe:	3301      	adds	r3, #1
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b96      	ldr	r3, [pc, #600]	; (800315c <vKeyScan+0x570>)
 8002f04:	725a      	strb	r2, [r3, #9]
				}


				Key.Delay_s_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002f06:	4b95      	ldr	r3, [pc, #596]	; (800315c <vKeyScan+0x570>)
 8002f08:	7adb      	ldrb	r3, [r3, #11]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	4b93      	ldr	r3, [pc, #588]	; (800315c <vKeyScan+0x570>)
 8002f10:	72da      	strb	r2, [r3, #11]
				if (Key.Delay_s_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002f12:	4b92      	ldr	r3, [pc, #584]	; (800315c <vKeyScan+0x570>)
 8002f14:	7adb      	ldrb	r3, [r3, #11]
 8002f16:	2b32      	cmp	r3, #50	; 0x32
 8002f18:	d916      	bls.n	8002f48 <vKeyScan+0x35c>
				{
					// Дейсвие при нажатии на клавишу
					nKeyPressed = press_long_Delay_s_R;
 8002f1a:	230c      	movs	r3, #12
 8002f1c:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002f1e:	4b91      	ldr	r3, [pc, #580]	; (8003164 <vKeyScan+0x578>)
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	f107 010f 	add.w	r1, r7, #15
 8002f26:	2300      	movs	r3, #0
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f004 fb83 	bl	8007634 <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002f2e:	4b8b      	ldr	r3, [pc, #556]	; (800315c <vKeyScan+0x570>)
 8002f30:	2206      	movs	r2, #6
 8002f32:	725a      	strb	r2, [r3, #9]
					Key.Delay_s_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002f34:	4b89      	ldr	r3, [pc, #548]	; (800315c <vKeyScan+0x570>)
 8002f36:	2225      	movs	r2, #37	; 0x25
 8002f38:	72da      	strb	r2, [r3, #11]
 8002f3a:	e005      	b.n	8002f48 <vKeyScan+0x35c>


			}
			else // Если кнопка была отпущена то сбросить все счетчики выдержки
			{
				Key.Delay_s_ShortPress_R = 0;
 8002f3c:	4b87      	ldr	r3, [pc, #540]	; (800315c <vKeyScan+0x570>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	725a      	strb	r2, [r3, #9]
				Key.Delay_s_LongPress_R = 0;
 8002f42:	4b86      	ldr	r3, [pc, #536]	; (800315c <vKeyScan+0x570>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	72da      	strb	r2, [r3, #11]
			}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 2) // СКОРОСТЬ: [0], "-" - 2, "+" - 1, , STLED №5;
 8002f48:	4b85      	ldr	r3, [pc, #532]	; (8003160 <vKeyScan+0x574>)
 8002f4a:	7f5b      	ldrb	r3, [r3, #29]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d139      	bne.n	8002fc4 <vKeyScan+0x3d8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Speed_ShortPress_L > CNT_KEY_SHORT && Key.Speed_ShortPress_L != CNT_KEY_SHORT + 2)
 8002f50:	4b82      	ldr	r3, [pc, #520]	; (800315c <vKeyScan+0x570>)
 8002f52:	7b1b      	ldrb	r3, [r3, #12]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d910      	bls.n	8002f7a <vKeyScan+0x38e>
 8002f58:	4b80      	ldr	r3, [pc, #512]	; (800315c <vKeyScan+0x570>)
 8002f5a:	7b1b      	ldrb	r3, [r3, #12]
 8002f5c:	2b06      	cmp	r3, #6
 8002f5e:	d00c      	beq.n	8002f7a <vKeyScan+0x38e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Speed_L;
 8002f60:	230d      	movs	r3, #13
 8002f62:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002f64:	4b7f      	ldr	r3, [pc, #508]	; (8003164 <vKeyScan+0x578>)
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	f107 010f 	add.w	r1, r7, #15
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f004 fb60 	bl	8007634 <xQueueGenericSend>

				Key.Speed_ShortPress_L = 0; // Сброс счетика выдержки
 8002f74:	4b79      	ldr	r3, [pc, #484]	; (800315c <vKeyScan+0x570>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	731a      	strb	r2, [r3, #12]
			}

			if (Key.Speed_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002f7a:	4b78      	ldr	r3, [pc, #480]	; (800315c <vKeyScan+0x570>)
 8002f7c:	7b1b      	ldrb	r3, [r3, #12]
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d005      	beq.n	8002f8e <vKeyScan+0x3a2>
			{
				Key.Speed_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002f82:	4b76      	ldr	r3, [pc, #472]	; (800315c <vKeyScan+0x570>)
 8002f84:	7b1b      	ldrb	r3, [r3, #12]
 8002f86:	3301      	adds	r3, #1
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4b74      	ldr	r3, [pc, #464]	; (800315c <vKeyScan+0x570>)
 8002f8c:	731a      	strb	r2, [r3, #12]
			}


			Key.Speed_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002f8e:	4b73      	ldr	r3, [pc, #460]	; (800315c <vKeyScan+0x570>)
 8002f90:	7b9b      	ldrb	r3, [r3, #14]
 8002f92:	3301      	adds	r3, #1
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4b71      	ldr	r3, [pc, #452]	; (800315c <vKeyScan+0x570>)
 8002f98:	739a      	strb	r2, [r3, #14]
			if (Key.Speed_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002f9a:	4b70      	ldr	r3, [pc, #448]	; (800315c <vKeyScan+0x570>)
 8002f9c:	7b9b      	ldrb	r3, [r3, #14]
 8002f9e:	2b32      	cmp	r3, #50	; 0x32
 8002fa0:	d916      	bls.n	8002fd0 <vKeyScan+0x3e4>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Speed_L;
 8002fa2:	230e      	movs	r3, #14
 8002fa4:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002fa6:	4b6f      	ldr	r3, [pc, #444]	; (8003164 <vKeyScan+0x578>)
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	f107 010f 	add.w	r1, r7, #15
 8002fae:	2300      	movs	r3, #0
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f004 fb3f 	bl	8007634 <xQueueGenericSend>

				Key.Speed_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002fb6:	4b69      	ldr	r3, [pc, #420]	; (800315c <vKeyScan+0x570>)
 8002fb8:	2206      	movs	r2, #6
 8002fba:	731a      	strb	r2, [r3, #12]
				Key.Speed_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002fbc:	4b67      	ldr	r3, [pc, #412]	; (800315c <vKeyScan+0x570>)
 8002fbe:	2225      	movs	r2, #37	; 0x25
 8002fc0:	739a      	strb	r2, [r3, #14]
 8002fc2:	e005      	b.n	8002fd0 <vKeyScan+0x3e4>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Speed_ShortPress_L = 0;
 8002fc4:	4b65      	ldr	r3, [pc, #404]	; (800315c <vKeyScan+0x570>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	731a      	strb	r2, [r3, #12]
			Key.Speed_LongPress_L = 0;
 8002fca:	4b64      	ldr	r3, [pc, #400]	; (800315c <vKeyScan+0x570>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	739a      	strb	r2, [r3, #14]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 1)
 8002fd0:	4b63      	ldr	r3, [pc, #396]	; (8003160 <vKeyScan+0x574>)
 8002fd2:	7f5b      	ldrb	r3, [r3, #29]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d139      	bne.n	800304c <vKeyScan+0x460>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Speed_ShortPress_R > CNT_KEY_SHORT && Key.Speed_ShortPress_R != CNT_KEY_SHORT + 2)
 8002fd8:	4b60      	ldr	r3, [pc, #384]	; (800315c <vKeyScan+0x570>)
 8002fda:	7b5b      	ldrb	r3, [r3, #13]
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d910      	bls.n	8003002 <vKeyScan+0x416>
 8002fe0:	4b5e      	ldr	r3, [pc, #376]	; (800315c <vKeyScan+0x570>)
 8002fe2:	7b5b      	ldrb	r3, [r3, #13]
 8002fe4:	2b06      	cmp	r3, #6
 8002fe6:	d00c      	beq.n	8003002 <vKeyScan+0x416>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Speed_R;
 8002fe8:	230f      	movs	r3, #15
 8002fea:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002fec:	4b5d      	ldr	r3, [pc, #372]	; (8003164 <vKeyScan+0x578>)
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	f107 010f 	add.w	r1, r7, #15
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f004 fb1c 	bl	8007634 <xQueueGenericSend>

				Key.Speed_ShortPress_R = 0; // Сброс счетика выдержки
 8002ffc:	4b57      	ldr	r3, [pc, #348]	; (800315c <vKeyScan+0x570>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	735a      	strb	r2, [r3, #13]
			}

			if (Key.Speed_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003002:	4b56      	ldr	r3, [pc, #344]	; (800315c <vKeyScan+0x570>)
 8003004:	7b5b      	ldrb	r3, [r3, #13]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d005      	beq.n	8003016 <vKeyScan+0x42a>
			{
				Key.Speed_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 800300a:	4b54      	ldr	r3, [pc, #336]	; (800315c <vKeyScan+0x570>)
 800300c:	7b5b      	ldrb	r3, [r3, #13]
 800300e:	3301      	adds	r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4b52      	ldr	r3, [pc, #328]	; (800315c <vKeyScan+0x570>)
 8003014:	735a      	strb	r2, [r3, #13]
			}


			Key.Speed_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8003016:	4b51      	ldr	r3, [pc, #324]	; (800315c <vKeyScan+0x570>)
 8003018:	7bdb      	ldrb	r3, [r3, #15]
 800301a:	3301      	adds	r3, #1
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b4f      	ldr	r3, [pc, #316]	; (800315c <vKeyScan+0x570>)
 8003020:	73da      	strb	r2, [r3, #15]
			if (Key.Speed_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003022:	4b4e      	ldr	r3, [pc, #312]	; (800315c <vKeyScan+0x570>)
 8003024:	7bdb      	ldrb	r3, [r3, #15]
 8003026:	2b32      	cmp	r3, #50	; 0x32
 8003028:	d916      	bls.n	8003058 <vKeyScan+0x46c>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Speed_R;
 800302a:	2310      	movs	r3, #16
 800302c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800302e:	4b4d      	ldr	r3, [pc, #308]	; (8003164 <vKeyScan+0x578>)
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	f107 010f 	add.w	r1, r7, #15
 8003036:	2300      	movs	r3, #0
 8003038:	2200      	movs	r2, #0
 800303a:	f004 fafb 	bl	8007634 <xQueueGenericSend>

				Key.Speed_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800303e:	4b47      	ldr	r3, [pc, #284]	; (800315c <vKeyScan+0x570>)
 8003040:	2206      	movs	r2, #6
 8003042:	735a      	strb	r2, [r3, #13]
				Key.Speed_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003044:	4b45      	ldr	r3, [pc, #276]	; (800315c <vKeyScan+0x570>)
 8003046:	2225      	movs	r2, #37	; 0x25
 8003048:	73da      	strb	r2, [r3, #15]
 800304a:	e005      	b.n	8003058 <vKeyScan+0x46c>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Speed_ShortPress_R = 0;
 800304c:	4b43      	ldr	r3, [pc, #268]	; (800315c <vKeyScan+0x570>)
 800304e:	2200      	movs	r2, #0
 8003050:	735a      	strb	r2, [r3, #13]
			Key.Speed_LongPress_R = 0;
 8003052:	4b42      	ldr	r3, [pc, #264]	; (800315c <vKeyScan+0x570>)
 8003054:	2200      	movs	r2, #0
 8003056:	73da      	strb	r2, [r3, #15]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 1) // ЗАДЕРЖКА (Delay_f): [1], "-" - 1, "+" - 4, , STLED №5;
 8003058:	4b41      	ldr	r3, [pc, #260]	; (8003160 <vKeyScan+0x574>)
 800305a:	7f9b      	ldrb	r3, [r3, #30]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d139      	bne.n	80030d4 <vKeyScan+0x4e8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_f_ShortPress_L > CNT_KEY_SHORT && Key.Delay_f_ShortPress_L != CNT_KEY_SHORT + 2)
 8003060:	4b3e      	ldr	r3, [pc, #248]	; (800315c <vKeyScan+0x570>)
 8003062:	7c1b      	ldrb	r3, [r3, #16]
 8003064:	2b04      	cmp	r3, #4
 8003066:	d910      	bls.n	800308a <vKeyScan+0x49e>
 8003068:	4b3c      	ldr	r3, [pc, #240]	; (800315c <vKeyScan+0x570>)
 800306a:	7c1b      	ldrb	r3, [r3, #16]
 800306c:	2b06      	cmp	r3, #6
 800306e:	d00c      	beq.n	800308a <vKeyScan+0x49e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_f_L;
 8003070:	2311      	movs	r3, #17
 8003072:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003074:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <vKeyScan+0x578>)
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	f107 010f 	add.w	r1, r7, #15
 800307c:	2300      	movs	r3, #0
 800307e:	2200      	movs	r2, #0
 8003080:	f004 fad8 	bl	8007634 <xQueueGenericSend>

				Key.Delay_f_ShortPress_L = 0; // Сброс счетика выдержки
 8003084:	4b35      	ldr	r3, [pc, #212]	; (800315c <vKeyScan+0x570>)
 8003086:	2200      	movs	r2, #0
 8003088:	741a      	strb	r2, [r3, #16]
			}

			if (Key.Delay_f_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 800308a:	4b34      	ldr	r3, [pc, #208]	; (800315c <vKeyScan+0x570>)
 800308c:	7c1b      	ldrb	r3, [r3, #16]
 800308e:	2b06      	cmp	r3, #6
 8003090:	d005      	beq.n	800309e <vKeyScan+0x4b2>
			{
				Key.Delay_f_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8003092:	4b32      	ldr	r3, [pc, #200]	; (800315c <vKeyScan+0x570>)
 8003094:	7c1b      	ldrb	r3, [r3, #16]
 8003096:	3301      	adds	r3, #1
 8003098:	b2da      	uxtb	r2, r3
 800309a:	4b30      	ldr	r3, [pc, #192]	; (800315c <vKeyScan+0x570>)
 800309c:	741a      	strb	r2, [r3, #16]
			}


			Key.Delay_f_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 800309e:	4b2f      	ldr	r3, [pc, #188]	; (800315c <vKeyScan+0x570>)
 80030a0:	7c9b      	ldrb	r3, [r3, #18]
 80030a2:	3301      	adds	r3, #1
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	4b2d      	ldr	r3, [pc, #180]	; (800315c <vKeyScan+0x570>)
 80030a8:	749a      	strb	r2, [r3, #18]
			if (Key.Delay_f_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80030aa:	4b2c      	ldr	r3, [pc, #176]	; (800315c <vKeyScan+0x570>)
 80030ac:	7c9b      	ldrb	r3, [r3, #18]
 80030ae:	2b32      	cmp	r3, #50	; 0x32
 80030b0:	d916      	bls.n	80030e0 <vKeyScan+0x4f4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_f_L;
 80030b2:	2312      	movs	r3, #18
 80030b4:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80030b6:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <vKeyScan+0x578>)
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	f107 010f 	add.w	r1, r7, #15
 80030be:	2300      	movs	r3, #0
 80030c0:	2200      	movs	r2, #0
 80030c2:	f004 fab7 	bl	8007634 <xQueueGenericSend>


				Key.Delay_f_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80030c6:	4b25      	ldr	r3, [pc, #148]	; (800315c <vKeyScan+0x570>)
 80030c8:	2206      	movs	r2, #6
 80030ca:	741a      	strb	r2, [r3, #16]
				Key.Delay_f_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80030cc:	4b23      	ldr	r3, [pc, #140]	; (800315c <vKeyScan+0x570>)
 80030ce:	2225      	movs	r2, #37	; 0x25
 80030d0:	749a      	strb	r2, [r3, #18]
 80030d2:	e005      	b.n	80030e0 <vKeyScan+0x4f4>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_f_ShortPress_L = 0;
 80030d4:	4b21      	ldr	r3, [pc, #132]	; (800315c <vKeyScan+0x570>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	741a      	strb	r2, [r3, #16]
			Key.Delay_f_LongPress_L = 0;
 80030da:	4b20      	ldr	r3, [pc, #128]	; (800315c <vKeyScan+0x570>)
 80030dc:	2200      	movs	r2, #0
 80030de:	749a      	strb	r2, [r3, #18]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 4)
 80030e0:	4b1f      	ldr	r3, [pc, #124]	; (8003160 <vKeyScan+0x574>)
 80030e2:	7f9b      	ldrb	r3, [r3, #30]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d13f      	bne.n	8003168 <vKeyScan+0x57c>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_f_ShortPress_R > CNT_KEY_SHORT && Key.Delay_f_ShortPress_R != CNT_KEY_SHORT + 2)
 80030e8:	4b1c      	ldr	r3, [pc, #112]	; (800315c <vKeyScan+0x570>)
 80030ea:	7c5b      	ldrb	r3, [r3, #17]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d910      	bls.n	8003112 <vKeyScan+0x526>
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <vKeyScan+0x570>)
 80030f2:	7c5b      	ldrb	r3, [r3, #17]
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	d00c      	beq.n	8003112 <vKeyScan+0x526>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_f_R;
 80030f8:	2313      	movs	r3, #19
 80030fa:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <vKeyScan+0x578>)
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	f107 010f 	add.w	r1, r7, #15
 8003104:	2300      	movs	r3, #0
 8003106:	2200      	movs	r2, #0
 8003108:	f004 fa94 	bl	8007634 <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = 0; // Сброс счетика выдержки
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <vKeyScan+0x570>)
 800310e:	2200      	movs	r2, #0
 8003110:	745a      	strb	r2, [r3, #17]
			}

			if (Key.Delay_f_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003112:	4b12      	ldr	r3, [pc, #72]	; (800315c <vKeyScan+0x570>)
 8003114:	7c5b      	ldrb	r3, [r3, #17]
 8003116:	2b06      	cmp	r3, #6
 8003118:	d005      	beq.n	8003126 <vKeyScan+0x53a>
			{
				Key.Delay_f_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 800311a:	4b10      	ldr	r3, [pc, #64]	; (800315c <vKeyScan+0x570>)
 800311c:	7c5b      	ldrb	r3, [r3, #17]
 800311e:	3301      	adds	r3, #1
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4b0e      	ldr	r3, [pc, #56]	; (800315c <vKeyScan+0x570>)
 8003124:	745a      	strb	r2, [r3, #17]
			}


			Key.Delay_f_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <vKeyScan+0x570>)
 8003128:	7cdb      	ldrb	r3, [r3, #19]
 800312a:	3301      	adds	r3, #1
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <vKeyScan+0x570>)
 8003130:	74da      	strb	r2, [r3, #19]
			if (Key.Delay_f_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <vKeyScan+0x570>)
 8003134:	7cdb      	ldrb	r3, [r3, #19]
 8003136:	2b32      	cmp	r3, #50	; 0x32
 8003138:	d91c      	bls.n	8003174 <vKeyScan+0x588>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_f_R;
 800313a:	2314      	movs	r3, #20
 800313c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <vKeyScan+0x578>)
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	f107 010f 	add.w	r1, r7, #15
 8003146:	2300      	movs	r3, #0
 8003148:	2200      	movs	r2, #0
 800314a:	f004 fa73 	bl	8007634 <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800314e:	4b03      	ldr	r3, [pc, #12]	; (800315c <vKeyScan+0x570>)
 8003150:	2206      	movs	r2, #6
 8003152:	745a      	strb	r2, [r3, #17]
				Key.Delay_f_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003154:	4b01      	ldr	r3, [pc, #4]	; (800315c <vKeyScan+0x570>)
 8003156:	2225      	movs	r2, #37	; 0x25
 8003158:	74da      	strb	r2, [r3, #19]
 800315a:	e00b      	b.n	8003174 <vKeyScan+0x588>
 800315c:	20003da0 	.word	0x20003da0
 8003160:	2000353c 	.word	0x2000353c
 8003164:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_f_ShortPress_R = 0;
 8003168:	4b90      	ldr	r3, [pc, #576]	; (80033ac <vKeyScan+0x7c0>)
 800316a:	2200      	movs	r2, #0
 800316c:	745a      	strb	r2, [r3, #17]
			Key.Delay_f_LongPress_R = 0;
 800316e:	4b8f      	ldr	r3, [pc, #572]	; (80033ac <vKeyScan+0x7c0>)
 8003170:	2200      	movs	r2, #0
 8003172:	74da      	strb	r2, [r3, #19]
		}

		if (WelderUnit.IndicatorPanel.KeyState[3] == 1 && !(WelderUnit.IndicatorPanel.KeyState[1] == 2)) // ВЛЕВО: [0], "-" - 128, "+" - 64, , STLED №5; ПРОГРАММА: [1], "-" - ..., "+" - 2, , STLED №5;
 8003174:	4b8e      	ldr	r3, [pc, #568]	; (80033b0 <vKeyScan+0x7c4>)
 8003176:	f893 3020 	ldrb.w	r3, [r3, #32]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d133      	bne.n	80031e6 <vKeyScan+0x5fa>
 800317e:	4b8c      	ldr	r3, [pc, #560]	; (80033b0 <vKeyScan+0x7c4>)
 8003180:	7f9b      	ldrb	r3, [r3, #30]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d02f      	beq.n	80031e6 <vKeyScan+0x5fa>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_L > CNT_KEY_SHORT && Key.Program_ShortPress_L != CNT_KEY_SHORT + 2)
 8003186:	4b89      	ldr	r3, [pc, #548]	; (80033ac <vKeyScan+0x7c0>)
 8003188:	7d1b      	ldrb	r3, [r3, #20]
 800318a:	2b04      	cmp	r3, #4
 800318c:	d906      	bls.n	800319c <vKeyScan+0x5b0>
 800318e:	4b87      	ldr	r3, [pc, #540]	; (80033ac <vKeyScan+0x7c0>)
 8003190:	7d1b      	ldrb	r3, [r3, #20]
 8003192:	2b06      	cmp	r3, #6
 8003194:	d002      	beq.n	800319c <vKeyScan+0x5b0>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_Program_L;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_L = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 8003196:	4b85      	ldr	r3, [pc, #532]	; (80033ac <vKeyScan+0x7c0>)
 8003198:	2207      	movs	r2, #7
 800319a:	751a      	strb	r2, [r3, #20]
			}

			if (Key.Program_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 800319c:	4b83      	ldr	r3, [pc, #524]	; (80033ac <vKeyScan+0x7c0>)
 800319e:	7d1b      	ldrb	r3, [r3, #20]
 80031a0:	2b06      	cmp	r3, #6
 80031a2:	d005      	beq.n	80031b0 <vKeyScan+0x5c4>
			{
				Key.Program_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 80031a4:	4b81      	ldr	r3, [pc, #516]	; (80033ac <vKeyScan+0x7c0>)
 80031a6:	7d1b      	ldrb	r3, [r3, #20]
 80031a8:	3301      	adds	r3, #1
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b7f      	ldr	r3, [pc, #508]	; (80033ac <vKeyScan+0x7c0>)
 80031ae:	751a      	strb	r2, [r3, #20]
			}


			Key.Program_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 80031b0:	4b7e      	ldr	r3, [pc, #504]	; (80033ac <vKeyScan+0x7c0>)
 80031b2:	7d9b      	ldrb	r3, [r3, #22]
 80031b4:	3301      	adds	r3, #1
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	4b7c      	ldr	r3, [pc, #496]	; (80033ac <vKeyScan+0x7c0>)
 80031ba:	759a      	strb	r2, [r3, #22]
			if (Key.Program_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80031bc:	4b7b      	ldr	r3, [pc, #492]	; (80033ac <vKeyScan+0x7c0>)
 80031be:	7d9b      	ldrb	r3, [r3, #22]
 80031c0:	2b32      	cmp	r3, #50	; 0x32
 80031c2:	d924      	bls.n	800320e <vKeyScan+0x622>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Program_L;
 80031c4:	2316      	movs	r3, #22
 80031c6:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80031c8:	4b7a      	ldr	r3, [pc, #488]	; (80033b4 <vKeyScan+0x7c8>)
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	f107 010f 	add.w	r1, r7, #15
 80031d0:	2300      	movs	r3, #0
 80031d2:	2200      	movs	r2, #0
 80031d4:	f004 fa2e 	bl	8007634 <xQueueGenericSend>

				Key.Program_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80031d8:	4b74      	ldr	r3, [pc, #464]	; (80033ac <vKeyScan+0x7c0>)
 80031da:	2206      	movs	r2, #6
 80031dc:	751a      	strb	r2, [r3, #20]
				Key.Program_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80031de:	4b73      	ldr	r3, [pc, #460]	; (80033ac <vKeyScan+0x7c0>)
 80031e0:	2225      	movs	r2, #37	; 0x25
 80031e2:	759a      	strb	r2, [r3, #22]
			if (Key.Program_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80031e4:	e013      	b.n	800320e <vKeyScan+0x622>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_L >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 80031e6:	4b71      	ldr	r3, [pc, #452]	; (80033ac <vKeyScan+0x7c0>)
 80031e8:	7d1b      	ldrb	r3, [r3, #20]
 80031ea:	2b06      	cmp	r3, #6
 80031ec:	d909      	bls.n	8003202 <vKeyScan+0x616>
			{
				nKeyPressed = press_short_Program_L;
 80031ee:	2315      	movs	r3, #21
 80031f0:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80031f2:	4b70      	ldr	r3, [pc, #448]	; (80033b4 <vKeyScan+0x7c8>)
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	f107 010f 	add.w	r1, r7, #15
 80031fa:	2300      	movs	r3, #0
 80031fc:	2200      	movs	r2, #0
 80031fe:	f004 fa19 	bl	8007634 <xQueueGenericSend>
			}

			Key.Program_ShortPress_L = 0;
 8003202:	4b6a      	ldr	r3, [pc, #424]	; (80033ac <vKeyScan+0x7c0>)
 8003204:	2200      	movs	r2, #0
 8003206:	751a      	strb	r2, [r3, #20]
			Key.Program_LongPress_L = 0;
 8003208:	4b68      	ldr	r3, [pc, #416]	; (80033ac <vKeyScan+0x7c0>)
 800320a:	2200      	movs	r2, #0
 800320c:	759a      	strb	r2, [r3, #22]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 2 && !(WelderUnit.IndicatorPanel.KeyState[3] == 1))
 800320e:	4b68      	ldr	r3, [pc, #416]	; (80033b0 <vKeyScan+0x7c4>)
 8003210:	7f9b      	ldrb	r3, [r3, #30]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d134      	bne.n	8003280 <vKeyScan+0x694>
 8003216:	4b66      	ldr	r3, [pc, #408]	; (80033b0 <vKeyScan+0x7c4>)
 8003218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d02f      	beq.n	8003280 <vKeyScan+0x694>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_R > CNT_KEY_SHORT && Key.Program_ShortPress_R != CNT_KEY_SHORT + 2)
 8003220:	4b62      	ldr	r3, [pc, #392]	; (80033ac <vKeyScan+0x7c0>)
 8003222:	7d5b      	ldrb	r3, [r3, #21]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d906      	bls.n	8003236 <vKeyScan+0x64a>
 8003228:	4b60      	ldr	r3, [pc, #384]	; (80033ac <vKeyScan+0x7c0>)
 800322a:	7d5b      	ldrb	r3, [r3, #21]
 800322c:	2b06      	cmp	r3, #6
 800322e:	d002      	beq.n	8003236 <vKeyScan+0x64a>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_Program_R;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_R = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 8003230:	4b5e      	ldr	r3, [pc, #376]	; (80033ac <vKeyScan+0x7c0>)
 8003232:	2207      	movs	r2, #7
 8003234:	755a      	strb	r2, [r3, #21]
			}

			if (Key.Program_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003236:	4b5d      	ldr	r3, [pc, #372]	; (80033ac <vKeyScan+0x7c0>)
 8003238:	7d5b      	ldrb	r3, [r3, #21]
 800323a:	2b06      	cmp	r3, #6
 800323c:	d005      	beq.n	800324a <vKeyScan+0x65e>
			{
				Key.Program_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 800323e:	4b5b      	ldr	r3, [pc, #364]	; (80033ac <vKeyScan+0x7c0>)
 8003240:	7d5b      	ldrb	r3, [r3, #21]
 8003242:	3301      	adds	r3, #1
 8003244:	b2da      	uxtb	r2, r3
 8003246:	4b59      	ldr	r3, [pc, #356]	; (80033ac <vKeyScan+0x7c0>)
 8003248:	755a      	strb	r2, [r3, #21]
			}


			Key.Program_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 800324a:	4b58      	ldr	r3, [pc, #352]	; (80033ac <vKeyScan+0x7c0>)
 800324c:	7ddb      	ldrb	r3, [r3, #23]
 800324e:	3301      	adds	r3, #1
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b56      	ldr	r3, [pc, #344]	; (80033ac <vKeyScan+0x7c0>)
 8003254:	75da      	strb	r2, [r3, #23]
			if (Key.Program_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003256:	4b55      	ldr	r3, [pc, #340]	; (80033ac <vKeyScan+0x7c0>)
 8003258:	7ddb      	ldrb	r3, [r3, #23]
 800325a:	2b32      	cmp	r3, #50	; 0x32
 800325c:	d924      	bls.n	80032a8 <vKeyScan+0x6bc>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Program_R;
 800325e:	2318      	movs	r3, #24
 8003260:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003262:	4b54      	ldr	r3, [pc, #336]	; (80033b4 <vKeyScan+0x7c8>)
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	f107 010f 	add.w	r1, r7, #15
 800326a:	2300      	movs	r3, #0
 800326c:	2200      	movs	r2, #0
 800326e:	f004 f9e1 	bl	8007634 <xQueueGenericSend>

				Key.Program_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8003272:	4b4e      	ldr	r3, [pc, #312]	; (80033ac <vKeyScan+0x7c0>)
 8003274:	2206      	movs	r2, #6
 8003276:	755a      	strb	r2, [r3, #21]
				Key.Program_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003278:	4b4c      	ldr	r3, [pc, #304]	; (80033ac <vKeyScan+0x7c0>)
 800327a:	2225      	movs	r2, #37	; 0x25
 800327c:	75da      	strb	r2, [r3, #23]
			if (Key.Program_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 800327e:	e013      	b.n	80032a8 <vKeyScan+0x6bc>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_R >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 8003280:	4b4a      	ldr	r3, [pc, #296]	; (80033ac <vKeyScan+0x7c0>)
 8003282:	7d5b      	ldrb	r3, [r3, #21]
 8003284:	2b06      	cmp	r3, #6
 8003286:	d909      	bls.n	800329c <vKeyScan+0x6b0>
			{
				nKeyPressed = press_short_Program_R;
 8003288:	2317      	movs	r3, #23
 800328a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800328c:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <vKeyScan+0x7c8>)
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	f107 010f 	add.w	r1, r7, #15
 8003294:	2300      	movs	r3, #0
 8003296:	2200      	movs	r2, #0
 8003298:	f004 f9cc 	bl	8007634 <xQueueGenericSend>
			}

			Key.Program_ShortPress_R = 0;
 800329c:	4b43      	ldr	r3, [pc, #268]	; (80033ac <vKeyScan+0x7c0>)
 800329e:	2200      	movs	r2, #0
 80032a0:	755a      	strb	r2, [r3, #21]
			Key.Program_LongPress_R = 0;
 80032a2:	4b42      	ldr	r3, [pc, #264]	; (80033ac <vKeyScan+0x7c0>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	75da      	strb	r2, [r3, #23]
		}



		if (WelderUnit.IndicatorPanel.KeyState[1] == 128) //ВВЕРХ, ВНИЗ: [1], "-" - 128, "+" - 64, , STLED №5;
 80032a8:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <vKeyScan+0x7c4>)
 80032aa:	7f9b      	ldrb	r3, [r3, #30]
 80032ac:	2b80      	cmp	r3, #128	; 0x80
 80032ae:	d139      	bne.n	8003324 <vKeyScan+0x738>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Up_ShortPress > CNT_KEY_SHORT && Key.Up_ShortPress != CNT_KEY_SHORT + 2)
 80032b0:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <vKeyScan+0x7c0>)
 80032b2:	7e9b      	ldrb	r3, [r3, #26]
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d910      	bls.n	80032da <vKeyScan+0x6ee>
 80032b8:	4b3c      	ldr	r3, [pc, #240]	; (80033ac <vKeyScan+0x7c0>)
 80032ba:	7e9b      	ldrb	r3, [r3, #26]
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d00c      	beq.n	80032da <vKeyScan+0x6ee>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Up;
 80032c0:	2323      	movs	r3, #35	; 0x23
 80032c2:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80032c4:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <vKeyScan+0x7c8>)
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	f107 010f 	add.w	r1, r7, #15
 80032cc:	2300      	movs	r3, #0
 80032ce:	2200      	movs	r2, #0
 80032d0:	f004 f9b0 	bl	8007634 <xQueueGenericSend>

				Key.Up_ShortPress = 0; // Сброс счетика выдержки
 80032d4:	4b35      	ldr	r3, [pc, #212]	; (80033ac <vKeyScan+0x7c0>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	769a      	strb	r2, [r3, #26]
			}

			if (Key.Up_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80032da:	4b34      	ldr	r3, [pc, #208]	; (80033ac <vKeyScan+0x7c0>)
 80032dc:	7e9b      	ldrb	r3, [r3, #26]
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d005      	beq.n	80032ee <vKeyScan+0x702>
			{
				Key.Up_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 80032e2:	4b32      	ldr	r3, [pc, #200]	; (80033ac <vKeyScan+0x7c0>)
 80032e4:	7e9b      	ldrb	r3, [r3, #26]
 80032e6:	3301      	adds	r3, #1
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4b30      	ldr	r3, [pc, #192]	; (80033ac <vKeyScan+0x7c0>)
 80032ec:	769a      	strb	r2, [r3, #26]
			}


			Key.Up_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 80032ee:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <vKeyScan+0x7c0>)
 80032f0:	7edb      	ldrb	r3, [r3, #27]
 80032f2:	3301      	adds	r3, #1
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <vKeyScan+0x7c0>)
 80032f8:	76da      	strb	r2, [r3, #27]
			if (Key.Up_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80032fa:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <vKeyScan+0x7c0>)
 80032fc:	7edb      	ldrb	r3, [r3, #27]
 80032fe:	2b32      	cmp	r3, #50	; 0x32
 8003300:	d916      	bls.n	8003330 <vKeyScan+0x744>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Up;
 8003302:	2324      	movs	r3, #36	; 0x24
 8003304:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <vKeyScan+0x7c8>)
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	f107 010f 	add.w	r1, r7, #15
 800330e:	2300      	movs	r3, #0
 8003310:	2200      	movs	r2, #0
 8003312:	f004 f98f 	bl	8007634 <xQueueGenericSend>


				Key.Up_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8003316:	4b25      	ldr	r3, [pc, #148]	; (80033ac <vKeyScan+0x7c0>)
 8003318:	2206      	movs	r2, #6
 800331a:	769a      	strb	r2, [r3, #26]
				Key.Up_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 800331c:	4b23      	ldr	r3, [pc, #140]	; (80033ac <vKeyScan+0x7c0>)
 800331e:	2225      	movs	r2, #37	; 0x25
 8003320:	76da      	strb	r2, [r3, #27]
 8003322:	e005      	b.n	8003330 <vKeyScan+0x744>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Up_ShortPress = 0;
 8003324:	4b21      	ldr	r3, [pc, #132]	; (80033ac <vKeyScan+0x7c0>)
 8003326:	2200      	movs	r2, #0
 8003328:	769a      	strb	r2, [r3, #26]
			Key.Up_LongPress = 0;
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <vKeyScan+0x7c0>)
 800332c:	2200      	movs	r2, #0
 800332e:	76da      	strb	r2, [r3, #27]
		}
		if (WelderUnit.IndicatorPanel.KeyState[1] == 64)
 8003330:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <vKeyScan+0x7c4>)
 8003332:	7f9b      	ldrb	r3, [r3, #30]
 8003334:	2b40      	cmp	r3, #64	; 0x40
 8003336:	d13f      	bne.n	80033b8 <vKeyScan+0x7cc>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Down_ShortPress > CNT_KEY_SHORT && Key.Down_ShortPress != CNT_KEY_SHORT + 2)
 8003338:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <vKeyScan+0x7c0>)
 800333a:	7f1b      	ldrb	r3, [r3, #28]
 800333c:	2b04      	cmp	r3, #4
 800333e:	d910      	bls.n	8003362 <vKeyScan+0x776>
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <vKeyScan+0x7c0>)
 8003342:	7f1b      	ldrb	r3, [r3, #28]
 8003344:	2b06      	cmp	r3, #6
 8003346:	d00c      	beq.n	8003362 <vKeyScan+0x776>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Down;
 8003348:	2321      	movs	r3, #33	; 0x21
 800334a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <vKeyScan+0x7c8>)
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	f107 010f 	add.w	r1, r7, #15
 8003354:	2300      	movs	r3, #0
 8003356:	2200      	movs	r2, #0
 8003358:	f004 f96c 	bl	8007634 <xQueueGenericSend>

				Key.Down_ShortPress = 0; // Сброс счетика выдержки
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <vKeyScan+0x7c0>)
 800335e:	2200      	movs	r2, #0
 8003360:	771a      	strb	r2, [r3, #28]
			}

			if (Key.Down_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <vKeyScan+0x7c0>)
 8003364:	7f1b      	ldrb	r3, [r3, #28]
 8003366:	2b06      	cmp	r3, #6
 8003368:	d005      	beq.n	8003376 <vKeyScan+0x78a>
			{
				Key.Down_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <vKeyScan+0x7c0>)
 800336c:	7f1b      	ldrb	r3, [r3, #28]
 800336e:	3301      	adds	r3, #1
 8003370:	b2da      	uxtb	r2, r3
 8003372:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <vKeyScan+0x7c0>)
 8003374:	771a      	strb	r2, [r3, #28]
			}


			Key.Down_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <vKeyScan+0x7c0>)
 8003378:	7f5b      	ldrb	r3, [r3, #29]
 800337a:	3301      	adds	r3, #1
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <vKeyScan+0x7c0>)
 8003380:	775a      	strb	r2, [r3, #29]
			if (Key.Down_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <vKeyScan+0x7c0>)
 8003384:	7f5b      	ldrb	r3, [r3, #29]
 8003386:	2b32      	cmp	r3, #50	; 0x32
 8003388:	d91c      	bls.n	80033c4 <vKeyScan+0x7d8>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Down;
 800338a:	2322      	movs	r3, #34	; 0x22
 800338c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <vKeyScan+0x7c8>)
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	f107 010f 	add.w	r1, r7, #15
 8003396:	2300      	movs	r3, #0
 8003398:	2200      	movs	r2, #0
 800339a:	f004 f94b 	bl	8007634 <xQueueGenericSend>


				Key.Down_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800339e:	4b03      	ldr	r3, [pc, #12]	; (80033ac <vKeyScan+0x7c0>)
 80033a0:	2206      	movs	r2, #6
 80033a2:	771a      	strb	r2, [r3, #28]
				Key.Down_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80033a4:	4b01      	ldr	r3, [pc, #4]	; (80033ac <vKeyScan+0x7c0>)
 80033a6:	2225      	movs	r2, #37	; 0x25
 80033a8:	775a      	strb	r2, [r3, #29]
 80033aa:	e00b      	b.n	80033c4 <vKeyScan+0x7d8>
 80033ac:	20003da0 	.word	0x20003da0
 80033b0:	2000353c 	.word	0x2000353c
 80033b4:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Down_ShortPress = 0;
 80033b8:	4b94      	ldr	r3, [pc, #592]	; (800360c <vKeyScan+0xa20>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	771a      	strb	r2, [r3, #28]
			Key.Down_LongPress = 0;
 80033be:	4b93      	ldr	r3, [pc, #588]	; (800360c <vKeyScan+0xa20>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	775a      	strb	r2, [r3, #29]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 32) // ПАРКОВКА, АВТО: [1], "-" - 32, "+" - 16, , STLED №5;
 80033c4:	4b92      	ldr	r3, [pc, #584]	; (8003610 <vKeyScan+0xa24>)
 80033c6:	7f9b      	ldrb	r3, [r3, #30]
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d139      	bne.n	8003440 <vKeyScan+0x854>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Parking_ShortPress > CNT_KEY_SHORT && Key.Parking_ShortPress != CNT_KEY_SHORT + 2)
 80033cc:	4b8f      	ldr	r3, [pc, #572]	; (800360c <vKeyScan+0xa20>)
 80033ce:	7f9b      	ldrb	r3, [r3, #30]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d910      	bls.n	80033f6 <vKeyScan+0x80a>
 80033d4:	4b8d      	ldr	r3, [pc, #564]	; (800360c <vKeyScan+0xa20>)
 80033d6:	7f9b      	ldrb	r3, [r3, #30]
 80033d8:	2b06      	cmp	r3, #6
 80033da:	d00c      	beq.n	80033f6 <vKeyScan+0x80a>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Parking;
 80033dc:	2319      	movs	r3, #25
 80033de:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80033e0:	4b8c      	ldr	r3, [pc, #560]	; (8003614 <vKeyScan+0xa28>)
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	f107 010f 	add.w	r1, r7, #15
 80033e8:	2300      	movs	r3, #0
 80033ea:	2200      	movs	r2, #0
 80033ec:	f004 f922 	bl	8007634 <xQueueGenericSend>


				Key.Parking_ShortPress = 0; // Сброс счетика выдержки
 80033f0:	4b86      	ldr	r3, [pc, #536]	; (800360c <vKeyScan+0xa20>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	779a      	strb	r2, [r3, #30]
			}

			if (Key.Parking_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80033f6:	4b85      	ldr	r3, [pc, #532]	; (800360c <vKeyScan+0xa20>)
 80033f8:	7f9b      	ldrb	r3, [r3, #30]
 80033fa:	2b06      	cmp	r3, #6
 80033fc:	d005      	beq.n	800340a <vKeyScan+0x81e>
			{
				Key.Parking_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 80033fe:	4b83      	ldr	r3, [pc, #524]	; (800360c <vKeyScan+0xa20>)
 8003400:	7f9b      	ldrb	r3, [r3, #30]
 8003402:	3301      	adds	r3, #1
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4b81      	ldr	r3, [pc, #516]	; (800360c <vKeyScan+0xa20>)
 8003408:	779a      	strb	r2, [r3, #30]
			}


			Key.Parking_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 800340a:	4b80      	ldr	r3, [pc, #512]	; (800360c <vKeyScan+0xa20>)
 800340c:	7fdb      	ldrb	r3, [r3, #31]
 800340e:	3301      	adds	r3, #1
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4b7e      	ldr	r3, [pc, #504]	; (800360c <vKeyScan+0xa20>)
 8003414:	77da      	strb	r2, [r3, #31]
			if (Key.Parking_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003416:	4b7d      	ldr	r3, [pc, #500]	; (800360c <vKeyScan+0xa20>)
 8003418:	7fdb      	ldrb	r3, [r3, #31]
 800341a:	2b32      	cmp	r3, #50	; 0x32
 800341c:	d916      	bls.n	800344c <vKeyScan+0x860>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Parking;
 800341e:	231a      	movs	r3, #26
 8003420:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003422:	4b7c      	ldr	r3, [pc, #496]	; (8003614 <vKeyScan+0xa28>)
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	f107 010f 	add.w	r1, r7, #15
 800342a:	2300      	movs	r3, #0
 800342c:	2200      	movs	r2, #0
 800342e:	f004 f901 	bl	8007634 <xQueueGenericSend>

				Key.Parking_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8003432:	4b76      	ldr	r3, [pc, #472]	; (800360c <vKeyScan+0xa20>)
 8003434:	2206      	movs	r2, #6
 8003436:	779a      	strb	r2, [r3, #30]
				Key.Parking_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003438:	4b74      	ldr	r3, [pc, #464]	; (800360c <vKeyScan+0xa20>)
 800343a:	2225      	movs	r2, #37	; 0x25
 800343c:	77da      	strb	r2, [r3, #31]
 800343e:	e005      	b.n	800344c <vKeyScan+0x860>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Parking_ShortPress = 0;
 8003440:	4b72      	ldr	r3, [pc, #456]	; (800360c <vKeyScan+0xa20>)
 8003442:	2200      	movs	r2, #0
 8003444:	779a      	strb	r2, [r3, #30]
			Key.Parking_LongPress = 0;
 8003446:	4b71      	ldr	r3, [pc, #452]	; (800360c <vKeyScan+0xa20>)
 8003448:	2200      	movs	r2, #0
 800344a:	77da      	strb	r2, [r3, #31]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 16)
 800344c:	4b70      	ldr	r3, [pc, #448]	; (8003610 <vKeyScan+0xa24>)
 800344e:	7f9b      	ldrb	r3, [r3, #30]
 8003450:	2b10      	cmp	r3, #16
 8003452:	d144      	bne.n	80034de <vKeyScan+0x8f2>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Auto_ShortPress > CNT_KEY_SHORT && Key.Auto_ShortPress != CNT_KEY_SHORT + 2)
 8003454:	4b6d      	ldr	r3, [pc, #436]	; (800360c <vKeyScan+0xa20>)
 8003456:	f893 3020 	ldrb.w	r3, [r3, #32]
 800345a:	2b04      	cmp	r3, #4
 800345c:	d912      	bls.n	8003484 <vKeyScan+0x898>
 800345e:	4b6b      	ldr	r3, [pc, #428]	; (800360c <vKeyScan+0xa20>)
 8003460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003464:	2b06      	cmp	r3, #6
 8003466:	d00d      	beq.n	8003484 <vKeyScan+0x898>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Auto;
 8003468:	231b      	movs	r3, #27
 800346a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800346c:	4b69      	ldr	r3, [pc, #420]	; (8003614 <vKeyScan+0xa28>)
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	f107 010f 	add.w	r1, r7, #15
 8003474:	2300      	movs	r3, #0
 8003476:	2200      	movs	r2, #0
 8003478:	f004 f8dc 	bl	8007634 <xQueueGenericSend>

				Key.Auto_ShortPress = 0; // Сброс счетика выдержки
 800347c:	4b63      	ldr	r3, [pc, #396]	; (800360c <vKeyScan+0xa20>)
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2020 	strb.w	r2, [r3, #32]
			}

			if (Key.Auto_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003484:	4b61      	ldr	r3, [pc, #388]	; (800360c <vKeyScan+0xa20>)
 8003486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d007      	beq.n	800349e <vKeyScan+0x8b2>
			{
				Key.Auto_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 800348e:	4b5f      	ldr	r3, [pc, #380]	; (800360c <vKeyScan+0xa20>)
 8003490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003494:	3301      	adds	r3, #1
 8003496:	b2da      	uxtb	r2, r3
 8003498:	4b5c      	ldr	r3, [pc, #368]	; (800360c <vKeyScan+0xa20>)
 800349a:	f883 2020 	strb.w	r2, [r3, #32]
			}


			Key.Auto_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 800349e:	4b5b      	ldr	r3, [pc, #364]	; (800360c <vKeyScan+0xa20>)
 80034a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034a4:	3301      	adds	r3, #1
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	4b58      	ldr	r3, [pc, #352]	; (800360c <vKeyScan+0xa20>)
 80034aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			if (Key.Auto_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80034ae:	4b57      	ldr	r3, [pc, #348]	; (800360c <vKeyScan+0xa20>)
 80034b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034b4:	2b32      	cmp	r3, #50	; 0x32
 80034b6:	d91a      	bls.n	80034ee <vKeyScan+0x902>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Auto;
 80034b8:	231c      	movs	r3, #28
 80034ba:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80034bc:	4b55      	ldr	r3, [pc, #340]	; (8003614 <vKeyScan+0xa28>)
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	f107 010f 	add.w	r1, r7, #15
 80034c4:	2300      	movs	r3, #0
 80034c6:	2200      	movs	r2, #0
 80034c8:	f004 f8b4 	bl	8007634 <xQueueGenericSend>

				Key.Auto_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80034cc:	4b4f      	ldr	r3, [pc, #316]	; (800360c <vKeyScan+0xa20>)
 80034ce:	2206      	movs	r2, #6
 80034d0:	f883 2020 	strb.w	r2, [r3, #32]
				Key.Auto_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80034d4:	4b4d      	ldr	r3, [pc, #308]	; (800360c <vKeyScan+0xa20>)
 80034d6:	2225      	movs	r2, #37	; 0x25
 80034d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80034dc:	e007      	b.n	80034ee <vKeyScan+0x902>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Auto_ShortPress = 0;
 80034de:	4b4b      	ldr	r3, [pc, #300]	; (800360c <vKeyScan+0xa20>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2020 	strb.w	r2, [r3, #32]
			Key.Auto_LongPress = 0;
 80034e6:	4b49      	ldr	r3, [pc, #292]	; (800360c <vKeyScan+0xa20>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 8)
 80034ee:	4b48      	ldr	r3, [pc, #288]	; (8003610 <vKeyScan+0xa24>)
 80034f0:	7f9b      	ldrb	r3, [r3, #30]
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d144      	bne.n	8003580 <vKeyScan+0x994>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.StartStop_ShortPress > CNT_KEY_SHORT && Key.StartStop_ShortPress != CNT_KEY_SHORT + 2)
 80034f6:	4b45      	ldr	r3, [pc, #276]	; (800360c <vKeyScan+0xa20>)
 80034f8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d912      	bls.n	8003526 <vKeyScan+0x93a>
 8003500:	4b42      	ldr	r3, [pc, #264]	; (800360c <vKeyScan+0xa20>)
 8003502:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003506:	2b06      	cmp	r3, #6
 8003508:	d00d      	beq.n	8003526 <vKeyScan+0x93a>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_StartStop;
 800350a:	231d      	movs	r3, #29
 800350c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800350e:	4b41      	ldr	r3, [pc, #260]	; (8003614 <vKeyScan+0xa28>)
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	f107 010f 	add.w	r1, r7, #15
 8003516:	2300      	movs	r3, #0
 8003518:	2200      	movs	r2, #0
 800351a:	f004 f88b 	bl	8007634 <xQueueGenericSend>

				Key.StartStop_ShortPress = 0; // Сброс счетика выдержки
 800351e:	4b3b      	ldr	r3, [pc, #236]	; (800360c <vKeyScan+0xa20>)
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}

			if (Key.StartStop_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003526:	4b39      	ldr	r3, [pc, #228]	; (800360c <vKeyScan+0xa20>)
 8003528:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800352c:	2b06      	cmp	r3, #6
 800352e:	d007      	beq.n	8003540 <vKeyScan+0x954>
			{
				Key.StartStop_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8003530:	4b36      	ldr	r3, [pc, #216]	; (800360c <vKeyScan+0xa20>)
 8003532:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003536:	3301      	adds	r3, #1
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4b34      	ldr	r3, [pc, #208]	; (800360c <vKeyScan+0xa20>)
 800353c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}


			Key.StartStop_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8003540:	4b32      	ldr	r3, [pc, #200]	; (800360c <vKeyScan+0xa20>)
 8003542:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003546:	3301      	adds	r3, #1
 8003548:	b2da      	uxtb	r2, r3
 800354a:	4b30      	ldr	r3, [pc, #192]	; (800360c <vKeyScan+0xa20>)
 800354c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			if (Key.StartStop_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003550:	4b2e      	ldr	r3, [pc, #184]	; (800360c <vKeyScan+0xa20>)
 8003552:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003556:	2b32      	cmp	r3, #50	; 0x32
 8003558:	d91a      	bls.n	8003590 <vKeyScan+0x9a4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_StartStop;
 800355a:	231e      	movs	r3, #30
 800355c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800355e:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <vKeyScan+0xa28>)
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	f107 010f 	add.w	r1, r7, #15
 8003566:	2300      	movs	r3, #0
 8003568:	2200      	movs	r2, #0
 800356a:	f004 f863 	bl	8007634 <xQueueGenericSend>

				Key.StartStop_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800356e:	4b27      	ldr	r3, [pc, #156]	; (800360c <vKeyScan+0xa20>)
 8003570:	2206      	movs	r2, #6
 8003572:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				Key.StartStop_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003576:	4b25      	ldr	r3, [pc, #148]	; (800360c <vKeyScan+0xa20>)
 8003578:	2225      	movs	r2, #37	; 0x25
 800357a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 800357e:	e007      	b.n	8003590 <vKeyScan+0x9a4>
			}

		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.StartStop_ShortPress = 0;
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <vKeyScan+0xa20>)
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			Key.StartStop_LongPress = 0;
 8003588:	4b20      	ldr	r3, [pc, #128]	; (800360c <vKeyScan+0xa20>)
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}

		// *********************************************************Комбинации клавишь*********************************************************

		if (WelderUnit.IndicatorPanel.KeyState[3] == 1 && WelderUnit.IndicatorPanel.KeyState[1] == 2) // "ПРОГРАММА" "-" одновременно с "+"
 8003590:	4b1f      	ldr	r3, [pc, #124]	; (8003610 <vKeyScan+0xa24>)
 8003592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d11f      	bne.n	80035da <vKeyScan+0x9ee>
 800359a:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <vKeyScan+0xa24>)
 800359c:	7f9b      	ldrb	r3, [r3, #30]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d11b      	bne.n	80035da <vKeyScan+0x9ee>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_L_and_R > CNT_KEY_SHORT && Key.Program_ShortPress_L_and_R != CNT_KEY_SHORT + 2)
 80035a2:	4b1a      	ldr	r3, [pc, #104]	; (800360c <vKeyScan+0xa20>)
 80035a4:	7e1b      	ldrb	r3, [r3, #24]
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d906      	bls.n	80035b8 <vKeyScan+0x9cc>
 80035aa:	4b18      	ldr	r3, [pc, #96]	; (800360c <vKeyScan+0xa20>)
 80035ac:	7e1b      	ldrb	r3, [r3, #24]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d002      	beq.n	80035b8 <vKeyScan+0x9cc>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_StartStop;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_L_and_R = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 80035b2:	4b16      	ldr	r3, [pc, #88]	; (800360c <vKeyScan+0xa20>)
 80035b4:	2207      	movs	r2, #7
 80035b6:	761a      	strb	r2, [r3, #24]
			}

			if (Key.Program_ShortPress_L_and_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80035b8:	4b14      	ldr	r3, [pc, #80]	; (800360c <vKeyScan+0xa20>)
 80035ba:	7e1b      	ldrb	r3, [r3, #24]
 80035bc:	2b06      	cmp	r3, #6
 80035be:	d005      	beq.n	80035cc <vKeyScan+0x9e0>
			{
				Key.Program_ShortPress_L_and_R++; // Счетчик для определения короткого нажатия на кнопку
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <vKeyScan+0xa20>)
 80035c2:	7e1b      	ldrb	r3, [r3, #24]
 80035c4:	3301      	adds	r3, #1
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	4b10      	ldr	r3, [pc, #64]	; (800360c <vKeyScan+0xa20>)
 80035ca:	761a      	strb	r2, [r3, #24]
			}


			Key.Program_LongPress_L_and_R++; // Счетчик для определения длинного нажатия на кнопку
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <vKeyScan+0xa20>)
 80035ce:	7e5b      	ldrb	r3, [r3, #25]
 80035d0:	3301      	adds	r3, #1
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	4b0d      	ldr	r3, [pc, #52]	; (800360c <vKeyScan+0xa20>)
 80035d6:	765a      	strb	r2, [r3, #25]
			if (Key.Program_LongPress_L_and_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80035d8:	e013      	b.n	8003602 <vKeyScan+0xa16>
			}

		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_L_and_R >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 80035da:	4b0c      	ldr	r3, [pc, #48]	; (800360c <vKeyScan+0xa20>)
 80035dc:	7e1b      	ldrb	r3, [r3, #24]
 80035de:	2b06      	cmp	r3, #6
 80035e0:	d909      	bls.n	80035f6 <vKeyScan+0xa0a>
			{
				nKeyPressed = press_short_Program_L_and_R;
 80035e2:	231f      	movs	r3, #31
 80035e4:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <vKeyScan+0xa28>)
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	f107 010f 	add.w	r1, r7, #15
 80035ee:	2300      	movs	r3, #0
 80035f0:	2200      	movs	r2, #0
 80035f2:	f004 f81f 	bl	8007634 <xQueueGenericSend>
//
//				Key.Program_ShortPress_R = 0;
//				Key.Program_LongPress_R = 0;
			}

			Key.Program_ShortPress_L_and_R = 0;
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <vKeyScan+0xa20>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	761a      	strb	r2, [r3, #24]
			Key.Program_LongPress_L_and_R = 0;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <vKeyScan+0xa20>)
 80035fe:	2200      	movs	r2, #0
 8003600:	765a      	strb	r2, [r3, #25]

		}



		vTaskDelay(TIME_KEY_SCAN / portTICK_RATE_MS);
 8003602:	2014      	movs	r0, #20
 8003604:	f004 fe5c 	bl	80082c0 <vTaskDelay>
		PCB_KeyScan();
 8003608:	f7ff baf7 	b.w	8002bfa <vKeyScan+0xe>
 800360c:	20003da0 	.word	0x20003da0
 8003610:	2000353c 	.word	0x2000353c
 8003614:	20003d90 	.word	0x20003d90

08003618 <vIndicatorPanel_Out>:
	}
	vTaskDelete(NULL);
}

void vIndicatorPanel_Out(void *pvParameters)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	WelderUnit.Xs = 30;
 8003620:	4b2c      	ldr	r3, [pc, #176]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 8003622:	221e      	movs	r2, #30
 8003624:	801a      	strh	r2, [r3, #0]
	WelderUnit.Xf = 90;
 8003626:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 8003628:	225a      	movs	r2, #90	; 0x5a
 800362a:	805a      	strh	r2, [r3, #2]
	WelderUnit.Steps = 0;
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 800362e:	2200      	movs	r2, #0
 8003630:	81da      	strh	r2, [r3, #14]
	WelderUnit.Delay_s = 10;
 8003632:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 8003634:	220a      	movs	r2, #10
 8003636:	729a      	strb	r2, [r3, #10]
	WelderUnit.Speed = 120;
 8003638:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 800363a:	2278      	movs	r2, #120	; 0x78
 800363c:	80da      	strh	r2, [r3, #6]
	WelderUnit.Delay_f = 20;
 800363e:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 8003640:	2214      	movs	r2, #20
 8003642:	72da      	strb	r2, [r3, #11]
	WelderUnit.Program = 4;
 8003644:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 8003646:	2204      	movs	r2, #4
 8003648:	819a      	strh	r2, [r3, #12]

	WelderUnit.GoTo = WelderUnit.Xf;
 800364a:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 800364c:	885a      	ldrh	r2, [r3, #2]
 800364e:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 8003650:	811a      	strh	r2, [r3, #8]
	WelderUnit.Position = 0;
 8003652:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 8003654:	2200      	movs	r2, #0
 8003656:	809a      	strh	r2, [r3, #4]
	WelderUnit.State = 0;
 8003658:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 800365a:	2200      	movs	r2, #0
 800365c:	741a      	strb	r2, [r3, #16]

	WelderUnit.IndicatorPanel.Brightness = 2;
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 8003660:	2202      	movs	r2, #2
 8003662:	771a      	strb	r2, [r3, #28]

//	WelderUnit.IndicatorPanel.LEDsState |= LED_AUTO;
//
//	WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING;

	IndicatorPanel_Ini();
 8003664:	f7fd fa2a 	bl	8000abc <IndicatorPanel_Ini>

	IndicatorPanel_SetBrightness(&WelderUnit.IndicatorPanel);
 8003668:	481b      	ldr	r0, [pc, #108]	; (80036d8 <vIndicatorPanel_Out+0xc0>)
 800366a:	f7fd fb11 	bl	8000c90 <IndicatorPanel_SetBrightness>

	vTaskDelay(100 / portTICK_RATE_MS);
 800366e:	2064      	movs	r0, #100	; 0x64
 8003670:	f004 fe26 	bl	80082c0 <vTaskDelay>

		//PCB_LEDs_OUT(PCB_LEDs_OUT(LEDs_val))



		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 8003674:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 8003676:	7c1b      	ldrb	r3, [r3, #16]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <vIndicatorPanel_Out+0x70>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Position;
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 8003682:	889a      	ldrh	r2, [r3, #4]
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 8003686:	825a      	strh	r2, [r3, #18]
		}

		if (!(WelderUnit.State & 0x01)) // Если каретка не в движении то отображать точку начала варки
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 800368a:	7c1b      	ldrb	r3, [r3, #16]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <vIndicatorPanel_Out+0x84>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Xs;
 8003694:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 800369a:	825a      	strh	r2, [r3, #18]
		}

		WelderUnit.IndicatorPanel.Xf = WelderUnit.Xf;
 800369c:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 800369e:	885a      	ldrh	r2, [r3, #2]
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 80036a2:	829a      	strh	r2, [r3, #20]
		WelderUnit.IndicatorPanel.Delay_s = WelderUnit.Delay_s;
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 80036a6:	7a9a      	ldrb	r2, [r3, #10]
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 80036aa:	759a      	strb	r2, [r3, #22]
		WelderUnit.IndicatorPanel.Speed = WelderUnit.Speed;
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 80036ae:	88da      	ldrh	r2, [r3, #6]
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 80036b2:	831a      	strh	r2, [r3, #24]
		WelderUnit.IndicatorPanel.Delay_f = WelderUnit.Delay_f;
 80036b4:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 80036b6:	7ada      	ldrb	r2, [r3, #11]
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 80036ba:	75da      	strb	r2, [r3, #23]
		WelderUnit.IndicatorPanel.Program = WelderUnit.Program;
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 80036be:	899a      	ldrh	r2, [r3, #12]
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <vIndicatorPanel_Out+0xbc>)
 80036c2:	835a      	strh	r2, [r3, #26]


		IndicatorPanel_SetValue(&WelderUnit.IndicatorPanel);
 80036c4:	4804      	ldr	r0, [pc, #16]	; (80036d8 <vIndicatorPanel_Out+0xc0>)
 80036c6:	f7fd fa13 	bl	8000af0 <IndicatorPanel_SetValue>

		vTaskDelay(100 / portTICK_RATE_MS);
 80036ca:	2064      	movs	r0, #100	; 0x64
 80036cc:	f004 fdf8 	bl	80082c0 <vTaskDelay>
		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 80036d0:	e7d0      	b.n	8003674 <vIndicatorPanel_Out+0x5c>
 80036d2:	bf00      	nop
 80036d4:	2000353c 	.word	0x2000353c
 80036d8:	2000354e 	.word	0x2000354e

080036dc <vBuzzer_beep>:
	vTaskDelete(NULL);
}


void vBuzzer_beep(void *pvParameters)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	uint8_t lReceivedValue;
	portBASE_TYPE xStatus;

	for(;;)
	{
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 80036e4:	4b73      	ldr	r3, [pc, #460]	; (80038b4 <vBuzzer_beep+0x1d8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f107 010f 	add.w	r1, r7, #15
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295
 80036f0:	4618      	mov	r0, r3
 80036f2:	f004 f8f7 	bl	80078e4 <xQueueReceive>
 80036f6:	6138      	str	r0, [r7, #16]

		if( xStatus == pdPASS ) // Если данные были успешно приняты из очереди
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	f040 80d5 	bne.w	80038aa <vBuzzer_beep+0x1ce>
		{

		switch(lReceivedValue)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	2b05      	cmp	r3, #5
 8003704:	f200 80d2 	bhi.w	80038ac <vBuzzer_beep+0x1d0>
 8003708:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <vBuzzer_beep+0x34>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	08003729 	.word	0x08003729
 8003714:	08003735 	.word	0x08003735
 8003718:	08003757 	.word	0x08003757
 800371c:	0800378b 	.word	0x0800378b
 8003720:	080037cd 	.word	0x080037cd
 8003724:	08003877 	.word	0x08003877
		{
		case beep_off:
		{
			BUZZER_OFF
 8003728:	2200      	movs	r2, #0
 800372a:	2110      	movs	r1, #16
 800372c:	4862      	ldr	r0, [pc, #392]	; (80038b8 <vBuzzer_beep+0x1dc>)
 800372e:	f001 fa70 	bl	8004c12 <HAL_GPIO_WritePin>
			break;
 8003732:	e0bb      	b.n	80038ac <vBuzzer_beep+0x1d0>
		}

		case beep_click:
		{
			BUZZER_ON
 8003734:	2201      	movs	r2, #1
 8003736:	2110      	movs	r1, #16
 8003738:	485f      	ldr	r0, [pc, #380]	; (80038b8 <vBuzzer_beep+0x1dc>)
 800373a:	f001 fa6a 	bl	8004c12 <HAL_GPIO_WritePin>
			vTaskDelay(10 / portTICK_RATE_MS);
 800373e:	200a      	movs	r0, #10
 8003740:	f004 fdbe 	bl	80082c0 <vTaskDelay>
			BUZZER_OFF
 8003744:	2200      	movs	r2, #0
 8003746:	2110      	movs	r1, #16
 8003748:	485b      	ldr	r0, [pc, #364]	; (80038b8 <vBuzzer_beep+0x1dc>)
 800374a:	f001 fa62 	bl	8004c12 <HAL_GPIO_WritePin>
			vTaskDelay(50 / portTICK_RATE_MS);
 800374e:	2032      	movs	r0, #50	; 0x32
 8003750:	f004 fdb6 	bl	80082c0 <vTaskDelay>
			break;
 8003754:	e0aa      	b.n	80038ac <vBuzzer_beep+0x1d0>
		}

		case beep_1short:
		{
			for(uint16_t i = 0; i < 10; i++)
 8003756:	2300      	movs	r3, #0
 8003758:	83fb      	strh	r3, [r7, #30]
 800375a:	e012      	b.n	8003782 <vBuzzer_beep+0xa6>
			    {
			    BUZZER_ON
 800375c:	2201      	movs	r2, #1
 800375e:	2110      	movs	r1, #16
 8003760:	4855      	ldr	r0, [pc, #340]	; (80038b8 <vBuzzer_beep+0x1dc>)
 8003762:	f001 fa56 	bl	8004c12 <HAL_GPIO_WritePin>
			    vTaskDelay(1 / portTICK_RATE_MS);
 8003766:	2001      	movs	r0, #1
 8003768:	f004 fdaa 	bl	80082c0 <vTaskDelay>
			    BUZZER_OFF
 800376c:	2200      	movs	r2, #0
 800376e:	2110      	movs	r1, #16
 8003770:	4851      	ldr	r0, [pc, #324]	; (80038b8 <vBuzzer_beep+0x1dc>)
 8003772:	f001 fa4e 	bl	8004c12 <HAL_GPIO_WritePin>
			    vTaskDelay(1 / portTICK_RATE_MS);
 8003776:	2001      	movs	r0, #1
 8003778:	f004 fda2 	bl	80082c0 <vTaskDelay>
			for(uint16_t i = 0; i < 10; i++)
 800377c:	8bfb      	ldrh	r3, [r7, #30]
 800377e:	3301      	adds	r3, #1
 8003780:	83fb      	strh	r3, [r7, #30]
 8003782:	8bfb      	ldrh	r3, [r7, #30]
 8003784:	2b09      	cmp	r3, #9
 8003786:	d9e9      	bls.n	800375c <vBuzzer_beep+0x80>
			    }
			break;
 8003788:	e090      	b.n	80038ac <vBuzzer_beep+0x1d0>
		}

		case beep_2short:
		{
			BUZZER_ON
 800378a:	2201      	movs	r2, #1
 800378c:	2110      	movs	r1, #16
 800378e:	484a      	ldr	r0, [pc, #296]	; (80038b8 <vBuzzer_beep+0x1dc>)
 8003790:	f001 fa3f 	bl	8004c12 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003794:	2064      	movs	r0, #100	; 0x64
 8003796:	f004 fd93 	bl	80082c0 <vTaskDelay>
			BUZZER_OFF
 800379a:	2200      	movs	r2, #0
 800379c:	2110      	movs	r1, #16
 800379e:	4846      	ldr	r0, [pc, #280]	; (80038b8 <vBuzzer_beep+0x1dc>)
 80037a0:	f001 fa37 	bl	8004c12 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80037a4:	2064      	movs	r0, #100	; 0x64
 80037a6:	f004 fd8b 	bl	80082c0 <vTaskDelay>

			BUZZER_ON
 80037aa:	2201      	movs	r2, #1
 80037ac:	2110      	movs	r1, #16
 80037ae:	4842      	ldr	r0, [pc, #264]	; (80038b8 <vBuzzer_beep+0x1dc>)
 80037b0:	f001 fa2f 	bl	8004c12 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80037b4:	2064      	movs	r0, #100	; 0x64
 80037b6:	f004 fd83 	bl	80082c0 <vTaskDelay>
			BUZZER_OFF
 80037ba:	2200      	movs	r2, #0
 80037bc:	2110      	movs	r1, #16
 80037be:	483e      	ldr	r0, [pc, #248]	; (80038b8 <vBuzzer_beep+0x1dc>)
 80037c0:	f001 fa27 	bl	8004c12 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80037c4:	2064      	movs	r0, #100	; 0x64
 80037c6:	f004 fd7b 	bl	80082c0 <vTaskDelay>
			break;
 80037ca:	e06f      	b.n	80038ac <vBuzzer_beep+0x1d0>
		}

		case beep_3short:
		{
			for(uint16_t i = 0; i < 40; i++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	83bb      	strh	r3, [r7, #28]
 80037d0:	e012      	b.n	80037f8 <vBuzzer_beep+0x11c>
			    {
				BUZZER_ON
 80037d2:	2201      	movs	r2, #1
 80037d4:	2110      	movs	r1, #16
 80037d6:	4838      	ldr	r0, [pc, #224]	; (80038b8 <vBuzzer_beep+0x1dc>)
 80037d8:	f001 fa1b 	bl	8004c12 <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 80037dc:	2001      	movs	r0, #1
 80037de:	f004 fd6f 	bl	80082c0 <vTaskDelay>
				BUZZER_OFF
 80037e2:	2200      	movs	r2, #0
 80037e4:	2110      	movs	r1, #16
 80037e6:	4834      	ldr	r0, [pc, #208]	; (80038b8 <vBuzzer_beep+0x1dc>)
 80037e8:	f001 fa13 	bl	8004c12 <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 80037ec:	2001      	movs	r0, #1
 80037ee:	f004 fd67 	bl	80082c0 <vTaskDelay>
			for(uint16_t i = 0; i < 40; i++)
 80037f2:	8bbb      	ldrh	r3, [r7, #28]
 80037f4:	3301      	adds	r3, #1
 80037f6:	83bb      	strh	r3, [r7, #28]
 80037f8:	8bbb      	ldrh	r3, [r7, #28]
 80037fa:	2b27      	cmp	r3, #39	; 0x27
 80037fc:	d9e9      	bls.n	80037d2 <vBuzzer_beep+0xf6>
			    }

			vTaskDelay(40 / portTICK_RATE_MS);
 80037fe:	2028      	movs	r0, #40	; 0x28
 8003800:	f004 fd5e 	bl	80082c0 <vTaskDelay>

			for(uint16_t i = 0; i < 40; i++)
 8003804:	2300      	movs	r3, #0
 8003806:	837b      	strh	r3, [r7, #26]
 8003808:	e012      	b.n	8003830 <vBuzzer_beep+0x154>
			    {
				BUZZER_ON
 800380a:	2201      	movs	r2, #1
 800380c:	2110      	movs	r1, #16
 800380e:	482a      	ldr	r0, [pc, #168]	; (80038b8 <vBuzzer_beep+0x1dc>)
 8003810:	f001 f9ff 	bl	8004c12 <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003814:	2001      	movs	r0, #1
 8003816:	f004 fd53 	bl	80082c0 <vTaskDelay>
				BUZZER_OFF
 800381a:	2200      	movs	r2, #0
 800381c:	2110      	movs	r1, #16
 800381e:	4826      	ldr	r0, [pc, #152]	; (80038b8 <vBuzzer_beep+0x1dc>)
 8003820:	f001 f9f7 	bl	8004c12 <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003824:	2001      	movs	r0, #1
 8003826:	f004 fd4b 	bl	80082c0 <vTaskDelay>
			for(uint16_t i = 0; i < 40; i++)
 800382a:	8b7b      	ldrh	r3, [r7, #26]
 800382c:	3301      	adds	r3, #1
 800382e:	837b      	strh	r3, [r7, #26]
 8003830:	8b7b      	ldrh	r3, [r7, #26]
 8003832:	2b27      	cmp	r3, #39	; 0x27
 8003834:	d9e9      	bls.n	800380a <vBuzzer_beep+0x12e>
			    }

			vTaskDelay(40 / portTICK_RATE_MS);
 8003836:	2028      	movs	r0, #40	; 0x28
 8003838:	f004 fd42 	bl	80082c0 <vTaskDelay>

			for(uint16_t i = 0; i < 50; i++)
 800383c:	2300      	movs	r3, #0
 800383e:	833b      	strh	r3, [r7, #24]
 8003840:	e012      	b.n	8003868 <vBuzzer_beep+0x18c>
			    {
				BUZZER_ON
 8003842:	2201      	movs	r2, #1
 8003844:	2110      	movs	r1, #16
 8003846:	481c      	ldr	r0, [pc, #112]	; (80038b8 <vBuzzer_beep+0x1dc>)
 8003848:	f001 f9e3 	bl	8004c12 <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 800384c:	2001      	movs	r0, #1
 800384e:	f004 fd37 	bl	80082c0 <vTaskDelay>
				BUZZER_OFF
 8003852:	2200      	movs	r2, #0
 8003854:	2110      	movs	r1, #16
 8003856:	4818      	ldr	r0, [pc, #96]	; (80038b8 <vBuzzer_beep+0x1dc>)
 8003858:	f001 f9db 	bl	8004c12 <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 800385c:	2001      	movs	r0, #1
 800385e:	f004 fd2f 	bl	80082c0 <vTaskDelay>
			for(uint16_t i = 0; i < 50; i++)
 8003862:	8b3b      	ldrh	r3, [r7, #24]
 8003864:	3301      	adds	r3, #1
 8003866:	833b      	strh	r3, [r7, #24]
 8003868:	8b3b      	ldrh	r3, [r7, #24]
 800386a:	2b31      	cmp	r3, #49	; 0x31
 800386c:	d9e9      	bls.n	8003842 <vBuzzer_beep+0x166>
			    }

			vTaskDelay(40 / portTICK_RATE_MS);
 800386e:	2028      	movs	r0, #40	; 0x28
 8003870:	f004 fd26 	bl	80082c0 <vTaskDelay>

			break;
 8003874:	e01a      	b.n	80038ac <vBuzzer_beep+0x1d0>
		}

		case beep_long:
		{
			for(uint16_t i = 0; i < 200; i++)
 8003876:	2300      	movs	r3, #0
 8003878:	82fb      	strh	r3, [r7, #22]
 800387a:	e012      	b.n	80038a2 <vBuzzer_beep+0x1c6>
			    {
				BUZZER_ON
 800387c:	2201      	movs	r2, #1
 800387e:	2110      	movs	r1, #16
 8003880:	480d      	ldr	r0, [pc, #52]	; (80038b8 <vBuzzer_beep+0x1dc>)
 8003882:	f001 f9c6 	bl	8004c12 <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003886:	2001      	movs	r0, #1
 8003888:	f004 fd1a 	bl	80082c0 <vTaskDelay>
				BUZZER_OFF
 800388c:	2200      	movs	r2, #0
 800388e:	2110      	movs	r1, #16
 8003890:	4809      	ldr	r0, [pc, #36]	; (80038b8 <vBuzzer_beep+0x1dc>)
 8003892:	f001 f9be 	bl	8004c12 <HAL_GPIO_WritePin>
				vTaskDelay(1 / portTICK_RATE_MS);
 8003896:	2001      	movs	r0, #1
 8003898:	f004 fd12 	bl	80082c0 <vTaskDelay>
			for(uint16_t i = 0; i < 200; i++)
 800389c:	8afb      	ldrh	r3, [r7, #22]
 800389e:	3301      	adds	r3, #1
 80038a0:	82fb      	strh	r3, [r7, #22]
 80038a2:	8afb      	ldrh	r3, [r7, #22]
 80038a4:	2bc7      	cmp	r3, #199	; 0xc7
 80038a6:	d9e9      	bls.n	800387c <vBuzzer_beep+0x1a0>
			    }
			break;
 80038a8:	e000      	b.n	80038ac <vBuzzer_beep+0x1d0>
		}

		}

		}
 80038aa:	bf00      	nop

		vTaskMissedYield(); // Переключение контекста.
 80038ac:	f005 f810 	bl	80088d0 <vTaskMissedYield>
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 80038b0:	e718      	b.n	80036e4 <vBuzzer_beep+0x8>
 80038b2:	bf00      	nop
 80038b4:	20003538 	.word	0x20003538
 80038b8:	40010800 	.word	0x40010800

080038bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038c0:	f000 fb84 	bl	8003fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038c4:	f000 f81a 	bl	80038fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038c8:	f000 f90c 	bl	8003ae4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80038cc:	f000 f85c 	bl	8003988 <MX_SPI1_Init>
  MX_TIM3_Init();
 80038d0:	f000 f892 	bl	80039f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80038d4:	f003 fc0e 	bl	80070f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80038d8:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <main+0x34>)
 80038da:	2100      	movs	r1, #0
 80038dc:	4805      	ldr	r0, [pc, #20]	; (80038f4 <main+0x38>)
 80038de:	f003 fc3b 	bl	8007158 <osThreadNew>
 80038e2:	4603      	mov	r3, r0
 80038e4:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <main+0x3c>)
 80038e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  freeRTOS_Tasks_Ini();
 80038e8:	f7fd ffc2 	bl	8001870 <freeRTOS_Tasks_Ini>
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80038ec:	e7fe      	b.n	80038ec <main+0x30>
 80038ee:	bf00      	nop
 80038f0:	080099c0 	.word	0x080099c0
 80038f4:	08003ce1 	.word	0x08003ce1
 80038f8:	20003dd0 	.word	0x20003dd0

080038fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b090      	sub	sp, #64	; 0x40
 8003900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003902:	f107 0318 	add.w	r3, r7, #24
 8003906:	2228      	movs	r2, #40	; 0x28
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f005 ffea 	bl	80098e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003910:	1d3b      	adds	r3, r7, #4
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	605a      	str	r2, [r3, #4]
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	60da      	str	r2, [r3, #12]
 800391c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800391e:	2301      	movs	r3, #1
 8003920:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003926:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003928:	2300      	movs	r3, #0
 800392a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800392c:	2301      	movs	r3, #1
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003930:	2302      	movs	r3, #2
 8003932:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003938:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800393a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003940:	f107 0318 	add.w	r3, r7, #24
 8003944:	4618      	mov	r0, r3
 8003946:	f001 f995 	bl	8004c74 <HAL_RCC_OscConfig>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003950:	f000 f9cf 	bl	8003cf2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003954:	230f      	movs	r3, #15
 8003956:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003958:	2302      	movs	r3, #2
 800395a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800396a:	1d3b      	adds	r3, r7, #4
 800396c:	2102      	movs	r1, #2
 800396e:	4618      	mov	r0, r3
 8003970:	f001 fc00 	bl	8005174 <HAL_RCC_ClockConfig>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800397a:	f000 f9ba 	bl	8003cf2 <Error_Handler>
  }
}
 800397e:	bf00      	nop
 8003980:	3740      	adds	r7, #64	; 0x40
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <MX_SPI1_Init+0x68>)
 800398e:	4a19      	ldr	r2, [pc, #100]	; (80039f4 <MX_SPI1_Init+0x6c>)
 8003990:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <MX_SPI1_Init+0x68>)
 8003994:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003998:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <MX_SPI1_Init+0x68>)
 800399c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039a2:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <MX_SPI1_Init+0x68>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80039a8:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <MX_SPI1_Init+0x68>)
 80039aa:	2202      	movs	r2, #2
 80039ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <MX_SPI1_Init+0x68>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <MX_SPI1_Init+0x68>)
 80039b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <MX_SPI1_Init+0x68>)
 80039be:	2238      	movs	r2, #56	; 0x38
 80039c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80039c2:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <MX_SPI1_Init+0x68>)
 80039c4:	2280      	movs	r2, #128	; 0x80
 80039c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <MX_SPI1_Init+0x68>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ce:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <MX_SPI1_Init+0x68>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <MX_SPI1_Init+0x68>)
 80039d6:	220a      	movs	r2, #10
 80039d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039da:	4805      	ldr	r0, [pc, #20]	; (80039f0 <MX_SPI1_Init+0x68>)
 80039dc:	f001 fd32 	bl	8005444 <HAL_SPI_Init>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80039e6:	f000 f984 	bl	8003cf2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20003e1c 	.word	0x20003e1c
 80039f4:	40013000 	.word	0x40013000

080039f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08e      	sub	sp, #56	; 0x38
 80039fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	605a      	str	r2, [r3, #4]
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a0c:	f107 0320 	add.w	r3, r7, #32
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	611a      	str	r2, [r3, #16]
 8003a24:	615a      	str	r2, [r3, #20]
 8003a26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a28:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <MX_TIM3_Init+0xe4>)
 8003a2a:	4a2d      	ldr	r2, [pc, #180]	; (8003ae0 <MX_TIM3_Init+0xe8>)
 8003a2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8003a2e:	4b2b      	ldr	r3, [pc, #172]	; (8003adc <MX_TIM3_Init+0xe4>)
 8003a30:	2247      	movs	r2, #71	; 0x47
 8003a32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a34:	4b29      	ldr	r3, [pc, #164]	; (8003adc <MX_TIM3_Init+0xe4>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003a3a:	4b28      	ldr	r3, [pc, #160]	; (8003adc <MX_TIM3_Init+0xe4>)
 8003a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a42:	4b26      	ldr	r3, [pc, #152]	; (8003adc <MX_TIM3_Init+0xe4>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a48:	4b24      	ldr	r3, [pc, #144]	; (8003adc <MX_TIM3_Init+0xe4>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a4e:	4823      	ldr	r0, [pc, #140]	; (8003adc <MX_TIM3_Init+0xe4>)
 8003a50:	f002 fb68 	bl	8006124 <HAL_TIM_Base_Init>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003a5a:	f000 f94a 	bl	8003cf2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a68:	4619      	mov	r1, r3
 8003a6a:	481c      	ldr	r0, [pc, #112]	; (8003adc <MX_TIM3_Init+0xe4>)
 8003a6c:	f002 fef2 	bl	8006854 <HAL_TIM_ConfigClockSource>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003a76:	f000 f93c 	bl	8003cf2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a7a:	4818      	ldr	r0, [pc, #96]	; (8003adc <MX_TIM3_Init+0xe4>)
 8003a7c:	f002 fba1 	bl	80061c2 <HAL_TIM_PWM_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003a86:	f000 f934 	bl	8003cf2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a92:	f107 0320 	add.w	r3, r7, #32
 8003a96:	4619      	mov	r1, r3
 8003a98:	4810      	ldr	r0, [pc, #64]	; (8003adc <MX_TIM3_Init+0xe4>)
 8003a9a:	f003 faad 	bl	8006ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003aa4:	f000 f925 	bl	8003cf2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aa8:	2360      	movs	r3, #96	; 0x60
 8003aaa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ab8:	1d3b      	adds	r3, r7, #4
 8003aba:	2200      	movs	r2, #0
 8003abc:	4619      	mov	r1, r3
 8003abe:	4807      	ldr	r0, [pc, #28]	; (8003adc <MX_TIM3_Init+0xe4>)
 8003ac0:	f002 fe0a 	bl	80066d8 <HAL_TIM_PWM_ConfigChannel>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003aca:	f000 f912 	bl	8003cf2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ace:	4803      	ldr	r0, [pc, #12]	; (8003adc <MX_TIM3_Init+0xe4>)
 8003ad0:	f000 f9b8 	bl	8003e44 <HAL_TIM_MspPostInit>

}
 8003ad4:	bf00      	nop
 8003ad6:	3738      	adds	r7, #56	; 0x38
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20003dd4 	.word	0x20003dd4
 8003ae0:	40000400 	.word	0x40000400

08003ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aea:	f107 0310 	add.w	r3, r7, #16
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	605a      	str	r2, [r3, #4]
 8003af4:	609a      	str	r2, [r3, #8]
 8003af6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003af8:	4b71      	ldr	r3, [pc, #452]	; (8003cc0 <MX_GPIO_Init+0x1dc>)
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	4a70      	ldr	r2, [pc, #448]	; (8003cc0 <MX_GPIO_Init+0x1dc>)
 8003afe:	f043 0320 	orr.w	r3, r3, #32
 8003b02:	6193      	str	r3, [r2, #24]
 8003b04:	4b6e      	ldr	r3, [pc, #440]	; (8003cc0 <MX_GPIO_Init+0x1dc>)
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b10:	4b6b      	ldr	r3, [pc, #428]	; (8003cc0 <MX_GPIO_Init+0x1dc>)
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	4a6a      	ldr	r2, [pc, #424]	; (8003cc0 <MX_GPIO_Init+0x1dc>)
 8003b16:	f043 0310 	orr.w	r3, r3, #16
 8003b1a:	6193      	str	r3, [r2, #24]
 8003b1c:	4b68      	ldr	r3, [pc, #416]	; (8003cc0 <MX_GPIO_Init+0x1dc>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b28:	4b65      	ldr	r3, [pc, #404]	; (8003cc0 <MX_GPIO_Init+0x1dc>)
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	4a64      	ldr	r2, [pc, #400]	; (8003cc0 <MX_GPIO_Init+0x1dc>)
 8003b2e:	f043 0304 	orr.w	r3, r3, #4
 8003b32:	6193      	str	r3, [r2, #24]
 8003b34:	4b62      	ldr	r3, [pc, #392]	; (8003cc0 <MX_GPIO_Init+0x1dc>)
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b40:	4b5f      	ldr	r3, [pc, #380]	; (8003cc0 <MX_GPIO_Init+0x1dc>)
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	4a5e      	ldr	r2, [pc, #376]	; (8003cc0 <MX_GPIO_Init+0x1dc>)
 8003b46:	f043 0308 	orr.w	r3, r3, #8
 8003b4a:	6193      	str	r3, [r2, #24]
 8003b4c:	4b5c      	ldr	r3, [pc, #368]	; (8003cc0 <MX_GPIO_Init+0x1dc>)
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oDIR1_Pin, GPIO_PIN_RESET);
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003b5e:	4859      	ldr	r0, [pc, #356]	; (8003cc4 <MX_GPIO_Init+0x1e0>)
 8003b60:	f001 f857 	bl	8004c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, oBuzer_Pin|oSyncArc_Pin|oSMD_EN1_Pin, GPIO_PIN_RESET);
 8003b64:	2200      	movs	r2, #0
 8003b66:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8003b6a:	4857      	ldr	r0, [pc, #348]	; (8003cc8 <MX_GPIO_Init+0x1e4>)
 8003b6c:	f001 f851 	bl	8004c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin, GPIO_PIN_SET);
 8003b70:	2201      	movs	r2, #1
 8003b72:	2140      	movs	r1, #64	; 0x40
 8003b74:	4854      	ldr	r0, [pc, #336]	; (8003cc8 <MX_GPIO_Init+0x1e4>)
 8003b76:	f001 f84c 	bl	8004c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin, GPIO_PIN_SET);
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	2130      	movs	r1, #48	; 0x30
 8003b7e:	4851      	ldr	r0, [pc, #324]	; (8003cc4 <MX_GPIO_Init+0x1e0>)
 8003b80:	f001 f847 	bl	8004c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin, GPIO_PIN_SET);
 8003b84:	2201      	movs	r2, #1
 8003b86:	2103      	movs	r1, #3
 8003b88:	4850      	ldr	r0, [pc, #320]	; (8003ccc <MX_GPIO_Init+0x1e8>)
 8003b8a:	f001 f842 	bl	8004c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSolenoidValve2_Pin|oSolenoidValve1_Pin, GPIO_PIN_RESET);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	21c0      	movs	r1, #192	; 0xc0
 8003b92:	484e      	ldr	r0, [pc, #312]	; (8003ccc <MX_GPIO_Init+0x1e8>)
 8003b94:	f001 f83d 	bl	8004c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : oSol_Valve_b_Heade_Pin oSol_Valve_a_Heade_Pin oSTLED316S_STB1_Pin oSTLED316S_STB2_Pin
                           oDIR1_Pin */
  GPIO_InitStruct.Pin = oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin
 8003b98:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003b9c:	613b      	str	r3, [r7, #16]
                          |oDIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003baa:	f107 0310 	add.w	r3, r7, #16
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4844      	ldr	r0, [pc, #272]	; (8003cc4 <MX_GPIO_Init+0x1e0>)
 8003bb2:	f000 fe83 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pins : iPedal_L_Pin iPedal_R_Pin */
  GPIO_InitStruct.Pin = iPedal_L_Pin|iPedal_R_Pin;
 8003bb6:	2309      	movs	r3, #9
 8003bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc2:	f107 0310 	add.w	r3, r7, #16
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	483f      	ldr	r0, [pc, #252]	; (8003cc8 <MX_GPIO_Init+0x1e4>)
 8003bca:	f000 fe77 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pins : oBuzer_Pin oSTLED316S_STB5_Pin oSyncArc_Pin oSMD_EN1_Pin */
  GPIO_InitStruct.Pin = oBuzer_Pin|oSTLED316S_STB5_Pin|oSyncArc_Pin|oSMD_EN1_Pin;
 8003bce:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8003bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be0:	f107 0310 	add.w	r3, r7, #16
 8003be4:	4619      	mov	r1, r3
 8003be6:	4838      	ldr	r0, [pc, #224]	; (8003cc8 <MX_GPIO_Init+0x1e4>)
 8003be8:	f000 fe68 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pins : oSTLED316S_STB3_Pin oSTLED316S_STB4_Pin oSolenoidValve2_Pin oSolenoidValve1_Pin */
  GPIO_InitStruct.Pin = oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin|oSolenoidValve2_Pin|oSolenoidValve1_Pin;
 8003bec:	23c3      	movs	r3, #195	; 0xc3
 8003bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfc:	f107 0310 	add.w	r3, r7, #16
 8003c00:	4619      	mov	r1, r3
 8003c02:	4832      	ldr	r0, [pc, #200]	; (8003ccc <MX_GPIO_Init+0x1e8>)
 8003c04:	f000 fe5a 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN5_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN5_Pin;
 8003c08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <MX_GPIO_Init+0x1ec>)
 8003c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN5_GPIO_Port, &GPIO_InitStruct);
 8003c16:	f107 0310 	add.w	r3, r7, #16
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	482b      	ldr	r0, [pc, #172]	; (8003ccc <MX_GPIO_Init+0x1e8>)
 8003c1e:	f000 fe4d 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pin : iBackDoor_Pin */
  GPIO_InitStruct.Pin = iBackDoor_Pin;
 8003c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iBackDoor_GPIO_Port, &GPIO_InitStruct);
 8003c30:	f107 0310 	add.w	r3, r7, #16
 8003c34:	4619      	mov	r1, r3
 8003c36:	4825      	ldr	r0, [pc, #148]	; (8003ccc <MX_GPIO_Init+0x1e8>)
 8003c38:	f000 fe40 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pin : iFB_STEP1_Pin */
  GPIO_InitStruct.Pin = iFB_STEP1_Pin;
 8003c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <MX_GPIO_Init+0x1f0>)
 8003c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iFB_STEP1_GPIO_Port, &GPIO_InitStruct);
 8003c4a:	f107 0310 	add.w	r3, r7, #16
 8003c4e:	4619      	mov	r1, r3
 8003c50:	481c      	ldr	r0, [pc, #112]	; (8003cc4 <MX_GPIO_Init+0x1e0>)
 8003c52:	f000 fe33 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN3_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN3_Pin;
 8003c56:	2304      	movs	r3, #4
 8003c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <MX_GPIO_Init+0x1ec>)
 8003c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN3_GPIO_Port, &GPIO_InitStruct);
 8003c62:	f107 0310 	add.w	r3, r7, #16
 8003c66:	4619      	mov	r1, r3
 8003c68:	481b      	ldr	r0, [pc, #108]	; (8003cd8 <MX_GPIO_Init+0x1f4>)
 8003c6a:	f000 fe27 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pin : iCarriageStop_Pin */
  GPIO_InitStruct.Pin = iCarriageStop_Pin;
 8003c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003c74:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <MX_GPIO_Init+0x1f8>)
 8003c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iCarriageStop_GPIO_Port, &GPIO_InitStruct);
 8003c7c:	f107 0310 	add.w	r3, r7, #16
 8003c80:	4619      	mov	r1, r3
 8003c82:	4812      	ldr	r0, [pc, #72]	; (8003ccc <MX_GPIO_Init+0x1e8>)
 8003c84:	f000 fe1a 	bl	80048bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2105      	movs	r1, #5
 8003c8c:	2008      	movs	r0, #8
 8003c8e:	f000 fad6 	bl	800423e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003c92:	2008      	movs	r0, #8
 8003c94:	f000 faef 	bl	8004276 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2105      	movs	r1, #5
 8003c9c:	2017      	movs	r0, #23
 8003c9e:	f000 face 	bl	800423e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003ca2:	2017      	movs	r0, #23
 8003ca4:	f000 fae7 	bl	8004276 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2105      	movs	r1, #5
 8003cac:	2028      	movs	r0, #40	; 0x28
 8003cae:	f000 fac6 	bl	800423e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003cb2:	2028      	movs	r0, #40	; 0x28
 8003cb4:	f000 fadf 	bl	8004276 <HAL_NVIC_EnableIRQ>

}
 8003cb8:	bf00      	nop
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40011000 	.word	0x40011000
 8003cc8:	40010800 	.word	0x40010800
 8003ccc:	40010c00 	.word	0x40010c00
 8003cd0:	10210000 	.word	0x10210000
 8003cd4:	10110000 	.word	0x10110000
 8003cd8:	40011400 	.word	0x40011400
 8003cdc:	10310000 	.word	0x10310000

08003ce0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	vTaskDelay(1000);
 8003ce8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cec:	f004 fae8 	bl	80082c0 <vTaskDelay>
 8003cf0:	e7fa      	b.n	8003ce8 <StartDefaultTask+0x8>

08003cf2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cf6:	b672      	cpsid	i
}
 8003cf8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cfa:	e7fe      	b.n	8003cfa <Error_Handler+0x8>

08003cfc <HAL_MspInit>:
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <HAL_MspInit+0x68>)
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <HAL_MspInit+0x68>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6193      	str	r3, [r2, #24]
 8003d0e:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <HAL_MspInit+0x68>)
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <HAL_MspInit+0x68>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	4a11      	ldr	r2, [pc, #68]	; (8003d64 <HAL_MspInit+0x68>)
 8003d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d24:	61d3      	str	r3, [r2, #28]
 8003d26:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <HAL_MspInit+0x68>)
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	210f      	movs	r1, #15
 8003d36:	f06f 0001 	mvn.w	r0, #1
 8003d3a:	f000 fa80 	bl	800423e <HAL_NVIC_SetPriority>
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <HAL_MspInit+0x6c>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <HAL_MspInit+0x6c>)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6053      	str	r3, [r2, #4]
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40010000 	.word	0x40010000

08003d6c <HAL_SPI_MspInit>:
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	f107 0310 	add.w	r3, r7, #16
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a19      	ldr	r2, [pc, #100]	; (8003dec <HAL_SPI_MspInit+0x80>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d12b      	bne.n	8003de4 <HAL_SPI_MspInit+0x78>
 8003d8c:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <HAL_SPI_MspInit+0x84>)
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	4a17      	ldr	r2, [pc, #92]	; (8003df0 <HAL_SPI_MspInit+0x84>)
 8003d92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d96:	6193      	str	r3, [r2, #24]
 8003d98:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <HAL_SPI_MspInit+0x84>)
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <HAL_SPI_MspInit+0x84>)
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	4a11      	ldr	r2, [pc, #68]	; (8003df0 <HAL_SPI_MspInit+0x84>)
 8003daa:	f043 0304 	orr.w	r3, r3, #4
 8003dae:	6193      	str	r3, [r2, #24]
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <HAL_SPI_MspInit+0x84>)
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	23a0      	movs	r3, #160	; 0xa0
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	f107 0310 	add.w	r3, r7, #16
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4809      	ldr	r0, [pc, #36]	; (8003df4 <HAL_SPI_MspInit+0x88>)
 8003dd0:	f000 fd74 	bl	80048bc <HAL_GPIO_Init>
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2105      	movs	r1, #5
 8003dd8:	2023      	movs	r0, #35	; 0x23
 8003dda:	f000 fa30 	bl	800423e <HAL_NVIC_SetPriority>
 8003dde:	2023      	movs	r0, #35	; 0x23
 8003de0:	f000 fa49 	bl	8004276 <HAL_NVIC_EnableIRQ>
 8003de4:	bf00      	nop
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40013000 	.word	0x40013000
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40010800 	.word	0x40010800

08003df8 <HAL_TIM_Base_MspInit>:
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <HAL_TIM_Base_MspInit+0x44>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d113      	bne.n	8003e32 <HAL_TIM_Base_MspInit+0x3a>
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <HAL_TIM_Base_MspInit+0x48>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <HAL_TIM_Base_MspInit+0x48>)
 8003e10:	f043 0302 	orr.w	r3, r3, #2
 8003e14:	61d3      	str	r3, [r2, #28]
 8003e16:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <HAL_TIM_Base_MspInit+0x48>)
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	2105      	movs	r1, #5
 8003e26:	201d      	movs	r0, #29
 8003e28:	f000 fa09 	bl	800423e <HAL_NVIC_SetPriority>
 8003e2c:	201d      	movs	r0, #29
 8003e2e:	f000 fa22 	bl	8004276 <HAL_NVIC_EnableIRQ>
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40021000 	.word	0x40021000

08003e44 <HAL_TIM_MspPostInit>:
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	f107 030c 	add.w	r3, r7, #12
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <HAL_TIM_MspPostInit+0x7c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d129      	bne.n	8003eb8 <HAL_TIM_MspPostInit+0x74>
 8003e64:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <HAL_TIM_MspPostInit+0x80>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <HAL_TIM_MspPostInit+0x80>)
 8003e6a:	f043 0310 	orr.w	r3, r3, #16
 8003e6e:	6193      	str	r3, [r2, #24]
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_TIM_MspPostInit+0x80>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2340      	movs	r3, #64	; 0x40
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	2302      	movs	r3, #2
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	2302      	movs	r3, #2
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	f107 030c 	add.w	r3, r7, #12
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	480e      	ldr	r0, [pc, #56]	; (8003ec8 <HAL_TIM_MspPostInit+0x84>)
 8003e90:	f000 fd14 	bl	80048bc <HAL_GPIO_Init>
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <HAL_TIM_MspPostInit+0x88>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	4a06      	ldr	r2, [pc, #24]	; (8003ecc <HAL_TIM_MspPostInit+0x88>)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	6053      	str	r3, [r2, #4]
 8003eb8:	bf00      	nop
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40011000 	.word	0x40011000
 8003ecc:	40010000 	.word	0x40010000

08003ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ed4:	e7fe      	b.n	8003ed4 <NMI_Handler+0x4>

08003ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eda:	e7fe      	b.n	8003eda <HardFault_Handler+0x4>

08003edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ee0:	e7fe      	b.n	8003ee0 <MemManage_Handler+0x4>

08003ee2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ee6:	e7fe      	b.n	8003ee6 <BusFault_Handler+0x4>

08003ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003eec:	e7fe      	b.n	8003eec <UsageFault_Handler+0x4>

08003eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ef2:	bf00      	nop
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003efe:	f000 f8ab 	bl	8004058 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003f02:	f004 fdb9 	bl	8008a78 <xTaskGetSchedulerState>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d001      	beq.n	8003f10 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003f0c:	f005 faec 	bl	80094e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f10:	bf00      	nop
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003f18:	2004      	movs	r0, #4
 8003f1a:	f000 fe93 	bl	8004c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003f26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003f2a:	f000 fe8b 	bl	8004c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f38:	4802      	ldr	r0, [pc, #8]	; (8003f44 <TIM3_IRQHandler+0x10>)
 8003f3a:	f002 fac5 	bl	80064c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20003dd4 	.word	0x20003dd4

08003f48 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003f4c:	4802      	ldr	r0, [pc, #8]	; (8003f58 <SPI1_IRQHandler+0x10>)
 8003f4e:	f001 feed 	bl	8005d2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003f52:	bf00      	nop
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20003e1c 	.word	0x20003e1c

08003f5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003f60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003f64:	f000 fe6e 	bl	8004c44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003f68:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f6c:	f000 fe6a 	bl	8004c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <SystemInit>:
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <Reset_Handler>:
 8003f80:	2100      	movs	r1, #0
 8003f82:	e003      	b.n	8003f8c <LoopCopyDataInit>

08003f84 <CopyDataInit>:
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <LoopFillZerobss+0x14>)
 8003f86:	585b      	ldr	r3, [r3, r1]
 8003f88:	5043      	str	r3, [r0, r1]
 8003f8a:	3104      	adds	r1, #4

08003f8c <LoopCopyDataInit>:
 8003f8c:	480a      	ldr	r0, [pc, #40]	; (8003fb8 <LoopFillZerobss+0x18>)
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <LoopFillZerobss+0x1c>)
 8003f90:	1842      	adds	r2, r0, r1
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d3f6      	bcc.n	8003f84 <CopyDataInit>
 8003f96:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <LoopFillZerobss+0x20>)
 8003f98:	e002      	b.n	8003fa0 <LoopFillZerobss>

08003f9a <FillZerobss>:
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f842 3b04 	str.w	r3, [r2], #4

08003fa0 <LoopFillZerobss>:
 8003fa0:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <LoopFillZerobss+0x24>)
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d3f9      	bcc.n	8003f9a <FillZerobss>
 8003fa6:	f7ff ffe5 	bl	8003f74 <SystemInit>
 8003faa:	f005 fc69 	bl	8009880 <__libc_init_array>
 8003fae:	f7ff fc85 	bl	80038bc <main>
 8003fb2:	4770      	bx	lr
 8003fb4:	080099fc 	.word	0x080099fc
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	20000010 	.word	0x20000010
 8003fc0:	20000010 	.word	0x20000010
 8003fc4:	20003ed8 	.word	0x20003ed8

08003fc8 <ADC1_2_IRQHandler>:
 8003fc8:	e7fe      	b.n	8003fc8 <ADC1_2_IRQHandler>
	...

08003fcc <HAL_Init>:
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <HAL_Init+0x28>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <HAL_Init+0x28>)
 8003fd6:	f043 0310 	orr.w	r3, r3, #16
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	2003      	movs	r0, #3
 8003fde:	f000 f923 	bl	8004228 <HAL_NVIC_SetPriorityGrouping>
 8003fe2:	200f      	movs	r0, #15
 8003fe4:	f000 f808 	bl	8003ff8 <HAL_InitTick>
 8003fe8:	f7ff fe88 	bl	8003cfc <HAL_MspInit>
 8003fec:	2300      	movs	r3, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40022000 	.word	0x40022000

08003ff8 <HAL_InitTick>:
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	4b12      	ldr	r3, [pc, #72]	; (800404c <HAL_InitTick+0x54>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_InitTick+0x58>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	4619      	mov	r1, r3
 800400a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800400e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004012:	fbb2 f3f3 	udiv	r3, r2, r3
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f93b 	bl	8004292 <HAL_SYSTICK_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_InitTick+0x2e>
 8004022:	2301      	movs	r3, #1
 8004024:	e00e      	b.n	8004044 <HAL_InitTick+0x4c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b0f      	cmp	r3, #15
 800402a:	d80a      	bhi.n	8004042 <HAL_InitTick+0x4a>
 800402c:	2200      	movs	r2, #0
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	f000 f903 	bl	800423e <HAL_NVIC_SetPriority>
 8004038:	4a06      	ldr	r2, [pc, #24]	; (8004054 <HAL_InitTick+0x5c>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	2300      	movs	r3, #0
 8004040:	e000      	b.n	8004044 <HAL_InitTick+0x4c>
 8004042:	2301      	movs	r3, #1
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20000000 	.word	0x20000000
 8004050:	20000008 	.word	0x20000008
 8004054:	20000004 	.word	0x20000004

08004058 <HAL_IncTick>:
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_IncTick+0x1c>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_IncTick+0x20>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4413      	add	r3, r2
 8004068:	4a03      	ldr	r2, [pc, #12]	; (8004078 <HAL_IncTick+0x20>)
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr
 8004074:	20000008 	.word	0x20000008
 8004078:	20003e74 	.word	0x20003e74

0800407c <HAL_GetTick>:
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
 8004080:	4b02      	ldr	r3, [pc, #8]	; (800408c <HAL_GetTick+0x10>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr
 800408c:	20003e74 	.word	0x20003e74

08004090 <__NVIC_SetPriorityGrouping>:
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <__NVIC_SetPriorityGrouping+0x44>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040ac:	4013      	ands	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	021a      	lsls	r2, r3, #8
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <__NVIC_SetPriorityGrouping+0x44>)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	60d3      	str	r3, [r2, #12]
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <__NVIC_GetPriorityGrouping>:
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <__NVIC_GetPriorityGrouping+0x18>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <__NVIC_EnableIRQ>:
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]
 80040fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004102:	2b00      	cmp	r3, #0
 8004104:	db0b      	blt.n	800411e <__NVIC_EnableIRQ+0x2a>
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	f003 021f 	and.w	r2, r3, #31
 800410c:	4906      	ldr	r1, [pc, #24]	; (8004128 <__NVIC_EnableIRQ+0x34>)
 800410e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2001      	movs	r0, #1
 8004116:	fa00 f202 	lsl.w	r2, r0, r2
 800411a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	e000e100 	.word	0xe000e100

0800412c <__NVIC_SetPriority>:
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	6039      	str	r1, [r7, #0]
 8004136:	71fb      	strb	r3, [r7, #7]
 8004138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413c:	2b00      	cmp	r3, #0
 800413e:	db0a      	blt.n	8004156 <__NVIC_SetPriority+0x2a>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	490c      	ldr	r1, [pc, #48]	; (8004178 <__NVIC_SetPriority+0x4c>)
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	0112      	lsls	r2, r2, #4
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	440b      	add	r3, r1
 8004150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004154:	e00a      	b.n	800416c <__NVIC_SetPriority+0x40>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	4908      	ldr	r1, [pc, #32]	; (800417c <__NVIC_SetPriority+0x50>)
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	3b04      	subs	r3, #4
 8004164:	0112      	lsls	r2, r2, #4
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	440b      	add	r3, r1
 800416a:	761a      	strb	r2, [r3, #24]
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	e000e100 	.word	0xe000e100
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <NVIC_EncodePriority>:
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	; 0x24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f1c3 0307 	rsb	r3, r3, #7
 800419a:	2b04      	cmp	r3, #4
 800419c:	bf28      	it	cs
 800419e:	2304      	movcs	r3, #4
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	3304      	adds	r3, #4
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d902      	bls.n	80041b0 <NVIC_EncodePriority+0x30>
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3b03      	subs	r3, #3
 80041ae:	e000      	b.n	80041b2 <NVIC_EncodePriority+0x32>
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43da      	mvns	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	401a      	ands	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	409a      	lsls	r2, r3
 80041c8:	f04f 31ff 	mov.w	r1, #4294967295
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	43d9      	mvns	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	400b      	ands	r3, r1
 80041d8:	4313      	orrs	r3, r2
 80041da:	4618      	mov	r0, r3
 80041dc:	3724      	adds	r7, #36	; 0x24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <SysTick_Config>:
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f4:	d301      	bcc.n	80041fa <SysTick_Config+0x16>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e00f      	b.n	800421a <SysTick_Config+0x36>
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <SysTick_Config+0x40>)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3b01      	subs	r3, #1
 8004200:	6053      	str	r3, [r2, #4]
 8004202:	210f      	movs	r1, #15
 8004204:	f04f 30ff 	mov.w	r0, #4294967295
 8004208:	f7ff ff90 	bl	800412c <__NVIC_SetPriority>
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <SysTick_Config+0x40>)
 800420e:	2200      	movs	r2, #0
 8004210:	609a      	str	r2, [r3, #8]
 8004212:	4b04      	ldr	r3, [pc, #16]	; (8004224 <SysTick_Config+0x40>)
 8004214:	2207      	movs	r2, #7
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	2300      	movs	r3, #0
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	e000e010 	.word	0xe000e010

08004228 <HAL_NVIC_SetPriorityGrouping>:
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ff2d 	bl	8004090 <__NVIC_SetPriorityGrouping>
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_NVIC_SetPriority>:
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	4603      	mov	r3, r0
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	73fb      	strb	r3, [r7, #15]
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	f7ff ff42 	bl	80040d8 <__NVIC_GetPriorityGrouping>
 8004254:	6178      	str	r0, [r7, #20]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	6978      	ldr	r0, [r7, #20]
 800425c:	f7ff ff90 	bl	8004180 <NVIC_EncodePriority>
 8004260:	4602      	mov	r2, r0
 8004262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004266:	4611      	mov	r1, r2
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff ff5f 	bl	800412c <__NVIC_SetPriority>
 800426e:	bf00      	nop
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_NVIC_EnableIRQ>:
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	4603      	mov	r3, r0
 800427e:	71fb      	strb	r3, [r7, #7]
 8004280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff35 	bl	80040f4 <__NVIC_EnableIRQ>
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_SYSTICK_Config>:
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ffa2 	bl	80041e4 <SysTick_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <HAL_DMA_Abort_IT>:
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	2300      	movs	r3, #0
 80042b6:	73fb      	strb	r3, [r7, #15]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d005      	beq.n	80042ce <HAL_DMA_Abort_IT+0x22>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2204      	movs	r2, #4
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
 80042cc:	e0d6      	b.n	800447c <HAL_DMA_Abort_IT+0x1d0>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 020e 	bic.w	r2, r2, #14
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	4b64      	ldr	r3, [pc, #400]	; (8004488 <HAL_DMA_Abort_IT+0x1dc>)
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d958      	bls.n	80043ac <HAL_DMA_Abort_IT+0x100>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a63      	ldr	r2, [pc, #396]	; (800448c <HAL_DMA_Abort_IT+0x1e0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d04f      	beq.n	80043a4 <HAL_DMA_Abort_IT+0xf8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a61      	ldr	r2, [pc, #388]	; (8004490 <HAL_DMA_Abort_IT+0x1e4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d048      	beq.n	80043a0 <HAL_DMA_Abort_IT+0xf4>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a60      	ldr	r2, [pc, #384]	; (8004494 <HAL_DMA_Abort_IT+0x1e8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d040      	beq.n	800439a <HAL_DMA_Abort_IT+0xee>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a5e      	ldr	r2, [pc, #376]	; (8004498 <HAL_DMA_Abort_IT+0x1ec>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d038      	beq.n	8004394 <HAL_DMA_Abort_IT+0xe8>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a5d      	ldr	r2, [pc, #372]	; (800449c <HAL_DMA_Abort_IT+0x1f0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d030      	beq.n	800438e <HAL_DMA_Abort_IT+0xe2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a5b      	ldr	r2, [pc, #364]	; (80044a0 <HAL_DMA_Abort_IT+0x1f4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d028      	beq.n	8004388 <HAL_DMA_Abort_IT+0xdc>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a53      	ldr	r2, [pc, #332]	; (8004488 <HAL_DMA_Abort_IT+0x1dc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d020      	beq.n	8004382 <HAL_DMA_Abort_IT+0xd6>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a57      	ldr	r2, [pc, #348]	; (80044a4 <HAL_DMA_Abort_IT+0x1f8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d019      	beq.n	800437e <HAL_DMA_Abort_IT+0xd2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a56      	ldr	r2, [pc, #344]	; (80044a8 <HAL_DMA_Abort_IT+0x1fc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d012      	beq.n	800437a <HAL_DMA_Abort_IT+0xce>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a54      	ldr	r2, [pc, #336]	; (80044ac <HAL_DMA_Abort_IT+0x200>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00a      	beq.n	8004374 <HAL_DMA_Abort_IT+0xc8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a53      	ldr	r2, [pc, #332]	; (80044b0 <HAL_DMA_Abort_IT+0x204>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d102      	bne.n	800436e <HAL_DMA_Abort_IT+0xc2>
 8004368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800436c:	e01b      	b.n	80043a6 <HAL_DMA_Abort_IT+0xfa>
 800436e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004372:	e018      	b.n	80043a6 <HAL_DMA_Abort_IT+0xfa>
 8004374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004378:	e015      	b.n	80043a6 <HAL_DMA_Abort_IT+0xfa>
 800437a:	2310      	movs	r3, #16
 800437c:	e013      	b.n	80043a6 <HAL_DMA_Abort_IT+0xfa>
 800437e:	2301      	movs	r3, #1
 8004380:	e011      	b.n	80043a6 <HAL_DMA_Abort_IT+0xfa>
 8004382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004386:	e00e      	b.n	80043a6 <HAL_DMA_Abort_IT+0xfa>
 8004388:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800438c:	e00b      	b.n	80043a6 <HAL_DMA_Abort_IT+0xfa>
 800438e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004392:	e008      	b.n	80043a6 <HAL_DMA_Abort_IT+0xfa>
 8004394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004398:	e005      	b.n	80043a6 <HAL_DMA_Abort_IT+0xfa>
 800439a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800439e:	e002      	b.n	80043a6 <HAL_DMA_Abort_IT+0xfa>
 80043a0:	2310      	movs	r3, #16
 80043a2:	e000      	b.n	80043a6 <HAL_DMA_Abort_IT+0xfa>
 80043a4:	2301      	movs	r3, #1
 80043a6:	4a43      	ldr	r2, [pc, #268]	; (80044b4 <HAL_DMA_Abort_IT+0x208>)
 80043a8:	6053      	str	r3, [r2, #4]
 80043aa:	e057      	b.n	800445c <HAL_DMA_Abort_IT+0x1b0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a36      	ldr	r2, [pc, #216]	; (800448c <HAL_DMA_Abort_IT+0x1e0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d04f      	beq.n	8004456 <HAL_DMA_Abort_IT+0x1aa>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a35      	ldr	r2, [pc, #212]	; (8004490 <HAL_DMA_Abort_IT+0x1e4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d048      	beq.n	8004452 <HAL_DMA_Abort_IT+0x1a6>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a33      	ldr	r2, [pc, #204]	; (8004494 <HAL_DMA_Abort_IT+0x1e8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d040      	beq.n	800444c <HAL_DMA_Abort_IT+0x1a0>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a32      	ldr	r2, [pc, #200]	; (8004498 <HAL_DMA_Abort_IT+0x1ec>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d038      	beq.n	8004446 <HAL_DMA_Abort_IT+0x19a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a30      	ldr	r2, [pc, #192]	; (800449c <HAL_DMA_Abort_IT+0x1f0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d030      	beq.n	8004440 <HAL_DMA_Abort_IT+0x194>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a2f      	ldr	r2, [pc, #188]	; (80044a0 <HAL_DMA_Abort_IT+0x1f4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d028      	beq.n	800443a <HAL_DMA_Abort_IT+0x18e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a26      	ldr	r2, [pc, #152]	; (8004488 <HAL_DMA_Abort_IT+0x1dc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d020      	beq.n	8004434 <HAL_DMA_Abort_IT+0x188>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a2b      	ldr	r2, [pc, #172]	; (80044a4 <HAL_DMA_Abort_IT+0x1f8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d019      	beq.n	8004430 <HAL_DMA_Abort_IT+0x184>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a29      	ldr	r2, [pc, #164]	; (80044a8 <HAL_DMA_Abort_IT+0x1fc>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d012      	beq.n	800442c <HAL_DMA_Abort_IT+0x180>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a28      	ldr	r2, [pc, #160]	; (80044ac <HAL_DMA_Abort_IT+0x200>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00a      	beq.n	8004426 <HAL_DMA_Abort_IT+0x17a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a26      	ldr	r2, [pc, #152]	; (80044b0 <HAL_DMA_Abort_IT+0x204>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d102      	bne.n	8004420 <HAL_DMA_Abort_IT+0x174>
 800441a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800441e:	e01b      	b.n	8004458 <HAL_DMA_Abort_IT+0x1ac>
 8004420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004424:	e018      	b.n	8004458 <HAL_DMA_Abort_IT+0x1ac>
 8004426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800442a:	e015      	b.n	8004458 <HAL_DMA_Abort_IT+0x1ac>
 800442c:	2310      	movs	r3, #16
 800442e:	e013      	b.n	8004458 <HAL_DMA_Abort_IT+0x1ac>
 8004430:	2301      	movs	r3, #1
 8004432:	e011      	b.n	8004458 <HAL_DMA_Abort_IT+0x1ac>
 8004434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004438:	e00e      	b.n	8004458 <HAL_DMA_Abort_IT+0x1ac>
 800443a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800443e:	e00b      	b.n	8004458 <HAL_DMA_Abort_IT+0x1ac>
 8004440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004444:	e008      	b.n	8004458 <HAL_DMA_Abort_IT+0x1ac>
 8004446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800444a:	e005      	b.n	8004458 <HAL_DMA_Abort_IT+0x1ac>
 800444c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004450:	e002      	b.n	8004458 <HAL_DMA_Abort_IT+0x1ac>
 8004452:	2310      	movs	r3, #16
 8004454:	e000      	b.n	8004458 <HAL_DMA_Abort_IT+0x1ac>
 8004456:	2301      	movs	r3, #1
 8004458:	4a17      	ldr	r2, [pc, #92]	; (80044b8 <HAL_DMA_Abort_IT+0x20c>)
 800445a:	6053      	str	r3, [r2, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2020 	strb.w	r2, [r3, #32]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_DMA_Abort_IT+0x1d0>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	4798      	blx	r3
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40020080 	.word	0x40020080
 800448c:	40020008 	.word	0x40020008
 8004490:	4002001c 	.word	0x4002001c
 8004494:	40020030 	.word	0x40020030
 8004498:	40020044 	.word	0x40020044
 800449c:	40020058 	.word	0x40020058
 80044a0:	4002006c 	.word	0x4002006c
 80044a4:	40020408 	.word	0x40020408
 80044a8:	4002041c 	.word	0x4002041c
 80044ac:	40020430 	.word	0x40020430
 80044b0:	40020444 	.word	0x40020444
 80044b4:	40020400 	.word	0x40020400
 80044b8:	40020000 	.word	0x40020000

080044bc <HAL_FLASH_Program>:
 80044bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	e9c7 2300 	strd	r2, r3, [r7]
 80044ca:	2301      	movs	r3, #1
 80044cc:	75fb      	strb	r3, [r7, #23]
 80044ce:	2300      	movs	r3, #0
 80044d0:	75bb      	strb	r3, [r7, #22]
 80044d2:	2300      	movs	r3, #0
 80044d4:	757b      	strb	r3, [r7, #21]
 80044d6:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <HAL_FLASH_Program+0xd8>)
 80044d8:	7e1b      	ldrb	r3, [r3, #24]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_FLASH_Program+0x26>
 80044de:	2302      	movs	r3, #2
 80044e0:	e054      	b.n	800458c <HAL_FLASH_Program+0xd0>
 80044e2:	4b2c      	ldr	r3, [pc, #176]	; (8004594 <HAL_FLASH_Program+0xd8>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	761a      	strb	r2, [r3, #24]
 80044e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044ec:	f000 f8a8 	bl	8004640 <FLASH_WaitForLastOperation>
 80044f0:	4603      	mov	r3, r0
 80044f2:	75fb      	strb	r3, [r7, #23]
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d144      	bne.n	8004584 <HAL_FLASH_Program+0xc8>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d102      	bne.n	8004506 <HAL_FLASH_Program+0x4a>
 8004500:	2301      	movs	r3, #1
 8004502:	757b      	strb	r3, [r7, #21]
 8004504:	e007      	b.n	8004516 <HAL_FLASH_Program+0x5a>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d102      	bne.n	8004512 <HAL_FLASH_Program+0x56>
 800450c:	2302      	movs	r3, #2
 800450e:	757b      	strb	r3, [r7, #21]
 8004510:	e001      	b.n	8004516 <HAL_FLASH_Program+0x5a>
 8004512:	2304      	movs	r3, #4
 8004514:	757b      	strb	r3, [r7, #21]
 8004516:	2300      	movs	r3, #0
 8004518:	75bb      	strb	r3, [r7, #22]
 800451a:	e02d      	b.n	8004578 <HAL_FLASH_Program+0xbc>
 800451c:	7dbb      	ldrb	r3, [r7, #22]
 800451e:	005a      	lsls	r2, r3, #1
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	eb02 0c03 	add.w	ip, r2, r3
 8004526:	7dbb      	ldrb	r3, [r7, #22]
 8004528:	0119      	lsls	r1, r3, #4
 800452a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800452e:	f1c1 0620 	rsb	r6, r1, #32
 8004532:	f1a1 0020 	sub.w	r0, r1, #32
 8004536:	fa22 f401 	lsr.w	r4, r2, r1
 800453a:	fa03 f606 	lsl.w	r6, r3, r6
 800453e:	4334      	orrs	r4, r6
 8004540:	fa23 f000 	lsr.w	r0, r3, r0
 8004544:	4304      	orrs	r4, r0
 8004546:	fa23 f501 	lsr.w	r5, r3, r1
 800454a:	b2a3      	uxth	r3, r4
 800454c:	4619      	mov	r1, r3
 800454e:	4660      	mov	r0, ip
 8004550:	f000 f85a 	bl	8004608 <FLASH_Program_HalfWord>
 8004554:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004558:	f000 f872 	bl	8004640 <FLASH_WaitForLastOperation>
 800455c:	4603      	mov	r3, r0
 800455e:	75fb      	strb	r3, [r7, #23]
 8004560:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <HAL_FLASH_Program+0xdc>)
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	4a0c      	ldr	r2, [pc, #48]	; (8004598 <HAL_FLASH_Program+0xdc>)
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	6113      	str	r3, [r2, #16]
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d107      	bne.n	8004582 <HAL_FLASH_Program+0xc6>
 8004572:	7dbb      	ldrb	r3, [r7, #22]
 8004574:	3301      	adds	r3, #1
 8004576:	75bb      	strb	r3, [r7, #22]
 8004578:	7dba      	ldrb	r2, [r7, #22]
 800457a:	7d7b      	ldrb	r3, [r7, #21]
 800457c:	429a      	cmp	r2, r3
 800457e:	d3cd      	bcc.n	800451c <HAL_FLASH_Program+0x60>
 8004580:	e000      	b.n	8004584 <HAL_FLASH_Program+0xc8>
 8004582:	bf00      	nop
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <HAL_FLASH_Program+0xd8>)
 8004586:	2200      	movs	r2, #0
 8004588:	761a      	strb	r2, [r3, #24]
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	4618      	mov	r0, r3
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004594:	20003e78 	.word	0x20003e78
 8004598:	40022000 	.word	0x40022000

0800459c <HAL_FLASH_Unlock>:
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	2300      	movs	r3, #0
 80045a4:	71fb      	strb	r3, [r7, #7]
 80045a6:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <HAL_FLASH_Unlock+0x40>)
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00d      	beq.n	80045ce <HAL_FLASH_Unlock+0x32>
 80045b2:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <HAL_FLASH_Unlock+0x40>)
 80045b4:	4a0a      	ldr	r2, [pc, #40]	; (80045e0 <HAL_FLASH_Unlock+0x44>)
 80045b6:	605a      	str	r2, [r3, #4]
 80045b8:	4b08      	ldr	r3, [pc, #32]	; (80045dc <HAL_FLASH_Unlock+0x40>)
 80045ba:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <HAL_FLASH_Unlock+0x48>)
 80045bc:	605a      	str	r2, [r3, #4]
 80045be:	4b07      	ldr	r3, [pc, #28]	; (80045dc <HAL_FLASH_Unlock+0x40>)
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_FLASH_Unlock+0x32>
 80045ca:	2301      	movs	r3, #1
 80045cc:	71fb      	strb	r3, [r7, #7]
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40022000 	.word	0x40022000
 80045e0:	45670123 	.word	0x45670123
 80045e4:	cdef89ab 	.word	0xcdef89ab

080045e8 <HAL_FLASH_Lock>:
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_FLASH_Lock+0x1c>)
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	4a04      	ldr	r2, [pc, #16]	; (8004604 <HAL_FLASH_Lock+0x1c>)
 80045f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f6:	6113      	str	r3, [r2, #16]
 80045f8:	2300      	movs	r3, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40022000 	.word	0x40022000

08004608 <FLASH_Program_HalfWord>:
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	807b      	strh	r3, [r7, #2]
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <FLASH_Program_HalfWord+0x30>)
 8004616:	2200      	movs	r2, #0
 8004618:	61da      	str	r2, [r3, #28]
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <FLASH_Program_HalfWord+0x34>)
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	4a07      	ldr	r2, [pc, #28]	; (800463c <FLASH_Program_HalfWord+0x34>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6113      	str	r3, [r2, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	887a      	ldrh	r2, [r7, #2]
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	20003e78 	.word	0x20003e78
 800463c:	40022000 	.word	0x40022000

08004640 <FLASH_WaitForLastOperation>:
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	f7ff fd18 	bl	800407c <HAL_GetTick>
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	e010      	b.n	8004672 <FLASH_WaitForLastOperation+0x32>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d00c      	beq.n	8004672 <FLASH_WaitForLastOperation+0x32>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <FLASH_WaitForLastOperation+0x2e>
 800465e:	f7ff fd0d 	bl	800407c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	d201      	bcs.n	8004672 <FLASH_WaitForLastOperation+0x32>
 800466e:	2303      	movs	r3, #3
 8004670:	e025      	b.n	80046be <FLASH_WaitForLastOperation+0x7e>
 8004672:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <FLASH_WaitForLastOperation+0x88>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e8      	bne.n	8004650 <FLASH_WaitForLastOperation+0x10>
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <FLASH_WaitForLastOperation+0x88>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <FLASH_WaitForLastOperation+0x50>
 800468a:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <FLASH_WaitForLastOperation+0x88>)
 800468c:	2220      	movs	r2, #32
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <FLASH_WaitForLastOperation+0x88>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <FLASH_WaitForLastOperation+0x74>
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <FLASH_WaitForLastOperation+0x88>)
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <FLASH_WaitForLastOperation+0x74>
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <FLASH_WaitForLastOperation+0x88>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <FLASH_WaitForLastOperation+0x7c>
 80046b4:	f000 f80a 	bl	80046cc <FLASH_SetErrorCode>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <FLASH_WaitForLastOperation+0x7e>
 80046bc:	2300      	movs	r3, #0
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40022000 	.word	0x40022000

080046cc <FLASH_SetErrorCode>:
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	2300      	movs	r3, #0
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	4b23      	ldr	r3, [pc, #140]	; (8004764 <FLASH_SetErrorCode+0x98>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <FLASH_SetErrorCode+0x2a>
 80046e2:	4b21      	ldr	r3, [pc, #132]	; (8004768 <FLASH_SetErrorCode+0x9c>)
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f043 0302 	orr.w	r3, r3, #2
 80046ea:	4a1f      	ldr	r2, [pc, #124]	; (8004768 <FLASH_SetErrorCode+0x9c>)
 80046ec:	61d3      	str	r3, [r2, #28]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f043 0310 	orr.w	r3, r3, #16
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <FLASH_SetErrorCode+0x98>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <FLASH_SetErrorCode+0x4a>
 8004702:	4b19      	ldr	r3, [pc, #100]	; (8004768 <FLASH_SetErrorCode+0x9c>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	4a17      	ldr	r2, [pc, #92]	; (8004768 <FLASH_SetErrorCode+0x9c>)
 800470c:	61d3      	str	r3, [r2, #28]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f043 0304 	orr.w	r3, r3, #4
 8004714:	607b      	str	r3, [r7, #4]
 8004716:	4b13      	ldr	r3, [pc, #76]	; (8004764 <FLASH_SetErrorCode+0x98>)
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <FLASH_SetErrorCode+0x6e>
 8004722:	4b11      	ldr	r3, [pc, #68]	; (8004768 <FLASH_SetErrorCode+0x9c>)
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	4a0f      	ldr	r2, [pc, #60]	; (8004768 <FLASH_SetErrorCode+0x9c>)
 800472c:	61d3      	str	r3, [r2, #28]
 800472e:	4b0d      	ldr	r3, [pc, #52]	; (8004764 <FLASH_SetErrorCode+0x98>)
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	4a0c      	ldr	r2, [pc, #48]	; (8004764 <FLASH_SetErrorCode+0x98>)
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	61d3      	str	r3, [r2, #28]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f240 1201 	movw	r2, #257	; 0x101
 8004740:	4293      	cmp	r3, r2
 8004742:	d106      	bne.n	8004752 <FLASH_SetErrorCode+0x86>
 8004744:	4b07      	ldr	r3, [pc, #28]	; (8004764 <FLASH_SetErrorCode+0x98>)
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	4a06      	ldr	r2, [pc, #24]	; (8004764 <FLASH_SetErrorCode+0x98>)
 800474a:	f023 0301 	bic.w	r3, r3, #1
 800474e:	61d3      	str	r3, [r2, #28]
 8004750:	e002      	b.n	8004758 <FLASH_SetErrorCode+0x8c>
 8004752:	4a04      	ldr	r2, [pc, #16]	; (8004764 <FLASH_SetErrorCode+0x98>)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	60d3      	str	r3, [r2, #12]
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40022000 	.word	0x40022000
 8004768:	20003e78 	.word	0x20003e78

0800476c <HAL_FLASHEx_Erase>:
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	4b2f      	ldr	r3, [pc, #188]	; (800483c <HAL_FLASHEx_Erase+0xd0>)
 8004780:	7e1b      	ldrb	r3, [r3, #24]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_FLASHEx_Erase+0x1e>
 8004786:	2302      	movs	r3, #2
 8004788:	e053      	b.n	8004832 <HAL_FLASHEx_Erase+0xc6>
 800478a:	4b2c      	ldr	r3, [pc, #176]	; (800483c <HAL_FLASHEx_Erase+0xd0>)
 800478c:	2201      	movs	r2, #1
 800478e:	761a      	strb	r2, [r3, #24]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d116      	bne.n	80047c6 <HAL_FLASHEx_Erase+0x5a>
 8004798:	f24c 3050 	movw	r0, #50000	; 0xc350
 800479c:	f7ff ff50 	bl	8004640 <FLASH_WaitForLastOperation>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d141      	bne.n	800482a <HAL_FLASHEx_Erase+0xbe>
 80047a6:	2001      	movs	r0, #1
 80047a8:	f000 f84c 	bl	8004844 <FLASH_MassErase>
 80047ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047b0:	f7ff ff46 	bl	8004640 <FLASH_WaitForLastOperation>
 80047b4:	4603      	mov	r3, r0
 80047b6:	73fb      	strb	r3, [r7, #15]
 80047b8:	4b21      	ldr	r3, [pc, #132]	; (8004840 <HAL_FLASHEx_Erase+0xd4>)
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	4a20      	ldr	r2, [pc, #128]	; (8004840 <HAL_FLASHEx_Erase+0xd4>)
 80047be:	f023 0304 	bic.w	r3, r3, #4
 80047c2:	6113      	str	r3, [r2, #16]
 80047c4:	e031      	b.n	800482a <HAL_FLASHEx_Erase+0xbe>
 80047c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047ca:	f7ff ff39 	bl	8004640 <FLASH_WaitForLastOperation>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d12a      	bne.n	800482a <HAL_FLASHEx_Erase+0xbe>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f04f 32ff 	mov.w	r2, #4294967295
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	e019      	b.n	8004818 <HAL_FLASHEx_Erase+0xac>
 80047e4:	68b8      	ldr	r0, [r7, #8]
 80047e6:	f000 f849 	bl	800487c <FLASH_PageErase>
 80047ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047ee:	f7ff ff27 	bl	8004640 <FLASH_WaitForLastOperation>
 80047f2:	4603      	mov	r3, r0
 80047f4:	73fb      	strb	r3, [r7, #15]
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <HAL_FLASHEx_Erase+0xd4>)
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	4a11      	ldr	r2, [pc, #68]	; (8004840 <HAL_FLASHEx_Erase+0xd4>)
 80047fc:	f023 0302 	bic.w	r3, r3, #2
 8004800:	6113      	str	r3, [r2, #16]
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_FLASHEx_Erase+0xa4>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	e00c      	b.n	800482a <HAL_FLASHEx_Erase+0xbe>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004816:	60bb      	str	r3, [r7, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	02da      	lsls	r2, r3, #11
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	4413      	add	r3, r2
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	429a      	cmp	r2, r3
 8004828:	d3dc      	bcc.n	80047e4 <HAL_FLASHEx_Erase+0x78>
 800482a:	4b04      	ldr	r3, [pc, #16]	; (800483c <HAL_FLASHEx_Erase+0xd0>)
 800482c:	2200      	movs	r2, #0
 800482e:	761a      	strb	r2, [r3, #24]
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20003e78 	.word	0x20003e78
 8004840:	40022000 	.word	0x40022000

08004844 <FLASH_MassErase>:
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <FLASH_MassErase+0x30>)
 800484e:	2200      	movs	r2, #0
 8004850:	61da      	str	r2, [r3, #28]
 8004852:	4b09      	ldr	r3, [pc, #36]	; (8004878 <FLASH_MassErase+0x34>)
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	4a08      	ldr	r2, [pc, #32]	; (8004878 <FLASH_MassErase+0x34>)
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	6113      	str	r3, [r2, #16]
 800485e:	4b06      	ldr	r3, [pc, #24]	; (8004878 <FLASH_MassErase+0x34>)
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	4a05      	ldr	r2, [pc, #20]	; (8004878 <FLASH_MassErase+0x34>)
 8004864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004868:	6113      	str	r3, [r2, #16]
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr
 8004874:	20003e78 	.word	0x20003e78
 8004878:	40022000 	.word	0x40022000

0800487c <FLASH_PageErase>:
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <FLASH_PageErase+0x38>)
 8004886:	2200      	movs	r2, #0
 8004888:	61da      	str	r2, [r3, #28]
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <FLASH_PageErase+0x3c>)
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <FLASH_PageErase+0x3c>)
 8004890:	f043 0302 	orr.w	r3, r3, #2
 8004894:	6113      	str	r3, [r2, #16]
 8004896:	4a08      	ldr	r2, [pc, #32]	; (80048b8 <FLASH_PageErase+0x3c>)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6153      	str	r3, [r2, #20]
 800489c:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <FLASH_PageErase+0x3c>)
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	4a05      	ldr	r2, [pc, #20]	; (80048b8 <FLASH_PageErase+0x3c>)
 80048a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048a6:	6113      	str	r3, [r2, #16]
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20003e78 	.word	0x20003e78
 80048b8:	40022000 	.word	0x40022000

080048bc <HAL_GPIO_Init>:
 80048bc:	b480      	push	{r7}
 80048be:	b08b      	sub	sp, #44	; 0x2c
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
 80048c6:	2300      	movs	r3, #0
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ca:	2300      	movs	r3, #0
 80048cc:	623b      	str	r3, [r7, #32]
 80048ce:	e179      	b.n	8004bc4 <HAL_GPIO_Init+0x308>
 80048d0:	2201      	movs	r2, #1
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69fa      	ldr	r2, [r7, #28]
 80048e0:	4013      	ands	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	f040 8168 	bne.w	8004bbe <HAL_GPIO_Init+0x302>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	4aa0      	ldr	r2, [pc, #640]	; (8004b74 <HAL_GPIO_Init+0x2b8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d05e      	beq.n	80049b6 <HAL_GPIO_Init+0xfa>
 80048f8:	4a9e      	ldr	r2, [pc, #632]	; (8004b74 <HAL_GPIO_Init+0x2b8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d875      	bhi.n	80049ea <HAL_GPIO_Init+0x12e>
 80048fe:	4a9e      	ldr	r2, [pc, #632]	; (8004b78 <HAL_GPIO_Init+0x2bc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d058      	beq.n	80049b6 <HAL_GPIO_Init+0xfa>
 8004904:	4a9c      	ldr	r2, [pc, #624]	; (8004b78 <HAL_GPIO_Init+0x2bc>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d86f      	bhi.n	80049ea <HAL_GPIO_Init+0x12e>
 800490a:	4a9c      	ldr	r2, [pc, #624]	; (8004b7c <HAL_GPIO_Init+0x2c0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d052      	beq.n	80049b6 <HAL_GPIO_Init+0xfa>
 8004910:	4a9a      	ldr	r2, [pc, #616]	; (8004b7c <HAL_GPIO_Init+0x2c0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d869      	bhi.n	80049ea <HAL_GPIO_Init+0x12e>
 8004916:	4a9a      	ldr	r2, [pc, #616]	; (8004b80 <HAL_GPIO_Init+0x2c4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d04c      	beq.n	80049b6 <HAL_GPIO_Init+0xfa>
 800491c:	4a98      	ldr	r2, [pc, #608]	; (8004b80 <HAL_GPIO_Init+0x2c4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d863      	bhi.n	80049ea <HAL_GPIO_Init+0x12e>
 8004922:	4a98      	ldr	r2, [pc, #608]	; (8004b84 <HAL_GPIO_Init+0x2c8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d046      	beq.n	80049b6 <HAL_GPIO_Init+0xfa>
 8004928:	4a96      	ldr	r2, [pc, #600]	; (8004b84 <HAL_GPIO_Init+0x2c8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d85d      	bhi.n	80049ea <HAL_GPIO_Init+0x12e>
 800492e:	2b12      	cmp	r3, #18
 8004930:	d82a      	bhi.n	8004988 <HAL_GPIO_Init+0xcc>
 8004932:	2b12      	cmp	r3, #18
 8004934:	d859      	bhi.n	80049ea <HAL_GPIO_Init+0x12e>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <HAL_GPIO_Init+0x80>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	080049b7 	.word	0x080049b7
 8004940:	08004991 	.word	0x08004991
 8004944:	080049a3 	.word	0x080049a3
 8004948:	080049e5 	.word	0x080049e5
 800494c:	080049eb 	.word	0x080049eb
 8004950:	080049eb 	.word	0x080049eb
 8004954:	080049eb 	.word	0x080049eb
 8004958:	080049eb 	.word	0x080049eb
 800495c:	080049eb 	.word	0x080049eb
 8004960:	080049eb 	.word	0x080049eb
 8004964:	080049eb 	.word	0x080049eb
 8004968:	080049eb 	.word	0x080049eb
 800496c:	080049eb 	.word	0x080049eb
 8004970:	080049eb 	.word	0x080049eb
 8004974:	080049eb 	.word	0x080049eb
 8004978:	080049eb 	.word	0x080049eb
 800497c:	080049eb 	.word	0x080049eb
 8004980:	08004999 	.word	0x08004999
 8004984:	080049ad 	.word	0x080049ad
 8004988:	4a7f      	ldr	r2, [pc, #508]	; (8004b88 <HAL_GPIO_Init+0x2cc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <HAL_GPIO_Init+0xfa>
 800498e:	e02c      	b.n	80049ea <HAL_GPIO_Init+0x12e>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	623b      	str	r3, [r7, #32]
 8004996:	e029      	b.n	80049ec <HAL_GPIO_Init+0x130>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	3304      	adds	r3, #4
 800499e:	623b      	str	r3, [r7, #32]
 80049a0:	e024      	b.n	80049ec <HAL_GPIO_Init+0x130>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	3308      	adds	r3, #8
 80049a8:	623b      	str	r3, [r7, #32]
 80049aa:	e01f      	b.n	80049ec <HAL_GPIO_Init+0x130>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	330c      	adds	r3, #12
 80049b2:	623b      	str	r3, [r7, #32]
 80049b4:	e01a      	b.n	80049ec <HAL_GPIO_Init+0x130>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <HAL_GPIO_Init+0x108>
 80049be:	2304      	movs	r3, #4
 80049c0:	623b      	str	r3, [r7, #32]
 80049c2:	e013      	b.n	80049ec <HAL_GPIO_Init+0x130>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d105      	bne.n	80049d8 <HAL_GPIO_Init+0x11c>
 80049cc:	2308      	movs	r3, #8
 80049ce:	623b      	str	r3, [r7, #32]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	611a      	str	r2, [r3, #16]
 80049d6:	e009      	b.n	80049ec <HAL_GPIO_Init+0x130>
 80049d8:	2308      	movs	r3, #8
 80049da:	623b      	str	r3, [r7, #32]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	615a      	str	r2, [r3, #20]
 80049e2:	e003      	b.n	80049ec <HAL_GPIO_Init+0x130>
 80049e4:	2300      	movs	r3, #0
 80049e6:	623b      	str	r3, [r7, #32]
 80049e8:	e000      	b.n	80049ec <HAL_GPIO_Init+0x130>
 80049ea:	bf00      	nop
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2bff      	cmp	r3, #255	; 0xff
 80049f0:	d801      	bhi.n	80049f6 <HAL_GPIO_Init+0x13a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	e001      	b.n	80049fa <HAL_GPIO_Init+0x13e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2bff      	cmp	r3, #255	; 0xff
 8004a00:	d802      	bhi.n	8004a08 <HAL_GPIO_Init+0x14c>
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	e002      	b.n	8004a0e <HAL_GPIO_Init+0x152>
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	3b08      	subs	r3, #8
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	210f      	movs	r1, #15
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	401a      	ands	r2, r3
 8004a20:	6a39      	ldr	r1, [r7, #32]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	fa01 f303 	lsl.w	r3, r1, r3
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 80c1 	beq.w	8004bbe <HAL_GPIO_Init+0x302>
 8004a3c:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <HAL_GPIO_Init+0x2d0>)
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	4a52      	ldr	r2, [pc, #328]	; (8004b8c <HAL_GPIO_Init+0x2d0>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	6193      	str	r3, [r2, #24]
 8004a48:	4b50      	ldr	r3, [pc, #320]	; (8004b8c <HAL_GPIO_Init+0x2d0>)
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4a4e      	ldr	r2, [pc, #312]	; (8004b90 <HAL_GPIO_Init+0x2d4>)
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	089b      	lsrs	r3, r3, #2
 8004a5a:	3302      	adds	r3, #2
 8004a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	220f      	movs	r2, #15
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4013      	ands	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a46      	ldr	r2, [pc, #280]	; (8004b94 <HAL_GPIO_Init+0x2d8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d01f      	beq.n	8004ac0 <HAL_GPIO_Init+0x204>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a45      	ldr	r2, [pc, #276]	; (8004b98 <HAL_GPIO_Init+0x2dc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d019      	beq.n	8004abc <HAL_GPIO_Init+0x200>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a44      	ldr	r2, [pc, #272]	; (8004b9c <HAL_GPIO_Init+0x2e0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d013      	beq.n	8004ab8 <HAL_GPIO_Init+0x1fc>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a43      	ldr	r2, [pc, #268]	; (8004ba0 <HAL_GPIO_Init+0x2e4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00d      	beq.n	8004ab4 <HAL_GPIO_Init+0x1f8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a42      	ldr	r2, [pc, #264]	; (8004ba4 <HAL_GPIO_Init+0x2e8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d007      	beq.n	8004ab0 <HAL_GPIO_Init+0x1f4>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a41      	ldr	r2, [pc, #260]	; (8004ba8 <HAL_GPIO_Init+0x2ec>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d101      	bne.n	8004aac <HAL_GPIO_Init+0x1f0>
 8004aa8:	2305      	movs	r3, #5
 8004aaa:	e00a      	b.n	8004ac2 <HAL_GPIO_Init+0x206>
 8004aac:	2306      	movs	r3, #6
 8004aae:	e008      	b.n	8004ac2 <HAL_GPIO_Init+0x206>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	e006      	b.n	8004ac2 <HAL_GPIO_Init+0x206>
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e004      	b.n	8004ac2 <HAL_GPIO_Init+0x206>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e002      	b.n	8004ac2 <HAL_GPIO_Init+0x206>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <HAL_GPIO_Init+0x206>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac4:	f002 0203 	and.w	r2, r2, #3
 8004ac8:	0092      	lsls	r2, r2, #2
 8004aca:	4093      	lsls	r3, r2
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	492f      	ldr	r1, [pc, #188]	; (8004b90 <HAL_GPIO_Init+0x2d4>)
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	3302      	adds	r3, #2
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d006      	beq.n	8004afa <HAL_GPIO_Init+0x23e>
 8004aec:	4b2f      	ldr	r3, [pc, #188]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	492e      	ldr	r1, [pc, #184]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	600b      	str	r3, [r1, #0]
 8004af8:	e006      	b.n	8004b08 <HAL_GPIO_Init+0x24c>
 8004afa:	4b2c      	ldr	r3, [pc, #176]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	43db      	mvns	r3, r3
 8004b02:	492a      	ldr	r1, [pc, #168]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	600b      	str	r3, [r1, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d006      	beq.n	8004b22 <HAL_GPIO_Init+0x266>
 8004b14:	4b25      	ldr	r3, [pc, #148]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	4924      	ldr	r1, [pc, #144]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	604b      	str	r3, [r1, #4]
 8004b20:	e006      	b.n	8004b30 <HAL_GPIO_Init+0x274>
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	4920      	ldr	r1, [pc, #128]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d006      	beq.n	8004b4a <HAL_GPIO_Init+0x28e>
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	491a      	ldr	r1, [pc, #104]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	608b      	str	r3, [r1, #8]
 8004b48:	e006      	b.n	8004b58 <HAL_GPIO_Init+0x29c>
 8004b4a:	4b18      	ldr	r3, [pc, #96]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	43db      	mvns	r3, r3
 8004b52:	4916      	ldr	r1, [pc, #88]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	608b      	str	r3, [r1, #8]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d025      	beq.n	8004bb0 <HAL_GPIO_Init+0x2f4>
 8004b64:	4b11      	ldr	r3, [pc, #68]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	4910      	ldr	r1, [pc, #64]	; (8004bac <HAL_GPIO_Init+0x2f0>)
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60cb      	str	r3, [r1, #12]
 8004b70:	e025      	b.n	8004bbe <HAL_GPIO_Init+0x302>
 8004b72:	bf00      	nop
 8004b74:	10320000 	.word	0x10320000
 8004b78:	10310000 	.word	0x10310000
 8004b7c:	10220000 	.word	0x10220000
 8004b80:	10210000 	.word	0x10210000
 8004b84:	10120000 	.word	0x10120000
 8004b88:	10110000 	.word	0x10110000
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	40010000 	.word	0x40010000
 8004b94:	40010800 	.word	0x40010800
 8004b98:	40010c00 	.word	0x40010c00
 8004b9c:	40011000 	.word	0x40011000
 8004ba0:	40011400 	.word	0x40011400
 8004ba4:	40011800 	.word	0x40011800
 8004ba8:	40011c00 	.word	0x40011c00
 8004bac:	40010400 	.word	0x40010400
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_GPIO_Init+0x324>)
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	4909      	ldr	r1, [pc, #36]	; (8004be0 <HAL_GPIO_Init+0x324>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	60cb      	str	r3, [r1, #12]
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	fa22 f303 	lsr.w	r3, r2, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f47f ae7e 	bne.w	80048d0 <HAL_GPIO_Init+0x14>
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop
 8004bd8:	372c      	adds	r7, #44	; 0x2c
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr
 8004be0:	40010400 	.word	0x40010400

08004be4 <HAL_GPIO_ReadPin>:
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	887b      	ldrh	r3, [r7, #2]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <HAL_GPIO_ReadPin+0x1e>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	73fb      	strb	r3, [r7, #15]
 8004c00:	e001      	b.n	8004c06 <HAL_GPIO_ReadPin+0x22>
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr

08004c12 <HAL_GPIO_WritePin>:
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	807b      	strh	r3, [r7, #2]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	707b      	strb	r3, [r7, #1]
 8004c22:	787b      	ldrb	r3, [r7, #1]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_GPIO_WritePin+0x1e>
 8004c28:	887a      	ldrh	r2, [r7, #2]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	611a      	str	r2, [r3, #16]
 8004c2e:	e003      	b.n	8004c38 <HAL_GPIO_WritePin+0x26>
 8004c30:	887b      	ldrh	r3, [r7, #2]
 8004c32:	041a      	lsls	r2, r3, #16
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	611a      	str	r2, [r3, #16]
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr
	...

08004c44 <HAL_GPIO_EXTI_IRQHandler>:
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	80fb      	strh	r3, [r7, #6]
 8004c4e:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d006      	beq.n	8004c68 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8004c5a:	4a05      	ldr	r2, [pc, #20]	; (8004c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	6153      	str	r3, [r2, #20]
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fc fa22 	bl	80010ac <HAL_GPIO_EXTI_Callback>
 8004c68:	bf00      	nop
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40010400 	.word	0x40010400

08004c74 <HAL_RCC_OscConfig>:
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_OscConfig+0x12>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e26c      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 8087 	beq.w	8004da2 <HAL_RCC_OscConfig+0x12e>
 8004c94:	4b92      	ldr	r3, [pc, #584]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d00c      	beq.n	8004cba <HAL_RCC_OscConfig+0x46>
 8004ca0:	4b8f      	ldr	r3, [pc, #572]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 030c 	and.w	r3, r3, #12
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d112      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x5e>
 8004cac:	4b8c      	ldr	r3, [pc, #560]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb8:	d10b      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x5e>
 8004cba:	4b89      	ldr	r3, [pc, #548]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d06c      	beq.n	8004da0 <HAL_RCC_OscConfig+0x12c>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d168      	bne.n	8004da0 <HAL_RCC_OscConfig+0x12c>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e246      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cda:	d106      	bne.n	8004cea <HAL_RCC_OscConfig+0x76>
 8004cdc:	4b80      	ldr	r3, [pc, #512]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a7f      	ldr	r2, [pc, #508]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	e02e      	b.n	8004d48 <HAL_RCC_OscConfig+0xd4>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCC_OscConfig+0x98>
 8004cf2:	4b7b      	ldr	r3, [pc, #492]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a7a      	ldr	r2, [pc, #488]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4b78      	ldr	r3, [pc, #480]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a77      	ldr	r2, [pc, #476]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e01d      	b.n	8004d48 <HAL_RCC_OscConfig+0xd4>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0xbc>
 8004d16:	4b72      	ldr	r3, [pc, #456]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a71      	ldr	r2, [pc, #452]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4b6f      	ldr	r3, [pc, #444]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a6e      	ldr	r2, [pc, #440]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e00b      	b.n	8004d48 <HAL_RCC_OscConfig+0xd4>
 8004d30:	4b6b      	ldr	r3, [pc, #428]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a6a      	ldr	r2, [pc, #424]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4b68      	ldr	r3, [pc, #416]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a67      	ldr	r2, [pc, #412]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d013      	beq.n	8004d78 <HAL_RCC_OscConfig+0x104>
 8004d50:	f7ff f994 	bl	800407c <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0xf6>
 8004d58:	f7ff f990 	bl	800407c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	; 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0xf6>
 8004d66:	2303      	movs	r3, #3
 8004d68:	e1fa      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8004d6a:	4b5d      	ldr	r3, [pc, #372]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0xe4>
 8004d76:	e014      	b.n	8004da2 <HAL_RCC_OscConfig+0x12e>
 8004d78:	f7ff f980 	bl	800407c <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x11e>
 8004d80:	f7ff f97c 	bl	800407c <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	; 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x11e>
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e1e6      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8004d92:	4b53      	ldr	r3, [pc, #332]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x10c>
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x12e>
 8004da0:	bf00      	nop
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d063      	beq.n	8004e76 <HAL_RCC_OscConfig+0x202>
 8004dae:	4b4c      	ldr	r3, [pc, #304]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00b      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x15e>
 8004dba:	4b49      	ldr	r3, [pc, #292]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d11c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x18c>
 8004dc6:	4b46      	ldr	r3, [pc, #280]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d116      	bne.n	8004e00 <HAL_RCC_OscConfig+0x18c>
 8004dd2:	4b43      	ldr	r3, [pc, #268]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_RCC_OscConfig+0x176>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d001      	beq.n	8004dea <HAL_RCC_OscConfig+0x176>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e1ba      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8004dea:	4b3d      	ldr	r3, [pc, #244]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	4939      	ldr	r1, [pc, #228]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	600b      	str	r3, [r1, #0]
 8004dfe:	e03a      	b.n	8004e76 <HAL_RCC_OscConfig+0x202>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d020      	beq.n	8004e4a <HAL_RCC_OscConfig+0x1d6>
 8004e08:	4b36      	ldr	r3, [pc, #216]	; (8004ee4 <HAL_RCC_OscConfig+0x270>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	f7ff f935 	bl	800407c <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x1b4>
 8004e16:	f7ff f931 	bl	800407c <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x1b4>
 8004e24:	2303      	movs	r3, #3
 8004e26:	e19b      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8004e28:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f0      	beq.n	8004e16 <HAL_RCC_OscConfig+0x1a2>
 8004e34:	4b2a      	ldr	r3, [pc, #168]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4927      	ldr	r1, [pc, #156]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	600b      	str	r3, [r1, #0]
 8004e48:	e015      	b.n	8004e76 <HAL_RCC_OscConfig+0x202>
 8004e4a:	4b26      	ldr	r3, [pc, #152]	; (8004ee4 <HAL_RCC_OscConfig+0x270>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f7ff f914 	bl	800407c <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x1f6>
 8004e58:	f7ff f910 	bl	800407c <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x1f6>
 8004e66:	2303      	movs	r3, #3
 8004e68:	e17a      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8004e6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x1e4>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d03a      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x284>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d019      	beq.n	8004ebe <HAL_RCC_OscConfig+0x24a>
 8004e8a:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <HAL_RCC_OscConfig+0x274>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f7ff f8f4 	bl	800407c <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x236>
 8004e98:	f7ff f8f0 	bl	800407c <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x236>
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e15a      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <HAL_RCC_OscConfig+0x26c>)
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x224>
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	f000 faa6 	bl	8005408 <RCC_Delay>
 8004ebc:	e01c      	b.n	8004ef8 <HAL_RCC_OscConfig+0x284>
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <HAL_RCC_OscConfig+0x274>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f7ff f8da 	bl	800407c <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]
 8004eca:	e00f      	b.n	8004eec <HAL_RCC_OscConfig+0x278>
 8004ecc:	f7ff f8d6 	bl	800407c <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d908      	bls.n	8004eec <HAL_RCC_OscConfig+0x278>
 8004eda:	2303      	movs	r3, #3
 8004edc:	e140      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8004ede:	bf00      	nop
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	42420000 	.word	0x42420000
 8004ee8:	42420480 	.word	0x42420480
 8004eec:	4b9e      	ldr	r3, [pc, #632]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e9      	bne.n	8004ecc <HAL_RCC_OscConfig+0x258>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80a6 	beq.w	8005052 <HAL_RCC_OscConfig+0x3de>
 8004f06:	2300      	movs	r3, #0
 8004f08:	75fb      	strb	r3, [r7, #23]
 8004f0a:	4b97      	ldr	r3, [pc, #604]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10d      	bne.n	8004f32 <HAL_RCC_OscConfig+0x2be>
 8004f16:	4b94      	ldr	r3, [pc, #592]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	4a93      	ldr	r2, [pc, #588]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f20:	61d3      	str	r3, [r2, #28]
 8004f22:	4b91      	ldr	r3, [pc, #580]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2a:	60bb      	str	r3, [r7, #8]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2301      	movs	r3, #1
 8004f30:	75fb      	strb	r3, [r7, #23]
 8004f32:	4b8e      	ldr	r3, [pc, #568]	; (800516c <HAL_RCC_OscConfig+0x4f8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d118      	bne.n	8004f70 <HAL_RCC_OscConfig+0x2fc>
 8004f3e:	4b8b      	ldr	r3, [pc, #556]	; (800516c <HAL_RCC_OscConfig+0x4f8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a8a      	ldr	r2, [pc, #552]	; (800516c <HAL_RCC_OscConfig+0x4f8>)
 8004f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	f7ff f897 	bl	800407c <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x2f0>
 8004f52:	f7ff f893 	bl	800407c <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b64      	cmp	r3, #100	; 0x64
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x2f0>
 8004f60:	2303      	movs	r3, #3
 8004f62:	e0fd      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8004f64:	4b81      	ldr	r3, [pc, #516]	; (800516c <HAL_RCC_OscConfig+0x4f8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f0      	beq.n	8004f52 <HAL_RCC_OscConfig+0x2de>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d106      	bne.n	8004f86 <HAL_RCC_OscConfig+0x312>
 8004f78:	4b7b      	ldr	r3, [pc, #492]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	4a7a      	ldr	r2, [pc, #488]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	6213      	str	r3, [r2, #32]
 8004f84:	e02d      	b.n	8004fe2 <HAL_RCC_OscConfig+0x36e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x334>
 8004f8e:	4b76      	ldr	r3, [pc, #472]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	4a75      	ldr	r2, [pc, #468]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004f94:	f023 0301 	bic.w	r3, r3, #1
 8004f98:	6213      	str	r3, [r2, #32]
 8004f9a:	4b73      	ldr	r3, [pc, #460]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	4a72      	ldr	r2, [pc, #456]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	6213      	str	r3, [r2, #32]
 8004fa6:	e01c      	b.n	8004fe2 <HAL_RCC_OscConfig+0x36e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b05      	cmp	r3, #5
 8004fae:	d10c      	bne.n	8004fca <HAL_RCC_OscConfig+0x356>
 8004fb0:	4b6d      	ldr	r3, [pc, #436]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	4a6c      	ldr	r2, [pc, #432]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004fb6:	f043 0304 	orr.w	r3, r3, #4
 8004fba:	6213      	str	r3, [r2, #32]
 8004fbc:	4b6a      	ldr	r3, [pc, #424]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	4a69      	ldr	r2, [pc, #420]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6213      	str	r3, [r2, #32]
 8004fc8:	e00b      	b.n	8004fe2 <HAL_RCC_OscConfig+0x36e>
 8004fca:	4b67      	ldr	r3, [pc, #412]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	4a66      	ldr	r2, [pc, #408]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004fd0:	f023 0301 	bic.w	r3, r3, #1
 8004fd4:	6213      	str	r3, [r2, #32]
 8004fd6:	4b64      	ldr	r3, [pc, #400]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	4a63      	ldr	r2, [pc, #396]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8004fdc:	f023 0304 	bic.w	r3, r3, #4
 8004fe0:	6213      	str	r3, [r2, #32]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d015      	beq.n	8005016 <HAL_RCC_OscConfig+0x3a2>
 8004fea:	f7ff f847 	bl	800407c <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]
 8004ff0:	e00a      	b.n	8005008 <HAL_RCC_OscConfig+0x394>
 8004ff2:	f7ff f843 	bl	800407c <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005000:	4293      	cmp	r3, r2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x394>
 8005004:	2303      	movs	r3, #3
 8005006:	e0ab      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8005008:	4b57      	ldr	r3, [pc, #348]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0ee      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x37e>
 8005014:	e014      	b.n	8005040 <HAL_RCC_OscConfig+0x3cc>
 8005016:	f7ff f831 	bl	800407c <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]
 800501c:	e00a      	b.n	8005034 <HAL_RCC_OscConfig+0x3c0>
 800501e:	f7ff f82d 	bl	800407c <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	f241 3288 	movw	r2, #5000	; 0x1388
 800502c:	4293      	cmp	r3, r2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x3c0>
 8005030:	2303      	movs	r3, #3
 8005032:	e095      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8005034:	4b4c      	ldr	r3, [pc, #304]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1ee      	bne.n	800501e <HAL_RCC_OscConfig+0x3aa>
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d105      	bne.n	8005052 <HAL_RCC_OscConfig+0x3de>
 8005046:	4b48      	ldr	r3, [pc, #288]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	4a47      	ldr	r2, [pc, #284]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 800504c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005050:	61d3      	str	r3, [r2, #28]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 8081 	beq.w	800515e <HAL_RCC_OscConfig+0x4ea>
 800505c:	4b42      	ldr	r3, [pc, #264]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 030c 	and.w	r3, r3, #12
 8005064:	2b08      	cmp	r3, #8
 8005066:	d061      	beq.n	800512c <HAL_RCC_OscConfig+0x4b8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d146      	bne.n	80050fe <HAL_RCC_OscConfig+0x48a>
 8005070:	4b3f      	ldr	r3, [pc, #252]	; (8005170 <HAL_RCC_OscConfig+0x4fc>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	f7ff f801 	bl	800407c <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x41c>
 800507e:	f7fe fffd 	bl	800407c <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x41c>
 800508c:	2303      	movs	r3, #3
 800508e:	e067      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8005090:	4b35      	ldr	r3, [pc, #212]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f0      	bne.n	800507e <HAL_RCC_OscConfig+0x40a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a4:	d108      	bne.n	80050b8 <HAL_RCC_OscConfig+0x444>
 80050a6:	4b30      	ldr	r3, [pc, #192]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	492d      	ldr	r1, [pc, #180]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	604b      	str	r3, [r1, #4]
 80050b8:	4b2b      	ldr	r3, [pc, #172]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a19      	ldr	r1, [r3, #32]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	430b      	orrs	r3, r1
 80050ca:	4927      	ldr	r1, [pc, #156]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	604b      	str	r3, [r1, #4]
 80050d0:	4b27      	ldr	r3, [pc, #156]	; (8005170 <HAL_RCC_OscConfig+0x4fc>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	f7fe ffd1 	bl	800407c <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x47c>
 80050de:	f7fe ffcd 	bl	800407c <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x47c>
 80050ec:	2303      	movs	r3, #3
 80050ee:	e037      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 80050f0:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0f0      	beq.n	80050de <HAL_RCC_OscConfig+0x46a>
 80050fc:	e02f      	b.n	800515e <HAL_RCC_OscConfig+0x4ea>
 80050fe:	4b1c      	ldr	r3, [pc, #112]	; (8005170 <HAL_RCC_OscConfig+0x4fc>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	f7fe ffba 	bl	800407c <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x4aa>
 800510c:	f7fe ffb6 	bl	800407c <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x4aa>
 800511a:	2303      	movs	r3, #3
 800511c:	e020      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 800511e:	4b12      	ldr	r3, [pc, #72]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x498>
 800512a:	e018      	b.n	800515e <HAL_RCC_OscConfig+0x4ea>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_RCC_OscConfig+0x4c4>
 8005134:	2301      	movs	r3, #1
 8005136:	e013      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_RCC_OscConfig+0x4f4>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	429a      	cmp	r2, r3
 800514a:	d106      	bne.n	800515a <HAL_RCC_OscConfig+0x4e6>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	429a      	cmp	r2, r3
 8005158:	d001      	beq.n	800515e <HAL_RCC_OscConfig+0x4ea>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <HAL_RCC_OscConfig+0x4ec>
 800515e:	2300      	movs	r3, #0
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40021000 	.word	0x40021000
 800516c:	40007000 	.word	0x40007000
 8005170:	42420060 	.word	0x42420060

08005174 <HAL_RCC_ClockConfig>:
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_RCC_ClockConfig+0x14>
 8005184:	2301      	movs	r3, #1
 8005186:	e0d0      	b.n	800532a <HAL_RCC_ClockConfig+0x1b6>
 8005188:	4b6a      	ldr	r3, [pc, #424]	; (8005334 <HAL_RCC_ClockConfig+0x1c0>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d910      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x44>
 8005196:	4b67      	ldr	r3, [pc, #412]	; (8005334 <HAL_RCC_ClockConfig+0x1c0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f023 0207 	bic.w	r2, r3, #7
 800519e:	4965      	ldr	r1, [pc, #404]	; (8005334 <HAL_RCC_ClockConfig+0x1c0>)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	600b      	str	r3, [r1, #0]
 80051a6:	4b63      	ldr	r3, [pc, #396]	; (8005334 <HAL_RCC_ClockConfig+0x1c0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x44>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0b8      	b.n	800532a <HAL_RCC_ClockConfig+0x1b6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_ClockConfig+0x92>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x68>
 80051d0:	4b59      	ldr	r3, [pc, #356]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4a58      	ldr	r2, [pc, #352]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 80051d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051da:	6053      	str	r3, [r2, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x80>
 80051e8:	4b53      	ldr	r3, [pc, #332]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	4a52      	ldr	r2, [pc, #328]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 80051ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80051f2:	6053      	str	r3, [r2, #4]
 80051f4:	4b50      	ldr	r3, [pc, #320]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	494d      	ldr	r1, [pc, #308]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 8005202:	4313      	orrs	r3, r2
 8005204:	604b      	str	r3, [r1, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d040      	beq.n	8005294 <HAL_RCC_ClockConfig+0x120>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xb6>
 800521a:	4b47      	ldr	r3, [pc, #284]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d115      	bne.n	8005252 <HAL_RCC_ClockConfig+0xde>
 8005226:	2301      	movs	r3, #1
 8005228:	e07f      	b.n	800532a <HAL_RCC_ClockConfig+0x1b6>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d107      	bne.n	8005242 <HAL_RCC_ClockConfig+0xce>
 8005232:	4b41      	ldr	r3, [pc, #260]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <HAL_RCC_ClockConfig+0xde>
 800523e:	2301      	movs	r3, #1
 8005240:	e073      	b.n	800532a <HAL_RCC_ClockConfig+0x1b6>
 8005242:	4b3d      	ldr	r3, [pc, #244]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_RCC_ClockConfig+0xde>
 800524e:	2301      	movs	r3, #1
 8005250:	e06b      	b.n	800532a <HAL_RCC_ClockConfig+0x1b6>
 8005252:	4b39      	ldr	r3, [pc, #228]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f023 0203 	bic.w	r2, r3, #3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	4936      	ldr	r1, [pc, #216]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 8005260:	4313      	orrs	r3, r2
 8005262:	604b      	str	r3, [r1, #4]
 8005264:	f7fe ff0a 	bl	800407c <HAL_GetTick>
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	e00a      	b.n	8005282 <HAL_RCC_ClockConfig+0x10e>
 800526c:	f7fe ff06 	bl	800407c <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	; 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_ClockConfig+0x10e>
 800527e:	2303      	movs	r3, #3
 8005280:	e053      	b.n	800532a <HAL_RCC_ClockConfig+0x1b6>
 8005282:	4b2d      	ldr	r3, [pc, #180]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f003 020c 	and.w	r2, r3, #12
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	429a      	cmp	r2, r3
 8005292:	d1eb      	bne.n	800526c <HAL_RCC_ClockConfig+0xf8>
 8005294:	4b27      	ldr	r3, [pc, #156]	; (8005334 <HAL_RCC_ClockConfig+0x1c0>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d210      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x150>
 80052a2:	4b24      	ldr	r3, [pc, #144]	; (8005334 <HAL_RCC_ClockConfig+0x1c0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f023 0207 	bic.w	r2, r3, #7
 80052aa:	4922      	ldr	r1, [pc, #136]	; (8005334 <HAL_RCC_ClockConfig+0x1c0>)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	600b      	str	r3, [r1, #0]
 80052b2:	4b20      	ldr	r3, [pc, #128]	; (8005334 <HAL_RCC_ClockConfig+0x1c0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x150>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e032      	b.n	800532a <HAL_RCC_ClockConfig+0x1b6>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x16e>
 80052d0:	4b19      	ldr	r3, [pc, #100]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4916      	ldr	r1, [pc, #88]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	604b      	str	r3, [r1, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x18e>
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490e      	ldr	r1, [pc, #56]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	604b      	str	r3, [r1, #4]
 8005302:	f000 f821 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCC_ClockConfig+0x1c4>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	490a      	ldr	r1, [pc, #40]	; (800533c <HAL_RCC_ClockConfig+0x1c8>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	4a09      	ldr	r2, [pc, #36]	; (8005340 <HAL_RCC_ClockConfig+0x1cc>)
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <HAL_RCC_ClockConfig+0x1d0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fe fe68 	bl	8003ff8 <HAL_InitTick>
 8005328:	2300      	movs	r3, #0
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40022000 	.word	0x40022000
 8005338:	40021000 	.word	0x40021000
 800533c:	080099e4 	.word	0x080099e4
 8005340:	20000000 	.word	0x20000000
 8005344:	20000004 	.word	0x20000004

08005348 <HAL_RCC_GetSysClockFreq>:
 8005348:	b490      	push	{r4, r7}
 800534a:	b08a      	sub	sp, #40	; 0x28
 800534c:	af00      	add	r7, sp, #0
 800534e:	4b2a      	ldr	r3, [pc, #168]	; (80053f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005350:	1d3c      	adds	r4, r7, #4
 8005352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005358:	f240 2301 	movw	r3, #513	; 0x201
 800535c:	803b      	strh	r3, [r7, #0]
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	2300      	movs	r3, #0
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	2300      	movs	r3, #0
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	2300      	movs	r3, #0
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	4b22      	ldr	r3, [pc, #136]	; (80053fc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	2b04      	cmp	r3, #4
 8005380:	d002      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x40>
 8005382:	2b08      	cmp	r3, #8
 8005384:	d003      	beq.n	800538e <HAL_RCC_GetSysClockFreq+0x46>
 8005386:	e02d      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0x9c>
 8005388:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <HAL_RCC_GetSysClockFreq+0xb8>)
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	e02d      	b.n	80053ea <HAL_RCC_GetSysClockFreq+0xa2>
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	0c9b      	lsrs	r3, r3, #18
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800539a:	4413      	add	r3, r2
 800539c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d013      	beq.n	80053d4 <HAL_RCC_GetSysClockFreq+0x8c>
 80053ac:	4b13      	ldr	r3, [pc, #76]	; (80053fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	0c5b      	lsrs	r3, r3, #17
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80053ba:	4413      	add	r3, r2
 80053bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	4a0e      	ldr	r2, [pc, #56]	; (8005400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053c6:	fb02 f203 	mul.w	r2, r2, r3
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
 80053d2:	e004      	b.n	80053de <HAL_RCC_GetSysClockFreq+0x96>
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4a0b      	ldr	r2, [pc, #44]	; (8005404 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053d8:	fb02 f303 	mul.w	r3, r2, r3
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	623b      	str	r3, [r7, #32]
 80053e2:	e002      	b.n	80053ea <HAL_RCC_GetSysClockFreq+0xa2>
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053e6:	623b      	str	r3, [r7, #32]
 80053e8:	bf00      	nop
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	4618      	mov	r0, r3
 80053ee:	3728      	adds	r7, #40	; 0x28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc90      	pop	{r4, r7}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	08009980 	.word	0x08009980
 80053fc:	40021000 	.word	0x40021000
 8005400:	007a1200 	.word	0x007a1200
 8005404:	003d0900 	.word	0x003d0900

08005408 <RCC_Delay>:
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <RCC_Delay+0x34>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a0a      	ldr	r2, [pc, #40]	; (8005440 <RCC_Delay+0x38>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	0a5b      	lsrs	r3, r3, #9
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	bf00      	nop
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1e5a      	subs	r2, r3, #1
 800542a:	60fa      	str	r2, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f9      	bne.n	8005424 <RCC_Delay+0x1c>
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr
 800543c:	20000000 	.word	0x20000000
 8005440:	10624dd3 	.word	0x10624dd3

08005444 <HAL_SPI_Init>:
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_SPI_Init+0x12>
 8005452:	2301      	movs	r3, #1
 8005454:	e076      	b.n	8005544 <HAL_SPI_Init+0x100>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	2b00      	cmp	r3, #0
 800545c:	d108      	bne.n	8005470 <HAL_SPI_Init+0x2c>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005466:	d009      	beq.n	800547c <HAL_SPI_Init+0x38>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	61da      	str	r2, [r3, #28]
 800546e:	e005      	b.n	800547c <HAL_SPI_Init+0x38>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	611a      	str	r2, [r3, #16]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	615a      	str	r2, [r3, #20]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	629a      	str	r2, [r3, #40]	; 0x28
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <HAL_SPI_Init+0x58>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fe fc68 	bl	8003d6c <HAL_SPI_MspInit>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005500:	ea42 0103 	orr.w	r1, r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005508:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	0c1a      	lsrs	r2, r3, #16
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f002 0204 	and.w	r2, r2, #4
 8005522:	605a      	str	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69da      	ldr	r2, [r3, #28]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005532:	61da      	str	r2, [r3, #28]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	655a      	str	r2, [r3, #84]	; 0x54
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005542:	2300      	movs	r3, #0
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_SPI_Transmit>:
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	80fb      	strh	r3, [r7, #6]
 800555c:	2300      	movs	r3, #0
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_SPI_Transmit+0x22>
 800556a:	2302      	movs	r3, #2
 800556c:	e126      	b.n	80057bc <HAL_SPI_Transmit+0x270>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005576:	f7fe fd81 	bl	800407c <HAL_GetTick>
 800557a:	61b8      	str	r0, [r7, #24]
 800557c:	88fb      	ldrh	r3, [r7, #6]
 800557e:	82fb      	strh	r3, [r7, #22]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d002      	beq.n	8005592 <HAL_SPI_Transmit+0x46>
 800558c:	2302      	movs	r3, #2
 800558e:	77fb      	strb	r3, [r7, #31]
 8005590:	e10b      	b.n	80057aa <HAL_SPI_Transmit+0x25e>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_SPI_Transmit+0x52>
 8005598:	88fb      	ldrh	r3, [r7, #6]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <HAL_SPI_Transmit+0x58>
 800559e:	2301      	movs	r3, #1
 80055a0:	77fb      	strb	r3, [r7, #31]
 80055a2:	e102      	b.n	80057aa <HAL_SPI_Transmit+0x25e>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2203      	movs	r2, #3
 80055a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	631a      	str	r2, [r3, #48]	; 0x30
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	88fa      	ldrh	r2, [r7, #6]
 80055bc:	869a      	strh	r2, [r3, #52]	; 0x34
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	88fa      	ldrh	r2, [r7, #6]
 80055c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	639a      	str	r2, [r3, #56]	; 0x38
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	879a      	strh	r2, [r3, #60]	; 0x3c
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	645a      	str	r2, [r3, #68]	; 0x44
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ea:	d10f      	bne.n	800560c <HAL_SPI_Transmit+0xc0>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d007      	beq.n	800562a <HAL_SPI_Transmit+0xde>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005632:	d14b      	bne.n	80056cc <HAL_SPI_Transmit+0x180>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <HAL_SPI_Transmit+0xf6>
 800563c:	8afb      	ldrh	r3, [r7, #22]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d13e      	bne.n	80056c0 <HAL_SPI_Transmit+0x174>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	881a      	ldrh	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60da      	str	r2, [r3, #12]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	1c9a      	adds	r2, r3, #2
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	86da      	strh	r2, [r3, #54]	; 0x36
 8005666:	e02b      	b.n	80056c0 <HAL_SPI_Transmit+0x174>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b02      	cmp	r3, #2
 8005674:	d112      	bne.n	800569c <HAL_SPI_Transmit+0x150>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	881a      	ldrh	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60da      	str	r2, [r3, #12]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	1c9a      	adds	r2, r3, #2
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	631a      	str	r2, [r3, #48]	; 0x30
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	86da      	strh	r2, [r3, #54]	; 0x36
 800569a:	e011      	b.n	80056c0 <HAL_SPI_Transmit+0x174>
 800569c:	f7fe fcee 	bl	800407c <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d803      	bhi.n	80056b4 <HAL_SPI_Transmit+0x168>
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d102      	bne.n	80056ba <HAL_SPI_Transmit+0x16e>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d102      	bne.n	80056c0 <HAL_SPI_Transmit+0x174>
 80056ba:	2303      	movs	r3, #3
 80056bc:	77fb      	strb	r3, [r7, #31]
 80056be:	e074      	b.n	80057aa <HAL_SPI_Transmit+0x25e>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1ce      	bne.n	8005668 <HAL_SPI_Transmit+0x11c>
 80056ca:	e04c      	b.n	8005766 <HAL_SPI_Transmit+0x21a>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <HAL_SPI_Transmit+0x18e>
 80056d4:	8afb      	ldrh	r3, [r7, #22]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d140      	bne.n	800575c <HAL_SPI_Transmit+0x210>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	330c      	adds	r3, #12
 80056e4:	7812      	ldrb	r2, [r2, #0]
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	631a      	str	r2, [r3, #48]	; 0x30
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005700:	e02c      	b.n	800575c <HAL_SPI_Transmit+0x210>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b02      	cmp	r3, #2
 800570e:	d113      	bne.n	8005738 <HAL_SPI_Transmit+0x1ec>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	7812      	ldrb	r2, [r2, #0]
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	631a      	str	r2, [r3, #48]	; 0x30
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	86da      	strh	r2, [r3, #54]	; 0x36
 8005736:	e011      	b.n	800575c <HAL_SPI_Transmit+0x210>
 8005738:	f7fe fca0 	bl	800407c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d803      	bhi.n	8005750 <HAL_SPI_Transmit+0x204>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574e:	d102      	bne.n	8005756 <HAL_SPI_Transmit+0x20a>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <HAL_SPI_Transmit+0x210>
 8005756:	2303      	movs	r3, #3
 8005758:	77fb      	strb	r3, [r7, #31]
 800575a:	e026      	b.n	80057aa <HAL_SPI_Transmit+0x25e>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1cd      	bne.n	8005702 <HAL_SPI_Transmit+0x1b6>
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 fcbc 	bl	80060e8 <SPI_EndRxTxTransaction>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_SPI_Transmit+0x230>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	655a      	str	r2, [r3, #84]	; 0x54
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <HAL_SPI_Transmit+0x24e>
 8005784:	2300      	movs	r3, #0
 8005786:	613b      	str	r3, [r7, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	613b      	str	r3, [r7, #16]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_SPI_Transmit+0x25c>
 80057a2:	2301      	movs	r3, #1
 80057a4:	77fb      	strb	r3, [r7, #31]
 80057a6:	e000      	b.n	80057aa <HAL_SPI_Transmit+0x25e>
 80057a8:	bf00      	nop
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80057ba:	7ffb      	ldrb	r3, [r7, #31]
 80057bc:	4618      	mov	r0, r3
 80057be:	3720      	adds	r7, #32
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_SPI_Receive>:
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	80fb      	strh	r3, [r7, #6]
 80057d4:	2300      	movs	r3, #0
 80057d6:	75fb      	strb	r3, [r7, #23]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e0:	d112      	bne.n	8005808 <HAL_SPI_Receive+0x44>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10e      	bne.n	8005808 <HAL_SPI_Receive+0x44>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2204      	movs	r2, #4
 80057ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80057f2:	88fa      	ldrh	r2, [r7, #6]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 f8f1 	bl	80059e6 <HAL_SPI_TransmitReceive>
 8005804:	4603      	mov	r3, r0
 8005806:	e0ea      	b.n	80059de <HAL_SPI_Receive+0x21a>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_SPI_Receive+0x52>
 8005812:	2302      	movs	r3, #2
 8005814:	e0e3      	b.n	80059de <HAL_SPI_Receive+0x21a>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800581e:	f7fe fc2d 	bl	800407c <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	d002      	beq.n	8005836 <HAL_SPI_Receive+0x72>
 8005830:	2302      	movs	r3, #2
 8005832:	75fb      	strb	r3, [r7, #23]
 8005834:	e0ca      	b.n	80059cc <HAL_SPI_Receive+0x208>
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <HAL_SPI_Receive+0x7e>
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d102      	bne.n	8005848 <HAL_SPI_Receive+0x84>
 8005842:	2301      	movs	r3, #1
 8005844:	75fb      	strb	r3, [r7, #23]
 8005846:	e0c1      	b.n	80059cc <HAL_SPI_Receive+0x208>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2204      	movs	r2, #4
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	655a      	str	r2, [r3, #84]	; 0x54
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	639a      	str	r2, [r3, #56]	; 0x38
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	88fa      	ldrh	r2, [r7, #6]
 8005860:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	88fa      	ldrh	r2, [r7, #6]
 8005866:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	631a      	str	r2, [r3, #48]	; 0x30
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	869a      	strh	r2, [r3, #52]	; 0x34
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	86da      	strh	r2, [r3, #54]	; 0x36
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	641a      	str	r2, [r3, #64]	; 0x40
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	645a      	str	r2, [r3, #68]	; 0x44
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800588e:	d10f      	bne.n	80058b0 <HAL_SPI_Receive+0xec>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ba:	2b40      	cmp	r3, #64	; 0x40
 80058bc:	d007      	beq.n	80058ce <HAL_SPI_Receive+0x10a>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d162      	bne.n	800599c <HAL_SPI_Receive+0x1d8>
 80058d6:	e02e      	b.n	8005936 <HAL_SPI_Receive+0x172>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d115      	bne.n	8005912 <HAL_SPI_Receive+0x14e>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f103 020c 	add.w	r2, r3, #12
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	7812      	ldrb	r2, [r2, #0]
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	639a      	str	r2, [r3, #56]	; 0x38
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005910:	e011      	b.n	8005936 <HAL_SPI_Receive+0x172>
 8005912:	f7fe fbb3 	bl	800407c <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d803      	bhi.n	800592a <HAL_SPI_Receive+0x166>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d102      	bne.n	8005930 <HAL_SPI_Receive+0x16c>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d102      	bne.n	8005936 <HAL_SPI_Receive+0x172>
 8005930:	2303      	movs	r3, #3
 8005932:	75fb      	strb	r3, [r7, #23]
 8005934:	e04a      	b.n	80059cc <HAL_SPI_Receive+0x208>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1cb      	bne.n	80058d8 <HAL_SPI_Receive+0x114>
 8005940:	e031      	b.n	80059a6 <HAL_SPI_Receive+0x1e2>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b01      	cmp	r3, #1
 800594e:	d113      	bne.n	8005978 <HAL_SPI_Receive+0x1b4>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	b292      	uxth	r2, r2
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	1c9a      	adds	r2, r3, #2
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005976:	e011      	b.n	800599c <HAL_SPI_Receive+0x1d8>
 8005978:	f7fe fb80 	bl	800407c <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d803      	bhi.n	8005990 <HAL_SPI_Receive+0x1cc>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598e:	d102      	bne.n	8005996 <HAL_SPI_Receive+0x1d2>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d102      	bne.n	800599c <HAL_SPI_Receive+0x1d8>
 8005996:	2303      	movs	r3, #3
 8005998:	75fb      	strb	r3, [r7, #23]
 800599a:	e017      	b.n	80059cc <HAL_SPI_Receive+0x208>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1cd      	bne.n	8005942 <HAL_SPI_Receive+0x17e>
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fb4a 	bl	8006044 <SPI_EndRxTransaction>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_SPI_Receive+0x1f8>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2220      	movs	r2, #32
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_SPI_Receive+0x206>
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
 80059c8:	e000      	b.n	80059cc <HAL_SPI_Receive+0x208>
 80059ca:	bf00      	nop
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_SPI_TransmitReceive>:
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b08c      	sub	sp, #48	; 0x30
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	807b      	strh	r3, [r7, #2]
 80059f4:	2301      	movs	r3, #1
 80059f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f8:	2300      	movs	r3, #0
 80059fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x26>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e18a      	b.n	8005d22 <HAL_SPI_TransmitReceive+0x33c>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005a14:	f7fe fb32 	bl	800407c <HAL_GetTick>
 8005a18:	6278      	str	r0, [r7, #36]	; 0x24
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	61fb      	str	r3, [r7, #28]
 8005a2a:	887b      	ldrh	r3, [r7, #2]
 8005a2c:	837b      	strh	r3, [r7, #26]
 8005a2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d00f      	beq.n	8005a56 <HAL_SPI_TransmitReceive+0x70>
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a3c:	d107      	bne.n	8005a4e <HAL_SPI_TransmitReceive+0x68>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <HAL_SPI_TransmitReceive+0x68>
 8005a46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d003      	beq.n	8005a56 <HAL_SPI_TransmitReceive+0x70>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a54:	e15b      	b.n	8005d0e <HAL_SPI_TransmitReceive+0x328>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_SPI_TransmitReceive+0x82>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <HAL_SPI_TransmitReceive+0x82>
 8005a62:	887b      	ldrh	r3, [r7, #2]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d103      	bne.n	8005a70 <HAL_SPI_TransmitReceive+0x8a>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a6e:	e14e      	b.n	8005d0e <HAL_SPI_TransmitReceive+0x328>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d003      	beq.n	8005a84 <HAL_SPI_TransmitReceive+0x9e>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2205      	movs	r2, #5
 8005a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	655a      	str	r2, [r3, #84]	; 0x54
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	639a      	str	r2, [r3, #56]	; 0x38
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	887a      	ldrh	r2, [r7, #2]
 8005a94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	887a      	ldrh	r2, [r7, #2]
 8005a9a:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	887a      	ldrh	r2, [r7, #2]
 8005aa6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	887a      	ldrh	r2, [r7, #2]
 8005aac:	869a      	strh	r2, [r3, #52]	; 0x34
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	641a      	str	r2, [r3, #64]	; 0x40
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	645a      	str	r2, [r3, #68]	; 0x44
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d007      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0xf2>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae0:	d178      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x1ee>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_SPI_TransmitReceive+0x10a>
 8005aea:	8b7b      	ldrh	r3, [r7, #26]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d166      	bne.n	8005bbe <HAL_SPI_TransmitReceive+0x1d8>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af4:	881a      	ldrh	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60da      	str	r2, [r3, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b00:	1c9a      	adds	r2, r3, #2
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	631a      	str	r2, [r3, #48]	; 0x30
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b14:	e053      	b.n	8005bbe <HAL_SPI_TransmitReceive+0x1d8>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d11b      	bne.n	8005b5c <HAL_SPI_TransmitReceive+0x176>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d016      	beq.n	8005b5c <HAL_SPI_TransmitReceive+0x176>
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d113      	bne.n	8005b5c <HAL_SPI_TransmitReceive+0x176>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	881a      	ldrh	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60da      	str	r2, [r3, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b44:	1c9a      	adds	r2, r3, #2
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	631a      	str	r2, [r3, #48]	; 0x30
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b58:	2300      	movs	r3, #0
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d119      	bne.n	8005b9e <HAL_SPI_TransmitReceive+0x1b8>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d014      	beq.n	8005b9e <HAL_SPI_TransmitReceive+0x1b8>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	b292      	uxth	r2, r2
 8005b80:	801a      	strh	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	1c9a      	adds	r2, r3, #2
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	639a      	str	r2, [r3, #56]	; 0x38
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b9e:	f7fe fa6d 	bl	800407c <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d807      	bhi.n	8005bbe <HAL_SPI_TransmitReceive+0x1d8>
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb4:	d003      	beq.n	8005bbe <HAL_SPI_TransmitReceive+0x1d8>
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bbc:	e0a7      	b.n	8005d0e <HAL_SPI_TransmitReceive+0x328>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1a6      	bne.n	8005b16 <HAL_SPI_TransmitReceive+0x130>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1a1      	bne.n	8005b16 <HAL_SPI_TransmitReceive+0x130>
 8005bd2:	e07c      	b.n	8005cce <HAL_SPI_TransmitReceive+0x2e8>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_SPI_TransmitReceive+0x1fc>
 8005bdc:	8b7b      	ldrh	r3, [r7, #26]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d16b      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x2d4>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	330c      	adds	r3, #12
 8005bec:	7812      	ldrb	r2, [r2, #0]
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c08:	e057      	b.n	8005cba <HAL_SPI_TransmitReceive+0x2d4>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d11c      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x26c>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d017      	beq.n	8005c52 <HAL_SPI_TransmitReceive+0x26c>
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d114      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x26c>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	330c      	adds	r3, #12
 8005c32:	7812      	ldrb	r2, [r2, #0]
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c4e:	2300      	movs	r3, #0
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d119      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x2ae>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d014      	beq.n	8005c94 <HAL_SPI_TransmitReceive+0x2ae>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	639a      	str	r2, [r3, #56]	; 0x38
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c90:	2301      	movs	r3, #1
 8005c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c94:	f7fe f9f2 	bl	800407c <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d803      	bhi.n	8005cac <HAL_SPI_TransmitReceive+0x2c6>
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005caa:	d102      	bne.n	8005cb2 <HAL_SPI_TransmitReceive+0x2cc>
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d103      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x2d4>
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb8:	e029      	b.n	8005d0e <HAL_SPI_TransmitReceive+0x328>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1a2      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x224>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d19d      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x224>
 8005cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 fa08 	bl	80060e8 <SPI_EndRxTxTransaction>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d006      	beq.n	8005cec <HAL_SPI_TransmitReceive+0x306>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	655a      	str	r2, [r3, #84]	; 0x54
 8005cea:	e010      	b.n	8005d0e <HAL_SPI_TransmitReceive+0x328>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10b      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x326>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	e000      	b.n	8005d0e <HAL_SPI_TransmitReceive+0x328>
 8005d0c:	bf00      	nop
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005d1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d22:	4618      	mov	r0, r3
 8005d24:	3730      	adds	r7, #48	; 0x30
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <HAL_SPI_IRQHandler>:
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	61fb      	str	r3, [r7, #28]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	61bb      	str	r3, [r7, #24]
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	099b      	lsrs	r3, r3, #6
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10f      	bne.n	8005d70 <HAL_SPI_IRQHandler+0x44>
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <HAL_SPI_IRQHandler+0x44>
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	099b      	lsrs	r3, r3, #6
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <HAL_SPI_IRQHandler+0x44>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	4798      	blx	r3
 8005d6e:	e0be      	b.n	8005eee <HAL_SPI_IRQHandler+0x1c2>
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	085b      	lsrs	r3, r3, #1
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <HAL_SPI_IRQHandler+0x66>
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	09db      	lsrs	r3, r3, #7
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <HAL_SPI_IRQHandler+0x66>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
 8005d90:	e0ad      	b.n	8005eee <HAL_SPI_IRQHandler+0x1c2>
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <HAL_SPI_IRQHandler+0x80>
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	099b      	lsrs	r3, r3, #6
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 80a1 	beq.w	8005eee <HAL_SPI_IRQHandler+0x1c2>
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 809a 	beq.w	8005eee <HAL_SPI_IRQHandler+0x1c2>
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	099b      	lsrs	r3, r3, #6
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d023      	beq.n	8005e0e <HAL_SPI_IRQHandler+0xe2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d011      	beq.n	8005df6 <HAL_SPI_IRQHandler+0xca>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd6:	f043 0204 	orr.w	r2, r3, #4
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	655a      	str	r2, [r3, #84]	; 0x54
 8005dde:	2300      	movs	r3, #0
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	e00b      	b.n	8005e0e <HAL_SPI_IRQHandler+0xe2>
 8005df6:	2300      	movs	r3, #0
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	e06f      	b.n	8005eee <HAL_SPI_IRQHandler+0x1c2>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d014      	beq.n	8005e44 <HAL_SPI_IRQHandler+0x118>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1e:	f043 0201 	orr.w	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	655a      	str	r2, [r3, #84]	; 0x54
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d04f      	beq.n	8005eec <HAL_SPI_IRQHandler+0x1c0>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e5a:	605a      	str	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <HAL_SPI_IRQHandler+0x14c>
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d034      	beq.n	8005ee2 <HAL_SPI_IRQHandler+0x1b6>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0203 	bic.w	r2, r2, #3
 8005e86:	605a      	str	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d011      	beq.n	8005eb4 <HAL_SPI_IRQHandler+0x188>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e94:	4a17      	ldr	r2, [pc, #92]	; (8005ef4 <HAL_SPI_IRQHandler+0x1c8>)
 8005e96:	635a      	str	r2, [r3, #52]	; 0x34
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fe fa05 	bl	80042ac <HAL_DMA_Abort_IT>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <HAL_SPI_IRQHandler+0x188>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d016      	beq.n	8005eea <HAL_SPI_IRQHandler+0x1be>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec0:	4a0c      	ldr	r2, [pc, #48]	; (8005ef4 <HAL_SPI_IRQHandler+0x1c8>)
 8005ec2:	635a      	str	r2, [r3, #52]	; 0x34
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe f9ef 	bl	80042ac <HAL_DMA_Abort_IT>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <HAL_SPI_IRQHandler+0x1be>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	655a      	str	r2, [r3, #84]	; 0x54
 8005ee0:	e003      	b.n	8005eea <HAL_SPI_IRQHandler+0x1be>
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f808 	bl	8005ef8 <HAL_SPI_ErrorCallback>
 8005ee8:	e000      	b.n	8005eec <HAL_SPI_IRQHandler+0x1c0>
 8005eea:	bf00      	nop
 8005eec:	bf00      	nop
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	08005f0b 	.word	0x08005f0b

08005ef8 <HAL_SPI_ErrorCallback>:
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bc80      	pop	{r7}
 8005f08:	4770      	bx	lr

08005f0a <SPI_DMAAbortOnError>:
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7ff ffe7 	bl	8005ef8 <HAL_SPI_ErrorCallback>
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <SPI_WaitFlagStateUntilTimeout>:
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	4613      	mov	r3, r2
 8005f42:	71fb      	strb	r3, [r7, #7]
 8005f44:	f7fe f89a 	bl	800407c <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	1a9b      	subs	r3, r3, r2
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	4413      	add	r3, r2
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	f7fe f892 	bl	800407c <HAL_GetTick>
 8005f58:	61b8      	str	r0, [r7, #24]
 8005f5a:	4b39      	ldr	r3, [pc, #228]	; (8006040 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	015b      	lsls	r3, r3, #5
 8005f60:	0d1b      	lsrs	r3, r3, #20
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	fb02 f303 	mul.w	r3, r2, r3
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	e054      	b.n	8006016 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f72:	d050      	beq.n	8006016 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005f74:	f7fe f882 	bl	800407c <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d902      	bls.n	8005f8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d13d      	bne.n	8006006 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f98:	605a      	str	r2, [r3, #4]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fa2:	d111      	bne.n	8005fc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fac:	d004      	beq.n	8005fb8 <SPI_WaitFlagStateUntilTimeout+0x84>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb6:	d107      	bne.n	8005fc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fd0:	d10f      	bne.n	8005ff2 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006002:	2303      	movs	r3, #3
 8006004:	e017      	b.n	8006036 <SPI_WaitFlagStateUntilTimeout+0x102>
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <SPI_WaitFlagStateUntilTimeout+0xdc>
 800600c:	2300      	movs	r3, #0
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	3b01      	subs	r3, #1
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4013      	ands	r3, r2
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	429a      	cmp	r2, r3
 8006024:	bf0c      	ite	eq
 8006026:	2301      	moveq	r3, #1
 8006028:	2300      	movne	r3, #0
 800602a:	b2db      	uxtb	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	429a      	cmp	r2, r3
 8006032:	d19b      	bne.n	8005f6c <SPI_WaitFlagStateUntilTimeout+0x38>
 8006034:	2300      	movs	r3, #0
 8006036:	4618      	mov	r0, r3
 8006038:	3720      	adds	r7, #32
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000000 	.word	0x20000000

08006044 <SPI_EndRxTransaction>:
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af02      	add	r7, sp, #8
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006058:	d111      	bne.n	800607e <SPI_EndRxTransaction+0x3a>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006062:	d004      	beq.n	800606e <SPI_EndRxTransaction+0x2a>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800606c:	d107      	bne.n	800607e <SPI_EndRxTransaction+0x3a>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006086:	d117      	bne.n	80060b8 <SPI_EndRxTransaction+0x74>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006090:	d112      	bne.n	80060b8 <SPI_EndRxTransaction+0x74>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2200      	movs	r2, #0
 800609a:	2101      	movs	r1, #1
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff ff49 	bl	8005f34 <SPI_WaitFlagStateUntilTimeout>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01a      	beq.n	80060de <SPI_EndRxTransaction+0x9a>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ac:	f043 0220 	orr.w	r2, r3, #32
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	655a      	str	r2, [r3, #84]	; 0x54
 80060b4:	2303      	movs	r3, #3
 80060b6:	e013      	b.n	80060e0 <SPI_EndRxTransaction+0x9c>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2200      	movs	r2, #0
 80060c0:	2180      	movs	r1, #128	; 0x80
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f7ff ff36 	bl	8005f34 <SPI_WaitFlagStateUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <SPI_EndRxTransaction+0x9a>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d2:	f043 0220 	orr.w	r2, r3, #32
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	655a      	str	r2, [r3, #84]	; 0x54
 80060da:	2303      	movs	r3, #3
 80060dc:	e000      	b.n	80060e0 <SPI_EndRxTransaction+0x9c>
 80060de:	2300      	movs	r3, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <SPI_EndRxTxTransaction>:
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af02      	add	r7, sp, #8
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2200      	movs	r2, #0
 80060fc:	2180      	movs	r1, #128	; 0x80
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f7ff ff18 	bl	8005f34 <SPI_WaitFlagStateUntilTimeout>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <SPI_EndRxTxTransaction+0x32>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610e:	f043 0220 	orr.w	r2, r3, #32
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	655a      	str	r2, [r3, #84]	; 0x54
 8006116:	2303      	movs	r3, #3
 8006118:	e000      	b.n	800611c <SPI_EndRxTxTransaction+0x34>
 800611a:	2300      	movs	r3, #0
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_TIM_Base_Init>:
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_TIM_Base_Init+0x12>
 8006132:	2301      	movs	r3, #1
 8006134:	e041      	b.n	80061ba <HAL_TIM_Base_Init+0x96>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_TIM_Base_Init+0x2c>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fd fe54 	bl	8003df8 <HAL_TIM_Base_MspInit>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3304      	adds	r3, #4
 8006160:	4619      	mov	r1, r3
 8006162:	4610      	mov	r0, r2
 8006164:	f000 fc68 	bl	8006a38 <TIM_Base_SetConfig>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061b8:	2300      	movs	r3, #0
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_TIM_PWM_Init>:
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_TIM_PWM_Init+0x12>
 80061d0:	2301      	movs	r3, #1
 80061d2:	e041      	b.n	8006258 <HAL_TIM_PWM_Init+0x96>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d106      	bne.n	80061ee <HAL_TIM_PWM_Init+0x2c>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f839 	bl	8006260 <HAL_TIM_PWM_MspInit>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f000 fc19 	bl	8006a38 <TIM_Base_SetConfig>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006256:	2300      	movs	r3, #0
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_TIM_PWM_MspInit>:
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr
	...

08006274 <HAL_TIM_PWM_Start>:
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d109      	bne.n	8006298 <HAL_TIM_PWM_Start+0x24>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b01      	cmp	r3, #1
 800628e:	bf14      	ite	ne
 8006290:	2301      	movne	r3, #1
 8006292:	2300      	moveq	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	e022      	b.n	80062de <HAL_TIM_PWM_Start+0x6a>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b04      	cmp	r3, #4
 800629c:	d109      	bne.n	80062b2 <HAL_TIM_PWM_Start+0x3e>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	bf14      	ite	ne
 80062aa:	2301      	movne	r3, #1
 80062ac:	2300      	moveq	r3, #0
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	e015      	b.n	80062de <HAL_TIM_PWM_Start+0x6a>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d109      	bne.n	80062cc <HAL_TIM_PWM_Start+0x58>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	bf14      	ite	ne
 80062c4:	2301      	movne	r3, #1
 80062c6:	2300      	moveq	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	e008      	b.n	80062de <HAL_TIM_PWM_Start+0x6a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	bf14      	ite	ne
 80062d8:	2301      	movne	r3, #1
 80062da:	2300      	moveq	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <HAL_TIM_PWM_Start+0x72>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e072      	b.n	80063cc <HAL_TIM_PWM_Start+0x158>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <HAL_TIM_PWM_Start+0x82>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062f4:	e013      	b.n	800631e <HAL_TIM_PWM_Start+0xaa>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d104      	bne.n	8006306 <HAL_TIM_PWM_Start+0x92>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006304:	e00b      	b.n	800631e <HAL_TIM_PWM_Start+0xaa>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b08      	cmp	r3, #8
 800630a:	d104      	bne.n	8006316 <HAL_TIM_PWM_Start+0xa2>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006314:	e003      	b.n	800631e <HAL_TIM_PWM_Start+0xaa>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2202      	movs	r2, #2
 800631a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2201      	movs	r2, #1
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fe42 	bl	8006fb0 <TIM_CCxChannelCmd>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a28      	ldr	r2, [pc, #160]	; (80063d4 <HAL_TIM_PWM_Start+0x160>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d004      	beq.n	8006340 <HAL_TIM_PWM_Start+0xcc>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a27      	ldr	r2, [pc, #156]	; (80063d8 <HAL_TIM_PWM_Start+0x164>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d101      	bne.n	8006344 <HAL_TIM_PWM_Start+0xd0>
 8006340:	2301      	movs	r3, #1
 8006342:	e000      	b.n	8006346 <HAL_TIM_PWM_Start+0xd2>
 8006344:	2300      	movs	r3, #0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <HAL_TIM_PWM_Start+0xe6>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006358:	645a      	str	r2, [r3, #68]	; 0x44
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1d      	ldr	r2, [pc, #116]	; (80063d4 <HAL_TIM_PWM_Start+0x160>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d018      	beq.n	8006396 <HAL_TIM_PWM_Start+0x122>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1b      	ldr	r2, [pc, #108]	; (80063d8 <HAL_TIM_PWM_Start+0x164>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <HAL_TIM_PWM_Start+0x122>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006376:	d00e      	beq.n	8006396 <HAL_TIM_PWM_Start+0x122>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a17      	ldr	r2, [pc, #92]	; (80063dc <HAL_TIM_PWM_Start+0x168>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d009      	beq.n	8006396 <HAL_TIM_PWM_Start+0x122>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <HAL_TIM_PWM_Start+0x16c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d004      	beq.n	8006396 <HAL_TIM_PWM_Start+0x122>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a14      	ldr	r2, [pc, #80]	; (80063e4 <HAL_TIM_PWM_Start+0x170>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d111      	bne.n	80063ba <HAL_TIM_PWM_Start+0x146>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b06      	cmp	r3, #6
 80063a6:	d010      	beq.n	80063ca <HAL_TIM_PWM_Start+0x156>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	e007      	b.n	80063ca <HAL_TIM_PWM_Start+0x156>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0201 	orr.w	r2, r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	2300      	movs	r3, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40012c00 	.word	0x40012c00
 80063d8:	40013400 	.word	0x40013400
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800
 80063e4:	40000c00 	.word	0x40000c00

080063e8 <HAL_TIM_PWM_Stop>:
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2200      	movs	r2, #0
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fdd8 	bl	8006fb0 <TIM_CCxChannelCmd>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2e      	ldr	r2, [pc, #184]	; (80064c0 <HAL_TIM_PWM_Stop+0xd8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d004      	beq.n	8006414 <HAL_TIM_PWM_Stop+0x2c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2d      	ldr	r2, [pc, #180]	; (80064c4 <HAL_TIM_PWM_Stop+0xdc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d101      	bne.n	8006418 <HAL_TIM_PWM_Stop+0x30>
 8006414:	2301      	movs	r3, #1
 8006416:	e000      	b.n	800641a <HAL_TIM_PWM_Stop+0x32>
 8006418:	2300      	movs	r3, #0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d017      	beq.n	800644e <HAL_TIM_PWM_Stop+0x66>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6a1a      	ldr	r2, [r3, #32]
 8006424:	f241 1311 	movw	r3, #4369	; 0x1111
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10f      	bne.n	800644e <HAL_TIM_PWM_Stop+0x66>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6a1a      	ldr	r2, [r3, #32]
 8006434:	f240 4344 	movw	r3, #1092	; 0x444
 8006438:	4013      	ands	r3, r2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d107      	bne.n	800644e <HAL_TIM_PWM_Stop+0x66>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800644c:	645a      	str	r2, [r3, #68]	; 0x44
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6a1a      	ldr	r2, [r3, #32]
 8006454:	f241 1311 	movw	r3, #4369	; 0x1111
 8006458:	4013      	ands	r3, r2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10f      	bne.n	800647e <HAL_TIM_PWM_Stop+0x96>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6a1a      	ldr	r2, [r3, #32]
 8006464:	f240 4344 	movw	r3, #1092	; 0x444
 8006468:	4013      	ands	r3, r2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d107      	bne.n	800647e <HAL_TIM_PWM_Stop+0x96>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0201 	bic.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d104      	bne.n	800648e <HAL_TIM_PWM_Stop+0xa6>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800648c:	e013      	b.n	80064b6 <HAL_TIM_PWM_Stop+0xce>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b04      	cmp	r3, #4
 8006492:	d104      	bne.n	800649e <HAL_TIM_PWM_Stop+0xb6>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800649c:	e00b      	b.n	80064b6 <HAL_TIM_PWM_Stop+0xce>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d104      	bne.n	80064ae <HAL_TIM_PWM_Stop+0xc6>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ac:	e003      	b.n	80064b6 <HAL_TIM_PWM_Stop+0xce>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064b6:	2300      	movs	r3, #0
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40013400 	.word	0x40013400

080064c8 <HAL_TIM_IRQHandler>:
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d122      	bne.n	8006524 <HAL_TIM_IRQHandler+0x5c>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d11b      	bne.n	8006524 <HAL_TIM_IRQHandler+0x5c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0202 	mvn.w	r2, #2
 80064f4:	611a      	str	r2, [r3, #16]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	771a      	strb	r2, [r3, #28]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_TIM_IRQHandler+0x4a>
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fa78 	bl	8006a00 <HAL_TIM_IC_CaptureCallback>
 8006510:	e005      	b.n	800651e <HAL_TIM_IRQHandler+0x56>
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fa6b 	bl	80069ee <HAL_TIM_OC_DelayElapsedCallback>
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fa7a 	bl	8006a12 <HAL_TIM_PWM_PulseFinishedCallback>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	771a      	strb	r2, [r3, #28]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b04      	cmp	r3, #4
 8006530:	d122      	bne.n	8006578 <HAL_TIM_IRQHandler+0xb0>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b04      	cmp	r3, #4
 800653e:	d11b      	bne.n	8006578 <HAL_TIM_IRQHandler+0xb0>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f06f 0204 	mvn.w	r2, #4
 8006548:	611a      	str	r2, [r3, #16]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2202      	movs	r2, #2
 800654e:	771a      	strb	r2, [r3, #28]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_TIM_IRQHandler+0x9e>
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fa4e 	bl	8006a00 <HAL_TIM_IC_CaptureCallback>
 8006564:	e005      	b.n	8006572 <HAL_TIM_IRQHandler+0xaa>
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa41 	bl	80069ee <HAL_TIM_OC_DelayElapsedCallback>
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fa50 	bl	8006a12 <HAL_TIM_PWM_PulseFinishedCallback>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	771a      	strb	r2, [r3, #28]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b08      	cmp	r3, #8
 8006584:	d122      	bne.n	80065cc <HAL_TIM_IRQHandler+0x104>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b08      	cmp	r3, #8
 8006592:	d11b      	bne.n	80065cc <HAL_TIM_IRQHandler+0x104>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0208 	mvn.w	r2, #8
 800659c:	611a      	str	r2, [r3, #16]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2204      	movs	r2, #4
 80065a2:	771a      	strb	r2, [r3, #28]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_TIM_IRQHandler+0xf2>
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fa24 	bl	8006a00 <HAL_TIM_IC_CaptureCallback>
 80065b8:	e005      	b.n	80065c6 <HAL_TIM_IRQHandler+0xfe>
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa17 	bl	80069ee <HAL_TIM_OC_DelayElapsedCallback>
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fa26 	bl	8006a12 <HAL_TIM_PWM_PulseFinishedCallback>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	771a      	strb	r2, [r3, #28]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f003 0310 	and.w	r3, r3, #16
 80065d6:	2b10      	cmp	r3, #16
 80065d8:	d122      	bne.n	8006620 <HAL_TIM_IRQHandler+0x158>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d11b      	bne.n	8006620 <HAL_TIM_IRQHandler+0x158>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0210 	mvn.w	r2, #16
 80065f0:	611a      	str	r2, [r3, #16]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2208      	movs	r2, #8
 80065f6:	771a      	strb	r2, [r3, #28]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_TIM_IRQHandler+0x146>
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f9fa 	bl	8006a00 <HAL_TIM_IC_CaptureCallback>
 800660c:	e005      	b.n	800661a <HAL_TIM_IRQHandler+0x152>
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f9ed 	bl	80069ee <HAL_TIM_OC_DelayElapsedCallback>
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f9fc 	bl	8006a12 <HAL_TIM_PWM_PulseFinishedCallback>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	771a      	strb	r2, [r3, #28]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b01      	cmp	r3, #1
 800662c:	d10e      	bne.n	800664c <HAL_TIM_IRQHandler+0x184>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b01      	cmp	r3, #1
 800663a:	d107      	bne.n	800664c <HAL_TIM_IRQHandler+0x184>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0201 	mvn.w	r2, #1
 8006644:	611a      	str	r2, [r3, #16]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9c8 	bl	80069dc <HAL_TIM_PeriodElapsedCallback>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006656:	2b80      	cmp	r3, #128	; 0x80
 8006658:	d10e      	bne.n	8006678 <HAL_TIM_IRQHandler+0x1b0>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	d107      	bne.n	8006678 <HAL_TIM_IRQHandler+0x1b0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006670:	611a      	str	r2, [r3, #16]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fd35 	bl	80070e2 <HAL_TIMEx_BreakCallback>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d10e      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x1dc>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006690:	2b40      	cmp	r3, #64	; 0x40
 8006692:	d107      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x1dc>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800669c:	611a      	str	r2, [r3, #16]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f9c0 	bl	8006a24 <HAL_TIM_TriggerCallback>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d10e      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x208>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b20      	cmp	r3, #32
 80066be:	d107      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x208>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f06f 0220 	mvn.w	r2, #32
 80066c8:	611a      	str	r2, [r3, #16]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fd00 	bl	80070d0 <HAL_TIMEx_CommutCallback>
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_TIM_PWM_ConfigChannel>:
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e0ac      	b.n	800684c <HAL_TIM_PWM_ConfigChannel+0x174>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b0c      	cmp	r3, #12
 80066fe:	f200 809f 	bhi.w	8006840 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	0800673d 	.word	0x0800673d
 800670c:	08006841 	.word	0x08006841
 8006710:	08006841 	.word	0x08006841
 8006714:	08006841 	.word	0x08006841
 8006718:	0800677d 	.word	0x0800677d
 800671c:	08006841 	.word	0x08006841
 8006720:	08006841 	.word	0x08006841
 8006724:	08006841 	.word	0x08006841
 8006728:	080067bf 	.word	0x080067bf
 800672c:	08006841 	.word	0x08006841
 8006730:	08006841 	.word	0x08006841
 8006734:	08006841 	.word	0x08006841
 8006738:	080067ff 	.word	0x080067ff
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68b9      	ldr	r1, [r7, #8]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 f9f2 	bl	8006b2c <TIM_OC1_SetConfig>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0208 	orr.w	r2, r2, #8
 8006756:	619a      	str	r2, [r3, #24]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0204 	bic.w	r2, r2, #4
 8006766:	619a      	str	r2, [r3, #24]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6999      	ldr	r1, [r3, #24]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	619a      	str	r2, [r3, #24]
 800677a:	e062      	b.n	8006842 <HAL_TIM_PWM_ConfigChannel+0x16a>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fa42 	bl	8006c0c <TIM_OC2_SetConfig>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006796:	619a      	str	r2, [r3, #24]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a6:	619a      	str	r2, [r3, #24]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6999      	ldr	r1, [r3, #24]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	021a      	lsls	r2, r3, #8
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	619a      	str	r2, [r3, #24]
 80067bc:	e041      	b.n	8006842 <HAL_TIM_PWM_ConfigChannel+0x16a>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fa95 	bl	8006cf4 <TIM_OC3_SetConfig>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f042 0208 	orr.w	r2, r2, #8
 80067d8:	61da      	str	r2, [r3, #28]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69da      	ldr	r2, [r3, #28]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0204 	bic.w	r2, r2, #4
 80067e8:	61da      	str	r2, [r3, #28]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69d9      	ldr	r1, [r3, #28]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	61da      	str	r2, [r3, #28]
 80067fc:	e021      	b.n	8006842 <HAL_TIM_PWM_ConfigChannel+0x16a>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fae9 	bl	8006ddc <TIM_OC4_SetConfig>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006818:	61da      	str	r2, [r3, #28]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006828:	61da      	str	r2, [r3, #28]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69d9      	ldr	r1, [r3, #28]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	021a      	lsls	r2, r3, #8
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	61da      	str	r2, [r3, #28]
 800683e:	e000      	b.n	8006842 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8006840:	bf00      	nop
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800684a:	2300      	movs	r3, #0
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_TIM_ConfigClockSource>:
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_TIM_ConfigClockSource+0x18>
 8006868:	2302      	movs	r3, #2
 800686a:	e0b3      	b.n	80069d4 <HAL_TIM_ConfigClockSource+0x180>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	609a      	str	r2, [r3, #8]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a4:	d03e      	beq.n	8006924 <HAL_TIM_ConfigClockSource+0xd0>
 80068a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068aa:	f200 8087 	bhi.w	80069bc <HAL_TIM_ConfigClockSource+0x168>
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b2:	f000 8085 	beq.w	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ba:	d87f      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x168>
 80068bc:	2b70      	cmp	r3, #112	; 0x70
 80068be:	d01a      	beq.n	80068f6 <HAL_TIM_ConfigClockSource+0xa2>
 80068c0:	2b70      	cmp	r3, #112	; 0x70
 80068c2:	d87b      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x168>
 80068c4:	2b60      	cmp	r3, #96	; 0x60
 80068c6:	d050      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x116>
 80068c8:	2b60      	cmp	r3, #96	; 0x60
 80068ca:	d877      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x168>
 80068cc:	2b50      	cmp	r3, #80	; 0x50
 80068ce:	d03c      	beq.n	800694a <HAL_TIM_ConfigClockSource+0xf6>
 80068d0:	2b50      	cmp	r3, #80	; 0x50
 80068d2:	d873      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x168>
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d058      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x136>
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	d86f      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x168>
 80068dc:	2b30      	cmp	r3, #48	; 0x30
 80068de:	d064      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x156>
 80068e0:	2b30      	cmp	r3, #48	; 0x30
 80068e2:	d86b      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x168>
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	d060      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x156>
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	d867      	bhi.n	80069bc <HAL_TIM_ConfigClockSource+0x168>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d05c      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x156>
 80068f0:	2b10      	cmp	r3, #16
 80068f2:	d05a      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x156>
 80068f4:	e062      	b.n	80069bc <HAL_TIM_ConfigClockSource+0x168>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6899      	ldr	r1, [r3, #8]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f000 fb34 	bl	8006f72 <TIM_ETR_SetConfig>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	609a      	str	r2, [r3, #8]
 8006922:	e04e      	b.n	80069c2 <HAL_TIM_ConfigClockSource+0x16e>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	6899      	ldr	r1, [r3, #8]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f000 fb1d 	bl	8006f72 <TIM_ETR_SetConfig>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006946:	609a      	str	r2, [r3, #8]
 8006948:	e03b      	b.n	80069c2 <HAL_TIM_ConfigClockSource+0x16e>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6859      	ldr	r1, [r3, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	461a      	mov	r2, r3
 8006958:	f000 fa94 	bl	8006e84 <TIM_TI1_ConfigInputStage>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2150      	movs	r1, #80	; 0x50
 8006962:	4618      	mov	r0, r3
 8006964:	f000 faeb 	bl	8006f3e <TIM_ITRx_SetConfig>
 8006968:	e02b      	b.n	80069c2 <HAL_TIM_ConfigClockSource+0x16e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6818      	ldr	r0, [r3, #0]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	6859      	ldr	r1, [r3, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	461a      	mov	r2, r3
 8006978:	f000 fab2 	bl	8006ee0 <TIM_TI2_ConfigInputStage>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2160      	movs	r1, #96	; 0x60
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fadb 	bl	8006f3e <TIM_ITRx_SetConfig>
 8006988:	e01b      	b.n	80069c2 <HAL_TIM_ConfigClockSource+0x16e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	6859      	ldr	r1, [r3, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	461a      	mov	r2, r3
 8006998:	f000 fa74 	bl	8006e84 <TIM_TI1_ConfigInputStage>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2140      	movs	r1, #64	; 0x40
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 facb 	bl	8006f3e <TIM_ITRx_SetConfig>
 80069a8:	e00b      	b.n	80069c2 <HAL_TIM_ConfigClockSource+0x16e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4619      	mov	r1, r3
 80069b4:	4610      	mov	r0, r2
 80069b6:	f000 fac2 	bl	8006f3e <TIM_ITRx_SetConfig>
 80069ba:	e002      	b.n	80069c2 <HAL_TIM_ConfigClockSource+0x16e>
 80069bc:	bf00      	nop
 80069be:	e000      	b.n	80069c2 <HAL_TIM_ConfigClockSource+0x16e>
 80069c0:	bf00      	nop
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80069d2:	2300      	movs	r3, #0
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_TIM_PeriodElapsedCallback>:
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr

080069ee <HAL_TIM_OC_DelayElapsedCallback>:
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIM_IC_CaptureCallback>:
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr

08006a24 <HAL_TIM_TriggerCallback>:
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr
	...

08006a38 <TIM_Base_SetConfig>:
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a33      	ldr	r2, [pc, #204]	; (8006b18 <TIM_Base_SetConfig+0xe0>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d013      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a32      	ldr	r2, [pc, #200]	; (8006b1c <TIM_Base_SetConfig+0xe4>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00f      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5e:	d00b      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a2f      	ldr	r2, [pc, #188]	; (8006b20 <TIM_Base_SetConfig+0xe8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d007      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a2e      	ldr	r2, [pc, #184]	; (8006b24 <TIM_Base_SetConfig+0xec>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_Base_SetConfig+0x40>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a2d      	ldr	r2, [pc, #180]	; (8006b28 <TIM_Base_SetConfig+0xf0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d108      	bne.n	8006a8a <TIM_Base_SetConfig+0x52>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a22      	ldr	r2, [pc, #136]	; (8006b18 <TIM_Base_SetConfig+0xe0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <TIM_Base_SetConfig+0x82>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a21      	ldr	r2, [pc, #132]	; (8006b1c <TIM_Base_SetConfig+0xe4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00f      	beq.n	8006aba <TIM_Base_SetConfig+0x82>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa0:	d00b      	beq.n	8006aba <TIM_Base_SetConfig+0x82>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a1e      	ldr	r2, [pc, #120]	; (8006b20 <TIM_Base_SetConfig+0xe8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d007      	beq.n	8006aba <TIM_Base_SetConfig+0x82>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a1d      	ldr	r2, [pc, #116]	; (8006b24 <TIM_Base_SetConfig+0xec>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d003      	beq.n	8006aba <TIM_Base_SetConfig+0x82>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a1c      	ldr	r2, [pc, #112]	; (8006b28 <TIM_Base_SetConfig+0xf0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d108      	bne.n	8006acc <TIM_Base_SetConfig+0x94>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	629a      	str	r2, [r3, #40]	; 0x28
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a09      	ldr	r2, [pc, #36]	; (8006b18 <TIM_Base_SetConfig+0xe0>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d003      	beq.n	8006b00 <TIM_Base_SetConfig+0xc8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a08      	ldr	r2, [pc, #32]	; (8006b1c <TIM_Base_SetConfig+0xe4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d103      	bne.n	8006b08 <TIM_Base_SetConfig+0xd0>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	631a      	str	r2, [r3, #48]	; 0x30
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	615a      	str	r2, [r3, #20]
 8006b0e:	bf00      	nop
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr
 8006b18:	40012c00 	.word	0x40012c00
 8006b1c:	40013400 	.word	0x40013400
 8006b20:	40000400 	.word	0x40000400
 8006b24:	40000800 	.word	0x40000800
 8006b28:	40000c00 	.word	0x40000c00

08006b2c <TIM_OC1_SetConfig>:
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	f023 0201 	bic.w	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	621a      	str	r2, [r3, #32]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	613b      	str	r3, [r7, #16]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f023 0302 	bic.w	r3, r3, #2
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a20      	ldr	r2, [pc, #128]	; (8006c04 <TIM_OC1_SetConfig+0xd8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d003      	beq.n	8006b90 <TIM_OC1_SetConfig+0x64>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a1f      	ldr	r2, [pc, #124]	; (8006c08 <TIM_OC1_SetConfig+0xdc>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d10c      	bne.n	8006baa <TIM_OC1_SetConfig+0x7e>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f023 0308 	bic.w	r3, r3, #8
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f023 0304 	bic.w	r3, r3, #4
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a15      	ldr	r2, [pc, #84]	; (8006c04 <TIM_OC1_SetConfig+0xd8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d003      	beq.n	8006bba <TIM_OC1_SetConfig+0x8e>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a14      	ldr	r2, [pc, #80]	; (8006c08 <TIM_OC1_SetConfig+0xdc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d111      	bne.n	8006bde <TIM_OC1_SetConfig+0xb2>
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	605a      	str	r2, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	619a      	str	r2, [r3, #24]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	621a      	str	r2, [r3, #32]
 8006bf8:	bf00      	nop
 8006bfa:	371c      	adds	r7, #28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bc80      	pop	{r7}
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40012c00 	.word	0x40012c00
 8006c08:	40013400 	.word	0x40013400

08006c0c <TIM_OC2_SetConfig>:
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f023 0210 	bic.w	r2, r3, #16
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	621a      	str	r2, [r3, #32]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	021b      	lsls	r3, r3, #8
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f023 0320 	bic.w	r3, r3, #32
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a21      	ldr	r2, [pc, #132]	; (8006cec <TIM_OC2_SetConfig+0xe0>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d003      	beq.n	8006c74 <TIM_OC2_SetConfig+0x68>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a20      	ldr	r2, [pc, #128]	; (8006cf0 <TIM_OC2_SetConfig+0xe4>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d10d      	bne.n	8006c90 <TIM_OC2_SetConfig+0x84>
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a16      	ldr	r2, [pc, #88]	; (8006cec <TIM_OC2_SetConfig+0xe0>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d003      	beq.n	8006ca0 <TIM_OC2_SetConfig+0x94>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a15      	ldr	r2, [pc, #84]	; (8006cf0 <TIM_OC2_SetConfig+0xe4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d113      	bne.n	8006cc8 <TIM_OC2_SetConfig+0xbc>
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	605a      	str	r2, [r3, #4]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	619a      	str	r2, [r3, #24]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	621a      	str	r2, [r3, #32]
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr
 8006cec:	40012c00 	.word	0x40012c00
 8006cf0:	40013400 	.word	0x40013400

08006cf4 <TIM_OC3_SetConfig>:
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	621a      	str	r2, [r3, #32]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0303 	bic.w	r3, r3, #3
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a21      	ldr	r2, [pc, #132]	; (8006dd4 <TIM_OC3_SetConfig+0xe0>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d003      	beq.n	8006d5a <TIM_OC3_SetConfig+0x66>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a20      	ldr	r2, [pc, #128]	; (8006dd8 <TIM_OC3_SetConfig+0xe4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d10d      	bne.n	8006d76 <TIM_OC3_SetConfig+0x82>
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a16      	ldr	r2, [pc, #88]	; (8006dd4 <TIM_OC3_SetConfig+0xe0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_OC3_SetConfig+0x92>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a15      	ldr	r2, [pc, #84]	; (8006dd8 <TIM_OC3_SetConfig+0xe4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d113      	bne.n	8006dae <TIM_OC3_SetConfig+0xba>
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d8c:	613b      	str	r3, [r7, #16]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	011b      	lsls	r3, r3, #4
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	605a      	str	r2, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	61da      	str	r2, [r3, #28]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	63da      	str	r2, [r3, #60]	; 0x3c
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	621a      	str	r2, [r3, #32]
 8006dc8:	bf00      	nop
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bc80      	pop	{r7}
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40012c00 	.word	0x40012c00
 8006dd8:	40013400 	.word	0x40013400

08006ddc <TIM_OC4_SetConfig>:
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	621a      	str	r2, [r3, #32]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	613b      	str	r3, [r7, #16]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	031b      	lsls	r3, r3, #12
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a11      	ldr	r2, [pc, #68]	; (8006e7c <TIM_OC4_SetConfig+0xa0>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d003      	beq.n	8006e44 <TIM_OC4_SetConfig+0x68>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a10      	ldr	r2, [pc, #64]	; (8006e80 <TIM_OC4_SetConfig+0xa4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d109      	bne.n	8006e58 <TIM_OC4_SetConfig+0x7c>
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	019b      	lsls	r3, r3, #6
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	605a      	str	r2, [r3, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	61da      	str	r2, [r3, #28]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	641a      	str	r2, [r3, #64]	; 0x40
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	621a      	str	r2, [r3, #32]
 8006e72:	bf00      	nop
 8006e74:	371c      	adds	r7, #28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr
 8006e7c:	40012c00 	.word	0x40012c00
 8006e80:	40013400 	.word	0x40013400

08006e84 <TIM_TI1_ConfigInputStage>:
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f023 0201 	bic.w	r2, r3, #1
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	621a      	str	r2, [r3, #32]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	613b      	str	r3, [r7, #16]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eae:	613b      	str	r3, [r7, #16]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f023 030a 	bic.w	r3, r3, #10
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	619a      	str	r2, [r3, #24]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	621a      	str	r2, [r3, #32]
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr

08006ee0 <TIM_TI2_ConfigInputStage>:
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	f023 0210 	bic.w	r2, r3, #16
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	621a      	str	r2, [r3, #32]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	031b      	lsls	r3, r3, #12
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f1c:	613b      	str	r3, [r7, #16]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	011b      	lsls	r3, r3, #4
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	619a      	str	r2, [r3, #24]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	621a      	str	r2, [r3, #32]
 8006f34:	bf00      	nop
 8006f36:	371c      	adds	r7, #28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bc80      	pop	{r7}
 8006f3c:	4770      	bx	lr

08006f3e <TIM_ITRx_SetConfig>:
 8006f3e:	b480      	push	{r7}
 8006f40:	b085      	sub	sp, #20
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f043 0307 	orr.w	r3, r3, #7
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	609a      	str	r2, [r3, #8]
 8006f68:	bf00      	nop
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr

08006f72 <TIM_ETR_SetConfig>:
 8006f72:	b480      	push	{r7}
 8006f74:	b087      	sub	sp, #28
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	021a      	lsls	r2, r3, #8
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	431a      	orrs	r2, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	609a      	str	r2, [r3, #8]
 8006fa6:	bf00      	nop
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bc80      	pop	{r7}
 8006fae:	4770      	bx	lr

08006fb0 <TIM_CCxChannelCmd>:
 8006fb0:	b480      	push	{r7}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a1a      	ldr	r2, [r3, #32]
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	43db      	mvns	r3, r3
 8006fd2:	401a      	ands	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	621a      	str	r2, [r3, #32]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6a1a      	ldr	r2, [r3, #32]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f003 031f 	and.w	r3, r3, #31
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	621a      	str	r2, [r3, #32]
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bc80      	pop	{r7}
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_TIMEx_MasterConfigSynchronization>:
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800700c:	2302      	movs	r3, #2
 800700e:	e050      	b.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	60bb      	str	r3, [r7, #8]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	605a      	str	r2, [r3, #4]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a1b      	ldr	r2, [pc, #108]	; (80070bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d018      	beq.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d013      	beq.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007066:	d00e      	beq.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d009      	beq.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a14      	ldr	r2, [pc, #80]	; (80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d004      	beq.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a12      	ldr	r2, [pc, #72]	; (80070cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d10c      	bne.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800708c:	60bb      	str	r3, [r7, #8]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	4313      	orrs	r3, r2
 8007096:	60bb      	str	r3, [r7, #8]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	609a      	str	r2, [r3, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80070b0:	2300      	movs	r3, #0
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr
 80070bc:	40012c00 	.word	0x40012c00
 80070c0:	40013400 	.word	0x40013400
 80070c4:	40000400 	.word	0x40000400
 80070c8:	40000800 	.word	0x40000800
 80070cc:	40000c00 	.word	0x40000c00

080070d0 <HAL_TIMEx_CommutCallback>:
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	bc80      	pop	{r7}
 80070e0:	4770      	bx	lr

080070e2 <HAL_TIMEx_BreakCallback>:
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr

080070f4 <osKernelInitialize>:
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	f3ef 8305 	mrs	r3, IPSR
 80070fe:	60bb      	str	r3, [r7, #8]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10f      	bne.n	8007126 <osKernelInitialize+0x32>
 8007106:	f3ef 8310 	mrs	r3, PRIMASK
 800710a:	607b      	str	r3, [r7, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d109      	bne.n	8007126 <osKernelInitialize+0x32>
 8007112:	4b10      	ldr	r3, [pc, #64]	; (8007154 <osKernelInitialize+0x60>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b02      	cmp	r3, #2
 8007118:	d109      	bne.n	800712e <osKernelInitialize+0x3a>
 800711a:	f3ef 8311 	mrs	r3, BASEPRI
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <osKernelInitialize+0x3a>
 8007126:	f06f 0305 	mvn.w	r3, #5
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	e00c      	b.n	8007148 <osKernelInitialize+0x54>
 800712e:	4b09      	ldr	r3, [pc, #36]	; (8007154 <osKernelInitialize+0x60>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d105      	bne.n	8007142 <osKernelInitialize+0x4e>
 8007136:	4b07      	ldr	r3, [pc, #28]	; (8007154 <osKernelInitialize+0x60>)
 8007138:	2201      	movs	r2, #1
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	e002      	b.n	8007148 <osKernelInitialize+0x54>
 8007142:	f04f 33ff 	mov.w	r3, #4294967295
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr
 8007154:	20000038 	.word	0x20000038

08007158 <osThreadNew>:
 8007158:	b580      	push	{r7, lr}
 800715a:	b092      	sub	sp, #72	; 0x48
 800715c:	af04      	add	r7, sp, #16
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	2300      	movs	r3, #0
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	f3ef 8305 	mrs	r3, IPSR
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	2b00      	cmp	r3, #0
 8007172:	f040 8094 	bne.w	800729e <osThreadNew+0x146>
 8007176:	f3ef 8310 	mrs	r3, PRIMASK
 800717a:	623b      	str	r3, [r7, #32]
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f040 808d 	bne.w	800729e <osThreadNew+0x146>
 8007184:	4b48      	ldr	r3, [pc, #288]	; (80072a8 <osThreadNew+0x150>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d106      	bne.n	800719a <osThreadNew+0x42>
 800718c:	f3ef 8311 	mrs	r3, BASEPRI
 8007190:	61fb      	str	r3, [r7, #28]
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	2b00      	cmp	r3, #0
 8007196:	f040 8082 	bne.w	800729e <osThreadNew+0x146>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d07e      	beq.n	800729e <osThreadNew+0x146>
 80071a0:	2380      	movs	r3, #128	; 0x80
 80071a2:	633b      	str	r3, [r7, #48]	; 0x30
 80071a4:	2318      	movs	r3, #24
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071a8:	2300      	movs	r3, #0
 80071aa:	76fb      	strb	r3, [r7, #27]
 80071ac:	f107 031b 	add.w	r3, r7, #27
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34
 80071b2:	f04f 33ff 	mov.w	r3, #4294967295
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d045      	beq.n	800724a <osThreadNew+0xf2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <osThreadNew+0x74>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	637b      	str	r3, [r7, #52]	; 0x34
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <osThreadNew+0x82>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d008      	beq.n	80071f2 <osThreadNew+0x9a>
 80071e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e2:	2b38      	cmp	r3, #56	; 0x38
 80071e4:	d805      	bhi.n	80071f2 <osThreadNew+0x9a>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <osThreadNew+0x9e>
 80071f2:	2300      	movs	r3, #0
 80071f4:	e054      	b.n	80072a0 <osThreadNew+0x148>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <osThreadNew+0xae>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	089b      	lsrs	r3, r3, #2
 8007204:	633b      	str	r3, [r7, #48]	; 0x30
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00e      	beq.n	800722c <osThreadNew+0xd4>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	2b5b      	cmp	r3, #91	; 0x5b
 8007214:	d90a      	bls.n	800722c <osThreadNew+0xd4>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d006      	beq.n	800722c <osThreadNew+0xd4>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <osThreadNew+0xd4>
 8007226:	2301      	movs	r3, #1
 8007228:	62bb      	str	r3, [r7, #40]	; 0x28
 800722a:	e010      	b.n	800724e <osThreadNew+0xf6>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10c      	bne.n	800724e <osThreadNew+0xf6>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d108      	bne.n	800724e <osThreadNew+0xf6>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <osThreadNew+0xf6>
 8007244:	2300      	movs	r3, #0
 8007246:	62bb      	str	r3, [r7, #40]	; 0x28
 8007248:	e001      	b.n	800724e <osThreadNew+0xf6>
 800724a:	2300      	movs	r3, #0
 800724c:	62bb      	str	r3, [r7, #40]	; 0x28
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	2b01      	cmp	r3, #1
 8007252:	d110      	bne.n	8007276 <osThreadNew+0x11e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6892      	ldr	r2, [r2, #8]
 800725c:	9202      	str	r2, [sp, #8]
 800725e:	9301      	str	r3, [sp, #4]
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007268:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 fecc 	bl	8008008 <xTaskCreateStatic>
 8007270:	4603      	mov	r3, r0
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	e013      	b.n	800729e <osThreadNew+0x146>
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	2b00      	cmp	r3, #0
 800727a:	d110      	bne.n	800729e <osThreadNew+0x146>
 800727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727e:	b29a      	uxth	r2, r3
 8007280:	f107 0314 	add.w	r3, r7, #20
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 feea 	bl	8008068 <xTaskCreate>
 8007294:	4603      	mov	r3, r0
 8007296:	2b01      	cmp	r3, #1
 8007298:	d001      	beq.n	800729e <osThreadNew+0x146>
 800729a:	2300      	movs	r3, #0
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	4618      	mov	r0, r3
 80072a2:	3738      	adds	r7, #56	; 0x38
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20000038 	.word	0x20000038

080072ac <vApplicationGetIdleTaskMemory>:
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a06      	ldr	r2, [pc, #24]	; (80072d4 <vApplicationGetIdleTaskMemory+0x28>)
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	4a05      	ldr	r2, [pc, #20]	; (80072d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2280      	movs	r2, #128	; 0x80
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	bf00      	nop
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr
 80072d4:	2000003c 	.word	0x2000003c
 80072d8:	20000098 	.word	0x20000098

080072dc <vApplicationGetTimerTaskMemory>:
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4a07      	ldr	r2, [pc, #28]	; (8007308 <vApplicationGetTimerTaskMemory+0x2c>)
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	4a06      	ldr	r2, [pc, #24]	; (800730c <vApplicationGetTimerTaskMemory+0x30>)
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	bf00      	nop
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	bc80      	pop	{r7}
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20000298 	.word	0x20000298
 800730c:	200002f4 	.word	0x200002f4

08007310 <vListInitialise>:
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f103 0208 	add.w	r2, r3, #8
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	605a      	str	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f04f 32ff 	mov.w	r2, #4294967295
 8007328:	609a      	str	r2, [r3, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f103 0208 	add.w	r2, r3, #8
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60da      	str	r2, [r3, #12]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f103 0208 	add.w	r2, r3, #8
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	611a      	str	r2, [r3, #16]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	bc80      	pop	{r7}
 800734c:	4770      	bx	lr

0800734e <vListInitialiseItem>:
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	611a      	str	r2, [r3, #16]
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr

08007366 <vListInsertEnd>:
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	605a      	str	r2, [r3, #4]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	609a      	str	r2, [r3, #8]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	605a      	str	r2, [r3, #4]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	609a      	str	r2, [r3, #8]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	611a      	str	r2, [r3, #16]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	bf00      	nop
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bc80      	pop	{r7}
 80073aa:	4770      	bx	lr

080073ac <vListInsert>:
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60bb      	str	r3, [r7, #8]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c2:	d103      	bne.n	80073cc <vListInsert+0x20>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	e00c      	b.n	80073e6 <vListInsert+0x3a>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3308      	adds	r3, #8
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	e002      	b.n	80073da <vListInsert+0x2e>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d2f6      	bcs.n	80073d4 <vListInsert+0x28>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	605a      	str	r2, [r3, #4]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	609a      	str	r2, [r3, #8]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	609a      	str	r2, [r3, #8]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	605a      	str	r2, [r3, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	611a      	str	r2, [r3, #16]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	bf00      	nop
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr

0800741c <uxListRemove>:
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6892      	ldr	r2, [r2, #8]
 8007432:	609a      	str	r2, [r3, #8]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	6852      	ldr	r2, [r2, #4]
 800743c:	605a      	str	r2, [r3, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	429a      	cmp	r2, r3
 8007446:	d103      	bne.n	8007450 <uxListRemove+0x34>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	605a      	str	r2, [r3, #4]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	611a      	str	r2, [r3, #16]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	1e5a      	subs	r2, r3, #1
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	bc80      	pop	{r7}
 800746c:	4770      	bx	lr
	...

08007470 <xQueueGenericReset>:
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	60fb      	str	r3, [r7, #12]
 800747e:	f001 ffdb 	bl	8009438 <vPortEnterCritical>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748a:	68f9      	ldr	r1, [r7, #12]
 800748c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800748e:	fb01 f303 	mul.w	r3, r1, r3
 8007492:	441a      	add	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	605a      	str	r2, [r3, #4]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	639a      	str	r2, [r3, #56]	; 0x38
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	609a      	str	r2, [r3, #8]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ae:	3b01      	subs	r3, #1
 80074b0:	68f9      	ldr	r1, [r7, #12]
 80074b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074b4:	fb01 f303 	mul.w	r3, r1, r3
 80074b8:	441a      	add	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	60da      	str	r2, [r3, #12]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	22ff      	movs	r2, #255	; 0xff
 80074c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	22ff      	movs	r2, #255	; 0xff
 80074ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d114      	bne.n	80074fe <xQueueGenericReset+0x8e>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d01a      	beq.n	8007512 <xQueueGenericReset+0xa2>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3310      	adds	r3, #16
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 f943 	bl	800876c <xTaskRemoveFromEventList>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d012      	beq.n	8007512 <xQueueGenericReset+0xa2>
 80074ec:	4b0c      	ldr	r3, [pc, #48]	; (8007520 <xQueueGenericReset+0xb0>)
 80074ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	e009      	b.n	8007512 <xQueueGenericReset+0xa2>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3310      	adds	r3, #16
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff ff04 	bl	8007310 <vListInitialise>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3324      	adds	r3, #36	; 0x24
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff feff 	bl	8007310 <vListInitialise>
 8007512:	f001 ffab 	bl	800946c <vPortExitCritical>
 8007516:	2301      	movs	r3, #1
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <xQueueGenericCreateStatic>:
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af02      	add	r7, sp, #8
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	603b      	str	r3, [r7, #0]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00d      	beq.n	8007558 <xQueueGenericCreateStatic+0x34>
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007544:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	4613      	mov	r3, r2
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	68b9      	ldr	r1, [r7, #8]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 f835 	bl	80075c2 <prvInitialiseNewQueue>
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <xQueueGenericCreate>:
 8007562:	b580      	push	{r7, lr}
 8007564:	b08a      	sub	sp, #40	; 0x28
 8007566:	af02      	add	r7, sp, #8
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	4613      	mov	r3, r2
 800756e:	71fb      	strb	r3, [r7, #7]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d102      	bne.n	800757c <xQueueGenericCreate+0x1a>
 8007576:	2300      	movs	r3, #0
 8007578:	61fb      	str	r3, [r7, #28]
 800757a:	e004      	b.n	8007586 <xQueueGenericCreate+0x24>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	fb02 f303 	mul.w	r3, r2, r3
 8007584:	61fb      	str	r3, [r7, #28]
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	3350      	adds	r3, #80	; 0x50
 800758a:	4618      	mov	r0, r3
 800758c:	f001 fff0 	bl	8009570 <pvPortMalloc>
 8007590:	61b8      	str	r0, [r7, #24]
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00f      	beq.n	80075b8 <xQueueGenericCreate+0x56>
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	3350      	adds	r3, #80	; 0x50
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075a6:	79fa      	ldrb	r2, [r7, #7]
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	4613      	mov	r3, r2
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	68b9      	ldr	r1, [r7, #8]
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 f805 	bl	80075c2 <prvInitialiseNewQueue>
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	4618      	mov	r0, r3
 80075bc:	3720      	adds	r7, #32
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <prvInitialiseNewQueue>:
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b084      	sub	sp, #16
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	70fb      	strb	r3, [r7, #3]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d103      	bne.n	80075de <prvInitialiseNewQueue+0x1c>
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	69ba      	ldr	r2, [r7, #24]
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	e002      	b.n	80075e4 <prvInitialiseNewQueue+0x22>
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	641a      	str	r2, [r3, #64]	; 0x40
 80075f0:	2101      	movs	r1, #1
 80075f2:	69b8      	ldr	r0, [r7, #24]
 80075f4:	f7ff ff3c 	bl	8007470 <xQueueGenericReset>
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	78fa      	ldrb	r2, [r7, #3]
 80075fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8007600:	bf00      	nop
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <xQueueCreateCountingSemaphore>:
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
 8007612:	2202      	movs	r2, #2
 8007614:	2100      	movs	r1, #0
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff ffa3 	bl	8007562 <xQueueGenericCreate>
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <xQueueCreateCountingSemaphore+0x22>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	639a      	str	r2, [r3, #56]	; 0x38
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <xQueueGenericSend>:
 8007634:	b580      	push	{r7, lr}
 8007636:	b08a      	sub	sp, #40	; 0x28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	603b      	str	r3, [r7, #0]
 8007642:	2300      	movs	r3, #0
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	623b      	str	r3, [r7, #32]
 800764a:	f001 fef5 	bl	8009438 <vPortEnterCritical>
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007656:	429a      	cmp	r2, r3
 8007658:	d302      	bcc.n	8007660 <xQueueGenericSend+0x2c>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d129      	bne.n	80076b4 <xQueueGenericSend+0x80>
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	6a38      	ldr	r0, [r7, #32]
 8007666:	f000 fb62 	bl	8007d2e <prvCopyDataToQueue>
 800766a:	61f8      	str	r0, [r7, #28]
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	d010      	beq.n	8007696 <xQueueGenericSend+0x62>
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	3324      	adds	r3, #36	; 0x24
 8007678:	4618      	mov	r0, r3
 800767a:	f001 f877 	bl	800876c <xTaskRemoveFromEventList>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d013      	beq.n	80076ac <xQueueGenericSend+0x78>
 8007684:	4b3f      	ldr	r3, [pc, #252]	; (8007784 <xQueueGenericSend+0x150>)
 8007686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	e00a      	b.n	80076ac <xQueueGenericSend+0x78>
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <xQueueGenericSend+0x78>
 800769c:	4b39      	ldr	r3, [pc, #228]	; (8007784 <xQueueGenericSend+0x150>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f001 fede 	bl	800946c <vPortExitCritical>
 80076b0:	2301      	movs	r3, #1
 80076b2:	e063      	b.n	800777c <xQueueGenericSend+0x148>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d103      	bne.n	80076c2 <xQueueGenericSend+0x8e>
 80076ba:	f001 fed7 	bl	800946c <vPortExitCritical>
 80076be:	2300      	movs	r3, #0
 80076c0:	e05c      	b.n	800777c <xQueueGenericSend+0x148>
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d106      	bne.n	80076d6 <xQueueGenericSend+0xa2>
 80076c8:	f107 0314 	add.w	r3, r7, #20
 80076cc:	4618      	mov	r0, r3
 80076ce:	f001 f8a3 	bl	8008818 <vTaskInternalSetTimeOutState>
 80076d2:	2301      	movs	r3, #1
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
 80076d6:	f001 fec9 	bl	800946c <vPortExitCritical>
 80076da:	f000 fe6d 	bl	80083b8 <vTaskSuspendAll>
 80076de:	f001 feab 	bl	8009438 <vPortEnterCritical>
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076e8:	b25b      	sxtb	r3, r3
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d103      	bne.n	80076f8 <xQueueGenericSend+0xc4>
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076fe:	b25b      	sxtb	r3, r3
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007704:	d103      	bne.n	800770e <xQueueGenericSend+0xda>
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800770e:	f001 fead 	bl	800946c <vPortExitCritical>
 8007712:	1d3a      	adds	r2, r7, #4
 8007714:	f107 0314 	add.w	r3, r7, #20
 8007718:	4611      	mov	r1, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f001 f892 	bl	8008844 <xTaskCheckForTimeOut>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d124      	bne.n	8007770 <xQueueGenericSend+0x13c>
 8007726:	6a38      	ldr	r0, [r7, #32]
 8007728:	f000 fbf9 	bl	8007f1e <prvIsQueueFull>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d018      	beq.n	8007764 <xQueueGenericSend+0x130>
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	3310      	adds	r3, #16
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	4611      	mov	r1, r2
 800773a:	4618      	mov	r0, r3
 800773c:	f000 ffe2 	bl	8008704 <vTaskPlaceOnEventList>
 8007740:	6a38      	ldr	r0, [r7, #32]
 8007742:	f000 fb84 	bl	8007e4e <prvUnlockQueue>
 8007746:	f000 fe45 	bl	80083d4 <xTaskResumeAll>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	f47f af7c 	bne.w	800764a <xQueueGenericSend+0x16>
 8007752:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <xQueueGenericSend+0x150>)
 8007754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	e772      	b.n	800764a <xQueueGenericSend+0x16>
 8007764:	6a38      	ldr	r0, [r7, #32]
 8007766:	f000 fb72 	bl	8007e4e <prvUnlockQueue>
 800776a:	f000 fe33 	bl	80083d4 <xTaskResumeAll>
 800776e:	e76c      	b.n	800764a <xQueueGenericSend+0x16>
 8007770:	6a38      	ldr	r0, [r7, #32]
 8007772:	f000 fb6c 	bl	8007e4e <prvUnlockQueue>
 8007776:	f000 fe2d 	bl	80083d4 <xTaskResumeAll>
 800777a:	2300      	movs	r3, #0
 800777c:	4618      	mov	r0, r3
 800777e:	3728      	adds	r7, #40	; 0x28
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <xQueueGenericSendFromISR>:
 8007788:	b580      	push	{r7, lr}
 800778a:	b08c      	sub	sp, #48	; 0x30
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	62bb      	str	r3, [r7, #40]	; 0x28
 800779a:	f3ef 8211 	mrs	r2, BASEPRI
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	61fa      	str	r2, [r7, #28]
 80077b0:	61bb      	str	r3, [r7, #24]
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	627b      	str	r3, [r7, #36]	; 0x24
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077be:	429a      	cmp	r2, r3
 80077c0:	d302      	bcc.n	80077c8 <xQueueGenericSendFromISR+0x40>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d12c      	bne.n	8007822 <xQueueGenericSendFromISR+0x9a>
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	68b9      	ldr	r1, [r7, #8]
 80077d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077d8:	f000 faa9 	bl	8007d2e <prvCopyDataToQueue>
 80077dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d112      	bne.n	800780c <xQueueGenericSendFromISR+0x84>
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d016      	beq.n	800781c <xQueueGenericSendFromISR+0x94>
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	3324      	adds	r3, #36	; 0x24
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 ffba 	bl	800876c <xTaskRemoveFromEventList>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00e      	beq.n	800781c <xQueueGenericSendFromISR+0x94>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <xQueueGenericSendFromISR+0x94>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	e007      	b.n	800781c <xQueueGenericSendFromISR+0x94>
 800780c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007810:	3301      	adds	r3, #1
 8007812:	b2db      	uxtb	r3, r3
 8007814:	b25a      	sxtb	r2, r3
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800781c:	2301      	movs	r3, #1
 800781e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007820:	e001      	b.n	8007826 <xQueueGenericSendFromISR+0x9e>
 8007822:	2300      	movs	r3, #0
 8007824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	bf00      	nop
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	4618      	mov	r0, r3
 8007836:	3730      	adds	r7, #48	; 0x30
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <xQueueGiveFromISR>:
 800783c:	b580      	push	{r7, lr}
 800783e:	b08a      	sub	sp, #40	; 0x28
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	623b      	str	r3, [r7, #32]
 800784a:	f3ef 8211 	mrs	r2, BASEPRI
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	613a      	str	r2, [r7, #16]
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	61fb      	str	r3, [r7, #28]
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	61bb      	str	r3, [r7, #24]
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	429a      	cmp	r2, r3
 8007874:	d229      	bcs.n	80078ca <xQueueGiveFromISR+0x8e>
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800787c:	75fb      	strb	r3, [r7, #23]
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	639a      	str	r2, [r3, #56]	; 0x38
 8007886:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788e:	d112      	bne.n	80078b6 <xQueueGiveFromISR+0x7a>
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	2b00      	cmp	r3, #0
 8007896:	d015      	beq.n	80078c4 <xQueueGiveFromISR+0x88>
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	3324      	adds	r3, #36	; 0x24
 800789c:	4618      	mov	r0, r3
 800789e:	f000 ff65 	bl	800876c <xTaskRemoveFromEventList>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00d      	beq.n	80078c4 <xQueueGiveFromISR+0x88>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00a      	beq.n	80078c4 <xQueueGiveFromISR+0x88>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2201      	movs	r2, #1
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	e006      	b.n	80078c4 <xQueueGiveFromISR+0x88>
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	3301      	adds	r3, #1
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	b25a      	sxtb	r2, r3
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078c4:	2301      	movs	r3, #1
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
 80078c8:	e001      	b.n	80078ce <xQueueGiveFromISR+0x92>
 80078ca:	2300      	movs	r3, #0
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	60bb      	str	r3, [r7, #8]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	bf00      	nop
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	4618      	mov	r0, r3
 80078de:	3728      	adds	r7, #40	; 0x28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <xQueueReceive>:
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	; 0x28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	2300      	movs	r3, #0
 80078f2:	627b      	str	r3, [r7, #36]	; 0x24
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	623b      	str	r3, [r7, #32]
 80078f8:	f001 fd9e 	bl	8009438 <vPortEnterCritical>
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007900:	61fb      	str	r3, [r7, #28]
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01f      	beq.n	8007948 <xQueueReceive+0x64>
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	6a38      	ldr	r0, [r7, #32]
 800790c:	f000 fa79 	bl	8007e02 <prvCopyDataFromQueue>
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	1e5a      	subs	r2, r3, #1
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	639a      	str	r2, [r3, #56]	; 0x38
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00f      	beq.n	8007940 <xQueueReceive+0x5c>
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	3310      	adds	r3, #16
 8007924:	4618      	mov	r0, r3
 8007926:	f000 ff21 	bl	800876c <xTaskRemoveFromEventList>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d007      	beq.n	8007940 <xQueueReceive+0x5c>
 8007930:	4b3c      	ldr	r3, [pc, #240]	; (8007a24 <xQueueReceive+0x140>)
 8007932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f001 fd94 	bl	800946c <vPortExitCritical>
 8007944:	2301      	movs	r3, #1
 8007946:	e069      	b.n	8007a1c <xQueueReceive+0x138>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d103      	bne.n	8007956 <xQueueReceive+0x72>
 800794e:	f001 fd8d 	bl	800946c <vPortExitCritical>
 8007952:	2300      	movs	r3, #0
 8007954:	e062      	b.n	8007a1c <xQueueReceive+0x138>
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	d106      	bne.n	800796a <xQueueReceive+0x86>
 800795c:	f107 0314 	add.w	r3, r7, #20
 8007960:	4618      	mov	r0, r3
 8007962:	f000 ff59 	bl	8008818 <vTaskInternalSetTimeOutState>
 8007966:	2301      	movs	r3, #1
 8007968:	627b      	str	r3, [r7, #36]	; 0x24
 800796a:	f001 fd7f 	bl	800946c <vPortExitCritical>
 800796e:	f000 fd23 	bl	80083b8 <vTaskSuspendAll>
 8007972:	f001 fd61 	bl	8009438 <vPortEnterCritical>
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800797c:	b25b      	sxtb	r3, r3
 800797e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007982:	d103      	bne.n	800798c <xQueueReceive+0xa8>
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007992:	b25b      	sxtb	r3, r3
 8007994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007998:	d103      	bne.n	80079a2 <xQueueReceive+0xbe>
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079a2:	f001 fd63 	bl	800946c <vPortExitCritical>
 80079a6:	1d3a      	adds	r2, r7, #4
 80079a8:	f107 0314 	add.w	r3, r7, #20
 80079ac:	4611      	mov	r1, r2
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 ff48 	bl	8008844 <xTaskCheckForTimeOut>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d123      	bne.n	8007a02 <xQueueReceive+0x11e>
 80079ba:	6a38      	ldr	r0, [r7, #32]
 80079bc:	f000 fa99 	bl	8007ef2 <prvIsQueueEmpty>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d017      	beq.n	80079f6 <xQueueReceive+0x112>
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	3324      	adds	r3, #36	; 0x24
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	4611      	mov	r1, r2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fe98 	bl	8008704 <vTaskPlaceOnEventList>
 80079d4:	6a38      	ldr	r0, [r7, #32]
 80079d6:	f000 fa3a 	bl	8007e4e <prvUnlockQueue>
 80079da:	f000 fcfb 	bl	80083d4 <xTaskResumeAll>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d189      	bne.n	80078f8 <xQueueReceive+0x14>
 80079e4:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <xQueueReceive+0x140>)
 80079e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	e780      	b.n	80078f8 <xQueueReceive+0x14>
 80079f6:	6a38      	ldr	r0, [r7, #32]
 80079f8:	f000 fa29 	bl	8007e4e <prvUnlockQueue>
 80079fc:	f000 fcea 	bl	80083d4 <xTaskResumeAll>
 8007a00:	e77a      	b.n	80078f8 <xQueueReceive+0x14>
 8007a02:	6a38      	ldr	r0, [r7, #32]
 8007a04:	f000 fa23 	bl	8007e4e <prvUnlockQueue>
 8007a08:	f000 fce4 	bl	80083d4 <xTaskResumeAll>
 8007a0c:	6a38      	ldr	r0, [r7, #32]
 8007a0e:	f000 fa70 	bl	8007ef2 <prvIsQueueEmpty>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f43f af6f 	beq.w	80078f8 <xQueueReceive+0x14>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3728      	adds	r7, #40	; 0x28
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	e000ed04 	.word	0xe000ed04

08007a28 <xQueueSemaphoreTake>:
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
 8007a32:	2300      	movs	r3, #0
 8007a34:	627b      	str	r3, [r7, #36]	; 0x24
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	61fb      	str	r3, [r7, #28]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	623b      	str	r3, [r7, #32]
 8007a3e:	f001 fcfb 	bl	8009438 <vPortEnterCritical>
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	61bb      	str	r3, [r7, #24]
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d024      	beq.n	8007a98 <xQueueSemaphoreTake+0x70>
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	1e5a      	subs	r2, r3, #1
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	639a      	str	r2, [r3, #56]	; 0x38
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d104      	bne.n	8007a68 <xQueueSemaphoreTake+0x40>
 8007a5e:	f001 f949 	bl	8008cf4 <pvTaskIncrementMutexHeldCount>
 8007a62:	4602      	mov	r2, r0
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	605a      	str	r2, [r3, #4]
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00f      	beq.n	8007a90 <xQueueSemaphoreTake+0x68>
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	3310      	adds	r3, #16
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 fe79 	bl	800876c <xTaskRemoveFromEventList>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d007      	beq.n	8007a90 <xQueueSemaphoreTake+0x68>
 8007a80:	4b4c      	ldr	r3, [pc, #304]	; (8007bb4 <xQueueSemaphoreTake+0x18c>)
 8007a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f001 fcec 	bl	800946c <vPortExitCritical>
 8007a94:	2301      	movs	r3, #1
 8007a96:	e089      	b.n	8007bac <xQueueSemaphoreTake+0x184>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d103      	bne.n	8007aa6 <xQueueSemaphoreTake+0x7e>
 8007a9e:	f001 fce5 	bl	800946c <vPortExitCritical>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e082      	b.n	8007bac <xQueueSemaphoreTake+0x184>
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d106      	bne.n	8007aba <xQueueSemaphoreTake+0x92>
 8007aac:	f107 030c 	add.w	r3, r7, #12
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 feb1 	bl	8008818 <vTaskInternalSetTimeOutState>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8007aba:	f001 fcd7 	bl	800946c <vPortExitCritical>
 8007abe:	f000 fc7b 	bl	80083b8 <vTaskSuspendAll>
 8007ac2:	f001 fcb9 	bl	8009438 <vPortEnterCritical>
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007acc:	b25b      	sxtb	r3, r3
 8007ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad2:	d103      	bne.n	8007adc <xQueueSemaphoreTake+0xb4>
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ae2:	b25b      	sxtb	r3, r3
 8007ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae8:	d103      	bne.n	8007af2 <xQueueSemaphoreTake+0xca>
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007af2:	f001 fcbb 	bl	800946c <vPortExitCritical>
 8007af6:	463a      	mov	r2, r7
 8007af8:	f107 030c 	add.w	r3, r7, #12
 8007afc:	4611      	mov	r1, r2
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 fea0 	bl	8008844 <xTaskCheckForTimeOut>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d132      	bne.n	8007b70 <xQueueSemaphoreTake+0x148>
 8007b0a:	69f8      	ldr	r0, [r7, #28]
 8007b0c:	f000 f9f1 	bl	8007ef2 <prvIsQueueEmpty>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d026      	beq.n	8007b64 <xQueueSemaphoreTake+0x13c>
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d109      	bne.n	8007b32 <xQueueSemaphoreTake+0x10a>
 8007b1e:	f001 fc8b 	bl	8009438 <vPortEnterCritical>
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 ffc4 	bl	8008ab4 <xTaskPriorityInherit>
 8007b2c:	6238      	str	r0, [r7, #32]
 8007b2e:	f001 fc9d 	bl	800946c <vPortExitCritical>
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	3324      	adds	r3, #36	; 0x24
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	4611      	mov	r1, r2
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 fde2 	bl	8008704 <vTaskPlaceOnEventList>
 8007b40:	69f8      	ldr	r0, [r7, #28]
 8007b42:	f000 f984 	bl	8007e4e <prvUnlockQueue>
 8007b46:	f000 fc45 	bl	80083d4 <xTaskResumeAll>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f47f af76 	bne.w	8007a3e <xQueueSemaphoreTake+0x16>
 8007b52:	4b18      	ldr	r3, [pc, #96]	; (8007bb4 <xQueueSemaphoreTake+0x18c>)
 8007b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	e76c      	b.n	8007a3e <xQueueSemaphoreTake+0x16>
 8007b64:	69f8      	ldr	r0, [r7, #28]
 8007b66:	f000 f972 	bl	8007e4e <prvUnlockQueue>
 8007b6a:	f000 fc33 	bl	80083d4 <xTaskResumeAll>
 8007b6e:	e766      	b.n	8007a3e <xQueueSemaphoreTake+0x16>
 8007b70:	69f8      	ldr	r0, [r7, #28]
 8007b72:	f000 f96c 	bl	8007e4e <prvUnlockQueue>
 8007b76:	f000 fc2d 	bl	80083d4 <xTaskResumeAll>
 8007b7a:	69f8      	ldr	r0, [r7, #28]
 8007b7c:	f000 f9b9 	bl	8007ef2 <prvIsQueueEmpty>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f43f af5b 	beq.w	8007a3e <xQueueSemaphoreTake+0x16>
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00d      	beq.n	8007baa <xQueueSemaphoreTake+0x182>
 8007b8e:	f001 fc53 	bl	8009438 <vPortEnterCritical>
 8007b92:	69f8      	ldr	r0, [r7, #28]
 8007b94:	f000 f8b4 	bl	8007d00 <prvGetDisinheritPriorityAfterTimeout>
 8007b98:	6178      	str	r0, [r7, #20]
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	6979      	ldr	r1, [r7, #20]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f001 f841 	bl	8008c28 <vTaskPriorityDisinheritAfterTimeout>
 8007ba6:	f001 fc61 	bl	800946c <vPortExitCritical>
 8007baa:	2300      	movs	r3, #0
 8007bac:	4618      	mov	r0, r3
 8007bae:	3728      	adds	r7, #40	; 0x28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	e000ed04 	.word	0xe000ed04

08007bb8 <xQueuePeek>:
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08a      	sub	sp, #40	; 0x28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	623b      	str	r3, [r7, #32]
 8007bcc:	f001 fc34 	bl	8009438 <vPortEnterCritical>
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd4:	61fb      	str	r3, [r7, #28]
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d021      	beq.n	8007c20 <xQueuePeek+0x68>
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	6a38      	ldr	r0, [r7, #32]
 8007be6:	f000 f90c 	bl	8007e02 <prvCopyDataFromQueue>
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	60da      	str	r2, [r3, #12]
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00f      	beq.n	8007c18 <xQueuePeek+0x60>
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	3324      	adds	r3, #36	; 0x24
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 fdb5 	bl	800876c <xTaskRemoveFromEventList>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d007      	beq.n	8007c18 <xQueuePeek+0x60>
 8007c08:	4b3c      	ldr	r3, [pc, #240]	; (8007cfc <xQueuePeek+0x144>)
 8007c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f001 fc28 	bl	800946c <vPortExitCritical>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e069      	b.n	8007cf4 <xQueuePeek+0x13c>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d103      	bne.n	8007c2e <xQueuePeek+0x76>
 8007c26:	f001 fc21 	bl	800946c <vPortExitCritical>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e062      	b.n	8007cf4 <xQueuePeek+0x13c>
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d106      	bne.n	8007c42 <xQueuePeek+0x8a>
 8007c34:	f107 0310 	add.w	r3, r7, #16
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fded 	bl	8008818 <vTaskInternalSetTimeOutState>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
 8007c42:	f001 fc13 	bl	800946c <vPortExitCritical>
 8007c46:	f000 fbb7 	bl	80083b8 <vTaskSuspendAll>
 8007c4a:	f001 fbf5 	bl	8009438 <vPortEnterCritical>
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c54:	b25b      	sxtb	r3, r3
 8007c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5a:	d103      	bne.n	8007c64 <xQueuePeek+0xac>
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c6a:	b25b      	sxtb	r3, r3
 8007c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c70:	d103      	bne.n	8007c7a <xQueuePeek+0xc2>
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c7a:	f001 fbf7 	bl	800946c <vPortExitCritical>
 8007c7e:	1d3a      	adds	r2, r7, #4
 8007c80:	f107 0310 	add.w	r3, r7, #16
 8007c84:	4611      	mov	r1, r2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fddc 	bl	8008844 <xTaskCheckForTimeOut>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d123      	bne.n	8007cda <xQueuePeek+0x122>
 8007c92:	6a38      	ldr	r0, [r7, #32]
 8007c94:	f000 f92d 	bl	8007ef2 <prvIsQueueEmpty>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d017      	beq.n	8007cce <xQueuePeek+0x116>
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	3324      	adds	r3, #36	; 0x24
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fd2c 	bl	8008704 <vTaskPlaceOnEventList>
 8007cac:	6a38      	ldr	r0, [r7, #32]
 8007cae:	f000 f8ce 	bl	8007e4e <prvUnlockQueue>
 8007cb2:	f000 fb8f 	bl	80083d4 <xTaskResumeAll>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d187      	bne.n	8007bcc <xQueuePeek+0x14>
 8007cbc:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <xQueuePeek+0x144>)
 8007cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	e77e      	b.n	8007bcc <xQueuePeek+0x14>
 8007cce:	6a38      	ldr	r0, [r7, #32]
 8007cd0:	f000 f8bd 	bl	8007e4e <prvUnlockQueue>
 8007cd4:	f000 fb7e 	bl	80083d4 <xTaskResumeAll>
 8007cd8:	e778      	b.n	8007bcc <xQueuePeek+0x14>
 8007cda:	6a38      	ldr	r0, [r7, #32]
 8007cdc:	f000 f8b7 	bl	8007e4e <prvUnlockQueue>
 8007ce0:	f000 fb78 	bl	80083d4 <xTaskResumeAll>
 8007ce4:	6a38      	ldr	r0, [r7, #32]
 8007ce6:	f000 f904 	bl	8007ef2 <prvIsQueueEmpty>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f43f af6d 	beq.w	8007bcc <xQueuePeek+0x14>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3728      	adds	r7, #40	; 0x28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	e000ed04 	.word	0xe000ed04

08007d00 <prvGetDisinheritPriorityAfterTimeout>:
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d006      	beq.n	8007d1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	e001      	b.n	8007d22 <prvGetDisinheritPriorityAfterTimeout+0x22>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bc80      	pop	{r7}
 8007d2c:	4770      	bx	lr

08007d2e <prvCopyDataToQueue>:
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b086      	sub	sp, #24
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	607a      	str	r2, [r7, #4]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	617b      	str	r3, [r7, #20]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d42:	613b      	str	r3, [r7, #16]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10d      	bne.n	8007d68 <prvCopyDataToQueue+0x3a>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d14d      	bne.n	8007df0 <prvCopyDataToQueue+0xc2>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 ff19 	bl	8008b90 <xTaskPriorityDisinherit>
 8007d5e:	6178      	str	r0, [r7, #20]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	605a      	str	r2, [r3, #4]
 8007d66:	e043      	b.n	8007df0 <prvCopyDataToQueue+0xc2>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d119      	bne.n	8007da2 <prvCopyDataToQueue+0x74>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6898      	ldr	r0, [r3, #8]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d76:	461a      	mov	r2, r3
 8007d78:	68b9      	ldr	r1, [r7, #8]
 8007d7a:	f001 fda5 	bl	80098c8 <memcpy>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	441a      	add	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	609a      	str	r2, [r3, #8]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d32b      	bcc.n	8007df0 <prvCopyDataToQueue+0xc2>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	609a      	str	r2, [r3, #8]
 8007da0:	e026      	b.n	8007df0 <prvCopyDataToQueue+0xc2>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	68d8      	ldr	r0, [r3, #12]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	461a      	mov	r2, r3
 8007dac:	68b9      	ldr	r1, [r7, #8]
 8007dae:	f001 fd8b 	bl	80098c8 <memcpy>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	425b      	negs	r3, r3
 8007dbc:	441a      	add	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	60da      	str	r2, [r3, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d207      	bcs.n	8007dde <prvCopyDataToQueue+0xb0>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	425b      	negs	r3, r3
 8007dd8:	441a      	add	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	60da      	str	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d105      	bne.n	8007df0 <prvCopyDataToQueue+0xc2>
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <prvCopyDataToQueue+0xc2>
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	613b      	str	r3, [r7, #16]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	1c5a      	adds	r2, r3, #1
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	639a      	str	r2, [r3, #56]	; 0x38
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <prvCopyDataFromQueue>:
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d018      	beq.n	8007e46 <prvCopyDataFromQueue+0x44>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1c:	441a      	add	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	60da      	str	r2, [r3, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d303      	bcc.n	8007e36 <prvCopyDataFromQueue+0x34>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	60da      	str	r2, [r3, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68d9      	ldr	r1, [r3, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	461a      	mov	r2, r3
 8007e40:	6838      	ldr	r0, [r7, #0]
 8007e42:	f001 fd41 	bl	80098c8 <memcpy>
 8007e46:	bf00      	nop
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <prvUnlockQueue>:
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	f001 faef 	bl	8009438 <vPortEnterCritical>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e60:	73fb      	strb	r3, [r7, #15]
 8007e62:	e011      	b.n	8007e88 <prvUnlockQueue+0x3a>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d012      	beq.n	8007e92 <prvUnlockQueue+0x44>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3324      	adds	r3, #36	; 0x24
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fc7b 	bl	800876c <xTaskRemoveFromEventList>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <prvUnlockQueue+0x32>
 8007e7c:	f000 fd28 	bl	80088d0 <vTaskMissedYield>
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	73fb      	strb	r3, [r7, #15]
 8007e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	dce9      	bgt.n	8007e64 <prvUnlockQueue+0x16>
 8007e90:	e000      	b.n	8007e94 <prvUnlockQueue+0x46>
 8007e92:	bf00      	nop
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	22ff      	movs	r2, #255	; 0xff
 8007e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e9c:	f001 fae6 	bl	800946c <vPortExitCritical>
 8007ea0:	f001 faca 	bl	8009438 <vPortEnterCritical>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eaa:	73bb      	strb	r3, [r7, #14]
 8007eac:	e011      	b.n	8007ed2 <prvUnlockQueue+0x84>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d012      	beq.n	8007edc <prvUnlockQueue+0x8e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3310      	adds	r3, #16
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fc56 	bl	800876c <xTaskRemoveFromEventList>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <prvUnlockQueue+0x7c>
 8007ec6:	f000 fd03 	bl	80088d0 <vTaskMissedYield>
 8007eca:	7bbb      	ldrb	r3, [r7, #14]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	73bb      	strb	r3, [r7, #14]
 8007ed2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	dce9      	bgt.n	8007eae <prvUnlockQueue+0x60>
 8007eda:	e000      	b.n	8007ede <prvUnlockQueue+0x90>
 8007edc:	bf00      	nop
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	22ff      	movs	r2, #255	; 0xff
 8007ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ee6:	f001 fac1 	bl	800946c <vPortExitCritical>
 8007eea:	bf00      	nop
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <prvIsQueueEmpty>:
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	f001 fa9d 	bl	8009438 <vPortEnterCritical>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d102      	bne.n	8007f0c <prvIsQueueEmpty+0x1a>
 8007f06:	2301      	movs	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]
 8007f0a:	e001      	b.n	8007f10 <prvIsQueueEmpty+0x1e>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	f001 faac 	bl	800946c <vPortExitCritical>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <prvIsQueueFull>:
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	f001 fa87 	bl	8009438 <vPortEnterCritical>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d102      	bne.n	8007f3c <prvIsQueueFull+0x1e>
 8007f36:	2301      	movs	r3, #1
 8007f38:	60fb      	str	r3, [r7, #12]
 8007f3a:	e001      	b.n	8007f40 <prvIsQueueFull+0x22>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	f001 fa94 	bl	800946c <vPortExitCritical>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <vQueueAddToRegistry>:
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	e014      	b.n	8007f8a <vQueueAddToRegistry+0x3a>
 8007f60:	4a0e      	ldr	r2, [pc, #56]	; (8007f9c <vQueueAddToRegistry+0x4c>)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10b      	bne.n	8007f84 <vQueueAddToRegistry+0x34>
 8007f6c:	490b      	ldr	r1, [pc, #44]	; (8007f9c <vQueueAddToRegistry+0x4c>)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8007f76:	4a09      	ldr	r2, [pc, #36]	; (8007f9c <vQueueAddToRegistry+0x4c>)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	4413      	add	r3, r2
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	605a      	str	r2, [r3, #4]
 8007f82:	e006      	b.n	8007f92 <vQueueAddToRegistry+0x42>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	3301      	adds	r3, #1
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b07      	cmp	r3, #7
 8007f8e:	d9e7      	bls.n	8007f60 <vQueueAddToRegistry+0x10>
 8007f90:	bf00      	nop
 8007f92:	bf00      	nop
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bc80      	pop	{r7}
 8007f9a:	4770      	bx	lr
 8007f9c:	20003e98 	.word	0x20003e98

08007fa0 <vQueueWaitForMessageRestricted>:
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	617b      	str	r3, [r7, #20]
 8007fb0:	f001 fa42 	bl	8009438 <vPortEnterCritical>
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fba:	b25b      	sxtb	r3, r3
 8007fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc0:	d103      	bne.n	8007fca <vQueueWaitForMessageRestricted+0x2a>
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fd0:	b25b      	sxtb	r3, r3
 8007fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd6:	d103      	bne.n	8007fe0 <vQueueWaitForMessageRestricted+0x40>
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fe0:	f001 fa44 	bl	800946c <vPortExitCritical>
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d106      	bne.n	8007ffa <vQueueWaitForMessageRestricted+0x5a>
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	3324      	adds	r3, #36	; 0x24
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 fb9b 	bl	8008730 <vTaskPlaceOnEventListRestricted>
 8007ffa:	6978      	ldr	r0, [r7, #20]
 8007ffc:	f7ff ff27 	bl	8007e4e <prvUnlockQueue>
 8008000:	bf00      	nop
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <xTaskCreateStatic>:
 8008008:	b580      	push	{r7, lr}
 800800a:	b08a      	sub	sp, #40	; 0x28
 800800c:	af04      	add	r7, sp, #16
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
 8008014:	603b      	str	r3, [r7, #0]
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	2b00      	cmp	r3, #0
 800801a:	d01e      	beq.n	800805a <xTaskCreateStatic+0x52>
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	2b00      	cmp	r3, #0
 8008020:	d01b      	beq.n	800805a <xTaskCreateStatic+0x52>
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	617b      	str	r3, [r7, #20]
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802a:	631a      	str	r2, [r3, #48]	; 0x30
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8008034:	2300      	movs	r3, #0
 8008036:	9303      	str	r3, [sp, #12]
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	9302      	str	r3, [sp, #8]
 800803c:	f107 0310 	add.w	r3, r7, #16
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	68b9      	ldr	r1, [r7, #8]
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 f850 	bl	80080f2 <prvInitialiseNewTask>
 8008052:	6978      	ldr	r0, [r7, #20]
 8008054:	f000 f8c4 	bl	80081e0 <prvAddNewTaskToReadyList>
 8008058:	e001      	b.n	800805e <xTaskCreateStatic+0x56>
 800805a:	2300      	movs	r3, #0
 800805c:	613b      	str	r3, [r7, #16]
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	4618      	mov	r0, r3
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <xTaskCreate>:
 8008068:	b580      	push	{r7, lr}
 800806a:	b08c      	sub	sp, #48	; 0x30
 800806c:	af04      	add	r7, sp, #16
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	4613      	mov	r3, r2
 8008076:	80fb      	strh	r3, [r7, #6]
 8008078:	88fb      	ldrh	r3, [r7, #6]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4618      	mov	r0, r3
 800807e:	f001 fa77 	bl	8009570 <pvPortMalloc>
 8008082:	6178      	str	r0, [r7, #20]
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00e      	beq.n	80080a8 <xTaskCreate+0x40>
 800808a:	205c      	movs	r0, #92	; 0x5c
 800808c:	f001 fa70 	bl	8009570 <pvPortMalloc>
 8008090:	61f8      	str	r0, [r7, #28]
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d003      	beq.n	80080a0 <xTaskCreate+0x38>
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	631a      	str	r2, [r3, #48]	; 0x30
 800809e:	e005      	b.n	80080ac <xTaskCreate+0x44>
 80080a0:	6978      	ldr	r0, [r7, #20]
 80080a2:	f001 faf9 	bl	8009698 <vPortFree>
 80080a6:	e001      	b.n	80080ac <xTaskCreate+0x44>
 80080a8:	2300      	movs	r3, #0
 80080aa:	61fb      	str	r3, [r7, #28]
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d017      	beq.n	80080e2 <xTaskCreate+0x7a>
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80080ba:	88fa      	ldrh	r2, [r7, #6]
 80080bc:	2300      	movs	r3, #0
 80080be:	9303      	str	r3, [sp, #12]
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	9302      	str	r3, [sp, #8]
 80080c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 f80e 	bl	80080f2 <prvInitialiseNewTask>
 80080d6:	69f8      	ldr	r0, [r7, #28]
 80080d8:	f000 f882 	bl	80081e0 <prvAddNewTaskToReadyList>
 80080dc:	2301      	movs	r3, #1
 80080de:	61bb      	str	r3, [r7, #24]
 80080e0:	e002      	b.n	80080e8 <xTaskCreate+0x80>
 80080e2:	f04f 33ff 	mov.w	r3, #4294967295
 80080e6:	61bb      	str	r3, [r7, #24]
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	4618      	mov	r0, r3
 80080ec:	3720      	adds	r7, #32
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <prvInitialiseNewTask>:
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b086      	sub	sp, #24
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	603b      	str	r3, [r7, #0]
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	461a      	mov	r2, r3
 800810a:	21a5      	movs	r1, #165	; 0xa5
 800810c:	f001 fbea 	bl	80098e4 <memset>
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800811a:	3b01      	subs	r3, #1
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	613b      	str	r3, [r7, #16]
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f023 0307 	bic.w	r3, r3, #7
 8008128:	613b      	str	r3, [r7, #16]
 800812a:	2300      	movs	r3, #0
 800812c:	617b      	str	r3, [r7, #20]
 800812e:	e012      	b.n	8008156 <prvInitialiseNewTask+0x64>
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	4413      	add	r3, r2
 8008136:	7819      	ldrb	r1, [r3, #0]
 8008138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	4413      	add	r3, r2
 800813e:	3334      	adds	r3, #52	; 0x34
 8008140:	460a      	mov	r2, r1
 8008142:	701a      	strb	r2, [r3, #0]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	4413      	add	r3, r2
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d006      	beq.n	800815e <prvInitialiseNewTask+0x6c>
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	3301      	adds	r3, #1
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b0f      	cmp	r3, #15
 800815a:	d9e9      	bls.n	8008130 <prvInitialiseNewTask+0x3e>
 800815c:	e000      	b.n	8008160 <prvInitialiseNewTask+0x6e>
 800815e:	bf00      	nop
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	2b37      	cmp	r3, #55	; 0x37
 800816c:	d901      	bls.n	8008172 <prvInitialiseNewTask+0x80>
 800816e:	2337      	movs	r3, #55	; 0x37
 8008170:	623b      	str	r3, [r7, #32]
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	6a3a      	ldr	r2, [r7, #32]
 8008176:	62da      	str	r2, [r3, #44]	; 0x2c
 8008178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817a:	6a3a      	ldr	r2, [r7, #32]
 800817c:	64da      	str	r2, [r3, #76]	; 0x4c
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	2200      	movs	r2, #0
 8008182:	651a      	str	r2, [r3, #80]	; 0x50
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	3304      	adds	r3, #4
 8008188:	4618      	mov	r0, r3
 800818a:	f7ff f8e0 	bl	800734e <vListInitialiseItem>
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	3318      	adds	r3, #24
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff f8db 	bl	800734e <vListInitialiseItem>
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800819c:	611a      	str	r2, [r3, #16]
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	619a      	str	r2, [r3, #24]
 80081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081ac:	625a      	str	r2, [r3, #36]	; 0x24
 80081ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b0:	2200      	movs	r2, #0
 80081b2:	655a      	str	r2, [r3, #84]	; 0x54
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	68f9      	ldr	r1, [r7, #12]
 80081c0:	6938      	ldr	r0, [r7, #16]
 80081c2:	f001 f8af 	bl	8009324 <pxPortInitialiseStack>
 80081c6:	4602      	mov	r2, r0
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <prvInitialiseNewTask+0xe6>
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	bf00      	nop
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <prvAddNewTaskToReadyList>:
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	f001 f926 	bl	8009438 <vPortEnterCritical>
 80081ec:	4b2d      	ldr	r3, [pc, #180]	; (80082a4 <prvAddNewTaskToReadyList+0xc4>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3301      	adds	r3, #1
 80081f2:	4a2c      	ldr	r2, [pc, #176]	; (80082a4 <prvAddNewTaskToReadyList+0xc4>)
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	4b2c      	ldr	r3, [pc, #176]	; (80082a8 <prvAddNewTaskToReadyList+0xc8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <prvAddNewTaskToReadyList+0x32>
 80081fe:	4a2a      	ldr	r2, [pc, #168]	; (80082a8 <prvAddNewTaskToReadyList+0xc8>)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	4b27      	ldr	r3, [pc, #156]	; (80082a4 <prvAddNewTaskToReadyList+0xc4>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d110      	bne.n	800822e <prvAddNewTaskToReadyList+0x4e>
 800820c:	f000 fb84 	bl	8008918 <prvInitialiseTaskLists>
 8008210:	e00d      	b.n	800822e <prvAddNewTaskToReadyList+0x4e>
 8008212:	4b26      	ldr	r3, [pc, #152]	; (80082ac <prvAddNewTaskToReadyList+0xcc>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d109      	bne.n	800822e <prvAddNewTaskToReadyList+0x4e>
 800821a:	4b23      	ldr	r3, [pc, #140]	; (80082a8 <prvAddNewTaskToReadyList+0xc8>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	429a      	cmp	r2, r3
 8008226:	d802      	bhi.n	800822e <prvAddNewTaskToReadyList+0x4e>
 8008228:	4a1f      	ldr	r2, [pc, #124]	; (80082a8 <prvAddNewTaskToReadyList+0xc8>)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	4b20      	ldr	r3, [pc, #128]	; (80082b0 <prvAddNewTaskToReadyList+0xd0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	4a1e      	ldr	r2, [pc, #120]	; (80082b0 <prvAddNewTaskToReadyList+0xd0>)
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	4b1d      	ldr	r3, [pc, #116]	; (80082b0 <prvAddNewTaskToReadyList+0xd0>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	645a      	str	r2, [r3, #68]	; 0x44
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008244:	4b1b      	ldr	r3, [pc, #108]	; (80082b4 <prvAddNewTaskToReadyList+0xd4>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d903      	bls.n	8008254 <prvAddNewTaskToReadyList+0x74>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	4a18      	ldr	r2, [pc, #96]	; (80082b4 <prvAddNewTaskToReadyList+0xd4>)
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008258:	4613      	mov	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4a15      	ldr	r2, [pc, #84]	; (80082b8 <prvAddNewTaskToReadyList+0xd8>)
 8008262:	441a      	add	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3304      	adds	r3, #4
 8008268:	4619      	mov	r1, r3
 800826a:	4610      	mov	r0, r2
 800826c:	f7ff f87b 	bl	8007366 <vListInsertEnd>
 8008270:	f001 f8fc 	bl	800946c <vPortExitCritical>
 8008274:	4b0d      	ldr	r3, [pc, #52]	; (80082ac <prvAddNewTaskToReadyList+0xcc>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00e      	beq.n	800829a <prvAddNewTaskToReadyList+0xba>
 800827c:	4b0a      	ldr	r3, [pc, #40]	; (80082a8 <prvAddNewTaskToReadyList+0xc8>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	429a      	cmp	r2, r3
 8008288:	d207      	bcs.n	800829a <prvAddNewTaskToReadyList+0xba>
 800828a:	4b0c      	ldr	r3, [pc, #48]	; (80082bc <prvAddNewTaskToReadyList+0xdc>)
 800828c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20000bc8 	.word	0x20000bc8
 80082a8:	200006f4 	.word	0x200006f4
 80082ac:	20000bd4 	.word	0x20000bd4
 80082b0:	20000be4 	.word	0x20000be4
 80082b4:	20000bd0 	.word	0x20000bd0
 80082b8:	200006f8 	.word	0x200006f8
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <vTaskDelay>:
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	2300      	movs	r3, #0
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d008      	beq.n	80082e4 <vTaskDelay+0x24>
 80082d2:	f000 f871 	bl	80083b8 <vTaskSuspendAll>
 80082d6:	2100      	movs	r1, #0
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fd1f 	bl	8008d1c <prvAddCurrentTaskToDelayedList>
 80082de:	f000 f879 	bl	80083d4 <xTaskResumeAll>
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d107      	bne.n	80082fa <vTaskDelay+0x3a>
 80082ea:	4b06      	ldr	r3, [pc, #24]	; (8008304 <vTaskDelay+0x44>)
 80082ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	e000ed04 	.word	0xe000ed04

08008308 <vTaskStartScheduler>:
 8008308:	b580      	push	{r7, lr}
 800830a:	b08a      	sub	sp, #40	; 0x28
 800830c:	af04      	add	r7, sp, #16
 800830e:	2300      	movs	r3, #0
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	2300      	movs	r3, #0
 8008314:	60bb      	str	r3, [r7, #8]
 8008316:	1d3a      	adds	r2, r7, #4
 8008318:	f107 0108 	add.w	r1, r7, #8
 800831c:	f107 030c 	add.w	r3, r7, #12
 8008320:	4618      	mov	r0, r3
 8008322:	f7fe ffc3 	bl	80072ac <vApplicationGetIdleTaskMemory>
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	9202      	str	r2, [sp, #8]
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	2300      	movs	r3, #0
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	2300      	movs	r3, #0
 8008336:	460a      	mov	r2, r1
 8008338:	4919      	ldr	r1, [pc, #100]	; (80083a0 <vTaskStartScheduler+0x98>)
 800833a:	481a      	ldr	r0, [pc, #104]	; (80083a4 <vTaskStartScheduler+0x9c>)
 800833c:	f7ff fe64 	bl	8008008 <xTaskCreateStatic>
 8008340:	4603      	mov	r3, r0
 8008342:	4a19      	ldr	r2, [pc, #100]	; (80083a8 <vTaskStartScheduler+0xa0>)
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	4b18      	ldr	r3, [pc, #96]	; (80083a8 <vTaskStartScheduler+0xa0>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <vTaskStartScheduler+0x4c>
 800834e:	2301      	movs	r3, #1
 8008350:	617b      	str	r3, [r7, #20]
 8008352:	e001      	b.n	8008358 <vTaskStartScheduler+0x50>
 8008354:	2300      	movs	r3, #0
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d102      	bne.n	8008364 <vTaskStartScheduler+0x5c>
 800835e:	f000 fd31 	bl	8008dc4 <xTimerCreateTimerTask>
 8008362:	6178      	str	r0, [r7, #20]
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d115      	bne.n	8008396 <vTaskStartScheduler+0x8e>
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	613b      	str	r3, [r7, #16]
 800837c:	bf00      	nop
 800837e:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <vTaskStartScheduler+0xa4>)
 8008380:	f04f 32ff 	mov.w	r2, #4294967295
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <vTaskStartScheduler+0xa8>)
 8008388:	2201      	movs	r2, #1
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <vTaskStartScheduler+0xac>)
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	f001 f831 	bl	80093f8 <xPortStartScheduler>
 8008396:	bf00      	nop
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	08009990 	.word	0x08009990
 80083a4:	080088e9 	.word	0x080088e9
 80083a8:	20000bec 	.word	0x20000bec
 80083ac:	20000be8 	.word	0x20000be8
 80083b0:	20000bd4 	.word	0x20000bd4
 80083b4:	20000bcc 	.word	0x20000bcc

080083b8 <vTaskSuspendAll>:
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	4b04      	ldr	r3, [pc, #16]	; (80083d0 <vTaskSuspendAll+0x18>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3301      	adds	r3, #1
 80083c2:	4a03      	ldr	r2, [pc, #12]	; (80083d0 <vTaskSuspendAll+0x18>)
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	bf00      	nop
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	20000bf0 	.word	0x20000bf0

080083d4 <xTaskResumeAll>:
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	2300      	movs	r3, #0
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	2300      	movs	r3, #0
 80083e0:	60bb      	str	r3, [r7, #8]
 80083e2:	f001 f829 	bl	8009438 <vPortEnterCritical>
 80083e6:	4b39      	ldr	r3, [pc, #228]	; (80084cc <xTaskResumeAll+0xf8>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	4a37      	ldr	r2, [pc, #220]	; (80084cc <xTaskResumeAll+0xf8>)
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	4b36      	ldr	r3, [pc, #216]	; (80084cc <xTaskResumeAll+0xf8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d162      	bne.n	80084be <xTaskResumeAll+0xea>
 80083f8:	4b35      	ldr	r3, [pc, #212]	; (80084d0 <xTaskResumeAll+0xfc>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d05e      	beq.n	80084be <xTaskResumeAll+0xea>
 8008400:	e02f      	b.n	8008462 <xTaskResumeAll+0x8e>
 8008402:	4b34      	ldr	r3, [pc, #208]	; (80084d4 <xTaskResumeAll+0x100>)
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3318      	adds	r3, #24
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff f804 	bl	800741c <uxListRemove>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3304      	adds	r3, #4
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe ffff 	bl	800741c <uxListRemove>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008422:	4b2d      	ldr	r3, [pc, #180]	; (80084d8 <xTaskResumeAll+0x104>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d903      	bls.n	8008432 <xTaskResumeAll+0x5e>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842e:	4a2a      	ldr	r2, [pc, #168]	; (80084d8 <xTaskResumeAll+0x104>)
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008436:	4613      	mov	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4a27      	ldr	r2, [pc, #156]	; (80084dc <xTaskResumeAll+0x108>)
 8008440:	441a      	add	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3304      	adds	r3, #4
 8008446:	4619      	mov	r1, r3
 8008448:	4610      	mov	r0, r2
 800844a:	f7fe ff8c 	bl	8007366 <vListInsertEnd>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008452:	4b23      	ldr	r3, [pc, #140]	; (80084e0 <xTaskResumeAll+0x10c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	429a      	cmp	r2, r3
 800845a:	d302      	bcc.n	8008462 <xTaskResumeAll+0x8e>
 800845c:	4b21      	ldr	r3, [pc, #132]	; (80084e4 <xTaskResumeAll+0x110>)
 800845e:	2201      	movs	r2, #1
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	4b1c      	ldr	r3, [pc, #112]	; (80084d4 <xTaskResumeAll+0x100>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1cb      	bne.n	8008402 <xTaskResumeAll+0x2e>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <xTaskResumeAll+0xa0>
 8008470:	f000 fade 	bl	8008a30 <prvResetNextTaskUnblockTime>
 8008474:	4b1c      	ldr	r3, [pc, #112]	; (80084e8 <xTaskResumeAll+0x114>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	607b      	str	r3, [r7, #4]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d010      	beq.n	80084a2 <xTaskResumeAll+0xce>
 8008480:	f000 f844 	bl	800850c <xTaskIncrementTick>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <xTaskResumeAll+0xbc>
 800848a:	4b16      	ldr	r3, [pc, #88]	; (80084e4 <xTaskResumeAll+0x110>)
 800848c:	2201      	movs	r2, #1
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3b01      	subs	r3, #1
 8008494:	607b      	str	r3, [r7, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1f1      	bne.n	8008480 <xTaskResumeAll+0xac>
 800849c:	4b12      	ldr	r3, [pc, #72]	; (80084e8 <xTaskResumeAll+0x114>)
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	4b10      	ldr	r3, [pc, #64]	; (80084e4 <xTaskResumeAll+0x110>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d009      	beq.n	80084be <xTaskResumeAll+0xea>
 80084aa:	2301      	movs	r3, #1
 80084ac:	60bb      	str	r3, [r7, #8]
 80084ae:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <xTaskResumeAll+0x118>)
 80084b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f000 ffd5 	bl	800946c <vPortExitCritical>
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000bf0 	.word	0x20000bf0
 80084d0:	20000bc8 	.word	0x20000bc8
 80084d4:	20000b88 	.word	0x20000b88
 80084d8:	20000bd0 	.word	0x20000bd0
 80084dc:	200006f8 	.word	0x200006f8
 80084e0:	200006f4 	.word	0x200006f4
 80084e4:	20000bdc 	.word	0x20000bdc
 80084e8:	20000bd8 	.word	0x20000bd8
 80084ec:	e000ed04 	.word	0xe000ed04

080084f0 <xTaskGetTickCount>:
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4b04      	ldr	r3, [pc, #16]	; (8008508 <xTaskGetTickCount+0x18>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	607b      	str	r3, [r7, #4]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	bc80      	pop	{r7}
 8008506:	4770      	bx	lr
 8008508:	20000bcc 	.word	0x20000bcc

0800850c <xTaskIncrementTick>:
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	2300      	movs	r3, #0
 8008514:	617b      	str	r3, [r7, #20]
 8008516:	4b49      	ldr	r3, [pc, #292]	; (800863c <xTaskIncrementTick+0x130>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d17d      	bne.n	800861a <xTaskIncrementTick+0x10e>
 800851e:	4b48      	ldr	r3, [pc, #288]	; (8008640 <xTaskIncrementTick+0x134>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3301      	adds	r3, #1
 8008524:	613b      	str	r3, [r7, #16]
 8008526:	4a46      	ldr	r2, [pc, #280]	; (8008640 <xTaskIncrementTick+0x134>)
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d110      	bne.n	8008554 <xTaskIncrementTick+0x48>
 8008532:	4b44      	ldr	r3, [pc, #272]	; (8008644 <xTaskIncrementTick+0x138>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	60fb      	str	r3, [r7, #12]
 8008538:	4b43      	ldr	r3, [pc, #268]	; (8008648 <xTaskIncrementTick+0x13c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a41      	ldr	r2, [pc, #260]	; (8008644 <xTaskIncrementTick+0x138>)
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	4a41      	ldr	r2, [pc, #260]	; (8008648 <xTaskIncrementTick+0x13c>)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	4b41      	ldr	r3, [pc, #260]	; (800864c <xTaskIncrementTick+0x140>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3301      	adds	r3, #1
 800854c:	4a3f      	ldr	r2, [pc, #252]	; (800864c <xTaskIncrementTick+0x140>)
 800854e:	6013      	str	r3, [r2, #0]
 8008550:	f000 fa6e 	bl	8008a30 <prvResetNextTaskUnblockTime>
 8008554:	4b3e      	ldr	r3, [pc, #248]	; (8008650 <xTaskIncrementTick+0x144>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	429a      	cmp	r2, r3
 800855c:	d34e      	bcc.n	80085fc <xTaskIncrementTick+0xf0>
 800855e:	4b39      	ldr	r3, [pc, #228]	; (8008644 <xTaskIncrementTick+0x138>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <xTaskIncrementTick+0x60>
 8008568:	2301      	movs	r3, #1
 800856a:	e000      	b.n	800856e <xTaskIncrementTick+0x62>
 800856c:	2300      	movs	r3, #0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d004      	beq.n	800857c <xTaskIncrementTick+0x70>
 8008572:	4b37      	ldr	r3, [pc, #220]	; (8008650 <xTaskIncrementTick+0x144>)
 8008574:	f04f 32ff 	mov.w	r2, #4294967295
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	e03f      	b.n	80085fc <xTaskIncrementTick+0xf0>
 800857c:	4b31      	ldr	r3, [pc, #196]	; (8008644 <xTaskIncrementTick+0x138>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	60bb      	str	r3, [r7, #8]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	607b      	str	r3, [r7, #4]
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d203      	bcs.n	800859c <xTaskIncrementTick+0x90>
 8008594:	4a2e      	ldr	r2, [pc, #184]	; (8008650 <xTaskIncrementTick+0x144>)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	e02f      	b.n	80085fc <xTaskIncrementTick+0xf0>
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	3304      	adds	r3, #4
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fe ff3b 	bl	800741c <uxListRemove>
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d004      	beq.n	80085b8 <xTaskIncrementTick+0xac>
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	3318      	adds	r3, #24
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe ff32 	bl	800741c <uxListRemove>
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085bc:	4b25      	ldr	r3, [pc, #148]	; (8008654 <xTaskIncrementTick+0x148>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d903      	bls.n	80085cc <xTaskIncrementTick+0xc0>
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	4a22      	ldr	r2, [pc, #136]	; (8008654 <xTaskIncrementTick+0x148>)
 80085ca:	6013      	str	r3, [r2, #0]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d0:	4613      	mov	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4a1f      	ldr	r2, [pc, #124]	; (8008658 <xTaskIncrementTick+0x14c>)
 80085da:	441a      	add	r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	3304      	adds	r3, #4
 80085e0:	4619      	mov	r1, r3
 80085e2:	4610      	mov	r0, r2
 80085e4:	f7fe febf 	bl	8007366 <vListInsertEnd>
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ec:	4b1b      	ldr	r3, [pc, #108]	; (800865c <xTaskIncrementTick+0x150>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d3b3      	bcc.n	800855e <xTaskIncrementTick+0x52>
 80085f6:	2301      	movs	r3, #1
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	e7b0      	b.n	800855e <xTaskIncrementTick+0x52>
 80085fc:	4b17      	ldr	r3, [pc, #92]	; (800865c <xTaskIncrementTick+0x150>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008602:	4915      	ldr	r1, [pc, #84]	; (8008658 <xTaskIncrementTick+0x14c>)
 8008604:	4613      	mov	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	440b      	add	r3, r1
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d907      	bls.n	8008624 <xTaskIncrementTick+0x118>
 8008614:	2301      	movs	r3, #1
 8008616:	617b      	str	r3, [r7, #20]
 8008618:	e004      	b.n	8008624 <xTaskIncrementTick+0x118>
 800861a:	4b11      	ldr	r3, [pc, #68]	; (8008660 <xTaskIncrementTick+0x154>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3301      	adds	r3, #1
 8008620:	4a0f      	ldr	r2, [pc, #60]	; (8008660 <xTaskIncrementTick+0x154>)
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <xTaskIncrementTick+0x158>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <xTaskIncrementTick+0x124>
 800862c:	2301      	movs	r3, #1
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20000bf0 	.word	0x20000bf0
 8008640:	20000bcc 	.word	0x20000bcc
 8008644:	20000b80 	.word	0x20000b80
 8008648:	20000b84 	.word	0x20000b84
 800864c:	20000be0 	.word	0x20000be0
 8008650:	20000be8 	.word	0x20000be8
 8008654:	20000bd0 	.word	0x20000bd0
 8008658:	200006f8 	.word	0x200006f8
 800865c:	200006f4 	.word	0x200006f4
 8008660:	20000bd8 	.word	0x20000bd8
 8008664:	20000bdc 	.word	0x20000bdc

08008668 <vTaskSwitchContext>:
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	4b20      	ldr	r3, [pc, #128]	; (80086f0 <vTaskSwitchContext+0x88>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <vTaskSwitchContext+0x16>
 8008676:	4b1f      	ldr	r3, [pc, #124]	; (80086f4 <vTaskSwitchContext+0x8c>)
 8008678:	2201      	movs	r2, #1
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	e033      	b.n	80086e6 <vTaskSwitchContext+0x7e>
 800867e:	4b1d      	ldr	r3, [pc, #116]	; (80086f4 <vTaskSwitchContext+0x8c>)
 8008680:	2200      	movs	r2, #0
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	4b1c      	ldr	r3, [pc, #112]	; (80086f8 <vTaskSwitchContext+0x90>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	607b      	str	r3, [r7, #4]
 800868a:	e002      	b.n	8008692 <vTaskSwitchContext+0x2a>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3b01      	subs	r3, #1
 8008690:	607b      	str	r3, [r7, #4]
 8008692:	491a      	ldr	r1, [pc, #104]	; (80086fc <vTaskSwitchContext+0x94>)
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	440b      	add	r3, r1
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d0f2      	beq.n	800868c <vTaskSwitchContext+0x24>
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4a12      	ldr	r2, [pc, #72]	; (80086fc <vTaskSwitchContext+0x94>)
 80086b2:	4413      	add	r3, r2
 80086b4:	603b      	str	r3, [r7, #0]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	605a      	str	r2, [r3, #4]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	3308      	adds	r3, #8
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d104      	bne.n	80086d6 <vTaskSwitchContext+0x6e>
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	605a      	str	r2, [r3, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	4a08      	ldr	r2, [pc, #32]	; (8008700 <vTaskSwitchContext+0x98>)
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	4a05      	ldr	r2, [pc, #20]	; (80086f8 <vTaskSwitchContext+0x90>)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr
 80086f0:	20000bf0 	.word	0x20000bf0
 80086f4:	20000bdc 	.word	0x20000bdc
 80086f8:	20000bd0 	.word	0x20000bd0
 80086fc:	200006f8 	.word	0x200006f8
 8008700:	200006f4 	.word	0x200006f4

08008704 <vTaskPlaceOnEventList>:
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
 800870e:	4b07      	ldr	r3, [pc, #28]	; (800872c <vTaskPlaceOnEventList+0x28>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3318      	adds	r3, #24
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7fe fe48 	bl	80073ac <vListInsert>
 800871c:	2101      	movs	r1, #1
 800871e:	6838      	ldr	r0, [r7, #0]
 8008720:	f000 fafc 	bl	8008d1c <prvAddCurrentTaskToDelayedList>
 8008724:	bf00      	nop
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	200006f4 	.word	0x200006f4

08008730 <vTaskPlaceOnEventListRestricted>:
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	4b0a      	ldr	r3, [pc, #40]	; (8008768 <vTaskPlaceOnEventListRestricted+0x38>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3318      	adds	r3, #24
 8008742:	4619      	mov	r1, r3
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f7fe fe0e 	bl	8007366 <vListInsertEnd>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <vTaskPlaceOnEventListRestricted+0x26>
 8008750:	f04f 33ff 	mov.w	r3, #4294967295
 8008754:	60bb      	str	r3, [r7, #8]
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	68b8      	ldr	r0, [r7, #8]
 800875a:	f000 fadf 	bl	8008d1c <prvAddCurrentTaskToDelayedList>
 800875e:	bf00      	nop
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	200006f4 	.word	0x200006f4

0800876c <xTaskRemoveFromEventList>:
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	60bb      	str	r3, [r7, #8]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	3318      	adds	r3, #24
 8008780:	4618      	mov	r0, r3
 8008782:	f7fe fe4b 	bl	800741c <uxListRemove>
 8008786:	4b1e      	ldr	r3, [pc, #120]	; (8008800 <xTaskRemoveFromEventList+0x94>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d11d      	bne.n	80087ca <xTaskRemoveFromEventList+0x5e>
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	3304      	adds	r3, #4
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe fe42 	bl	800741c <uxListRemove>
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879c:	4b19      	ldr	r3, [pc, #100]	; (8008804 <xTaskRemoveFromEventList+0x98>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d903      	bls.n	80087ac <xTaskRemoveFromEventList+0x40>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	4a16      	ldr	r2, [pc, #88]	; (8008804 <xTaskRemoveFromEventList+0x98>)
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4a13      	ldr	r2, [pc, #76]	; (8008808 <xTaskRemoveFromEventList+0x9c>)
 80087ba:	441a      	add	r2, r3
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	3304      	adds	r3, #4
 80087c0:	4619      	mov	r1, r3
 80087c2:	4610      	mov	r0, r2
 80087c4:	f7fe fdcf 	bl	8007366 <vListInsertEnd>
 80087c8:	e005      	b.n	80087d6 <xTaskRemoveFromEventList+0x6a>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	3318      	adds	r3, #24
 80087ce:	4619      	mov	r1, r3
 80087d0:	480e      	ldr	r0, [pc, #56]	; (800880c <xTaskRemoveFromEventList+0xa0>)
 80087d2:	f7fe fdc8 	bl	8007366 <vListInsertEnd>
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087da:	4b0d      	ldr	r3, [pc, #52]	; (8008810 <xTaskRemoveFromEventList+0xa4>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d905      	bls.n	80087f0 <xTaskRemoveFromEventList+0x84>
 80087e4:	2301      	movs	r3, #1
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	4b0a      	ldr	r3, [pc, #40]	; (8008814 <xTaskRemoveFromEventList+0xa8>)
 80087ea:	2201      	movs	r2, #1
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	e001      	b.n	80087f4 <xTaskRemoveFromEventList+0x88>
 80087f0:	2300      	movs	r3, #0
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	20000bf0 	.word	0x20000bf0
 8008804:	20000bd0 	.word	0x20000bd0
 8008808:	200006f8 	.word	0x200006f8
 800880c:	20000b88 	.word	0x20000b88
 8008810:	200006f4 	.word	0x200006f4
 8008814:	20000bdc 	.word	0x20000bdc

08008818 <vTaskInternalSetTimeOutState>:
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	4b06      	ldr	r3, [pc, #24]	; (800883c <vTaskInternalSetTimeOutState+0x24>)
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	4b05      	ldr	r3, [pc, #20]	; (8008840 <vTaskInternalSetTimeOutState+0x28>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	605a      	str	r2, [r3, #4]
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	20000be0 	.word	0x20000be0
 8008840:	20000bcc 	.word	0x20000bcc

08008844 <xTaskCheckForTimeOut>:
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
 800884e:	f000 fdf3 	bl	8009438 <vPortEnterCritical>
 8008852:	4b1d      	ldr	r3, [pc, #116]	; (80088c8 <xTaskCheckForTimeOut+0x84>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	613b      	str	r3, [r7, #16]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886a:	d102      	bne.n	8008872 <xTaskCheckForTimeOut+0x2e>
 800886c:	2300      	movs	r3, #0
 800886e:	617b      	str	r3, [r7, #20]
 8008870:	e023      	b.n	80088ba <xTaskCheckForTimeOut+0x76>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	4b15      	ldr	r3, [pc, #84]	; (80088cc <xTaskCheckForTimeOut+0x88>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	d007      	beq.n	800888e <xTaskCheckForTimeOut+0x4a>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	429a      	cmp	r2, r3
 8008886:	d302      	bcc.n	800888e <xTaskCheckForTimeOut+0x4a>
 8008888:	2301      	movs	r3, #1
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	e015      	b.n	80088ba <xTaskCheckForTimeOut+0x76>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	429a      	cmp	r2, r3
 8008896:	d20b      	bcs.n	80088b0 <xTaskCheckForTimeOut+0x6c>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	1ad2      	subs	r2, r2, r3
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7ff ffb7 	bl	8008818 <vTaskInternalSetTimeOutState>
 80088aa:	2300      	movs	r3, #0
 80088ac:	617b      	str	r3, [r7, #20]
 80088ae:	e004      	b.n	80088ba <xTaskCheckForTimeOut+0x76>
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	2301      	movs	r3, #1
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	f000 fdd7 	bl	800946c <vPortExitCritical>
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000bcc 	.word	0x20000bcc
 80088cc:	20000be0 	.word	0x20000be0

080088d0 <vTaskMissedYield>:
 80088d0:	b480      	push	{r7}
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	4b03      	ldr	r3, [pc, #12]	; (80088e4 <vTaskMissedYield+0x14>)
 80088d6:	2201      	movs	r2, #1
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	bf00      	nop
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	20000bdc 	.word	0x20000bdc

080088e8 <prvIdleTask>:
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	f000 f852 	bl	8008998 <prvCheckTasksWaitingTermination>
 80088f4:	4b06      	ldr	r3, [pc, #24]	; (8008910 <prvIdleTask+0x28>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d9f9      	bls.n	80088f0 <prvIdleTask+0x8>
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <prvIdleTask+0x2c>)
 80088fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	e7f0      	b.n	80088f0 <prvIdleTask+0x8>
 800890e:	bf00      	nop
 8008910:	200006f8 	.word	0x200006f8
 8008914:	e000ed04 	.word	0xe000ed04

08008918 <prvInitialiseTaskLists>:
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	2300      	movs	r3, #0
 8008920:	607b      	str	r3, [r7, #4]
 8008922:	e00c      	b.n	800893e <prvInitialiseTaskLists+0x26>
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	4613      	mov	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4a12      	ldr	r2, [pc, #72]	; (8008978 <prvInitialiseTaskLists+0x60>)
 8008930:	4413      	add	r3, r2
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe fcec 	bl	8007310 <vListInitialise>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3301      	adds	r3, #1
 800893c:	607b      	str	r3, [r7, #4]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b37      	cmp	r3, #55	; 0x37
 8008942:	d9ef      	bls.n	8008924 <prvInitialiseTaskLists+0xc>
 8008944:	480d      	ldr	r0, [pc, #52]	; (800897c <prvInitialiseTaskLists+0x64>)
 8008946:	f7fe fce3 	bl	8007310 <vListInitialise>
 800894a:	480d      	ldr	r0, [pc, #52]	; (8008980 <prvInitialiseTaskLists+0x68>)
 800894c:	f7fe fce0 	bl	8007310 <vListInitialise>
 8008950:	480c      	ldr	r0, [pc, #48]	; (8008984 <prvInitialiseTaskLists+0x6c>)
 8008952:	f7fe fcdd 	bl	8007310 <vListInitialise>
 8008956:	480c      	ldr	r0, [pc, #48]	; (8008988 <prvInitialiseTaskLists+0x70>)
 8008958:	f7fe fcda 	bl	8007310 <vListInitialise>
 800895c:	480b      	ldr	r0, [pc, #44]	; (800898c <prvInitialiseTaskLists+0x74>)
 800895e:	f7fe fcd7 	bl	8007310 <vListInitialise>
 8008962:	4b0b      	ldr	r3, [pc, #44]	; (8008990 <prvInitialiseTaskLists+0x78>)
 8008964:	4a05      	ldr	r2, [pc, #20]	; (800897c <prvInitialiseTaskLists+0x64>)
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <prvInitialiseTaskLists+0x7c>)
 800896a:	4a05      	ldr	r2, [pc, #20]	; (8008980 <prvInitialiseTaskLists+0x68>)
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	200006f8 	.word	0x200006f8
 800897c:	20000b58 	.word	0x20000b58
 8008980:	20000b6c 	.word	0x20000b6c
 8008984:	20000b88 	.word	0x20000b88
 8008988:	20000b9c 	.word	0x20000b9c
 800898c:	20000bb4 	.word	0x20000bb4
 8008990:	20000b80 	.word	0x20000b80
 8008994:	20000b84 	.word	0x20000b84

08008998 <prvCheckTasksWaitingTermination>:
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	e019      	b.n	80089d4 <prvCheckTasksWaitingTermination+0x3c>
 80089a0:	f000 fd4a 	bl	8009438 <vPortEnterCritical>
 80089a4:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <prvCheckTasksWaitingTermination+0x50>)
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	607b      	str	r3, [r7, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3304      	adds	r3, #4
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fe fd33 	bl	800741c <uxListRemove>
 80089b6:	4b0d      	ldr	r3, [pc, #52]	; (80089ec <prvCheckTasksWaitingTermination+0x54>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	4a0b      	ldr	r2, [pc, #44]	; (80089ec <prvCheckTasksWaitingTermination+0x54>)
 80089be:	6013      	str	r3, [r2, #0]
 80089c0:	4b0b      	ldr	r3, [pc, #44]	; (80089f0 <prvCheckTasksWaitingTermination+0x58>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	4a0a      	ldr	r2, [pc, #40]	; (80089f0 <prvCheckTasksWaitingTermination+0x58>)
 80089c8:	6013      	str	r3, [r2, #0]
 80089ca:	f000 fd4f 	bl	800946c <vPortExitCritical>
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f810 	bl	80089f4 <prvDeleteTCB>
 80089d4:	4b06      	ldr	r3, [pc, #24]	; (80089f0 <prvCheckTasksWaitingTermination+0x58>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1e1      	bne.n	80089a0 <prvCheckTasksWaitingTermination+0x8>
 80089dc:	bf00      	nop
 80089de:	bf00      	nop
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	20000b9c 	.word	0x20000b9c
 80089ec:	20000bc8 	.word	0x20000bc8
 80089f0:	20000bb0 	.word	0x20000bb0

080089f4 <prvDeleteTCB>:
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d108      	bne.n	8008a18 <prvDeleteTCB+0x24>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fe44 	bl	8009698 <vPortFree>
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fe41 	bl	8009698 <vPortFree>
 8008a16:	e007      	b.n	8008a28 <prvDeleteTCB+0x34>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d102      	bne.n	8008a28 <prvDeleteTCB+0x34>
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fe38 	bl	8009698 <vPortFree>
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <prvResetNextTaskUnblockTime>:
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4b0e      	ldr	r3, [pc, #56]	; (8008a70 <prvResetNextTaskUnblockTime+0x40>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <prvResetNextTaskUnblockTime+0x14>
 8008a40:	2301      	movs	r3, #1
 8008a42:	e000      	b.n	8008a46 <prvResetNextTaskUnblockTime+0x16>
 8008a44:	2300      	movs	r3, #0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d004      	beq.n	8008a54 <prvResetNextTaskUnblockTime+0x24>
 8008a4a:	4b0a      	ldr	r3, [pc, #40]	; (8008a74 <prvResetNextTaskUnblockTime+0x44>)
 8008a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	e008      	b.n	8008a66 <prvResetNextTaskUnblockTime+0x36>
 8008a54:	4b06      	ldr	r3, [pc, #24]	; (8008a70 <prvResetNextTaskUnblockTime+0x40>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	607b      	str	r3, [r7, #4]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	4a04      	ldr	r2, [pc, #16]	; (8008a74 <prvResetNextTaskUnblockTime+0x44>)
 8008a64:	6013      	str	r3, [r2, #0]
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bc80      	pop	{r7}
 8008a6e:	4770      	bx	lr
 8008a70:	20000b80 	.word	0x20000b80
 8008a74:	20000be8 	.word	0x20000be8

08008a78 <xTaskGetSchedulerState>:
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4b0b      	ldr	r3, [pc, #44]	; (8008aac <xTaskGetSchedulerState+0x34>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d102      	bne.n	8008a8c <xTaskGetSchedulerState+0x14>
 8008a86:	2301      	movs	r3, #1
 8008a88:	607b      	str	r3, [r7, #4]
 8008a8a:	e008      	b.n	8008a9e <xTaskGetSchedulerState+0x26>
 8008a8c:	4b08      	ldr	r3, [pc, #32]	; (8008ab0 <xTaskGetSchedulerState+0x38>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d102      	bne.n	8008a9a <xTaskGetSchedulerState+0x22>
 8008a94:	2302      	movs	r3, #2
 8008a96:	607b      	str	r3, [r7, #4]
 8008a98:	e001      	b.n	8008a9e <xTaskGetSchedulerState+0x26>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	607b      	str	r3, [r7, #4]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bc80      	pop	{r7}
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	20000bd4 	.word	0x20000bd4
 8008ab0:	20000bf0 	.word	0x20000bf0

08008ab4 <xTaskPriorityInherit>:
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	60bb      	str	r3, [r7, #8]
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d056      	beq.n	8008b78 <xTaskPriorityInherit+0xc4>
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ace:	4b2d      	ldr	r3, [pc, #180]	; (8008b84 <xTaskPriorityInherit+0xd0>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d246      	bcs.n	8008b66 <xTaskPriorityInherit+0xb2>
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	db06      	blt.n	8008aee <xTaskPriorityInherit+0x3a>
 8008ae0:	4b28      	ldr	r3, [pc, #160]	; (8008b84 <xTaskPriorityInherit+0xd0>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	619a      	str	r2, [r3, #24]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	6959      	ldr	r1, [r3, #20]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af6:	4613      	mov	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4a22      	ldr	r2, [pc, #136]	; (8008b88 <xTaskPriorityInherit+0xd4>)
 8008b00:	4413      	add	r3, r2
 8008b02:	4299      	cmp	r1, r3
 8008b04:	d101      	bne.n	8008b0a <xTaskPriorityInherit+0x56>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <xTaskPriorityInherit+0x58>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d022      	beq.n	8008b56 <xTaskPriorityInherit+0xa2>
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fe fc81 	bl	800741c <uxListRemove>
 8008b1a:	4b1a      	ldr	r3, [pc, #104]	; (8008b84 <xTaskPriorityInherit+0xd0>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b28:	4b18      	ldr	r3, [pc, #96]	; (8008b8c <xTaskPriorityInherit+0xd8>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d903      	bls.n	8008b38 <xTaskPriorityInherit+0x84>
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	4a15      	ldr	r2, [pc, #84]	; (8008b8c <xTaskPriorityInherit+0xd8>)
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4a10      	ldr	r2, [pc, #64]	; (8008b88 <xTaskPriorityInherit+0xd4>)
 8008b46:	441a      	add	r2, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4610      	mov	r0, r2
 8008b50:	f7fe fc09 	bl	8007366 <vListInsertEnd>
 8008b54:	e004      	b.n	8008b60 <xTaskPriorityInherit+0xac>
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <xTaskPriorityInherit+0xd0>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b60:	2301      	movs	r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	e008      	b.n	8008b78 <xTaskPriorityInherit+0xc4>
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b6a:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <xTaskPriorityInherit+0xd0>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d201      	bcs.n	8008b78 <xTaskPriorityInherit+0xc4>
 8008b74:	2301      	movs	r3, #1
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	200006f4 	.word	0x200006f4
 8008b88:	200006f8 	.word	0x200006f8
 8008b8c:	20000bd0 	.word	0x20000bd0

08008b90 <xTaskPriorityDisinherit>:
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	60bb      	str	r3, [r7, #8]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d037      	beq.n	8008c16 <xTaskPriorityDisinherit+0x86>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008baa:	1e5a      	subs	r2, r3, #1
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	651a      	str	r2, [r3, #80]	; 0x50
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d02c      	beq.n	8008c16 <xTaskPriorityDisinherit+0x86>
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d128      	bne.n	8008c16 <xTaskPriorityDisinherit+0x86>
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fe fc27 	bl	800741c <uxListRemove>
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	619a      	str	r2, [r3, #24]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be6:	4b0e      	ldr	r3, [pc, #56]	; (8008c20 <xTaskPriorityDisinherit+0x90>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d903      	bls.n	8008bf6 <xTaskPriorityDisinherit+0x66>
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	4a0b      	ldr	r2, [pc, #44]	; (8008c20 <xTaskPriorityDisinherit+0x90>)
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4a08      	ldr	r2, [pc, #32]	; (8008c24 <xTaskPriorityDisinherit+0x94>)
 8008c04:	441a      	add	r2, r3
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	3304      	adds	r3, #4
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	f7fe fbaa 	bl	8007366 <vListInsertEnd>
 8008c12:	2301      	movs	r3, #1
 8008c14:	60fb      	str	r3, [r7, #12]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20000bd0 	.word	0x20000bd0
 8008c24:	200006f8 	.word	0x200006f8

08008c28 <vTaskPriorityDisinheritAfterTimeout>:
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	2301      	movs	r3, #1
 8008c38:	60fb      	str	r3, [r7, #12]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d050      	beq.n	8008ce2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d902      	bls.n	8008c50 <vTaskPriorityDisinheritAfterTimeout+0x28>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	617b      	str	r3, [r7, #20]
 8008c4e:	e002      	b.n	8008c56 <vTaskPriorityDisinheritAfterTimeout+0x2e>
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d040      	beq.n	8008ce2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d13b      	bne.n	8008ce2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	60bb      	str	r3, [r7, #8]
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	62da      	str	r2, [r3, #44]	; 0x2c
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	db04      	blt.n	8008c88 <vTaskPriorityDisinheritAfterTimeout+0x60>
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	619a      	str	r2, [r3, #24]
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	6959      	ldr	r1, [r3, #20]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	4613      	mov	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4a15      	ldr	r2, [pc, #84]	; (8008cec <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8008c98:	4413      	add	r3, r2
 8008c9a:	4299      	cmp	r1, r3
 8008c9c:	d101      	bne.n	8008ca2 <vTaskPriorityDisinheritAfterTimeout+0x7a>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e000      	b.n	8008ca4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d01c      	beq.n	8008ce2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	3304      	adds	r3, #4
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fe fbb5 	bl	800741c <uxListRemove>
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb6:	4b0e      	ldr	r3, [pc, #56]	; (8008cf0 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d903      	bls.n	8008cc6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc2:	4a0b      	ldr	r2, [pc, #44]	; (8008cf0 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8008cc4:	6013      	str	r3, [r2, #0]
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cca:	4613      	mov	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4a06      	ldr	r2, [pc, #24]	; (8008cec <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8008cd4:	441a      	add	r2, r3
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f7fe fb42 	bl	8007366 <vListInsertEnd>
 8008ce2:	bf00      	nop
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	200006f8 	.word	0x200006f8
 8008cf0:	20000bd0 	.word	0x20000bd0

08008cf4 <pvTaskIncrementMutexHeldCount>:
 8008cf4:	b480      	push	{r7}
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	4b07      	ldr	r3, [pc, #28]	; (8008d18 <pvTaskIncrementMutexHeldCount+0x24>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d004      	beq.n	8008d0a <pvTaskIncrementMutexHeldCount+0x16>
 8008d00:	4b05      	ldr	r3, [pc, #20]	; (8008d18 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d06:	3201      	adds	r2, #1
 8008d08:	651a      	str	r2, [r3, #80]	; 0x50
 8008d0a:	4b03      	ldr	r3, [pc, #12]	; (8008d18 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bc80      	pop	{r7}
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	200006f4 	.word	0x200006f4

08008d1c <prvAddCurrentTaskToDelayedList>:
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
 8008d26:	4b21      	ldr	r3, [pc, #132]	; (8008dac <prvAddCurrentTaskToDelayedList+0x90>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	4b20      	ldr	r3, [pc, #128]	; (8008db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3304      	adds	r3, #4
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fe fb72 	bl	800741c <uxListRemove>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3e:	d10a      	bne.n	8008d56 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d007      	beq.n	8008d56 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d46:	4b1a      	ldr	r3, [pc, #104]	; (8008db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4819      	ldr	r0, [pc, #100]	; (8008db4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d50:	f7fe fb09 	bl	8007366 <vListInsertEnd>
 8008d54:	e026      	b.n	8008da4 <prvAddCurrentTaskToDelayedList+0x88>
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	60bb      	str	r3, [r7, #8]
 8008d5e:	4b14      	ldr	r3, [pc, #80]	; (8008db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	605a      	str	r2, [r3, #4]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d209      	bcs.n	8008d82 <prvAddCurrentTaskToDelayedList+0x66>
 8008d6e:	4b12      	ldr	r3, [pc, #72]	; (8008db8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	4b0f      	ldr	r3, [pc, #60]	; (8008db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3304      	adds	r3, #4
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	f7fe fb16 	bl	80073ac <vListInsert>
 8008d80:	e010      	b.n	8008da4 <prvAddCurrentTaskToDelayedList+0x88>
 8008d82:	4b0e      	ldr	r3, [pc, #56]	; (8008dbc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	4b0a      	ldr	r3, [pc, #40]	; (8008db0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	4610      	mov	r0, r2
 8008d90:	f7fe fb0c 	bl	80073ac <vListInsert>
 8008d94:	4b0a      	ldr	r3, [pc, #40]	; (8008dc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d202      	bcs.n	8008da4 <prvAddCurrentTaskToDelayedList+0x88>
 8008d9e:	4a08      	ldr	r2, [pc, #32]	; (8008dc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	bf00      	nop
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	20000bcc 	.word	0x20000bcc
 8008db0:	200006f4 	.word	0x200006f4
 8008db4:	20000bb4 	.word	0x20000bb4
 8008db8:	20000b84 	.word	0x20000b84
 8008dbc:	20000b80 	.word	0x20000b80
 8008dc0:	20000be8 	.word	0x20000be8

08008dc4 <xTimerCreateTimerTask>:
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b088      	sub	sp, #32
 8008dc8:	af04      	add	r7, sp, #16
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60fb      	str	r3, [r7, #12]
 8008dce:	f000 fa69 	bl	80092a4 <prvCheckForValidListAndQueue>
 8008dd2:	4b15      	ldr	r3, [pc, #84]	; (8008e28 <xTimerCreateTimerTask+0x64>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d020      	beq.n	8008e1c <xTimerCreateTimerTask+0x58>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60bb      	str	r3, [r7, #8]
 8008dde:	2300      	movs	r3, #0
 8008de0:	607b      	str	r3, [r7, #4]
 8008de2:	463a      	mov	r2, r7
 8008de4:	1d39      	adds	r1, r7, #4
 8008de6:	f107 0308 	add.w	r3, r7, #8
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fe fa76 	bl	80072dc <vApplicationGetTimerTaskMemory>
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	9202      	str	r2, [sp, #8]
 8008df8:	9301      	str	r3, [sp, #4]
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	460a      	mov	r2, r1
 8008e02:	490a      	ldr	r1, [pc, #40]	; (8008e2c <xTimerCreateTimerTask+0x68>)
 8008e04:	480a      	ldr	r0, [pc, #40]	; (8008e30 <xTimerCreateTimerTask+0x6c>)
 8008e06:	f7ff f8ff 	bl	8008008 <xTaskCreateStatic>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	4a09      	ldr	r2, [pc, #36]	; (8008e34 <xTimerCreateTimerTask+0x70>)
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	4b08      	ldr	r3, [pc, #32]	; (8008e34 <xTimerCreateTimerTask+0x70>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <xTimerCreateTimerTask+0x58>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20000c24 	.word	0x20000c24
 8008e2c:	08009998 	.word	0x08009998
 8008e30:	08008f1d 	.word	0x08008f1d
 8008e34:	20000c28 	.word	0x20000c28

08008e38 <xTimerGenericCommand>:
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b08a      	sub	sp, #40	; 0x28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
 8008e44:	603b      	str	r3, [r7, #0]
 8008e46:	2300      	movs	r3, #0
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
 8008e4a:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <xTimerGenericCommand+0x7c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d02a      	beq.n	8008ea8 <xTimerGenericCommand+0x70>
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	617b      	str	r3, [r7, #20]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	61bb      	str	r3, [r7, #24]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	61fb      	str	r3, [r7, #28]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2b05      	cmp	r3, #5
 8008e62:	dc18      	bgt.n	8008e96 <xTimerGenericCommand+0x5e>
 8008e64:	f7ff fe08 	bl	8008a78 <xTaskGetSchedulerState>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d109      	bne.n	8008e82 <xTimerGenericCommand+0x4a>
 8008e6e:	4b11      	ldr	r3, [pc, #68]	; (8008eb4 <xTimerGenericCommand+0x7c>)
 8008e70:	6818      	ldr	r0, [r3, #0]
 8008e72:	f107 0114 	add.w	r1, r7, #20
 8008e76:	2300      	movs	r3, #0
 8008e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e7a:	f7fe fbdb 	bl	8007634 <xQueueGenericSend>
 8008e7e:	6278      	str	r0, [r7, #36]	; 0x24
 8008e80:	e012      	b.n	8008ea8 <xTimerGenericCommand+0x70>
 8008e82:	4b0c      	ldr	r3, [pc, #48]	; (8008eb4 <xTimerGenericCommand+0x7c>)
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	f107 0114 	add.w	r1, r7, #20
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f7fe fbd1 	bl	8007634 <xQueueGenericSend>
 8008e92:	6278      	str	r0, [r7, #36]	; 0x24
 8008e94:	e008      	b.n	8008ea8 <xTimerGenericCommand+0x70>
 8008e96:	4b07      	ldr	r3, [pc, #28]	; (8008eb4 <xTimerGenericCommand+0x7c>)
 8008e98:	6818      	ldr	r0, [r3, #0]
 8008e9a:	f107 0114 	add.w	r1, r7, #20
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	f7fe fc71 	bl	8007788 <xQueueGenericSendFromISR>
 8008ea6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3728      	adds	r7, #40	; 0x28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000c24 	.word	0x20000c24

08008eb8 <prvProcessExpiredTimer>:
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af02      	add	r7, sp, #8
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	4b15      	ldr	r3, [pc, #84]	; (8008f18 <prvProcessExpiredTimer+0x60>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fe faa3 	bl	800741c <uxListRemove>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d114      	bne.n	8008f08 <prvProcessExpiredTimer+0x50>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	699a      	ldr	r2, [r3, #24]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	18d1      	adds	r1, r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 f8ba 	bl	8009064 <prvInsertTimerInActiveList>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d008      	beq.n	8008f08 <prvProcessExpiredTimer+0x50>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	2300      	movs	r3, #0
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	2100      	movs	r1, #0
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f7ff ff99 	bl	8008e38 <xTimerGenericCommand>
 8008f06:	60b8      	str	r0, [r7, #8]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	4798      	blx	r3
 8008f10:	bf00      	nop
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	20000c1c 	.word	0x20000c1c

08008f1c <prvTimerTask>:
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	f107 0308 	add.w	r3, r7, #8
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f000 f857 	bl	8008fdc <prvGetNextExpireTime>
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	4619      	mov	r1, r3
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 f803 	bl	8008f40 <prvProcessTimerOrBlockTask>
 8008f3a:	f000 f8d5 	bl	80090e8 <prvProcessReceivedCommands>
 8008f3e:	e7f1      	b.n	8008f24 <prvTimerTask+0x8>

08008f40 <prvProcessTimerOrBlockTask>:
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	f7ff fa35 	bl	80083b8 <vTaskSuspendAll>
 8008f4e:	f107 0308 	add.w	r3, r7, #8
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f866 	bl	8009024 <prvSampleTimeNow>
 8008f58:	60f8      	str	r0, [r7, #12]
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d130      	bne.n	8008fc2 <prvProcessTimerOrBlockTask+0x82>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10a      	bne.n	8008f7c <prvProcessTimerOrBlockTask+0x3c>
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d806      	bhi.n	8008f7c <prvProcessTimerOrBlockTask+0x3c>
 8008f6e:	f7ff fa31 	bl	80083d4 <xTaskResumeAll>
 8008f72:	68f9      	ldr	r1, [r7, #12]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff ff9f 	bl	8008eb8 <prvProcessExpiredTimer>
 8008f7a:	e024      	b.n	8008fc6 <prvProcessTimerOrBlockTask+0x86>
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d008      	beq.n	8008f94 <prvProcessTimerOrBlockTask+0x54>
 8008f82:	4b13      	ldr	r3, [pc, #76]	; (8008fd0 <prvProcessTimerOrBlockTask+0x90>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	bf0c      	ite	eq
 8008f8c:	2301      	moveq	r3, #1
 8008f8e:	2300      	movne	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	4b0f      	ldr	r3, [pc, #60]	; (8008fd4 <prvProcessTimerOrBlockTask+0x94>)
 8008f96:	6818      	ldr	r0, [r3, #0]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	f7fe fffd 	bl	8007fa0 <vQueueWaitForMessageRestricted>
 8008fa6:	f7ff fa15 	bl	80083d4 <xTaskResumeAll>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <prvProcessTimerOrBlockTask+0x86>
 8008fb0:	4b09      	ldr	r3, [pc, #36]	; (8008fd8 <prvProcessTimerOrBlockTask+0x98>)
 8008fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	e001      	b.n	8008fc6 <prvProcessTimerOrBlockTask+0x86>
 8008fc2:	f7ff fa07 	bl	80083d4 <xTaskResumeAll>
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000c20 	.word	0x20000c20
 8008fd4:	20000c24 	.word	0x20000c24
 8008fd8:	e000ed04 	.word	0xe000ed04

08008fdc <prvGetNextExpireTime>:
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	4b0e      	ldr	r3, [pc, #56]	; (8009020 <prvGetNextExpireTime+0x44>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	bf0c      	ite	eq
 8008fee:	2301      	moveq	r3, #1
 8008ff0:	2300      	movne	r3, #0
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	601a      	str	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d105      	bne.n	800900e <prvGetNextExpireTime+0x32>
 8009002:	4b07      	ldr	r3, [pc, #28]	; (8009020 <prvGetNextExpireTime+0x44>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	e001      	b.n	8009012 <prvGetNextExpireTime+0x36>
 800900e:	2300      	movs	r3, #0
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	bc80      	pop	{r7}
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	20000c1c 	.word	0x20000c1c

08009024 <prvSampleTimeNow>:
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	f7ff fa60 	bl	80084f0 <xTaskGetTickCount>
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	4b0b      	ldr	r3, [pc, #44]	; (8009060 <prvSampleTimeNow+0x3c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	429a      	cmp	r2, r3
 800903a:	d205      	bcs.n	8009048 <prvSampleTimeNow+0x24>
 800903c:	f000 f8de 	bl	80091fc <prvSwitchTimerLists>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	e002      	b.n	800904e <prvSampleTimeNow+0x2a>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	4a04      	ldr	r2, [pc, #16]	; (8009060 <prvSampleTimeNow+0x3c>)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20000c2c 	.word	0x20000c2c

08009064 <prvInsertTimerInActiveList>:
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	603b      	str	r3, [r7, #0]
 8009072:	2300      	movs	r3, #0
 8009074:	617b      	str	r3, [r7, #20]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	605a      	str	r2, [r3, #4]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	611a      	str	r2, [r3, #16]
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	429a      	cmp	r2, r3
 8009088:	d812      	bhi.n	80090b0 <prvInsertTimerInActiveList+0x4c>
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	1ad2      	subs	r2, r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	429a      	cmp	r2, r3
 8009096:	d302      	bcc.n	800909e <prvInsertTimerInActiveList+0x3a>
 8009098:	2301      	movs	r3, #1
 800909a:	617b      	str	r3, [r7, #20]
 800909c:	e01b      	b.n	80090d6 <prvInsertTimerInActiveList+0x72>
 800909e:	4b10      	ldr	r3, [pc, #64]	; (80090e0 <prvInsertTimerInActiveList+0x7c>)
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3304      	adds	r3, #4
 80090a6:	4619      	mov	r1, r3
 80090a8:	4610      	mov	r0, r2
 80090aa:	f7fe f97f 	bl	80073ac <vListInsert>
 80090ae:	e012      	b.n	80090d6 <prvInsertTimerInActiveList+0x72>
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d206      	bcs.n	80090c6 <prvInsertTimerInActiveList+0x62>
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d302      	bcc.n	80090c6 <prvInsertTimerInActiveList+0x62>
 80090c0:	2301      	movs	r3, #1
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	e007      	b.n	80090d6 <prvInsertTimerInActiveList+0x72>
 80090c6:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <prvInsertTimerInActiveList+0x80>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3304      	adds	r3, #4
 80090ce:	4619      	mov	r1, r3
 80090d0:	4610      	mov	r0, r2
 80090d2:	f7fe f96b 	bl	80073ac <vListInsert>
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	20000c20 	.word	0x20000c20
 80090e4:	20000c1c 	.word	0x20000c1c

080090e8 <prvProcessReceivedCommands>:
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08c      	sub	sp, #48	; 0x30
 80090ec:	af02      	add	r7, sp, #8
 80090ee:	e073      	b.n	80091d8 <prvProcessReceivedCommands+0xf0>
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	da0b      	bge.n	800910e <prvProcessReceivedCommands+0x26>
 80090f6:	f107 0308 	add.w	r3, r7, #8
 80090fa:	3304      	adds	r3, #4
 80090fc:	627b      	str	r3, [r7, #36]	; 0x24
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009104:	6850      	ldr	r0, [r2, #4]
 8009106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009108:	6892      	ldr	r2, [r2, #8]
 800910a:	4611      	mov	r1, r2
 800910c:	4798      	blx	r3
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	db60      	blt.n	80091d6 <prvProcessReceivedCommands+0xee>
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	623b      	str	r3, [r7, #32]
 8009118:	6a3b      	ldr	r3, [r7, #32]
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d004      	beq.n	800912a <prvProcessReceivedCommands+0x42>
 8009120:	6a3b      	ldr	r3, [r7, #32]
 8009122:	3304      	adds	r3, #4
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe f979 	bl	800741c <uxListRemove>
 800912a:	1d3b      	adds	r3, r7, #4
 800912c:	4618      	mov	r0, r3
 800912e:	f7ff ff79 	bl	8009024 <prvSampleTimeNow>
 8009132:	61f8      	str	r0, [r7, #28]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b09      	cmp	r3, #9
 8009138:	d84e      	bhi.n	80091d8 <prvProcessReceivedCommands+0xf0>
 800913a:	a201      	add	r2, pc, #4	; (adr r2, 8009140 <prvProcessReceivedCommands+0x58>)
 800913c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009140:	08009169 	.word	0x08009169
 8009144:	08009169 	.word	0x08009169
 8009148:	08009169 	.word	0x08009169
 800914c:	080091d9 	.word	0x080091d9
 8009150:	080091ab 	.word	0x080091ab
 8009154:	080091c5 	.word	0x080091c5
 8009158:	08009169 	.word	0x08009169
 800915c:	08009169 	.word	0x08009169
 8009160:	080091d9 	.word	0x080091d9
 8009164:	080091ab 	.word	0x080091ab
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	6a3b      	ldr	r3, [r7, #32]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	18d1      	adds	r1, r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	69fa      	ldr	r2, [r7, #28]
 8009174:	6a38      	ldr	r0, [r7, #32]
 8009176:	f7ff ff75 	bl	8009064 <prvInsertTimerInActiveList>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d02b      	beq.n	80091d8 <prvProcessReceivedCommands+0xf0>
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009184:	6a38      	ldr	r0, [r7, #32]
 8009186:	4798      	blx	r3
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	69db      	ldr	r3, [r3, #28]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d123      	bne.n	80091d8 <prvProcessReceivedCommands+0xf0>
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	441a      	add	r2, r3
 8009198:	2300      	movs	r3, #0
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	2300      	movs	r3, #0
 800919e:	2100      	movs	r1, #0
 80091a0:	6a38      	ldr	r0, [r7, #32]
 80091a2:	f7ff fe49 	bl	8008e38 <xTimerGenericCommand>
 80091a6:	61b8      	str	r0, [r7, #24]
 80091a8:	e016      	b.n	80091d8 <prvProcessReceivedCommands+0xf0>
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	619a      	str	r2, [r3, #24]
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	699a      	ldr	r2, [r3, #24]
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	18d1      	adds	r1, r2, r3
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	69fa      	ldr	r2, [r7, #28]
 80091bc:	6a38      	ldr	r0, [r7, #32]
 80091be:	f7ff ff51 	bl	8009064 <prvInsertTimerInActiveList>
 80091c2:	e009      	b.n	80091d8 <prvProcessReceivedCommands+0xf0>
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d104      	bne.n	80091d8 <prvProcessReceivedCommands+0xf0>
 80091ce:	6a38      	ldr	r0, [r7, #32]
 80091d0:	f000 fa62 	bl	8009698 <vPortFree>
 80091d4:	e000      	b.n	80091d8 <prvProcessReceivedCommands+0xf0>
 80091d6:	bf00      	nop
 80091d8:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <prvProcessReceivedCommands+0x110>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f107 0108 	add.w	r1, r7, #8
 80091e0:	2200      	movs	r2, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fb7e 	bl	80078e4 <xQueueReceive>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d180      	bne.n	80090f0 <prvProcessReceivedCommands+0x8>
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	3728      	adds	r7, #40	; 0x28
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	20000c24 	.word	0x20000c24

080091fc <prvSwitchTimerLists>:
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af02      	add	r7, sp, #8
 8009202:	e037      	b.n	8009274 <prvSwitchTimerLists+0x78>
 8009204:	4b25      	ldr	r3, [pc, #148]	; (800929c <prvSwitchTimerLists+0xa0>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	613b      	str	r3, [r7, #16]
 800920e:	4b23      	ldr	r3, [pc, #140]	; (800929c <prvSwitchTimerLists+0xa0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3304      	adds	r3, #4
 800921c:	4618      	mov	r0, r3
 800921e:	f7fe f8fd 	bl	800741c <uxListRemove>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	4798      	blx	r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d120      	bne.n	8009274 <prvSwitchTimerLists+0x78>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	4413      	add	r3, r2
 800923a:	60bb      	str	r3, [r7, #8]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	429a      	cmp	r2, r3
 8009242:	d90e      	bls.n	8009262 <prvSwitchTimerLists+0x66>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	605a      	str	r2, [r3, #4]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	611a      	str	r2, [r3, #16]
 8009250:	4b12      	ldr	r3, [pc, #72]	; (800929c <prvSwitchTimerLists+0xa0>)
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	3304      	adds	r3, #4
 8009258:	4619      	mov	r1, r3
 800925a:	4610      	mov	r0, r2
 800925c:	f7fe f8a6 	bl	80073ac <vListInsert>
 8009260:	e008      	b.n	8009274 <prvSwitchTimerLists+0x78>
 8009262:	2300      	movs	r3, #0
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	2300      	movs	r3, #0
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	2100      	movs	r1, #0
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f7ff fde3 	bl	8008e38 <xTimerGenericCommand>
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	4b09      	ldr	r3, [pc, #36]	; (800929c <prvSwitchTimerLists+0xa0>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1c2      	bne.n	8009204 <prvSwitchTimerLists+0x8>
 800927e:	4b07      	ldr	r3, [pc, #28]	; (800929c <prvSwitchTimerLists+0xa0>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	4b06      	ldr	r3, [pc, #24]	; (80092a0 <prvSwitchTimerLists+0xa4>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a04      	ldr	r2, [pc, #16]	; (800929c <prvSwitchTimerLists+0xa0>)
 800928a:	6013      	str	r3, [r2, #0]
 800928c:	4a04      	ldr	r2, [pc, #16]	; (80092a0 <prvSwitchTimerLists+0xa4>)
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	bf00      	nop
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20000c1c 	.word	0x20000c1c
 80092a0:	20000c20 	.word	0x20000c20

080092a4 <prvCheckForValidListAndQueue>:
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af02      	add	r7, sp, #8
 80092aa:	f000 f8c5 	bl	8009438 <vPortEnterCritical>
 80092ae:	4b15      	ldr	r3, [pc, #84]	; (8009304 <prvCheckForValidListAndQueue+0x60>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d120      	bne.n	80092f8 <prvCheckForValidListAndQueue+0x54>
 80092b6:	4814      	ldr	r0, [pc, #80]	; (8009308 <prvCheckForValidListAndQueue+0x64>)
 80092b8:	f7fe f82a 	bl	8007310 <vListInitialise>
 80092bc:	4813      	ldr	r0, [pc, #76]	; (800930c <prvCheckForValidListAndQueue+0x68>)
 80092be:	f7fe f827 	bl	8007310 <vListInitialise>
 80092c2:	4b13      	ldr	r3, [pc, #76]	; (8009310 <prvCheckForValidListAndQueue+0x6c>)
 80092c4:	4a10      	ldr	r2, [pc, #64]	; (8009308 <prvCheckForValidListAndQueue+0x64>)
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	4b12      	ldr	r3, [pc, #72]	; (8009314 <prvCheckForValidListAndQueue+0x70>)
 80092ca:	4a10      	ldr	r2, [pc, #64]	; (800930c <prvCheckForValidListAndQueue+0x68>)
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	2300      	movs	r3, #0
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	4b11      	ldr	r3, [pc, #68]	; (8009318 <prvCheckForValidListAndQueue+0x74>)
 80092d4:	4a11      	ldr	r2, [pc, #68]	; (800931c <prvCheckForValidListAndQueue+0x78>)
 80092d6:	2110      	movs	r1, #16
 80092d8:	200a      	movs	r0, #10
 80092da:	f7fe f923 	bl	8007524 <xQueueGenericCreateStatic>
 80092de:	4603      	mov	r3, r0
 80092e0:	4a08      	ldr	r2, [pc, #32]	; (8009304 <prvCheckForValidListAndQueue+0x60>)
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	4b07      	ldr	r3, [pc, #28]	; (8009304 <prvCheckForValidListAndQueue+0x60>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d005      	beq.n	80092f8 <prvCheckForValidListAndQueue+0x54>
 80092ec:	4b05      	ldr	r3, [pc, #20]	; (8009304 <prvCheckForValidListAndQueue+0x60>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	490b      	ldr	r1, [pc, #44]	; (8009320 <prvCheckForValidListAndQueue+0x7c>)
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fe fe2c 	bl	8007f50 <vQueueAddToRegistry>
 80092f8:	f000 f8b8 	bl	800946c <vPortExitCritical>
 80092fc:	bf00      	nop
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20000c24 	.word	0x20000c24
 8009308:	20000bf4 	.word	0x20000bf4
 800930c:	20000c08 	.word	0x20000c08
 8009310:	20000c1c 	.word	0x20000c1c
 8009314:	20000c20 	.word	0x20000c20
 8009318:	20000cd0 	.word	0x20000cd0
 800931c:	20000c30 	.word	0x20000c30
 8009320:	080099a0 	.word	0x080099a0

08009324 <pxPortInitialiseStack>:
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3b04      	subs	r3, #4
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	3b04      	subs	r3, #4
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f023 0201 	bic.w	r2, r3, #1
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	3b04      	subs	r3, #4
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	4a08      	ldr	r2, [pc, #32]	; (8009378 <pxPortInitialiseStack+0x54>)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3b14      	subs	r3, #20
 800935e:	60fb      	str	r3, [r7, #12]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3b20      	subs	r3, #32
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	bc80      	pop	{r7}
 8009376:	4770      	bx	lr
 8009378:	0800937d 	.word	0x0800937d

0800937c <prvTaskExitError>:
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	2300      	movs	r3, #0
 8009384:	603b      	str	r3, [r7, #0]
 8009386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	607b      	str	r3, [r7, #4]
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d0fc      	beq.n	800939c <prvTaskExitError+0x20>
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bc80      	pop	{r7}
 80093ac:	4770      	bx	lr
	...

080093b0 <SVC_Handler>:
 80093b0:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <pxCurrentTCBConst2>)
 80093b2:	6819      	ldr	r1, [r3, #0]
 80093b4:	6808      	ldr	r0, [r1, #0]
 80093b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80093ba:	f380 8809 	msr	PSP, r0
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f04f 0000 	mov.w	r0, #0
 80093c6:	f380 8811 	msr	BASEPRI, r0
 80093ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80093ce:	4770      	bx	lr

080093d0 <pxCurrentTCBConst2>:
 80093d0:	200006f4 	.word	0x200006f4
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop

080093d8 <prvPortStartFirstTask>:
 80093d8:	4806      	ldr	r0, [pc, #24]	; (80093f4 <prvPortStartFirstTask+0x1c>)
 80093da:	6800      	ldr	r0, [r0, #0]
 80093dc:	6800      	ldr	r0, [r0, #0]
 80093de:	f380 8808 	msr	MSP, r0
 80093e2:	b662      	cpsie	i
 80093e4:	b661      	cpsie	f
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	df00      	svc	0
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	e000ed08 	.word	0xe000ed08

080093f8 <xPortStartScheduler>:
 80093f8:	b580      	push	{r7, lr}
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	4b0c      	ldr	r3, [pc, #48]	; (8009430 <xPortStartScheduler+0x38>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a0b      	ldr	r2, [pc, #44]	; (8009430 <xPortStartScheduler+0x38>)
 8009402:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009406:	6013      	str	r3, [r2, #0]
 8009408:	4b09      	ldr	r3, [pc, #36]	; (8009430 <xPortStartScheduler+0x38>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a08      	ldr	r2, [pc, #32]	; (8009430 <xPortStartScheduler+0x38>)
 800940e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	f000 f88a 	bl	800952c <vPortSetupTimerInterrupt>
 8009418:	4b06      	ldr	r3, [pc, #24]	; (8009434 <xPortStartScheduler+0x3c>)
 800941a:	2200      	movs	r2, #0
 800941c:	601a      	str	r2, [r3, #0]
 800941e:	f7ff ffdb 	bl	80093d8 <prvPortStartFirstTask>
 8009422:	f7ff f921 	bl	8008668 <vTaskSwitchContext>
 8009426:	f7ff ffa9 	bl	800937c <prvTaskExitError>
 800942a:	2300      	movs	r3, #0
 800942c:	4618      	mov	r0, r3
 800942e:	bd80      	pop	{r7, pc}
 8009430:	e000ed20 	.word	0xe000ed20
 8009434:	2000000c 	.word	0x2000000c

08009438 <vPortEnterCritical>:
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	607b      	str	r3, [r7, #4]
 8009450:	bf00      	nop
 8009452:	4b05      	ldr	r3, [pc, #20]	; (8009468 <vPortEnterCritical+0x30>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3301      	adds	r3, #1
 8009458:	4a03      	ldr	r2, [pc, #12]	; (8009468 <vPortEnterCritical+0x30>)
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	bc80      	pop	{r7}
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	2000000c 	.word	0x2000000c

0800946c <vPortExitCritical>:
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	4b0a      	ldr	r3, [pc, #40]	; (800949c <vPortExitCritical+0x30>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3b01      	subs	r3, #1
 8009478:	4a08      	ldr	r2, [pc, #32]	; (800949c <vPortExitCritical+0x30>)
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	4b07      	ldr	r3, [pc, #28]	; (800949c <vPortExitCritical+0x30>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d105      	bne.n	8009490 <vPortExitCritical+0x24>
 8009484:	2300      	movs	r3, #0
 8009486:	607b      	str	r3, [r7, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	bf00      	nop
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	bc80      	pop	{r7}
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	2000000c 	.word	0x2000000c

080094a0 <PendSV_Handler>:
 80094a0:	f3ef 8009 	mrs	r0, PSP
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	4b0d      	ldr	r3, [pc, #52]	; (80094e0 <pxCurrentTCBConst>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80094b0:	6010      	str	r0, [r2, #0]
 80094b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80094b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80094ba:	f380 8811 	msr	BASEPRI, r0
 80094be:	f7ff f8d3 	bl	8008668 <vTaskSwitchContext>
 80094c2:	f04f 0000 	mov.w	r0, #0
 80094c6:	f380 8811 	msr	BASEPRI, r0
 80094ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80094ce:	6819      	ldr	r1, [r3, #0]
 80094d0:	6808      	ldr	r0, [r1, #0]
 80094d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80094d6:	f380 8809 	msr	PSP, r0
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	4770      	bx	lr

080094e0 <pxCurrentTCBConst>:
 80094e0:	200006f4 	.word	0x200006f4
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop

080094e8 <xPortSysTickHandler>:
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	607b      	str	r3, [r7, #4]
 8009500:	bf00      	nop
 8009502:	f7ff f803 	bl	800850c <xTaskIncrementTick>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d003      	beq.n	8009514 <xPortSysTickHandler+0x2c>
 800950c:	4b06      	ldr	r3, [pc, #24]	; (8009528 <xPortSysTickHandler+0x40>)
 800950e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	2300      	movs	r3, #0
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	e000ed04 	.word	0xe000ed04

0800952c <vPortSetupTimerInterrupt>:
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0
 8009530:	4b0a      	ldr	r3, [pc, #40]	; (800955c <vPortSetupTimerInterrupt+0x30>)
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]
 8009536:	4b0a      	ldr	r3, [pc, #40]	; (8009560 <vPortSetupTimerInterrupt+0x34>)
 8009538:	2200      	movs	r2, #0
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	4b09      	ldr	r3, [pc, #36]	; (8009564 <vPortSetupTimerInterrupt+0x38>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a09      	ldr	r2, [pc, #36]	; (8009568 <vPortSetupTimerInterrupt+0x3c>)
 8009542:	fba2 2303 	umull	r2, r3, r2, r3
 8009546:	099b      	lsrs	r3, r3, #6
 8009548:	4a08      	ldr	r2, [pc, #32]	; (800956c <vPortSetupTimerInterrupt+0x40>)
 800954a:	3b01      	subs	r3, #1
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	4b03      	ldr	r3, [pc, #12]	; (800955c <vPortSetupTimerInterrupt+0x30>)
 8009550:	2207      	movs	r2, #7
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	bf00      	nop
 8009556:	46bd      	mov	sp, r7
 8009558:	bc80      	pop	{r7}
 800955a:	4770      	bx	lr
 800955c:	e000e010 	.word	0xe000e010
 8009560:	e000e018 	.word	0xe000e018
 8009564:	20000000 	.word	0x20000000
 8009568:	10624dd3 	.word	0x10624dd3
 800956c:	e000e014 	.word	0xe000e014

08009570 <pvPortMalloc>:
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	2300      	movs	r3, #0
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	f7fe ff1c 	bl	80083b8 <vTaskSuspendAll>
 8009580:	4b40      	ldr	r3, [pc, #256]	; (8009684 <pvPortMalloc+0x114>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <pvPortMalloc+0x1c>
 8009588:	f000 f8c0 	bl	800970c <prvHeapInit>
 800958c:	4b3e      	ldr	r3, [pc, #248]	; (8009688 <pvPortMalloc+0x118>)
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4013      	ands	r3, r2
 8009594:	2b00      	cmp	r3, #0
 8009596:	d16d      	bne.n	8009674 <pvPortMalloc+0x104>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00d      	beq.n	80095ba <pvPortMalloc+0x4a>
 800959e:	2208      	movs	r2, #8
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4413      	add	r3, r2
 80095a4:	607b      	str	r3, [r7, #4]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f003 0307 	and.w	r3, r3, #7
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d004      	beq.n	80095ba <pvPortMalloc+0x4a>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f023 0307 	bic.w	r3, r3, #7
 80095b6:	3308      	adds	r3, #8
 80095b8:	607b      	str	r3, [r7, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d059      	beq.n	8009674 <pvPortMalloc+0x104>
 80095c0:	4b32      	ldr	r3, [pc, #200]	; (800968c <pvPortMalloc+0x11c>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d854      	bhi.n	8009674 <pvPortMalloc+0x104>
 80095ca:	4b31      	ldr	r3, [pc, #196]	; (8009690 <pvPortMalloc+0x120>)
 80095cc:	613b      	str	r3, [r7, #16]
 80095ce:	4b30      	ldr	r3, [pc, #192]	; (8009690 <pvPortMalloc+0x120>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	617b      	str	r3, [r7, #20]
 80095d4:	e004      	b.n	80095e0 <pvPortMalloc+0x70>
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	613b      	str	r3, [r7, #16]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	617b      	str	r3, [r7, #20]
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d903      	bls.n	80095f2 <pvPortMalloc+0x82>
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1f1      	bne.n	80095d6 <pvPortMalloc+0x66>
 80095f2:	4b24      	ldr	r3, [pc, #144]	; (8009684 <pvPortMalloc+0x114>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d03b      	beq.n	8009674 <pvPortMalloc+0x104>
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2208      	movs	r2, #8
 8009602:	4413      	add	r3, r2
 8009604:	60fb      	str	r3, [r7, #12]
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	1ad2      	subs	r2, r2, r3
 8009616:	2308      	movs	r3, #8
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	429a      	cmp	r2, r3
 800961c:	d90f      	bls.n	800963e <pvPortMalloc+0xce>
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4413      	add	r3, r2
 8009624:	60bb      	str	r3, [r7, #8]
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	1ad2      	subs	r2, r2, r3
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	605a      	str	r2, [r3, #4]
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	605a      	str	r2, [r3, #4]
 8009638:	68b8      	ldr	r0, [r7, #8]
 800963a:	f000 f8c9 	bl	80097d0 <prvInsertBlockIntoFreeList>
 800963e:	4b13      	ldr	r3, [pc, #76]	; (800968c <pvPortMalloc+0x11c>)
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	4a10      	ldr	r2, [pc, #64]	; (800968c <pvPortMalloc+0x11c>)
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	4b0f      	ldr	r3, [pc, #60]	; (800968c <pvPortMalloc+0x11c>)
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	4b10      	ldr	r3, [pc, #64]	; (8009694 <pvPortMalloc+0x124>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	d203      	bcs.n	8009660 <pvPortMalloc+0xf0>
 8009658:	4b0c      	ldr	r3, [pc, #48]	; (800968c <pvPortMalloc+0x11c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a0d      	ldr	r2, [pc, #52]	; (8009694 <pvPortMalloc+0x124>)
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	4b08      	ldr	r3, [pc, #32]	; (8009688 <pvPortMalloc+0x118>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	431a      	orrs	r2, r3
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	605a      	str	r2, [r3, #4]
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	f7fe feae 	bl	80083d4 <xTaskResumeAll>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	4618      	mov	r0, r3
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20003528 	.word	0x20003528
 8009688:	20003534 	.word	0x20003534
 800968c:	2000352c 	.word	0x2000352c
 8009690:	20003520 	.word	0x20003520
 8009694:	20003530 	.word	0x20003530

08009698 <vPortFree>:
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	60fb      	str	r3, [r7, #12]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d027      	beq.n	80096fa <vPortFree+0x62>
 80096aa:	2308      	movs	r3, #8
 80096ac:	425b      	negs	r3, r3
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	4413      	add	r3, r2
 80096b2:	60fb      	str	r3, [r7, #12]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	60bb      	str	r3, [r7, #8]
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	4b11      	ldr	r3, [pc, #68]	; (8009704 <vPortFree+0x6c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4013      	ands	r3, r2
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d019      	beq.n	80096fa <vPortFree+0x62>
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d115      	bne.n	80096fa <vPortFree+0x62>
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <vPortFree+0x6c>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	43db      	mvns	r3, r3
 80096d8:	401a      	ands	r2, r3
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	605a      	str	r2, [r3, #4]
 80096de:	f7fe fe6b 	bl	80083b8 <vTaskSuspendAll>
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	685a      	ldr	r2, [r3, #4]
 80096e6:	4b08      	ldr	r3, [pc, #32]	; (8009708 <vPortFree+0x70>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4413      	add	r3, r2
 80096ec:	4a06      	ldr	r2, [pc, #24]	; (8009708 <vPortFree+0x70>)
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	68b8      	ldr	r0, [r7, #8]
 80096f2:	f000 f86d 	bl	80097d0 <prvInsertBlockIntoFreeList>
 80096f6:	f7fe fe6d 	bl	80083d4 <xTaskResumeAll>
 80096fa:	bf00      	nop
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20003534 	.word	0x20003534
 8009708:	2000352c 	.word	0x2000352c

0800970c <prvHeapInit>:
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009716:	60bb      	str	r3, [r7, #8]
 8009718:	4b27      	ldr	r3, [pc, #156]	; (80097b8 <prvHeapInit+0xac>)
 800971a:	60fb      	str	r3, [r7, #12]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f003 0307 	and.w	r3, r3, #7
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00c      	beq.n	8009740 <prvHeapInit+0x34>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	3307      	adds	r3, #7
 800972a:	60fb      	str	r3, [r7, #12]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f023 0307 	bic.w	r3, r3, #7
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	4a1f      	ldr	r2, [pc, #124]	; (80097b8 <prvHeapInit+0xac>)
 800973c:	4413      	add	r3, r2
 800973e:	60bb      	str	r3, [r7, #8]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	607b      	str	r3, [r7, #4]
 8009744:	4a1d      	ldr	r2, [pc, #116]	; (80097bc <prvHeapInit+0xb0>)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	4b1c      	ldr	r3, [pc, #112]	; (80097bc <prvHeapInit+0xb0>)
 800974c:	2200      	movs	r2, #0
 800974e:	605a      	str	r2, [r3, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	4413      	add	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]
 8009758:	2208      	movs	r2, #8
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	1a9b      	subs	r3, r3, r2
 800975e:	60fb      	str	r3, [r7, #12]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f023 0307 	bic.w	r3, r3, #7
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4a15      	ldr	r2, [pc, #84]	; (80097c0 <prvHeapInit+0xb4>)
 800976c:	6013      	str	r3, [r2, #0]
 800976e:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <prvHeapInit+0xb4>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2200      	movs	r2, #0
 8009774:	605a      	str	r2, [r3, #4]
 8009776:	4b12      	ldr	r3, [pc, #72]	; (80097c0 <prvHeapInit+0xb4>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2200      	movs	r2, #0
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	603b      	str	r3, [r7, #0]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	1ad2      	subs	r2, r2, r3
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	605a      	str	r2, [r3, #4]
 800978c:	4b0c      	ldr	r3, [pc, #48]	; (80097c0 <prvHeapInit+0xb4>)
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	4a0a      	ldr	r2, [pc, #40]	; (80097c4 <prvHeapInit+0xb8>)
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	4a09      	ldr	r2, [pc, #36]	; (80097c8 <prvHeapInit+0xbc>)
 80097a2:	6013      	str	r3, [r2, #0]
 80097a4:	4b09      	ldr	r3, [pc, #36]	; (80097cc <prvHeapInit+0xc0>)
 80097a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	bf00      	nop
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bc80      	pop	{r7}
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	20000d20 	.word	0x20000d20
 80097bc:	20003520 	.word	0x20003520
 80097c0:	20003528 	.word	0x20003528
 80097c4:	20003530 	.word	0x20003530
 80097c8:	2000352c 	.word	0x2000352c
 80097cc:	20003534 	.word	0x20003534

080097d0 <prvInsertBlockIntoFreeList>:
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	4b27      	ldr	r3, [pc, #156]	; (8009878 <prvInsertBlockIntoFreeList+0xa8>)
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	e002      	b.n	80097e4 <prvInsertBlockIntoFreeList+0x14>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d8f7      	bhi.n	80097de <prvInsertBlockIntoFreeList+0xe>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	60bb      	str	r3, [r7, #8]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	4413      	add	r3, r2
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d108      	bne.n	8009812 <prvInsertBlockIntoFreeList+0x42>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	441a      	add	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	605a      	str	r2, [r3, #4]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	607b      	str	r3, [r7, #4]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	60bb      	str	r3, [r7, #8]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	441a      	add	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	429a      	cmp	r2, r3
 8009824:	d118      	bne.n	8009858 <prvInsertBlockIntoFreeList+0x88>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	4b14      	ldr	r3, [pc, #80]	; (800987c <prvInsertBlockIntoFreeList+0xac>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	429a      	cmp	r2, r3
 8009830:	d00d      	beq.n	800984e <prvInsertBlockIntoFreeList+0x7e>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	685a      	ldr	r2, [r3, #4]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	441a      	add	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	605a      	str	r2, [r3, #4]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	601a      	str	r2, [r3, #0]
 800984c:	e008      	b.n	8009860 <prvInsertBlockIntoFreeList+0x90>
 800984e:	4b0b      	ldr	r3, [pc, #44]	; (800987c <prvInsertBlockIntoFreeList+0xac>)
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	601a      	str	r2, [r3, #0]
 8009856:	e003      	b.n	8009860 <prvInsertBlockIntoFreeList+0x90>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	429a      	cmp	r2, r3
 8009866:	d002      	beq.n	800986e <prvInsertBlockIntoFreeList+0x9e>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	bf00      	nop
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	bc80      	pop	{r7}
 8009876:	4770      	bx	lr
 8009878:	20003520 	.word	0x20003520
 800987c:	20003528 	.word	0x20003528

08009880 <__libc_init_array>:
 8009880:	b570      	push	{r4, r5, r6, lr}
 8009882:	2600      	movs	r6, #0
 8009884:	4d0c      	ldr	r5, [pc, #48]	; (80098b8 <__libc_init_array+0x38>)
 8009886:	4c0d      	ldr	r4, [pc, #52]	; (80098bc <__libc_init_array+0x3c>)
 8009888:	1b64      	subs	r4, r4, r5
 800988a:	10a4      	asrs	r4, r4, #2
 800988c:	42a6      	cmp	r6, r4
 800988e:	d109      	bne.n	80098a4 <__libc_init_array+0x24>
 8009890:	f000 f830 	bl	80098f4 <_init>
 8009894:	2600      	movs	r6, #0
 8009896:	4d0a      	ldr	r5, [pc, #40]	; (80098c0 <__libc_init_array+0x40>)
 8009898:	4c0a      	ldr	r4, [pc, #40]	; (80098c4 <__libc_init_array+0x44>)
 800989a:	1b64      	subs	r4, r4, r5
 800989c:	10a4      	asrs	r4, r4, #2
 800989e:	42a6      	cmp	r6, r4
 80098a0:	d105      	bne.n	80098ae <__libc_init_array+0x2e>
 80098a2:	bd70      	pop	{r4, r5, r6, pc}
 80098a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a8:	4798      	blx	r3
 80098aa:	3601      	adds	r6, #1
 80098ac:	e7ee      	b.n	800988c <__libc_init_array+0xc>
 80098ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80098b2:	4798      	blx	r3
 80098b4:	3601      	adds	r6, #1
 80098b6:	e7f2      	b.n	800989e <__libc_init_array+0x1e>
 80098b8:	080099f4 	.word	0x080099f4
 80098bc:	080099f4 	.word	0x080099f4
 80098c0:	080099f4 	.word	0x080099f4
 80098c4:	080099f8 	.word	0x080099f8

080098c8 <memcpy>:
 80098c8:	440a      	add	r2, r1
 80098ca:	4291      	cmp	r1, r2
 80098cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80098d0:	d100      	bne.n	80098d4 <memcpy+0xc>
 80098d2:	4770      	bx	lr
 80098d4:	b510      	push	{r4, lr}
 80098d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098da:	4291      	cmp	r1, r2
 80098dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098e0:	d1f9      	bne.n	80098d6 <memcpy+0xe>
 80098e2:	bd10      	pop	{r4, pc}

080098e4 <memset>:
 80098e4:	4603      	mov	r3, r0
 80098e6:	4402      	add	r2, r0
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d100      	bne.n	80098ee <memset+0xa>
 80098ec:	4770      	bx	lr
 80098ee:	f803 1b01 	strb.w	r1, [r3], #1
 80098f2:	e7f9      	b.n	80098e8 <memset+0x4>

080098f4 <_init>:
 80098f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f6:	bf00      	nop
 80098f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098fa:	bc08      	pop	{r3}
 80098fc:	469e      	mov	lr, r3
 80098fe:	4770      	bx	lr

08009900 <_fini>:
 8009900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009902:	bf00      	nop
 8009904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009906:	bc08      	pop	{r3}
 8009908:	469e      	mov	lr, r3
 800990a:	4770      	bx	lr
