
WELDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091cc  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080093bc  080093bc  000193bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094a4  080094a4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080094a4  080094a4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094a4  080094a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094a4  080094a4  000194a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094a8  080094a8  000194a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080094ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ec8  20000010  080094bc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20003ed8  080094bc  00023ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd73  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d49  00000000  00000000  0003bdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003faf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  000410c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8da  00000000  00000000  000424f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188aa  00000000  00000000  0005ddca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2729  00000000  00000000  00076674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118d9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae0  00000000  00000000  00118df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	080093a4 	.word	0x080093a4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	080093a4 	.word	0x080093a4

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <MicrostepDriver_Ini>:
#include  "MicrostepDriver.h"


void MicrostepDriver_Ini(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
    htim3.Init.Prescaler = 7199; // Предделитель таймера 3
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a12:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000a16:	605a      	str	r2, [r3, #4]
    htim3.Init.Period = 10000; // Период ШИМа
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a1e:	60da      	str	r2, [r3, #12]
    TIM3->CCR1 = 5000; // Длительность импульса
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <MicrostepDriver_Ini+0x2c>)
 8000a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a26:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_Base_Init(&htim3);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <MicrostepDriver_Ini+0x28>)
 8000a2a:	f005 f8d3 	bl	8005bd4 <HAL_TIM_Base_Init>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20003dd4 	.word	0x20003dd4
 8000a38:	40000400 	.word	0x40000400

08000a3c <MicrostepDriver_Run>:


void MicrostepDriver_Run (uint16_t freq, uint8_t dir, GPIO_TypeDef *EN1_Port, uint16_t EN1_Pin, GPIO_TypeDef *DIR1_Port, uint16_t DIR1_Pin, uint32_t PWM_Channel)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60ba      	str	r2, [r7, #8]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4603      	mov	r3, r0
 8000a48:	81fb      	strh	r3, [r7, #14]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	737b      	strb	r3, [r7, #13]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	80fb      	strh	r3, [r7, #6]
	if (freq != 0)
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d024      	beq.n	8000aa2 <MicrostepDriver_Run+0x66>
	{

	htim3.Init.Period = (htim3.Init.Prescaler /  freq) / MICRO_STEP_DEV; // Расчет периода следования импульсов
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a66:	60d3      	str	r3, [r2, #12]
	TIM3->CCR1 = htim3.Init.Period / 2; // Расчет коэффицента заполнения
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MicrostepDriver_Run+0x7c>)
 8000a6e:	085b      	lsrs	r3, r3, #1
 8000a70:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_TIM_Base_Init(&htim3);
 8000a72:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a74:	f005 f8ae 	bl	8005bd4 <HAL_TIM_Base_Init>

	if (dir == 0) // Направление вращения
 8000a78:	7b7b      	ldrb	r3, [r7, #13]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d106      	bne.n	8000a8c <MicrostepDriver_Run+0x50>
	{
		HAL_GPIO_WritePin(DIR1_Port, DIR1_Pin, GPIO_PIN_RESET);
 8000a7e:	8bbb      	ldrh	r3, [r7, #28]
 8000a80:	2200      	movs	r2, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	69b8      	ldr	r0, [r7, #24]
 8000a86:	f003 fe1c 	bl	80046c2 <HAL_GPIO_WritePin>
 8000a8a:	e005      	b.n	8000a98 <MicrostepDriver_Run+0x5c>

	}
	else
	{
		HAL_GPIO_WritePin(DIR1_Port, DIR1_Pin, GPIO_PIN_SET);
 8000a8c:	8bbb      	ldrh	r3, [r7, #28]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4619      	mov	r1, r3
 8000a92:	69b8      	ldr	r0, [r7, #24]
 8000a94:	f003 fe15 	bl	80046c2 <HAL_GPIO_WritePin>
	}


	HAL_TIM_PWM_Start(&htim3, PWM_Channel); // Начало генерации ШИМ сигнала
 8000a98:	6a39      	ldr	r1, [r7, #32]
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000a9c:	f005 f942 	bl	8005d24 <HAL_TIM_PWM_Start>
	else // Если частота задана как 0, то останов ШД
	{
		HAL_TIM_PWM_Stop(&htim3, PWM_Channel);
	}

}
 8000aa0:	e003      	b.n	8000aaa <MicrostepDriver_Run+0x6e>
		HAL_TIM_PWM_Stop(&htim3, PWM_Channel);
 8000aa2:	6a39      	ldr	r1, [r7, #32]
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <MicrostepDriver_Run+0x78>)
 8000aa6:	f005 f9f7 	bl	8005e98 <HAL_TIM_PWM_Stop>
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20003dd4 	.word	0x20003dd4
 8000ab8:	40000400 	.word	0x40000400

08000abc <IndicatorPanel_Ini>:
#include "PCB_WELDER.h"

void IndicatorPanel_Ini (void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	STLED316S_Ini(oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); // Индикатор "ВЛЕВО"
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <IndicatorPanel_Ini+0x28>)
 8000ac4:	f000 fc6e 	bl	80013a4 <STLED316S_Ini>
	STLED316S_Ini(oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin); // Индикатор "ВПРАВО"
 8000ac8:	2120      	movs	r1, #32
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <IndicatorPanel_Ini+0x28>)
 8000acc:	f000 fc6a 	bl	80013a4 <STLED316S_Ini>
	STLED316S_Ini(oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin); // Индикаторы "СКОРОСТЬ" (ст. 3 разряда) и "ПРОГРАММА" (мл. 3 разряда)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <IndicatorPanel_Ini+0x2c>)
 8000ad4:	f000 fc66 	bl	80013a4 <STLED316S_Ini>
  //STLED316S_Ini(oSTLED316S_STB4_GPIO_Port, oSTLED316S_STB4_Pin); // Микросхема не установлена, резерв
	STLED316S_Ini(oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin); // Индикаторы "ЗАДЕРЖКА" (слева, ст. 2 разряда) "ЗАДЕРЖКА" (справа, 2 и 3  разряды драйвера)
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <IndicatorPanel_Ini+0x30>)
 8000adc:	f000 fc62 	bl	80013a4 <STLED316S_Ini>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	40010800 	.word	0x40010800

08000af0 <IndicatorPanel_SetValue>:

void IndicatorPanel_SetValue (IndicatorValues *IndicatorPanel0)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]
	uint8_t num;

	uint8_t LEDsOut;

	LEDsOut = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	737b      	strb	r3, [r7, #13]

	for(uint8_t i = 0; i < 6; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e006      	b.n	8000b10 <IndicatorPanel_SetValue+0x20>
	{
		STLED_digVal[i] = 0;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	4a5b      	ldr	r2, [pc, #364]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 6; i++)
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b05      	cmp	r3, #5
 8000b14:	d9f5      	bls.n	8000b02 <IndicatorPanel_SetValue+0x12>
	}

	//uint8_t gg = 11;

	// Индикатор "ВЛЕВО"
	num = separate(IndicatorPanel0->Xs,  &STLED_digVal[0]);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	4956      	ldr	r1, [pc, #344]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f8e9 	bl	8000cf4 <separate>
 8000b22:	4603      	mov	r3, r0
 8000b24:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_4dig(num, STLED_digVal);
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	4952      	ldr	r1, [pc, #328]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f926 	bl	8000d7c <IndicatorPanel_offset_4dig>
	STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin);
 8000b30:	2310      	movs	r3, #16
 8000b32:	4a51      	ldr	r2, [pc, #324]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000b34:	2104      	movs	r1, #4
 8000b36:	484f      	ldr	r0, [pc, #316]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b38:	f000 fc68 	bl	800140c <STLED316S_OutData>

	// Индикатор "ВПРАВО"
	num = separate(IndicatorPanel0->Xf,  &STLED_digVal[0]);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	885b      	ldrh	r3, [r3, #2]
 8000b40:	494c      	ldr	r1, [pc, #304]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f8d6 	bl	8000cf4 <separate>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_4dig(num, STLED_digVal);
 8000b4c:	7bbb      	ldrb	r3, [r7, #14]
 8000b4e:	4949      	ldr	r1, [pc, #292]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f913 	bl	8000d7c <IndicatorPanel_offset_4dig>
	STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin);
 8000b56:	2320      	movs	r3, #32
 8000b58:	4a47      	ldr	r2, [pc, #284]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	4845      	ldr	r0, [pc, #276]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b5e:	f000 fc55 	bl	800140c <STLED316S_OutData>

	// Вывод пред и пост задержки
	num = separate(IndicatorPanel0->Delay_s, &STLED_digVal[0]);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	791b      	ldrb	r3, [r3, #4]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4942      	ldr	r1, [pc, #264]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f8c2 	bl	8000cf4 <separate>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73bb      	strb	r3, [r7, #14]
	//IndicatorPanel_offset_2dig(num, &STLED_digVal[0]);
	num = separate(IndicatorPanel0->Delay_f, &STLED_digVal[2]);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	795b      	ldrb	r3, [r3, #5]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4940      	ldr	r1, [pc, #256]	; (8000c7c <IndicatorPanel_SetValue+0x18c>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f8b9 	bl	8000cf4 <separate>
 8000b82:	4603      	mov	r3, r0
 8000b84:	73bb      	strb	r3, [r7, #14]
	//IndicatorPanel_offset_2dig(num, &STLED_digVal[2]);
	//STLED316S_OutData(STLED_digVal, 4, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);

	STLED316S_Single_Out(&STLED_digVal[0], 6, 1, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2106      	movs	r1, #6
 8000b90:	4838      	ldr	r0, [pc, #224]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000b92:	f000 fc99 	bl	80014c8 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[1], 5, 0, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000b96:	2340      	movs	r3, #64	; 0x40
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2105      	movs	r1, #5
 8000ba0:	4838      	ldr	r0, [pc, #224]	; (8000c84 <IndicatorPanel_SetValue+0x194>)
 8000ba2:	f000 fc91 	bl	80014c8 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[2], 4, 1, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000ba6:	2340      	movs	r3, #64	; 0x40
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4832      	ldr	r0, [pc, #200]	; (8000c7c <IndicatorPanel_SetValue+0x18c>)
 8000bb2:	f000 fc89 	bl	80014c8 <STLED316S_Single_Out>
	STLED316S_Single_Out(&STLED_digVal[3], 3, 0, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000bb6:	2340      	movs	r3, #64	; 0x40
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <IndicatorPanel_SetValue+0x190>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2103      	movs	r1, #3
 8000bc0:	4831      	ldr	r0, [pc, #196]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000bc2:	f000 fc81 	bl	80014c8 <STLED316S_Single_Out>


	// Индикаторы "СКОРОСТЬ" (ст. 3 разряда) и "ПРОГРАММА" (мл. 3 разряда)
	num = separate(IndicatorPanel0->Speed, &STLED_digVal[0]);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	88db      	ldrh	r3, [r3, #6]
 8000bca:	492a      	ldr	r1, [pc, #168]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f891 	bl	8000cf4 <separate>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_3dig(num, &STLED_digVal[0]);
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	4926      	ldr	r1, [pc, #152]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f920 	bl	8000e20 <IndicatorPanel_offset_3dig>

	num = separate(IndicatorPanel0->Program, &STLED_digVal[3]);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	891b      	ldrh	r3, [r3, #8]
 8000be4:	4928      	ldr	r1, [pc, #160]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f884 	bl	8000cf4 <separate>
 8000bec:	4603      	mov	r3, r0
 8000bee:	73bb      	strb	r3, [r7, #14]
	IndicatorPanel_offset_3dig(num, &STLED_digVal[3]);
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	4925      	ldr	r1, [pc, #148]	; (8000c88 <IndicatorPanel_SetValue+0x198>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f913 	bl	8000e20 <IndicatorPanel_offset_3dig>
	STLED316S_OutData(STLED_digVal, 6, oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <IndicatorPanel_SetValue+0x19c>)
 8000bfe:	2106      	movs	r1, #6
 8000c00:	481c      	ldr	r0, [pc, #112]	; (8000c74 <IndicatorPanel_SetValue+0x184>)
 8000c02:	f000 fc03 	bl	800140c <STLED316S_OutData>


	if((IndicatorPanel0->LEDsState & LED_AUTO) == LED_AUTO)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7bdb      	ldrb	r3, [r3, #15]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <IndicatorPanel_SetValue+0x12c>
	{
		LEDsOut |= 0x10;
 8000c12:	7b7b      	ldrb	r3, [r7, #13]
 8000c14:	f043 0310 	orr.w	r3, r3, #16
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_PARKING) == LED_PARKING)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7bdb      	ldrb	r3, [r3, #15]
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <IndicatorPanel_SetValue+0x142>
	{
		LEDsOut |= 0x20;
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	f043 0320 	orr.w	r3, r3, #32
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_DOWN) == LED_DOWN)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7bdb      	ldrb	r3, [r3, #15]
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d004      	beq.n	8000c48 <IndicatorPanel_SetValue+0x158>
	{
		LEDsOut |= 0x40;
 8000c3e:	7b7b      	ldrb	r3, [r7, #13]
 8000c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	737b      	strb	r3, [r7, #13]
	}

	if((IndicatorPanel0->LEDsState & LED_UP) == LED_UP)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7bdb      	ldrb	r3, [r3, #15]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d004      	beq.n	8000c5e <IndicatorPanel_SetValue+0x16e>
	{
		LEDsOut |= 0x80;
 8000c54:	7b7b      	ldrb	r3, [r7, #13]
 8000c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	737b      	strb	r3, [r7, #13]
	}

	// Вывод состояния светодиодов
	STLED316S_Direct_Single_Out(&LEDsOut, 2, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора
 8000c5e:	f107 000d 	add.w	r0, r7, #13
 8000c62:	2310      	movs	r3, #16
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <IndicatorPanel_SetValue+0x188>)
 8000c66:	2102      	movs	r1, #2
 8000c68:	f000 fc90 	bl	800158c <STLED316S_Direct_Single_Out>
}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20003dc8 	.word	0x20003dc8
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	20003dca 	.word	0x20003dca
 8000c80:	40010800 	.word	0x40010800
 8000c84:	20003dc9 	.word	0x20003dc9
 8000c88:	20003dcb 	.word	0x20003dcb
 8000c8c:	40010c00 	.word	0x40010c00

08000c90 <IndicatorPanel_SetBrightness>:
	STLED316S_Direct_Single_Out(&LEDsOut, 2, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin); //Прямой вывод значения (не числа) в нужный разряд идкатора

}

void IndicatorPanel_SetBrightness (IndicatorValues *IndicatorPanel0)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if (IndicatorPanel0->Brightness > 7)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7a9b      	ldrb	r3, [r3, #10]
 8000c9c:	2b07      	cmp	r3, #7
 8000c9e:	d902      	bls.n	8000ca6 <IndicatorPanel_SetBrightness+0x16>
	{
		IndicatorPanel0->Brightness = 7;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	729a      	strb	r2, [r3, #10]
	}
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB1_GPIO_Port, oSTLED316S_STB1_Pin);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7a9b      	ldrb	r3, [r3, #10]
 8000caa:	2210      	movs	r2, #16
 8000cac:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <IndicatorPanel_SetBrightness+0x58>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fcbc 	bl	800162c <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB2_GPIO_Port, oSTLED316S_STB2_Pin);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7a9b      	ldrb	r3, [r3, #10]
 8000cb8:	2220      	movs	r2, #32
 8000cba:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <IndicatorPanel_SetBrightness+0x58>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fcb5 	bl	800162c <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7a9b      	ldrb	r3, [r3, #10]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4908      	ldr	r1, [pc, #32]	; (8000cec <IndicatorPanel_SetBrightness+0x5c>)
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fcae 	bl	800162c <STLED316S_SetBrightness>
	STLED316S_SetBrightness (IndicatorPanel0->Brightness, oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7a9b      	ldrb	r3, [r3, #10]
 8000cd4:	2240      	movs	r2, #64	; 0x40
 8000cd6:	4906      	ldr	r1, [pc, #24]	; (8000cf0 <IndicatorPanel_SetBrightness+0x60>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fca7 	bl	800162c <STLED316S_SetBrightness>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	40010800 	.word	0x40010800

08000cf4 <separate>:

int32_t separate (uint16_t in_data, uint8_t *out_data)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	80fb      	strh	r3, [r7, #6]
    int32_t k,i,m;
    k = in_data;
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	617b      	str	r3, [r7, #20]
    m = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]

    while(k != 0)       //цикл чтобы найти количество цифр в числе
 8000d08:	e00a      	b.n	8000d20 <separate+0x2c>
    {
        k = k / 10;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <separate+0x80>)
 8000d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d12:	1092      	asrs	r2, r2, #2
 8000d14:	17db      	asrs	r3, r3, #31
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
        m++;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
    while(k != 0)       //цикл чтобы найти количество цифр в числе
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f1      	bne.n	8000d0a <separate+0x16>
    }

    for(i=m-1;i>=0;i--)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	e018      	b.n	8000d60 <separate+0x6c>
    {
    	out_data[i] = in_data%10;      //берем последнюю цифру с числа
 8000d2e:	88fa      	ldrh	r2, [r7, #6]
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <separate+0x84>)
 8000d32:	fba3 1302 	umull	r1, r3, r3, r2
 8000d36:	08d9      	lsrs	r1, r3, #3
 8000d38:	460b      	mov	r3, r1
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	b299      	uxth	r1, r3
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
    	in_data = in_data / 10;         //забираем эту цифру с числа
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <separate+0x84>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	80fb      	strh	r3, [r7, #6]
    for(i=m-1;i>=0;i--)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	dae3      	bge.n	8000d2e <separate+0x3a>
    }

    return m;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	66666667 	.word	0x66666667
 8000d78:	cccccccd 	.word	0xcccccccd

08000d7c <IndicatorPanel_offset_4dig>:

void IndicatorPanel_offset_4dig (uint8_t num, uint8_t *dataArray)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d841      	bhi.n	8000e14 <IndicatorPanel_offset_4dig+0x98>
 8000d90:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <IndicatorPanel_offset_4dig+0x1c>)
 8000d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d96:	bf00      	nop
 8000d98:	08000da9 	.word	0x08000da9
 8000d9c:	08000dcb 	.word	0x08000dcb
 8000da0:	08000def 	.word	0x08000def
 8000da4:	08000e15 	.word	0x08000e15
	{

	case 1:
	{
		dataArray[3] = dataArray[0];
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	3303      	adds	r3, #3
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	701a      	strb	r2, [r3, #0]
		dataArray[2] = 0;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	3302      	adds	r3, #2
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
		break;
 8000dc8:	e025      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
	}

	case 2:
	{
		dataArray[3] = dataArray[1];
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3303      	adds	r3, #3
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	7852      	ldrb	r2, [r2, #1]
 8000dd2:	701a      	strb	r2, [r3, #0]
		dataArray[2] = dataArray[0];
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	7812      	ldrb	r2, [r2, #0]
 8000ddc:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
		break;
 8000dec:	e013      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
	}

	case 3:
	{
		dataArray[3] = dataArray[2];
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	3303      	adds	r3, #3
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	7892      	ldrb	r2, [r2, #2]
 8000df6:	701a      	strb	r2, [r3, #0]
		dataArray[2] = dataArray[1];
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	7852      	ldrb	r2, [r2, #1]
 8000e00:	701a      	strb	r2, [r3, #0]
		dataArray[1] = dataArray[0];
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]

		break;
 8000e12:	e000      	b.n	8000e16 <IndicatorPanel_offset_4dig+0x9a>
		break;
	}

default:
{
	break;
 8000e14:	bf00      	nop
}

	}

}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <IndicatorPanel_offset_3dig>:

}


void IndicatorPanel_offset_3dig (uint8_t num, uint8_t *dataArray)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d021      	beq.n	8000e76 <IndicatorPanel_offset_3dig+0x56>
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	dc21      	bgt.n	8000e7a <IndicatorPanel_offset_3dig+0x5a>
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d002      	beq.n	8000e40 <IndicatorPanel_offset_3dig+0x20>
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d00d      	beq.n	8000e5a <IndicatorPanel_offset_3dig+0x3a>
		break;
	}

default:
{
	break;
 8000e3e:	e01c      	b.n	8000e7a <IndicatorPanel_offset_3dig+0x5a>
		dataArray[2] = dataArray[0];
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3302      	adds	r3, #2
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	701a      	strb	r2, [r3, #0]
		dataArray[1] = 0;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
		break;
 8000e58:	e010      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
		dataArray[2] = dataArray[1];
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	7852      	ldrb	r2, [r2, #1]
 8000e62:	701a      	strb	r2, [r3, #0]
		dataArray[1] = dataArray[0];
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	7812      	ldrb	r2, [r2, #0]
 8000e6c:	701a      	strb	r2, [r3, #0]
		dataArray[0] = 0;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
		break;
 8000e74:	e002      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
		break;
 8000e76:	bf00      	nop
 8000e78:	e000      	b.n	8000e7c <IndicatorPanel_offset_3dig+0x5c>
	break;
 8000e7a:	bf00      	nop
}

	}

}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
	...

08000e88 <Carriage_Move>:

void Carriage_Move (uint16_t Speed, uint8_t Dir, uint8_t NumSM)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af04      	add	r7, sp, #16
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
 8000e92:	460b      	mov	r3, r1
 8000e94:	717b      	strb	r3, [r7, #5]
 8000e96:	4613      	mov	r3, r2
 8000e98:	713b      	strb	r3, [r7, #4]

uint16_t freq_pwm;

	freq_pwm = ((Speed / (60/10)) * STEPS_PER_ROTATE) / DISTANCE_PER_ROTATE; // Вычисление частоты ШИМ для скорости в см/мин
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <Carriage_Move+0x7c>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fb14 	bl	80004d4 <__aeabi_i2d>
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <Carriage_Move+0x80>)
 8000eb2:	f7ff fb79 	bl	80005a8 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <Carriage_Move+0x84>)
 8000ec4:	f7ff fc9a 	bl	80007fc <__aeabi_ddiv>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fd7c 	bl	80009cc <__aeabi_d2uiz>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	81fb      	strh	r3, [r7, #14]

	if (NumSM == 1)
 8000ed8:	793b      	ldrb	r3, [r7, #4]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10d      	bne.n	8000efa <Carriage_Move+0x72>
	{
		MicrostepDriver_Run (freq_pwm, Dir, oSMD_EN1_GPIO_Port, oSMD_EN1_Pin, oDIR1_GPIO_Port,  oDIR1_Pin, TIM_CHANNEL_1);
 8000ede:	7979      	ldrb	r1, [r7, #5]
 8000ee0:	89f8      	ldrh	r0, [r7, #14]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <Carriage_Move+0x88>)
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <Carriage_Move+0x8c>)
 8000ef6:	f7ff fda1 	bl	8000a3c <MicrostepDriver_Run>
	}
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	aaaaaaab 	.word	0xaaaaaaab
 8000f08:	40690000 	.word	0x40690000
 8000f0c:	404e0000 	.word	0x404e0000
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40010800 	.word	0x40010800

08000f18 <PCB_KeyScan>:

void PCB_KeyScan (void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	STLED316S_ReciveData(&WelderUnit.IndicatorPanel.KeyState[0], oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin);
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	4905      	ldr	r1, [pc, #20]	; (8000f34 <PCB_KeyScan+0x1c>)
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <PCB_KeyScan+0x20>)
 8000f22:	f000 fbdd 	bl	80016e0 <STLED316S_ReciveData>
	STLED316S_ReciveData(&WelderUnit.IndicatorPanel.KeyState[2], oSTLED316S_STB3_GPIO_Port, oSTLED316S_STB3_Pin);
 8000f26:	2201      	movs	r2, #1
 8000f28:	4904      	ldr	r1, [pc, #16]	; (8000f3c <PCB_KeyScan+0x24>)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <PCB_KeyScan+0x28>)
 8000f2c:	f000 fbd8 	bl	80016e0 <STLED316S_ReciveData>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40010800 	.word	0x40010800
 8000f38:	20003559 	.word	0x20003559
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	2000355b 	.word	0x2000355b

08000f44 <PCB_InputsScan>:

void PCB_InputsScan (void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(iPedal_L_GPIO_Port, iPedal_L_Pin)) // Если Нажата педаль для зажима левой части заготовки, то установить бит, иначе сбросить
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4824      	ldr	r0, [pc, #144]	; (8000fdc <PCB_InputsScan+0x98>)
 8000f4c:	f003 fba2 	bl	8004694 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <PCB_InputsScan+0x22>
	{
		WelderUnit.HolderState |= WELDER_STATE_PEDAL_L;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f58:	7c5b      	ldrb	r3, [r3, #17]
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f62:	745a      	strb	r2, [r3, #17]
 8000f64:	e006      	b.n	8000f74 <PCB_InputsScan+0x30>
	}
	else
	{
		WelderUnit.HolderState &= ~WELDER_STATE_PEDAL_L;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f68:	7c5b      	ldrb	r3, [r3, #17]
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f72:	745a      	strb	r2, [r3, #17]
	}

	if (HAL_GPIO_ReadPin(iPedal_R_GPIO_Port, iPedal_R_Pin)) // Если Нажата педаль для зажима правой части заготовки, то установить бит, иначе сбросить
 8000f74:	2108      	movs	r1, #8
 8000f76:	4819      	ldr	r0, [pc, #100]	; (8000fdc <PCB_InputsScan+0x98>)
 8000f78:	f003 fb8c 	bl	8004694 <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <PCB_InputsScan+0x4e>
	{
		WelderUnit.HolderState |= WELDER_STATE_PEDAL_R;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f8e:	745a      	strb	r2, [r3, #17]
 8000f90:	e006      	b.n	8000fa0 <PCB_InputsScan+0x5c>
	}
	else
	{
		WelderUnit.HolderState &= ~WELDER_STATE_PEDAL_R;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f94:	7c5b      	ldrb	r3, [r3, #17]
 8000f96:	f023 0302 	bic.w	r3, r3, #2
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000f9e:	745a      	strb	r2, [r3, #17]
	}

	if (HAL_GPIO_ReadPin(iBackDoor_GPIO_Port, iBackDoor_Pin)) // Если задняя дверца закрыта, то установить бит, иначе сбросить
 8000fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa4:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <PCB_InputsScan+0xa0>)
 8000fa6:	f003 fb75 	bl	8004694 <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00c      	beq.n	8000fca <PCB_InputsScan+0x86>
	{
		WelderUnit.State |= WELDER_STATE_BACK_DOOR_CLOSE;
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fb2:	7c1b      	ldrb	r3, [r3, #16]
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fbc:	741a      	strb	r2, [r3, #16]
		WELDER_HEAD_UP
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2106      	movs	r1, #6
 8000fc2:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <PCB_InputsScan+0xa4>)
 8000fc4:	f003 fb7d 	bl	80046c2 <HAL_GPIO_WritePin>
	}
	else
	{
		WelderUnit.State &= ~WELDER_STATE_BACK_DOOR_CLOSE;
	}
}
 8000fc8:	e006      	b.n	8000fd8 <PCB_InputsScan+0x94>
		WelderUnit.State &= ~WELDER_STATE_BACK_DOOR_CLOSE;
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fcc:	7c1b      	ldrb	r3, [r3, #16]
 8000fce:	f023 0310 	bic.w	r3, r3, #16
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b02      	ldr	r3, [pc, #8]	; (8000fe0 <PCB_InputsScan+0x9c>)
 8000fd6:	741a      	strb	r2, [r3, #16]
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	2000353c 	.word	0x2000353c
 8000fe4:	40010c00 	.word	0x40010c00
 8000fe8:	40011000 	.word	0x40011000

08000fec <PCB_OutputControl>:

void PCB_OutputControl(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	static uint8_t StateOld = 0;

	PCB_InputsScan(); // Опрос входов платы
 8000ff0:	f7ff ffa8 	bl	8000f44 <PCB_InputsScan>


	if ((WelderUnit.HolderState & WELDER_STATE_PEDAL_L) != (StateOld & WELDER_STATE_PEDAL_L)) // Если произошли изменения на входе отвечающим за девую педаль
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <PCB_OutputControl+0xb4>)
 8000ff6:	7c5a      	ldrb	r2, [r3, #17]
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <PCB_OutputControl+0xb8>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4053      	eors	r3, r2
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00c      	beq.n	8001022 <PCB_OutputControl+0x36>
	{
		if(WelderUnit.HolderState & WELDER_STATE_PEDAL_L) // Если педаль была нажата (фронт импульса)
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <PCB_OutputControl+0xb4>)
 800100a:	7c5b      	ldrb	r3, [r3, #17]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <PCB_OutputControl+0x36>
		{
			WelderUnit.HolderState = WelderUnit.HolderState ^ WELDER_STATE_HOLDER_L; // Инвертировать состояние бита держателя затовки
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001016:	7c5b      	ldrb	r3, [r3, #17]
 8001018:	f083 0304 	eor.w	r3, r3, #4
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001020:	745a      	strb	r2, [r3, #17]
		}

	}

	if ((WelderUnit.HolderState & WELDER_STATE_PEDAL_R) != (StateOld & WELDER_STATE_PEDAL_R)) // Если произошли изменения на входе отвечающим за девую педаль
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001024:	7c5a      	ldrb	r2, [r3, #17]
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <PCB_OutputControl+0xb8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4053      	eors	r3, r2
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00c      	beq.n	8001050 <PCB_OutputControl+0x64>
	{
		if(WelderUnit.HolderState & WELDER_STATE_PEDAL_R) // Если педаль была нажата (фронт импульса)
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001038:	7c5b      	ldrb	r3, [r3, #17]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <PCB_OutputControl+0x64>
		{
			WelderUnit.HolderState = WelderUnit.HolderState ^ WELDER_STATE_HOLDER_R; // Инвертировать состояние бита держателя затовки
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001044:	7c5b      	ldrb	r3, [r3, #17]
 8001046:	f083 0308 	eor.w	r3, r3, #8
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <PCB_OutputControl+0xb4>)
 800104e:	745a      	strb	r2, [r3, #17]
		}

	}

	if(WelderUnit.HolderState & WELDER_STATE_HOLDER_L) // Если бит установлен, то зажать зажать заготвку, иначе отпустить
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001052:	7c5b      	ldrb	r3, [r3, #17]
 8001054:	f003 0304 	and.w	r3, r3, #4
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <PCB_OutputControl+0x7c>
	{
		Valve_L_CLOSE
 800105c:	2201      	movs	r2, #1
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	4811      	ldr	r0, [pc, #68]	; (80010a8 <PCB_OutputControl+0xbc>)
 8001062:	f003 fb2e 	bl	80046c2 <HAL_GPIO_WritePin>
 8001066:	e004      	b.n	8001072 <PCB_OutputControl+0x86>
	}
	else
	{
		Valve_L_OPEN
 8001068:	2200      	movs	r2, #0
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	480e      	ldr	r0, [pc, #56]	; (80010a8 <PCB_OutputControl+0xbc>)
 800106e:	f003 fb28 	bl	80046c2 <HAL_GPIO_WritePin>
	}

	if(WelderUnit.HolderState & WELDER_STATE_HOLDER_R) // Если бит установлен, то зажать зажать заготвку, иначе отпустить
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001074:	7c5b      	ldrb	r3, [r3, #17]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <PCB_OutputControl+0x9e>
	{
		Valve_R_CLOSE
 800107e:	2201      	movs	r2, #1
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <PCB_OutputControl+0xbc>)
 8001084:	f003 fb1d 	bl	80046c2 <HAL_GPIO_WritePin>
 8001088:	e004      	b.n	8001094 <PCB_OutputControl+0xa8>
	}
	else
	{
		Valve_R_OPEN
 800108a:	2200      	movs	r2, #0
 800108c:	2140      	movs	r1, #64	; 0x40
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <PCB_OutputControl+0xbc>)
 8001090:	f003 fb17 	bl	80046c2 <HAL_GPIO_WritePin>
	}

	StateOld = WelderUnit.HolderState; // Сохранить текущее состояние
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <PCB_OutputControl+0xb4>)
 8001096:	7c5a      	ldrb	r2, [r3, #17]
 8001098:	4b02      	ldr	r3, [pc, #8]	; (80010a4 <PCB_OutputControl+0xb8>)
 800109a:	701a      	strb	r2, [r3, #0]

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000353c 	.word	0x2000353c
 80010a4:	2000002c 	.word	0x2000002c
 80010a8:	40010c00 	.word	0x40010c00

080010ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(iSTLED316S_IRQN5_GPIO_Port, iSTLED316S_IRQN5_Pin) == GPIO_PIN_RESET)
 80010b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ba:	4822      	ldr	r0, [pc, #136]	; (8001144 <HAL_GPIO_EXTI_Callback+0x98>)
 80010bc:	f003 faea 	bl	8004694 <HAL_GPIO_ReadPin>

	}



	if (HAL_GPIO_ReadPin(iFB_STEP1_GPIO_Port, iFB_STEP1_Pin) == GPIO_PIN_SET)
 80010c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c4:	4820      	ldr	r0, [pc, #128]	; (8001148 <HAL_GPIO_EXTI_Callback+0x9c>)
 80010c6:	f003 fae5 	bl	8004694 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10e      	bne.n	80010ee <HAL_GPIO_EXTI_Callback+0x42>
		//#define configASSERT( x ) if ((x) == 0) {taskDISABLE_INTERRUPTS(); for( ;; );}
		// Без этого не работают семафоры


		static portBASE_TYPE xHigherPriorityTaskWoken;
		  xHigherPriorityTaskWoken = pdFALSE; // Не переключать контекст
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <HAL_GPIO_EXTI_Callback+0xa0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]

		  //WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / STEPS_PER_ROTATE; // Вычисление текущей позиции каретки, мм

			  xSemaphoreGiveFromISR(xSemaphore_StepCount,&xHigherPriorityTaskWoken);
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <HAL_GPIO_EXTI_Callback+0xa4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	491c      	ldr	r1, [pc, #112]	; (800114c <HAL_GPIO_EXTI_Callback+0xa0>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 f905 	bl	80072ec <xQueueGiveFromISR>


		if( xHigherPriorityTaskWoken == pdTRUE )
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_GPIO_EXTI_Callback+0xa0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_EXTI_Callback+0x42>
				вместе с портом FreeRTOS. */
			 //portSWITCH_CONTEXT();
			//vTaskSwitchContext();
			//portYIELD_FROM_ISR(NULL);

			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 80010ea:	f007 f949 	bl	8008380 <vTaskMissedYield>

		  }
	}

	if (HAL_GPIO_ReadPin(iCarriageStop_GPIO_Port, iCarriageStop_Pin) == GPIO_PIN_SET)
 80010ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f2:	4814      	ldr	r0, [pc, #80]	; (8001144 <HAL_GPIO_EXTI_Callback+0x98>)
 80010f4:	f003 face 	bl	8004694 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d116      	bne.n	800112c <HAL_GPIO_EXTI_Callback+0x80>
		// В файле FreeRTOSConfig.h закомментировать
		//#define configASSERT( x ) if ((x) == 0) {taskDISABLE_INTERRUPTS(); for( ;; );}
		// Без этого не работают семафоры

		static portBASE_TYPE xHigherPriorityTaskWoken2;
		  xHigherPriorityTaskWoken2 = pdFALSE; // Не переключать контекст
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

		  //WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / STEPS_PER_ROTATE; // Вычисление текущей позиции каретки, мм

			  xSemaphoreGiveFromISR(xSemaphore_Calibration, &xHigherPriorityTaskWoken2);
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_GPIO_EXTI_Callback+0xac>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4912      	ldr	r1, [pc, #72]	; (8001154 <HAL_GPIO_EXTI_Callback+0xa8>)
 800110a:	4618      	mov	r0, r3
 800110c:	f006 f8ee 	bl	80072ec <xQueueGiveFromISR>

			  WelderUnit.State |= 1<<3; // 3 бит - Состояние вывода iCarriageStop, 1 - коневик нажат кареткой
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001112:	7c1b      	ldrb	r3, [r3, #16]
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <HAL_GPIO_EXTI_Callback+0xb0>)
 800111c:	741a      	strb	r2, [r3, #16]


		if( xHigherPriorityTaskWoken2 == pdTRUE )
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d109      	bne.n	800113a <HAL_GPIO_EXTI_Callback+0x8e>
		  {
			vTaskMissedYield(); // Переключение контекста. Нужно тестить, возможно переключение контекста не происходит
 8001126:	f007 f92b 	bl	8008380 <vTaskMissedYield>
	{
		WelderUnit.State &= ~0x08; //// 3 бит - Состояние вывода iCarriageStop 0 - коневик отжат.

	}

}
 800112a:	e006      	b.n	800113a <HAL_GPIO_EXTI_Callback+0x8e>
		WelderUnit.State &= ~0x08; //// 3 бит - Состояние вывода iCarriageStop 0 - коневик отжат.
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_GPIO_EXTI_Callback+0xb0>)
 800112e:	7c1b      	ldrb	r3, [r3, #16]
 8001130:	f023 0308 	bic.w	r3, r3, #8
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_GPIO_EXTI_Callback+0xb0>)
 8001138:	741a      	strb	r2, [r3, #16]
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40010c00 	.word	0x40010c00
 8001148:	40011000 	.word	0x40011000
 800114c:	20000030 	.word	0x20000030
 8001150:	20003560 	.word	0x20003560
 8001154:	20000034 	.word	0x20000034
 8001158:	20003dc4 	.word	0x20003dc4
 800115c:	2000353c 	.word	0x2000353c

08001160 <SaveProgramToFlash2>:

void SaveProgramToFlash2()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	uint32_t *p; // Указатель на считваемые из flash памяти данные

	uint16_t offset = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	80bb      	strh	r3, [r7, #4]

	p = (uint32_t*)PAGE; // p содержит начальный адрес записи параметров программы
 800116a:	4b3c      	ldr	r3, [pc, #240]	; (800125c <SaveProgramToFlash2+0xfc>)
 800116c:	603b      	str	r3, [r7, #0]

	for(uint16_t i = 0; i < 256; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	e010      	b.n	8001196 <SaveProgramToFlash2+0x36>
	{
		ReadFlashPage[i] = *(p + i);
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	4413      	add	r3, r2
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	88f9      	ldrh	r1, [r7, #6]
 8001180:	461a      	mov	r2, r3
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	4836      	ldr	r0, [pc, #216]	; (8001260 <SaveProgramToFlash2+0x100>)
 8001188:	00c9      	lsls	r1, r1, #3
 800118a:	4401      	add	r1, r0
 800118c:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i = 0; i < 256; i++)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	3301      	adds	r3, #1
 8001194:	80fb      	strh	r3, [r7, #6]
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	2bff      	cmp	r3, #255	; 0xff
 800119a:	d9eb      	bls.n	8001174 <SaveProgramToFlash2+0x14>
	}

	offset = WelderUnit.Program * 6;
 800119c:	4b31      	ldr	r3, [pc, #196]	; (8001264 <SaveProgramToFlash2+0x104>)
 800119e:	899b      	ldrh	r3, [r3, #12]
 80011a0:	461a      	mov	r2, r3
 80011a2:	0052      	lsls	r2, r2, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	80bb      	strh	r3, [r7, #4]

	ReadFlashPage[offset] = WelderUnit.Program;
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <SaveProgramToFlash2+0x104>)
 80011ac:	899b      	ldrh	r3, [r3, #12]
 80011ae:	88b9      	ldrh	r1, [r7, #4]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	482a      	ldr	r0, [pc, #168]	; (8001260 <SaveProgramToFlash2+0x100>)
 80011b8:	00c9      	lsls	r1, r1, #3
 80011ba:	4401      	add	r1, r0
 80011bc:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 1] = WelderUnit.Xs;
 80011c0:	4b28      	ldr	r3, [pc, #160]	; (8001264 <SaveProgramToFlash2+0x104>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	88ba      	ldrh	r2, [r7, #4]
 80011c6:	1c51      	adds	r1, r2, #1
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	4824      	ldr	r0, [pc, #144]	; (8001260 <SaveProgramToFlash2+0x100>)
 80011d0:	00c9      	lsls	r1, r1, #3
 80011d2:	4401      	add	r1, r0
 80011d4:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 2] = WelderUnit.Xf;
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <SaveProgramToFlash2+0x104>)
 80011da:	885b      	ldrh	r3, [r3, #2]
 80011dc:	88ba      	ldrh	r2, [r7, #4]
 80011de:	1c91      	adds	r1, r2, #2
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	481e      	ldr	r0, [pc, #120]	; (8001260 <SaveProgramToFlash2+0x100>)
 80011e8:	00c9      	lsls	r1, r1, #3
 80011ea:	4401      	add	r1, r0
 80011ec:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 3] = WelderUnit.Speed;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <SaveProgramToFlash2+0x104>)
 80011f2:	88db      	ldrh	r3, [r3, #6]
 80011f4:	88ba      	ldrh	r2, [r7, #4]
 80011f6:	1cd1      	adds	r1, r2, #3
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	4818      	ldr	r0, [pc, #96]	; (8001260 <SaveProgramToFlash2+0x100>)
 8001200:	00c9      	lsls	r1, r1, #3
 8001202:	4401      	add	r1, r0
 8001204:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 4] = WelderUnit.Delay_s;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <SaveProgramToFlash2+0x104>)
 800120a:	7a9b      	ldrb	r3, [r3, #10]
 800120c:	88ba      	ldrh	r2, [r7, #4]
 800120e:	1d11      	adds	r1, r2, #4
 8001210:	b2da      	uxtb	r2, r3
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	4812      	ldr	r0, [pc, #72]	; (8001260 <SaveProgramToFlash2+0x100>)
 8001218:	00c9      	lsls	r1, r1, #3
 800121a:	4401      	add	r1, r0
 800121c:	e9c1 2300 	strd	r2, r3, [r1]
	ReadFlashPage[offset + 5] = WelderUnit.Delay_f;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <SaveProgramToFlash2+0x104>)
 8001222:	7adb      	ldrb	r3, [r3, #11]
 8001224:	88ba      	ldrh	r2, [r7, #4]
 8001226:	1d51      	adds	r1, r2, #5
 8001228:	b2da      	uxtb	r2, r3
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <SaveProgramToFlash2+0x100>)
 8001230:	00c9      	lsls	r1, r1, #3
 8001232:	4401      	add	r1, r0
 8001234:	e9c1 2300 	strd	r2, r3, [r1]

	STM32_WriteToFlash3(ReadFlashPage, 64);
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4809      	ldr	r0, [pc, #36]	; (8001260 <SaveProgramToFlash2+0x100>)
 800123c:	f000 face 	bl	80017dc <STM32_WriteToFlash3>

	p = (uint32_t*)PAGE + offset/4; // p содержит начальный адрес записи параметров программы
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	b29b      	uxth	r3, r3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800124c:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 8001250:	603b      	str	r3, [r7, #0]

}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	0803f800 	.word	0x0803f800
 8001260:	20003570 	.word	0x20003570
 8001264:	2000353c 	.word	0x2000353c

08001268 <ReadProgramFromFlash2>:

void ReadProgramFromFlash2()
{
 8001268:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
	uint32_t *p; // Указатель на считваемые из flash памяти данные

	uint16_t offset = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	80bb      	strh	r3, [r7, #4]

	p = (uint32_t*)PAGE; // p содержит начальный адрес записи параметров программы
 8001274:	4b48      	ldr	r3, [pc, #288]	; (8001398 <ReadProgramFromFlash2+0x130>)
 8001276:	603b      	str	r3, [r7, #0]

	for(uint16_t i = 0; i < 256; i++)
 8001278:	2300      	movs	r3, #0
 800127a:	80fb      	strh	r3, [r7, #6]
 800127c:	e010      	b.n	80012a0 <ReadProgramFromFlash2+0x38>
	{
		ReadFlashPage[i] = *(p + i);
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	4413      	add	r3, r2
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	88f9      	ldrh	r1, [r7, #6]
 800128a:	461a      	mov	r2, r3
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	4842      	ldr	r0, [pc, #264]	; (800139c <ReadProgramFromFlash2+0x134>)
 8001292:	00c9      	lsls	r1, r1, #3
 8001294:	4401      	add	r1, r0
 8001296:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint16_t i = 0; i < 256; i++)
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	3301      	adds	r3, #1
 800129e:	80fb      	strh	r3, [r7, #6]
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	2bff      	cmp	r3, #255	; 0xff
 80012a4:	d9eb      	bls.n	800127e <ReadProgramFromFlash2+0x16>
	}

	offset = WelderUnit.Program * 6;
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 80012a8:	899b      	ldrh	r3, [r3, #12]
 80012aa:	461a      	mov	r2, r3
 80012ac:	0052      	lsls	r2, r2, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	80bb      	strh	r3, [r7, #4]

	if (WelderUnit.Program - ReadFlashPage[offset] <= 1 || ReadFlashPage[offset] - WelderUnit.Program <= 1)
 80012b4:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 80012b6:	899b      	ldrh	r3, [r3, #12]
 80012b8:	b298      	uxth	r0, r3
 80012ba:	f04f 0100 	mov.w	r1, #0
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	4a36      	ldr	r2, [pc, #216]	; (800139c <ReadProgramFromFlash2+0x134>)
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	ebb0 0802 	subs.w	r8, r0, r2
 80012ce:	eb61 0903 	sbc.w	r9, r1, r3
 80012d2:	f1b9 0f00 	cmp.w	r9, #0
 80012d6:	bf08      	it	eq
 80012d8:	f1b8 0f02 	cmpeq.w	r8, #2
 80012dc:	d311      	bcc.n	8001302 <ReadProgramFromFlash2+0x9a>
 80012de:	88bb      	ldrh	r3, [r7, #4]
 80012e0:	4a2e      	ldr	r2, [pc, #184]	; (800139c <ReadProgramFromFlash2+0x134>)
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 80012ec:	899b      	ldrh	r3, [r3, #12]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	1a84      	subs	r4, r0, r2
 80012f6:	eb61 0503 	sbc.w	r5, r1, r3
 80012fa:	2d00      	cmp	r5, #0
 80012fc:	bf08      	it	eq
 80012fe:	2c02      	cmpeq	r4, #2
 8001300:	d244      	bcs.n	800138c <ReadProgramFromFlash2+0x124>
	{
		if (ReadFlashPage[offset] <= PROGRAM_MAX)
 8001302:	88bb      	ldrh	r3, [r7, #4]
 8001304:	4a25      	ldr	r2, [pc, #148]	; (800139c <ReadProgramFromFlash2+0x134>)
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4413      	add	r3, r2
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf08      	it	eq
 8001312:	2a47      	cmpeq	r2, #71	; 0x47
 8001314:	d23a      	bcs.n	800138c <ReadProgramFromFlash2+0x124>
		{
			WelderUnit.Program = ReadFlashPage[offset];
 8001316:	88bb      	ldrh	r3, [r7, #4]
 8001318:	4a20      	ldr	r2, [pc, #128]	; (800139c <ReadProgramFromFlash2+0x134>)
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4413      	add	r3, r2
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	b292      	uxth	r2, r2
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 8001326:	819a      	strh	r2, [r3, #12]
			WelderUnit.Xs = ReadFlashPage[offset + 1];
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <ReadProgramFromFlash2+0x134>)
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4413      	add	r3, r2
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	b292      	uxth	r2, r2
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 800133a:	801a      	strh	r2, [r3, #0]
			WelderUnit.Xf = ReadFlashPage[offset + 2];
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	3302      	adds	r3, #2
 8001340:	4a16      	ldr	r2, [pc, #88]	; (800139c <ReadProgramFromFlash2+0x134>)
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4413      	add	r3, r2
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	b292      	uxth	r2, r2
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 800134e:	805a      	strh	r2, [r3, #2]
			WelderUnit.Speed = ReadFlashPage[offset + 3];
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	3303      	adds	r3, #3
 8001354:	4a11      	ldr	r2, [pc, #68]	; (800139c <ReadProgramFromFlash2+0x134>)
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	4413      	add	r3, r2
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	b292      	uxth	r2, r2
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 8001362:	80da      	strh	r2, [r3, #6]
			WelderUnit.Delay_s = ReadFlashPage[offset + 4];
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	3304      	adds	r3, #4
 8001368:	4a0c      	ldr	r2, [pc, #48]	; (800139c <ReadProgramFromFlash2+0x134>)
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 8001376:	729a      	strb	r2, [r3, #10]
			WelderUnit.Delay_f = ReadFlashPage[offset + 5];
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	3305      	adds	r3, #5
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <ReadProgramFromFlash2+0x134>)
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <ReadProgramFromFlash2+0x138>)
 800138a:	72da      	strb	r2, [r3, #11]

//	STM32_WriteToFlash3(ReadFlashPage, 64);
//
//	p = (uint32_t*)PAGE + offset/4; // p содержит начальный адрес записи параметров программы

}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001396:	4770      	bx	lr
 8001398:	0803f800 	.word	0x0803f800
 800139c:	20003570 	.word	0x20003570
 80013a0:	2000353c 	.word	0x2000353c

080013a4 <STLED316S_Ini>:
};



void STLED316S_Ini (GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]

	STLED316S_SetBrightness(7, STLED_PORT_STB, STLED_PIN_STB);
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	461a      	mov	r2, r3
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	2007      	movs	r0, #7
 80013b8:	f000 f938 	bl	800162c <STLED316S_SetBrightness>


	STLED_TxData[0] = 0x0D; // Включить дисплей
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <STLED316S_Ini+0x60>)
 80013be:	220d      	movs	r2, #13
 80013c0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f003 f97a 	bl	80046c2 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80013ce:	2005      	movs	r0, #5
 80013d0:	f000 f9e6 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, STLED_TxData, 1, 10000);
 80013d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80013d8:	2201      	movs	r2, #1
 80013da:	490a      	ldr	r1, [pc, #40]	; (8001404 <STLED316S_Ini+0x60>)
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <STLED316S_Ini+0x64>)
 80013de:	f003 fe0d 	bl	8004ffc <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 80013e2:	2005      	movs	r0, #5
 80013e4:	f000 f9dc 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4619      	mov	r1, r3
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f003 f967 	bl	80046c2 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80013f4:	2005      	movs	r0, #5
 80013f6:	f000 f9d3 	bl	80017a0 <DelayMicro>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20003d98 	.word	0x20003d98
 8001408:	20003e1c 	.word	0x20003e1c

0800140c <STLED316S_OutData>:


void STLED316S_OutData (uint8_t *data, uint8_t num, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	461a      	mov	r2, r3
 8001418:	460b      	mov	r3, r1
 800141a:	72fb      	strb	r3, [r7, #11]
 800141c:	4613      	mov	r3, r2
 800141e:	813b      	strh	r3, [r7, #8]
	STLED_TxData[0] = 0x00; // Вывод с автоикрементом адреса
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <STLED316S_OutData+0xb0>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]

	STLED_TxData[1] = 0x00;
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <STLED316S_OutData+0xb0>)
 8001428:	2200      	movs	r2, #0
 800142a:	705a      	strb	r2, [r3, #1]
	STLED_TxData[2] = 0x00;
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <STLED316S_OutData+0xb0>)
 800142e:	2200      	movs	r2, #0
 8001430:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = 0x00;
 8001432:	4b22      	ldr	r3, [pc, #136]	; (80014bc <STLED316S_OutData+0xb0>)
 8001434:	2200      	movs	r2, #0
 8001436:	70da      	strb	r2, [r3, #3]
	STLED_TxData[4] = 0x00;
 8001438:	4b20      	ldr	r3, [pc, #128]	; (80014bc <STLED316S_OutData+0xb0>)
 800143a:	2200      	movs	r2, #0
 800143c:	711a      	strb	r2, [r3, #4]
	STLED_TxData[5] = 0x00;
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <STLED316S_OutData+0xb0>)
 8001440:	2200      	movs	r2, #0
 8001442:	715a      	strb	r2, [r3, #5]
	STLED_TxData[6] = 0x00;
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <STLED316S_OutData+0xb0>)
 8001446:	2200      	movs	r2, #0
 8001448:	719a      	strb	r2, [r3, #6]

	for(uint8_t i = 0; i < num; i++)
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
 800144e:	e00d      	b.n	800146c <STLED316S_OutData+0x60>
	{
		STLED_TxData[i + 1] = code_digit[data[i]];
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	3301      	adds	r3, #1
 800145e:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <STLED316S_OutData+0xb4>)
 8001460:	5c51      	ldrb	r1, [r2, r1]
 8001462:	4a16      	ldr	r2, [pc, #88]	; (80014bc <STLED316S_OutData+0xb0>)
 8001464:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < num; i++)
 8001466:	7dfb      	ldrb	r3, [r7, #23]
 8001468:	3301      	adds	r3, #1
 800146a:	75fb      	strb	r3, [r7, #23]
 800146c:	7dfa      	ldrb	r2, [r7, #23]
 800146e:	7afb      	ldrb	r3, [r7, #11]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3ed      	bcc.n	8001450 <STLED316S_OutData+0x44>
	}

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 8001474:	893b      	ldrh	r3, [r7, #8]
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f003 f921 	bl	80046c2 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001480:	2005      	movs	r0, #5
 8001482:	f000 f98d 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], num + 1, 10000);
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	b29a      	uxth	r2, r3
 800148e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001492:	490a      	ldr	r1, [pc, #40]	; (80014bc <STLED316S_OutData+0xb0>)
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <STLED316S_OutData+0xb8>)
 8001496:	f003 fdb1 	bl	8004ffc <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 800149a:	2005      	movs	r0, #5
 800149c:	f000 f980 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 80014a0:	893b      	ldrh	r3, [r7, #8]
 80014a2:	2201      	movs	r2, #1
 80014a4:	4619      	mov	r1, r3
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f003 f90b 	bl	80046c2 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80014ac:	2005      	movs	r0, #5
 80014ae:	f000 f977 	bl	80017a0 <DelayMicro>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20003d98 	.word	0x20003d98
 80014c0:	08009458 	.word	0x08009458
 80014c4:	20003e1c 	.word	0x20003e1c

080014c8 <STLED316S_Single_Out>:

void STLED316S_Single_Out (uint8_t *data, uint8_t num, uint8_t DP, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	72fb      	strb	r3, [r7, #11]
 80014d6:	4613      	mov	r3, r2
 80014d8:	72bb      	strb	r3, [r7, #10]
	STLED_TxData[0] = 0x00;
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0x00;
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	705a      	strb	r2, [r3, #1]

	STLED_TxData[0] |= 0x20; // Вывод значения без автоинкремента, в заданный разряд
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f043 0320 	orr.w	r3, r3, #32
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014f2:	701a      	strb	r2, [r3, #0]
	STLED_TxData[0] |= ((6-num) & 0x07); // В какой разряд выводить
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <STLED316S_Single_Out+0xb8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	f1c3 0306 	rsb	r3, r3, #6
 8001500:	b2db      	uxtb	r3, r3
 8001502:	b25b      	sxtb	r3, r3
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	b25b      	sxtb	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b25b      	sxtb	r3, r3
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <STLED316S_Single_Out+0xb8>)
 8001512:	701a      	strb	r2, [r3, #0]

	STLED_TxData[1] = *data; // Выводимое значение
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <STLED316S_Single_Out+0xb8>)
 800151a:	705a      	strb	r2, [r3, #1]


	STLED_TxData[1] = code_digit[data[0]];
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <STLED316S_Single_Out+0xbc>)
 8001524:	5c9a      	ldrb	r2, [r3, r2]
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <STLED316S_Single_Out+0xb8>)
 8001528:	705a      	strb	r2, [r3, #1]

	if(DP) // Вывод точки
 800152a:	7abb      	ldrb	r3, [r7, #10]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <STLED316S_Single_Out+0x76>
	{
		STLED_TxData[1] |= 0x80;
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <STLED316S_Single_Out+0xb8>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <STLED316S_Single_Out+0xb8>)
 800153c:	705a      	strb	r2, [r3, #1]
	}

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 800153e:	8b3b      	ldrh	r3, [r7, #24]
 8001540:	2200      	movs	r2, #0
 8001542:	4619      	mov	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f003 f8bc 	bl	80046c2 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 800154a:	2005      	movs	r0, #5
 800154c:	f000 f928 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], 2, 10000);
 8001550:	f242 7310 	movw	r3, #10000	; 0x2710
 8001554:	2202      	movs	r2, #2
 8001556:	490a      	ldr	r1, [pc, #40]	; (8001580 <STLED316S_Single_Out+0xb8>)
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <STLED316S_Single_Out+0xc0>)
 800155a:	f003 fd4f 	bl	8004ffc <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 800155e:	2005      	movs	r0, #5
 8001560:	f000 f91e 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 8001564:	8b3b      	ldrh	r3, [r7, #24]
 8001566:	2201      	movs	r2, #1
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f003 f8a9 	bl	80046c2 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US + 100); // Без доп задержки 100 мкС зависает (Hard Fault)
 8001570:	2069      	movs	r0, #105	; 0x69
 8001572:	f000 f915 	bl	80017a0 <DelayMicro>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20003d98 	.word	0x20003d98
 8001584:	08009458 	.word	0x08009458
 8001588:	20003e1c 	.word	0x20003e1c

0800158c <STLED316S_Direct_Single_Out>:

void STLED316S_Direct_Single_Out (uint8_t *data, uint8_t num, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	461a      	mov	r2, r3
 8001598:	460b      	mov	r3, r1
 800159a:	72fb      	strb	r3, [r7, #11]
 800159c:	4613      	mov	r3, r2
 800159e:	813b      	strh	r3, [r7, #8]
	STLED_TxData[0] = 0x00;
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0x00;
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	705a      	strb	r2, [r3, #1]

	STLED_TxData[0] |= 0x20; // Вывод значения без автоинкремента, в заданный разряд
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	f043 0320 	orr.w	r3, r3, #32
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015b8:	701a      	strb	r2, [r3, #0]
	STLED_TxData[0] |= ((6-num) & 0x07); // В какой разряд выводить
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b25a      	sxtb	r2, r3
 80015c0:	7afb      	ldrb	r3, [r7, #11]
 80015c2:	f1c3 0306 	rsb	r3, r3, #6
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015d8:	701a      	strb	r2, [r3, #0]

	STLED_TxData[1] = *data; // Выводимое значение
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	781a      	ldrb	r2, [r3, #0]
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015e0:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 80015e2:	893b      	ldrh	r3, [r7, #8]
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f003 f86a 	bl	80046c2 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80015ee:	2005      	movs	r0, #5
 80015f0:	f000 f8d6 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], 2, 10000);
 80015f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80015f8:	2202      	movs	r2, #2
 80015fa:	490a      	ldr	r1, [pc, #40]	; (8001624 <STLED316S_Direct_Single_Out+0x98>)
 80015fc:	480a      	ldr	r0, [pc, #40]	; (8001628 <STLED316S_Direct_Single_Out+0x9c>)
 80015fe:	f003 fcfd 	bl	8004ffc <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 8001602:	2005      	movs	r0, #5
 8001604:	f000 f8cc 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 8001608:	893b      	ldrh	r3, [r7, #8]
 800160a:	2201      	movs	r2, #1
 800160c:	4619      	mov	r1, r3
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f003 f857 	bl	80046c2 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001614:	2005      	movs	r0, #5
 8001616:	f000 f8c3 	bl	80017a0 <DelayMicro>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20003d98 	.word	0x20003d98
 8001628:	20003e1c 	.word	0x20003e1c

0800162c <STLED316S_SetBrightness>:

void STLED316S_SetBrightness (uint8_t Bright, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	4613      	mov	r3, r2
 800163a:	80bb      	strh	r3, [r7, #4]
	STLED_TxData[0] = 0x10;
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 800163e:	2210      	movs	r2, #16
 8001640:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0xE5; // E5 - LSB2:0 - кол разряд (0b101 = 6 разрадам), LSB4:3 - режим яркости, LSB7:5 - яркость
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001644:	22e5      	movs	r2, #229	; 0xe5
 8001646:	705a      	strb	r2, [r3, #1]

	STLED_TxData[2] = 0x00;
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 800164a:	2200      	movs	r2, #0
 800164c:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = 0x00;
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001650:	2200      	movs	r2, #0
 8001652:	70da      	strb	r2, [r3, #3]
	STLED_TxData[4] = 0x00;
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001656:	2200      	movs	r2, #0
 8001658:	711a      	strb	r2, [r3, #4]

	STLED_TxData[2] = (Bright<<4) | (Bright);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	b25a      	sxtb	r2, r3
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4313      	orrs	r3, r2
 8001666:	b25b      	sxtb	r3, r3
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 800166c:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = (Bright<<4) | (Bright);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	b25a      	sxtb	r2, r3
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4313      	orrs	r3, r2
 800167a:	b25b      	sxtb	r3, r3
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001680:	70da      	strb	r2, [r3, #3]
	STLED_TxData[4] = (Bright<<4) | (Bright);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	b25a      	sxtb	r2, r3
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	4313      	orrs	r3, r2
 800168e:	b25b      	sxtb	r3, r3
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 8001694:	711a      	strb	r2, [r3, #4]


	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	4619      	mov	r1, r3
 800169c:	6838      	ldr	r0, [r7, #0]
 800169e:	f003 f810 	bl	80046c2 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80016a2:	2005      	movs	r0, #5
 80016a4:	f000 f87c 	bl	80017a0 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &STLED_TxData[0], 5, 10000);
 80016a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80016ac:	2205      	movs	r2, #5
 80016ae:	490a      	ldr	r1, [pc, #40]	; (80016d8 <STLED316S_SetBrightness+0xac>)
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <STLED316S_SetBrightness+0xb0>)
 80016b2:	f003 fca3 	bl	8004ffc <HAL_SPI_Transmit>
	DelayMicro(DELAY_US);
 80016b6:	2005      	movs	r0, #5
 80016b8:	f000 f872 	bl	80017a0 <DelayMicro>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	4619      	mov	r1, r3
 80016c2:	6838      	ldr	r0, [r7, #0]
 80016c4:	f002 fffd 	bl	80046c2 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 80016c8:	2005      	movs	r0, #5
 80016ca:	f000 f869 	bl	80017a0 <DelayMicro>

}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20003d98 	.word	0x20003d98
 80016dc:	20003e1c 	.word	0x20003e1c

080016e0 <STLED316S_ReciveData>:
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
	DelayMicro(DELAY_US);
}

void STLED316S_ReciveData (uint8_t *data, GPIO_TypeDef *STLED_PORT_STB, uint16_t STLED_PIN_STB)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	4613      	mov	r3, r2
 80016ec:	80fb      	strh	r3, [r7, #6]
	STLED_TxData[0] = 0x49;
 80016ee:	4b29      	ldr	r3, [pc, #164]	; (8001794 <STLED316S_ReciveData+0xb4>)
 80016f0:	2249      	movs	r2, #73	; 0x49
 80016f2:	701a      	strb	r2, [r3, #0]
	STLED_TxData[1] = 0x00;
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <STLED316S_ReciveData+0xb4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	705a      	strb	r2, [r3, #1]
	STLED_TxData[2] = 0x00;
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <STLED316S_ReciveData+0xb4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	709a      	strb	r2, [r3, #2]
	STLED_TxData[3] = 0x00;
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <STLED316S_ReciveData+0xb4>)
 8001702:	2200      	movs	r2, #0
 8001704:	70da      	strb	r2, [r3, #3]

	STLED_Rx[0] = 0x49;
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001708:	2249      	movs	r2, #73	; 0x49
 800170a:	701a      	strb	r2, [r3, #0]
	STLED_Rx[1] = 0x02;
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <STLED316S_ReciveData+0xb8>)
 800170e:	2202      	movs	r2, #2
 8001710:	705a      	strb	r2, [r3, #1]
	STLED_Rx[2] = 0x02;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001714:	2202      	movs	r2, #2
 8001716:	709a      	strb	r2, [r3, #2]
	STLED_Rx[3] = 0x02;
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <STLED316S_ReciveData+0xb8>)
 800171a:	2202      	movs	r2, #2
 800171c:	70da      	strb	r2, [r3, #3]

	for(uint8_t i = 0; i < 8; i++)
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]
 8001722:	e006      	b.n	8001732 <STLED316S_ReciveData+0x52>
	{
		STLED_Rx[i] = 0;
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001728:	2100      	movs	r1, #0
 800172a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 8; i++)
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	3301      	adds	r3, #1
 8001730:	75fb      	strb	r3, [r7, #23]
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b07      	cmp	r3, #7
 8001736:	d9f5      	bls.n	8001724 <STLED316S_ReciveData+0x44>
	}

	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_RESET);
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	2200      	movs	r2, #0
 800173c:	4619      	mov	r1, r3
 800173e:	68b8      	ldr	r0, [r7, #8]
 8001740:	f002 ffbf 	bl	80046c2 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001744:	2005      	movs	r0, #5
 8001746:	f000 f82b 	bl	80017a0 <DelayMicro>
	//SPI1->CR1 |= SPI_CR1_BIDIOE; // Перевод SPI в режим передачи
	HAL_SPI_Transmit(&hspi1, STLED_TxData, 1, 1000);
 800174a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174e:	2201      	movs	r2, #1
 8001750:	4910      	ldr	r1, [pc, #64]	; (8001794 <STLED316S_ReciveData+0xb4>)
 8001752:	4812      	ldr	r0, [pc, #72]	; (800179c <STLED316S_ReciveData+0xbc>)
 8001754:	f003 fc52 	bl	8004ffc <HAL_SPI_Transmit>
	//SPI1->CR1 &= ~SPI_CR1_BIDIOE; // // Перевод SPI в режим приема
	//HAL_SPI_TransmitReceive(&hspi1, STLED_TxData, STLED_Rx, 1, 1000);
	HAL_SPI_Receive(&hspi1, STLED_Rx, 2, 1000);
 8001758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175c:	2202      	movs	r2, #2
 800175e:	490e      	ldr	r1, [pc, #56]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001760:	480e      	ldr	r0, [pc, #56]	; (800179c <STLED316S_ReciveData+0xbc>)
 8001762:	f003 fd87 	bl	8005274 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(STLED_PORT_STB, STLED_PIN_STB, GPIO_PIN_SET);
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	2201      	movs	r2, #1
 800176a:	4619      	mov	r1, r3
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f002 ffa8 	bl	80046c2 <HAL_GPIO_WritePin>
	DelayMicro(DELAY_US);
 8001772:	2005      	movs	r0, #5
 8001774:	f000 f814 	bl	80017a0 <DelayMicro>

	data[0] = STLED_Rx[0];
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <STLED316S_ReciveData+0xb8>)
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	701a      	strb	r2, [r3, #0]
	data[1]= STLED_Rx[1];
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <STLED316S_ReciveData+0xb8>)
 8001786:	7852      	ldrb	r2, [r2, #1]
 8001788:	701a      	strb	r2, [r3, #0]

}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20003d98 	.word	0x20003d98
 8001798:	20003564 	.word	0x20003564
 800179c:	20003e1c 	.word	0x20003e1c

080017a0 <DelayMicro>:

 void DelayMicro(uint32_t __IO micros)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  micros *=(SystemCoreClock/1000000)/5;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <DelayMicro+0x34>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <DelayMicro+0x38>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0d5b      	lsrs	r3, r3, #21
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	607b      	str	r3, [r7, #4]
  while(micros--);
 80017bc:	bf00      	nop
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	1e5a      	subs	r2, r3, #1
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1fa      	bne.n	80017be <DelayMicro+0x1e>
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	20000000 	.word	0x20000000
 80017d8:	6b5fca6b 	.word	0x6b5fca6b

080017dc <STM32_WriteToFlash3>:

		 HAL_FLASH_Lock();
}

void STM32_WriteToFlash3 (uint64_t *Data, uint32_t Len)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	   HAL_FLASH_Unlock();
 80017e6:	f002 fc31 	bl	800404c <HAL_FLASH_Unlock>

		FLASH_EraseInitTypeDef EraseInitStruct;
	   uint32_t PAGEError = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;  // Тип стирания. FLASH_TYPEERASE_PAGES стирание одиночной страницы
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
	   EraseInitStruct.PageAddress = PAGE; // Адрес первой стираемой ячейки в странице
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <STM32_WriteToFlash3+0x70>)
 80017f4:	617b      	str	r3, [r7, #20]
	   EraseInitStruct.NbPages     = 1;       // Количесвто стираемых страниц
 80017f6:	2301      	movs	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
	   HAL_FLASHEx_Erase(&EraseInitStruct,&PAGEError);
 80017fa:	f107 0208 	add.w	r2, r7, #8
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fd09 	bl	800421c <HAL_FLASHEx_Erase>

	   //Запись начиная с адреса 0x803F800
		 for(uint16_t i = 0; i < Len; i++)
 800180a:	2300      	movs	r3, #0
 800180c:	83fb      	strh	r3, [r7, #30]
 800180e:	e012      	b.n	8001836 <STM32_WriteToFlash3+0x5a>
		 {
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, PAGE + (i*4), Data[i]);  // FLASH_TYPEPROGRAM_WORD - запись 32 битного числа, адрес записи, данные
 8001810:	8bfb      	ldrh	r3, [r7, #30]
 8001812:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001816:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4619      	mov	r1, r3
 800181e:	8bfb      	ldrh	r3, [r7, #30]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	2002      	movs	r0, #2
 800182c:	f002 fb9e 	bl	8003f6c <HAL_FLASH_Program>
		 for(uint16_t i = 0; i < Len; i++)
 8001830:	8bfb      	ldrh	r3, [r7, #30]
 8001832:	3301      	adds	r3, #1
 8001834:	83fb      	strh	r3, [r7, #30]
 8001836:	8bfb      	ldrh	r3, [r7, #30]
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d8e8      	bhi.n	8001810 <STM32_WriteToFlash3+0x34>
		 }

		 HAL_FLASH_Lock();
 800183e:	f002 fc2b 	bl	8004098 <HAL_FLASH_Lock>
}
 8001842:	bf00      	nop
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	0803f800 	.word	0x0803f800

08001850 <freeRTOS_Tasks_Ini>:
	uint8_t STLED_Rx[8];



void freeRTOS_Tasks_Ini (void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af02      	add	r7, sp, #8
	xSemaphore_StepCount = xQueueCreateCountingSemaphore(4, 0);
 8001856:	2100      	movs	r1, #0
 8001858:	2004      	movs	r0, #4
 800185a:	f005 fc2d 	bl	80070b8 <xQueueCreateCountingSemaphore>
 800185e:	4603      	mov	r3, r0
 8001860:	4a48      	ldr	r2, [pc, #288]	; (8001984 <freeRTOS_Tasks_Ini+0x134>)
 8001862:	6013      	str	r3, [r2, #0]

	//xSemaphore_Calibration = xQueueCreateCountingSemaphore(1, 0); // Первый аргмент - это максимальное количество счета, второй - начальное значение счетчика

	vSemaphoreCreateBinary(xSemaphore_Calibration); // Создание двоичного семафора
 8001864:	2203      	movs	r2, #3
 8001866:	2100      	movs	r1, #0
 8001868:	2001      	movs	r0, #1
 800186a:	f005 fbd2 	bl	8007012 <xQueueGenericCreate>
 800186e:	4603      	mov	r3, r0
 8001870:	4a45      	ldr	r2, [pc, #276]	; (8001988 <freeRTOS_Tasks_Ini+0x138>)
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b44      	ldr	r3, [pc, #272]	; (8001988 <freeRTOS_Tasks_Ini+0x138>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <freeRTOS_Tasks_Ini+0x3a>
 800187c:	4b42      	ldr	r3, [pc, #264]	; (8001988 <freeRTOS_Tasks_Ini+0x138>)
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	2300      	movs	r3, #0
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	f005 fc2d 	bl	80070e4 <xQueueGenericSend>

	qBeepMode = xQueueCreate(1, sizeof( uint8_t )); // Очередь для передачи режима работы бипера
 800188a:	2200      	movs	r2, #0
 800188c:	2101      	movs	r1, #1
 800188e:	2001      	movs	r0, #1
 8001890:	f005 fbbf 	bl	8007012 <xQueueGenericCreate>
 8001894:	4603      	mov	r3, r0
 8001896:	4a3d      	ldr	r2, [pc, #244]	; (800198c <freeRTOS_Tasks_Ini+0x13c>)
 8001898:	6013      	str	r3, [r2, #0]

	qWelderCmd = xQueueCreate(1, sizeof( uint8_t )); // Очередь для передачи команд управления кареткой
 800189a:	2200      	movs	r2, #0
 800189c:	2101      	movs	r1, #1
 800189e:	2001      	movs	r0, #1
 80018a0:	f005 fbb7 	bl	8007012 <xQueueGenericCreate>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a3a      	ldr	r2, [pc, #232]	; (8001990 <freeRTOS_Tasks_Ini+0x140>)
 80018a8:	6013      	str	r3, [r2, #0]

	qGoToResponse = xQueueCreate(1, sizeof( uint8_t )); // Требуемая позиция занята
 80018aa:	2200      	movs	r2, #0
 80018ac:	2101      	movs	r1, #1
 80018ae:	2001      	movs	r0, #1
 80018b0:	f005 fbaf 	bl	8007012 <xQueueGenericCreate>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a37      	ldr	r2, [pc, #220]	; (8001994 <freeRTOS_Tasks_Ini+0x144>)
 80018b8:	6013      	str	r3, [r2, #0]

	//vSemaphoreCreateBinary(qDebug);

	qWelderRun = xQueueCreate(1, sizeof( uint8_t )); // Начать процесс варки
 80018ba:	2200      	movs	r2, #0
 80018bc:	2101      	movs	r1, #1
 80018be:	2001      	movs	r0, #1
 80018c0:	f005 fba7 	bl	8007012 <xQueueGenericCreate>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a34      	ldr	r2, [pc, #208]	; (8001998 <freeRTOS_Tasks_Ini+0x148>)
 80018c8:	6013      	str	r3, [r2, #0]

	qWelderCalibrated = xQueueCreate(1, sizeof( uint8_t )); // Начать калибровку
 80018ca:	2200      	movs	r2, #0
 80018cc:	2101      	movs	r1, #1
 80018ce:	2001      	movs	r0, #1
 80018d0:	f005 fb9f 	bl	8007012 <xQueueGenericCreate>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a31      	ldr	r2, [pc, #196]	; (800199c <freeRTOS_Tasks_Ini+0x14c>)
 80018d8:	6013      	str	r3, [r2, #0]

	qKeyPress = xQueueCreate(1, sizeof( uint8_t )); // Предача события о нажатии кнопки
 80018da:	2200      	movs	r2, #0
 80018dc:	2101      	movs	r1, #1
 80018de:	2001      	movs	r0, #1
 80018e0:	f005 fb97 	bl	8007012 <xQueueGenericCreate>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a2e      	ldr	r2, [pc, #184]	; (80019a0 <freeRTOS_Tasks_Ini+0x150>)
 80018e8:	6013      	str	r3, [r2, #0]

	MicrostepDriver_Ini();
 80018ea:	f7ff f88f 	bl	8000a0c <MicrostepDriver_Ini>

//	WELDER_Preset();

	xTaskCreate(vIndicatorPanel_Out, "IndicatorPanel_Out", 200, NULL, 2, NULL); // З-а вывода значений на панель
 80018ee:	2300      	movs	r3, #0
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	2302      	movs	r3, #2
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	22c8      	movs	r2, #200	; 0xc8
 80018fa:	492a      	ldr	r1, [pc, #168]	; (80019a4 <freeRTOS_Tasks_Ini+0x154>)
 80018fc:	482a      	ldr	r0, [pc, #168]	; (80019a8 <freeRTOS_Tasks_Ini+0x158>)
 80018fe:	f006 f90b 	bl	8007b18 <xTaskCreate>

	xTaskCreate(vKeyScan, "KeyScan", 200, NULL, 2, NULL); // З-а опроса кнопок
 8001902:	2300      	movs	r3, #0
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2302      	movs	r3, #2
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2300      	movs	r3, #0
 800190c:	22c8      	movs	r2, #200	; 0xc8
 800190e:	4927      	ldr	r1, [pc, #156]	; (80019ac <freeRTOS_Tasks_Ini+0x15c>)
 8001910:	4827      	ldr	r0, [pc, #156]	; (80019b0 <freeRTOS_Tasks_Ini+0x160>)
 8001912:	f006 f901 	bl	8007b18 <xTaskCreate>

	xTaskCreate(vBuzzer_beep, "Buzzer_beep", 200, NULL, 1, NULL); // З-а опроса кнопок
 8001916:	2300      	movs	r3, #0
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	2301      	movs	r3, #1
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2300      	movs	r3, #0
 8001920:	22c8      	movs	r2, #200	; 0xc8
 8001922:	4924      	ldr	r1, [pc, #144]	; (80019b4 <freeRTOS_Tasks_Ini+0x164>)
 8001924:	4824      	ldr	r0, [pc, #144]	; (80019b8 <freeRTOS_Tasks_Ini+0x168>)
 8001926:	f006 f8f7 	bl	8007b18 <xTaskCreate>

	xTaskCreate(vWelder_Run, "Weleder_Run", 200, NULL, 2, NULL);
 800192a:	2300      	movs	r3, #0
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	2302      	movs	r3, #2
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2300      	movs	r3, #0
 8001934:	22c8      	movs	r2, #200	; 0xc8
 8001936:	4921      	ldr	r1, [pc, #132]	; (80019bc <freeRTOS_Tasks_Ini+0x16c>)
 8001938:	4821      	ldr	r0, [pc, #132]	; (80019c0 <freeRTOS_Tasks_Ini+0x170>)
 800193a:	f006 f8ed 	bl	8007b18 <xTaskCreate>

	xTaskCreate(vCarriage_GoTo, "Carriage_GoTo", 200, NULL, 3, NULL); // З-а перемещения каретки в заданную точку
 800193e:	2300      	movs	r3, #0
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	2303      	movs	r3, #3
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	22c8      	movs	r2, #200	; 0xc8
 800194a:	491e      	ldr	r1, [pc, #120]	; (80019c4 <freeRTOS_Tasks_Ini+0x174>)
 800194c:	481e      	ldr	r0, [pc, #120]	; (80019c8 <freeRTOS_Tasks_Ini+0x178>)
 800194e:	f006 f8e3 	bl	8007b18 <xTaskCreate>

	xTaskCreate(vCarriage_Calibration, "Carriage_Calibration", 200, NULL, 2, NULL); // З-а перемещения каретки в заданную точку
 8001952:	2300      	movs	r3, #0
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	2302      	movs	r3, #2
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2300      	movs	r3, #0
 800195c:	22c8      	movs	r2, #200	; 0xc8
 800195e:	491b      	ldr	r1, [pc, #108]	; (80019cc <freeRTOS_Tasks_Ini+0x17c>)
 8001960:	481b      	ldr	r0, [pc, #108]	; (80019d0 <freeRTOS_Tasks_Ini+0x180>)
 8001962:	f006 f8d9 	bl	8007b18 <xTaskCreate>

	xTaskCreate(vKey_Action, "Key_Action", 200, NULL, 2, NULL); // З-а выполняет дейсвия в зависимости от нажатой кнопки и режима работы устройсво
 8001966:	2300      	movs	r3, #0
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	2302      	movs	r3, #2
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2300      	movs	r3, #0
 8001970:	22c8      	movs	r2, #200	; 0xc8
 8001972:	4918      	ldr	r1, [pc, #96]	; (80019d4 <freeRTOS_Tasks_Ini+0x184>)
 8001974:	4818      	ldr	r0, [pc, #96]	; (80019d8 <freeRTOS_Tasks_Ini+0x188>)
 8001976:	f006 f8cf 	bl	8007b18 <xTaskCreate>

	vTaskStartScheduler();
 800197a:	f006 fa1d 	bl	8007db8 <vTaskStartScheduler>

}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20003560 	.word	0x20003560
 8001988:	20003dc4 	.word	0x20003dc4
 800198c:	20003538 	.word	0x20003538
 8001990:	20003d94 	.word	0x20003d94
 8001994:	20003d80 	.word	0x20003d80
 8001998:	20003d88 	.word	0x20003d88
 800199c:	20003d8c 	.word	0x20003d8c
 80019a0:	20003d90 	.word	0x20003d90
 80019a4:	080093bc 	.word	0x080093bc
 80019a8:	08003139 	.word	0x08003139
 80019ac:	080093d0 	.word	0x080093d0
 80019b0:	0800270d 	.word	0x0800270d
 80019b4:	080093d8 	.word	0x080093d8
 80019b8:	080031fd 	.word	0x080031fd
 80019bc:	080093e4 	.word	0x080093e4
 80019c0:	08002291 	.word	0x08002291
 80019c4:	080093f0 	.word	0x080093f0
 80019c8:	08002579 	.word	0x08002579
 80019cc:	08009400 	.word	0x08009400
 80019d0:	08002479 	.word	0x08002479
 80019d4:	08009418 	.word	0x08009418
 80019d8:	080019dd 	.word	0x080019dd

080019dc <vKey_Action>:

void vKey_Action(void *pvParameters)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	uint8_t KeyPressed; // Номер нажатой кнопки или комбинации кнопок
	uint8_t beep_mode_send = beep_click; // Режим работы бипера
 80019e4:	2301      	movs	r3, #1
 80019e6:	73bb      	strb	r3, [r7, #14]
	uint8_t Cal = Calibrated; // Передача команды калибровка
 80019e8:	2304      	movs	r3, #4
 80019ea:	737b      	strb	r3, [r7, #13]
	uint8_t Run; // Переменная для передачи команды начало варки
	uint8_t Carriage_cmd = Cmd_CarriageGoTo; //Передача команды для начала движения каретки в заданную точку
 80019ec:	2301      	movs	r3, #1
 80019ee:	72fb      	strb	r3, [r7, #11]


	for(;;)
	{
		xQueueReceive(qKeyPress, &KeyPressed, portMAX_DELAY ); // Ждать нажатия кнопки
 80019f0:	4ba6      	ldr	r3, [pc, #664]	; (8001c8c <vKey_Action+0x2b0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f107 010f 	add.w	r1, r7, #15
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	4618      	mov	r0, r3
 80019fe:	f005 fcc9 	bl	8007394 <xQueueReceive>

		switch(KeyPressed)
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	2b24      	cmp	r3, #36	; 0x24
 8001a06:	d8f3      	bhi.n	80019f0 <vKey_Action+0x14>
 8001a08:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <vKey_Action+0x34>)
 8001a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0e:	bf00      	nop
 8001a10:	080019f1 	.word	0x080019f1
 8001a14:	08001aa5 	.word	0x08001aa5
 8001a18:	08001b03 	.word	0x08001b03
 8001a1c:	08001b2b 	.word	0x08001b2b
 8001a20:	08001b99 	.word	0x08001b99
 8001a24:	08001bd7 	.word	0x08001bd7
 8001a28:	08001c4b 	.word	0x08001c4b
 8001a2c:	08001c9d 	.word	0x08001c9d
 8001a30:	08001d07 	.word	0x08001d07
 8001a34:	08001d3b 	.word	0x08001d3b
 8001a38:	08001d63 	.word	0x08001d63
 8001a3c:	08001d8b 	.word	0x08001d8b
 8001a40:	08001db3 	.word	0x08001db3
 8001a44:	08001ddb 	.word	0x08001ddb
 8001a48:	08001e03 	.word	0x08001e03
 8001a4c:	08001e2b 	.word	0x08001e2b
 8001a50:	08001e57 	.word	0x08001e57
 8001a54:	08001e83 	.word	0x08001e83
 8001a58:	08001eab 	.word	0x08001eab
 8001a5c:	08001ed3 	.word	0x08001ed3
 8001a60:	08001efb 	.word	0x08001efb
 8001a64:	08001f23 	.word	0x08001f23
 8001a68:	08001f5d 	.word	0x08001f5d
 8001a6c:	08001f85 	.word	0x08001f85
 8001a70:	08001fb1 	.word	0x08001fb1
 8001a74:	080020a5 	.word	0x080020a5
 8001a78:	080020d1 	.word	0x080020d1
 8001a7c:	080020ef 	.word	0x080020ef
 8001a80:	0800214f 	.word	0x0800214f
 8001a84:	0800216d 	.word	0x0800216d
 8001a88:	080021b7 	.word	0x080021b7
 8001a8c:	080021c5 	.word	0x080021c5
 8001a90:	080019f1 	.word	0x080019f1
 8001a94:	08001fd9 	.word	0x08001fd9
 8001a98:	08002027 	.word	0x08002027
 8001a9c:	08002039 	.word	0x08002039
 8001aa0:	08002079 	.word	0x08002079
			break;
		}

		case press_short_Xs_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001aa4:	4b7a      	ldr	r3, [pc, #488]	; (8001c90 <vKey_Action+0x2b4>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	f107 010e 	add.w	r1, r7, #14
 8001aac:	2300      	movs	r3, #0
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f005 fb18 	bl	80070e4 <xQueueGenericSend>

			if (WelderUnit.Xs > XS_MIN) // Проверка на попадание в допустимый диапазон значений
 8001ab4:	4b77      	ldr	r3, [pc, #476]	; (8001c94 <vKey_Action+0x2b8>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	2b0a      	cmp	r3, #10
 8001aba:	f240 8390 	bls.w	80021de <vKey_Action+0x802>
			{
				WelderUnit.Xs--; // Исполнить
 8001abe:	4b75      	ldr	r3, [pc, #468]	; (8001c94 <vKey_Action+0x2b8>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <vKey_Action+0x2b8>)
 8001ac8:	801a      	strh	r2, [r3, #0]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001aca:	4b72      	ldr	r3, [pc, #456]	; (8001c94 <vKey_Action+0x2b8>)
 8001acc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	f040 8384 	bne.w	80021de <vKey_Action+0x802>
 8001ad6:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <vKey_Action+0x2b8>)
 8001ad8:	7c1b      	ldrb	r3, [r3, #16]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 837d 	beq.w	80021de <vKey_Action+0x802>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xs;
 8001ae8:	4b6a      	ldr	r3, [pc, #424]	; (8001c94 <vKey_Action+0x2b8>)
 8001aea:	881a      	ldrh	r2, [r3, #0]
 8001aec:	4b69      	ldr	r3, [pc, #420]	; (8001c94 <vKey_Action+0x2b8>)
 8001aee:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001af0:	4b69      	ldr	r3, [pc, #420]	; (8001c98 <vKey_Action+0x2bc>)
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	f107 010b 	add.w	r1, r7, #11
 8001af8:	2300      	movs	r3, #0
 8001afa:	2200      	movs	r2, #0
 8001afc:	f005 faf2 	bl	80070e4 <xQueueGenericSend>

				}
			}
			break;
 8001b00:	e36d      	b.n	80021de <vKey_Action+0x802>
		}

		case press_long_Xs_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <vKey_Action+0x2b4>)
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	f107 010e 	add.w	r1, r7, #14
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f005 fae9 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Xs > XS_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001b12:	4b60      	ldr	r3, [pc, #384]	; (8001c94 <vKey_Action+0x2b8>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	2b1e      	cmp	r3, #30
 8001b18:	f240 8363 	bls.w	80021e2 <vKey_Action+0x806>
			{
				WelderUnit.Xs -= 20; // Дейсвия при длинном нажатии
 8001b1c:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <vKey_Action+0x2b8>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	3b14      	subs	r3, #20
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <vKey_Action+0x2b8>)
 8001b26:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001b28:	e35b      	b.n	80021e2 <vKey_Action+0x806>
		}

		case press_short_Xs_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b2a:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <vKey_Action+0x2b4>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	f107 010e 	add.w	r1, r7, #14
 8001b32:	2300      	movs	r3, #0
 8001b34:	2200      	movs	r2, #0
 8001b36:	f005 fad5 	bl	80070e4 <xQueueGenericSend>
			if ((WelderUnit.Xs < XS_MAX) && (WelderUnit.Xs < WelderUnit.Xf)) // Проверка на попадание в допустимый диапазон значений  и что бы Xs была меньше Xf
 8001b3a:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <vKey_Action+0x2b8>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001b42:	f080 8350 	bcs.w	80021e6 <vKey_Action+0x80a>
 8001b46:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <vKey_Action+0x2b8>)
 8001b48:	881a      	ldrh	r2, [r3, #0]
 8001b4a:	4b52      	ldr	r3, [pc, #328]	; (8001c94 <vKey_Action+0x2b8>)
 8001b4c:	885b      	ldrh	r3, [r3, #2]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	f080 8349 	bcs.w	80021e6 <vKey_Action+0x80a>
			{

			WelderUnit.Xs++; // Исполнить
 8001b54:	4b4f      	ldr	r3, [pc, #316]	; (8001c94 <vKey_Action+0x2b8>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	4b4d      	ldr	r3, [pc, #308]	; (8001c94 <vKey_Action+0x2b8>)
 8001b5e:	801a      	strh	r2, [r3, #0]

			// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
			if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001b60:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <vKey_Action+0x2b8>)
 8001b62:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	f040 833d 	bne.w	80021e6 <vKey_Action+0x80a>
 8001b6c:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <vKey_Action+0x2b8>)
 8001b6e:	7c1b      	ldrb	r3, [r3, #16]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 8336 	beq.w	80021e6 <vKey_Action+0x80a>
			{
				Carriage_cmd = Cmd_CarriageGoTo;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	72fb      	strb	r3, [r7, #11]
				WelderUnit.GoTo = WelderUnit.Xs;
 8001b7e:	4b45      	ldr	r3, [pc, #276]	; (8001c94 <vKey_Action+0x2b8>)
 8001b80:	881a      	ldrh	r2, [r3, #0]
 8001b82:	4b44      	ldr	r3, [pc, #272]	; (8001c94 <vKey_Action+0x2b8>)
 8001b84:	811a      	strh	r2, [r3, #8]
				xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001b86:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <vKey_Action+0x2bc>)
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	f107 010b 	add.w	r1, r7, #11
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2200      	movs	r2, #0
 8001b92:	f005 faa7 	bl	80070e4 <xQueueGenericSend>

			}

			}
			break;
 8001b96:	e326      	b.n	80021e6 <vKey_Action+0x80a>
		}

		case press_long_Xs_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001b98:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <vKey_Action+0x2b4>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	f107 010e 	add.w	r1, r7, #14
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f005 fa9e 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Xs < XS_MAX - 20 && WelderUnit.Xs < WelderUnit.Xf - 20) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
 8001ba8:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <vKey_Action+0x2b8>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f240 622b 	movw	r2, #1579	; 0x62b
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f200 831a 	bhi.w	80021ea <vKey_Action+0x80e>
 8001bb6:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <vKey_Action+0x2b8>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <vKey_Action+0x2b8>)
 8001bbe:	885b      	ldrh	r3, [r3, #2]
 8001bc0:	3b14      	subs	r3, #20
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	f280 8311 	bge.w	80021ea <vKey_Action+0x80e>
			{
				WelderUnit.Xs += 20; // Дейсвия при длинном нажатии
 8001bc8:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <vKey_Action+0x2b8>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	3314      	adds	r3, #20
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <vKey_Action+0x2b8>)
 8001bd2:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001bd4:	e309      	b.n	80021ea <vKey_Action+0x80e>
		}

		case press_short_Xf_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <vKey_Action+0x2b4>)
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	f107 010e 	add.w	r1, r7, #14
 8001bde:	2300      	movs	r3, #0
 8001be0:	2200      	movs	r2, #0
 8001be2:	f005 fa7f 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN && WelderUnit.Xf > WelderUnit.Xs) // Проверка на попадание в допустимый диапазон значений
 8001be6:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <vKey_Action+0x2b8>)
 8001be8:	885b      	ldrh	r3, [r3, #2]
 8001bea:	2b14      	cmp	r3, #20
 8001bec:	f240 82ff 	bls.w	80021ee <vKey_Action+0x812>
 8001bf0:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <vKey_Action+0x2b8>)
 8001bf2:	885a      	ldrh	r2, [r3, #2]
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <vKey_Action+0x2b8>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f240 82f8 	bls.w	80021ee <vKey_Action+0x812>
			{
				WelderUnit.Xf--; // Исполнить
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <vKey_Action+0x2b8>)
 8001c00:	885b      	ldrh	r3, [r3, #2]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <vKey_Action+0x2b8>)
 8001c08:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <vKey_Action+0x2b8>)
 8001c0c:	885a      	ldrh	r2, [r3, #2]
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <vKey_Action+0x2b8>)
 8001c10:	811a      	strh	r2, [r3, #8]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <vKey_Action+0x2b8>)
 8001c14:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	f040 82e8 	bne.w	80021ee <vKey_Action+0x812>
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <vKey_Action+0x2b8>)
 8001c20:	7c1b      	ldrb	r3, [r3, #16]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 82e1 	beq.w	80021ee <vKey_Action+0x812>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xf;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <vKey_Action+0x2b8>)
 8001c32:	885a      	ldrh	r2, [r3, #2]
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <vKey_Action+0x2b8>)
 8001c36:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <vKey_Action+0x2bc>)
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	f107 010b 	add.w	r1, r7, #11
 8001c40:	2300      	movs	r3, #0
 8001c42:	2200      	movs	r2, #0
 8001c44:	f005 fa4e 	bl	80070e4 <xQueueGenericSend>

				}
			}
			break;
 8001c48:	e2d1      	b.n	80021ee <vKey_Action+0x812>
		}

		case press_long_Xf_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <vKey_Action+0x2b4>)
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	f107 010e 	add.w	r1, r7, #14
 8001c52:	2300      	movs	r3, #0
 8001c54:	2200      	movs	r2, #0
 8001c56:	f005 fa45 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Xf > XF_MIN + 20 && WelderUnit.Xf > WelderUnit.Xs + 20 ) // Проверка на попадание в допустимый диапазон значений и что бы Xs была меньше Xf
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <vKey_Action+0x2b8>)
 8001c5c:	885b      	ldrh	r3, [r3, #2]
 8001c5e:	2b28      	cmp	r3, #40	; 0x28
 8001c60:	f240 82c8 	bls.w	80021f4 <vKey_Action+0x818>
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <vKey_Action+0x2b8>)
 8001c66:	885b      	ldrh	r3, [r3, #2]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <vKey_Action+0x2b8>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	3314      	adds	r3, #20
 8001c70:	429a      	cmp	r2, r3
 8001c72:	f340 82bf 	ble.w	80021f4 <vKey_Action+0x818>
			{
				WelderUnit.Xf -= 20; // Дейсвия при длинном нажатии
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <vKey_Action+0x2b8>)
 8001c78:	885b      	ldrh	r3, [r3, #2]
 8001c7a:	3b14      	subs	r3, #20
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <vKey_Action+0x2b8>)
 8001c80:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <vKey_Action+0x2b8>)
 8001c84:	885a      	ldrh	r2, [r3, #2]
 8001c86:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <vKey_Action+0x2b8>)
 8001c88:	811a      	strh	r2, [r3, #8]
			}
			break;
 8001c8a:	e2b3      	b.n	80021f4 <vKey_Action+0x818>
 8001c8c:	20003d90 	.word	0x20003d90
 8001c90:	20003538 	.word	0x20003538
 8001c94:	2000353c 	.word	0x2000353c
 8001c98:	20003d94 	.word	0x20003d94
		}

		case press_short_Xf_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001c9c:	4bac      	ldr	r3, [pc, #688]	; (8001f50 <vKey_Action+0x574>)
 8001c9e:	6818      	ldr	r0, [r3, #0]
 8001ca0:	f107 010e 	add.w	r1, r7, #14
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f005 fa1c 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001cac:	4ba9      	ldr	r3, [pc, #676]	; (8001f54 <vKey_Action+0x578>)
 8001cae:	885b      	ldrh	r3, [r3, #2]
 8001cb0:	f240 6271 	movw	r2, #1649	; 0x671
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	f200 82a0 	bhi.w	80021fa <vKey_Action+0x81e>
			{
				WelderUnit.Xf++; // Исполнить
 8001cba:	4ba6      	ldr	r3, [pc, #664]	; (8001f54 <vKey_Action+0x578>)
 8001cbc:	885b      	ldrh	r3, [r3, #2]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4ba4      	ldr	r3, [pc, #656]	; (8001f54 <vKey_Action+0x578>)
 8001cc4:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001cc6:	4ba3      	ldr	r3, [pc, #652]	; (8001f54 <vKey_Action+0x578>)
 8001cc8:	885a      	ldrh	r2, [r3, #2]
 8001cca:	4ba2      	ldr	r3, [pc, #648]	; (8001f54 <vKey_Action+0x578>)
 8001ccc:	811a      	strh	r2, [r3, #8]

				// Если ручной режим и аппарат откалиброван, то двигать каретку при одиночных нажатиях кнопок "-", "+"
				if ((WelderUnit.Mode == WELDER_MODE_MANUAL) && (WelderUnit.State & WELDER_STATE_CALIBRATED))
 8001cce:	4ba1      	ldr	r3, [pc, #644]	; (8001f54 <vKey_Action+0x578>)
 8001cd0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	f040 8290 	bne.w	80021fa <vKey_Action+0x81e>
 8001cda:	4b9e      	ldr	r3, [pc, #632]	; (8001f54 <vKey_Action+0x578>)
 8001cdc:	7c1b      	ldrb	r3, [r3, #16]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8289 	beq.w	80021fa <vKey_Action+0x81e>
				{
					Carriage_cmd = Cmd_CarriageGoTo;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	72fb      	strb	r3, [r7, #11]
					WelderUnit.GoTo = WelderUnit.Xf;
 8001cec:	4b99      	ldr	r3, [pc, #612]	; (8001f54 <vKey_Action+0x578>)
 8001cee:	885a      	ldrh	r2, [r3, #2]
 8001cf0:	4b98      	ldr	r3, [pc, #608]	; (8001f54 <vKey_Action+0x578>)
 8001cf2:	811a      	strh	r2, [r3, #8]
					xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8001cf4:	4b98      	ldr	r3, [pc, #608]	; (8001f58 <vKey_Action+0x57c>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	f107 010b 	add.w	r1, r7, #11
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f005 f9f0 	bl	80070e4 <xQueueGenericSend>

				}
			}
			break;
 8001d04:	e279      	b.n	80021fa <vKey_Action+0x81e>
		}

		case press_long_Xf_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d06:	4b92      	ldr	r3, [pc, #584]	; (8001f50 <vKey_Action+0x574>)
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	f107 010e 	add.w	r1, r7, #14
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2200      	movs	r2, #0
 8001d12:	f005 f9e7 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Xf < XF_MAX - 20 ) // Проверка на попадание в допустимый диапазон значений
 8001d16:	4b8f      	ldr	r3, [pc, #572]	; (8001f54 <vKey_Action+0x578>)
 8001d18:	885b      	ldrh	r3, [r3, #2]
 8001d1a:	f240 625d 	movw	r2, #1629	; 0x65d
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	f200 826e 	bhi.w	8002200 <vKey_Action+0x824>
			{
				WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 8001d24:	4b8b      	ldr	r3, [pc, #556]	; (8001f54 <vKey_Action+0x578>)
 8001d26:	885b      	ldrh	r3, [r3, #2]
 8001d28:	3314      	adds	r3, #20
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <vKey_Action+0x578>)
 8001d2e:	805a      	strh	r2, [r3, #2]
				WelderUnit.GoTo = WelderUnit.Xf;
 8001d30:	4b88      	ldr	r3, [pc, #544]	; (8001f54 <vKey_Action+0x578>)
 8001d32:	885a      	ldrh	r2, [r3, #2]
 8001d34:	4b87      	ldr	r3, [pc, #540]	; (8001f54 <vKey_Action+0x578>)
 8001d36:	811a      	strh	r2, [r3, #8]
			}
			break;
 8001d38:	e262      	b.n	8002200 <vKey_Action+0x824>

		}

		case press_short_Delay_s_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d3a:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <vKey_Action+0x574>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	f107 010e 	add.w	r1, r7, #14
 8001d42:	2300      	movs	r3, #0
 8001d44:	2200      	movs	r2, #0
 8001d46:	f005 f9cd 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN) // Проверка на попадание в допустимый диапазон значений
 8001d4a:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <vKey_Action+0x578>)
 8001d4c:	7a9b      	ldrb	r3, [r3, #10]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	f240 8259 	bls.w	8002206 <vKey_Action+0x82a>
			{
				WelderUnit.Delay_s--; // Исполнить
 8001d54:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <vKey_Action+0x578>)
 8001d56:	7a9b      	ldrb	r3, [r3, #10]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b7d      	ldr	r3, [pc, #500]	; (8001f54 <vKey_Action+0x578>)
 8001d5e:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001d60:	e251      	b.n	8002206 <vKey_Action+0x82a>
		}

		case press_long_Delay_s_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d62:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <vKey_Action+0x574>)
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	f107 010e 	add.w	r1, r7, #14
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f005 f9b9 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Delay_s > DELAY_S_MIN + 10) // Проверка на попадание в допустимый диапазон значений
 8001d72:	4b78      	ldr	r3, [pc, #480]	; (8001f54 <vKey_Action+0x578>)
 8001d74:	7a9b      	ldrb	r3, [r3, #10]
 8001d76:	2b0b      	cmp	r3, #11
 8001d78:	f240 8248 	bls.w	800220c <vKey_Action+0x830>
			{
				WelderUnit.Delay_s -= 10; // Дейсвия при длинном нажатии
 8001d7c:	4b75      	ldr	r3, [pc, #468]	; (8001f54 <vKey_Action+0x578>)
 8001d7e:	7a9b      	ldrb	r3, [r3, #10]
 8001d80:	3b0a      	subs	r3, #10
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <vKey_Action+0x578>)
 8001d86:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001d88:	e240      	b.n	800220c <vKey_Action+0x830>
		}

		case press_short_Delay_s_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001d8a:	4b71      	ldr	r3, [pc, #452]	; (8001f50 <vKey_Action+0x574>)
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	f107 010e 	add.w	r1, r7, #14
 8001d92:	2300      	movs	r3, #0
 8001d94:	2200      	movs	r2, #0
 8001d96:	f005 f9a5 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001d9a:	4b6e      	ldr	r3, [pc, #440]	; (8001f54 <vKey_Action+0x578>)
 8001d9c:	7a9b      	ldrb	r3, [r3, #10]
 8001d9e:	2b31      	cmp	r3, #49	; 0x31
 8001da0:	f200 8237 	bhi.w	8002212 <vKey_Action+0x836>
			{
				WelderUnit.Delay_s++; // Исполнить
 8001da4:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <vKey_Action+0x578>)
 8001da6:	7a9b      	ldrb	r3, [r3, #10]
 8001da8:	3301      	adds	r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b69      	ldr	r3, [pc, #420]	; (8001f54 <vKey_Action+0x578>)
 8001dae:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001db0:	e22f      	b.n	8002212 <vKey_Action+0x836>
		}

		case press_long_Delay_s_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001db2:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <vKey_Action+0x574>)
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	f107 010e 	add.w	r1, r7, #14
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f005 f991 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Delay_s < DELAY_S_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
 8001dc2:	4b64      	ldr	r3, [pc, #400]	; (8001f54 <vKey_Action+0x578>)
 8001dc4:	7a9b      	ldrb	r3, [r3, #10]
 8001dc6:	2b27      	cmp	r3, #39	; 0x27
 8001dc8:	f200 8226 	bhi.w	8002218 <vKey_Action+0x83c>
			{
				WelderUnit.Delay_s += 10; // Дейсвия при длинном нажатии
 8001dcc:	4b61      	ldr	r3, [pc, #388]	; (8001f54 <vKey_Action+0x578>)
 8001dce:	7a9b      	ldrb	r3, [r3, #10]
 8001dd0:	330a      	adds	r3, #10
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <vKey_Action+0x578>)
 8001dd6:	729a      	strb	r2, [r3, #10]
			}
			break;
 8001dd8:	e21e      	b.n	8002218 <vKey_Action+0x83c>
		}

		case press_short_Speed_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001dda:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <vKey_Action+0x574>)
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	f107 010e 	add.w	r1, r7, #14
 8001de2:	2300      	movs	r3, #0
 8001de4:	2200      	movs	r2, #0
 8001de6:	f005 f97d 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN) // Проверка на попадание в допустимый диапазон значений
 8001dea:	4b5a      	ldr	r3, [pc, #360]	; (8001f54 <vKey_Action+0x578>)
 8001dec:	88db      	ldrh	r3, [r3, #6]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	f240 8215 	bls.w	800221e <vKey_Action+0x842>
			{
				WelderUnit.Speed--; // Исполнить
 8001df4:	4b57      	ldr	r3, [pc, #348]	; (8001f54 <vKey_Action+0x578>)
 8001df6:	88db      	ldrh	r3, [r3, #6]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b55      	ldr	r3, [pc, #340]	; (8001f54 <vKey_Action+0x578>)
 8001dfe:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e00:	e20d      	b.n	800221e <vKey_Action+0x842>
		}

		case press_long_Speed_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e02:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <vKey_Action+0x574>)
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	f107 010e 	add.w	r1, r7, #14
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f005 f969 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001e12:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <vKey_Action+0x578>)
 8001e14:	88db      	ldrh	r3, [r3, #6]
 8001e16:	2b15      	cmp	r3, #21
 8001e18:	f240 8204 	bls.w	8002224 <vKey_Action+0x848>
			{
				WelderUnit.Speed -= 20; // Дейсвия при длинном нажатии
 8001e1c:	4b4d      	ldr	r3, [pc, #308]	; (8001f54 <vKey_Action+0x578>)
 8001e1e:	88db      	ldrh	r3, [r3, #6]
 8001e20:	3b14      	subs	r3, #20
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <vKey_Action+0x578>)
 8001e26:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e28:	e1fc      	b.n	8002224 <vKey_Action+0x848>
		}

		case press_short_Speed_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <vKey_Action+0x574>)
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	f107 010e 	add.w	r1, r7, #14
 8001e32:	2300      	movs	r3, #0
 8001e34:	2200      	movs	r2, #0
 8001e36:	f005 f955 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX ) // Проверка на попадание в допустимый диапазон значений
 8001e3a:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <vKey_Action+0x578>)
 8001e3c:	88db      	ldrh	r3, [r3, #6]
 8001e3e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001e42:	4293      	cmp	r3, r2
 8001e44:	f200 81f1 	bhi.w	800222a <vKey_Action+0x84e>
			{
				WelderUnit.Speed++; // Исполнить
 8001e48:	4b42      	ldr	r3, [pc, #264]	; (8001f54 <vKey_Action+0x578>)
 8001e4a:	88db      	ldrh	r3, [r3, #6]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	4b40      	ldr	r3, [pc, #256]	; (8001f54 <vKey_Action+0x578>)
 8001e52:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e54:	e1e9      	b.n	800222a <vKey_Action+0x84e>
		}

		case press_long_Speed_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <vKey_Action+0x574>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	f107 010e 	add.w	r1, r7, #14
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2200      	movs	r2, #0
 8001e62:	f005 f93f 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Speed < SPEED_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8001e66:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <vKey_Action+0x578>)
 8001e68:	88db      	ldrh	r3, [r3, #6]
 8001e6a:	f240 32d2 	movw	r2, #978	; 0x3d2
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	f200 81de 	bhi.w	8002230 <vKey_Action+0x854>
			{
				WelderUnit.Speed += 20; // Дейсвия при длинном нажатии
 8001e74:	4b37      	ldr	r3, [pc, #220]	; (8001f54 <vKey_Action+0x578>)
 8001e76:	88db      	ldrh	r3, [r3, #6]
 8001e78:	3314      	adds	r3, #20
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b35      	ldr	r3, [pc, #212]	; (8001f54 <vKey_Action+0x578>)
 8001e7e:	80da      	strh	r2, [r3, #6]
			}
			break;
 8001e80:	e1d6      	b.n	8002230 <vKey_Action+0x854>
		}

		case press_short_Delay_f_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001e82:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <vKey_Action+0x574>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	f107 010e 	add.w	r1, r7, #14
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f005 f929 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN) // Проверка на попадание в допустимый диапазон значений
 8001e92:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <vKey_Action+0x578>)
 8001e94:	7adb      	ldrb	r3, [r3, #11]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	f240 81cd 	bls.w	8002236 <vKey_Action+0x85a>
			{
				WelderUnit.Delay_f--; // Исполнить
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <vKey_Action+0x578>)
 8001e9e:	7adb      	ldrb	r3, [r3, #11]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <vKey_Action+0x578>)
 8001ea6:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001ea8:	e1c5      	b.n	8002236 <vKey_Action+0x85a>
		}

		case press_long_Delay_f_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001eaa:	4b29      	ldr	r3, [pc, #164]	; (8001f50 <vKey_Action+0x574>)
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	f107 010e 	add.w	r1, r7, #14
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f005 f915 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Delay_f > DELAY_F_MIN + 10) // Проверка на попадание в допустимый диапазон значений
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <vKey_Action+0x578>)
 8001ebc:	7adb      	ldrb	r3, [r3, #11]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	f240 81bc 	bls.w	800223c <vKey_Action+0x860>
			{
				WelderUnit.Delay_f -= 10; // Дейсвия при длинном нажатии
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <vKey_Action+0x578>)
 8001ec6:	7adb      	ldrb	r3, [r3, #11]
 8001ec8:	3b0a      	subs	r3, #10
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <vKey_Action+0x578>)
 8001ece:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001ed0:	e1b4      	b.n	800223c <vKey_Action+0x860>
		}

		case press_short_Delay_f_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <vKey_Action+0x574>)
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	f107 010e 	add.w	r1, r7, #14
 8001eda:	2300      	movs	r3, #0
 8001edc:	2200      	movs	r2, #0
 8001ede:	f005 f901 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX) // Проверка на попадание в допустимый диапазон значений
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <vKey_Action+0x578>)
 8001ee4:	7adb      	ldrb	r3, [r3, #11]
 8001ee6:	2b45      	cmp	r3, #69	; 0x45
 8001ee8:	f200 81ab 	bhi.w	8002242 <vKey_Action+0x866>
			{
				WelderUnit.Delay_f++; // Исполнить
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <vKey_Action+0x578>)
 8001eee:	7adb      	ldrb	r3, [r3, #11]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <vKey_Action+0x578>)
 8001ef6:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001ef8:	e1a3      	b.n	8002242 <vKey_Action+0x866>
		}

		case press_long_Delay_f_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <vKey_Action+0x574>)
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	f107 010e 	add.w	r1, r7, #14
 8001f02:	2300      	movs	r3, #0
 8001f04:	2200      	movs	r2, #0
 8001f06:	f005 f8ed 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Delay_f < DELAY_F_MAX - 10 ) // Проверка на попадание в допустимый диапазон значений
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <vKey_Action+0x578>)
 8001f0c:	7adb      	ldrb	r3, [r3, #11]
 8001f0e:	2b3b      	cmp	r3, #59	; 0x3b
 8001f10:	f200 819a 	bhi.w	8002248 <vKey_Action+0x86c>
			{
				WelderUnit.Delay_f += 10; // Дейсвия при длинном нажатии
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <vKey_Action+0x578>)
 8001f16:	7adb      	ldrb	r3, [r3, #11]
 8001f18:	330a      	adds	r3, #10
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <vKey_Action+0x578>)
 8001f1e:	72da      	strb	r2, [r3, #11]
			}
			break;
 8001f20:	e192      	b.n	8002248 <vKey_Action+0x86c>
		}

		case press_short_Program_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <vKey_Action+0x574>)
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	f107 010e 	add.w	r1, r7, #14
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f005 f8d9 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN) // Проверка на попадание в допустимый диапазон значений
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <vKey_Action+0x578>)
 8001f34:	899b      	ldrh	r3, [r3, #12]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	f240 8194 	bls.w	8002264 <vKey_Action+0x888>
			{
				WelderUnit.Program--; // Исполнить
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <vKey_Action+0x578>)
 8001f3e:	899b      	ldrh	r3, [r3, #12]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <vKey_Action+0x578>)
 8001f46:	819a      	strh	r2, [r3, #12]
				ReadProgramFromFlash2();
 8001f48:	f7ff f98e 	bl	8001268 <ReadProgramFromFlash2>
			}
			break;
 8001f4c:	e18a      	b.n	8002264 <vKey_Action+0x888>
 8001f4e:	bf00      	nop
 8001f50:	20003538 	.word	0x20003538
 8001f54:	2000353c 	.word	0x2000353c
 8001f58:	20003d94 	.word	0x20003d94
		}

		case press_long_Program_L:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001f5c:	4bbc      	ldr	r3, [pc, #752]	; (8002250 <vKey_Action+0x874>)
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	f107 010e 	add.w	r1, r7, #14
 8001f64:	2300      	movs	r3, #0
 8001f66:	2200      	movs	r2, #0
 8001f68:	f005 f8bc 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Program > PROGRAM_MIN + 20) // Проверка на попадание в допустимый диапазон значений
 8001f6c:	4bb9      	ldr	r3, [pc, #740]	; (8002254 <vKey_Action+0x878>)
 8001f6e:	899b      	ldrh	r3, [r3, #12]
 8001f70:	2b15      	cmp	r3, #21
 8001f72:	f240 817a 	bls.w	800226a <vKey_Action+0x88e>
			{
				WelderUnit.Program -= 20; // Дейсвия при длинном нажатии
 8001f76:	4bb7      	ldr	r3, [pc, #732]	; (8002254 <vKey_Action+0x878>)
 8001f78:	899b      	ldrh	r3, [r3, #12]
 8001f7a:	3b14      	subs	r3, #20
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4bb5      	ldr	r3, [pc, #724]	; (8002254 <vKey_Action+0x878>)
 8001f80:	819a      	strh	r2, [r3, #12]
			}
			break;
 8001f82:	e172      	b.n	800226a <vKey_Action+0x88e>
		}

		case press_short_Program_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 );
 8001f84:	4bb2      	ldr	r3, [pc, #712]	; (8002250 <vKey_Action+0x874>)
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	f107 010e 	add.w	r1, r7, #14
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f005 f8a8 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX) // Проверка на попадание в допустимый диапазон значений
 8001f94:	4baf      	ldr	r3, [pc, #700]	; (8002254 <vKey_Action+0x878>)
 8001f96:	899b      	ldrh	r3, [r3, #12]
 8001f98:	2b45      	cmp	r3, #69	; 0x45
 8001f9a:	f200 8169 	bhi.w	8002270 <vKey_Action+0x894>
			{
				WelderUnit.Program++; // Исполнить
 8001f9e:	4bad      	ldr	r3, [pc, #692]	; (8002254 <vKey_Action+0x878>)
 8001fa0:	899b      	ldrh	r3, [r3, #12]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	4bab      	ldr	r3, [pc, #684]	; (8002254 <vKey_Action+0x878>)
 8001fa8:	819a      	strh	r2, [r3, #12]
				ReadProgramFromFlash2(); //
 8001faa:	f7ff f95d 	bl	8001268 <ReadProgramFromFlash2>
				//SaveProgramToFlash2();
			}
			break;
 8001fae:	e15f      	b.n	8002270 <vKey_Action+0x894>
		}

		case press_long_Program_R:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001fb0:	4ba7      	ldr	r3, [pc, #668]	; (8002250 <vKey_Action+0x874>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	f107 010e 	add.w	r1, r7, #14
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f005 f892 	bl	80070e4 <xQueueGenericSend>
			if (WelderUnit.Program < PROGRAM_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8001fc0:	4ba4      	ldr	r3, [pc, #656]	; (8002254 <vKey_Action+0x878>)
 8001fc2:	899b      	ldrh	r3, [r3, #12]
 8001fc4:	2b31      	cmp	r3, #49	; 0x31
 8001fc6:	f200 8156 	bhi.w	8002276 <vKey_Action+0x89a>
			{
				WelderUnit.Program += 20; // Дейсвия при длинном нажатии
 8001fca:	4ba2      	ldr	r3, [pc, #648]	; (8002254 <vKey_Action+0x878>)
 8001fcc:	899b      	ldrh	r3, [r3, #12]
 8001fce:	3314      	adds	r3, #20
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4ba0      	ldr	r3, [pc, #640]	; (8002254 <vKey_Action+0x878>)
 8001fd4:	819a      	strh	r2, [r3, #12]
			}
			break;
 8001fd6:	e14e      	b.n	8002276 <vKey_Action+0x89a>
		}


		case press_short_Down:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8001fd8:	4b9d      	ldr	r3, [pc, #628]	; (8002250 <vKey_Action+0x874>)
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	f107 010e 	add.w	r1, r7, #14
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f005 f87e 	bl	80070e4 <xQueueGenericSend>
					if (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) // Если задняя дверца закрыта, то разрешить опускание головки
 8001fe8:	4b9a      	ldr	r3, [pc, #616]	; (8002254 <vKey_Action+0x878>)
 8001fea:	7c1b      	ldrb	r3, [r3, #16]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8143 	beq.w	800227c <vKey_Action+0x8a0>
					{
						WELDER_HEAD_DOWN // Опустить сварочную головку
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2106      	movs	r1, #6
 8001ffa:	4897      	ldr	r0, [pc, #604]	; (8002258 <vKey_Action+0x87c>)
 8001ffc:	f002 fb61 	bl	80046c2 <HAL_GPIO_WritePin>
						WelderUnit.IndicatorPanel.LEDsState |= LED_DOWN; // Индикация что головка опущена
 8002000:	4b94      	ldr	r3, [pc, #592]	; (8002254 <vKey_Action+0x878>)
 8002002:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b91      	ldr	r3, [pc, #580]	; (8002254 <vKey_Action+0x878>)
 800200e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						WelderUnit.IndicatorPanel.LEDsState &= ~LED_UP; // Индикация что головка опущена
 8002012:	4b90      	ldr	r3, [pc, #576]	; (8002254 <vKey_Action+0x878>)
 8002014:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002018:	f023 0308 	bic.w	r3, r3, #8
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b8d      	ldr	r3, [pc, #564]	; (8002254 <vKey_Action+0x878>)
 8002020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					}

					break;
 8002024:	e12a      	b.n	800227c <vKey_Action+0x8a0>
				}

				case press_long_Down:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002026:	4b8a      	ldr	r3, [pc, #552]	; (8002250 <vKey_Action+0x874>)
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	f107 010e 	add.w	r1, r7, #14
 800202e:	2300      	movs	r3, #0
 8002030:	2200      	movs	r2, #0
 8002032:	f005 f857 	bl	80070e4 <xQueueGenericSend>
//					if (WelderUnit.Speed > SPEED_MIN + 20) // Проверка на попадание в допустимый диапазон значений
//					{
//						WelderUnit.Speed -= 20; // Дейсвия при длинном нажатии
//					}
					break;
 8002036:	e128      	b.n	800228a <vKey_Action+0x8ae>
				}

				case press_short_Up:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002038:	4b85      	ldr	r3, [pc, #532]	; (8002250 <vKey_Action+0x874>)
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	f107 010e 	add.w	r1, r7, #14
 8002040:	2300      	movs	r3, #0
 8002042:	2200      	movs	r2, #0
 8002044:	f005 f84e 	bl	80070e4 <xQueueGenericSend>
					WELDER_HEAD_UP // Поднять сварочную головку
 8002048:	2201      	movs	r2, #1
 800204a:	2106      	movs	r1, #6
 800204c:	4882      	ldr	r0, [pc, #520]	; (8002258 <vKey_Action+0x87c>)
 800204e:	f002 fb38 	bl	80046c2 <HAL_GPIO_WritePin>
					WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация что головка поднята
 8002052:	4b80      	ldr	r3, [pc, #512]	; (8002254 <vKey_Action+0x878>)
 8002054:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b7d      	ldr	r3, [pc, #500]	; (8002254 <vKey_Action+0x878>)
 8002060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN; // Индикация что головка поднята
 8002064:	4b7b      	ldr	r3, [pc, #492]	; (8002254 <vKey_Action+0x878>)
 8002066:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800206a:	f023 0304 	bic.w	r3, r3, #4
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b78      	ldr	r3, [pc, #480]	; (8002254 <vKey_Action+0x878>)
 8002072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					break;
 8002076:	e108      	b.n	800228a <vKey_Action+0x8ae>
				}

				case press_long_Up:
				{
					xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 8002078:	4b75      	ldr	r3, [pc, #468]	; (8002250 <vKey_Action+0x874>)
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	f107 010e 	add.w	r1, r7, #14
 8002080:	2300      	movs	r3, #0
 8002082:	2200      	movs	r2, #0
 8002084:	f005 f82e 	bl	80070e4 <xQueueGenericSend>
					if (WelderUnit.Speed < SPEED_MAX- 20 ) // Проверка на попадание в допустимый диапазон значений
 8002088:	4b72      	ldr	r3, [pc, #456]	; (8002254 <vKey_Action+0x878>)
 800208a:	88db      	ldrh	r3, [r3, #6]
 800208c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8002090:	4293      	cmp	r3, r2
 8002092:	f200 80f6 	bhi.w	8002282 <vKey_Action+0x8a6>
					{
						WelderUnit.Speed += 20; // Дейсвия при длинном нажатии
 8002096:	4b6f      	ldr	r3, [pc, #444]	; (8002254 <vKey_Action+0x878>)
 8002098:	88db      	ldrh	r3, [r3, #6]
 800209a:	3314      	adds	r3, #20
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b6d      	ldr	r3, [pc, #436]	; (8002254 <vKey_Action+0x878>)
 80020a0:	80da      	strh	r2, [r3, #6]
					}
					break;
 80020a2:	e0ee      	b.n	8002282 <vKey_Action+0x8a6>



		case press_short_Parking:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80020a4:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <vKey_Action+0x874>)
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	f107 010e 	add.w	r1, r7, #14
 80020ac:	2300      	movs	r3, #0
 80020ae:	2200      	movs	r2, #0
 80020b0:	f005 f818 	bl	80070e4 <xQueueGenericSend>

			WelderUnit.Mode = WELDER_MODE_CALIBRATION; //Задать режим работы аппарата - калибровка
 80020b4:	4b67      	ldr	r3, [pc, #412]	; (8002254 <vKey_Action+0x878>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

			//WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отключении индикации режима АВТО
			WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING; // Отображение что выбран режим калибровки
 80020bc:	4b65      	ldr	r3, [pc, #404]	; (8002254 <vKey_Action+0x878>)
 80020be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b62      	ldr	r3, [pc, #392]	; (8002254 <vKey_Action+0x878>)
 80020ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



			break;
 80020ce:	e0dc      	b.n	800228a <vKey_Action+0x8ae>
		}

		case press_long_Parking:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 80020d0:	4b5f      	ldr	r3, [pc, #380]	; (8002250 <vKey_Action+0x874>)
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	f107 010e 	add.w	r1, r7, #14
 80020d8:	2300      	movs	r3, #0
 80020da:	2200      	movs	r2, #0
 80020dc:	f005 f802 	bl	80070e4 <xQueueGenericSend>
			WelderUnit.Xf -= 20; // Дейсвия при длинном нажатии
 80020e0:	4b5c      	ldr	r3, [pc, #368]	; (8002254 <vKey_Action+0x878>)
 80020e2:	885b      	ldrh	r3, [r3, #2]
 80020e4:	3b14      	subs	r3, #20
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b5a      	ldr	r3, [pc, #360]	; (8002254 <vKey_Action+0x878>)
 80020ea:	805a      	strh	r2, [r3, #2]

			break;
 80020ec:	e0cd      	b.n	800228a <vKey_Action+0x8ae>
		}

		case press_short_Auto:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 );
 80020ee:	4b58      	ldr	r3, [pc, #352]	; (8002250 <vKey_Action+0x874>)
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	f107 010e 	add.w	r1, r7, #14
 80020f6:	2300      	movs	r3, #0
 80020f8:	2200      	movs	r2, #0
 80020fa:	f004 fff3 	bl	80070e4 <xQueueGenericSend>


			if (WelderUnit.State & WELDER_STATE_CALIBRATED) // Если аппарат откалиброван, то разрешить включение режима АВТО
 80020fe:	4b55      	ldr	r3, [pc, #340]	; (8002254 <vKey_Action+0x878>)
 8002100:	7c1b      	ldrb	r3, [r3, #16]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80be 	beq.w	8002288 <vKey_Action+0x8ac>
			{
				if (WelderUnit.Mode != WELDER_MODE_AUTO) // Если уже не выбран режим АВТО, то включить его, иначе включить Ручной режим
 800210c:	4b51      	ldr	r3, [pc, #324]	; (8002254 <vKey_Action+0x878>)
 800210e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002112:	2b03      	cmp	r3, #3
 8002114:	d00d      	beq.n	8002132 <vKey_Action+0x756>
				{
					WelderUnit.Mode = WELDER_MODE_AUTO;
 8002116:	4b4f      	ldr	r3, [pc, #316]	; (8002254 <vKey_Action+0x878>)
 8002118:	2203      	movs	r2, #3
 800211a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					WelderUnit.IndicatorPanel.LEDsState |= LED_AUTO; // Отображение что выбран режим калибровки
 800211e:	4b4d      	ldr	r3, [pc, #308]	; (8002254 <vKey_Action+0x878>)
 8002120:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b4a      	ldr	r3, [pc, #296]	; (8002254 <vKey_Action+0x878>)
 800212c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отображение что выбран режим калибровки
				}

			}

			break;
 8002130:	e0aa      	b.n	8002288 <vKey_Action+0x8ac>
					WelderUnit.Mode = WELDER_MODE_MANUAL;
 8002132:	4b48      	ldr	r3, [pc, #288]	; (8002254 <vKey_Action+0x878>)
 8002134:	2202      	movs	r2, #2
 8002136:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					WelderUnit.IndicatorPanel.LEDsState &= ~LED_AUTO; // Отображение что выбран режим калибровки
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <vKey_Action+0x878>)
 800213c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b43      	ldr	r3, [pc, #268]	; (8002254 <vKey_Action+0x878>)
 8002148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			break;
 800214c:	e09c      	b.n	8002288 <vKey_Action+0x8ac>
		}

		case press_long_Auto:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 800214e:	4b40      	ldr	r3, [pc, #256]	; (8002250 <vKey_Action+0x874>)
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	f107 010e 	add.w	r1, r7, #14
 8002156:	2300      	movs	r3, #0
 8002158:	2200      	movs	r2, #0
 800215a:	f004 ffc3 	bl	80070e4 <xQueueGenericSend>
			WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <vKey_Action+0x878>)
 8002160:	885b      	ldrh	r3, [r3, #2]
 8002162:	3314      	adds	r3, #20
 8002164:	b29a      	uxth	r2, r3
 8002166:	4b3b      	ldr	r3, [pc, #236]	; (8002254 <vKey_Action+0x878>)
 8002168:	805a      	strh	r2, [r3, #2]
			break;
 800216a:	e08e      	b.n	800228a <vKey_Action+0x8ae>
		}

		case press_short_StartStop:
		{
			xQueueSendToBack( qBeepMode, &beep_mode_send, 0 ); // Звук нажатия
 800216c:	4b38      	ldr	r3, [pc, #224]	; (8002250 <vKey_Action+0x874>)
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	f107 010e 	add.w	r1, r7, #14
 8002174:	2300      	movs	r3, #0
 8002176:	2200      	movs	r2, #0
 8002178:	f004 ffb4 	bl	80070e4 <xQueueGenericSend>

			// Дейсвия при нажатии на кнопку СТАРТ/СТОП в зависимости от установленного режима работы аппарата
			switch(WelderUnit.Mode)
 800217c:	4b35      	ldr	r3, [pc, #212]	; (8002254 <vKey_Action+0x878>)
 800217e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002182:	2b01      	cmp	r3, #1
 8002184:	d002      	beq.n	800218c <vKey_Action+0x7b0>
 8002186:	2b03      	cmp	r3, #3
 8002188:	d009      	beq.n	800219e <vKey_Action+0x7c2>


//			Carriage_cmd = Cmd_CarriageGoTo;
//			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к

			break;
 800218a:	e07e      	b.n	800228a <vKey_Action+0x8ae>
				xQueueSendToBack( qWelderCalibrated, &Cal, 0 ); // Начать калибровку
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <vKey_Action+0x880>)
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	f107 010d 	add.w	r1, r7, #13
 8002194:	2300      	movs	r3, #0
 8002196:	2200      	movs	r2, #0
 8002198:	f004 ffa4 	bl	80070e4 <xQueueGenericSend>
				break;
 800219c:	e00a      	b.n	80021b4 <vKey_Action+0x7d8>
				Run = Welder_Run;
 800219e:	2303      	movs	r3, #3
 80021a0:	733b      	strb	r3, [r7, #12]
				xQueueSendToBack(qWelderRun, &Run, 0 );
 80021a2:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <vKey_Action+0x884>)
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	f107 010c 	add.w	r1, r7, #12
 80021aa:	2300      	movs	r3, #0
 80021ac:	2200      	movs	r2, #0
 80021ae:	f004 ff99 	bl	80070e4 <xQueueGenericSend>
				break;
 80021b2:	bf00      	nop
			break;
 80021b4:	e069      	b.n	800228a <vKey_Action+0x8ae>
		}

		case press_long_StartStop:
		{
			WelderUnit.Xf += 20; // Дейсвия при длинном нажатии
 80021b6:	4b27      	ldr	r3, [pc, #156]	; (8002254 <vKey_Action+0x878>)
 80021b8:	885b      	ldrh	r3, [r3, #2]
 80021ba:	3314      	adds	r3, #20
 80021bc:	b29a      	uxth	r2, r3
 80021be:	4b25      	ldr	r3, [pc, #148]	; (8002254 <vKey_Action+0x878>)
 80021c0:	805a      	strh	r2, [r3, #2]
//			Key.StartStop_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
//			Key.StartStop_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
			break;
 80021c2:	e062      	b.n	800228a <vKey_Action+0x8ae>

		// *********************************************************Комбинации клавишь*********************************************************

		case press_short_Program_L_and_R:
		{
			beep_mode_send = beep_long;
 80021c4:	2305      	movs	r3, #5
 80021c6:	73bb      	strb	r3, [r7, #14]
			xQueueSendToBack( qBeepMode, &beep_mode_send , 0 ); // Звук нажат
 80021c8:	4b21      	ldr	r3, [pc, #132]	; (8002250 <vKey_Action+0x874>)
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	f107 010e 	add.w	r1, r7, #14
 80021d0:	2300      	movs	r3, #0
 80021d2:	2200      	movs	r2, #0
 80021d4:	f004 ff86 	bl	80070e4 <xQueueGenericSend>
			SaveProgramToFlash2();
 80021d8:	f7fe ffc2 	bl	8001160 <SaveProgramToFlash2>
			break;
 80021dc:	e055      	b.n	800228a <vKey_Action+0x8ae>
			break;
 80021de:	bf00      	nop
 80021e0:	e406      	b.n	80019f0 <vKey_Action+0x14>
			break;
 80021e2:	bf00      	nop
 80021e4:	e404      	b.n	80019f0 <vKey_Action+0x14>
			break;
 80021e6:	bf00      	nop
 80021e8:	e402      	b.n	80019f0 <vKey_Action+0x14>
			break;
 80021ea:	bf00      	nop
 80021ec:	e400      	b.n	80019f0 <vKey_Action+0x14>
			break;
 80021ee:	bf00      	nop
 80021f0:	f7ff bbfe 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80021f4:	bf00      	nop
 80021f6:	f7ff bbfb 	b.w	80019f0 <vKey_Action+0x14>
			break;
 80021fa:	bf00      	nop
 80021fc:	f7ff bbf8 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002200:	bf00      	nop
 8002202:	f7ff bbf5 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002206:	bf00      	nop
 8002208:	f7ff bbf2 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800220c:	bf00      	nop
 800220e:	f7ff bbef 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002212:	bf00      	nop
 8002214:	f7ff bbec 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002218:	bf00      	nop
 800221a:	f7ff bbe9 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800221e:	bf00      	nop
 8002220:	f7ff bbe6 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002224:	bf00      	nop
 8002226:	f7ff bbe3 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800222a:	bf00      	nop
 800222c:	f7ff bbe0 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002230:	bf00      	nop
 8002232:	f7ff bbdd 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002236:	bf00      	nop
 8002238:	f7ff bbda 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800223c:	bf00      	nop
 800223e:	f7ff bbd7 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002242:	bf00      	nop
 8002244:	f7ff bbd4 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002248:	bf00      	nop
 800224a:	f7ff bbd1 	b.w	80019f0 <vKey_Action+0x14>
 800224e:	bf00      	nop
 8002250:	20003538 	.word	0x20003538
 8002254:	2000353c 	.word	0x2000353c
 8002258:	40011000 	.word	0x40011000
 800225c:	20003d8c 	.word	0x20003d8c
 8002260:	20003d88 	.word	0x20003d88
			break;
 8002264:	bf00      	nop
 8002266:	f7ff bbc3 	b.w	80019f0 <vKey_Action+0x14>
			break;
 800226a:	bf00      	nop
 800226c:	f7ff bbc0 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002270:	bf00      	nop
 8002272:	f7ff bbbd 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002276:	bf00      	nop
 8002278:	f7ff bbba 	b.w	80019f0 <vKey_Action+0x14>
					break;
 800227c:	bf00      	nop
 800227e:	f7ff bbb7 	b.w	80019f0 <vKey_Action+0x14>
					break;
 8002282:	bf00      	nop
 8002284:	f7ff bbb4 	b.w	80019f0 <vKey_Action+0x14>
			break;
 8002288:	bf00      	nop
		xQueueReceive(qKeyPress, &KeyPressed, portMAX_DELAY ); // Ждать нажатия кнопки
 800228a:	f7ff bbb1 	b.w	80019f0 <vKey_Action+0x14>
 800228e:	bf00      	nop

08002290 <vWelder_Run>:
	vTaskDelete(NULL);

}

void vWelder_Run(void *pvParameters)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

	uint8_t beep;

	for(;;)
	{
		xQueueReceive(qWelderRun, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 8002298:	4b70      	ldr	r3, [pc, #448]	; (800245c <vWelder_Run+0x1cc>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f107 010e 	add.w	r1, r7, #14
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	4618      	mov	r0, r3
 80022a6:	f005 f875 	bl	8007394 <xQueueReceive>

		if (lReceivedValue == Welder_Run && ((WelderUnit.State & 0x02) == 0x02) && (WelderUnit.State & WELDER_STATE_BACK_DOOR_CLOSE) ) // Если пришла команда на начло варки и каретка откалибрована и задняя дверца закрыта
 80022aa:	7bbb      	ldrb	r3, [r7, #14]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d1f3      	bne.n	8002298 <vWelder_Run+0x8>
 80022b0:	4b6b      	ldr	r3, [pc, #428]	; (8002460 <vWelder_Run+0x1d0>)
 80022b2:	7c1b      	ldrb	r3, [r3, #16]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0ed      	beq.n	8002298 <vWelder_Run+0x8>
 80022bc:	4b68      	ldr	r3, [pc, #416]	; (8002460 <vWelder_Run+0x1d0>)
 80022be:	7c1b      	ldrb	r3, [r3, #16]
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0e7      	beq.n	8002298 <vWelder_Run+0x8>
		{
			beep = beep_long;
 80022c8:	2305      	movs	r3, #5
 80022ca:	737b      	strb	r3, [r7, #13]
			xQueueSendToBack( qBeepMode, &beep, 0 ); // Звук нажатия
 80022cc:	4b65      	ldr	r3, [pc, #404]	; (8002464 <vWelder_Run+0x1d4>)
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	f107 010d 	add.w	r1, r7, #13
 80022d4:	2300      	movs	r3, #0
 80022d6:	2200      	movs	r2, #0
 80022d8:	f004 ff04 	bl	80070e4 <xQueueGenericSend>

		if (WelderUnit.Position != WelderUnit.Xs) // Если текущая позиция каретки не равна стартовой позиции, то занять её
 80022dc:	4b60      	ldr	r3, [pc, #384]	; (8002460 <vWelder_Run+0x1d0>)
 80022de:	889a      	ldrh	r2, [r3, #4]
 80022e0:	4b5f      	ldr	r3, [pc, #380]	; (8002460 <vWelder_Run+0x1d0>)
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d016      	beq.n	8002316 <vWelder_Run+0x86>
		{
			Carriage_cmd = Cmd_CarriageGoTo;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
			WelderUnit.GoTo = WelderUnit.Xs;
 80022ec:	4b5c      	ldr	r3, [pc, #368]	; (8002460 <vWelder_Run+0x1d0>)
 80022ee:	881a      	ldrh	r2, [r3, #0]
 80022f0:	4b5b      	ldr	r3, [pc, #364]	; (8002460 <vWelder_Run+0x1d0>)
 80022f2:	811a      	strh	r2, [r3, #8]
			xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идти к
 80022f4:	4b5c      	ldr	r3, [pc, #368]	; (8002468 <vWelder_Run+0x1d8>)
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	f107 010f 	add.w	r1, r7, #15
 80022fc:	2300      	movs	r3, #0
 80022fe:	2200      	movs	r2, #0
 8002300:	f004 fef0 	bl	80070e4 <xQueueGenericSend>

//			xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Без этого не работает. В очереди откуда то берутся данные
			xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 8002304:	4b59      	ldr	r3, [pc, #356]	; (800246c <vWelder_Run+0x1dc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f107 010e 	add.w	r1, r7, #14
 800230c:	f04f 32ff 	mov.w	r2, #4294967295
 8002310:	4618      	mov	r0, r3
 8002312:	f005 f83f 	bl	8007394 <xQueueReceive>
		}

		if (/*(lReceivedValue == Carriage_Done) ||*/ (WelderUnit.Position == WelderUnit.Xs)) // Если каретка на заданной позиции
 8002316:	4b52      	ldr	r3, [pc, #328]	; (8002460 <vWelder_Run+0x1d0>)
 8002318:	889a      	ldrh	r2, [r3, #4]
 800231a:	4b51      	ldr	r3, [pc, #324]	; (8002460 <vWelder_Run+0x1d0>)
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d1ba      	bne.n	8002298 <vWelder_Run+0x8>
		{


		WELDER_HEAD_DOWN // Опустить головку
 8002322:	2200      	movs	r2, #0
 8002324:	2106      	movs	r1, #6
 8002326:	4852      	ldr	r0, [pc, #328]	; (8002470 <vWelder_Run+0x1e0>)
 8002328:	f002 f9cb 	bl	80046c2 <HAL_GPIO_WritePin>
		WelderUnit.IndicatorPanel.LEDsState |= LED_DOWN; // Индикация опущенной сварочной головки
 800232c:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <vWelder_Run+0x1d0>)
 800232e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	b2da      	uxtb	r2, r3
 8002338:	4b49      	ldr	r3, [pc, #292]	; (8002460 <vWelder_Run+0x1d0>)
 800233a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		WelderUnit.IndicatorPanel.LEDsState &= ~LED_UP;
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <vWelder_Run+0x1d0>)
 8002340:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002344:	f023 0308 	bic.w	r3, r3, #8
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b45      	ldr	r3, [pc, #276]	; (8002460 <vWelder_Run+0x1d0>)
 800234c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		vTaskDelay(100 / portTICK_RATE_MS); // Ожидание опускания головки
 8002350:	2064      	movs	r0, #100	; 0x64
 8002352:	f005 fd0d 	bl	8007d70 <vTaskDelay>
		SYNC_ARC_ON // Подача дуги
 8002356:	2201      	movs	r2, #1
 8002358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800235c:	4845      	ldr	r0, [pc, #276]	; (8002474 <vWelder_Run+0x1e4>)
 800235e:	f002 f9b0 	bl	80046c2 <HAL_GPIO_WritePin>

		vTaskDelay(WelderUnit.Delay_s * 100 / portTICK_RATE_MS); // Выдержка времени для заполнения точки начала сварки аргоном.
 8002362:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <vWelder_Run+0x1d0>)
 8002364:	7a9b      	ldrb	r3, [r3, #10]
 8002366:	461a      	mov	r2, r3
 8002368:	2364      	movs	r3, #100	; 0x64
 800236a:	fb03 f302 	mul.w	r3, r3, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f005 fcfe 	bl	8007d70 <vTaskDelay>

		WelderUnit.GoTo = WelderUnit.Xf; // Указание точки осановки головки
 8002374:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <vWelder_Run+0x1d0>)
 8002376:	885a      	ldrh	r2, [r3, #2]
 8002378:	4b39      	ldr	r3, [pc, #228]	; (8002460 <vWelder_Run+0x1d0>)
 800237a:	811a      	strh	r2, [r3, #8]
		Carriage_cmd = Cmd_CarriageGoTo; // Команда на начала движение каретки
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
		xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идти к
 8002380:	4b39      	ldr	r3, [pc, #228]	; (8002468 <vWelder_Run+0x1d8>)
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	f107 010f 	add.w	r1, r7, #15
 8002388:	2300      	movs	r3, #0
 800238a:	2200      	movs	r2, #0
 800238c:	f004 feaa 	bl	80070e4 <xQueueGenericSend>


		xQueueReceive(qGoToResponse, &lReceivedValue, 0 ); // Без этого не работает. В очереди откуда то берутся данные
 8002390:	4b36      	ldr	r3, [pc, #216]	; (800246c <vWelder_Run+0x1dc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f107 010e 	add.w	r1, r7, #14
 8002398:	2200      	movs	r2, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f004 fffa 	bl	8007394 <xQueueReceive>
		xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 80023a0:	4b32      	ldr	r3, [pc, #200]	; (800246c <vWelder_Run+0x1dc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f107 010e 	add.w	r1, r7, #14
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	4618      	mov	r0, r3
 80023ae:	f004 fff1 	bl	8007394 <xQueueReceive>

		SYNC_ARC_OFF // Прекращение подачи дуги
 80023b2:	2200      	movs	r2, #0
 80023b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b8:	482e      	ldr	r0, [pc, #184]	; (8002474 <vWelder_Run+0x1e4>)
 80023ba:	f002 f982 	bl	80046c2 <HAL_GPIO_WritePin>

		vTaskDelay(WelderUnit.Delay_f * 100 / portTICK_RATE_MS); // Выдержка времени для заполнения точки останова сварки аргоном.
 80023be:	4b28      	ldr	r3, [pc, #160]	; (8002460 <vWelder_Run+0x1d0>)
 80023c0:	7adb      	ldrb	r3, [r3, #11]
 80023c2:	461a      	mov	r2, r3
 80023c4:	2364      	movs	r3, #100	; 0x64
 80023c6:	fb03 f302 	mul.w	r3, r3, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f005 fcd0 	bl	8007d70 <vTaskDelay>

		beep = beep_3short;
 80023d0:	2304      	movs	r3, #4
 80023d2:	737b      	strb	r3, [r7, #13]
		xQueueSendToBack( qBeepMode, &beep, 0 ); // Звук окончания варки
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <vWelder_Run+0x1d4>)
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	f107 010d 	add.w	r1, r7, #13
 80023dc:	2300      	movs	r3, #0
 80023de:	2200      	movs	r2, #0
 80023e0:	f004 fe80 	bl	80070e4 <xQueueGenericSend>

		WELDER_HEAD_UP // Поднять головку
 80023e4:	2201      	movs	r2, #1
 80023e6:	2106      	movs	r1, #6
 80023e8:	4821      	ldr	r0, [pc, #132]	; (8002470 <vWelder_Run+0x1e0>)
 80023ea:	f002 f96a 	bl	80046c2 <HAL_GPIO_WritePin>
		vTaskDelay(100 / portTICK_RATE_MS); // Ожидание подъема головки
 80023ee:	2064      	movs	r0, #100	; 0x64
 80023f0:	f005 fcbe 	bl	8007d70 <vTaskDelay>

		WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <vWelder_Run+0x1d0>)
 80023f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023fa:	f043 0308 	orr.w	r3, r3, #8
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <vWelder_Run+0x1d0>)
 8002402:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <vWelder_Run+0x1d0>)
 8002408:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b13      	ldr	r3, [pc, #76]	; (8002460 <vWelder_Run+0x1d0>)
 8002414:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		// Откат каретки

		if (WelderUnit.Position > KICKBACK)
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <vWelder_Run+0x1d0>)
 800241a:	889b      	ldrh	r3, [r3, #4]
 800241c:	2bc8      	cmp	r3, #200	; 0xc8
 800241e:	d906      	bls.n	800242e <vWelder_Run+0x19e>
		{
			WelderUnit.GoTo = WelderUnit.Position -	KICKBACK;
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <vWelder_Run+0x1d0>)
 8002422:	889b      	ldrh	r3, [r3, #4]
 8002424:	3bc8      	subs	r3, #200	; 0xc8
 8002426:	b29a      	uxth	r2, r3
 8002428:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <vWelder_Run+0x1d0>)
 800242a:	811a      	strh	r2, [r3, #8]
 800242c:	e002      	b.n	8002434 <vWelder_Run+0x1a4>
		}
		else
		{
			WelderUnit.GoTo = 0;
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <vWelder_Run+0x1d0>)
 8002430:	2200      	movs	r2, #0
 8002432:	811a      	strh	r2, [r3, #8]
		}

		Carriage_cmd = Cmd_CarriageGoTo;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
		xQueueSendToBack( qWelderCmd, &Carriage_cmd, 0 ); // Идити к
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <vWelder_Run+0x1d8>)
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	f107 010f 	add.w	r1, r7, #15
 8002440:	2300      	movs	r3, #0
 8002442:	2200      	movs	r2, #0
 8002444:	f004 fe4e 	bl	80070e4 <xQueueGenericSend>
		xQueueReceive(qGoToResponse, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <vWelder_Run+0x1dc>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f107 010e 	add.w	r1, r7, #14
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	4618      	mov	r0, r3
 8002456:	f004 ff9d 	bl	8007394 <xQueueReceive>
		xQueueReceive(qWelderRun, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки ханята
 800245a:	e71d      	b.n	8002298 <vWelder_Run+0x8>
 800245c:	20003d88 	.word	0x20003d88
 8002460:	2000353c 	.word	0x2000353c
 8002464:	20003538 	.word	0x20003538
 8002468:	20003d94 	.word	0x20003d94
 800246c:	20003d80 	.word	0x20003d80
 8002470:	40011000 	.word	0x40011000
 8002474:	40010800 	.word	0x40010800

08002478 <vCarriage_Calibration>:
}



void vCarriage_Calibration(void *pvParameters)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	uint8_t lReceivedValue;


	for(;;)
	{
		xQueueReceive(qWelderCalibrated, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 8002480:	4b39      	ldr	r3, [pc, #228]	; (8002568 <vCarriage_Calibration+0xf0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f107 010f 	add.w	r1, r7, #15
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	4618      	mov	r0, r3
 800248e:	f004 ff81 	bl	8007394 <xQueueReceive>

		if (lReceivedValue == Calibrated)
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	2b04      	cmp	r3, #4
 8002496:	d1f3      	bne.n	8002480 <vCarriage_Calibration+0x8>
		{
			WELDER_HEAD_UP // Поднять головку
 8002498:	2201      	movs	r2, #1
 800249a:	2106      	movs	r1, #6
 800249c:	4833      	ldr	r0, [pc, #204]	; (800256c <vCarriage_Calibration+0xf4>)
 800249e:	f002 f910 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS); // Ожидание подъема головки
 80024a2:	2064      	movs	r0, #100	; 0x64
 80024a4:	f005 fc64 	bl	8007d70 <vTaskDelay>

			WelderUnit.IndicatorPanel.LEDsState |= LED_UP; // Индикация поднятой сварочной головки
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <vCarriage_Calibration+0xf8>)
 80024aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024ae:	f043 0308 	orr.w	r3, r3, #8
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <vCarriage_Calibration+0xf8>)
 80024b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			WelderUnit.IndicatorPanel.LEDsState &= ~LED_DOWN;
 80024ba:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <vCarriage_Calibration+0xf8>)
 80024bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024c0:	f023 0304 	bic.w	r3, r3, #4
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <vCarriage_Calibration+0xf8>)
 80024c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

			Carriage_Move(CALIBRATION_PHASE_SPEED_1, 0, 1); // Начать перемещение каретки в сторону концевика
 80024cc:	2201      	movs	r2, #1
 80024ce:	2100      	movs	r1, #0
 80024d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80024d4:	f7fe fcd8 	bl	8000e88 <Carriage_Move>

			// Когда концевик замкнулся выдается семофор, что коретка дошла до самого начала

			// По какой-то причине при первой попытке взять 2-й семафор он берется (даже если не выдан). Потому семафор берется дважды
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY ); // Попытка взять семафор.
 80024d8:	4b26      	ldr	r3, [pc, #152]	; (8002574 <vCarriage_Calibration+0xfc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	4618      	mov	r0, r3
 80024e2:	f004 fff9 	bl	80074d8 <xQueueSemaphoreTake>
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
 80024e6:	4b23      	ldr	r3, [pc, #140]	; (8002574 <vCarriage_Calibration+0xfc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f04f 31ff 	mov.w	r1, #4294967295
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 fff2 	bl	80074d8 <xQueueSemaphoreTake>

			Carriage_Move(0, 0, 1); // Стоп
 80024f4:	2201      	movs	r2, #1
 80024f6:	2100      	movs	r1, #0
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7fe fcc5 	bl	8000e88 <Carriage_Move>

			Carriage_Move(CALIBRATION_PHASE_SPEED_2, 1, 1); // Отъехать немного назад
 80024fe:	2201      	movs	r2, #1
 8002500:	2101      	movs	r1, #1
 8002502:	20dc      	movs	r0, #220	; 0xdc
 8002504:	f7fe fcc0 	bl	8000e88 <Carriage_Move>
			vTaskDelay(1000 / portTICK_RATE_MS);
 8002508:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800250c:	f005 fc30 	bl	8007d70 <vTaskDelay>

			Carriage_Move(0, 0, 1); // Стоп
 8002510:	2201      	movs	r2, #1
 8002512:	2100      	movs	r1, #0
 8002514:	2000      	movs	r0, #0
 8002516:	f7fe fcb7 	bl	8000e88 <Carriage_Move>

			vTaskDelay(100/ portTICK_RATE_MS);
 800251a:	2064      	movs	r0, #100	; 0x64
 800251c:	f005 fc28 	bl	8007d70 <vTaskDelay>

			Carriage_Move(CALIBRATION_PHASE_SPEED_3, 0, 1); // Начать перемещение каретки в сторону концевика
 8002520:	2201      	movs	r2, #1
 8002522:	2100      	movs	r1, #0
 8002524:	2018      	movs	r0, #24
 8002526:	f7fe fcaf 	bl	8000e88 <Carriage_Move>

			// По какой-то причине при первой попытке взять 2-й семафор он берется (даже если не выдан). Потому семафор берется дважды
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY ); // Попытка взять семафор по прерыванию срабатывания концевика
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <vCarriage_Calibration+0xfc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f04f 31ff 	mov.w	r1, #4294967295
 8002532:	4618      	mov	r0, r3
 8002534:	f004 ffd0 	bl	80074d8 <xQueueSemaphoreTake>
			xSemaphoreTake( xSemaphore_Calibration, portMAX_DELAY );
 8002538:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <vCarriage_Calibration+0xfc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f04f 31ff 	mov.w	r1, #4294967295
 8002540:	4618      	mov	r0, r3
 8002542:	f004 ffc9 	bl	80074d8 <xQueueSemaphoreTake>

			Carriage_Move(0, 0, 1); // Стоп
 8002546:	2201      	movs	r2, #1
 8002548:	2100      	movs	r1, #0
 800254a:	2000      	movs	r0, #0
 800254c:	f7fe fc9c 	bl	8000e88 <Carriage_Move>

			WelderUnit.State |= 1<<1; //1 бит - Откалибровано
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <vCarriage_Calibration+0xf8>)
 8002552:	7c1b      	ldrb	r3, [r3, #16]
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <vCarriage_Calibration+0xf8>)
 800255c:	741a      	strb	r2, [r3, #16]

			WelderUnit.Position = 0; // Позиция каретки
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <vCarriage_Calibration+0xf8>)
 8002560:	2200      	movs	r2, #0
 8002562:	809a      	strh	r2, [r3, #4]
		xQueueReceive(qWelderCalibrated, &lReceivedValue, portMAX_DELAY ); // Ждать ответа от задачи CarriageGoTo о том что нужная позиция картеки занята
 8002564:	e78c      	b.n	8002480 <vCarriage_Calibration+0x8>
 8002566:	bf00      	nop
 8002568:	20003d8c 	.word	0x20003d8c
 800256c:	40011000 	.word	0x40011000
 8002570:	2000353c 	.word	0x2000353c
 8002574:	20003dc4 	.word	0x20003dc4

08002578 <vCarriage_GoTo>:
	vTaskDelete(NULL);
}


void vCarriage_GoTo(void *pvParameters)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		//Попытка получить команду для передвижения каретки в нужную позицию.
		// Данные из очереди при этом не удаляются
		xQueuePeek(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 8002580:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <vCarriage_GoTo+0x180>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f107 010b 	add.w	r1, r7, #11
 8002588:	f04f 32ff 	mov.w	r2, #4294967295
 800258c:	4618      	mov	r0, r3
 800258e:	f005 f86b 	bl	8007668 <xQueuePeek>

		if (lReceivedValue == Cmd_CarriageGoTo)
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d1f3      	bne.n	8002580 <vCarriage_GoTo+0x8>
		{

		WelderUnit.Position = WelderUnit.Steps * DISTANCE_PER_ROTATE / (STEPS_PER_ROTATE * MICRO_STEP_DEV); // Вычисление текущей позиции каретки, мм
 8002598:	4b58      	ldr	r3, [pc, #352]	; (80026fc <vCarriage_GoTo+0x184>)
 800259a:	89db      	ldrh	r3, [r3, #14]
 800259c:	461a      	mov	r2, r3
 800259e:	4613      	mov	r3, r2
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd ff94 	bl	80004d4 <__aeabi_i2d>
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	4b53      	ldr	r3, [pc, #332]	; (8002700 <vCarriage_GoTo+0x188>)
 80025b2:	f7fe f923 	bl	80007fc <__aeabi_ddiv>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	f7fe fa05 	bl	80009cc <__aeabi_d2uiz>
 80025c2:	4603      	mov	r3, r0
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <vCarriage_GoTo+0x184>)
 80025c8:	809a      	strh	r2, [r3, #4]

		dX = WelderUnit.GoTo - WelderUnit.Position; // Определение сколько и в какую сторону нужно сдвинуть каретку
 80025ca:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <vCarriage_GoTo+0x184>)
 80025cc:	891b      	ldrh	r3, [r3, #8]
 80025ce:	461a      	mov	r2, r3
 80025d0:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <vCarriage_GoTo+0x184>)
 80025d2:	889b      	ldrh	r3, [r3, #4]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	60fb      	str	r3, [r7, #12]

		// Если каретка на нужном месте, то остановить движение каретки, очищаем очередь и снова взврат к xQueuePeek, для ожидания след команды
		if (dX == 0)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d11e      	bne.n	800261c <vCarriage_GoTo+0xa4>
		{
			Carriage_Move(0, 1, 1); // стоп
 80025de:	2201      	movs	r2, #1
 80025e0:	2101      	movs	r1, #1
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fc50 	bl	8000e88 <Carriage_Move>
			WelderUnit.State &= ~0x01;
 80025e8:	4b44      	ldr	r3, [pc, #272]	; (80026fc <vCarriage_GoTo+0x184>)
 80025ea:	7c1b      	ldrb	r3, [r3, #16]
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b42      	ldr	r3, [pc, #264]	; (80026fc <vCarriage_GoTo+0x184>)
 80025f4:	741a      	strb	r2, [r3, #16]
			SendVal = Carriage_Done;
 80025f6:	2302      	movs	r3, #2
 80025f8:	72bb      	strb	r3, [r7, #10]
			xQueueSendToBack( qGoToResponse, &SendVal, 0 );
 80025fa:	4b42      	ldr	r3, [pc, #264]	; (8002704 <vCarriage_GoTo+0x18c>)
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	f107 010a 	add.w	r1, r7, #10
 8002602:	2300      	movs	r3, #0
 8002604:	2200      	movs	r2, #0
 8002606:	f004 fd6d 	bl	80070e4 <xQueueGenericSend>

			//xQueueSendToBack( qDebug, &SendVal, 0 );

			xQueueReceive(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 800260a:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <vCarriage_GoTo+0x180>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f107 010b 	add.w	r1, r7, #11
 8002612:	f04f 32ff 	mov.w	r2, #4294967295
 8002616:	4618      	mov	r0, r3
 8002618:	f004 febc 	bl	8007394 <xQueueReceive>

		}

		if (dX > 0) // Если двигать в сторону концевика
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	dd20      	ble.n	8002664 <vCarriage_GoTo+0xec>
		{

			if (WelderUnit.Position <= WelderUnit.GoTo && !(WelderUnit.State & 0x01)) // Если позиция не достигнута и каретка находится не в движении, то начать перемещение
 8002622:	4b36      	ldr	r3, [pc, #216]	; (80026fc <vCarriage_GoTo+0x184>)
 8002624:	889a      	ldrh	r2, [r3, #4]
 8002626:	4b35      	ldr	r3, [pc, #212]	; (80026fc <vCarriage_GoTo+0x184>)
 8002628:	891b      	ldrh	r3, [r3, #8]
 800262a:	429a      	cmp	r2, r3
 800262c:	d81a      	bhi.n	8002664 <vCarriage_GoTo+0xec>
 800262e:	4b33      	ldr	r3, [pc, #204]	; (80026fc <vCarriage_GoTo+0x184>)
 8002630:	7c1b      	ldrb	r3, [r3, #16]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d114      	bne.n	8002664 <vCarriage_GoTo+0xec>
			{
				Carriage_Move(WelderUnit.Speed, 1, 1); // Начать перемещение
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <vCarriage_GoTo+0x184>)
 800263c:	88db      	ldrh	r3, [r3, #6]
 800263e:	2201      	movs	r2, #1
 8002640:	2101      	movs	r1, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fc20 	bl	8000e88 <Carriage_Move>
				WelderUnit.State |= 0x01; // Статус - каретка в движении
 8002648:	4b2c      	ldr	r3, [pc, #176]	; (80026fc <vCarriage_GoTo+0x184>)
 800264a:	7c1b      	ldrb	r3, [r3, #16]
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <vCarriage_GoTo+0x184>)
 8002654:	741a      	strb	r2, [r3, #16]
				WelderUnit.State &= ~0x04; // Статус картека движется на встречу концевику
 8002656:	4b29      	ldr	r3, [pc, #164]	; (80026fc <vCarriage_GoTo+0x184>)
 8002658:	7c1b      	ldrb	r3, [r3, #16]
 800265a:	f023 0304 	bic.w	r3, r3, #4
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4b26      	ldr	r3, [pc, #152]	; (80026fc <vCarriage_GoTo+0x184>)
 8002662:	741a      	strb	r2, [r3, #16]
			}
		}

		if (dX < 0) // Если нужно двигать от концевика
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	da20      	bge.n	80026ac <vCarriage_GoTo+0x134>
		{
			if (WelderUnit.Position >= WelderUnit.GoTo && !(WelderUnit.State & 0x01)) // Если позиция не достигнута и каретка находится не в движении, то начать перемещение
 800266a:	4b24      	ldr	r3, [pc, #144]	; (80026fc <vCarriage_GoTo+0x184>)
 800266c:	889a      	ldrh	r2, [r3, #4]
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <vCarriage_GoTo+0x184>)
 8002670:	891b      	ldrh	r3, [r3, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	d31a      	bcc.n	80026ac <vCarriage_GoTo+0x134>
 8002676:	4b21      	ldr	r3, [pc, #132]	; (80026fc <vCarriage_GoTo+0x184>)
 8002678:	7c1b      	ldrb	r3, [r3, #16]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d114      	bne.n	80026ac <vCarriage_GoTo+0x134>
			{
				Carriage_Move(WelderUnit.Speed, 0, 1); // Начать перемещение
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <vCarriage_GoTo+0x184>)
 8002684:	88db      	ldrh	r3, [r3, #6]
 8002686:	2201      	movs	r2, #1
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fbfc 	bl	8000e88 <Carriage_Move>
				WelderUnit.State |= 0x01; // Статус - каретка в движении
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <vCarriage_GoTo+0x184>)
 8002692:	7c1b      	ldrb	r3, [r3, #16]
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <vCarriage_GoTo+0x184>)
 800269c:	741a      	strb	r2, [r3, #16]
				WelderUnit.State |= 0x04; // Статус картека движется от концевика
 800269e:	4b17      	ldr	r3, [pc, #92]	; (80026fc <vCarriage_GoTo+0x184>)
 80026a0:	7c1b      	ldrb	r3, [r3, #16]
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <vCarriage_GoTo+0x184>)
 80026aa:	741a      	strb	r2, [r3, #16]
			}
		}

		if (xSemaphoreTake(xSemaphore_StepCount, (500 / portTICK_RATE_MS)) == pdTRUE) // Если через 100 мС семафор так и не получен, то считать что двигатель осановлен
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <vCarriage_GoTo+0x190>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80026b4:	4618      	mov	r0, r3
 80026b6:	f004 ff0f 	bl	80074d8 <xQueueSemaphoreTake>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b01      	cmp	r3, #1
 80026be:	f47f af5f 	bne.w	8002580 <vCarriage_GoTo+0x8>
		//xSemaphoreTake(xSemaphore_StepCount, portMAX_DELAY );
		{
			if (!(WelderUnit.State & 0x04)) // Если каретка движется на встречу концевику, то инкрментирование Steps на каждый шаг ШД
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <vCarriage_GoTo+0x184>)
 80026c4:	7c1b      	ldrb	r3, [r3, #16]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <vCarriage_GoTo+0x162>
				{
					WelderUnit.Steps++;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <vCarriage_GoTo+0x184>)
 80026d0:	89db      	ldrh	r3, [r3, #14]
 80026d2:	3301      	adds	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <vCarriage_GoTo+0x184>)
 80026d8:	81da      	strh	r2, [r3, #14]
				}

				if (WelderUnit.State & 0x04) // Если каретка движется от концевика, то декрементирование Steps на каждый шаг ШД
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <vCarriage_GoTo+0x184>)
 80026dc:	7c1b      	ldrb	r3, [r3, #16]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f43f af4c 	beq.w	8002580 <vCarriage_GoTo+0x8>
				{
						WelderUnit.Steps--;
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <vCarriage_GoTo+0x184>)
 80026ea:	89db      	ldrh	r3, [r3, #14]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b02      	ldr	r3, [pc, #8]	; (80026fc <vCarriage_GoTo+0x184>)
 80026f2:	81da      	strh	r2, [r3, #14]
		xQueuePeek(qWelderCmd, &lReceivedValue, portMAX_DELAY );
 80026f4:	e744      	b.n	8002580 <vCarriage_GoTo+0x8>
 80026f6:	bf00      	nop
 80026f8:	20003d94 	.word	0x20003d94
 80026fc:	2000353c 	.word	0x2000353c
 8002700:	40890000 	.word	0x40890000
 8002704:	20003d80 	.word	0x20003d80
 8002708:	20003560 	.word	0x20003560

0800270c <vKeyScan>:
	}
	vTaskDelete(NULL);
}

void vKeyScan(void *pvParameters)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]


	uint8_t nKeyPressed; // Передача команды о том какая кнопка или комбинация кнопок нажаты
	//portBASE_TYPE xStatus;

	vTaskDelay(100 / portTICK_RATE_MS);
 8002714:	2064      	movs	r0, #100	; 0x64
 8002716:	f005 fb2b 	bl	8007d70 <vTaskDelay>

	for(;;)
	{
		PCB_KeyScan();
 800271a:	f7fe fbfd 	bl	8000f18 <PCB_KeyScan>
		PCB_OutputControl();
 800271e:	f7fe fc65 	bl	8000fec <PCB_OutputControl>
		//PCB_InputsScan();

		if (WelderUnit.IndicatorPanel.KeyState[0] == 128) // ВЛЕВО: [0], "-" - 128, "+" - 64, , STLED №5;
 8002722:	4ba9      	ldr	r3, [pc, #676]	; (80029c8 <vKeyScan+0x2bc>)
 8002724:	7f5b      	ldrb	r3, [r3, #29]
 8002726:	2b80      	cmp	r3, #128	; 0x80
 8002728:	d12f      	bne.n	800278a <vKeyScan+0x7e>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xs_ShortPress_L > CNT_KEY_SHORT && Key.Xs_ShortPress_L != CNT_KEY_SHORT + 2)
 800272a:	4ba8      	ldr	r3, [pc, #672]	; (80029cc <vKeyScan+0x2c0>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b04      	cmp	r3, #4
 8002730:	d906      	bls.n	8002740 <vKeyScan+0x34>
 8002732:	4ba6      	ldr	r3, [pc, #664]	; (80029cc <vKeyScan+0x2c0>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b06      	cmp	r3, #6
 8002738:	d002      	beq.n	8002740 <vKeyScan+0x34>
			{
//				nKeyPressed = press_short_Xs_L;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Xs_ShortPress_L = CNT_KEY_SHORT + 3; // Для ожидания отпускания клавиши
 800273a:	4ba4      	ldr	r3, [pc, #656]	; (80029cc <vKeyScan+0x2c0>)
 800273c:	2207      	movs	r2, #7
 800273e:	701a      	strb	r2, [r3, #0]
			}

			if (Key.Xs_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002740:	4ba2      	ldr	r3, [pc, #648]	; (80029cc <vKeyScan+0x2c0>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b06      	cmp	r3, #6
 8002746:	d005      	beq.n	8002754 <vKeyScan+0x48>
			{
				Key.Xs_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002748:	4ba0      	ldr	r3, [pc, #640]	; (80029cc <vKeyScan+0x2c0>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	4b9e      	ldr	r3, [pc, #632]	; (80029cc <vKeyScan+0x2c0>)
 8002752:	701a      	strb	r2, [r3, #0]
			}


			Key.Xs_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002754:	4b9d      	ldr	r3, [pc, #628]	; (80029cc <vKeyScan+0x2c0>)
 8002756:	789b      	ldrb	r3, [r3, #2]
 8002758:	3301      	adds	r3, #1
 800275a:	b2da      	uxtb	r2, r3
 800275c:	4b9b      	ldr	r3, [pc, #620]	; (80029cc <vKeyScan+0x2c0>)
 800275e:	709a      	strb	r2, [r3, #2]
			if (Key.Xs_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002760:	4b9a      	ldr	r3, [pc, #616]	; (80029cc <vKeyScan+0x2c0>)
 8002762:	789b      	ldrb	r3, [r3, #2]
 8002764:	2b32      	cmp	r3, #50	; 0x32
 8002766:	d924      	bls.n	80027b2 <vKeyScan+0xa6>
			{
				nKeyPressed = press_long_Xs_L;
 8002768:	2302      	movs	r3, #2
 800276a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800276c:	4b98      	ldr	r3, [pc, #608]	; (80029d0 <vKeyScan+0x2c4>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	f107 010f 	add.w	r1, r7, #15
 8002774:	2300      	movs	r3, #0
 8002776:	2200      	movs	r2, #0
 8002778:	f004 fcb4 	bl	80070e4 <xQueueGenericSend>


				Key.Xs_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800277c:	4b93      	ldr	r3, [pc, #588]	; (80029cc <vKeyScan+0x2c0>)
 800277e:	2206      	movs	r2, #6
 8002780:	701a      	strb	r2, [r3, #0]
				Key.Xs_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002782:	4b92      	ldr	r3, [pc, #584]	; (80029cc <vKeyScan+0x2c0>)
 8002784:	2225      	movs	r2, #37	; 0x25
 8002786:	709a      	strb	r2, [r3, #2]
 8002788:	e013      	b.n	80027b2 <vKeyScan+0xa6>
		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{


			if (Key.Xs_ShortPress_L >= CNT_KEY_SHORT + 3)
 800278a:	4b90      	ldr	r3, [pc, #576]	; (80029cc <vKeyScan+0x2c0>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b06      	cmp	r3, #6
 8002790:	d909      	bls.n	80027a6 <vKeyScan+0x9a>
			{
				nKeyPressed = press_short_Xs_L;
 8002792:	2301      	movs	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002796:	4b8e      	ldr	r3, [pc, #568]	; (80029d0 <vKeyScan+0x2c4>)
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	f107 010f 	add.w	r1, r7, #15
 800279e:	2300      	movs	r3, #0
 80027a0:	2200      	movs	r2, #0
 80027a2:	f004 fc9f 	bl	80070e4 <xQueueGenericSend>
			}

			Key.Xs_ShortPress_L = 0;
 80027a6:	4b89      	ldr	r3, [pc, #548]	; (80029cc <vKeyScan+0x2c0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
			Key.Xs_LongPress_L = 0;
 80027ac:	4b87      	ldr	r3, [pc, #540]	; (80029cc <vKeyScan+0x2c0>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	709a      	strb	r2, [r3, #2]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 64) // Если есть факт нажатия кнопки
 80027b2:	4b85      	ldr	r3, [pc, #532]	; (80029c8 <vKeyScan+0x2bc>)
 80027b4:	7f5b      	ldrb	r3, [r3, #29]
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d139      	bne.n	800282e <vKeyScan+0x122>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xs_ShortPress_R > CNT_KEY_SHORT && Key.Xs_ShortPress_R != CNT_KEY_SHORT + 2)
 80027ba:	4b84      	ldr	r3, [pc, #528]	; (80029cc <vKeyScan+0x2c0>)
 80027bc:	785b      	ldrb	r3, [r3, #1]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d910      	bls.n	80027e4 <vKeyScan+0xd8>
 80027c2:	4b82      	ldr	r3, [pc, #520]	; (80029cc <vKeyScan+0x2c0>)
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d00c      	beq.n	80027e4 <vKeyScan+0xd8>
			{

				nKeyPressed = press_short_Xs_R;
 80027ca:	2303      	movs	r3, #3
 80027cc:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80027ce:	4b80      	ldr	r3, [pc, #512]	; (80029d0 <vKeyScan+0x2c4>)
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	f107 010f 	add.w	r1, r7, #15
 80027d6:	2300      	movs	r3, #0
 80027d8:	2200      	movs	r2, #0
 80027da:	f004 fc83 	bl	80070e4 <xQueueGenericSend>

				Key.Xs_ShortPress_R = 0; // Сброс счетика выдержки
 80027de:	4b7b      	ldr	r3, [pc, #492]	; (80029cc <vKeyScan+0x2c0>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	705a      	strb	r2, [r3, #1]
			}

			if (Key.Xs_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80027e4:	4b79      	ldr	r3, [pc, #484]	; (80029cc <vKeyScan+0x2c0>)
 80027e6:	785b      	ldrb	r3, [r3, #1]
 80027e8:	2b06      	cmp	r3, #6
 80027ea:	d005      	beq.n	80027f8 <vKeyScan+0xec>
			{
				Key.Xs_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 80027ec:	4b77      	ldr	r3, [pc, #476]	; (80029cc <vKeyScan+0x2c0>)
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	3301      	adds	r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	4b75      	ldr	r3, [pc, #468]	; (80029cc <vKeyScan+0x2c0>)
 80027f6:	705a      	strb	r2, [r3, #1]
			}


			Key.Xs_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 80027f8:	4b74      	ldr	r3, [pc, #464]	; (80029cc <vKeyScan+0x2c0>)
 80027fa:	78db      	ldrb	r3, [r3, #3]
 80027fc:	3301      	adds	r3, #1
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	4b72      	ldr	r3, [pc, #456]	; (80029cc <vKeyScan+0x2c0>)
 8002802:	70da      	strb	r2, [r3, #3]
			if (Key.Xs_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002804:	4b71      	ldr	r3, [pc, #452]	; (80029cc <vKeyScan+0x2c0>)
 8002806:	78db      	ldrb	r3, [r3, #3]
 8002808:	2b32      	cmp	r3, #50	; 0x32
 800280a:	d916      	bls.n	800283a <vKeyScan+0x12e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xs_R;
 800280c:	2304      	movs	r3, #4
 800280e:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002810:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <vKeyScan+0x2c4>)
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	f107 010f 	add.w	r1, r7, #15
 8002818:	2300      	movs	r3, #0
 800281a:	2200      	movs	r2, #0
 800281c:	f004 fc62 	bl	80070e4 <xQueueGenericSend>

				Key.Xs_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002820:	4b6a      	ldr	r3, [pc, #424]	; (80029cc <vKeyScan+0x2c0>)
 8002822:	2206      	movs	r2, #6
 8002824:	705a      	strb	r2, [r3, #1]
				Key.Xs_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002826:	4b69      	ldr	r3, [pc, #420]	; (80029cc <vKeyScan+0x2c0>)
 8002828:	2225      	movs	r2, #37	; 0x25
 800282a:	70da      	strb	r2, [r3, #3]
 800282c:	e005      	b.n	800283a <vKeyScan+0x12e>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xs_ShortPress_R = 0;
 800282e:	4b67      	ldr	r3, [pc, #412]	; (80029cc <vKeyScan+0x2c0>)
 8002830:	2200      	movs	r2, #0
 8002832:	705a      	strb	r2, [r3, #1]
			Key.Xs_LongPress_R = 0;
 8002834:	4b65      	ldr	r3, [pc, #404]	; (80029cc <vKeyScan+0x2c0>)
 8002836:	2200      	movs	r2, #0
 8002838:	70da      	strb	r2, [r3, #3]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 16) // ВПРАВО: [0], "-" - 16, "+" - 32, , STLED №5;
 800283a:	4b63      	ldr	r3, [pc, #396]	; (80029c8 <vKeyScan+0x2bc>)
 800283c:	7f5b      	ldrb	r3, [r3, #29]
 800283e:	2b10      	cmp	r3, #16
 8002840:	d139      	bne.n	80028b6 <vKeyScan+0x1aa>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xf_ShortPress_L > CNT_KEY_SHORT && Key.Xf_ShortPress_L != CNT_KEY_SHORT + 2)
 8002842:	4b62      	ldr	r3, [pc, #392]	; (80029cc <vKeyScan+0x2c0>)
 8002844:	791b      	ldrb	r3, [r3, #4]
 8002846:	2b04      	cmp	r3, #4
 8002848:	d910      	bls.n	800286c <vKeyScan+0x160>
 800284a:	4b60      	ldr	r3, [pc, #384]	; (80029cc <vKeyScan+0x2c0>)
 800284c:	791b      	ldrb	r3, [r3, #4]
 800284e:	2b06      	cmp	r3, #6
 8002850:	d00c      	beq.n	800286c <vKeyScan+0x160>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Xf_L;
 8002852:	2305      	movs	r3, #5
 8002854:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002856:	4b5e      	ldr	r3, [pc, #376]	; (80029d0 <vKeyScan+0x2c4>)
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	f107 010f 	add.w	r1, r7, #15
 800285e:	2300      	movs	r3, #0
 8002860:	2200      	movs	r2, #0
 8002862:	f004 fc3f 	bl	80070e4 <xQueueGenericSend>


				Key.Xf_ShortPress_L = 0; // Сброс счетика выдержки
 8002866:	4b59      	ldr	r3, [pc, #356]	; (80029cc <vKeyScan+0x2c0>)
 8002868:	2200      	movs	r2, #0
 800286a:	711a      	strb	r2, [r3, #4]
			}

			if (Key.Xf_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 800286c:	4b57      	ldr	r3, [pc, #348]	; (80029cc <vKeyScan+0x2c0>)
 800286e:	791b      	ldrb	r3, [r3, #4]
 8002870:	2b06      	cmp	r3, #6
 8002872:	d005      	beq.n	8002880 <vKeyScan+0x174>
			{
				Key.Xf_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002874:	4b55      	ldr	r3, [pc, #340]	; (80029cc <vKeyScan+0x2c0>)
 8002876:	791b      	ldrb	r3, [r3, #4]
 8002878:	3301      	adds	r3, #1
 800287a:	b2da      	uxtb	r2, r3
 800287c:	4b53      	ldr	r3, [pc, #332]	; (80029cc <vKeyScan+0x2c0>)
 800287e:	711a      	strb	r2, [r3, #4]
			}


			Key.Xf_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002880:	4b52      	ldr	r3, [pc, #328]	; (80029cc <vKeyScan+0x2c0>)
 8002882:	799b      	ldrb	r3, [r3, #6]
 8002884:	3301      	adds	r3, #1
 8002886:	b2da      	uxtb	r2, r3
 8002888:	4b50      	ldr	r3, [pc, #320]	; (80029cc <vKeyScan+0x2c0>)
 800288a:	719a      	strb	r2, [r3, #6]
			if (Key.Xf_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 800288c:	4b4f      	ldr	r3, [pc, #316]	; (80029cc <vKeyScan+0x2c0>)
 800288e:	799b      	ldrb	r3, [r3, #6]
 8002890:	2b32      	cmp	r3, #50	; 0x32
 8002892:	d916      	bls.n	80028c2 <vKeyScan+0x1b6>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xf_L;
 8002894:	2306      	movs	r3, #6
 8002896:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002898:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <vKeyScan+0x2c4>)
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	f107 010f 	add.w	r1, r7, #15
 80028a0:	2300      	movs	r3, #0
 80028a2:	2200      	movs	r2, #0
 80028a4:	f004 fc1e 	bl	80070e4 <xQueueGenericSend>


				Key.Xf_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80028a8:	4b48      	ldr	r3, [pc, #288]	; (80029cc <vKeyScan+0x2c0>)
 80028aa:	2206      	movs	r2, #6
 80028ac:	711a      	strb	r2, [r3, #4]
				Key.Xf_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80028ae:	4b47      	ldr	r3, [pc, #284]	; (80029cc <vKeyScan+0x2c0>)
 80028b0:	2225      	movs	r2, #37	; 0x25
 80028b2:	719a      	strb	r2, [r3, #6]
 80028b4:	e005      	b.n	80028c2 <vKeyScan+0x1b6>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xf_ShortPress_L = 0;
 80028b6:	4b45      	ldr	r3, [pc, #276]	; (80029cc <vKeyScan+0x2c0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	711a      	strb	r2, [r3, #4]
			Key.Xf_LongPress_L = 0;
 80028bc:	4b43      	ldr	r3, [pc, #268]	; (80029cc <vKeyScan+0x2c0>)
 80028be:	2200      	movs	r2, #0
 80028c0:	719a      	strb	r2, [r3, #6]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 32)
 80028c2:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <vKeyScan+0x2bc>)
 80028c4:	7f5b      	ldrb	r3, [r3, #29]
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d139      	bne.n	800293e <vKeyScan+0x232>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Xf_ShortPress_R > CNT_KEY_SHORT && Key.Xf_ShortPress_R != CNT_KEY_SHORT + 2)
 80028ca:	4b40      	ldr	r3, [pc, #256]	; (80029cc <vKeyScan+0x2c0>)
 80028cc:	795b      	ldrb	r3, [r3, #5]
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d910      	bls.n	80028f4 <vKeyScan+0x1e8>
 80028d2:	4b3e      	ldr	r3, [pc, #248]	; (80029cc <vKeyScan+0x2c0>)
 80028d4:	795b      	ldrb	r3, [r3, #5]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d00c      	beq.n	80028f4 <vKeyScan+0x1e8>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Xf_R;
 80028da:	2307      	movs	r3, #7
 80028dc:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80028de:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <vKeyScan+0x2c4>)
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	f107 010f 	add.w	r1, r7, #15
 80028e6:	2300      	movs	r3, #0
 80028e8:	2200      	movs	r2, #0
 80028ea:	f004 fbfb 	bl	80070e4 <xQueueGenericSend>


				Key.Xf_ShortPress_R = 0; // Сброс счетика выдержки
 80028ee:	4b37      	ldr	r3, [pc, #220]	; (80029cc <vKeyScan+0x2c0>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	715a      	strb	r2, [r3, #5]
			}

			if (Key.Xf_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80028f4:	4b35      	ldr	r3, [pc, #212]	; (80029cc <vKeyScan+0x2c0>)
 80028f6:	795b      	ldrb	r3, [r3, #5]
 80028f8:	2b06      	cmp	r3, #6
 80028fa:	d005      	beq.n	8002908 <vKeyScan+0x1fc>
			{
				Key.Xf_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 80028fc:	4b33      	ldr	r3, [pc, #204]	; (80029cc <vKeyScan+0x2c0>)
 80028fe:	795b      	ldrb	r3, [r3, #5]
 8002900:	3301      	adds	r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b31      	ldr	r3, [pc, #196]	; (80029cc <vKeyScan+0x2c0>)
 8002906:	715a      	strb	r2, [r3, #5]
			}


			Key.Xf_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002908:	4b30      	ldr	r3, [pc, #192]	; (80029cc <vKeyScan+0x2c0>)
 800290a:	79db      	ldrb	r3, [r3, #7]
 800290c:	3301      	adds	r3, #1
 800290e:	b2da      	uxtb	r2, r3
 8002910:	4b2e      	ldr	r3, [pc, #184]	; (80029cc <vKeyScan+0x2c0>)
 8002912:	71da      	strb	r2, [r3, #7]
			if (Key.Xf_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <vKeyScan+0x2c0>)
 8002916:	79db      	ldrb	r3, [r3, #7]
 8002918:	2b32      	cmp	r3, #50	; 0x32
 800291a:	d916      	bls.n	800294a <vKeyScan+0x23e>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Xf_R;
 800291c:	2308      	movs	r3, #8
 800291e:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <vKeyScan+0x2c4>)
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	f107 010f 	add.w	r1, r7, #15
 8002928:	2300      	movs	r3, #0
 800292a:	2200      	movs	r2, #0
 800292c:	f004 fbda 	bl	80070e4 <xQueueGenericSend>

				Key.Xf_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002930:	4b26      	ldr	r3, [pc, #152]	; (80029cc <vKeyScan+0x2c0>)
 8002932:	2206      	movs	r2, #6
 8002934:	715a      	strb	r2, [r3, #5]
				Key.Xf_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002936:	4b25      	ldr	r3, [pc, #148]	; (80029cc <vKeyScan+0x2c0>)
 8002938:	2225      	movs	r2, #37	; 0x25
 800293a:	71da      	strb	r2, [r3, #7]
 800293c:	e005      	b.n	800294a <vKeyScan+0x23e>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Xf_ShortPress_R = 0;
 800293e:	4b23      	ldr	r3, [pc, #140]	; (80029cc <vKeyScan+0x2c0>)
 8002940:	2200      	movs	r2, #0
 8002942:	715a      	strb	r2, [r3, #5]
			Key.Xf_LongPress_R = 0;
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <vKeyScan+0x2c0>)
 8002946:	2200      	movs	r2, #0
 8002948:	71da      	strb	r2, [r3, #7]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 8) //ЗАДЕРЖКА (Delay_s): [0], "-" - 8, "+" - 4, , STLED №5;
 800294a:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <vKeyScan+0x2bc>)
 800294c:	7f5b      	ldrb	r3, [r3, #29]
 800294e:	2b08      	cmp	r3, #8
 8002950:	d140      	bne.n	80029d4 <vKeyScan+0x2c8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_s_ShortPress_L > CNT_KEY_SHORT && Key.Delay_s_ShortPress_L != CNT_KEY_SHORT + 2)
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <vKeyScan+0x2c0>)
 8002954:	7a1b      	ldrb	r3, [r3, #8]
 8002956:	2b04      	cmp	r3, #4
 8002958:	d910      	bls.n	800297c <vKeyScan+0x270>
 800295a:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <vKeyScan+0x2c0>)
 800295c:	7a1b      	ldrb	r3, [r3, #8]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d00c      	beq.n	800297c <vKeyScan+0x270>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_s_L;
 8002962:	2309      	movs	r3, #9
 8002964:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <vKeyScan+0x2c4>)
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	f107 010f 	add.w	r1, r7, #15
 800296e:	2300      	movs	r3, #0
 8002970:	2200      	movs	r2, #0
 8002972:	f004 fbb7 	bl	80070e4 <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = 0; // Сброс счетика выдержки
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <vKeyScan+0x2c0>)
 8002978:	2200      	movs	r2, #0
 800297a:	721a      	strb	r2, [r3, #8]
			}

			if (Key.Delay_s_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <vKeyScan+0x2c0>)
 800297e:	7a1b      	ldrb	r3, [r3, #8]
 8002980:	2b06      	cmp	r3, #6
 8002982:	d005      	beq.n	8002990 <vKeyScan+0x284>
			{
				Key.Delay_s_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <vKeyScan+0x2c0>)
 8002986:	7a1b      	ldrb	r3, [r3, #8]
 8002988:	3301      	adds	r3, #1
 800298a:	b2da      	uxtb	r2, r3
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <vKeyScan+0x2c0>)
 800298e:	721a      	strb	r2, [r3, #8]
			}


			Key.Delay_s_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002990:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <vKeyScan+0x2c0>)
 8002992:	7a9b      	ldrb	r3, [r3, #10]
 8002994:	3301      	adds	r3, #1
 8002996:	b2da      	uxtb	r2, r3
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <vKeyScan+0x2c0>)
 800299a:	729a      	strb	r2, [r3, #10]
			if (Key.Delay_s_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <vKeyScan+0x2c0>)
 800299e:	7a9b      	ldrb	r3, [r3, #10]
 80029a0:	2b32      	cmp	r3, #50	; 0x32
 80029a2:	d91d      	bls.n	80029e0 <vKeyScan+0x2d4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_s_L;
 80029a4:	230a      	movs	r3, #10
 80029a6:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <vKeyScan+0x2c4>)
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	f107 010f 	add.w	r1, r7, #15
 80029b0:	2300      	movs	r3, #0
 80029b2:	2200      	movs	r2, #0
 80029b4:	f004 fb96 	bl	80070e4 <xQueueGenericSend>

				Key.Delay_s_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <vKeyScan+0x2c0>)
 80029ba:	2206      	movs	r2, #6
 80029bc:	721a      	strb	r2, [r3, #8]
				Key.Delay_s_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 80029be:	4b03      	ldr	r3, [pc, #12]	; (80029cc <vKeyScan+0x2c0>)
 80029c0:	2225      	movs	r2, #37	; 0x25
 80029c2:	729a      	strb	r2, [r3, #10]
 80029c4:	e00c      	b.n	80029e0 <vKeyScan+0x2d4>
 80029c6:	bf00      	nop
 80029c8:	2000353c 	.word	0x2000353c
 80029cc:	20003da0 	.word	0x20003da0
 80029d0:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_s_ShortPress_L = 0;
 80029d4:	4ba9      	ldr	r3, [pc, #676]	; (8002c7c <vKeyScan+0x570>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	721a      	strb	r2, [r3, #8]
			Key.Delay_s_LongPress_L = 0;
 80029da:	4ba8      	ldr	r3, [pc, #672]	; (8002c7c <vKeyScan+0x570>)
 80029dc:	2200      	movs	r2, #0
 80029de:	729a      	strb	r2, [r3, #10]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 4)
 80029e0:	4ba7      	ldr	r3, [pc, #668]	; (8002c80 <vKeyScan+0x574>)
 80029e2:	7f5b      	ldrb	r3, [r3, #29]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d139      	bne.n	8002a5c <vKeyScan+0x350>
			{
				// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
				if (Key.Delay_s_ShortPress_R > CNT_KEY_SHORT && Key.Delay_s_ShortPress_R != CNT_KEY_SHORT + 2)
 80029e8:	4ba4      	ldr	r3, [pc, #656]	; (8002c7c <vKeyScan+0x570>)
 80029ea:	7a5b      	ldrb	r3, [r3, #9]
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d910      	bls.n	8002a12 <vKeyScan+0x306>
 80029f0:	4ba2      	ldr	r3, [pc, #648]	; (8002c7c <vKeyScan+0x570>)
 80029f2:	7a5b      	ldrb	r3, [r3, #9]
 80029f4:	2b06      	cmp	r3, #6
 80029f6:	d00c      	beq.n	8002a12 <vKeyScan+0x306>
				{
					// Дейсвие при нажатии на клавишу
					nKeyPressed = press_short_Delay_s_R;
 80029f8:	230b      	movs	r3, #11
 80029fa:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 80029fc:	4ba1      	ldr	r3, [pc, #644]	; (8002c84 <vKeyScan+0x578>)
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	f107 010f 	add.w	r1, r7, #15
 8002a04:	2300      	movs	r3, #0
 8002a06:	2200      	movs	r2, #0
 8002a08:	f004 fb6c 	bl	80070e4 <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = 0; // Сброс счетика выдержки
 8002a0c:	4b9b      	ldr	r3, [pc, #620]	; (8002c7c <vKeyScan+0x570>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	725a      	strb	r2, [r3, #9]
				}

				if (Key.Delay_s_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002a12:	4b9a      	ldr	r3, [pc, #616]	; (8002c7c <vKeyScan+0x570>)
 8002a14:	7a5b      	ldrb	r3, [r3, #9]
 8002a16:	2b06      	cmp	r3, #6
 8002a18:	d005      	beq.n	8002a26 <vKeyScan+0x31a>
				{
					Key.Delay_s_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002a1a:	4b98      	ldr	r3, [pc, #608]	; (8002c7c <vKeyScan+0x570>)
 8002a1c:	7a5b      	ldrb	r3, [r3, #9]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4b96      	ldr	r3, [pc, #600]	; (8002c7c <vKeyScan+0x570>)
 8002a24:	725a      	strb	r2, [r3, #9]
				}


				Key.Delay_s_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002a26:	4b95      	ldr	r3, [pc, #596]	; (8002c7c <vKeyScan+0x570>)
 8002a28:	7adb      	ldrb	r3, [r3, #11]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	4b93      	ldr	r3, [pc, #588]	; (8002c7c <vKeyScan+0x570>)
 8002a30:	72da      	strb	r2, [r3, #11]
				if (Key.Delay_s_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002a32:	4b92      	ldr	r3, [pc, #584]	; (8002c7c <vKeyScan+0x570>)
 8002a34:	7adb      	ldrb	r3, [r3, #11]
 8002a36:	2b32      	cmp	r3, #50	; 0x32
 8002a38:	d916      	bls.n	8002a68 <vKeyScan+0x35c>
				{
					// Дейсвие при нажатии на клавишу
					nKeyPressed = press_long_Delay_s_R;
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002a3e:	4b91      	ldr	r3, [pc, #580]	; (8002c84 <vKeyScan+0x578>)
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	f107 010f 	add.w	r1, r7, #15
 8002a46:	2300      	movs	r3, #0
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f004 fb4b 	bl	80070e4 <xQueueGenericSend>

					Key.Delay_s_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002a4e:	4b8b      	ldr	r3, [pc, #556]	; (8002c7c <vKeyScan+0x570>)
 8002a50:	2206      	movs	r2, #6
 8002a52:	725a      	strb	r2, [r3, #9]
					Key.Delay_s_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002a54:	4b89      	ldr	r3, [pc, #548]	; (8002c7c <vKeyScan+0x570>)
 8002a56:	2225      	movs	r2, #37	; 0x25
 8002a58:	72da      	strb	r2, [r3, #11]
 8002a5a:	e005      	b.n	8002a68 <vKeyScan+0x35c>


			}
			else // Если кнопка была отпущена то сбросить все счетчики выдержки
			{
				Key.Delay_s_ShortPress_R = 0;
 8002a5c:	4b87      	ldr	r3, [pc, #540]	; (8002c7c <vKeyScan+0x570>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	725a      	strb	r2, [r3, #9]
				Key.Delay_s_LongPress_R = 0;
 8002a62:	4b86      	ldr	r3, [pc, #536]	; (8002c7c <vKeyScan+0x570>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	72da      	strb	r2, [r3, #11]
			}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 2) // СКОРОСТЬ: [0], "-" - 2, "+" - 1, , STLED №5;
 8002a68:	4b85      	ldr	r3, [pc, #532]	; (8002c80 <vKeyScan+0x574>)
 8002a6a:	7f5b      	ldrb	r3, [r3, #29]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d139      	bne.n	8002ae4 <vKeyScan+0x3d8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Speed_ShortPress_L > CNT_KEY_SHORT && Key.Speed_ShortPress_L != CNT_KEY_SHORT + 2)
 8002a70:	4b82      	ldr	r3, [pc, #520]	; (8002c7c <vKeyScan+0x570>)
 8002a72:	7b1b      	ldrb	r3, [r3, #12]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d910      	bls.n	8002a9a <vKeyScan+0x38e>
 8002a78:	4b80      	ldr	r3, [pc, #512]	; (8002c7c <vKeyScan+0x570>)
 8002a7a:	7b1b      	ldrb	r3, [r3, #12]
 8002a7c:	2b06      	cmp	r3, #6
 8002a7e:	d00c      	beq.n	8002a9a <vKeyScan+0x38e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Speed_L;
 8002a80:	230d      	movs	r3, #13
 8002a82:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002a84:	4b7f      	ldr	r3, [pc, #508]	; (8002c84 <vKeyScan+0x578>)
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	f107 010f 	add.w	r1, r7, #15
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f004 fb28 	bl	80070e4 <xQueueGenericSend>

				Key.Speed_ShortPress_L = 0; // Сброс счетика выдержки
 8002a94:	4b79      	ldr	r3, [pc, #484]	; (8002c7c <vKeyScan+0x570>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	731a      	strb	r2, [r3, #12]
			}

			if (Key.Speed_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002a9a:	4b78      	ldr	r3, [pc, #480]	; (8002c7c <vKeyScan+0x570>)
 8002a9c:	7b1b      	ldrb	r3, [r3, #12]
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d005      	beq.n	8002aae <vKeyScan+0x3a2>
			{
				Key.Speed_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002aa2:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <vKeyScan+0x570>)
 8002aa4:	7b1b      	ldrb	r3, [r3, #12]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4b74      	ldr	r3, [pc, #464]	; (8002c7c <vKeyScan+0x570>)
 8002aac:	731a      	strb	r2, [r3, #12]
			}


			Key.Speed_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002aae:	4b73      	ldr	r3, [pc, #460]	; (8002c7c <vKeyScan+0x570>)
 8002ab0:	7b9b      	ldrb	r3, [r3, #14]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b71      	ldr	r3, [pc, #452]	; (8002c7c <vKeyScan+0x570>)
 8002ab8:	739a      	strb	r2, [r3, #14]
			if (Key.Speed_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002aba:	4b70      	ldr	r3, [pc, #448]	; (8002c7c <vKeyScan+0x570>)
 8002abc:	7b9b      	ldrb	r3, [r3, #14]
 8002abe:	2b32      	cmp	r3, #50	; 0x32
 8002ac0:	d916      	bls.n	8002af0 <vKeyScan+0x3e4>
			{

				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Speed_L;
 8002ac2:	230e      	movs	r3, #14
 8002ac4:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002ac6:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <vKeyScan+0x578>)
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	f107 010f 	add.w	r1, r7, #15
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f004 fb07 	bl	80070e4 <xQueueGenericSend>

				Key.Speed_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002ad6:	4b69      	ldr	r3, [pc, #420]	; (8002c7c <vKeyScan+0x570>)
 8002ad8:	2206      	movs	r2, #6
 8002ada:	731a      	strb	r2, [r3, #12]
				Key.Speed_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002adc:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <vKeyScan+0x570>)
 8002ade:	2225      	movs	r2, #37	; 0x25
 8002ae0:	739a      	strb	r2, [r3, #14]
 8002ae2:	e005      	b.n	8002af0 <vKeyScan+0x3e4>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Speed_ShortPress_L = 0;
 8002ae4:	4b65      	ldr	r3, [pc, #404]	; (8002c7c <vKeyScan+0x570>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	731a      	strb	r2, [r3, #12]
			Key.Speed_LongPress_L = 0;
 8002aea:	4b64      	ldr	r3, [pc, #400]	; (8002c7c <vKeyScan+0x570>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	739a      	strb	r2, [r3, #14]
		}

		if (WelderUnit.IndicatorPanel.KeyState[0] == 1)
 8002af0:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <vKeyScan+0x574>)
 8002af2:	7f5b      	ldrb	r3, [r3, #29]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d139      	bne.n	8002b6c <vKeyScan+0x460>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Speed_ShortPress_R > CNT_KEY_SHORT && Key.Speed_ShortPress_R != CNT_KEY_SHORT + 2)
 8002af8:	4b60      	ldr	r3, [pc, #384]	; (8002c7c <vKeyScan+0x570>)
 8002afa:	7b5b      	ldrb	r3, [r3, #13]
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d910      	bls.n	8002b22 <vKeyScan+0x416>
 8002b00:	4b5e      	ldr	r3, [pc, #376]	; (8002c7c <vKeyScan+0x570>)
 8002b02:	7b5b      	ldrb	r3, [r3, #13]
 8002b04:	2b06      	cmp	r3, #6
 8002b06:	d00c      	beq.n	8002b22 <vKeyScan+0x416>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Speed_R;
 8002b08:	230f      	movs	r3, #15
 8002b0a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002b0c:	4b5d      	ldr	r3, [pc, #372]	; (8002c84 <vKeyScan+0x578>)
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	f107 010f 	add.w	r1, r7, #15
 8002b14:	2300      	movs	r3, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	f004 fae4 	bl	80070e4 <xQueueGenericSend>

				Key.Speed_ShortPress_R = 0; // Сброс счетика выдержки
 8002b1c:	4b57      	ldr	r3, [pc, #348]	; (8002c7c <vKeyScan+0x570>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	735a      	strb	r2, [r3, #13]
			}

			if (Key.Speed_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002b22:	4b56      	ldr	r3, [pc, #344]	; (8002c7c <vKeyScan+0x570>)
 8002b24:	7b5b      	ldrb	r3, [r3, #13]
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d005      	beq.n	8002b36 <vKeyScan+0x42a>
			{
				Key.Speed_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002b2a:	4b54      	ldr	r3, [pc, #336]	; (8002c7c <vKeyScan+0x570>)
 8002b2c:	7b5b      	ldrb	r3, [r3, #13]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4b52      	ldr	r3, [pc, #328]	; (8002c7c <vKeyScan+0x570>)
 8002b34:	735a      	strb	r2, [r3, #13]
			}


			Key.Speed_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002b36:	4b51      	ldr	r3, [pc, #324]	; (8002c7c <vKeyScan+0x570>)
 8002b38:	7bdb      	ldrb	r3, [r3, #15]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <vKeyScan+0x570>)
 8002b40:	73da      	strb	r2, [r3, #15]
			if (Key.Speed_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002b42:	4b4e      	ldr	r3, [pc, #312]	; (8002c7c <vKeyScan+0x570>)
 8002b44:	7bdb      	ldrb	r3, [r3, #15]
 8002b46:	2b32      	cmp	r3, #50	; 0x32
 8002b48:	d916      	bls.n	8002b78 <vKeyScan+0x46c>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Speed_R;
 8002b4a:	2310      	movs	r3, #16
 8002b4c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002b4e:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <vKeyScan+0x578>)
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	f107 010f 	add.w	r1, r7, #15
 8002b56:	2300      	movs	r3, #0
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f004 fac3 	bl	80070e4 <xQueueGenericSend>

				Key.Speed_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <vKeyScan+0x570>)
 8002b60:	2206      	movs	r2, #6
 8002b62:	735a      	strb	r2, [r3, #13]
				Key.Speed_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002b64:	4b45      	ldr	r3, [pc, #276]	; (8002c7c <vKeyScan+0x570>)
 8002b66:	2225      	movs	r2, #37	; 0x25
 8002b68:	73da      	strb	r2, [r3, #15]
 8002b6a:	e005      	b.n	8002b78 <vKeyScan+0x46c>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Speed_ShortPress_R = 0;
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <vKeyScan+0x570>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	735a      	strb	r2, [r3, #13]
			Key.Speed_LongPress_R = 0;
 8002b72:	4b42      	ldr	r3, [pc, #264]	; (8002c7c <vKeyScan+0x570>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	73da      	strb	r2, [r3, #15]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 1) // ЗАДЕРЖКА (Delay_f): [1], "-" - 1, "+" - 4, , STLED №5;
 8002b78:	4b41      	ldr	r3, [pc, #260]	; (8002c80 <vKeyScan+0x574>)
 8002b7a:	7f9b      	ldrb	r3, [r3, #30]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d139      	bne.n	8002bf4 <vKeyScan+0x4e8>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_f_ShortPress_L > CNT_KEY_SHORT && Key.Delay_f_ShortPress_L != CNT_KEY_SHORT + 2)
 8002b80:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <vKeyScan+0x570>)
 8002b82:	7c1b      	ldrb	r3, [r3, #16]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d910      	bls.n	8002baa <vKeyScan+0x49e>
 8002b88:	4b3c      	ldr	r3, [pc, #240]	; (8002c7c <vKeyScan+0x570>)
 8002b8a:	7c1b      	ldrb	r3, [r3, #16]
 8002b8c:	2b06      	cmp	r3, #6
 8002b8e:	d00c      	beq.n	8002baa <vKeyScan+0x49e>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_f_L;
 8002b90:	2311      	movs	r3, #17
 8002b92:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002b94:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <vKeyScan+0x578>)
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	f107 010f 	add.w	r1, r7, #15
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f004 faa0 	bl	80070e4 <xQueueGenericSend>

				Key.Delay_f_ShortPress_L = 0; // Сброс счетика выдержки
 8002ba4:	4b35      	ldr	r3, [pc, #212]	; (8002c7c <vKeyScan+0x570>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	741a      	strb	r2, [r3, #16]
			}

			if (Key.Delay_f_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002baa:	4b34      	ldr	r3, [pc, #208]	; (8002c7c <vKeyScan+0x570>)
 8002bac:	7c1b      	ldrb	r3, [r3, #16]
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d005      	beq.n	8002bbe <vKeyScan+0x4b2>
			{
				Key.Delay_f_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002bb2:	4b32      	ldr	r3, [pc, #200]	; (8002c7c <vKeyScan+0x570>)
 8002bb4:	7c1b      	ldrb	r3, [r3, #16]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <vKeyScan+0x570>)
 8002bbc:	741a      	strb	r2, [r3, #16]
			}


			Key.Delay_f_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002bbe:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <vKeyScan+0x570>)
 8002bc0:	7c9b      	ldrb	r3, [r3, #18]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <vKeyScan+0x570>)
 8002bc8:	749a      	strb	r2, [r3, #18]
			if (Key.Delay_f_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002bca:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <vKeyScan+0x570>)
 8002bcc:	7c9b      	ldrb	r3, [r3, #18]
 8002bce:	2b32      	cmp	r3, #50	; 0x32
 8002bd0:	d916      	bls.n	8002c00 <vKeyScan+0x4f4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_f_L;
 8002bd2:	2312      	movs	r3, #18
 8002bd4:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <vKeyScan+0x578>)
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	f107 010f 	add.w	r1, r7, #15
 8002bde:	2300      	movs	r3, #0
 8002be0:	2200      	movs	r2, #0
 8002be2:	f004 fa7f 	bl	80070e4 <xQueueGenericSend>


				Key.Delay_f_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002be6:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <vKeyScan+0x570>)
 8002be8:	2206      	movs	r2, #6
 8002bea:	741a      	strb	r2, [r3, #16]
				Key.Delay_f_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002bec:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <vKeyScan+0x570>)
 8002bee:	2225      	movs	r2, #37	; 0x25
 8002bf0:	749a      	strb	r2, [r3, #18]
 8002bf2:	e005      	b.n	8002c00 <vKeyScan+0x4f4>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_f_ShortPress_L = 0;
 8002bf4:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <vKeyScan+0x570>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	741a      	strb	r2, [r3, #16]
			Key.Delay_f_LongPress_L = 0;
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <vKeyScan+0x570>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	749a      	strb	r2, [r3, #18]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 4)
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <vKeyScan+0x574>)
 8002c02:	7f9b      	ldrb	r3, [r3, #30]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d13f      	bne.n	8002c88 <vKeyScan+0x57c>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Delay_f_ShortPress_R > CNT_KEY_SHORT && Key.Delay_f_ShortPress_R != CNT_KEY_SHORT + 2)
 8002c08:	4b1c      	ldr	r3, [pc, #112]	; (8002c7c <vKeyScan+0x570>)
 8002c0a:	7c5b      	ldrb	r3, [r3, #17]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d910      	bls.n	8002c32 <vKeyScan+0x526>
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <vKeyScan+0x570>)
 8002c12:	7c5b      	ldrb	r3, [r3, #17]
 8002c14:	2b06      	cmp	r3, #6
 8002c16:	d00c      	beq.n	8002c32 <vKeyScan+0x526>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Delay_f_R;
 8002c18:	2313      	movs	r3, #19
 8002c1a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <vKeyScan+0x578>)
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	f107 010f 	add.w	r1, r7, #15
 8002c24:	2300      	movs	r3, #0
 8002c26:	2200      	movs	r2, #0
 8002c28:	f004 fa5c 	bl	80070e4 <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = 0; // Сброс счетика выдержки
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <vKeyScan+0x570>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	745a      	strb	r2, [r3, #17]
			}

			if (Key.Delay_f_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <vKeyScan+0x570>)
 8002c34:	7c5b      	ldrb	r3, [r3, #17]
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d005      	beq.n	8002c46 <vKeyScan+0x53a>
			{
				Key.Delay_f_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <vKeyScan+0x570>)
 8002c3c:	7c5b      	ldrb	r3, [r3, #17]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <vKeyScan+0x570>)
 8002c44:	745a      	strb	r2, [r3, #17]
			}


			Key.Delay_f_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <vKeyScan+0x570>)
 8002c48:	7cdb      	ldrb	r3, [r3, #19]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <vKeyScan+0x570>)
 8002c50:	74da      	strb	r2, [r3, #19]
			if (Key.Delay_f_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <vKeyScan+0x570>)
 8002c54:	7cdb      	ldrb	r3, [r3, #19]
 8002c56:	2b32      	cmp	r3, #50	; 0x32
 8002c58:	d91c      	bls.n	8002c94 <vKeyScan+0x588>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Delay_f_R;
 8002c5a:	2314      	movs	r3, #20
 8002c5c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <vKeyScan+0x578>)
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	f107 010f 	add.w	r1, r7, #15
 8002c66:	2300      	movs	r3, #0
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f004 fa3b 	bl	80070e4 <xQueueGenericSend>

				Key.Delay_f_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002c6e:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <vKeyScan+0x570>)
 8002c70:	2206      	movs	r2, #6
 8002c72:	745a      	strb	r2, [r3, #17]
				Key.Delay_f_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002c74:	4b01      	ldr	r3, [pc, #4]	; (8002c7c <vKeyScan+0x570>)
 8002c76:	2225      	movs	r2, #37	; 0x25
 8002c78:	74da      	strb	r2, [r3, #19]
 8002c7a:	e00b      	b.n	8002c94 <vKeyScan+0x588>
 8002c7c:	20003da0 	.word	0x20003da0
 8002c80:	2000353c 	.word	0x2000353c
 8002c84:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Delay_f_ShortPress_R = 0;
 8002c88:	4b90      	ldr	r3, [pc, #576]	; (8002ecc <vKeyScan+0x7c0>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	745a      	strb	r2, [r3, #17]
			Key.Delay_f_LongPress_R = 0;
 8002c8e:	4b8f      	ldr	r3, [pc, #572]	; (8002ecc <vKeyScan+0x7c0>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	74da      	strb	r2, [r3, #19]
		}

		if (WelderUnit.IndicatorPanel.KeyState[3] == 1 && !(WelderUnit.IndicatorPanel.KeyState[1] == 2)) // ВЛЕВО: [0], "-" - 128, "+" - 64, , STLED №5; ПРОГРАММА: [1], "-" - ..., "+" - 2, , STLED №5;
 8002c94:	4b8e      	ldr	r3, [pc, #568]	; (8002ed0 <vKeyScan+0x7c4>)
 8002c96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d133      	bne.n	8002d06 <vKeyScan+0x5fa>
 8002c9e:	4b8c      	ldr	r3, [pc, #560]	; (8002ed0 <vKeyScan+0x7c4>)
 8002ca0:	7f9b      	ldrb	r3, [r3, #30]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d02f      	beq.n	8002d06 <vKeyScan+0x5fa>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_L > CNT_KEY_SHORT && Key.Program_ShortPress_L != CNT_KEY_SHORT + 2)
 8002ca6:	4b89      	ldr	r3, [pc, #548]	; (8002ecc <vKeyScan+0x7c0>)
 8002ca8:	7d1b      	ldrb	r3, [r3, #20]
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d906      	bls.n	8002cbc <vKeyScan+0x5b0>
 8002cae:	4b87      	ldr	r3, [pc, #540]	; (8002ecc <vKeyScan+0x7c0>)
 8002cb0:	7d1b      	ldrb	r3, [r3, #20]
 8002cb2:	2b06      	cmp	r3, #6
 8002cb4:	d002      	beq.n	8002cbc <vKeyScan+0x5b0>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_Program_L;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_L = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 8002cb6:	4b85      	ldr	r3, [pc, #532]	; (8002ecc <vKeyScan+0x7c0>)
 8002cb8:	2207      	movs	r2, #7
 8002cba:	751a      	strb	r2, [r3, #20]
			}

			if (Key.Program_ShortPress_L != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002cbc:	4b83      	ldr	r3, [pc, #524]	; (8002ecc <vKeyScan+0x7c0>)
 8002cbe:	7d1b      	ldrb	r3, [r3, #20]
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d005      	beq.n	8002cd0 <vKeyScan+0x5c4>
			{
				Key.Program_ShortPress_L++; // Счетчик для определения короткого нажатия на кнопку
 8002cc4:	4b81      	ldr	r3, [pc, #516]	; (8002ecc <vKeyScan+0x7c0>)
 8002cc6:	7d1b      	ldrb	r3, [r3, #20]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	4b7f      	ldr	r3, [pc, #508]	; (8002ecc <vKeyScan+0x7c0>)
 8002cce:	751a      	strb	r2, [r3, #20]
			}


			Key.Program_LongPress_L++; // Счетчик для определения длинного нажатия на кнопку
 8002cd0:	4b7e      	ldr	r3, [pc, #504]	; (8002ecc <vKeyScan+0x7c0>)
 8002cd2:	7d9b      	ldrb	r3, [r3, #22]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	4b7c      	ldr	r3, [pc, #496]	; (8002ecc <vKeyScan+0x7c0>)
 8002cda:	759a      	strb	r2, [r3, #22]
			if (Key.Program_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002cdc:	4b7b      	ldr	r3, [pc, #492]	; (8002ecc <vKeyScan+0x7c0>)
 8002cde:	7d9b      	ldrb	r3, [r3, #22]
 8002ce0:	2b32      	cmp	r3, #50	; 0x32
 8002ce2:	d924      	bls.n	8002d2e <vKeyScan+0x622>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Program_L;
 8002ce4:	2316      	movs	r3, #22
 8002ce6:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002ce8:	4b7a      	ldr	r3, [pc, #488]	; (8002ed4 <vKeyScan+0x7c8>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	f107 010f 	add.w	r1, r7, #15
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f004 f9f6 	bl	80070e4 <xQueueGenericSend>

				Key.Program_ShortPress_L = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002cf8:	4b74      	ldr	r3, [pc, #464]	; (8002ecc <vKeyScan+0x7c0>)
 8002cfa:	2206      	movs	r2, #6
 8002cfc:	751a      	strb	r2, [r3, #20]
				Key.Program_LongPress_L = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002cfe:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <vKeyScan+0x7c0>)
 8002d00:	2225      	movs	r2, #37	; 0x25
 8002d02:	759a      	strb	r2, [r3, #22]
			if (Key.Program_LongPress_L > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002d04:	e013      	b.n	8002d2e <vKeyScan+0x622>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_L >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 8002d06:	4b71      	ldr	r3, [pc, #452]	; (8002ecc <vKeyScan+0x7c0>)
 8002d08:	7d1b      	ldrb	r3, [r3, #20]
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d909      	bls.n	8002d22 <vKeyScan+0x616>
			{
				nKeyPressed = press_short_Program_L;
 8002d0e:	2315      	movs	r3, #21
 8002d10:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002d12:	4b70      	ldr	r3, [pc, #448]	; (8002ed4 <vKeyScan+0x7c8>)
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	f107 010f 	add.w	r1, r7, #15
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f004 f9e1 	bl	80070e4 <xQueueGenericSend>
			}

			Key.Program_ShortPress_L = 0;
 8002d22:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <vKeyScan+0x7c0>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	751a      	strb	r2, [r3, #20]
			Key.Program_LongPress_L = 0;
 8002d28:	4b68      	ldr	r3, [pc, #416]	; (8002ecc <vKeyScan+0x7c0>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	759a      	strb	r2, [r3, #22]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 2 && !(WelderUnit.IndicatorPanel.KeyState[3] == 1))
 8002d2e:	4b68      	ldr	r3, [pc, #416]	; (8002ed0 <vKeyScan+0x7c4>)
 8002d30:	7f9b      	ldrb	r3, [r3, #30]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d134      	bne.n	8002da0 <vKeyScan+0x694>
 8002d36:	4b66      	ldr	r3, [pc, #408]	; (8002ed0 <vKeyScan+0x7c4>)
 8002d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d02f      	beq.n	8002da0 <vKeyScan+0x694>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_R > CNT_KEY_SHORT && Key.Program_ShortPress_R != CNT_KEY_SHORT + 2)
 8002d40:	4b62      	ldr	r3, [pc, #392]	; (8002ecc <vKeyScan+0x7c0>)
 8002d42:	7d5b      	ldrb	r3, [r3, #21]
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d906      	bls.n	8002d56 <vKeyScan+0x64a>
 8002d48:	4b60      	ldr	r3, [pc, #384]	; (8002ecc <vKeyScan+0x7c0>)
 8002d4a:	7d5b      	ldrb	r3, [r3, #21]
 8002d4c:	2b06      	cmp	r3, #6
 8002d4e:	d002      	beq.n	8002d56 <vKeyScan+0x64a>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_Program_R;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_R = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 8002d50:	4b5e      	ldr	r3, [pc, #376]	; (8002ecc <vKeyScan+0x7c0>)
 8002d52:	2207      	movs	r2, #7
 8002d54:	755a      	strb	r2, [r3, #21]
			}

			if (Key.Program_ShortPress_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002d56:	4b5d      	ldr	r3, [pc, #372]	; (8002ecc <vKeyScan+0x7c0>)
 8002d58:	7d5b      	ldrb	r3, [r3, #21]
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d005      	beq.n	8002d6a <vKeyScan+0x65e>
			{
				Key.Program_ShortPress_R++; // Счетчик для определения короткого нажатия на кнопку
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ecc <vKeyScan+0x7c0>)
 8002d60:	7d5b      	ldrb	r3, [r3, #21]
 8002d62:	3301      	adds	r3, #1
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <vKeyScan+0x7c0>)
 8002d68:	755a      	strb	r2, [r3, #21]
			}


			Key.Program_LongPress_R++; // Счетчик для определения длинного нажатия на кнопку
 8002d6a:	4b58      	ldr	r3, [pc, #352]	; (8002ecc <vKeyScan+0x7c0>)
 8002d6c:	7ddb      	ldrb	r3, [r3, #23]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b56      	ldr	r3, [pc, #344]	; (8002ecc <vKeyScan+0x7c0>)
 8002d74:	75da      	strb	r2, [r3, #23]
			if (Key.Program_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002d76:	4b55      	ldr	r3, [pc, #340]	; (8002ecc <vKeyScan+0x7c0>)
 8002d78:	7ddb      	ldrb	r3, [r3, #23]
 8002d7a:	2b32      	cmp	r3, #50	; 0x32
 8002d7c:	d924      	bls.n	8002dc8 <vKeyScan+0x6bc>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Program_R;
 8002d7e:	2318      	movs	r3, #24
 8002d80:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002d82:	4b54      	ldr	r3, [pc, #336]	; (8002ed4 <vKeyScan+0x7c8>)
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	f107 010f 	add.w	r1, r7, #15
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f004 f9a9 	bl	80070e4 <xQueueGenericSend>

				Key.Program_ShortPress_R = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002d92:	4b4e      	ldr	r3, [pc, #312]	; (8002ecc <vKeyScan+0x7c0>)
 8002d94:	2206      	movs	r2, #6
 8002d96:	755a      	strb	r2, [r3, #21]
				Key.Program_LongPress_R = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002d98:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <vKeyScan+0x7c0>)
 8002d9a:	2225      	movs	r2, #37	; 0x25
 8002d9c:	75da      	strb	r2, [r3, #23]
			if (Key.Program_LongPress_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002d9e:	e013      	b.n	8002dc8 <vKeyScan+0x6bc>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_R >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 8002da0:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <vKeyScan+0x7c0>)
 8002da2:	7d5b      	ldrb	r3, [r3, #21]
 8002da4:	2b06      	cmp	r3, #6
 8002da6:	d909      	bls.n	8002dbc <vKeyScan+0x6b0>
			{
				nKeyPressed = press_short_Program_R;
 8002da8:	2317      	movs	r3, #23
 8002daa:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002dac:	4b49      	ldr	r3, [pc, #292]	; (8002ed4 <vKeyScan+0x7c8>)
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	f107 010f 	add.w	r1, r7, #15
 8002db4:	2300      	movs	r3, #0
 8002db6:	2200      	movs	r2, #0
 8002db8:	f004 f994 	bl	80070e4 <xQueueGenericSend>
			}

			Key.Program_ShortPress_R = 0;
 8002dbc:	4b43      	ldr	r3, [pc, #268]	; (8002ecc <vKeyScan+0x7c0>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	755a      	strb	r2, [r3, #21]
			Key.Program_LongPress_R = 0;
 8002dc2:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <vKeyScan+0x7c0>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	75da      	strb	r2, [r3, #23]
		}



		if (WelderUnit.IndicatorPanel.KeyState[1] == 128) //ВВЕРХ, ВНИЗ: [1], "-" - 128, "+" - 64, , STLED №5;
 8002dc8:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <vKeyScan+0x7c4>)
 8002dca:	7f9b      	ldrb	r3, [r3, #30]
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d139      	bne.n	8002e44 <vKeyScan+0x738>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Up_ShortPress > CNT_KEY_SHORT && Key.Up_ShortPress != CNT_KEY_SHORT + 2)
 8002dd0:	4b3e      	ldr	r3, [pc, #248]	; (8002ecc <vKeyScan+0x7c0>)
 8002dd2:	7e9b      	ldrb	r3, [r3, #26]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d910      	bls.n	8002dfa <vKeyScan+0x6ee>
 8002dd8:	4b3c      	ldr	r3, [pc, #240]	; (8002ecc <vKeyScan+0x7c0>)
 8002dda:	7e9b      	ldrb	r3, [r3, #26]
 8002ddc:	2b06      	cmp	r3, #6
 8002dde:	d00c      	beq.n	8002dfa <vKeyScan+0x6ee>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Up;
 8002de0:	2323      	movs	r3, #35	; 0x23
 8002de2:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002de4:	4b3b      	ldr	r3, [pc, #236]	; (8002ed4 <vKeyScan+0x7c8>)
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	f107 010f 	add.w	r1, r7, #15
 8002dec:	2300      	movs	r3, #0
 8002dee:	2200      	movs	r2, #0
 8002df0:	f004 f978 	bl	80070e4 <xQueueGenericSend>

				Key.Up_ShortPress = 0; // Сброс счетика выдержки
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <vKeyScan+0x7c0>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	769a      	strb	r2, [r3, #26]
			}

			if (Key.Up_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002dfa:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <vKeyScan+0x7c0>)
 8002dfc:	7e9b      	ldrb	r3, [r3, #26]
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d005      	beq.n	8002e0e <vKeyScan+0x702>
			{
				Key.Up_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002e02:	4b32      	ldr	r3, [pc, #200]	; (8002ecc <vKeyScan+0x7c0>)
 8002e04:	7e9b      	ldrb	r3, [r3, #26]
 8002e06:	3301      	adds	r3, #1
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <vKeyScan+0x7c0>)
 8002e0c:	769a      	strb	r2, [r3, #26]
			}


			Key.Up_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002e0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <vKeyScan+0x7c0>)
 8002e10:	7edb      	ldrb	r3, [r3, #27]
 8002e12:	3301      	adds	r3, #1
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <vKeyScan+0x7c0>)
 8002e18:	76da      	strb	r2, [r3, #27]
			if (Key.Up_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <vKeyScan+0x7c0>)
 8002e1c:	7edb      	ldrb	r3, [r3, #27]
 8002e1e:	2b32      	cmp	r3, #50	; 0x32
 8002e20:	d916      	bls.n	8002e50 <vKeyScan+0x744>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Up;
 8002e22:	2324      	movs	r3, #36	; 0x24
 8002e24:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002e26:	4b2b      	ldr	r3, [pc, #172]	; (8002ed4 <vKeyScan+0x7c8>)
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	f107 010f 	add.w	r1, r7, #15
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2200      	movs	r2, #0
 8002e32:	f004 f957 	bl	80070e4 <xQueueGenericSend>


				Key.Up_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002e36:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <vKeyScan+0x7c0>)
 8002e38:	2206      	movs	r2, #6
 8002e3a:	769a      	strb	r2, [r3, #26]
				Key.Up_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002e3c:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <vKeyScan+0x7c0>)
 8002e3e:	2225      	movs	r2, #37	; 0x25
 8002e40:	76da      	strb	r2, [r3, #27]
 8002e42:	e005      	b.n	8002e50 <vKeyScan+0x744>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Up_ShortPress = 0;
 8002e44:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <vKeyScan+0x7c0>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	769a      	strb	r2, [r3, #26]
			Key.Up_LongPress = 0;
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <vKeyScan+0x7c0>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	76da      	strb	r2, [r3, #27]
		}
		if (WelderUnit.IndicatorPanel.KeyState[1] == 64)
 8002e50:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <vKeyScan+0x7c4>)
 8002e52:	7f9b      	ldrb	r3, [r3, #30]
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d13f      	bne.n	8002ed8 <vKeyScan+0x7cc>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Down_ShortPress > CNT_KEY_SHORT && Key.Down_ShortPress != CNT_KEY_SHORT + 2)
 8002e58:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <vKeyScan+0x7c0>)
 8002e5a:	7f1b      	ldrb	r3, [r3, #28]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d910      	bls.n	8002e82 <vKeyScan+0x776>
 8002e60:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <vKeyScan+0x7c0>)
 8002e62:	7f1b      	ldrb	r3, [r3, #28]
 8002e64:	2b06      	cmp	r3, #6
 8002e66:	d00c      	beq.n	8002e82 <vKeyScan+0x776>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Down;
 8002e68:	2321      	movs	r3, #33	; 0x21
 8002e6a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <vKeyScan+0x7c8>)
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	f107 010f 	add.w	r1, r7, #15
 8002e74:	2300      	movs	r3, #0
 8002e76:	2200      	movs	r2, #0
 8002e78:	f004 f934 	bl	80070e4 <xQueueGenericSend>

				Key.Down_ShortPress = 0; // Сброс счетика выдержки
 8002e7c:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <vKeyScan+0x7c0>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	771a      	strb	r2, [r3, #28]
			}

			if (Key.Down_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <vKeyScan+0x7c0>)
 8002e84:	7f1b      	ldrb	r3, [r3, #28]
 8002e86:	2b06      	cmp	r3, #6
 8002e88:	d005      	beq.n	8002e96 <vKeyScan+0x78a>
			{
				Key.Down_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <vKeyScan+0x7c0>)
 8002e8c:	7f1b      	ldrb	r3, [r3, #28]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <vKeyScan+0x7c0>)
 8002e94:	771a      	strb	r2, [r3, #28]
			}


			Key.Down_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <vKeyScan+0x7c0>)
 8002e98:	7f5b      	ldrb	r3, [r3, #29]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <vKeyScan+0x7c0>)
 8002ea0:	775a      	strb	r2, [r3, #29]
			if (Key.Down_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <vKeyScan+0x7c0>)
 8002ea4:	7f5b      	ldrb	r3, [r3, #29]
 8002ea6:	2b32      	cmp	r3, #50	; 0x32
 8002ea8:	d91c      	bls.n	8002ee4 <vKeyScan+0x7d8>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Down;
 8002eaa:	2322      	movs	r3, #34	; 0x22
 8002eac:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <vKeyScan+0x7c8>)
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	f107 010f 	add.w	r1, r7, #15
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f004 f913 	bl	80070e4 <xQueueGenericSend>


				Key.Down_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002ebe:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <vKeyScan+0x7c0>)
 8002ec0:	2206      	movs	r2, #6
 8002ec2:	771a      	strb	r2, [r3, #28]
				Key.Down_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002ec4:	4b01      	ldr	r3, [pc, #4]	; (8002ecc <vKeyScan+0x7c0>)
 8002ec6:	2225      	movs	r2, #37	; 0x25
 8002ec8:	775a      	strb	r2, [r3, #29]
 8002eca:	e00b      	b.n	8002ee4 <vKeyScan+0x7d8>
 8002ecc:	20003da0 	.word	0x20003da0
 8002ed0:	2000353c 	.word	0x2000353c
 8002ed4:	20003d90 	.word	0x20003d90


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Down_ShortPress = 0;
 8002ed8:	4b94      	ldr	r3, [pc, #592]	; (800312c <vKeyScan+0xa20>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	771a      	strb	r2, [r3, #28]
			Key.Down_LongPress = 0;
 8002ede:	4b93      	ldr	r3, [pc, #588]	; (800312c <vKeyScan+0xa20>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	775a      	strb	r2, [r3, #29]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 32) // ПАРКОВКА, АВТО: [1], "-" - 32, "+" - 16, , STLED №5;
 8002ee4:	4b92      	ldr	r3, [pc, #584]	; (8003130 <vKeyScan+0xa24>)
 8002ee6:	7f9b      	ldrb	r3, [r3, #30]
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d139      	bne.n	8002f60 <vKeyScan+0x854>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Parking_ShortPress > CNT_KEY_SHORT && Key.Parking_ShortPress != CNT_KEY_SHORT + 2)
 8002eec:	4b8f      	ldr	r3, [pc, #572]	; (800312c <vKeyScan+0xa20>)
 8002eee:	7f9b      	ldrb	r3, [r3, #30]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d910      	bls.n	8002f16 <vKeyScan+0x80a>
 8002ef4:	4b8d      	ldr	r3, [pc, #564]	; (800312c <vKeyScan+0xa20>)
 8002ef6:	7f9b      	ldrb	r3, [r3, #30]
 8002ef8:	2b06      	cmp	r3, #6
 8002efa:	d00c      	beq.n	8002f16 <vKeyScan+0x80a>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Parking;
 8002efc:	2319      	movs	r3, #25
 8002efe:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002f00:	4b8c      	ldr	r3, [pc, #560]	; (8003134 <vKeyScan+0xa28>)
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	f107 010f 	add.w	r1, r7, #15
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f004 f8ea 	bl	80070e4 <xQueueGenericSend>


				Key.Parking_ShortPress = 0; // Сброс счетика выдержки
 8002f10:	4b86      	ldr	r3, [pc, #536]	; (800312c <vKeyScan+0xa20>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	779a      	strb	r2, [r3, #30]
			}

			if (Key.Parking_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002f16:	4b85      	ldr	r3, [pc, #532]	; (800312c <vKeyScan+0xa20>)
 8002f18:	7f9b      	ldrb	r3, [r3, #30]
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d005      	beq.n	8002f2a <vKeyScan+0x81e>
			{
				Key.Parking_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002f1e:	4b83      	ldr	r3, [pc, #524]	; (800312c <vKeyScan+0xa20>)
 8002f20:	7f9b      	ldrb	r3, [r3, #30]
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4b81      	ldr	r3, [pc, #516]	; (800312c <vKeyScan+0xa20>)
 8002f28:	779a      	strb	r2, [r3, #30]
			}


			Key.Parking_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002f2a:	4b80      	ldr	r3, [pc, #512]	; (800312c <vKeyScan+0xa20>)
 8002f2c:	7fdb      	ldrb	r3, [r3, #31]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4b7e      	ldr	r3, [pc, #504]	; (800312c <vKeyScan+0xa20>)
 8002f34:	77da      	strb	r2, [r3, #31]
			if (Key.Parking_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002f36:	4b7d      	ldr	r3, [pc, #500]	; (800312c <vKeyScan+0xa20>)
 8002f38:	7fdb      	ldrb	r3, [r3, #31]
 8002f3a:	2b32      	cmp	r3, #50	; 0x32
 8002f3c:	d916      	bls.n	8002f6c <vKeyScan+0x860>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Parking;
 8002f3e:	231a      	movs	r3, #26
 8002f40:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002f42:	4b7c      	ldr	r3, [pc, #496]	; (8003134 <vKeyScan+0xa28>)
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	f107 010f 	add.w	r1, r7, #15
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f004 f8c9 	bl	80070e4 <xQueueGenericSend>

				Key.Parking_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002f52:	4b76      	ldr	r3, [pc, #472]	; (800312c <vKeyScan+0xa20>)
 8002f54:	2206      	movs	r2, #6
 8002f56:	779a      	strb	r2, [r3, #30]
				Key.Parking_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002f58:	4b74      	ldr	r3, [pc, #464]	; (800312c <vKeyScan+0xa20>)
 8002f5a:	2225      	movs	r2, #37	; 0x25
 8002f5c:	77da      	strb	r2, [r3, #31]
 8002f5e:	e005      	b.n	8002f6c <vKeyScan+0x860>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Parking_ShortPress = 0;
 8002f60:	4b72      	ldr	r3, [pc, #456]	; (800312c <vKeyScan+0xa20>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	779a      	strb	r2, [r3, #30]
			Key.Parking_LongPress = 0;
 8002f66:	4b71      	ldr	r3, [pc, #452]	; (800312c <vKeyScan+0xa20>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	77da      	strb	r2, [r3, #31]
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 16)
 8002f6c:	4b70      	ldr	r3, [pc, #448]	; (8003130 <vKeyScan+0xa24>)
 8002f6e:	7f9b      	ldrb	r3, [r3, #30]
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d144      	bne.n	8002ffe <vKeyScan+0x8f2>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Auto_ShortPress > CNT_KEY_SHORT && Key.Auto_ShortPress != CNT_KEY_SHORT + 2)
 8002f74:	4b6d      	ldr	r3, [pc, #436]	; (800312c <vKeyScan+0xa20>)
 8002f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d912      	bls.n	8002fa4 <vKeyScan+0x898>
 8002f7e:	4b6b      	ldr	r3, [pc, #428]	; (800312c <vKeyScan+0xa20>)
 8002f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f84:	2b06      	cmp	r3, #6
 8002f86:	d00d      	beq.n	8002fa4 <vKeyScan+0x898>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_Auto;
 8002f88:	231b      	movs	r3, #27
 8002f8a:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002f8c:	4b69      	ldr	r3, [pc, #420]	; (8003134 <vKeyScan+0xa28>)
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	f107 010f 	add.w	r1, r7, #15
 8002f94:	2300      	movs	r3, #0
 8002f96:	2200      	movs	r2, #0
 8002f98:	f004 f8a4 	bl	80070e4 <xQueueGenericSend>

				Key.Auto_ShortPress = 0; // Сброс счетика выдержки
 8002f9c:	4b63      	ldr	r3, [pc, #396]	; (800312c <vKeyScan+0xa20>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2020 	strb.w	r2, [r3, #32]
			}

			if (Key.Auto_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8002fa4:	4b61      	ldr	r3, [pc, #388]	; (800312c <vKeyScan+0xa20>)
 8002fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d007      	beq.n	8002fbe <vKeyScan+0x8b2>
			{
				Key.Auto_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8002fae:	4b5f      	ldr	r3, [pc, #380]	; (800312c <vKeyScan+0xa20>)
 8002fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	4b5c      	ldr	r3, [pc, #368]	; (800312c <vKeyScan+0xa20>)
 8002fba:	f883 2020 	strb.w	r2, [r3, #32]
			}


			Key.Auto_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8002fbe:	4b5b      	ldr	r3, [pc, #364]	; (800312c <vKeyScan+0xa20>)
 8002fc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4b58      	ldr	r3, [pc, #352]	; (800312c <vKeyScan+0xa20>)
 8002fca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			if (Key.Auto_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8002fce:	4b57      	ldr	r3, [pc, #348]	; (800312c <vKeyScan+0xa20>)
 8002fd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fd4:	2b32      	cmp	r3, #50	; 0x32
 8002fd6:	d91a      	bls.n	800300e <vKeyScan+0x902>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_Auto;
 8002fd8:	231c      	movs	r3, #28
 8002fda:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8002fdc:	4b55      	ldr	r3, [pc, #340]	; (8003134 <vKeyScan+0xa28>)
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	f107 010f 	add.w	r1, r7, #15
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f004 f87c 	bl	80070e4 <xQueueGenericSend>

				Key.Auto_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 8002fec:	4b4f      	ldr	r3, [pc, #316]	; (800312c <vKeyScan+0xa20>)
 8002fee:	2206      	movs	r2, #6
 8002ff0:	f883 2020 	strb.w	r2, [r3, #32]
				Key.Auto_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8002ff4:	4b4d      	ldr	r3, [pc, #308]	; (800312c <vKeyScan+0xa20>)
 8002ff6:	2225      	movs	r2, #37	; 0x25
 8002ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002ffc:	e007      	b.n	800300e <vKeyScan+0x902>


		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.Auto_ShortPress = 0;
 8002ffe:	4b4b      	ldr	r3, [pc, #300]	; (800312c <vKeyScan+0xa20>)
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2020 	strb.w	r2, [r3, #32]
			Key.Auto_LongPress = 0;
 8003006:	4b49      	ldr	r3, [pc, #292]	; (800312c <vKeyScan+0xa20>)
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		}

		if (WelderUnit.IndicatorPanel.KeyState[1] == 8)
 800300e:	4b48      	ldr	r3, [pc, #288]	; (8003130 <vKeyScan+0xa24>)
 8003010:	7f9b      	ldrb	r3, [r3, #30]
 8003012:	2b08      	cmp	r3, #8
 8003014:	d144      	bne.n	80030a0 <vKeyScan+0x994>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.StartStop_ShortPress > CNT_KEY_SHORT && Key.StartStop_ShortPress != CNT_KEY_SHORT + 2)
 8003016:	4b45      	ldr	r3, [pc, #276]	; (800312c <vKeyScan+0xa20>)
 8003018:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800301c:	2b04      	cmp	r3, #4
 800301e:	d912      	bls.n	8003046 <vKeyScan+0x93a>
 8003020:	4b42      	ldr	r3, [pc, #264]	; (800312c <vKeyScan+0xa20>)
 8003022:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003026:	2b06      	cmp	r3, #6
 8003028:	d00d      	beq.n	8003046 <vKeyScan+0x93a>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_short_StartStop;
 800302a:	231d      	movs	r3, #29
 800302c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800302e:	4b41      	ldr	r3, [pc, #260]	; (8003134 <vKeyScan+0xa28>)
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	f107 010f 	add.w	r1, r7, #15
 8003036:	2300      	movs	r3, #0
 8003038:	2200      	movs	r2, #0
 800303a:	f004 f853 	bl	80070e4 <xQueueGenericSend>

				Key.StartStop_ShortPress = 0; // Сброс счетика выдержки
 800303e:	4b3b      	ldr	r3, [pc, #236]	; (800312c <vKeyScan+0xa20>)
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}

			if (Key.StartStop_ShortPress != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 8003046:	4b39      	ldr	r3, [pc, #228]	; (800312c <vKeyScan+0xa20>)
 8003048:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800304c:	2b06      	cmp	r3, #6
 800304e:	d007      	beq.n	8003060 <vKeyScan+0x954>
			{
				Key.StartStop_ShortPress++; // Счетчик для определения короткого нажатия на кнопку
 8003050:	4b36      	ldr	r3, [pc, #216]	; (800312c <vKeyScan+0xa20>)
 8003052:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003056:	3301      	adds	r3, #1
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4b34      	ldr	r3, [pc, #208]	; (800312c <vKeyScan+0xa20>)
 800305c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			}


			Key.StartStop_LongPress++; // Счетчик для определения длинного нажатия на кнопку
 8003060:	4b32      	ldr	r3, [pc, #200]	; (800312c <vKeyScan+0xa20>)
 8003062:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003066:	3301      	adds	r3, #1
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4b30      	ldr	r3, [pc, #192]	; (800312c <vKeyScan+0xa20>)
 800306c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			if (Key.StartStop_LongPress > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 8003070:	4b2e      	ldr	r3, [pc, #184]	; (800312c <vKeyScan+0xa20>)
 8003072:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003076:	2b32      	cmp	r3, #50	; 0x32
 8003078:	d91a      	bls.n	80030b0 <vKeyScan+0x9a4>
			{
				// Дейсвие при нажатии на клавишу
				nKeyPressed = press_long_StartStop;
 800307a:	231e      	movs	r3, #30
 800307c:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <vKeyScan+0xa28>)
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	f107 010f 	add.w	r1, r7, #15
 8003086:	2300      	movs	r3, #0
 8003088:	2200      	movs	r2, #0
 800308a:	f004 f82b 	bl	80070e4 <xQueueGenericSend>

				Key.StartStop_ShortPress = CNT_KEY_SHORT + 2; // Для запрета работы коротких нажатий
 800308e:	4b27      	ldr	r3, [pc, #156]	; (800312c <vKeyScan+0xa20>)
 8003090:	2206      	movs	r2, #6
 8003092:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				Key.StartStop_LongPress = CNT_LONG_PRESS; // Сброс счета для определения длинного нажатия. Не 0 что бы дейсвия выполнялось быстрее
 8003096:	4b25      	ldr	r3, [pc, #148]	; (800312c <vKeyScan+0xa20>)
 8003098:	2225      	movs	r2, #37	; 0x25
 800309a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 800309e:	e007      	b.n	80030b0 <vKeyScan+0x9a4>
			}

		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			Key.StartStop_ShortPress = 0;
 80030a0:	4b22      	ldr	r3, [pc, #136]	; (800312c <vKeyScan+0xa20>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			Key.StartStop_LongPress = 0;
 80030a8:	4b20      	ldr	r3, [pc, #128]	; (800312c <vKeyScan+0xa20>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}

		// *********************************************************Комбинации клавишь*********************************************************

		if (WelderUnit.IndicatorPanel.KeyState[3] == 1 && WelderUnit.IndicatorPanel.KeyState[1] == 2) // "ПРОГРАММА" "-" одновременно с "+"
 80030b0:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <vKeyScan+0xa24>)
 80030b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d11f      	bne.n	80030fa <vKeyScan+0x9ee>
 80030ba:	4b1d      	ldr	r3, [pc, #116]	; (8003130 <vKeyScan+0xa24>)
 80030bc:	7f9b      	ldrb	r3, [r3, #30]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d11b      	bne.n	80030fa <vKeyScan+0x9ee>
		{
			// Если времы выдрежки короткого нажатия достигло заданного итервала времени и это нажатие не считается длинным, то нажатие считается кортоким
			if (Key.Program_ShortPress_L_and_R > CNT_KEY_SHORT && Key.Program_ShortPress_L_and_R != CNT_KEY_SHORT + 2)
 80030c2:	4b1a      	ldr	r3, [pc, #104]	; (800312c <vKeyScan+0xa20>)
 80030c4:	7e1b      	ldrb	r3, [r3, #24]
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d906      	bls.n	80030d8 <vKeyScan+0x9cc>
 80030ca:	4b18      	ldr	r3, [pc, #96]	; (800312c <vKeyScan+0xa20>)
 80030cc:	7e1b      	ldrb	r3, [r3, #24]
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d002      	beq.n	80030d8 <vKeyScan+0x9cc>
			{
				// Дейсвие при нажатии на клавишу
//				nKeyPressed = press_short_StartStop;
//				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши

				Key.Program_ShortPress_L_and_R = CNT_KEY_SHORT + 3; // Сброс счетика выдержки
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <vKeyScan+0xa20>)
 80030d4:	2207      	movs	r2, #7
 80030d6:	761a      	strb	r2, [r3, #24]
			}

			if (Key.Program_ShortPress_L_and_R != CNT_KEY_SHORT + 2) // Если нажатие не считается долгим
 80030d8:	4b14      	ldr	r3, [pc, #80]	; (800312c <vKeyScan+0xa20>)
 80030da:	7e1b      	ldrb	r3, [r3, #24]
 80030dc:	2b06      	cmp	r3, #6
 80030de:	d005      	beq.n	80030ec <vKeyScan+0x9e0>
			{
				Key.Program_ShortPress_L_and_R++; // Счетчик для определения короткого нажатия на кнопку
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <vKeyScan+0xa20>)
 80030e2:	7e1b      	ldrb	r3, [r3, #24]
 80030e4:	3301      	adds	r3, #1
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	4b10      	ldr	r3, [pc, #64]	; (800312c <vKeyScan+0xa20>)
 80030ea:	761a      	strb	r2, [r3, #24]
			}


			Key.Program_LongPress_L_and_R++; // Счетчик для определения длинного нажатия на кнопку
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <vKeyScan+0xa20>)
 80030ee:	7e5b      	ldrb	r3, [r3, #25]
 80030f0:	3301      	adds	r3, #1
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	4b0d      	ldr	r3, [pc, #52]	; (800312c <vKeyScan+0xa20>)
 80030f6:	765a      	strb	r2, [r3, #25]
			if (Key.Program_LongPress_L_and_R > CNT_KEY_LONG) // Если времы выдрежки длинного нажатия достигло заданного интервала времени, то нажатие считается длинным
 80030f8:	e013      	b.n	8003122 <vKeyScan+0xa16>
			}

		}
		else // Если кнопка была отпущена то сбросить все счетчики выдержки
		{
			if (Key.Program_ShortPress_L_and_R >= CNT_KEY_SHORT + 3) // Дейсвия при отжатии кнопки
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <vKeyScan+0xa20>)
 80030fc:	7e1b      	ldrb	r3, [r3, #24]
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d909      	bls.n	8003116 <vKeyScan+0xa0a>
			{
				nKeyPressed = press_short_Program_L_and_R;
 8003102:	231f      	movs	r3, #31
 8003104:	73fb      	strb	r3, [r7, #15]
				xQueueSendToBack( qKeyPress, &nKeyPressed, 0 ); // Передача номера нажатой клавиши
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <vKeyScan+0xa28>)
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	f107 010f 	add.w	r1, r7, #15
 800310e:	2300      	movs	r3, #0
 8003110:	2200      	movs	r2, #0
 8003112:	f003 ffe7 	bl	80070e4 <xQueueGenericSend>
//
//				Key.Program_ShortPress_R = 0;
//				Key.Program_LongPress_R = 0;
			}

			Key.Program_ShortPress_L_and_R = 0;
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <vKeyScan+0xa20>)
 8003118:	2200      	movs	r2, #0
 800311a:	761a      	strb	r2, [r3, #24]
			Key.Program_LongPress_L_and_R = 0;
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <vKeyScan+0xa20>)
 800311e:	2200      	movs	r2, #0
 8003120:	765a      	strb	r2, [r3, #25]

		}



		vTaskDelay(TIME_KEY_SCAN / portTICK_RATE_MS);
 8003122:	2014      	movs	r0, #20
 8003124:	f004 fe24 	bl	8007d70 <vTaskDelay>
		PCB_KeyScan();
 8003128:	f7ff baf7 	b.w	800271a <vKeyScan+0xe>
 800312c:	20003da0 	.word	0x20003da0
 8003130:	2000353c 	.word	0x2000353c
 8003134:	20003d90 	.word	0x20003d90

08003138 <vIndicatorPanel_Out>:
	}
	vTaskDelete(NULL);
}

void vIndicatorPanel_Out(void *pvParameters)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	WelderUnit.Xs = 30;
 8003140:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 8003142:	221e      	movs	r2, #30
 8003144:	801a      	strh	r2, [r3, #0]
	WelderUnit.Xf = 90;
 8003146:	4b2b      	ldr	r3, [pc, #172]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 8003148:	225a      	movs	r2, #90	; 0x5a
 800314a:	805a      	strh	r2, [r3, #2]
	WelderUnit.Steps = 0;
 800314c:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 800314e:	2200      	movs	r2, #0
 8003150:	81da      	strh	r2, [r3, #14]
	WelderUnit.Delay_s = 10;
 8003152:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 8003154:	220a      	movs	r2, #10
 8003156:	729a      	strb	r2, [r3, #10]
	WelderUnit.Speed = 120;
 8003158:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 800315a:	2278      	movs	r2, #120	; 0x78
 800315c:	80da      	strh	r2, [r3, #6]
	WelderUnit.Delay_f = 20;
 800315e:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 8003160:	2214      	movs	r2, #20
 8003162:	72da      	strb	r2, [r3, #11]
	WelderUnit.Program = 4;
 8003164:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 8003166:	2204      	movs	r2, #4
 8003168:	819a      	strh	r2, [r3, #12]

	WelderUnit.GoTo = WelderUnit.Xf;
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 800316c:	885a      	ldrh	r2, [r3, #2]
 800316e:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 8003170:	811a      	strh	r2, [r3, #8]
	WelderUnit.Position = 0;
 8003172:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 8003174:	2200      	movs	r2, #0
 8003176:	809a      	strh	r2, [r3, #4]
	WelderUnit.State = 0;
 8003178:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 800317a:	2200      	movs	r2, #0
 800317c:	741a      	strb	r2, [r3, #16]

	WelderUnit.IndicatorPanel.Brightness = 2;
 800317e:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 8003180:	2202      	movs	r2, #2
 8003182:	771a      	strb	r2, [r3, #28]

//	WelderUnit.IndicatorPanel.LEDsState |= LED_AUTO;
//
//	WelderUnit.IndicatorPanel.LEDsState |= LED_PARKING;

	IndicatorPanel_Ini();
 8003184:	f7fd fc9a 	bl	8000abc <IndicatorPanel_Ini>

	IndicatorPanel_SetBrightness(&WelderUnit.IndicatorPanel);
 8003188:	481b      	ldr	r0, [pc, #108]	; (80031f8 <vIndicatorPanel_Out+0xc0>)
 800318a:	f7fd fd81 	bl	8000c90 <IndicatorPanel_SetBrightness>

	vTaskDelay(100 / portTICK_RATE_MS);
 800318e:	2064      	movs	r0, #100	; 0x64
 8003190:	f004 fdee 	bl	8007d70 <vTaskDelay>

		//PCB_LEDs_OUT(PCB_LEDs_OUT(LEDs_val))



		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 8003194:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 8003196:	7c1b      	ldrb	r3, [r3, #16]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <vIndicatorPanel_Out+0x70>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Position;
 80031a0:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031a2:	889a      	ldrh	r2, [r3, #4]
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031a6:	825a      	strh	r2, [r3, #18]
		}

		if (!(WelderUnit.State & 0x01)) // Если каретка не в движении то отображать точку начала варки
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031aa:	7c1b      	ldrb	r3, [r3, #16]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d103      	bne.n	80031bc <vIndicatorPanel_Out+0x84>
		{
			WelderUnit.IndicatorPanel.Xs = WelderUnit.Xs;
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031b6:	881a      	ldrh	r2, [r3, #0]
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031ba:	825a      	strh	r2, [r3, #18]
		}

		WelderUnit.IndicatorPanel.Xf = WelderUnit.Xf;
 80031bc:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031be:	885a      	ldrh	r2, [r3, #2]
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031c2:	829a      	strh	r2, [r3, #20]
		WelderUnit.IndicatorPanel.Delay_s = WelderUnit.Delay_s;
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031c6:	7a9a      	ldrb	r2, [r3, #10]
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031ca:	759a      	strb	r2, [r3, #22]
		WelderUnit.IndicatorPanel.Speed = WelderUnit.Speed;
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031ce:	88da      	ldrh	r2, [r3, #6]
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031d2:	831a      	strh	r2, [r3, #24]
		WelderUnit.IndicatorPanel.Delay_f = WelderUnit.Delay_f;
 80031d4:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031d6:	7ada      	ldrb	r2, [r3, #11]
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031da:	75da      	strb	r2, [r3, #23]
		WelderUnit.IndicatorPanel.Program = WelderUnit.Program;
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031de:	899a      	ldrh	r2, [r3, #12]
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <vIndicatorPanel_Out+0xbc>)
 80031e2:	835a      	strh	r2, [r3, #26]


		IndicatorPanel_SetValue(&WelderUnit.IndicatorPanel);
 80031e4:	4804      	ldr	r0, [pc, #16]	; (80031f8 <vIndicatorPanel_Out+0xc0>)
 80031e6:	f7fd fc83 	bl	8000af0 <IndicatorPanel_SetValue>

		vTaskDelay(100 / portTICK_RATE_MS);
 80031ea:	2064      	movs	r0, #100	; 0x64
 80031ec:	f004 fdc0 	bl	8007d70 <vTaskDelay>
		if (WelderUnit.State & 0x01) // Если каретка в движении то отображать ее позицию
 80031f0:	e7d0      	b.n	8003194 <vIndicatorPanel_Out+0x5c>
 80031f2:	bf00      	nop
 80031f4:	2000353c 	.word	0x2000353c
 80031f8:	2000354e 	.word	0x2000354e

080031fc <vBuzzer_beep>:
	vTaskDelete(NULL);
}


void vBuzzer_beep(void *pvParameters)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	uint8_t lReceivedValue;
	portBASE_TYPE xStatus;

	for(;;)
	{
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 8003204:	4b58      	ldr	r3, [pc, #352]	; (8003368 <vBuzzer_beep+0x16c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f107 010b 	add.w	r1, r7, #11
 800320c:	f04f 32ff 	mov.w	r2, #4294967295
 8003210:	4618      	mov	r0, r3
 8003212:	f004 f8bf 	bl	8007394 <xQueueReceive>
 8003216:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS ) // Если данные были успешно приняты из очереди
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b01      	cmp	r3, #1
 800321c:	f040 80a0 	bne.w	8003360 <vBuzzer_beep+0x164>
		{

		switch(lReceivedValue)
 8003220:	7afb      	ldrb	r3, [r7, #11]
 8003222:	2b05      	cmp	r3, #5
 8003224:	f200 809d 	bhi.w	8003362 <vBuzzer_beep+0x166>
 8003228:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <vBuzzer_beep+0x34>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003249 	.word	0x08003249
 8003234:	08003255 	.word	0x08003255
 8003238:	08003277 	.word	0x08003277
 800323c:	08003299 	.word	0x08003299
 8003240:	080032db 	.word	0x080032db
 8003244:	0800333d 	.word	0x0800333d
		{
		case beep_off:
		{
			BUZZER_OFF
 8003248:	2200      	movs	r2, #0
 800324a:	2110      	movs	r1, #16
 800324c:	4847      	ldr	r0, [pc, #284]	; (800336c <vBuzzer_beep+0x170>)
 800324e:	f001 fa38 	bl	80046c2 <HAL_GPIO_WritePin>
			break;
 8003252:	e086      	b.n	8003362 <vBuzzer_beep+0x166>
		}

		case beep_click:
		{
			BUZZER_ON
 8003254:	2201      	movs	r2, #1
 8003256:	2110      	movs	r1, #16
 8003258:	4844      	ldr	r0, [pc, #272]	; (800336c <vBuzzer_beep+0x170>)
 800325a:	f001 fa32 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(10 / portTICK_RATE_MS);
 800325e:	200a      	movs	r0, #10
 8003260:	f004 fd86 	bl	8007d70 <vTaskDelay>
			BUZZER_OFF
 8003264:	2200      	movs	r2, #0
 8003266:	2110      	movs	r1, #16
 8003268:	4840      	ldr	r0, [pc, #256]	; (800336c <vBuzzer_beep+0x170>)
 800326a:	f001 fa2a 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(50 / portTICK_RATE_MS);
 800326e:	2032      	movs	r0, #50	; 0x32
 8003270:	f004 fd7e 	bl	8007d70 <vTaskDelay>
			break;
 8003274:	e075      	b.n	8003362 <vBuzzer_beep+0x166>
		}

		case beep_1short:
		{
			BUZZER_ON
 8003276:	2201      	movs	r2, #1
 8003278:	2110      	movs	r1, #16
 800327a:	483c      	ldr	r0, [pc, #240]	; (800336c <vBuzzer_beep+0x170>)
 800327c:	f001 fa21 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003280:	2064      	movs	r0, #100	; 0x64
 8003282:	f004 fd75 	bl	8007d70 <vTaskDelay>
			BUZZER_OFF
 8003286:	2200      	movs	r2, #0
 8003288:	2110      	movs	r1, #16
 800328a:	4838      	ldr	r0, [pc, #224]	; (800336c <vBuzzer_beep+0x170>)
 800328c:	f001 fa19 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003290:	2064      	movs	r0, #100	; 0x64
 8003292:	f004 fd6d 	bl	8007d70 <vTaskDelay>
			break;
 8003296:	e064      	b.n	8003362 <vBuzzer_beep+0x166>
		}

		case beep_2short:
		{
			BUZZER_ON
 8003298:	2201      	movs	r2, #1
 800329a:	2110      	movs	r1, #16
 800329c:	4833      	ldr	r0, [pc, #204]	; (800336c <vBuzzer_beep+0x170>)
 800329e:	f001 fa10 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80032a2:	2064      	movs	r0, #100	; 0x64
 80032a4:	f004 fd64 	bl	8007d70 <vTaskDelay>
			BUZZER_OFF
 80032a8:	2200      	movs	r2, #0
 80032aa:	2110      	movs	r1, #16
 80032ac:	482f      	ldr	r0, [pc, #188]	; (800336c <vBuzzer_beep+0x170>)
 80032ae:	f001 fa08 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80032b2:	2064      	movs	r0, #100	; 0x64
 80032b4:	f004 fd5c 	bl	8007d70 <vTaskDelay>

			BUZZER_ON
 80032b8:	2201      	movs	r2, #1
 80032ba:	2110      	movs	r1, #16
 80032bc:	482b      	ldr	r0, [pc, #172]	; (800336c <vBuzzer_beep+0x170>)
 80032be:	f001 fa00 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80032c2:	2064      	movs	r0, #100	; 0x64
 80032c4:	f004 fd54 	bl	8007d70 <vTaskDelay>
			BUZZER_OFF
 80032c8:	2200      	movs	r2, #0
 80032ca:	2110      	movs	r1, #16
 80032cc:	4827      	ldr	r0, [pc, #156]	; (800336c <vBuzzer_beep+0x170>)
 80032ce:	f001 f9f8 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80032d2:	2064      	movs	r0, #100	; 0x64
 80032d4:	f004 fd4c 	bl	8007d70 <vTaskDelay>
			break;
 80032d8:	e043      	b.n	8003362 <vBuzzer_beep+0x166>
		}

		case beep_3short:
		{
			BUZZER_ON
 80032da:	2201      	movs	r2, #1
 80032dc:	2110      	movs	r1, #16
 80032de:	4823      	ldr	r0, [pc, #140]	; (800336c <vBuzzer_beep+0x170>)
 80032e0:	f001 f9ef 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80032e4:	2064      	movs	r0, #100	; 0x64
 80032e6:	f004 fd43 	bl	8007d70 <vTaskDelay>
			BUZZER_OFF
 80032ea:	2200      	movs	r2, #0
 80032ec:	2110      	movs	r1, #16
 80032ee:	481f      	ldr	r0, [pc, #124]	; (800336c <vBuzzer_beep+0x170>)
 80032f0:	f001 f9e7 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 80032f4:	2064      	movs	r0, #100	; 0x64
 80032f6:	f004 fd3b 	bl	8007d70 <vTaskDelay>

			BUZZER_ON
 80032fa:	2201      	movs	r2, #1
 80032fc:	2110      	movs	r1, #16
 80032fe:	481b      	ldr	r0, [pc, #108]	; (800336c <vBuzzer_beep+0x170>)
 8003300:	f001 f9df 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003304:	2064      	movs	r0, #100	; 0x64
 8003306:	f004 fd33 	bl	8007d70 <vTaskDelay>
			BUZZER_OFF
 800330a:	2200      	movs	r2, #0
 800330c:	2110      	movs	r1, #16
 800330e:	4817      	ldr	r0, [pc, #92]	; (800336c <vBuzzer_beep+0x170>)
 8003310:	f001 f9d7 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003314:	2064      	movs	r0, #100	; 0x64
 8003316:	f004 fd2b 	bl	8007d70 <vTaskDelay>

			BUZZER_ON
 800331a:	2201      	movs	r2, #1
 800331c:	2110      	movs	r1, #16
 800331e:	4813      	ldr	r0, [pc, #76]	; (800336c <vBuzzer_beep+0x170>)
 8003320:	f001 f9cf 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003324:	2064      	movs	r0, #100	; 0x64
 8003326:	f004 fd23 	bl	8007d70 <vTaskDelay>
			BUZZER_OFF
 800332a:	2200      	movs	r2, #0
 800332c:	2110      	movs	r1, #16
 800332e:	480f      	ldr	r0, [pc, #60]	; (800336c <vBuzzer_beep+0x170>)
 8003330:	f001 f9c7 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(100 / portTICK_RATE_MS);
 8003334:	2064      	movs	r0, #100	; 0x64
 8003336:	f004 fd1b 	bl	8007d70 <vTaskDelay>
			break;
 800333a:	e012      	b.n	8003362 <vBuzzer_beep+0x166>
		}

		case beep_long:
		{
			BUZZER_ON
 800333c:	2201      	movs	r2, #1
 800333e:	2110      	movs	r1, #16
 8003340:	480a      	ldr	r0, [pc, #40]	; (800336c <vBuzzer_beep+0x170>)
 8003342:	f001 f9be 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(500 / portTICK_RATE_MS);
 8003346:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800334a:	f004 fd11 	bl	8007d70 <vTaskDelay>
			BUZZER_OFF
 800334e:	2200      	movs	r2, #0
 8003350:	2110      	movs	r1, #16
 8003352:	4806      	ldr	r0, [pc, #24]	; (800336c <vBuzzer_beep+0x170>)
 8003354:	f001 f9b5 	bl	80046c2 <HAL_GPIO_WritePin>
			vTaskDelay(200 / portTICK_RATE_MS);
 8003358:	20c8      	movs	r0, #200	; 0xc8
 800335a:	f004 fd09 	bl	8007d70 <vTaskDelay>
			break;
 800335e:	e000      	b.n	8003362 <vBuzzer_beep+0x166>
		}

		}

		}
 8003360:	bf00      	nop

		vTaskMissedYield(); // Переключение контекста.
 8003362:	f005 f80d 	bl	8008380 <vTaskMissedYield>
		xStatus = xQueueReceive( qBeepMode, &lReceivedValue, portMAX_DELAY );
 8003366:	e74d      	b.n	8003204 <vBuzzer_beep+0x8>
 8003368:	20003538 	.word	0x20003538
 800336c:	40010800 	.word	0x40010800

08003370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003374:	f000 fb82 	bl	8003a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003378:	f000 f81a 	bl	80033b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800337c:	f000 f90c 	bl	8003598 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003380:	f000 f85c 	bl	800343c <MX_SPI1_Init>
  MX_TIM3_Init();
 8003384:	f000 f892 	bl	80034ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003388:	f003 fc0c 	bl	8006ba4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800338c:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <main+0x34>)
 800338e:	2100      	movs	r1, #0
 8003390:	4805      	ldr	r0, [pc, #20]	; (80033a8 <main+0x38>)
 8003392:	f003 fc39 	bl	8006c08 <osThreadNew>
 8003396:	4603      	mov	r3, r0
 8003398:	4a04      	ldr	r2, [pc, #16]	; (80033ac <main+0x3c>)
 800339a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  freeRTOS_Tasks_Ini();
 800339c:	f7fe fa58 	bl	8001850 <freeRTOS_Tasks_Ini>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80033a0:	e7fe      	b.n	80033a0 <main+0x30>
 80033a2:	bf00      	nop
 80033a4:	08009470 	.word	0x08009470
 80033a8:	08003791 	.word	0x08003791
 80033ac:	20003dd0 	.word	0x20003dd0

080033b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b090      	sub	sp, #64	; 0x40
 80033b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033b6:	f107 0318 	add.w	r3, r7, #24
 80033ba:	2228      	movs	r2, #40	; 0x28
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f005 ffe8 	bl	8009394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033c4:	1d3b      	adds	r3, r7, #4
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	609a      	str	r2, [r3, #8]
 80033ce:	60da      	str	r2, [r3, #12]
 80033d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033d2:	2301      	movs	r3, #1
 80033d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80033dc:	2300      	movs	r3, #0
 80033de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033e0:	2301      	movs	r3, #1
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033e4:	2302      	movs	r3, #2
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80033ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80033f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033f4:	f107 0318 	add.w	r3, r7, #24
 80033f8:	4618      	mov	r0, r3
 80033fa:	f001 f993 	bl	8004724 <HAL_RCC_OscConfig>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003404:	f000 f9cd 	bl	80037a2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003408:	230f      	movs	r3, #15
 800340a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800340c:	2302      	movs	r3, #2
 800340e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	2102      	movs	r1, #2
 8003422:	4618      	mov	r0, r3
 8003424:	f001 fbfe 	bl	8004c24 <HAL_RCC_ClockConfig>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800342e:	f000 f9b8 	bl	80037a2 <Error_Handler>
  }
}
 8003432:	bf00      	nop
 8003434:	3740      	adds	r7, #64	; 0x40
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003440:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <MX_SPI1_Init+0x68>)
 8003442:	4a19      	ldr	r2, [pc, #100]	; (80034a8 <MX_SPI1_Init+0x6c>)
 8003444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003446:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <MX_SPI1_Init+0x68>)
 8003448:	f44f 7282 	mov.w	r2, #260	; 0x104
 800344c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <MX_SPI1_Init+0x68>)
 8003450:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003454:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003456:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <MX_SPI1_Init+0x68>)
 8003458:	2200      	movs	r2, #0
 800345a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <MX_SPI1_Init+0x68>)
 800345e:	2202      	movs	r2, #2
 8003460:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <MX_SPI1_Init+0x68>)
 8003464:	2201      	movs	r2, #1
 8003466:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003468:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <MX_SPI1_Init+0x68>)
 800346a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800346e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <MX_SPI1_Init+0x68>)
 8003472:	2238      	movs	r2, #56	; 0x38
 8003474:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8003476:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <MX_SPI1_Init+0x68>)
 8003478:	2280      	movs	r2, #128	; 0x80
 800347a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <MX_SPI1_Init+0x68>)
 800347e:	2200      	movs	r2, #0
 8003480:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <MX_SPI1_Init+0x68>)
 8003484:	2200      	movs	r2, #0
 8003486:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <MX_SPI1_Init+0x68>)
 800348a:	220a      	movs	r2, #10
 800348c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <MX_SPI1_Init+0x68>)
 8003490:	f001 fd30 	bl	8004ef4 <HAL_SPI_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800349a:	f000 f982 	bl	80037a2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20003e1c 	.word	0x20003e1c
 80034a8:	40013000 	.word	0x40013000

080034ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08e      	sub	sp, #56	; 0x38
 80034b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	609a      	str	r2, [r3, #8]
 80034be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c0:	f107 0320 	add.w	r3, r7, #32
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034ca:	1d3b      	adds	r3, r7, #4
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
 80034d8:	615a      	str	r2, [r3, #20]
 80034da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80034dc:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <MX_TIM3_Init+0xe4>)
 80034de:	4a2d      	ldr	r2, [pc, #180]	; (8003594 <MX_TIM3_Init+0xe8>)
 80034e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80034e2:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <MX_TIM3_Init+0xe4>)
 80034e4:	2247      	movs	r2, #71	; 0x47
 80034e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034e8:	4b29      	ldr	r3, [pc, #164]	; (8003590 <MX_TIM3_Init+0xe4>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80034ee:	4b28      	ldr	r3, [pc, #160]	; (8003590 <MX_TIM3_Init+0xe4>)
 80034f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034f6:	4b26      	ldr	r3, [pc, #152]	; (8003590 <MX_TIM3_Init+0xe4>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034fc:	4b24      	ldr	r3, [pc, #144]	; (8003590 <MX_TIM3_Init+0xe4>)
 80034fe:	2200      	movs	r2, #0
 8003500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003502:	4823      	ldr	r0, [pc, #140]	; (8003590 <MX_TIM3_Init+0xe4>)
 8003504:	f002 fb66 	bl	8005bd4 <HAL_TIM_Base_Init>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800350e:	f000 f948 	bl	80037a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800351c:	4619      	mov	r1, r3
 800351e:	481c      	ldr	r0, [pc, #112]	; (8003590 <MX_TIM3_Init+0xe4>)
 8003520:	f002 fef0 	bl	8006304 <HAL_TIM_ConfigClockSource>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800352a:	f000 f93a 	bl	80037a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800352e:	4818      	ldr	r0, [pc, #96]	; (8003590 <MX_TIM3_Init+0xe4>)
 8003530:	f002 fb9f 	bl	8005c72 <HAL_TIM_PWM_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800353a:	f000 f932 	bl	80037a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800353e:	2300      	movs	r3, #0
 8003540:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003542:	2300      	movs	r3, #0
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003546:	f107 0320 	add.w	r3, r7, #32
 800354a:	4619      	mov	r1, r3
 800354c:	4810      	ldr	r0, [pc, #64]	; (8003590 <MX_TIM3_Init+0xe4>)
 800354e:	f003 faab 	bl	8006aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003558:	f000 f923 	bl	80037a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800355c:	2360      	movs	r3, #96	; 0x60
 800355e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800356c:	1d3b      	adds	r3, r7, #4
 800356e:	2200      	movs	r2, #0
 8003570:	4619      	mov	r1, r3
 8003572:	4807      	ldr	r0, [pc, #28]	; (8003590 <MX_TIM3_Init+0xe4>)
 8003574:	f002 fe08 	bl	8006188 <HAL_TIM_PWM_ConfigChannel>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800357e:	f000 f910 	bl	80037a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003582:	4803      	ldr	r0, [pc, #12]	; (8003590 <MX_TIM3_Init+0xe4>)
 8003584:	f000 f9b6 	bl	80038f4 <HAL_TIM_MspPostInit>

}
 8003588:	bf00      	nop
 800358a:	3738      	adds	r7, #56	; 0x38
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20003dd4 	.word	0x20003dd4
 8003594:	40000400 	.word	0x40000400

08003598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359e:	f107 0310 	add.w	r3, r7, #16
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ac:	4b71      	ldr	r3, [pc, #452]	; (8003774 <MX_GPIO_Init+0x1dc>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	4a70      	ldr	r2, [pc, #448]	; (8003774 <MX_GPIO_Init+0x1dc>)
 80035b2:	f043 0320 	orr.w	r3, r3, #32
 80035b6:	6193      	str	r3, [r2, #24]
 80035b8:	4b6e      	ldr	r3, [pc, #440]	; (8003774 <MX_GPIO_Init+0x1dc>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035c4:	4b6b      	ldr	r3, [pc, #428]	; (8003774 <MX_GPIO_Init+0x1dc>)
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	4a6a      	ldr	r2, [pc, #424]	; (8003774 <MX_GPIO_Init+0x1dc>)
 80035ca:	f043 0310 	orr.w	r3, r3, #16
 80035ce:	6193      	str	r3, [r2, #24]
 80035d0:	4b68      	ldr	r3, [pc, #416]	; (8003774 <MX_GPIO_Init+0x1dc>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035dc:	4b65      	ldr	r3, [pc, #404]	; (8003774 <MX_GPIO_Init+0x1dc>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4a64      	ldr	r2, [pc, #400]	; (8003774 <MX_GPIO_Init+0x1dc>)
 80035e2:	f043 0304 	orr.w	r3, r3, #4
 80035e6:	6193      	str	r3, [r2, #24]
 80035e8:	4b62      	ldr	r3, [pc, #392]	; (8003774 <MX_GPIO_Init+0x1dc>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f4:	4b5f      	ldr	r3, [pc, #380]	; (8003774 <MX_GPIO_Init+0x1dc>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	4a5e      	ldr	r2, [pc, #376]	; (8003774 <MX_GPIO_Init+0x1dc>)
 80035fa:	f043 0308 	orr.w	r3, r3, #8
 80035fe:	6193      	str	r3, [r2, #24]
 8003600:	4b5c      	ldr	r3, [pc, #368]	; (8003774 <MX_GPIO_Init+0x1dc>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oDIR1_Pin, GPIO_PIN_RESET);
 800360c:	2200      	movs	r2, #0
 800360e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003612:	4859      	ldr	r0, [pc, #356]	; (8003778 <MX_GPIO_Init+0x1e0>)
 8003614:	f001 f855 	bl	80046c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, oBuzer_Pin|oSyncArc_Pin|oSMD_EN1_Pin, GPIO_PIN_RESET);
 8003618:	2200      	movs	r2, #0
 800361a:	f44f 6111 	mov.w	r1, #2320	; 0x910
 800361e:	4857      	ldr	r0, [pc, #348]	; (800377c <MX_GPIO_Init+0x1e4>)
 8003620:	f001 f84f 	bl	80046c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oSTLED316S_STB5_GPIO_Port, oSTLED316S_STB5_Pin, GPIO_PIN_SET);
 8003624:	2201      	movs	r2, #1
 8003626:	2140      	movs	r1, #64	; 0x40
 8003628:	4854      	ldr	r0, [pc, #336]	; (800377c <MX_GPIO_Init+0x1e4>)
 800362a:	f001 f84a 	bl	80046c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin, GPIO_PIN_SET);
 800362e:	2201      	movs	r2, #1
 8003630:	2130      	movs	r1, #48	; 0x30
 8003632:	4851      	ldr	r0, [pc, #324]	; (8003778 <MX_GPIO_Init+0x1e0>)
 8003634:	f001 f845 	bl	80046c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin, GPIO_PIN_SET);
 8003638:	2201      	movs	r2, #1
 800363a:	2103      	movs	r1, #3
 800363c:	4850      	ldr	r0, [pc, #320]	; (8003780 <MX_GPIO_Init+0x1e8>)
 800363e:	f001 f840 	bl	80046c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oSolenoidValve2_Pin|oSolenoidValve1_Pin, GPIO_PIN_RESET);
 8003642:	2200      	movs	r2, #0
 8003644:	21c0      	movs	r1, #192	; 0xc0
 8003646:	484e      	ldr	r0, [pc, #312]	; (8003780 <MX_GPIO_Init+0x1e8>)
 8003648:	f001 f83b 	bl	80046c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : oSol_Valve_b_Heade_Pin oSol_Valve_a_Heade_Pin oSTLED316S_STB1_Pin oSTLED316S_STB2_Pin
                           oDIR1_Pin */
  GPIO_InitStruct.Pin = oSol_Valve_b_Heade_Pin|oSol_Valve_a_Heade_Pin|oSTLED316S_STB1_Pin|oSTLED316S_STB2_Pin
 800364c:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003650:	613b      	str	r3, [r7, #16]
                          |oDIR1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003652:	2301      	movs	r3, #1
 8003654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365a:	2302      	movs	r3, #2
 800365c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800365e:	f107 0310 	add.w	r3, r7, #16
 8003662:	4619      	mov	r1, r3
 8003664:	4844      	ldr	r0, [pc, #272]	; (8003778 <MX_GPIO_Init+0x1e0>)
 8003666:	f000 fe81 	bl	800436c <HAL_GPIO_Init>

  /*Configure GPIO pins : iPedal_L_Pin iPedal_R_Pin */
  GPIO_InitStruct.Pin = iPedal_L_Pin|iPedal_R_Pin;
 800366a:	2309      	movs	r3, #9
 800366c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003676:	f107 0310 	add.w	r3, r7, #16
 800367a:	4619      	mov	r1, r3
 800367c:	483f      	ldr	r0, [pc, #252]	; (800377c <MX_GPIO_Init+0x1e4>)
 800367e:	f000 fe75 	bl	800436c <HAL_GPIO_Init>

  /*Configure GPIO pins : oBuzer_Pin oSTLED316S_STB5_Pin oSyncArc_Pin oSMD_EN1_Pin */
  GPIO_InitStruct.Pin = oBuzer_Pin|oSTLED316S_STB5_Pin|oSyncArc_Pin|oSMD_EN1_Pin;
 8003682:	f44f 6315 	mov.w	r3, #2384	; 0x950
 8003686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003688:	2301      	movs	r3, #1
 800368a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003690:	2302      	movs	r3, #2
 8003692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003694:	f107 0310 	add.w	r3, r7, #16
 8003698:	4619      	mov	r1, r3
 800369a:	4838      	ldr	r0, [pc, #224]	; (800377c <MX_GPIO_Init+0x1e4>)
 800369c:	f000 fe66 	bl	800436c <HAL_GPIO_Init>

  /*Configure GPIO pins : oSTLED316S_STB3_Pin oSTLED316S_STB4_Pin oSolenoidValve2_Pin oSolenoidValve1_Pin */
  GPIO_InitStruct.Pin = oSTLED316S_STB3_Pin|oSTLED316S_STB4_Pin|oSolenoidValve2_Pin|oSolenoidValve1_Pin;
 80036a0:	23c3      	movs	r3, #195	; 0xc3
 80036a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a4:	2301      	movs	r3, #1
 80036a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ac:	2302      	movs	r3, #2
 80036ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b0:	f107 0310 	add.w	r3, r7, #16
 80036b4:	4619      	mov	r1, r3
 80036b6:	4832      	ldr	r0, [pc, #200]	; (8003780 <MX_GPIO_Init+0x1e8>)
 80036b8:	f000 fe58 	bl	800436c <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN5_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN5_Pin;
 80036bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036c2:	4b30      	ldr	r3, [pc, #192]	; (8003784 <MX_GPIO_Init+0x1ec>)
 80036c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN5_GPIO_Port, &GPIO_InitStruct);
 80036ca:	f107 0310 	add.w	r3, r7, #16
 80036ce:	4619      	mov	r1, r3
 80036d0:	482b      	ldr	r0, [pc, #172]	; (8003780 <MX_GPIO_Init+0x1e8>)
 80036d2:	f000 fe4b 	bl	800436c <HAL_GPIO_Init>

  /*Configure GPIO pin : iBackDoor_Pin */
  GPIO_InitStruct.Pin = iBackDoor_Pin;
 80036d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iBackDoor_GPIO_Port, &GPIO_InitStruct);
 80036e4:	f107 0310 	add.w	r3, r7, #16
 80036e8:	4619      	mov	r1, r3
 80036ea:	4825      	ldr	r0, [pc, #148]	; (8003780 <MX_GPIO_Init+0x1e8>)
 80036ec:	f000 fe3e 	bl	800436c <HAL_GPIO_Init>

  /*Configure GPIO pin : iFB_STEP1_Pin */
  GPIO_InitStruct.Pin = iFB_STEP1_Pin;
 80036f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036f6:	4b24      	ldr	r3, [pc, #144]	; (8003788 <MX_GPIO_Init+0x1f0>)
 80036f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iFB_STEP1_GPIO_Port, &GPIO_InitStruct);
 80036fe:	f107 0310 	add.w	r3, r7, #16
 8003702:	4619      	mov	r1, r3
 8003704:	481c      	ldr	r0, [pc, #112]	; (8003778 <MX_GPIO_Init+0x1e0>)
 8003706:	f000 fe31 	bl	800436c <HAL_GPIO_Init>

  /*Configure GPIO pin : iSTLED316S_IRQN3_Pin */
  GPIO_InitStruct.Pin = iSTLED316S_IRQN3_Pin;
 800370a:	2304      	movs	r3, #4
 800370c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <MX_GPIO_Init+0x1ec>)
 8003710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003712:	2301      	movs	r3, #1
 8003714:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iSTLED316S_IRQN3_GPIO_Port, &GPIO_InitStruct);
 8003716:	f107 0310 	add.w	r3, r7, #16
 800371a:	4619      	mov	r1, r3
 800371c:	481b      	ldr	r0, [pc, #108]	; (800378c <MX_GPIO_Init+0x1f4>)
 800371e:	f000 fe25 	bl	800436c <HAL_GPIO_Init>

  /*Configure GPIO pin : iCarriageStop_Pin */
  GPIO_InitStruct.Pin = iCarriageStop_Pin;
 8003722:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003728:	4b17      	ldr	r3, [pc, #92]	; (8003788 <MX_GPIO_Init+0x1f0>)
 800372a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(iCarriageStop_GPIO_Port, &GPIO_InitStruct);
 8003730:	f107 0310 	add.w	r3, r7, #16
 8003734:	4619      	mov	r1, r3
 8003736:	4812      	ldr	r0, [pc, #72]	; (8003780 <MX_GPIO_Init+0x1e8>)
 8003738:	f000 fe18 	bl	800436c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800373c:	2200      	movs	r2, #0
 800373e:	2105      	movs	r1, #5
 8003740:	2008      	movs	r0, #8
 8003742:	f000 fad4 	bl	8003cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003746:	2008      	movs	r0, #8
 8003748:	f000 faed 	bl	8003d26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800374c:	2200      	movs	r2, #0
 800374e:	2105      	movs	r1, #5
 8003750:	2017      	movs	r0, #23
 8003752:	f000 facc 	bl	8003cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003756:	2017      	movs	r0, #23
 8003758:	f000 fae5 	bl	8003d26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800375c:	2200      	movs	r2, #0
 800375e:	2105      	movs	r1, #5
 8003760:	2028      	movs	r0, #40	; 0x28
 8003762:	f000 fac4 	bl	8003cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003766:	2028      	movs	r0, #40	; 0x28
 8003768:	f000 fadd 	bl	8003d26 <HAL_NVIC_EnableIRQ>

}
 800376c:	bf00      	nop
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	40011000 	.word	0x40011000
 800377c:	40010800 	.word	0x40010800
 8003780:	40010c00 	.word	0x40010c00
 8003784:	10210000 	.word	0x10210000
 8003788:	10110000 	.word	0x10110000
 800378c:	40011400 	.word	0x40011400

08003790 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	vTaskDelay(1000);
 8003798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800379c:	f004 fae8 	bl	8007d70 <vTaskDelay>
 80037a0:	e7fa      	b.n	8003798 <StartDefaultTask+0x8>

080037a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037a2:	b480      	push	{r7}
 80037a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037a6:	b672      	cpsid	i
}
 80037a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037aa:	e7fe      	b.n	80037aa <Error_Handler+0x8>

080037ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_MspInit+0x68>)
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	4a17      	ldr	r2, [pc, #92]	; (8003814 <HAL_MspInit+0x68>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6193      	str	r3, [r2, #24]
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <HAL_MspInit+0x68>)
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_MspInit+0x68>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	4a11      	ldr	r2, [pc, #68]	; (8003814 <HAL_MspInit+0x68>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d4:	61d3      	str	r3, [r2, #28]
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <HAL_MspInit+0x68>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	607b      	str	r3, [r7, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037e2:	2200      	movs	r2, #0
 80037e4:	210f      	movs	r1, #15
 80037e6:	f06f 0001 	mvn.w	r0, #1
 80037ea:	f000 fa80 	bl	8003cee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_MspInit+0x6c>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <HAL_MspInit+0x6c>)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	40010000 	.word	0x40010000

0800381c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 0310 	add.w	r3, r7, #16
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a19      	ldr	r2, [pc, #100]	; (800389c <HAL_SPI_MspInit+0x80>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d12b      	bne.n	8003894 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800383c:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HAL_SPI_MspInit+0x84>)
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	4a17      	ldr	r2, [pc, #92]	; (80038a0 <HAL_SPI_MspInit+0x84>)
 8003842:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003846:	6193      	str	r3, [r2, #24]
 8003848:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HAL_SPI_MspInit+0x84>)
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_SPI_MspInit+0x84>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <HAL_SPI_MspInit+0x84>)
 800385a:	f043 0304 	orr.w	r3, r3, #4
 800385e:	6193      	str	r3, [r2, #24]
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <HAL_SPI_MspInit+0x84>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800386c:	23a0      	movs	r3, #160	; 0xa0
 800386e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	2302      	movs	r3, #2
 8003872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003874:	2303      	movs	r3, #3
 8003876:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003878:	f107 0310 	add.w	r3, r7, #16
 800387c:	4619      	mov	r1, r3
 800387e:	4809      	ldr	r0, [pc, #36]	; (80038a4 <HAL_SPI_MspInit+0x88>)
 8003880:	f000 fd74 	bl	800436c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003884:	2200      	movs	r2, #0
 8003886:	2105      	movs	r1, #5
 8003888:	2023      	movs	r0, #35	; 0x23
 800388a:	f000 fa30 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800388e:	2023      	movs	r0, #35	; 0x23
 8003890:	f000 fa49 	bl	8003d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003894:	bf00      	nop
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40013000 	.word	0x40013000
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40010800 	.word	0x40010800

080038a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0d      	ldr	r2, [pc, #52]	; (80038ec <HAL_TIM_Base_MspInit+0x44>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d113      	bne.n	80038e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038ba:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <HAL_TIM_Base_MspInit+0x48>)
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	4a0c      	ldr	r2, [pc, #48]	; (80038f0 <HAL_TIM_Base_MspInit+0x48>)
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	61d3      	str	r3, [r2, #28]
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <HAL_TIM_Base_MspInit+0x48>)
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80038d2:	2200      	movs	r2, #0
 80038d4:	2105      	movs	r1, #5
 80038d6:	201d      	movs	r0, #29
 80038d8:	f000 fa09 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80038dc:	201d      	movs	r0, #29
 80038de:	f000 fa22 	bl	8003d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40021000 	.word	0x40021000

080038f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	f107 030c 	add.w	r3, r7, #12
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a18      	ldr	r2, [pc, #96]	; (8003970 <HAL_TIM_MspPostInit+0x7c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d129      	bne.n	8003968 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003914:	4b17      	ldr	r3, [pc, #92]	; (8003974 <HAL_TIM_MspPostInit+0x80>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	4a16      	ldr	r2, [pc, #88]	; (8003974 <HAL_TIM_MspPostInit+0x80>)
 800391a:	f043 0310 	orr.w	r3, r3, #16
 800391e:	6193      	str	r3, [r2, #24]
 8003920:	4b14      	ldr	r3, [pc, #80]	; (8003974 <HAL_TIM_MspPostInit+0x80>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = oPWM_STEP1_Pin;
 800392c:	2340      	movs	r3, #64	; 0x40
 800392e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003930:	2302      	movs	r3, #2
 8003932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003934:	2302      	movs	r3, #2
 8003936:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(oPWM_STEP1_GPIO_Port, &GPIO_InitStruct);
 8003938:	f107 030c 	add.w	r3, r7, #12
 800393c:	4619      	mov	r1, r3
 800393e:	480e      	ldr	r0, [pc, #56]	; (8003978 <HAL_TIM_MspPostInit+0x84>)
 8003940:	f000 fd14 	bl	800436c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003944:	4b0d      	ldr	r3, [pc, #52]	; (800397c <HAL_TIM_MspPostInit+0x88>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	4a06      	ldr	r2, [pc, #24]	; (800397c <HAL_TIM_MspPostInit+0x88>)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003968:	bf00      	nop
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40000400 	.word	0x40000400
 8003974:	40021000 	.word	0x40021000
 8003978:	40011000 	.word	0x40011000
 800397c:	40010000 	.word	0x40010000

08003980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003984:	e7fe      	b.n	8003984 <NMI_Handler+0x4>

08003986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003986:	b480      	push	{r7}
 8003988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800398a:	e7fe      	b.n	800398a <HardFault_Handler+0x4>

0800398c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003990:	e7fe      	b.n	8003990 <MemManage_Handler+0x4>

08003992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003992:	b480      	push	{r7}
 8003994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003996:	e7fe      	b.n	8003996 <BusFault_Handler+0x4>

08003998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800399c:	e7fe      	b.n	800399c <UsageFault_Handler+0x4>

0800399e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ae:	f000 f8ab 	bl	8003b08 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80039b2:	f004 fdb9 	bl	8008528 <xTaskGetSchedulerState>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d001      	beq.n	80039c0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80039bc:	f005 faec 	bl	8008f98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039c0:	bf00      	nop
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80039c8:	2004      	movs	r0, #4
 80039ca:	f000 fe93 	bl	80046f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80039d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80039da:	f000 fe8b 	bl	80046f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039e8:	4802      	ldr	r0, [pc, #8]	; (80039f4 <TIM3_IRQHandler+0x10>)
 80039ea:	f002 fac5 	bl	8005f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20003dd4 	.word	0x20003dd4

080039f8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80039fc:	4802      	ldr	r0, [pc, #8]	; (8003a08 <SPI1_IRQHandler+0x10>)
 80039fe:	f001 feed 	bl	80057dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20003e1c 	.word	0x20003e1c

08003a0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003a10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003a14:	f000 fe6e 	bl	80046f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003a18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a1c:	f000 fe6a 	bl	80046f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a20:	bf00      	nop
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003a30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003a32:	e003      	b.n	8003a3c <LoopCopyDataInit>

08003a34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003a36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003a38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003a3a:	3104      	adds	r1, #4

08003a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a3c:	480a      	ldr	r0, [pc, #40]	; (8003a68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003a40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003a42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003a44:	d3f6      	bcc.n	8003a34 <CopyDataInit>
  ldr r2, =_sbss
 8003a46:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003a48:	e002      	b.n	8003a50 <LoopFillZerobss>

08003a4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003a4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003a4c:	f842 3b04 	str.w	r3, [r2], #4

08003a50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003a50:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003a52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003a54:	d3f9      	bcc.n	8003a4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a56:	f7ff ffe5 	bl	8003a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a5a:	f005 fc69 	bl	8009330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a5e:	f7ff fc87 	bl	8003370 <main>
  bx lr
 8003a62:	4770      	bx	lr
  ldr r3, =_sidata
 8003a64:	080094ac 	.word	0x080094ac
  ldr r0, =_sdata
 8003a68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003a6c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8003a70:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003a74:	20003ed8 	.word	0x20003ed8

08003a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a78:	e7fe      	b.n	8003a78 <ADC1_2_IRQHandler>
	...

08003a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <HAL_Init+0x28>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a07      	ldr	r2, [pc, #28]	; (8003aa4 <HAL_Init+0x28>)
 8003a86:	f043 0310 	orr.w	r3, r3, #16
 8003a8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a8c:	2003      	movs	r0, #3
 8003a8e:	f000 f923 	bl	8003cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a92:	200f      	movs	r0, #15
 8003a94:	f000 f808 	bl	8003aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a98:	f7ff fe88 	bl	80037ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40022000 	.word	0x40022000

08003aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ab0:	4b12      	ldr	r3, [pc, #72]	; (8003afc <HAL_InitTick+0x54>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <HAL_InitTick+0x58>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f93b 	bl	8003d42 <HAL_SYSTICK_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e00e      	b.n	8003af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b0f      	cmp	r3, #15
 8003ada:	d80a      	bhi.n	8003af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003adc:	2200      	movs	r2, #0
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	f000 f903 	bl	8003cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ae8:	4a06      	ldr	r2, [pc, #24]	; (8003b04 <HAL_InitTick+0x5c>)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e000      	b.n	8003af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20000000 	.word	0x20000000
 8003b00:	20000008 	.word	0x20000008
 8003b04:	20000004 	.word	0x20000004

08003b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_IncTick+0x1c>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_IncTick+0x20>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4413      	add	r3, r2
 8003b18:	4a03      	ldr	r2, [pc, #12]	; (8003b28 <HAL_IncTick+0x20>)
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	20000008 	.word	0x20000008
 8003b28:	20003e74 	.word	0x20003e74

08003b2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b30:	4b02      	ldr	r3, [pc, #8]	; (8003b3c <HAL_GetTick+0x10>)
 8003b32:	681b      	ldr	r3, [r3, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	20003e74 	.word	0x20003e74

08003b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b50:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <__NVIC_SetPriorityGrouping+0x44>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b72:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <__NVIC_SetPriorityGrouping+0x44>)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	60d3      	str	r3, [r2, #12]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	0a1b      	lsrs	r3, r3, #8
 8003b92:	f003 0307 	and.w	r3, r3, #7
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	db0b      	blt.n	8003bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	f003 021f 	and.w	r2, r3, #31
 8003bbc:	4906      	ldr	r1, [pc, #24]	; (8003bd8 <__NVIC_EnableIRQ+0x34>)
 8003bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr
 8003bd8:	e000e100 	.word	0xe000e100

08003bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	6039      	str	r1, [r7, #0]
 8003be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	db0a      	blt.n	8003c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	490c      	ldr	r1, [pc, #48]	; (8003c28 <__NVIC_SetPriority+0x4c>)
 8003bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfa:	0112      	lsls	r2, r2, #4
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	440b      	add	r3, r1
 8003c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c04:	e00a      	b.n	8003c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	4908      	ldr	r1, [pc, #32]	; (8003c2c <__NVIC_SetPriority+0x50>)
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	3b04      	subs	r3, #4
 8003c14:	0112      	lsls	r2, r2, #4
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	440b      	add	r3, r1
 8003c1a:	761a      	strb	r2, [r3, #24]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	e000e100 	.word	0xe000e100
 8003c2c:	e000ed00 	.word	0xe000ed00

08003c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b089      	sub	sp, #36	; 0x24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f1c3 0307 	rsb	r3, r3, #7
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	bf28      	it	cs
 8003c4e:	2304      	movcs	r3, #4
 8003c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	3304      	adds	r3, #4
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	d902      	bls.n	8003c60 <NVIC_EncodePriority+0x30>
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3b03      	subs	r3, #3
 8003c5e:	e000      	b.n	8003c62 <NVIC_EncodePriority+0x32>
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c64:	f04f 32ff 	mov.w	r2, #4294967295
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	401a      	ands	r2, r3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c78:	f04f 31ff 	mov.w	r1, #4294967295
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c82:	43d9      	mvns	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c88:	4313      	orrs	r3, r2
         );
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3724      	adds	r7, #36	; 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr

08003c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ca4:	d301      	bcc.n	8003caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e00f      	b.n	8003cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003caa:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <SysTick_Config+0x40>)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cb2:	210f      	movs	r1, #15
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	f7ff ff90 	bl	8003bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <SysTick_Config+0x40>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cc2:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <SysTick_Config+0x40>)
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	e000e010 	.word	0xe000e010

08003cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ff2d 	bl	8003b40 <__NVIC_SetPriorityGrouping>
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d00:	f7ff ff42 	bl	8003b88 <__NVIC_GetPriorityGrouping>
 8003d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	6978      	ldr	r0, [r7, #20]
 8003d0c:	f7ff ff90 	bl	8003c30 <NVIC_EncodePriority>
 8003d10:	4602      	mov	r2, r0
 8003d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff5f 	bl	8003bdc <__NVIC_SetPriority>
}
 8003d1e:	bf00      	nop
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff ff35 	bl	8003ba4 <__NVIC_EnableIRQ>
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ffa2 	bl	8003c94 <SysTick_Config>
 8003d50:	4603      	mov	r3, r0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d005      	beq.n	8003d7e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2204      	movs	r2, #4
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
 8003d7c:	e0d6      	b.n	8003f2c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 020e 	bic.w	r2, r2, #14
 8003d8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	4b64      	ldr	r3, [pc, #400]	; (8003f38 <HAL_DMA_Abort_IT+0x1dc>)
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d958      	bls.n	8003e5c <HAL_DMA_Abort_IT+0x100>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a63      	ldr	r2, [pc, #396]	; (8003f3c <HAL_DMA_Abort_IT+0x1e0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d04f      	beq.n	8003e54 <HAL_DMA_Abort_IT+0xf8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a61      	ldr	r2, [pc, #388]	; (8003f40 <HAL_DMA_Abort_IT+0x1e4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d048      	beq.n	8003e50 <HAL_DMA_Abort_IT+0xf4>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a60      	ldr	r2, [pc, #384]	; (8003f44 <HAL_DMA_Abort_IT+0x1e8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d040      	beq.n	8003e4a <HAL_DMA_Abort_IT+0xee>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a5e      	ldr	r2, [pc, #376]	; (8003f48 <HAL_DMA_Abort_IT+0x1ec>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d038      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xe8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a5d      	ldr	r2, [pc, #372]	; (8003f4c <HAL_DMA_Abort_IT+0x1f0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d030      	beq.n	8003e3e <HAL_DMA_Abort_IT+0xe2>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a5b      	ldr	r2, [pc, #364]	; (8003f50 <HAL_DMA_Abort_IT+0x1f4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d028      	beq.n	8003e38 <HAL_DMA_Abort_IT+0xdc>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a53      	ldr	r2, [pc, #332]	; (8003f38 <HAL_DMA_Abort_IT+0x1dc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d020      	beq.n	8003e32 <HAL_DMA_Abort_IT+0xd6>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a57      	ldr	r2, [pc, #348]	; (8003f54 <HAL_DMA_Abort_IT+0x1f8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d019      	beq.n	8003e2e <HAL_DMA_Abort_IT+0xd2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a56      	ldr	r2, [pc, #344]	; (8003f58 <HAL_DMA_Abort_IT+0x1fc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d012      	beq.n	8003e2a <HAL_DMA_Abort_IT+0xce>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a54      	ldr	r2, [pc, #336]	; (8003f5c <HAL_DMA_Abort_IT+0x200>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00a      	beq.n	8003e24 <HAL_DMA_Abort_IT+0xc8>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a53      	ldr	r2, [pc, #332]	; (8003f60 <HAL_DMA_Abort_IT+0x204>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d102      	bne.n	8003e1e <HAL_DMA_Abort_IT+0xc2>
 8003e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e1c:	e01b      	b.n	8003e56 <HAL_DMA_Abort_IT+0xfa>
 8003e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e22:	e018      	b.n	8003e56 <HAL_DMA_Abort_IT+0xfa>
 8003e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e28:	e015      	b.n	8003e56 <HAL_DMA_Abort_IT+0xfa>
 8003e2a:	2310      	movs	r3, #16
 8003e2c:	e013      	b.n	8003e56 <HAL_DMA_Abort_IT+0xfa>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e011      	b.n	8003e56 <HAL_DMA_Abort_IT+0xfa>
 8003e32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e36:	e00e      	b.n	8003e56 <HAL_DMA_Abort_IT+0xfa>
 8003e38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e3c:	e00b      	b.n	8003e56 <HAL_DMA_Abort_IT+0xfa>
 8003e3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e42:	e008      	b.n	8003e56 <HAL_DMA_Abort_IT+0xfa>
 8003e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e48:	e005      	b.n	8003e56 <HAL_DMA_Abort_IT+0xfa>
 8003e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e4e:	e002      	b.n	8003e56 <HAL_DMA_Abort_IT+0xfa>
 8003e50:	2310      	movs	r3, #16
 8003e52:	e000      	b.n	8003e56 <HAL_DMA_Abort_IT+0xfa>
 8003e54:	2301      	movs	r3, #1
 8003e56:	4a43      	ldr	r2, [pc, #268]	; (8003f64 <HAL_DMA_Abort_IT+0x208>)
 8003e58:	6053      	str	r3, [r2, #4]
 8003e5a:	e057      	b.n	8003f0c <HAL_DMA_Abort_IT+0x1b0>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a36      	ldr	r2, [pc, #216]	; (8003f3c <HAL_DMA_Abort_IT+0x1e0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d04f      	beq.n	8003f06 <HAL_DMA_Abort_IT+0x1aa>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a35      	ldr	r2, [pc, #212]	; (8003f40 <HAL_DMA_Abort_IT+0x1e4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d048      	beq.n	8003f02 <HAL_DMA_Abort_IT+0x1a6>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a33      	ldr	r2, [pc, #204]	; (8003f44 <HAL_DMA_Abort_IT+0x1e8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d040      	beq.n	8003efc <HAL_DMA_Abort_IT+0x1a0>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a32      	ldr	r2, [pc, #200]	; (8003f48 <HAL_DMA_Abort_IT+0x1ec>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d038      	beq.n	8003ef6 <HAL_DMA_Abort_IT+0x19a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a30      	ldr	r2, [pc, #192]	; (8003f4c <HAL_DMA_Abort_IT+0x1f0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d030      	beq.n	8003ef0 <HAL_DMA_Abort_IT+0x194>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2f      	ldr	r2, [pc, #188]	; (8003f50 <HAL_DMA_Abort_IT+0x1f4>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d028      	beq.n	8003eea <HAL_DMA_Abort_IT+0x18e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a26      	ldr	r2, [pc, #152]	; (8003f38 <HAL_DMA_Abort_IT+0x1dc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d020      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0x188>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a2b      	ldr	r2, [pc, #172]	; (8003f54 <HAL_DMA_Abort_IT+0x1f8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d019      	beq.n	8003ee0 <HAL_DMA_Abort_IT+0x184>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a29      	ldr	r2, [pc, #164]	; (8003f58 <HAL_DMA_Abort_IT+0x1fc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d012      	beq.n	8003edc <HAL_DMA_Abort_IT+0x180>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a28      	ldr	r2, [pc, #160]	; (8003f5c <HAL_DMA_Abort_IT+0x200>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_DMA_Abort_IT+0x17a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a26      	ldr	r2, [pc, #152]	; (8003f60 <HAL_DMA_Abort_IT+0x204>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d102      	bne.n	8003ed0 <HAL_DMA_Abort_IT+0x174>
 8003eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ece:	e01b      	b.n	8003f08 <HAL_DMA_Abort_IT+0x1ac>
 8003ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ed4:	e018      	b.n	8003f08 <HAL_DMA_Abort_IT+0x1ac>
 8003ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eda:	e015      	b.n	8003f08 <HAL_DMA_Abort_IT+0x1ac>
 8003edc:	2310      	movs	r3, #16
 8003ede:	e013      	b.n	8003f08 <HAL_DMA_Abort_IT+0x1ac>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e011      	b.n	8003f08 <HAL_DMA_Abort_IT+0x1ac>
 8003ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ee8:	e00e      	b.n	8003f08 <HAL_DMA_Abort_IT+0x1ac>
 8003eea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003eee:	e00b      	b.n	8003f08 <HAL_DMA_Abort_IT+0x1ac>
 8003ef0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ef4:	e008      	b.n	8003f08 <HAL_DMA_Abort_IT+0x1ac>
 8003ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003efa:	e005      	b.n	8003f08 <HAL_DMA_Abort_IT+0x1ac>
 8003efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f00:	e002      	b.n	8003f08 <HAL_DMA_Abort_IT+0x1ac>
 8003f02:	2310      	movs	r3, #16
 8003f04:	e000      	b.n	8003f08 <HAL_DMA_Abort_IT+0x1ac>
 8003f06:	2301      	movs	r3, #1
 8003f08:	4a17      	ldr	r2, [pc, #92]	; (8003f68 <HAL_DMA_Abort_IT+0x20c>)
 8003f0a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
    } 
  }
  return status;
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40020080 	.word	0x40020080
 8003f3c:	40020008 	.word	0x40020008
 8003f40:	4002001c 	.word	0x4002001c
 8003f44:	40020030 	.word	0x40020030
 8003f48:	40020044 	.word	0x40020044
 8003f4c:	40020058 	.word	0x40020058
 8003f50:	4002006c 	.word	0x4002006c
 8003f54:	40020408 	.word	0x40020408
 8003f58:	4002041c 	.word	0x4002041c
 8003f5c:	40020430 	.word	0x40020430
 8003f60:	40020444 	.word	0x40020444
 8003f64:	40020400 	.word	0x40020400
 8003f68:	40020000 	.word	0x40020000

08003f6c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f86:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <HAL_FLASH_Program+0xd8>)
 8003f88:	7e1b      	ldrb	r3, [r3, #24]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_FLASH_Program+0x26>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e054      	b.n	800403c <HAL_FLASH_Program+0xd0>
 8003f92:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <HAL_FLASH_Program+0xd8>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003f98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f9c:	f000 f8a8 	bl	80040f0 <FLASH_WaitForLastOperation>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d144      	bne.n	8004034 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d102      	bne.n	8003fb6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	757b      	strb	r3, [r7, #21]
 8003fb4:	e007      	b.n	8003fc6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d102      	bne.n	8003fc2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	757b      	strb	r3, [r7, #21]
 8003fc0:	e001      	b.n	8003fc6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75bb      	strb	r3, [r7, #22]
 8003fca:	e02d      	b.n	8004028 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003fcc:	7dbb      	ldrb	r3, [r7, #22]
 8003fce:	005a      	lsls	r2, r3, #1
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	eb02 0c03 	add.w	ip, r2, r3
 8003fd6:	7dbb      	ldrb	r3, [r7, #22]
 8003fd8:	0119      	lsls	r1, r3, #4
 8003fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fde:	f1c1 0620 	rsb	r6, r1, #32
 8003fe2:	f1a1 0020 	sub.w	r0, r1, #32
 8003fe6:	fa22 f401 	lsr.w	r4, r2, r1
 8003fea:	fa03 f606 	lsl.w	r6, r3, r6
 8003fee:	4334      	orrs	r4, r6
 8003ff0:	fa23 f000 	lsr.w	r0, r3, r0
 8003ff4:	4304      	orrs	r4, r0
 8003ff6:	fa23 f501 	lsr.w	r5, r3, r1
 8003ffa:	b2a3      	uxth	r3, r4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4660      	mov	r0, ip
 8004000:	f000 f85a 	bl	80040b8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004004:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004008:	f000 f872 	bl	80040f0 <FLASH_WaitForLastOperation>
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004010:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <HAL_FLASH_Program+0xdc>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	4a0c      	ldr	r2, [pc, #48]	; (8004048 <HAL_FLASH_Program+0xdc>)
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d107      	bne.n	8004032 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004022:	7dbb      	ldrb	r3, [r7, #22]
 8004024:	3301      	adds	r3, #1
 8004026:	75bb      	strb	r3, [r7, #22]
 8004028:	7dba      	ldrb	r2, [r7, #22]
 800402a:	7d7b      	ldrb	r3, [r7, #21]
 800402c:	429a      	cmp	r2, r3
 800402e:	d3cd      	bcc.n	8003fcc <HAL_FLASH_Program+0x60>
 8004030:	e000      	b.n	8004034 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004032:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004034:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_FLASH_Program+0xd8>)
 8004036:	2200      	movs	r2, #0
 8004038:	761a      	strb	r2, [r3, #24]

  return status;
 800403a:	7dfb      	ldrb	r3, [r7, #23]
}
 800403c:	4618      	mov	r0, r3
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004044:	20003e78 	.word	0x20003e78
 8004048:	40022000 	.word	0x40022000

0800404c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004056:	4b0d      	ldr	r3, [pc, #52]	; (800408c <HAL_FLASH_Unlock+0x40>)
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <HAL_FLASH_Unlock+0x40>)
 8004064:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <HAL_FLASH_Unlock+0x44>)
 8004066:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004068:	4b08      	ldr	r3, [pc, #32]	; (800408c <HAL_FLASH_Unlock+0x40>)
 800406a:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <HAL_FLASH_Unlock+0x48>)
 800406c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <HAL_FLASH_Unlock+0x40>)
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800407e:	79fb      	ldrb	r3, [r7, #7]
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40022000 	.word	0x40022000
 8004090:	45670123 	.word	0x45670123
 8004094:	cdef89ab 	.word	0xcdef89ab

08004098 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_FLASH_Lock+0x1c>)
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <HAL_FLASH_Lock+0x1c>)
 80040a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40022000 	.word	0x40022000

080040b8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040c4:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <FLASH_Program_HalfWord+0x30>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <FLASH_Program_HalfWord+0x34>)
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	4a07      	ldr	r2, [pc, #28]	; (80040ec <FLASH_Program_HalfWord+0x34>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	887a      	ldrh	r2, [r7, #2]
 80040da:	801a      	strh	r2, [r3, #0]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20003e78 	.word	0x20003e78
 80040ec:	40022000 	.word	0x40022000

080040f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80040f8:	f7ff fd18 	bl	8003b2c <HAL_GetTick>
 80040fc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80040fe:	e010      	b.n	8004122 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004106:	d00c      	beq.n	8004122 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <FLASH_WaitForLastOperation+0x2e>
 800410e:	f7ff fd0d 	bl	8003b2c <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d201      	bcs.n	8004122 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e025      	b.n	800416e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <FLASH_WaitForLastOperation+0x88>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e8      	bne.n	8004100 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800412e:	4b12      	ldr	r3, [pc, #72]	; (8004178 <FLASH_WaitForLastOperation+0x88>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800413a:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <FLASH_WaitForLastOperation+0x88>)
 800413c:	2220      	movs	r2, #32
 800413e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <FLASH_WaitForLastOperation+0x88>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <FLASH_WaitForLastOperation+0x88>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004158:	4b07      	ldr	r3, [pc, #28]	; (8004178 <FLASH_WaitForLastOperation+0x88>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004164:	f000 f80a 	bl	800417c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40022000 	.word	0x40022000

0800417c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004186:	4b23      	ldr	r3, [pc, #140]	; (8004214 <FLASH_SetErrorCode+0x98>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004192:	4b21      	ldr	r3, [pc, #132]	; (8004218 <FLASH_SetErrorCode+0x9c>)
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	f043 0302 	orr.w	r3, r3, #2
 800419a:	4a1f      	ldr	r2, [pc, #124]	; (8004218 <FLASH_SetErrorCode+0x9c>)
 800419c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f043 0310 	orr.w	r3, r3, #16
 80041a4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80041a6:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <FLASH_SetErrorCode+0x98>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80041b2:	4b19      	ldr	r3, [pc, #100]	; (8004218 <FLASH_SetErrorCode+0x9c>)
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	4a17      	ldr	r2, [pc, #92]	; (8004218 <FLASH_SetErrorCode+0x9c>)
 80041bc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f043 0304 	orr.w	r3, r3, #4
 80041c4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80041c6:	4b13      	ldr	r3, [pc, #76]	; (8004214 <FLASH_SetErrorCode+0x98>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <FLASH_SetErrorCode+0x9c>)
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f043 0304 	orr.w	r3, r3, #4
 80041da:	4a0f      	ldr	r2, [pc, #60]	; (8004218 <FLASH_SetErrorCode+0x9c>)
 80041dc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <FLASH_SetErrorCode+0x98>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	4a0c      	ldr	r2, [pc, #48]	; (8004214 <FLASH_SetErrorCode+0x98>)
 80041e4:	f023 0301 	bic.w	r3, r3, #1
 80041e8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f240 1201 	movw	r2, #257	; 0x101
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d106      	bne.n	8004202 <FLASH_SetErrorCode+0x86>
 80041f4:	4b07      	ldr	r3, [pc, #28]	; (8004214 <FLASH_SetErrorCode+0x98>)
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	4a06      	ldr	r2, [pc, #24]	; (8004214 <FLASH_SetErrorCode+0x98>)
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	61d3      	str	r3, [r2, #28]
}  
 8004200:	e002      	b.n	8004208 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004202:	4a04      	ldr	r2, [pc, #16]	; (8004214 <FLASH_SetErrorCode+0x98>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	60d3      	str	r3, [r2, #12]
}  
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40022000 	.word	0x40022000
 8004218:	20003e78 	.word	0x20003e78

0800421c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800422e:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <HAL_FLASHEx_Erase+0xd0>)
 8004230:	7e1b      	ldrb	r3, [r3, #24]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_FLASHEx_Erase+0x1e>
 8004236:	2302      	movs	r3, #2
 8004238:	e053      	b.n	80042e2 <HAL_FLASHEx_Erase+0xc6>
 800423a:	4b2c      	ldr	r3, [pc, #176]	; (80042ec <HAL_FLASHEx_Erase+0xd0>)
 800423c:	2201      	movs	r2, #1
 800423e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d116      	bne.n	8004276 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004248:	f24c 3050 	movw	r0, #50000	; 0xc350
 800424c:	f7ff ff50 	bl	80040f0 <FLASH_WaitForLastOperation>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d141      	bne.n	80042da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004256:	2001      	movs	r0, #1
 8004258:	f000 f84c 	bl	80042f4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800425c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004260:	f7ff ff46 	bl	80040f0 <FLASH_WaitForLastOperation>
 8004264:	4603      	mov	r3, r0
 8004266:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004268:	4b21      	ldr	r3, [pc, #132]	; (80042f0 <HAL_FLASHEx_Erase+0xd4>)
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	4a20      	ldr	r2, [pc, #128]	; (80042f0 <HAL_FLASHEx_Erase+0xd4>)
 800426e:	f023 0304 	bic.w	r3, r3, #4
 8004272:	6113      	str	r3, [r2, #16]
 8004274:	e031      	b.n	80042da <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004276:	f24c 3050 	movw	r0, #50000	; 0xc350
 800427a:	f7ff ff39 	bl	80040f0 <FLASH_WaitForLastOperation>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d12a      	bne.n	80042da <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	f04f 32ff 	mov.w	r2, #4294967295
 800428a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	e019      	b.n	80042c8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004294:	68b8      	ldr	r0, [r7, #8]
 8004296:	f000 f849 	bl	800432c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800429a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800429e:	f7ff ff27 	bl	80040f0 <FLASH_WaitForLastOperation>
 80042a2:	4603      	mov	r3, r0
 80042a4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_FLASHEx_Erase+0xd4>)
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	4a11      	ldr	r2, [pc, #68]	; (80042f0 <HAL_FLASHEx_Erase+0xd4>)
 80042ac:	f023 0302 	bic.w	r3, r3, #2
 80042b0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	601a      	str	r2, [r3, #0]
            break;
 80042be:	e00c      	b.n	80042da <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	02da      	lsls	r2, r3, #11
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d3dc      	bcc.n	8004294 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042da:	4b04      	ldr	r3, [pc, #16]	; (80042ec <HAL_FLASHEx_Erase+0xd0>)
 80042dc:	2200      	movs	r2, #0
 80042de:	761a      	strb	r2, [r3, #24]

  return status;
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20003e78 	.word	0x20003e78
 80042f0:	40022000 	.word	0x40022000

080042f4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <FLASH_MassErase+0x30>)
 80042fe:	2200      	movs	r2, #0
 8004300:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <FLASH_MassErase+0x34>)
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	4a08      	ldr	r2, [pc, #32]	; (8004328 <FLASH_MassErase+0x34>)
 8004308:	f043 0304 	orr.w	r3, r3, #4
 800430c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <FLASH_MassErase+0x34>)
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	4a05      	ldr	r2, [pc, #20]	; (8004328 <FLASH_MassErase+0x34>)
 8004314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004318:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	20003e78 	.word	0x20003e78
 8004328:	40022000 	.word	0x40022000

0800432c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004334:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <FLASH_PageErase+0x38>)
 8004336:	2200      	movs	r2, #0
 8004338:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <FLASH_PageErase+0x3c>)
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <FLASH_PageErase+0x3c>)
 8004340:	f043 0302 	orr.w	r3, r3, #2
 8004344:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004346:	4a08      	ldr	r2, [pc, #32]	; (8004368 <FLASH_PageErase+0x3c>)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <FLASH_PageErase+0x3c>)
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	4a05      	ldr	r2, [pc, #20]	; (8004368 <FLASH_PageErase+0x3c>)
 8004352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004356:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20003e78 	.word	0x20003e78
 8004368:	40022000 	.word	0x40022000

0800436c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800436c:	b480      	push	{r7}
 800436e:	b08b      	sub	sp, #44	; 0x2c
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004376:	2300      	movs	r3, #0
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800437a:	2300      	movs	r3, #0
 800437c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800437e:	e179      	b.n	8004674 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004380:	2201      	movs	r2, #1
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	429a      	cmp	r2, r3
 800439a:	f040 8168 	bne.w	800466e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4aa0      	ldr	r2, [pc, #640]	; (8004624 <HAL_GPIO_Init+0x2b8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d05e      	beq.n	8004466 <HAL_GPIO_Init+0xfa>
 80043a8:	4a9e      	ldr	r2, [pc, #632]	; (8004624 <HAL_GPIO_Init+0x2b8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d875      	bhi.n	800449a <HAL_GPIO_Init+0x12e>
 80043ae:	4a9e      	ldr	r2, [pc, #632]	; (8004628 <HAL_GPIO_Init+0x2bc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d058      	beq.n	8004466 <HAL_GPIO_Init+0xfa>
 80043b4:	4a9c      	ldr	r2, [pc, #624]	; (8004628 <HAL_GPIO_Init+0x2bc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d86f      	bhi.n	800449a <HAL_GPIO_Init+0x12e>
 80043ba:	4a9c      	ldr	r2, [pc, #624]	; (800462c <HAL_GPIO_Init+0x2c0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d052      	beq.n	8004466 <HAL_GPIO_Init+0xfa>
 80043c0:	4a9a      	ldr	r2, [pc, #616]	; (800462c <HAL_GPIO_Init+0x2c0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d869      	bhi.n	800449a <HAL_GPIO_Init+0x12e>
 80043c6:	4a9a      	ldr	r2, [pc, #616]	; (8004630 <HAL_GPIO_Init+0x2c4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d04c      	beq.n	8004466 <HAL_GPIO_Init+0xfa>
 80043cc:	4a98      	ldr	r2, [pc, #608]	; (8004630 <HAL_GPIO_Init+0x2c4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d863      	bhi.n	800449a <HAL_GPIO_Init+0x12e>
 80043d2:	4a98      	ldr	r2, [pc, #608]	; (8004634 <HAL_GPIO_Init+0x2c8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d046      	beq.n	8004466 <HAL_GPIO_Init+0xfa>
 80043d8:	4a96      	ldr	r2, [pc, #600]	; (8004634 <HAL_GPIO_Init+0x2c8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d85d      	bhi.n	800449a <HAL_GPIO_Init+0x12e>
 80043de:	2b12      	cmp	r3, #18
 80043e0:	d82a      	bhi.n	8004438 <HAL_GPIO_Init+0xcc>
 80043e2:	2b12      	cmp	r3, #18
 80043e4:	d859      	bhi.n	800449a <HAL_GPIO_Init+0x12e>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <HAL_GPIO_Init+0x80>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004467 	.word	0x08004467
 80043f0:	08004441 	.word	0x08004441
 80043f4:	08004453 	.word	0x08004453
 80043f8:	08004495 	.word	0x08004495
 80043fc:	0800449b 	.word	0x0800449b
 8004400:	0800449b 	.word	0x0800449b
 8004404:	0800449b 	.word	0x0800449b
 8004408:	0800449b 	.word	0x0800449b
 800440c:	0800449b 	.word	0x0800449b
 8004410:	0800449b 	.word	0x0800449b
 8004414:	0800449b 	.word	0x0800449b
 8004418:	0800449b 	.word	0x0800449b
 800441c:	0800449b 	.word	0x0800449b
 8004420:	0800449b 	.word	0x0800449b
 8004424:	0800449b 	.word	0x0800449b
 8004428:	0800449b 	.word	0x0800449b
 800442c:	0800449b 	.word	0x0800449b
 8004430:	08004449 	.word	0x08004449
 8004434:	0800445d 	.word	0x0800445d
 8004438:	4a7f      	ldr	r2, [pc, #508]	; (8004638 <HAL_GPIO_Init+0x2cc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800443e:	e02c      	b.n	800449a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	623b      	str	r3, [r7, #32]
          break;
 8004446:	e029      	b.n	800449c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	3304      	adds	r3, #4
 800444e:	623b      	str	r3, [r7, #32]
          break;
 8004450:	e024      	b.n	800449c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	3308      	adds	r3, #8
 8004458:	623b      	str	r3, [r7, #32]
          break;
 800445a:	e01f      	b.n	800449c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	330c      	adds	r3, #12
 8004462:	623b      	str	r3, [r7, #32]
          break;
 8004464:	e01a      	b.n	800449c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800446e:	2304      	movs	r3, #4
 8004470:	623b      	str	r3, [r7, #32]
          break;
 8004472:	e013      	b.n	800449c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d105      	bne.n	8004488 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800447c:	2308      	movs	r3, #8
 800447e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	611a      	str	r2, [r3, #16]
          break;
 8004486:	e009      	b.n	800449c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004488:	2308      	movs	r3, #8
 800448a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	615a      	str	r2, [r3, #20]
          break;
 8004492:	e003      	b.n	800449c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004494:	2300      	movs	r3, #0
 8004496:	623b      	str	r3, [r7, #32]
          break;
 8004498:	e000      	b.n	800449c <HAL_GPIO_Init+0x130>
          break;
 800449a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2bff      	cmp	r3, #255	; 0xff
 80044a0:	d801      	bhi.n	80044a6 <HAL_GPIO_Init+0x13a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	e001      	b.n	80044aa <HAL_GPIO_Init+0x13e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3304      	adds	r3, #4
 80044aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2bff      	cmp	r3, #255	; 0xff
 80044b0:	d802      	bhi.n	80044b8 <HAL_GPIO_Init+0x14c>
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	e002      	b.n	80044be <HAL_GPIO_Init+0x152>
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	3b08      	subs	r3, #8
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	210f      	movs	r1, #15
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	fa01 f303 	lsl.w	r3, r1, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	401a      	ands	r2, r3
 80044d0:	6a39      	ldr	r1, [r7, #32]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	fa01 f303 	lsl.w	r3, r1, r3
 80044d8:	431a      	orrs	r2, r3
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80c1 	beq.w	800466e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044ec:	4b53      	ldr	r3, [pc, #332]	; (800463c <HAL_GPIO_Init+0x2d0>)
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	4a52      	ldr	r2, [pc, #328]	; (800463c <HAL_GPIO_Init+0x2d0>)
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	6193      	str	r3, [r2, #24]
 80044f8:	4b50      	ldr	r3, [pc, #320]	; (800463c <HAL_GPIO_Init+0x2d0>)
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004504:	4a4e      	ldr	r2, [pc, #312]	; (8004640 <HAL_GPIO_Init+0x2d4>)
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	3302      	adds	r3, #2
 800450c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004510:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	220f      	movs	r2, #15
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4013      	ands	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a46      	ldr	r2, [pc, #280]	; (8004644 <HAL_GPIO_Init+0x2d8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d01f      	beq.n	8004570 <HAL_GPIO_Init+0x204>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a45      	ldr	r2, [pc, #276]	; (8004648 <HAL_GPIO_Init+0x2dc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d019      	beq.n	800456c <HAL_GPIO_Init+0x200>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a44      	ldr	r2, [pc, #272]	; (800464c <HAL_GPIO_Init+0x2e0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d013      	beq.n	8004568 <HAL_GPIO_Init+0x1fc>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a43      	ldr	r2, [pc, #268]	; (8004650 <HAL_GPIO_Init+0x2e4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00d      	beq.n	8004564 <HAL_GPIO_Init+0x1f8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a42      	ldr	r2, [pc, #264]	; (8004654 <HAL_GPIO_Init+0x2e8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d007      	beq.n	8004560 <HAL_GPIO_Init+0x1f4>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a41      	ldr	r2, [pc, #260]	; (8004658 <HAL_GPIO_Init+0x2ec>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <HAL_GPIO_Init+0x1f0>
 8004558:	2305      	movs	r3, #5
 800455a:	e00a      	b.n	8004572 <HAL_GPIO_Init+0x206>
 800455c:	2306      	movs	r3, #6
 800455e:	e008      	b.n	8004572 <HAL_GPIO_Init+0x206>
 8004560:	2304      	movs	r3, #4
 8004562:	e006      	b.n	8004572 <HAL_GPIO_Init+0x206>
 8004564:	2303      	movs	r3, #3
 8004566:	e004      	b.n	8004572 <HAL_GPIO_Init+0x206>
 8004568:	2302      	movs	r3, #2
 800456a:	e002      	b.n	8004572 <HAL_GPIO_Init+0x206>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <HAL_GPIO_Init+0x206>
 8004570:	2300      	movs	r3, #0
 8004572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004574:	f002 0203 	and.w	r2, r2, #3
 8004578:	0092      	lsls	r2, r2, #2
 800457a:	4093      	lsls	r3, r2
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004582:	492f      	ldr	r1, [pc, #188]	; (8004640 <HAL_GPIO_Init+0x2d4>)
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	3302      	adds	r3, #2
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d006      	beq.n	80045aa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800459c:	4b2f      	ldr	r3, [pc, #188]	; (800465c <HAL_GPIO_Init+0x2f0>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	492e      	ldr	r1, [pc, #184]	; (800465c <HAL_GPIO_Init+0x2f0>)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]
 80045a8:	e006      	b.n	80045b8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045aa:	4b2c      	ldr	r3, [pc, #176]	; (800465c <HAL_GPIO_Init+0x2f0>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	43db      	mvns	r3, r3
 80045b2:	492a      	ldr	r1, [pc, #168]	; (800465c <HAL_GPIO_Init+0x2f0>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d006      	beq.n	80045d2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045c4:	4b25      	ldr	r3, [pc, #148]	; (800465c <HAL_GPIO_Init+0x2f0>)
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	4924      	ldr	r1, [pc, #144]	; (800465c <HAL_GPIO_Init+0x2f0>)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]
 80045d0:	e006      	b.n	80045e0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045d2:	4b22      	ldr	r3, [pc, #136]	; (800465c <HAL_GPIO_Init+0x2f0>)
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	43db      	mvns	r3, r3
 80045da:	4920      	ldr	r1, [pc, #128]	; (800465c <HAL_GPIO_Init+0x2f0>)
 80045dc:	4013      	ands	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80045ec:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_GPIO_Init+0x2f0>)
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	491a      	ldr	r1, [pc, #104]	; (800465c <HAL_GPIO_Init+0x2f0>)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]
 80045f8:	e006      	b.n	8004608 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80045fa:	4b18      	ldr	r3, [pc, #96]	; (800465c <HAL_GPIO_Init+0x2f0>)
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	43db      	mvns	r3, r3
 8004602:	4916      	ldr	r1, [pc, #88]	; (800465c <HAL_GPIO_Init+0x2f0>)
 8004604:	4013      	ands	r3, r2
 8004606:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d025      	beq.n	8004660 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004614:	4b11      	ldr	r3, [pc, #68]	; (800465c <HAL_GPIO_Init+0x2f0>)
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	4910      	ldr	r1, [pc, #64]	; (800465c <HAL_GPIO_Init+0x2f0>)
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	4313      	orrs	r3, r2
 800461e:	60cb      	str	r3, [r1, #12]
 8004620:	e025      	b.n	800466e <HAL_GPIO_Init+0x302>
 8004622:	bf00      	nop
 8004624:	10320000 	.word	0x10320000
 8004628:	10310000 	.word	0x10310000
 800462c:	10220000 	.word	0x10220000
 8004630:	10210000 	.word	0x10210000
 8004634:	10120000 	.word	0x10120000
 8004638:	10110000 	.word	0x10110000
 800463c:	40021000 	.word	0x40021000
 8004640:	40010000 	.word	0x40010000
 8004644:	40010800 	.word	0x40010800
 8004648:	40010c00 	.word	0x40010c00
 800464c:	40011000 	.word	0x40011000
 8004650:	40011400 	.word	0x40011400
 8004654:	40011800 	.word	0x40011800
 8004658:	40011c00 	.word	0x40011c00
 800465c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_GPIO_Init+0x324>)
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	43db      	mvns	r3, r3
 8004668:	4909      	ldr	r1, [pc, #36]	; (8004690 <HAL_GPIO_Init+0x324>)
 800466a:	4013      	ands	r3, r2
 800466c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	3301      	adds	r3, #1
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	fa22 f303 	lsr.w	r3, r2, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	f47f ae7e 	bne.w	8004380 <HAL_GPIO_Init+0x14>
  }
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop
 8004688:	372c      	adds	r7, #44	; 0x2c
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr
 8004690:	40010400 	.word	0x40010400

08004694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	887b      	ldrh	r3, [r7, #2]
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
 80046b0:	e001      	b.n	80046b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046b2:	2300      	movs	r3, #0
 80046b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr

080046c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	460b      	mov	r3, r1
 80046cc:	807b      	strh	r3, [r7, #2]
 80046ce:	4613      	mov	r3, r2
 80046d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046d2:	787b      	ldrb	r3, [r7, #1]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046d8:	887a      	ldrh	r2, [r7, #2]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80046de:	e003      	b.n	80046e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046e0:	887b      	ldrh	r3, [r7, #2]
 80046e2:	041a      	lsls	r2, r3, #16
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	611a      	str	r2, [r3, #16]
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
	...

080046f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d006      	beq.n	8004718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800470a:	4a05      	ldr	r2, [pc, #20]	; (8004720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fc fcca 	bl	80010ac <HAL_GPIO_EXTI_Callback>
  }
}
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40010400 	.word	0x40010400

08004724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e26c      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8087 	beq.w	8004852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004744:	4b92      	ldr	r3, [pc, #584]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	2b04      	cmp	r3, #4
 800474e:	d00c      	beq.n	800476a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004750:	4b8f      	ldr	r3, [pc, #572]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 030c 	and.w	r3, r3, #12
 8004758:	2b08      	cmp	r3, #8
 800475a:	d112      	bne.n	8004782 <HAL_RCC_OscConfig+0x5e>
 800475c:	4b8c      	ldr	r3, [pc, #560]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004768:	d10b      	bne.n	8004782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476a:	4b89      	ldr	r3, [pc, #548]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d06c      	beq.n	8004850 <HAL_RCC_OscConfig+0x12c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d168      	bne.n	8004850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e246      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478a:	d106      	bne.n	800479a <HAL_RCC_OscConfig+0x76>
 800478c:	4b80      	ldr	r3, [pc, #512]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a7f      	ldr	r2, [pc, #508]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	e02e      	b.n	80047f8 <HAL_RCC_OscConfig+0xd4>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10c      	bne.n	80047bc <HAL_RCC_OscConfig+0x98>
 80047a2:	4b7b      	ldr	r3, [pc, #492]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a7a      	ldr	r2, [pc, #488]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	4b78      	ldr	r3, [pc, #480]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a77      	ldr	r2, [pc, #476]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e01d      	b.n	80047f8 <HAL_RCC_OscConfig+0xd4>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0xbc>
 80047c6:	4b72      	ldr	r3, [pc, #456]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a71      	ldr	r2, [pc, #452]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	4b6f      	ldr	r3, [pc, #444]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a6e      	ldr	r2, [pc, #440]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	e00b      	b.n	80047f8 <HAL_RCC_OscConfig+0xd4>
 80047e0:	4b6b      	ldr	r3, [pc, #428]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a6a      	ldr	r2, [pc, #424]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	4b68      	ldr	r3, [pc, #416]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a67      	ldr	r2, [pc, #412]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d013      	beq.n	8004828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004800:	f7ff f994 	bl	8003b2c <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004808:	f7ff f990 	bl	8003b2c <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	; 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e1fa      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481a:	4b5d      	ldr	r3, [pc, #372]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0xe4>
 8004826:	e014      	b.n	8004852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004828:	f7ff f980 	bl	8003b2c <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004830:	f7ff f97c 	bl	8003b2c <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	; 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e1e6      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004842:	4b53      	ldr	r3, [pc, #332]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x10c>
 800484e:	e000      	b.n	8004852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d063      	beq.n	8004926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800485e:	4b4c      	ldr	r3, [pc, #304]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00b      	beq.n	8004882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800486a:	4b49      	ldr	r3, [pc, #292]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b08      	cmp	r3, #8
 8004874:	d11c      	bne.n	80048b0 <HAL_RCC_OscConfig+0x18c>
 8004876:	4b46      	ldr	r3, [pc, #280]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d116      	bne.n	80048b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004882:	4b43      	ldr	r3, [pc, #268]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_RCC_OscConfig+0x176>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d001      	beq.n	800489a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e1ba      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489a:	4b3d      	ldr	r3, [pc, #244]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4939      	ldr	r1, [pc, #228]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ae:	e03a      	b.n	8004926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d020      	beq.n	80048fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048b8:	4b36      	ldr	r3, [pc, #216]	; (8004994 <HAL_RCC_OscConfig+0x270>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048be:	f7ff f935 	bl	8003b2c <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c6:	f7ff f931 	bl	8003b2c <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e19b      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d8:	4b2d      	ldr	r3, [pc, #180]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e4:	4b2a      	ldr	r3, [pc, #168]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4927      	ldr	r1, [pc, #156]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	600b      	str	r3, [r1, #0]
 80048f8:	e015      	b.n	8004926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048fa:	4b26      	ldr	r3, [pc, #152]	; (8004994 <HAL_RCC_OscConfig+0x270>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7ff f914 	bl	8003b2c <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004908:	f7ff f910 	bl	8003b2c <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e17a      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800491a:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f0      	bne.n	8004908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d03a      	beq.n	80049a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d019      	beq.n	800496e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800493a:	4b17      	ldr	r3, [pc, #92]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 800493c:	2201      	movs	r2, #1
 800493e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004940:	f7ff f8f4 	bl	8003b2c <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004948:	f7ff f8f0 	bl	8003b2c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e15a      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495a:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f0      	beq.n	8004948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004966:	2001      	movs	r0, #1
 8004968:	f000 faa6 	bl	8004eb8 <RCC_Delay>
 800496c:	e01c      	b.n	80049a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800496e:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004974:	f7ff f8da 	bl	8003b2c <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497a:	e00f      	b.n	800499c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497c:	f7ff f8d6 	bl	8003b2c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d908      	bls.n	800499c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e140      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
 800498e:	bf00      	nop
 8004990:	40021000 	.word	0x40021000
 8004994:	42420000 	.word	0x42420000
 8004998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800499c:	4b9e      	ldr	r3, [pc, #632]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e9      	bne.n	800497c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80a6 	beq.w	8004b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b6:	2300      	movs	r3, #0
 80049b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ba:	4b97      	ldr	r3, [pc, #604]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10d      	bne.n	80049e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c6:	4b94      	ldr	r3, [pc, #592]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	4a93      	ldr	r2, [pc, #588]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 80049cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d0:	61d3      	str	r3, [r2, #28]
 80049d2:	4b91      	ldr	r3, [pc, #580]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049de:	2301      	movs	r3, #1
 80049e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e2:	4b8e      	ldr	r3, [pc, #568]	; (8004c1c <HAL_RCC_OscConfig+0x4f8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d118      	bne.n	8004a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ee:	4b8b      	ldr	r3, [pc, #556]	; (8004c1c <HAL_RCC_OscConfig+0x4f8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a8a      	ldr	r2, [pc, #552]	; (8004c1c <HAL_RCC_OscConfig+0x4f8>)
 80049f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049fa:	f7ff f897 	bl	8003b2c <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a02:	f7ff f893 	bl	8003b2c <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b64      	cmp	r3, #100	; 0x64
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e0fd      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a14:	4b81      	ldr	r3, [pc, #516]	; (8004c1c <HAL_RCC_OscConfig+0x4f8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d106      	bne.n	8004a36 <HAL_RCC_OscConfig+0x312>
 8004a28:	4b7b      	ldr	r3, [pc, #492]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	4a7a      	ldr	r2, [pc, #488]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	6213      	str	r3, [r2, #32]
 8004a34:	e02d      	b.n	8004a92 <HAL_RCC_OscConfig+0x36e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCC_OscConfig+0x334>
 8004a3e:	4b76      	ldr	r3, [pc, #472]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	4a75      	ldr	r2, [pc, #468]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	6213      	str	r3, [r2, #32]
 8004a4a:	4b73      	ldr	r3, [pc, #460]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	4a72      	ldr	r2, [pc, #456]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	6213      	str	r3, [r2, #32]
 8004a56:	e01c      	b.n	8004a92 <HAL_RCC_OscConfig+0x36e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b05      	cmp	r3, #5
 8004a5e:	d10c      	bne.n	8004a7a <HAL_RCC_OscConfig+0x356>
 8004a60:	4b6d      	ldr	r3, [pc, #436]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	4a6c      	ldr	r2, [pc, #432]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a66:	f043 0304 	orr.w	r3, r3, #4
 8004a6a:	6213      	str	r3, [r2, #32]
 8004a6c:	4b6a      	ldr	r3, [pc, #424]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	4a69      	ldr	r2, [pc, #420]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	6213      	str	r3, [r2, #32]
 8004a78:	e00b      	b.n	8004a92 <HAL_RCC_OscConfig+0x36e>
 8004a7a:	4b67      	ldr	r3, [pc, #412]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	4a66      	ldr	r2, [pc, #408]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	6213      	str	r3, [r2, #32]
 8004a86:	4b64      	ldr	r3, [pc, #400]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	4a63      	ldr	r2, [pc, #396]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d015      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a9a:	f7ff f847 	bl	8003b2c <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa0:	e00a      	b.n	8004ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa2:	f7ff f843 	bl	8003b2c <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e0ab      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab8:	4b57      	ldr	r3, [pc, #348]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ee      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x37e>
 8004ac4:	e014      	b.n	8004af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac6:	f7ff f831 	bl	8003b2c <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004acc:	e00a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ace:	f7ff f82d 	bl	8003b2c <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e095      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae4:	4b4c      	ldr	r3, [pc, #304]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1ee      	bne.n	8004ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d105      	bne.n	8004b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af6:	4b48      	ldr	r3, [pc, #288]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	4a47      	ldr	r2, [pc, #284]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8081 	beq.w	8004c0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b0c:	4b42      	ldr	r3, [pc, #264]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 030c 	and.w	r3, r3, #12
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d061      	beq.n	8004bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d146      	bne.n	8004bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b20:	4b3f      	ldr	r3, [pc, #252]	; (8004c20 <HAL_RCC_OscConfig+0x4fc>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b26:	f7ff f801 	bl	8003b2c <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2e:	f7fe fffd 	bl	8003b2c <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e067      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b40:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f0      	bne.n	8004b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b54:	d108      	bne.n	8004b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b56:	4b30      	ldr	r3, [pc, #192]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	492d      	ldr	r1, [pc, #180]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b68:	4b2b      	ldr	r3, [pc, #172]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a19      	ldr	r1, [r3, #32]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	4927      	ldr	r1, [pc, #156]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b80:	4b27      	ldr	r3, [pc, #156]	; (8004c20 <HAL_RCC_OscConfig+0x4fc>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b86:	f7fe ffd1 	bl	8003b2c <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8e:	f7fe ffcd 	bl	8003b2c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e037      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ba0:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x46a>
 8004bac:	e02f      	b.n	8004c0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bae:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <HAL_RCC_OscConfig+0x4fc>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fe ffba 	bl	8003b2c <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fe ffb6 	bl	8003b2c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e020      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x498>
 8004bda:	e018      	b.n	8004c0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e013      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d106      	bne.n	8004c0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d001      	beq.n	8004c0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	42420060 	.word	0x42420060

08004c24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0d0      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c38:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d910      	bls.n	8004c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c46:	4b67      	ldr	r3, [pc, #412]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 0207 	bic.w	r2, r3, #7
 8004c4e:	4965      	ldr	r1, [pc, #404]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b63      	ldr	r3, [pc, #396]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0b8      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c80:	4b59      	ldr	r3, [pc, #356]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4a58      	ldr	r2, [pc, #352]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c98:	4b53      	ldr	r3, [pc, #332]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4a52      	ldr	r2, [pc, #328]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ca2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca4:	4b50      	ldr	r3, [pc, #320]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	494d      	ldr	r1, [pc, #308]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d040      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	4b47      	ldr	r3, [pc, #284]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d115      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e07f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d107      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce2:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e073      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf2:	4b3d      	ldr	r3, [pc, #244]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e06b      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d02:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f023 0203 	bic.w	r2, r3, #3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4936      	ldr	r1, [pc, #216]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d14:	f7fe ff0a 	bl	8003b2c <HAL_GetTick>
 8004d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d1c:	f7fe ff06 	bl	8003b2c <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e053      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d32:	4b2d      	ldr	r3, [pc, #180]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f003 020c 	and.w	r2, r3, #12
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d1eb      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d44:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d210      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d52:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 0207 	bic.w	r2, r3, #7
 8004d5a:	4922      	ldr	r1, [pc, #136]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e032      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d80:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4916      	ldr	r1, [pc, #88]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d9e:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	490e      	ldr	r1, [pc, #56]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004db2:	f000 f821 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 8004db6:	4602      	mov	r2, r0
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	490a      	ldr	r1, [pc, #40]	; (8004dec <HAL_RCC_ClockConfig+0x1c8>)
 8004dc4:	5ccb      	ldrb	r3, [r1, r3]
 8004dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dca:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <HAL_RCC_ClockConfig+0x1cc>)
 8004dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dce:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <HAL_RCC_ClockConfig+0x1d0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe fe68 	bl	8003aa8 <HAL_InitTick>

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40022000 	.word	0x40022000
 8004de8:	40021000 	.word	0x40021000
 8004dec:	08009494 	.word	0x08009494
 8004df0:	20000000 	.word	0x20000000
 8004df4:	20000004 	.word	0x20000004

08004df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df8:	b490      	push	{r4, r7}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004dfe:	4b2a      	ldr	r3, [pc, #168]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e00:	1d3c      	adds	r4, r7, #4
 8004e02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e08:	f240 2301 	movw	r3, #513	; 0x201
 8004e0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	2300      	movs	r3, #0
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	2300      	movs	r3, #0
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e22:	4b22      	ldr	r3, [pc, #136]	; (8004eac <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d002      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x40>
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d003      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0x46>
 8004e36:	e02d      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e38:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e3a:	623b      	str	r3, [r7, #32]
      break;
 8004e3c:	e02d      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	0c9b      	lsrs	r3, r3, #18
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d013      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e5c:	4b13      	ldr	r3, [pc, #76]	; (8004eac <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	0c5b      	lsrs	r3, r3, #17
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	4a0e      	ldr	r2, [pc, #56]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e76:	fb02 f203 	mul.w	r2, r2, r3
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
 8004e82:	e004      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4a0b      	ldr	r2, [pc, #44]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e88:	fb02 f303 	mul.w	r3, r2, r3
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	623b      	str	r3, [r7, #32]
      break;
 8004e92:	e002      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e96:	623b      	str	r3, [r7, #32]
      break;
 8004e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3728      	adds	r7, #40	; 0x28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc90      	pop	{r4, r7}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	08009430 	.word	0x08009430
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	007a1200 	.word	0x007a1200
 8004eb4:	003d0900 	.word	0x003d0900

08004eb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <RCC_Delay+0x34>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a0a      	ldr	r2, [pc, #40]	; (8004ef0 <RCC_Delay+0x38>)
 8004ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eca:	0a5b      	lsrs	r3, r3, #9
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ed4:	bf00      	nop
  }
  while (Delay --);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1e5a      	subs	r2, r3, #1
 8004eda:	60fa      	str	r2, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f9      	bne.n	8004ed4 <RCC_Delay+0x1c>
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr
 8004eec:	20000000 	.word	0x20000000
 8004ef0:	10624dd3 	.word	0x10624dd3

08004ef4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e076      	b.n	8004ff4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d108      	bne.n	8004f20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f16:	d009      	beq.n	8004f2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	61da      	str	r2, [r3, #28]
 8004f1e:	e005      	b.n	8004f2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fe fc68 	bl	800381c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb0:	ea42 0103 	orr.w	r1, r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	0c1a      	lsrs	r2, r3, #16
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f002 0204 	and.w	r2, r2, #4
 8004fd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fe2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	4613      	mov	r3, r2
 800500a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_SPI_Transmit+0x22>
 800501a:	2302      	movs	r3, #2
 800501c:	e126      	b.n	800526c <HAL_SPI_Transmit+0x270>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005026:	f7fe fd81 	bl	8003b2c <HAL_GetTick>
 800502a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800502c:	88fb      	ldrh	r3, [r7, #6]
 800502e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	d002      	beq.n	8005042 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800503c:	2302      	movs	r3, #2
 800503e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005040:	e10b      	b.n	800525a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <HAL_SPI_Transmit+0x52>
 8005048:	88fb      	ldrh	r3, [r7, #6]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d102      	bne.n	8005054 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005052:	e102      	b.n	800525a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2203      	movs	r2, #3
 8005058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	88fa      	ldrh	r2, [r7, #6]
 800506c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	88fa      	ldrh	r2, [r7, #6]
 8005072:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800509a:	d10f      	bne.n	80050bc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b40      	cmp	r3, #64	; 0x40
 80050c8:	d007      	beq.n	80050da <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e2:	d14b      	bne.n	800517c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <HAL_SPI_Transmit+0xf6>
 80050ec:	8afb      	ldrh	r3, [r7, #22]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d13e      	bne.n	8005170 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	881a      	ldrh	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	1c9a      	adds	r2, r3, #2
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005116:	e02b      	b.n	8005170 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b02      	cmp	r3, #2
 8005124:	d112      	bne.n	800514c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	881a      	ldrh	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	1c9a      	adds	r2, r3, #2
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	86da      	strh	r2, [r3, #54]	; 0x36
 800514a:	e011      	b.n	8005170 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800514c:	f7fe fcee 	bl	8003b2c <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	429a      	cmp	r2, r3
 800515a:	d803      	bhi.n	8005164 <HAL_SPI_Transmit+0x168>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d102      	bne.n	800516a <HAL_SPI_Transmit+0x16e>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800516e:	e074      	b.n	800525a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1ce      	bne.n	8005118 <HAL_SPI_Transmit+0x11c>
 800517a:	e04c      	b.n	8005216 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <HAL_SPI_Transmit+0x18e>
 8005184:	8afb      	ldrh	r3, [r7, #22]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d140      	bne.n	800520c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	7812      	ldrb	r2, [r2, #0]
 8005196:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051b0:	e02c      	b.n	800520c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d113      	bne.n	80051e8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	330c      	adds	r3, #12
 80051ca:	7812      	ldrb	r2, [r2, #0]
 80051cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80051e6:	e011      	b.n	800520c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051e8:	f7fe fca0 	bl	8003b2c <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d803      	bhi.n	8005200 <HAL_SPI_Transmit+0x204>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d102      	bne.n	8005206 <HAL_SPI_Transmit+0x20a>
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	77fb      	strb	r3, [r7, #31]
          goto error;
 800520a:	e026      	b.n	800525a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1cd      	bne.n	80051b2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	6839      	ldr	r1, [r7, #0]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fcbc 	bl	8005b98 <SPI_EndRxTxTransaction>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10a      	bne.n	800524a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005234:	2300      	movs	r3, #0
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	77fb      	strb	r3, [r7, #31]
 8005256:	e000      	b.n	800525a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005258:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800526a:	7ffb      	ldrb	r3, [r7, #31]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3720      	adds	r7, #32
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af02      	add	r7, sp, #8
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	4613      	mov	r3, r2
 8005282:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005290:	d112      	bne.n	80052b8 <HAL_SPI_Receive+0x44>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10e      	bne.n	80052b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2204      	movs	r2, #4
 800529e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f8f1 	bl	8005496 <HAL_SPI_TransmitReceive>
 80052b4:	4603      	mov	r3, r0
 80052b6:	e0ea      	b.n	800548e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_SPI_Receive+0x52>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e0e3      	b.n	800548e <HAL_SPI_Receive+0x21a>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052ce:	f7fe fc2d 	bl	8003b2c <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d002      	beq.n	80052e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80052e0:	2302      	movs	r3, #2
 80052e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052e4:	e0ca      	b.n	800547c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_SPI_Receive+0x7e>
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d102      	bne.n	80052f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052f6:	e0c1      	b.n	800547c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2204      	movs	r2, #4
 80052fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	88fa      	ldrh	r2, [r7, #6]
 8005310:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	88fa      	ldrh	r2, [r7, #6]
 8005316:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800533e:	d10f      	bne.n	8005360 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800534e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800535e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d007      	beq.n	800537e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800537c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d162      	bne.n	800544c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005386:	e02e      	b.n	80053e6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b01      	cmp	r3, #1
 8005394:	d115      	bne.n	80053c2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f103 020c 	add.w	r2, r3, #12
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	7812      	ldrb	r2, [r2, #0]
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053c0:	e011      	b.n	80053e6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053c2:	f7fe fbb3 	bl	8003b2c <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d803      	bhi.n	80053da <HAL_SPI_Receive+0x166>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d8:	d102      	bne.n	80053e0 <HAL_SPI_Receive+0x16c>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d102      	bne.n	80053e6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053e4:	e04a      	b.n	800547c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1cb      	bne.n	8005388 <HAL_SPI_Receive+0x114>
 80053f0:	e031      	b.n	8005456 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d113      	bne.n	8005428 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	b292      	uxth	r2, r2
 800540c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	1c9a      	adds	r2, r3, #2
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005426:	e011      	b.n	800544c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005428:	f7fe fb80 	bl	8003b2c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d803      	bhi.n	8005440 <HAL_SPI_Receive+0x1cc>
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543e:	d102      	bne.n	8005446 <HAL_SPI_Receive+0x1d2>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	75fb      	strb	r3, [r7, #23]
          goto error;
 800544a:	e017      	b.n	800547c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1cd      	bne.n	80053f2 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	6839      	ldr	r1, [r7, #0]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fb4a 	bl	8005af4 <SPI_EndRxTransaction>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	75fb      	strb	r3, [r7, #23]
 8005478:	e000      	b.n	800547c <HAL_SPI_Receive+0x208>
  }

error :
 800547a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800548c:	7dfb      	ldrb	r3, [r7, #23]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b08c      	sub	sp, #48	; 0x30
 800549a:	af00      	add	r7, sp, #0
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	607a      	str	r2, [r7, #4]
 80054a2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054a4:	2301      	movs	r3, #1
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_SPI_TransmitReceive+0x26>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e18a      	b.n	80057d2 <HAL_SPI_TransmitReceive+0x33c>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054c4:	f7fe fb32 	bl	8003b2c <HAL_GetTick>
 80054c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054da:	887b      	ldrh	r3, [r7, #2]
 80054dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d00f      	beq.n	8005506 <HAL_SPI_TransmitReceive+0x70>
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ec:	d107      	bne.n	80054fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <HAL_SPI_TransmitReceive+0x68>
 80054f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d003      	beq.n	8005506 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
 8005500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005504:	e15b      	b.n	80057be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_SPI_TransmitReceive+0x82>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_SPI_TransmitReceive+0x82>
 8005512:	887b      	ldrh	r3, [r7, #2]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d103      	bne.n	8005520 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800551e:	e14e      	b.n	80057be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b04      	cmp	r3, #4
 800552a:	d003      	beq.n	8005534 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2205      	movs	r2, #5
 8005530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	887a      	ldrh	r2, [r7, #2]
 8005544:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	887a      	ldrh	r2, [r7, #2]
 800554a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	887a      	ldrh	r2, [r7, #2]
 8005556:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	887a      	ldrh	r2, [r7, #2]
 800555c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d007      	beq.n	8005588 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005586:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005590:	d178      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <HAL_SPI_TransmitReceive+0x10a>
 800559a:	8b7b      	ldrh	r3, [r7, #26]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d166      	bne.n	800566e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	881a      	ldrh	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	1c9a      	adds	r2, r3, #2
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055c4:	e053      	b.n	800566e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d11b      	bne.n	800560c <HAL_SPI_TransmitReceive+0x176>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d016      	beq.n	800560c <HAL_SPI_TransmitReceive+0x176>
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d113      	bne.n	800560c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	881a      	ldrh	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	1c9a      	adds	r2, r3, #2
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	d119      	bne.n	800564e <HAL_SPI_TransmitReceive+0x1b8>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800561e:	b29b      	uxth	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d014      	beq.n	800564e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	b292      	uxth	r2, r2
 8005630:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800564a:	2301      	movs	r3, #1
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800564e:	f7fe fa6d 	bl	8003b2c <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800565a:	429a      	cmp	r2, r3
 800565c:	d807      	bhi.n	800566e <HAL_SPI_TransmitReceive+0x1d8>
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005664:	d003      	beq.n	800566e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800566c:	e0a7      	b.n	80057be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1a6      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x130>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1a1      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x130>
 8005682:	e07c      	b.n	800577e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <HAL_SPI_TransmitReceive+0x1fc>
 800568c:	8b7b      	ldrh	r3, [r7, #26]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d16b      	bne.n	800576a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056b8:	e057      	b.n	800576a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d11c      	bne.n	8005702 <HAL_SPI_TransmitReceive+0x26c>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d017      	beq.n	8005702 <HAL_SPI_TransmitReceive+0x26c>
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d114      	bne.n	8005702 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	7812      	ldrb	r2, [r2, #0]
 80056e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b01      	cmp	r3, #1
 800570e:	d119      	bne.n	8005744 <HAL_SPI_TransmitReceive+0x2ae>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d014      	beq.n	8005744 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005740:	2301      	movs	r3, #1
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005744:	f7fe f9f2 	bl	8003b2c <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005750:	429a      	cmp	r2, r3
 8005752:	d803      	bhi.n	800575c <HAL_SPI_TransmitReceive+0x2c6>
 8005754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	d102      	bne.n	8005762 <HAL_SPI_TransmitReceive+0x2cc>
 800575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575e:	2b00      	cmp	r3, #0
 8005760:	d103      	bne.n	800576a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005768:	e029      	b.n	80057be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1a2      	bne.n	80056ba <HAL_SPI_TransmitReceive+0x224>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d19d      	bne.n	80056ba <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800577e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005780:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fa08 	bl	8005b98 <SPI_EndRxTxTransaction>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d006      	beq.n	800579c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2220      	movs	r2, #32
 8005798:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800579a:	e010      	b.n	80057be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10b      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	e000      	b.n	80057be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80057bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3730      	adds	r7, #48	; 0x30
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	099b      	lsrs	r3, r3, #6
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10f      	bne.n	8005820 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	099b      	lsrs	r3, r3, #6
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d004      	beq.n	8005820 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	4798      	blx	r3
    return;
 800581e:	e0be      	b.n	800599e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	085b      	lsrs	r3, r3, #1
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <HAL_SPI_IRQHandler+0x66>
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	09db      	lsrs	r3, r3, #7
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d004      	beq.n	8005842 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	4798      	blx	r3
    return;
 8005840:	e0ad      	b.n	800599e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_SPI_IRQHandler+0x80>
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	099b      	lsrs	r3, r3, #6
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 80a1 	beq.w	800599e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 809a 	beq.w	800599e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	099b      	lsrs	r3, r3, #6
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d023      	beq.n	80058be <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b03      	cmp	r3, #3
 8005880:	d011      	beq.n	80058a6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	f043 0204 	orr.w	r2, r3, #4
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	e00b      	b.n	80058be <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058a6:	2300      	movs	r3, #0
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	693b      	ldr	r3, [r7, #16]
        return;
 80058bc:	e06f      	b.n	800599e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d014      	beq.n	80058f4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ce:	f043 0201 	orr.w	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d04f      	beq.n	800599c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800590a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d104      	bne.n	8005928 <HAL_SPI_IRQHandler+0x14c>
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d034      	beq.n	8005992 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0203 	bic.w	r2, r2, #3
 8005936:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593c:	2b00      	cmp	r3, #0
 800593e:	d011      	beq.n	8005964 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005944:	4a17      	ldr	r2, [pc, #92]	; (80059a4 <HAL_SPI_IRQHandler+0x1c8>)
 8005946:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594c:	4618      	mov	r0, r3
 800594e:	f7fe fa05 	bl	8003d5c <HAL_DMA_Abort_IT>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005968:	2b00      	cmp	r3, #0
 800596a:	d016      	beq.n	800599a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005970:	4a0c      	ldr	r2, [pc, #48]	; (80059a4 <HAL_SPI_IRQHandler+0x1c8>)
 8005972:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe f9ef 	bl	8003d5c <HAL_DMA_Abort_IT>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005988:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005990:	e003      	b.n	800599a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f808 	bl	80059a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005998:	e000      	b.n	800599c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800599a:	bf00      	nop
    return;
 800599c:	bf00      	nop
  }
}
 800599e:	3720      	adds	r7, #32
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	080059bb 	.word	0x080059bb

080059a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr

080059ba <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f7ff ffe7 	bl	80059a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059da:	bf00      	nop
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059f4:	f7fe f89a 	bl	8003b2c <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	1a9b      	subs	r3, r3, r2
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	4413      	add	r3, r2
 8005a02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a04:	f7fe f892 	bl	8003b2c <HAL_GetTick>
 8005a08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a0a:	4b39      	ldr	r3, [pc, #228]	; (8005af0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	015b      	lsls	r3, r3, #5
 8005a10:	0d1b      	lsrs	r3, r3, #20
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	fb02 f303 	mul.w	r3, r2, r3
 8005a18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a1a:	e054      	b.n	8005ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d050      	beq.n	8005ac6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a24:	f7fe f882 	bl	8003b2c <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d902      	bls.n	8005a3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d13d      	bne.n	8005ab6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a52:	d111      	bne.n	8005a78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a5c:	d004      	beq.n	8005a68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a66:	d107      	bne.n	8005a78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a80:	d10f      	bne.n	8005aa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e017      	b.n	8005ae6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	bf0c      	ite	eq
 8005ad6:	2301      	moveq	r3, #1
 8005ad8:	2300      	movne	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	461a      	mov	r2, r3
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d19b      	bne.n	8005a1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000000 	.word	0x20000000

08005af4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af02      	add	r7, sp, #8
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b08:	d111      	bne.n	8005b2e <SPI_EndRxTransaction+0x3a>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b12:	d004      	beq.n	8005b1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1c:	d107      	bne.n	8005b2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b36:	d117      	bne.n	8005b68 <SPI_EndRxTransaction+0x74>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b40:	d112      	bne.n	8005b68 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff ff49 	bl	80059e4 <SPI_WaitFlagStateUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01a      	beq.n	8005b8e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5c:	f043 0220 	orr.w	r2, r3, #32
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e013      	b.n	8005b90 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2180      	movs	r1, #128	; 0x80
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7ff ff36 	bl	80059e4 <SPI_WaitFlagStateUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b82:	f043 0220 	orr.w	r2, r3, #32
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e000      	b.n	8005b90 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2200      	movs	r2, #0
 8005bac:	2180      	movs	r1, #128	; 0x80
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff ff18 	bl	80059e4 <SPI_WaitFlagStateUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d007      	beq.n	8005bca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	f043 0220 	orr.w	r2, r3, #32
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e000      	b.n	8005bcc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e041      	b.n	8005c6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7fd fe54 	bl	80038a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4619      	mov	r1, r3
 8005c12:	4610      	mov	r0, r2
 8005c14:	f000 fc68 	bl	80064e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e041      	b.n	8005d08 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d106      	bne.n	8005c9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f839 	bl	8005d10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3304      	adds	r3, #4
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f000 fc19 	bl	80064e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc80      	pop	{r7}
 8005d20:	4770      	bx	lr
	...

08005d24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d109      	bne.n	8005d48 <HAL_TIM_PWM_Start+0x24>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	bf14      	ite	ne
 8005d40:	2301      	movne	r3, #1
 8005d42:	2300      	moveq	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	e022      	b.n	8005d8e <HAL_TIM_PWM_Start+0x6a>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d109      	bne.n	8005d62 <HAL_TIM_PWM_Start+0x3e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	bf14      	ite	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	2300      	moveq	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	e015      	b.n	8005d8e <HAL_TIM_PWM_Start+0x6a>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d109      	bne.n	8005d7c <HAL_TIM_PWM_Start+0x58>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	bf14      	ite	ne
 8005d74:	2301      	movne	r3, #1
 8005d76:	2300      	moveq	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	e008      	b.n	8005d8e <HAL_TIM_PWM_Start+0x6a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	bf14      	ite	ne
 8005d88:	2301      	movne	r3, #1
 8005d8a:	2300      	moveq	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e072      	b.n	8005e7c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <HAL_TIM_PWM_Start+0x82>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da4:	e013      	b.n	8005dce <HAL_TIM_PWM_Start+0xaa>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d104      	bne.n	8005db6 <HAL_TIM_PWM_Start+0x92>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db4:	e00b      	b.n	8005dce <HAL_TIM_PWM_Start+0xaa>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d104      	bne.n	8005dc6 <HAL_TIM_PWM_Start+0xa2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dc4:	e003      	b.n	8005dce <HAL_TIM_PWM_Start+0xaa>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fe42 	bl	8006a60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a28      	ldr	r2, [pc, #160]	; (8005e84 <HAL_TIM_PWM_Start+0x160>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d004      	beq.n	8005df0 <HAL_TIM_PWM_Start+0xcc>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a27      	ldr	r2, [pc, #156]	; (8005e88 <HAL_TIM_PWM_Start+0x164>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d101      	bne.n	8005df4 <HAL_TIM_PWM_Start+0xd0>
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <HAL_TIM_PWM_Start+0xd2>
 8005df4:	2300      	movs	r3, #0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d007      	beq.n	8005e0a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a1d      	ldr	r2, [pc, #116]	; (8005e84 <HAL_TIM_PWM_Start+0x160>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d018      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x122>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a1b      	ldr	r2, [pc, #108]	; (8005e88 <HAL_TIM_PWM_Start+0x164>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d013      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x122>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e26:	d00e      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x122>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a17      	ldr	r2, [pc, #92]	; (8005e8c <HAL_TIM_PWM_Start+0x168>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d009      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x122>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a16      	ldr	r2, [pc, #88]	; (8005e90 <HAL_TIM_PWM_Start+0x16c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d004      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x122>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a14      	ldr	r2, [pc, #80]	; (8005e94 <HAL_TIM_PWM_Start+0x170>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d111      	bne.n	8005e6a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b06      	cmp	r3, #6
 8005e56:	d010      	beq.n	8005e7a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e68:	e007      	b.n	8005e7a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0201 	orr.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40012c00 	.word	0x40012c00
 8005e88:	40013400 	.word	0x40013400
 8005e8c:	40000400 	.word	0x40000400
 8005e90:	40000800 	.word	0x40000800
 8005e94:	40000c00 	.word	0x40000c00

08005e98 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	6839      	ldr	r1, [r7, #0]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fdd8 	bl	8006a60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a2e      	ldr	r2, [pc, #184]	; (8005f70 <HAL_TIM_PWM_Stop+0xd8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <HAL_TIM_PWM_Stop+0x2c>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a2d      	ldr	r2, [pc, #180]	; (8005f74 <HAL_TIM_PWM_Stop+0xdc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d101      	bne.n	8005ec8 <HAL_TIM_PWM_Stop+0x30>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <HAL_TIM_PWM_Stop+0x32>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d017      	beq.n	8005efe <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6a1a      	ldr	r2, [r3, #32]
 8005ed4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ed8:	4013      	ands	r3, r2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10f      	bne.n	8005efe <HAL_TIM_PWM_Stop+0x66>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6a1a      	ldr	r2, [r3, #32]
 8005ee4:	f240 4344 	movw	r3, #1092	; 0x444
 8005ee8:	4013      	ands	r3, r2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d107      	bne.n	8005efe <HAL_TIM_PWM_Stop+0x66>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005efc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f08:	4013      	ands	r3, r2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10f      	bne.n	8005f2e <HAL_TIM_PWM_Stop+0x96>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6a1a      	ldr	r2, [r3, #32]
 8005f14:	f240 4344 	movw	r3, #1092	; 0x444
 8005f18:	4013      	ands	r3, r2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d107      	bne.n	8005f2e <HAL_TIM_PWM_Stop+0x96>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0201 	bic.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d104      	bne.n	8005f3e <HAL_TIM_PWM_Stop+0xa6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f3c:	e013      	b.n	8005f66 <HAL_TIM_PWM_Stop+0xce>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d104      	bne.n	8005f4e <HAL_TIM_PWM_Stop+0xb6>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f4c:	e00b      	b.n	8005f66 <HAL_TIM_PWM_Stop+0xce>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d104      	bne.n	8005f5e <HAL_TIM_PWM_Stop+0xc6>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f5c:	e003      	b.n	8005f66 <HAL_TIM_PWM_Stop+0xce>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40013400 	.word	0x40013400

08005f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d122      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d11b      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0202 	mvn.w	r2, #2
 8005fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa78 	bl	80064b0 <HAL_TIM_IC_CaptureCallback>
 8005fc0:	e005      	b.n	8005fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fa6b 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fa7a 	bl	80064c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d122      	bne.n	8006028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d11b      	bne.n	8006028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0204 	mvn.w	r2, #4
 8005ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fa4e 	bl	80064b0 <HAL_TIM_IC_CaptureCallback>
 8006014:	e005      	b.n	8006022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fa41 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fa50 	bl	80064c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b08      	cmp	r3, #8
 8006034:	d122      	bne.n	800607c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0308 	and.w	r3, r3, #8
 8006040:	2b08      	cmp	r3, #8
 8006042:	d11b      	bne.n	800607c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0208 	mvn.w	r2, #8
 800604c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2204      	movs	r2, #4
 8006052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fa24 	bl	80064b0 <HAL_TIM_IC_CaptureCallback>
 8006068:	e005      	b.n	8006076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fa17 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fa26 	bl	80064c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0310 	and.w	r3, r3, #16
 8006086:	2b10      	cmp	r3, #16
 8006088:	d122      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	2b10      	cmp	r3, #16
 8006096:	d11b      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0210 	mvn.w	r2, #16
 80060a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2208      	movs	r2, #8
 80060a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f9fa 	bl	80064b0 <HAL_TIM_IC_CaptureCallback>
 80060bc:	e005      	b.n	80060ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f9ed 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f9fc 	bl	80064c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d10e      	bne.n	80060fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d107      	bne.n	80060fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0201 	mvn.w	r2, #1
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f9c8 	bl	800648c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006106:	2b80      	cmp	r3, #128	; 0x80
 8006108:	d10e      	bne.n	8006128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006114:	2b80      	cmp	r3, #128	; 0x80
 8006116:	d107      	bne.n	8006128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fd35 	bl	8006b92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d10e      	bne.n	8006154 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	d107      	bne.n	8006154 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800614c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f9c0 	bl	80064d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b20      	cmp	r3, #32
 8006160:	d10e      	bne.n	8006180 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0320 	and.w	r3, r3, #32
 800616c:	2b20      	cmp	r3, #32
 800616e:	d107      	bne.n	8006180 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0220 	mvn.w	r2, #32
 8006178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fd00 	bl	8006b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800619e:	2302      	movs	r3, #2
 80061a0:	e0ac      	b.n	80062fc <HAL_TIM_PWM_ConfigChannel+0x174>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b0c      	cmp	r3, #12
 80061ae:	f200 809f 	bhi.w	80062f0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80061b2:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	080061ed 	.word	0x080061ed
 80061bc:	080062f1 	.word	0x080062f1
 80061c0:	080062f1 	.word	0x080062f1
 80061c4:	080062f1 	.word	0x080062f1
 80061c8:	0800622d 	.word	0x0800622d
 80061cc:	080062f1 	.word	0x080062f1
 80061d0:	080062f1 	.word	0x080062f1
 80061d4:	080062f1 	.word	0x080062f1
 80061d8:	0800626f 	.word	0x0800626f
 80061dc:	080062f1 	.word	0x080062f1
 80061e0:	080062f1 	.word	0x080062f1
 80061e4:	080062f1 	.word	0x080062f1
 80061e8:	080062af 	.word	0x080062af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 f9f2 	bl	80065dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0208 	orr.w	r2, r2, #8
 8006206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0204 	bic.w	r2, r2, #4
 8006216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6999      	ldr	r1, [r3, #24]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	619a      	str	r2, [r3, #24]
      break;
 800622a:	e062      	b.n	80062f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fa42 	bl	80066bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6999      	ldr	r1, [r3, #24]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	021a      	lsls	r2, r3, #8
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	619a      	str	r2, [r3, #24]
      break;
 800626c:	e041      	b.n	80062f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68b9      	ldr	r1, [r7, #8]
 8006274:	4618      	mov	r0, r3
 8006276:	f000 fa95 	bl	80067a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69da      	ldr	r2, [r3, #28]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0208 	orr.w	r2, r2, #8
 8006288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 0204 	bic.w	r2, r2, #4
 8006298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69d9      	ldr	r1, [r3, #28]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	61da      	str	r2, [r3, #28]
      break;
 80062ac:	e021      	b.n	80062f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fae9 	bl	800688c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69da      	ldr	r2, [r3, #28]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69d9      	ldr	r1, [r3, #28]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	021a      	lsls	r2, r3, #8
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	61da      	str	r2, [r3, #28]
      break;
 80062ee:	e000      	b.n	80062f2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80062f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_TIM_ConfigClockSource+0x18>
 8006318:	2302      	movs	r3, #2
 800631a:	e0b3      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x180>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800633a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006342:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006354:	d03e      	beq.n	80063d4 <HAL_TIM_ConfigClockSource+0xd0>
 8006356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635a:	f200 8087 	bhi.w	800646c <HAL_TIM_ConfigClockSource+0x168>
 800635e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006362:	f000 8085 	beq.w	8006470 <HAL_TIM_ConfigClockSource+0x16c>
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636a:	d87f      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x168>
 800636c:	2b70      	cmp	r3, #112	; 0x70
 800636e:	d01a      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0xa2>
 8006370:	2b70      	cmp	r3, #112	; 0x70
 8006372:	d87b      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x168>
 8006374:	2b60      	cmp	r3, #96	; 0x60
 8006376:	d050      	beq.n	800641a <HAL_TIM_ConfigClockSource+0x116>
 8006378:	2b60      	cmp	r3, #96	; 0x60
 800637a:	d877      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x168>
 800637c:	2b50      	cmp	r3, #80	; 0x50
 800637e:	d03c      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0xf6>
 8006380:	2b50      	cmp	r3, #80	; 0x50
 8006382:	d873      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x168>
 8006384:	2b40      	cmp	r3, #64	; 0x40
 8006386:	d058      	beq.n	800643a <HAL_TIM_ConfigClockSource+0x136>
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d86f      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x168>
 800638c:	2b30      	cmp	r3, #48	; 0x30
 800638e:	d064      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x156>
 8006390:	2b30      	cmp	r3, #48	; 0x30
 8006392:	d86b      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x168>
 8006394:	2b20      	cmp	r3, #32
 8006396:	d060      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x156>
 8006398:	2b20      	cmp	r3, #32
 800639a:	d867      	bhi.n	800646c <HAL_TIM_ConfigClockSource+0x168>
 800639c:	2b00      	cmp	r3, #0
 800639e:	d05c      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x156>
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d05a      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063a4:	e062      	b.n	800646c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6899      	ldr	r1, [r3, #8]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f000 fb34 	bl	8006a22 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	609a      	str	r2, [r3, #8]
      break;
 80063d2:	e04e      	b.n	8006472 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	6899      	ldr	r1, [r3, #8]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f000 fb1d 	bl	8006a22 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063f6:	609a      	str	r2, [r3, #8]
      break;
 80063f8:	e03b      	b.n	8006472 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6859      	ldr	r1, [r3, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	461a      	mov	r2, r3
 8006408:	f000 fa94 	bl	8006934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2150      	movs	r1, #80	; 0x50
 8006412:	4618      	mov	r0, r3
 8006414:	f000 faeb 	bl	80069ee <TIM_ITRx_SetConfig>
      break;
 8006418:	e02b      	b.n	8006472 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	6859      	ldr	r1, [r3, #4]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	461a      	mov	r2, r3
 8006428:	f000 fab2 	bl	8006990 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2160      	movs	r1, #96	; 0x60
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fadb 	bl	80069ee <TIM_ITRx_SetConfig>
      break;
 8006438:	e01b      	b.n	8006472 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6859      	ldr	r1, [r3, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	461a      	mov	r2, r3
 8006448:	f000 fa74 	bl	8006934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2140      	movs	r1, #64	; 0x40
 8006452:	4618      	mov	r0, r3
 8006454:	f000 facb 	bl	80069ee <TIM_ITRx_SetConfig>
      break;
 8006458:	e00b      	b.n	8006472 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4619      	mov	r1, r3
 8006464:	4610      	mov	r0, r2
 8006466:	f000 fac2 	bl	80069ee <TIM_ITRx_SetConfig>
        break;
 800646a:	e002      	b.n	8006472 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800646c:	bf00      	nop
 800646e:	e000      	b.n	8006472 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006470:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	bc80      	pop	{r7}
 800649c:	4770      	bx	lr

0800649e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr

080064b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr

080064c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	4770      	bx	lr
	...

080064e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a33      	ldr	r2, [pc, #204]	; (80065c8 <TIM_Base_SetConfig+0xe0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d013      	beq.n	8006528 <TIM_Base_SetConfig+0x40>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a32      	ldr	r2, [pc, #200]	; (80065cc <TIM_Base_SetConfig+0xe4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00f      	beq.n	8006528 <TIM_Base_SetConfig+0x40>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650e:	d00b      	beq.n	8006528 <TIM_Base_SetConfig+0x40>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a2f      	ldr	r2, [pc, #188]	; (80065d0 <TIM_Base_SetConfig+0xe8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d007      	beq.n	8006528 <TIM_Base_SetConfig+0x40>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a2e      	ldr	r2, [pc, #184]	; (80065d4 <TIM_Base_SetConfig+0xec>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d003      	beq.n	8006528 <TIM_Base_SetConfig+0x40>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a2d      	ldr	r2, [pc, #180]	; (80065d8 <TIM_Base_SetConfig+0xf0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d108      	bne.n	800653a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a22      	ldr	r2, [pc, #136]	; (80065c8 <TIM_Base_SetConfig+0xe0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <TIM_Base_SetConfig+0x82>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a21      	ldr	r2, [pc, #132]	; (80065cc <TIM_Base_SetConfig+0xe4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00f      	beq.n	800656a <TIM_Base_SetConfig+0x82>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006550:	d00b      	beq.n	800656a <TIM_Base_SetConfig+0x82>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a1e      	ldr	r2, [pc, #120]	; (80065d0 <TIM_Base_SetConfig+0xe8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d007      	beq.n	800656a <TIM_Base_SetConfig+0x82>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <TIM_Base_SetConfig+0xec>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <TIM_Base_SetConfig+0x82>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a1c      	ldr	r2, [pc, #112]	; (80065d8 <TIM_Base_SetConfig+0xf0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d108      	bne.n	800657c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a09      	ldr	r2, [pc, #36]	; (80065c8 <TIM_Base_SetConfig+0xe0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d003      	beq.n	80065b0 <TIM_Base_SetConfig+0xc8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a08      	ldr	r2, [pc, #32]	; (80065cc <TIM_Base_SetConfig+0xe4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d103      	bne.n	80065b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	615a      	str	r2, [r3, #20]
}
 80065be:	bf00      	nop
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr
 80065c8:	40012c00 	.word	0x40012c00
 80065cc:	40013400 	.word	0x40013400
 80065d0:	40000400 	.word	0x40000400
 80065d4:	40000800 	.word	0x40000800
 80065d8:	40000c00 	.word	0x40000c00

080065dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	f023 0201 	bic.w	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0303 	bic.w	r3, r3, #3
 8006612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f023 0302 	bic.w	r3, r3, #2
 8006624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a20      	ldr	r2, [pc, #128]	; (80066b4 <TIM_OC1_SetConfig+0xd8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d003      	beq.n	8006640 <TIM_OC1_SetConfig+0x64>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a1f      	ldr	r2, [pc, #124]	; (80066b8 <TIM_OC1_SetConfig+0xdc>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d10c      	bne.n	800665a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f023 0308 	bic.w	r3, r3, #8
 8006646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f023 0304 	bic.w	r3, r3, #4
 8006658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a15      	ldr	r2, [pc, #84]	; (80066b4 <TIM_OC1_SetConfig+0xd8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d003      	beq.n	800666a <TIM_OC1_SetConfig+0x8e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a14      	ldr	r2, [pc, #80]	; (80066b8 <TIM_OC1_SetConfig+0xdc>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d111      	bne.n	800668e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	621a      	str	r2, [r3, #32]
}
 80066a8:	bf00      	nop
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc80      	pop	{r7}
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40012c00 	.word	0x40012c00
 80066b8:	40013400 	.word	0x40013400

080066bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f023 0210 	bic.w	r2, r3, #16
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f023 0320 	bic.w	r3, r3, #32
 8006706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a21      	ldr	r2, [pc, #132]	; (800679c <TIM_OC2_SetConfig+0xe0>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC2_SetConfig+0x68>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a20      	ldr	r2, [pc, #128]	; (80067a0 <TIM_OC2_SetConfig+0xe4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d10d      	bne.n	8006740 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800672a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800673e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a16      	ldr	r2, [pc, #88]	; (800679c <TIM_OC2_SetConfig+0xe0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_OC2_SetConfig+0x94>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a15      	ldr	r2, [pc, #84]	; (80067a0 <TIM_OC2_SetConfig+0xe4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d113      	bne.n	8006778 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800675e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr
 800679c:	40012c00 	.word	0x40012c00
 80067a0:	40013400 	.word	0x40013400

080067a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0303 	bic.w	r3, r3, #3
 80067da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	021b      	lsls	r3, r3, #8
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a21      	ldr	r2, [pc, #132]	; (8006884 <TIM_OC3_SetConfig+0xe0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d003      	beq.n	800680a <TIM_OC3_SetConfig+0x66>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a20      	ldr	r2, [pc, #128]	; (8006888 <TIM_OC3_SetConfig+0xe4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d10d      	bne.n	8006826 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	021b      	lsls	r3, r3, #8
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a16      	ldr	r2, [pc, #88]	; (8006884 <TIM_OC3_SetConfig+0xe0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d003      	beq.n	8006836 <TIM_OC3_SetConfig+0x92>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a15      	ldr	r2, [pc, #84]	; (8006888 <TIM_OC3_SetConfig+0xe4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d113      	bne.n	800685e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800683c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	621a      	str	r2, [r3, #32]
}
 8006878:	bf00      	nop
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	40012c00 	.word	0x40012c00
 8006888:	40013400 	.word	0x40013400

0800688c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	031b      	lsls	r3, r3, #12
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a11      	ldr	r2, [pc, #68]	; (800692c <TIM_OC4_SetConfig+0xa0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <TIM_OC4_SetConfig+0x68>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a10      	ldr	r2, [pc, #64]	; (8006930 <TIM_OC4_SetConfig+0xa4>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d109      	bne.n	8006908 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	019b      	lsls	r3, r3, #6
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	621a      	str	r2, [r3, #32]
}
 8006922:	bf00      	nop
 8006924:	371c      	adds	r7, #28
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr
 800692c:	40012c00 	.word	0x40012c00
 8006930:	40013400 	.word	0x40013400

08006934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f023 0201 	bic.w	r2, r3, #1
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800695e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f023 030a 	bic.w	r3, r3, #10
 8006970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	bc80      	pop	{r7}
 800698e:	4770      	bx	lr

08006990 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f023 0210 	bic.w	r2, r3, #16
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	031b      	lsls	r3, r3, #12
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	621a      	str	r2, [r3, #32]
}
 80069e4:	bf00      	nop
 80069e6:	371c      	adds	r7, #28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr

080069ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f043 0307 	orr.w	r3, r3, #7
 8006a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	609a      	str	r2, [r3, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b087      	sub	sp, #28
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	021a      	lsls	r2, r3, #8
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	609a      	str	r2, [r3, #8]
}
 8006a56:	bf00      	nop
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bc80      	pop	{r7}
 8006a5e:	4770      	bx	lr

08006a60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	2201      	movs	r2, #1
 8006a74:	fa02 f303 	lsl.w	r3, r2, r3
 8006a78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1a      	ldr	r2, [r3, #32]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	43db      	mvns	r3, r3
 8006a82:	401a      	ands	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a1a      	ldr	r2, [r3, #32]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	f003 031f 	and.w	r3, r3, #31
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	fa01 f303 	lsl.w	r3, r1, r3
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	621a      	str	r2, [r3, #32]
}
 8006a9e:	bf00      	nop
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bc80      	pop	{r7}
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e050      	b.n	8006b62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a1b      	ldr	r2, [pc, #108]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d018      	beq.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a19      	ldr	r2, [pc, #100]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d013      	beq.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b16:	d00e      	beq.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d009      	beq.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a14      	ldr	r2, [pc, #80]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d004      	beq.n	8006b36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a12      	ldr	r2, [pc, #72]	; (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d10c      	bne.n	8006b50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40013400 	.word	0x40013400
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800
 8006b7c:	40000c00 	.word	0x40000c00

08006b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr

08006b92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bc80      	pop	{r7}
 8006ba2:	4770      	bx	lr

08006ba4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006baa:	f3ef 8305 	mrs	r3, IPSR
 8006bae:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10f      	bne.n	8006bd6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006bba:	607b      	str	r3, [r7, #4]
  return(result);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <osKernelInitialize+0x32>
 8006bc2:	4b10      	ldr	r3, [pc, #64]	; (8006c04 <osKernelInitialize+0x60>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d109      	bne.n	8006bde <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bca:	f3ef 8311 	mrs	r3, BASEPRI
 8006bce:	603b      	str	r3, [r7, #0]
  return(result);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006bd6:	f06f 0305 	mvn.w	r3, #5
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	e00c      	b.n	8006bf8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006bde:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <osKernelInitialize+0x60>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d105      	bne.n	8006bf2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006be6:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <osKernelInitialize+0x60>)
 8006be8:	2201      	movs	r2, #1
 8006bea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e002      	b.n	8006bf8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr
 8006c04:	20000038 	.word	0x20000038

08006c08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b092      	sub	sp, #72	; 0x48
 8006c0c:	af04      	add	r7, sp, #16
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c18:	f3ef 8305 	mrs	r3, IPSR
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f040 8094 	bne.w	8006d4e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c26:	f3ef 8310 	mrs	r3, PRIMASK
 8006c2a:	623b      	str	r3, [r7, #32]
  return(result);
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f040 808d 	bne.w	8006d4e <osThreadNew+0x146>
 8006c34:	4b48      	ldr	r3, [pc, #288]	; (8006d58 <osThreadNew+0x150>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d106      	bne.n	8006c4a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c3c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c40:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f040 8082 	bne.w	8006d4e <osThreadNew+0x146>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d07e      	beq.n	8006d4e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006c50:	2380      	movs	r3, #128	; 0x80
 8006c52:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006c54:	2318      	movs	r3, #24
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006c58:	2300      	movs	r3, #0
 8006c5a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006c5c:	f107 031b 	add.w	r3, r7, #27
 8006c60:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006c62:	f04f 33ff 	mov.w	r3, #4294967295
 8006c66:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d045      	beq.n	8006cfa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <osThreadNew+0x74>
        name = attr->name;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d008      	beq.n	8006ca2 <osThreadNew+0x9a>
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	2b38      	cmp	r3, #56	; 0x38
 8006c94:	d805      	bhi.n	8006ca2 <osThreadNew+0x9a>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <osThreadNew+0x9e>
        return (NULL);
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e054      	b.n	8006d50 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	089b      	lsrs	r3, r3, #2
 8006cb4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00e      	beq.n	8006cdc <osThreadNew+0xd4>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	2b5b      	cmp	r3, #91	; 0x5b
 8006cc4:	d90a      	bls.n	8006cdc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d006      	beq.n	8006cdc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <osThreadNew+0xd4>
        mem = 1;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cda:	e010      	b.n	8006cfe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10c      	bne.n	8006cfe <osThreadNew+0xf6>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d108      	bne.n	8006cfe <osThreadNew+0xf6>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d104      	bne.n	8006cfe <osThreadNew+0xf6>
          mem = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cf8:	e001      	b.n	8006cfe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d110      	bne.n	8006d26 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d0c:	9202      	str	r2, [sp, #8]
 8006d0e:	9301      	str	r3, [sp, #4]
 8006d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 fecc 	bl	8007ab8 <xTaskCreateStatic>
 8006d20:	4603      	mov	r3, r0
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	e013      	b.n	8006d4e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d110      	bne.n	8006d4e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	f107 0314 	add.w	r3, r7, #20
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 feea 	bl	8007b18 <xTaskCreate>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d001      	beq.n	8006d4e <osThreadNew+0x146>
          hTask = NULL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d4e:	697b      	ldr	r3, [r7, #20]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3738      	adds	r7, #56	; 0x38
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20000038 	.word	0x20000038

08006d5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4a06      	ldr	r2, [pc, #24]	; (8006d84 <vApplicationGetIdleTaskMemory+0x28>)
 8006d6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	4a05      	ldr	r2, [pc, #20]	; (8006d88 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2280      	movs	r2, #128	; 0x80
 8006d78:	601a      	str	r2, [r3, #0]
}
 8006d7a:	bf00      	nop
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bc80      	pop	{r7}
 8006d82:	4770      	bx	lr
 8006d84:	2000003c 	.word	0x2000003c
 8006d88:	20000098 	.word	0x20000098

08006d8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4a07      	ldr	r2, [pc, #28]	; (8006db8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	4a06      	ldr	r2, [pc, #24]	; (8006dbc <vApplicationGetTimerTaskMemory+0x30>)
 8006da2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006daa:	601a      	str	r2, [r3, #0]
}
 8006dac:	bf00      	nop
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	20000298 	.word	0x20000298
 8006dbc:	200002f4 	.word	0x200002f4

08006dc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f103 0208 	add.w	r2, r3, #8
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f103 0208 	add.w	r2, r3, #8
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f103 0208 	add.w	r2, r3, #8
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr

08006dfe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr

08006e16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e16:	b480      	push	{r7}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	601a      	str	r2, [r3, #0]
}
 8006e52:	bf00      	nop
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e72:	d103      	bne.n	8006e7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	e00c      	b.n	8006e96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3308      	adds	r3, #8
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	e002      	b.n	8006e8a <vListInsert+0x2e>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d2f6      	bcs.n	8006e84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	601a      	str	r2, [r3, #0]
}
 8006ec2:	bf00      	nop
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr

08006ecc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6892      	ldr	r2, [r2, #8]
 8006ee2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	6852      	ldr	r2, [r2, #4]
 8006eec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d103      	bne.n	8006f00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	1e5a      	subs	r2, r3, #1
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bc80      	pop	{r7}
 8006f1c:	4770      	bx	lr
	...

08006f20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8006f2e:	f001 ffdb 	bl	8008ee8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f3e:	fb01 f303 	mul.w	r3, r1, r3
 8006f42:	441a      	add	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	68f9      	ldr	r1, [r7, #12]
 8006f62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f64:	fb01 f303 	mul.w	r3, r1, r3
 8006f68:	441a      	add	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	22ff      	movs	r2, #255	; 0xff
 8006f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	22ff      	movs	r2, #255	; 0xff
 8006f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d114      	bne.n	8006fae <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01a      	beq.n	8006fc2 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	3310      	adds	r3, #16
 8006f90:	4618      	mov	r0, r3
 8006f92:	f001 f943 	bl	800821c <xTaskRemoveFromEventList>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d012      	beq.n	8006fc2 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f9c:	4b0c      	ldr	r3, [pc, #48]	; (8006fd0 <xQueueGenericReset+0xb0>)
 8006f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	e009      	b.n	8006fc2 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3310      	adds	r3, #16
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff ff04 	bl	8006dc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3324      	adds	r3, #36	; 0x24
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff feff 	bl	8006dc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fc2:	f001 ffab 	bl	8008f1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fc6:	2301      	movs	r3, #1
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	e000ed04 	.word	0xe000ed04

08006fd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af02      	add	r7, sp, #8
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	603b      	str	r3, [r7, #0]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00d      	beq.n	8007008 <xQueueGenericCreateStatic+0x34>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ff4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 f835 	bl	8007072 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007008:	697b      	ldr	r3, [r7, #20]
	}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007012:	b580      	push	{r7, lr}
 8007014:	b08a      	sub	sp, #40	; 0x28
 8007016:	af02      	add	r7, sp, #8
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	4613      	mov	r3, r2
 800701e:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d102      	bne.n	800702c <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
 800702a:	e004      	b.n	8007036 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	fb02 f303 	mul.w	r3, r2, r3
 8007034:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	3350      	adds	r3, #80	; 0x50
 800703a:	4618      	mov	r0, r3
 800703c:	f001 fff0 	bl	8009020 <pvPortMalloc>
 8007040:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00f      	beq.n	8007068 <xQueueGenericCreate+0x56>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	3350      	adds	r3, #80	; 0x50
 800704c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007056:	79fa      	ldrb	r2, [r7, #7]
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	4613      	mov	r3, r2
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	68b9      	ldr	r1, [r7, #8]
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 f805 	bl	8007072 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007068:	69bb      	ldr	r3, [r7, #24]
	}
 800706a:	4618      	mov	r0, r3
 800706c:	3720      	adds	r7, #32
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	607a      	str	r2, [r7, #4]
 800707e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d103      	bne.n	800708e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	e002      	b.n	8007094 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070a0:	2101      	movs	r1, #1
 80070a2:	69b8      	ldr	r0, [r7, #24]
 80070a4:	f7ff ff3c 	bl	8006f20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	78fa      	ldrb	r2, [r7, #3]
 80070ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80070c2:	2202      	movs	r2, #2
 80070c4:	2100      	movs	r1, #0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff ffa3 	bl	8007012 <xQueueGenericCreate>
 80070cc:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80070da:	68fb      	ldr	r3, [r7, #12]
	}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08a      	sub	sp, #40	; 0x28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070f2:	2300      	movs	r3, #0
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070fa:	f001 fef5 	bl	8008ee8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	429a      	cmp	r2, r3
 8007108:	d302      	bcc.n	8007110 <xQueueGenericSend+0x2c>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d129      	bne.n	8007164 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	6a38      	ldr	r0, [r7, #32]
 8007116:	f000 fb62 	bl	80077de <prvCopyDataToQueue>
 800711a:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	2b00      	cmp	r3, #0
 8007122:	d010      	beq.n	8007146 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	3324      	adds	r3, #36	; 0x24
 8007128:	4618      	mov	r0, r3
 800712a:	f001 f877 	bl	800821c <xTaskRemoveFromEventList>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d013      	beq.n	800715c <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007134:	4b3f      	ldr	r3, [pc, #252]	; (8007234 <xQueueGenericSend+0x150>)
 8007136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	e00a      	b.n	800715c <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800714c:	4b39      	ldr	r3, [pc, #228]	; (8007234 <xQueueGenericSend+0x150>)
 800714e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800715c:	f001 fede 	bl	8008f1c <vPortExitCritical>
				return pdPASS;
 8007160:	2301      	movs	r3, #1
 8007162:	e063      	b.n	800722c <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d103      	bne.n	8007172 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800716a:	f001 fed7 	bl	8008f1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800716e:	2300      	movs	r3, #0
 8007170:	e05c      	b.n	800722c <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	2b00      	cmp	r3, #0
 8007176:	d106      	bne.n	8007186 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007178:	f107 0314 	add.w	r3, r7, #20
 800717c:	4618      	mov	r0, r3
 800717e:	f001 f8a3 	bl	80082c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007182:	2301      	movs	r3, #1
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007186:	f001 fec9 	bl	8008f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800718a:	f000 fe6d 	bl	8007e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800718e:	f001 feab 	bl	8008ee8 <vPortEnterCritical>
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007198:	b25b      	sxtb	r3, r3
 800719a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719e:	d103      	bne.n	80071a8 <xQueueGenericSend+0xc4>
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071ae:	b25b      	sxtb	r3, r3
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d103      	bne.n	80071be <xQueueGenericSend+0xda>
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071be:	f001 fead 	bl	8008f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071c2:	1d3a      	adds	r2, r7, #4
 80071c4:	f107 0314 	add.w	r3, r7, #20
 80071c8:	4611      	mov	r1, r2
 80071ca:	4618      	mov	r0, r3
 80071cc:	f001 f892 	bl	80082f4 <xTaskCheckForTimeOut>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d124      	bne.n	8007220 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071d6:	6a38      	ldr	r0, [r7, #32]
 80071d8:	f000 fbf9 	bl	80079ce <prvIsQueueFull>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d018      	beq.n	8007214 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	3310      	adds	r3, #16
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	4611      	mov	r1, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 ffe2 	bl	80081b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071f0:	6a38      	ldr	r0, [r7, #32]
 80071f2:	f000 fb84 	bl	80078fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071f6:	f000 fe45 	bl	8007e84 <xTaskResumeAll>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f47f af7c 	bne.w	80070fa <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8007202:	4b0c      	ldr	r3, [pc, #48]	; (8007234 <xQueueGenericSend+0x150>)
 8007204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	e772      	b.n	80070fa <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007214:	6a38      	ldr	r0, [r7, #32]
 8007216:	f000 fb72 	bl	80078fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800721a:	f000 fe33 	bl	8007e84 <xTaskResumeAll>
 800721e:	e76c      	b.n	80070fa <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007220:	6a38      	ldr	r0, [r7, #32]
 8007222:	f000 fb6c 	bl	80078fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007226:	f000 fe2d 	bl	8007e84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800722a:	2300      	movs	r3, #0
		}
	}
}
 800722c:	4618      	mov	r0, r3
 800722e:	3728      	adds	r7, #40	; 0x28
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	e000ed04 	.word	0xe000ed04

08007238 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08c      	sub	sp, #48	; 0x30
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	62bb      	str	r3, [r7, #40]	; 0x28

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800724a:	f3ef 8211 	mrs	r2, BASEPRI
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	61fa      	str	r2, [r7, #28]
 8007260:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007262:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800726a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726e:	429a      	cmp	r2, r3
 8007270:	d302      	bcc.n	8007278 <xQueueGenericSendFromISR+0x40>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b02      	cmp	r3, #2
 8007276:	d12c      	bne.n	80072d2 <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800727e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007288:	f000 faa9 	bl	80077de <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800728c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007294:	d112      	bne.n	80072bc <xQueueGenericSendFromISR+0x84>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	2b00      	cmp	r3, #0
 800729c:	d016      	beq.n	80072cc <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a0:	3324      	adds	r3, #36	; 0x24
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 ffba 	bl	800821c <xTaskRemoveFromEventList>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00e      	beq.n	80072cc <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00b      	beq.n	80072cc <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	e007      	b.n	80072cc <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072c0:	3301      	adds	r3, #1
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	b25a      	sxtb	r2, r3
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80072cc:	2301      	movs	r3, #1
 80072ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 80072d0:	e001      	b.n	80072d6 <xQueueGenericSendFromISR+0x9e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80072e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3730      	adds	r7, #48	; 0x30
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	623b      	str	r3, [r7, #32]
	__asm volatile
 80072fa:	f3ef 8211 	mrs	r2, BASEPRI
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	613a      	str	r2, [r7, #16]
 8007310:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8007312:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007314:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	429a      	cmp	r2, r3
 8007324:	d229      	bcs.n	800737a <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800732c:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007336:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800733a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733e:	d112      	bne.n	8007366 <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	2b00      	cmp	r3, #0
 8007346:	d015      	beq.n	8007374 <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	3324      	adds	r3, #36	; 0x24
 800734c:	4618      	mov	r0, r3
 800734e:	f000 ff65 	bl	800821c <xTaskRemoveFromEventList>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00d      	beq.n	8007374 <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2201      	movs	r2, #1
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	e006      	b.n	8007374 <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	3301      	adds	r3, #1
 800736a:	b2db      	uxtb	r3, r3
 800736c:	b25a      	sxtb	r2, r3
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007374:	2301      	movs	r3, #1
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
 8007378:	e001      	b.n	800737e <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800737a:	2300      	movs	r3, #0
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f383 8811 	msr	BASEPRI, r3
}
 8007388:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800738c:	4618      	mov	r0, r3
 800738e:	3728      	adds	r7, #40	; 0x28
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	; 0x28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80073a8:	f001 fd9e 	bl	8008ee8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b0:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01f      	beq.n	80073f8 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	6a38      	ldr	r0, [r7, #32]
 80073bc:	f000 fa79 	bl	80078b2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	1e5a      	subs	r2, r3, #1
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00f      	beq.n	80073f0 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	3310      	adds	r3, #16
 80073d4:	4618      	mov	r0, r3
 80073d6:	f000 ff21 	bl	800821c <xTaskRemoveFromEventList>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d007      	beq.n	80073f0 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073e0:	4b3c      	ldr	r3, [pc, #240]	; (80074d4 <xQueueReceive+0x140>)
 80073e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073f0:	f001 fd94 	bl	8008f1c <vPortExitCritical>
				return pdPASS;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e069      	b.n	80074cc <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d103      	bne.n	8007406 <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073fe:	f001 fd8d 	bl	8008f1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007402:	2300      	movs	r3, #0
 8007404:	e062      	b.n	80074cc <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800740c:	f107 0314 	add.w	r3, r7, #20
 8007410:	4618      	mov	r0, r3
 8007412:	f000 ff59 	bl	80082c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007416:	2301      	movs	r3, #1
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800741a:	f001 fd7f 	bl	8008f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800741e:	f000 fd23 	bl	8007e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007422:	f001 fd61 	bl	8008ee8 <vPortEnterCritical>
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800742c:	b25b      	sxtb	r3, r3
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007432:	d103      	bne.n	800743c <xQueueReceive+0xa8>
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007442:	b25b      	sxtb	r3, r3
 8007444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007448:	d103      	bne.n	8007452 <xQueueReceive+0xbe>
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007452:	f001 fd63 	bl	8008f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007456:	1d3a      	adds	r2, r7, #4
 8007458:	f107 0314 	add.w	r3, r7, #20
 800745c:	4611      	mov	r1, r2
 800745e:	4618      	mov	r0, r3
 8007460:	f000 ff48 	bl	80082f4 <xTaskCheckForTimeOut>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d123      	bne.n	80074b2 <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800746a:	6a38      	ldr	r0, [r7, #32]
 800746c:	f000 fa99 	bl	80079a2 <prvIsQueueEmpty>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d017      	beq.n	80074a6 <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	3324      	adds	r3, #36	; 0x24
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	4611      	mov	r1, r2
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fe98 	bl	80081b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007484:	6a38      	ldr	r0, [r7, #32]
 8007486:	f000 fa3a 	bl	80078fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800748a:	f000 fcfb 	bl	8007e84 <xTaskResumeAll>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d189      	bne.n	80073a8 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8007494:	4b0f      	ldr	r3, [pc, #60]	; (80074d4 <xQueueReceive+0x140>)
 8007496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	e780      	b.n	80073a8 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80074a6:	6a38      	ldr	r0, [r7, #32]
 80074a8:	f000 fa29 	bl	80078fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074ac:	f000 fcea 	bl	8007e84 <xTaskResumeAll>
 80074b0:	e77a      	b.n	80073a8 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80074b2:	6a38      	ldr	r0, [r7, #32]
 80074b4:	f000 fa23 	bl	80078fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074b8:	f000 fce4 	bl	8007e84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074bc:	6a38      	ldr	r0, [r7, #32]
 80074be:	f000 fa70 	bl	80079a2 <prvIsQueueEmpty>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f43f af6f 	beq.w	80073a8 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3728      	adds	r7, #40	; 0x28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	e000ed04 	.word	0xe000ed04

080074d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08a      	sub	sp, #40	; 0x28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80074ea:	2300      	movs	r3, #0
 80074ec:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ee:	f001 fcfb 	bl	8008ee8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f6:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d024      	beq.n	8007548 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	1e5a      	subs	r2, r3, #1
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d104      	bne.n	8007518 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800750e:	f001 f949 	bl	80087a4 <pvTaskIncrementMutexHeldCount>
 8007512:	4602      	mov	r2, r0
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00f      	beq.n	8007540 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	3310      	adds	r3, #16
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fe79 	bl	800821c <xTaskRemoveFromEventList>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d007      	beq.n	8007540 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007530:	4b4c      	ldr	r3, [pc, #304]	; (8007664 <xQueueSemaphoreTake+0x18c>)
 8007532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007540:	f001 fcec 	bl	8008f1c <vPortExitCritical>
				return pdPASS;
 8007544:	2301      	movs	r3, #1
 8007546:	e089      	b.n	800765c <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d103      	bne.n	8007556 <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800754e:	f001 fce5 	bl	8008f1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007552:	2300      	movs	r3, #0
 8007554:	e082      	b.n	800765c <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	2b00      	cmp	r3, #0
 800755a:	d106      	bne.n	800756a <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800755c:	f107 030c 	add.w	r3, r7, #12
 8007560:	4618      	mov	r0, r3
 8007562:	f000 feb1 	bl	80082c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007566:	2301      	movs	r3, #1
 8007568:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800756a:	f001 fcd7 	bl	8008f1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800756e:	f000 fc7b 	bl	8007e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007572:	f001 fcb9 	bl	8008ee8 <vPortEnterCritical>
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800757c:	b25b      	sxtb	r3, r3
 800757e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007582:	d103      	bne.n	800758c <xQueueSemaphoreTake+0xb4>
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007592:	b25b      	sxtb	r3, r3
 8007594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007598:	d103      	bne.n	80075a2 <xQueueSemaphoreTake+0xca>
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075a2:	f001 fcbb 	bl	8008f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075a6:	463a      	mov	r2, r7
 80075a8:	f107 030c 	add.w	r3, r7, #12
 80075ac:	4611      	mov	r1, r2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 fea0 	bl	80082f4 <xTaskCheckForTimeOut>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d132      	bne.n	8007620 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075ba:	69f8      	ldr	r0, [r7, #28]
 80075bc:	f000 f9f1 	bl	80079a2 <prvIsQueueEmpty>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d026      	beq.n	8007614 <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d109      	bne.n	80075e2 <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 80075ce:	f001 fc8b 	bl	8008ee8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 ffc4 	bl	8008564 <xTaskPriorityInherit>
 80075dc:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 80075de:	f001 fc9d 	bl	8008f1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	3324      	adds	r3, #36	; 0x24
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	4611      	mov	r1, r2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fde2 	bl	80081b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075f0:	69f8      	ldr	r0, [r7, #28]
 80075f2:	f000 f984 	bl	80078fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075f6:	f000 fc45 	bl	8007e84 <xTaskResumeAll>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f47f af76 	bne.w	80074ee <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 8007602:	4b18      	ldr	r3, [pc, #96]	; (8007664 <xQueueSemaphoreTake+0x18c>)
 8007604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	e76c      	b.n	80074ee <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007614:	69f8      	ldr	r0, [r7, #28]
 8007616:	f000 f972 	bl	80078fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800761a:	f000 fc33 	bl	8007e84 <xTaskResumeAll>
 800761e:	e766      	b.n	80074ee <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007620:	69f8      	ldr	r0, [r7, #28]
 8007622:	f000 f96c 	bl	80078fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007626:	f000 fc2d 	bl	8007e84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800762a:	69f8      	ldr	r0, [r7, #28]
 800762c:	f000 f9b9 	bl	80079a2 <prvIsQueueEmpty>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	f43f af5b 	beq.w	80074ee <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00d      	beq.n	800765a <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 800763e:	f001 fc53 	bl	8008ee8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007642:	69f8      	ldr	r0, [r7, #28]
 8007644:	f000 f8b4 	bl	80077b0 <prvGetDisinheritPriorityAfterTimeout>
 8007648:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	6979      	ldr	r1, [r7, #20]
 8007650:	4618      	mov	r0, r3
 8007652:	f001 f841 	bl	80086d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007656:	f001 fc61 	bl	8008f1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800765a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800765c:	4618      	mov	r0, r3
 800765e:	3728      	adds	r7, #40	; 0x28
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	e000ed04 	.word	0xe000ed04

08007668 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08a      	sub	sp, #40	; 0x28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007674:	2300      	movs	r3, #0
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	623b      	str	r3, [r7, #32]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800767c:	f001 fc34 	bl	8008ee8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007684:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d021      	beq.n	80076d0 <xQueuePeek+0x68>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007692:	68b9      	ldr	r1, [r7, #8]
 8007694:	6a38      	ldr	r0, [r7, #32]
 8007696:	f000 f90c 	bl	80078b2 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00f      	beq.n	80076c8 <xQueuePeek+0x60>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	3324      	adds	r3, #36	; 0x24
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 fdb5 	bl	800821c <xTaskRemoveFromEventList>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d007      	beq.n	80076c8 <xQueuePeek+0x60>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80076b8:	4b3c      	ldr	r3, [pc, #240]	; (80077ac <xQueuePeek+0x144>)
 80076ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076c8:	f001 fc28 	bl	8008f1c <vPortExitCritical>
				return pdPASS;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e069      	b.n	80077a4 <xQueuePeek+0x13c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d103      	bne.n	80076de <xQueuePeek+0x76>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076d6:	f001 fc21 	bl	8008f1c <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076da:	2300      	movs	r3, #0
 80076dc:	e062      	b.n	80077a4 <xQueuePeek+0x13c>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d106      	bne.n	80076f2 <xQueuePeek+0x8a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076e4:	f107 0310 	add.w	r3, r7, #16
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fded 	bl	80082c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076ee:	2301      	movs	r3, #1
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076f2:	f001 fc13 	bl	8008f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076f6:	f000 fbb7 	bl	8007e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076fa:	f001 fbf5 	bl	8008ee8 <vPortEnterCritical>
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007704:	b25b      	sxtb	r3, r3
 8007706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770a:	d103      	bne.n	8007714 <xQueuePeek+0xac>
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800771a:	b25b      	sxtb	r3, r3
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d103      	bne.n	800772a <xQueuePeek+0xc2>
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800772a:	f001 fbf7 	bl	8008f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800772e:	1d3a      	adds	r2, r7, #4
 8007730:	f107 0310 	add.w	r3, r7, #16
 8007734:	4611      	mov	r1, r2
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fddc 	bl	80082f4 <xTaskCheckForTimeOut>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d123      	bne.n	800778a <xQueuePeek+0x122>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007742:	6a38      	ldr	r0, [r7, #32]
 8007744:	f000 f92d 	bl	80079a2 <prvIsQueueEmpty>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d017      	beq.n	800777e <xQueuePeek+0x116>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	3324      	adds	r3, #36	; 0x24
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fd2c 	bl	80081b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800775c:	6a38      	ldr	r0, [r7, #32]
 800775e:	f000 f8ce 	bl	80078fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007762:	f000 fb8f 	bl	8007e84 <xTaskResumeAll>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d187      	bne.n	800767c <xQueuePeek+0x14>
				{
					portYIELD_WITHIN_API();
 800776c:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <xQueuePeek+0x144>)
 800776e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	e77e      	b.n	800767c <xQueuePeek+0x14>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 800777e:	6a38      	ldr	r0, [r7, #32]
 8007780:	f000 f8bd 	bl	80078fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007784:	f000 fb7e 	bl	8007e84 <xTaskResumeAll>
 8007788:	e778      	b.n	800767c <xQueuePeek+0x14>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800778a:	6a38      	ldr	r0, [r7, #32]
 800778c:	f000 f8b7 	bl	80078fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007790:	f000 fb78 	bl	8007e84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007794:	6a38      	ldr	r0, [r7, #32]
 8007796:	f000 f904 	bl	80079a2 <prvIsQueueEmpty>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	f43f af6d 	beq.w	800767c <xQueuePeek+0x14>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3728      	adds	r7, #40	; 0x28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d006      	beq.n	80077ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	e001      	b.n	80077d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80077d2:	68fb      	ldr	r3, [r7, #12]
	}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr

080077de <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b086      	sub	sp, #24
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077ea:	2300      	movs	r3, #0
 80077ec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10d      	bne.n	8007818 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d14d      	bne.n	80078a0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	4618      	mov	r0, r3
 800780a:	f000 ff19 	bl	8008640 <xTaskPriorityDisinherit>
 800780e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	e043      	b.n	80078a0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d119      	bne.n	8007852 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6898      	ldr	r0, [r3, #8]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	461a      	mov	r2, r3
 8007828:	68b9      	ldr	r1, [r7, #8]
 800782a:	f001 fda5 	bl	8009378 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	441a      	add	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	429a      	cmp	r2, r3
 8007846:	d32b      	bcc.n	80078a0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	609a      	str	r2, [r3, #8]
 8007850:	e026      	b.n	80078a0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	68d8      	ldr	r0, [r3, #12]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785a:	461a      	mov	r2, r3
 800785c:	68b9      	ldr	r1, [r7, #8]
 800785e:	f001 fd8b 	bl	8009378 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	425b      	negs	r3, r3
 800786c:	441a      	add	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d207      	bcs.n	800788e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	425b      	negs	r3, r3
 8007888:	441a      	add	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d105      	bne.n	80078a0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	3b01      	subs	r3, #1
 800789e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80078a8:	697b      	ldr	r3, [r7, #20]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d018      	beq.n	80078f6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68da      	ldr	r2, [r3, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078cc:	441a      	add	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d303      	bcc.n	80078e6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68d9      	ldr	r1, [r3, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	461a      	mov	r2, r3
 80078f0:	6838      	ldr	r0, [r7, #0]
 80078f2:	f001 fd41 	bl	8009378 <memcpy>
	}
}
 80078f6:	bf00      	nop
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007906:	f001 faef 	bl	8008ee8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007910:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007912:	e011      	b.n	8007938 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	d012      	beq.n	8007942 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3324      	adds	r3, #36	; 0x24
 8007920:	4618      	mov	r0, r3
 8007922:	f000 fc7b 	bl	800821c <xTaskRemoveFromEventList>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800792c:	f000 fd28 	bl	8008380 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	3b01      	subs	r3, #1
 8007934:	b2db      	uxtb	r3, r3
 8007936:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800793c:	2b00      	cmp	r3, #0
 800793e:	dce9      	bgt.n	8007914 <prvUnlockQueue+0x16>
 8007940:	e000      	b.n	8007944 <prvUnlockQueue+0x46>
					break;
 8007942:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	22ff      	movs	r2, #255	; 0xff
 8007948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800794c:	f001 fae6 	bl	8008f1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007950:	f001 faca 	bl	8008ee8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800795a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800795c:	e011      	b.n	8007982 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d012      	beq.n	800798c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3310      	adds	r3, #16
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fc56 	bl	800821c <xTaskRemoveFromEventList>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007976:	f000 fd03 	bl	8008380 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	3b01      	subs	r3, #1
 800797e:	b2db      	uxtb	r3, r3
 8007980:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007986:	2b00      	cmp	r3, #0
 8007988:	dce9      	bgt.n	800795e <prvUnlockQueue+0x60>
 800798a:	e000      	b.n	800798e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800798c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	22ff      	movs	r2, #255	; 0xff
 8007992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007996:	f001 fac1 	bl	8008f1c <vPortExitCritical>
}
 800799a:	bf00      	nop
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079aa:	f001 fa9d 	bl	8008ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d102      	bne.n	80079bc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079b6:	2301      	movs	r3, #1
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	e001      	b.n	80079c0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079c0:	f001 faac 	bl	8008f1c <vPortExitCritical>

	return xReturn;
 80079c4:	68fb      	ldr	r3, [r7, #12]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079d6:	f001 fa87 	bl	8008ee8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d102      	bne.n	80079ec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079e6:	2301      	movs	r3, #1
 80079e8:	60fb      	str	r3, [r7, #12]
 80079ea:	e001      	b.n	80079f0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079f0:	f001 fa94 	bl	8008f1c <vPortExitCritical>

	return xReturn;
 80079f4:	68fb      	ldr	r3, [r7, #12]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	e014      	b.n	8007a3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a10:	4a0e      	ldr	r2, [pc, #56]	; (8007a4c <vQueueAddToRegistry+0x4c>)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10b      	bne.n	8007a34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a1c:	490b      	ldr	r1, [pc, #44]	; (8007a4c <vQueueAddToRegistry+0x4c>)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a26:	4a09      	ldr	r2, [pc, #36]	; (8007a4c <vQueueAddToRegistry+0x4c>)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4413      	add	r3, r2
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a32:	e006      	b.n	8007a42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3301      	adds	r3, #1
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b07      	cmp	r3, #7
 8007a3e:	d9e7      	bls.n	8007a10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bc80      	pop	{r7}
 8007a4a:	4770      	bx	lr
 8007a4c:	20003e98 	.word	0x20003e98

08007a50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a60:	f001 fa42 	bl	8008ee8 <vPortEnterCritical>
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a6a:	b25b      	sxtb	r3, r3
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a70:	d103      	bne.n	8007a7a <vQueueWaitForMessageRestricted+0x2a>
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a80:	b25b      	sxtb	r3, r3
 8007a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a86:	d103      	bne.n	8007a90 <vQueueWaitForMessageRestricted+0x40>
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a90:	f001 fa44 	bl	8008f1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d106      	bne.n	8007aaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3324      	adds	r3, #36	; 0x24
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	68b9      	ldr	r1, [r7, #8]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 fb9b 	bl	80081e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007aaa:	6978      	ldr	r0, [r7, #20]
 8007aac:	f7ff ff27 	bl	80078fe <prvUnlockQueue>
	}
 8007ab0:	bf00      	nop
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	; 0x28
 8007abc:	af04      	add	r7, sp, #16
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
			configASSERT( xSize == sizeof( TCB_t ) );
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01e      	beq.n	8007b0a <xTaskCreateStatic+0x52>
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d01b      	beq.n	8007b0a <xTaskCreateStatic+0x52>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad4:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ada:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	9303      	str	r3, [sp, #12]
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	9302      	str	r3, [sp, #8]
 8007aec:	f107 0310 	add.w	r3, r7, #16
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f850 	bl	8007ba2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b02:	6978      	ldr	r0, [r7, #20]
 8007b04:	f000 f8c4 	bl	8007c90 <prvAddNewTaskToReadyList>
 8007b08:	e001      	b.n	8007b0e <xTaskCreateStatic+0x56>
		}
		else
		{
			xReturn = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	613b      	str	r3, [r7, #16]
		}

		return xReturn;
 8007b0e:	693b      	ldr	r3, [r7, #16]
	}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08c      	sub	sp, #48	; 0x30
 8007b1c:	af04      	add	r7, sp, #16
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b28:	88fb      	ldrh	r3, [r7, #6]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 fa77 	bl	8009020 <pvPortMalloc>
 8007b32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00e      	beq.n	8007b58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007b3a:	205c      	movs	r0, #92	; 0x5c
 8007b3c:	f001 fa70 	bl	8009020 <pvPortMalloc>
 8007b40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	631a      	str	r2, [r3, #48]	; 0x30
 8007b4e:	e005      	b.n	8007b5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b50:	6978      	ldr	r0, [r7, #20]
 8007b52:	f001 faf9 	bl	8009148 <vPortFree>
 8007b56:	e001      	b.n	8007b5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d017      	beq.n	8007b92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b6a:	88fa      	ldrh	r2, [r7, #6]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9303      	str	r3, [sp, #12]
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	9302      	str	r3, [sp, #8]
 8007b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b76:	9301      	str	r3, [sp, #4]
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	68b9      	ldr	r1, [r7, #8]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 f80e 	bl	8007ba2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b86:	69f8      	ldr	r0, [r7, #28]
 8007b88:	f000 f882 	bl	8007c90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	61bb      	str	r3, [r7, #24]
 8007b90:	e002      	b.n	8007b98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295
 8007b96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b98:	69bb      	ldr	r3, [r7, #24]
	}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b086      	sub	sp, #24
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	607a      	str	r2, [r7, #4]
 8007bae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	461a      	mov	r2, r3
 8007bba:	21a5      	movs	r1, #165	; 0xa5
 8007bbc:	f001 fbea 	bl	8009394 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f023 0307 	bic.w	r3, r3, #7
 8007bd8:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bda:	2300      	movs	r3, #0
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	e012      	b.n	8007c06 <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	4413      	add	r3, r2
 8007be6:	7819      	ldrb	r1, [r3, #0]
 8007be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	4413      	add	r3, r2
 8007bee:	3334      	adds	r3, #52	; 0x34
 8007bf0:	460a      	mov	r2, r1
 8007bf2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	3301      	adds	r3, #1
 8007c04:	617b      	str	r3, [r7, #20]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b0f      	cmp	r3, #15
 8007c0a:	d9e9      	bls.n	8007be0 <prvInitialiseNewTask+0x3e>
 8007c0c:	e000      	b.n	8007c10 <prvInitialiseNewTask+0x6e>
		{
			break;
 8007c0e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	2b37      	cmp	r3, #55	; 0x37
 8007c1c:	d901      	bls.n	8007c22 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c1e:	2337      	movs	r3, #55	; 0x37
 8007c20:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c24:	6a3a      	ldr	r2, [r7, #32]
 8007c26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	6a3a      	ldr	r2, [r7, #32]
 8007c2c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c30:	2200      	movs	r2, #0
 8007c32:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	3304      	adds	r3, #4
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff f8e0 	bl	8006dfe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	3318      	adds	r3, #24
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7ff f8db 	bl	8006dfe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c60:	2200      	movs	r2, #0
 8007c62:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	6938      	ldr	r0, [r7, #16]
 8007c72:	f001 f8af 	bl	8008dd4 <pxPortInitialiseStack>
 8007c76:	4602      	mov	r2, r0
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c88:	bf00      	nop
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c98:	f001 f926 	bl	8008ee8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c9c:	4b2d      	ldr	r3, [pc, #180]	; (8007d54 <prvAddNewTaskToReadyList+0xc4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	4a2c      	ldr	r2, [pc, #176]	; (8007d54 <prvAddNewTaskToReadyList+0xc4>)
 8007ca4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ca6:	4b2c      	ldr	r3, [pc, #176]	; (8007d58 <prvAddNewTaskToReadyList+0xc8>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d109      	bne.n	8007cc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007cae:	4a2a      	ldr	r2, [pc, #168]	; (8007d58 <prvAddNewTaskToReadyList+0xc8>)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007cb4:	4b27      	ldr	r3, [pc, #156]	; (8007d54 <prvAddNewTaskToReadyList+0xc4>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d110      	bne.n	8007cde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007cbc:	f000 fb84 	bl	80083c8 <prvInitialiseTaskLists>
 8007cc0:	e00d      	b.n	8007cde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007cc2:	4b26      	ldr	r3, [pc, #152]	; (8007d5c <prvAddNewTaskToReadyList+0xcc>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d109      	bne.n	8007cde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007cca:	4b23      	ldr	r3, [pc, #140]	; (8007d58 <prvAddNewTaskToReadyList+0xc8>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d802      	bhi.n	8007cde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007cd8:	4a1f      	ldr	r2, [pc, #124]	; (8007d58 <prvAddNewTaskToReadyList+0xc8>)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007cde:	4b20      	ldr	r3, [pc, #128]	; (8007d60 <prvAddNewTaskToReadyList+0xd0>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	4a1e      	ldr	r2, [pc, #120]	; (8007d60 <prvAddNewTaskToReadyList+0xd0>)
 8007ce6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ce8:	4b1d      	ldr	r3, [pc, #116]	; (8007d60 <prvAddNewTaskToReadyList+0xd0>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf4:	4b1b      	ldr	r3, [pc, #108]	; (8007d64 <prvAddNewTaskToReadyList+0xd4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d903      	bls.n	8007d04 <prvAddNewTaskToReadyList+0x74>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	4a18      	ldr	r2, [pc, #96]	; (8007d64 <prvAddNewTaskToReadyList+0xd4>)
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d08:	4613      	mov	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4a15      	ldr	r2, [pc, #84]	; (8007d68 <prvAddNewTaskToReadyList+0xd8>)
 8007d12:	441a      	add	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3304      	adds	r3, #4
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	f7ff f87b 	bl	8006e16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d20:	f001 f8fc 	bl	8008f1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d24:	4b0d      	ldr	r3, [pc, #52]	; (8007d5c <prvAddNewTaskToReadyList+0xcc>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00e      	beq.n	8007d4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d2c:	4b0a      	ldr	r3, [pc, #40]	; (8007d58 <prvAddNewTaskToReadyList+0xc8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d207      	bcs.n	8007d4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d3a:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <prvAddNewTaskToReadyList+0xdc>)
 8007d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	20000bc8 	.word	0x20000bc8
 8007d58:	200006f4 	.word	0x200006f4
 8007d5c:	20000bd4 	.word	0x20000bd4
 8007d60:	20000be4 	.word	0x20000be4
 8007d64:	20000bd0 	.word	0x20000bd0
 8007d68:	200006f8 	.word	0x200006f8
 8007d6c:	e000ed04 	.word	0xe000ed04

08007d70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d008      	beq.n	8007d94 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8007d82:	f000 f871 	bl	8007e68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d86:	2100      	movs	r1, #0
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fd1f 	bl	80087cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d8e:	f000 f879 	bl	8007e84 <xTaskResumeAll>
 8007d92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d107      	bne.n	8007daa <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8007d9a:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <vTaskDelay+0x44>)
 8007d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	e000ed04 	.word	0xe000ed04

08007db8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	; 0x28
 8007dbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007dc6:	1d3a      	adds	r2, r7, #4
 8007dc8:	f107 0108 	add.w	r1, r7, #8
 8007dcc:	f107 030c 	add.w	r3, r7, #12
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fe ffc3 	bl	8006d5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	9202      	str	r2, [sp, #8]
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	2300      	movs	r3, #0
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	2300      	movs	r3, #0
 8007de6:	460a      	mov	r2, r1
 8007de8:	4919      	ldr	r1, [pc, #100]	; (8007e50 <vTaskStartScheduler+0x98>)
 8007dea:	481a      	ldr	r0, [pc, #104]	; (8007e54 <vTaskStartScheduler+0x9c>)
 8007dec:	f7ff fe64 	bl	8007ab8 <xTaskCreateStatic>
 8007df0:	4603      	mov	r3, r0
 8007df2:	4a19      	ldr	r2, [pc, #100]	; (8007e58 <vTaskStartScheduler+0xa0>)
 8007df4:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007df6:	4b18      	ldr	r3, [pc, #96]	; (8007e58 <vTaskStartScheduler+0xa0>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	e001      	b.n	8007e08 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8007e04:	2300      	movs	r3, #0
 8007e06:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d102      	bne.n	8007e14 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8007e0e:	f000 fd31 	bl	8008874 <xTimerCreateTimerTask>
 8007e12:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d115      	bne.n	8007e46 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	613b      	str	r3, [r7, #16]
}
 8007e2c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e2e:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <vTaskStartScheduler+0xa4>)
 8007e30:	f04f 32ff 	mov.w	r2, #4294967295
 8007e34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e36:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <vTaskStartScheduler+0xa8>)
 8007e38:	2201      	movs	r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007e3c:	4b09      	ldr	r3, [pc, #36]	; (8007e64 <vTaskStartScheduler+0xac>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e42:	f001 f831 	bl	8008ea8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e46:	bf00      	nop
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	08009440 	.word	0x08009440
 8007e54:	08008399 	.word	0x08008399
 8007e58:	20000bec 	.word	0x20000bec
 8007e5c:	20000be8 	.word	0x20000be8
 8007e60:	20000bd4 	.word	0x20000bd4
 8007e64:	20000bcc 	.word	0x20000bcc

08007e68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007e6c:	4b04      	ldr	r3, [pc, #16]	; (8007e80 <vTaskSuspendAll+0x18>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3301      	adds	r3, #1
 8007e72:	4a03      	ldr	r2, [pc, #12]	; (8007e80 <vTaskSuspendAll+0x18>)
 8007e74:	6013      	str	r3, [r2, #0]
}
 8007e76:	bf00      	nop
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	20000bf0 	.word	0x20000bf0

08007e84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e92:	f001 f829 	bl	8008ee8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e96:	4b39      	ldr	r3, [pc, #228]	; (8007f7c <xTaskResumeAll+0xf8>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	4a37      	ldr	r2, [pc, #220]	; (8007f7c <xTaskResumeAll+0xf8>)
 8007e9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ea0:	4b36      	ldr	r3, [pc, #216]	; (8007f7c <xTaskResumeAll+0xf8>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d162      	bne.n	8007f6e <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ea8:	4b35      	ldr	r3, [pc, #212]	; (8007f80 <xTaskResumeAll+0xfc>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d05e      	beq.n	8007f6e <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007eb0:	e02f      	b.n	8007f12 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007eb2:	4b34      	ldr	r3, [pc, #208]	; (8007f84 <xTaskResumeAll+0x100>)
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3318      	adds	r3, #24
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff f804 	bl	8006ecc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fe ffff 	bl	8006ecc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed2:	4b2d      	ldr	r3, [pc, #180]	; (8007f88 <xTaskResumeAll+0x104>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d903      	bls.n	8007ee2 <xTaskResumeAll+0x5e>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	4a2a      	ldr	r2, [pc, #168]	; (8007f88 <xTaskResumeAll+0x104>)
 8007ee0:	6013      	str	r3, [r2, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4a27      	ldr	r2, [pc, #156]	; (8007f8c <xTaskResumeAll+0x108>)
 8007ef0:	441a      	add	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4610      	mov	r0, r2
 8007efa:	f7fe ff8c 	bl	8006e16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f02:	4b23      	ldr	r3, [pc, #140]	; (8007f90 <xTaskResumeAll+0x10c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d302      	bcc.n	8007f12 <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 8007f0c:	4b21      	ldr	r3, [pc, #132]	; (8007f94 <xTaskResumeAll+0x110>)
 8007f0e:	2201      	movs	r2, #1
 8007f10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f12:	4b1c      	ldr	r3, [pc, #112]	; (8007f84 <xTaskResumeAll+0x100>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1cb      	bne.n	8007eb2 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f20:	f000 fade 	bl	80084e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007f24:	4b1c      	ldr	r3, [pc, #112]	; (8007f98 <xTaskResumeAll+0x114>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d010      	beq.n	8007f52 <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f30:	f000 f844 	bl	8007fbc <xTaskIncrementTick>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d002      	beq.n	8007f40 <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 8007f3a:	4b16      	ldr	r3, [pc, #88]	; (8007f94 <xTaskResumeAll+0x110>)
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3b01      	subs	r3, #1
 8007f44:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1f1      	bne.n	8007f30 <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
 8007f4c:	4b12      	ldr	r3, [pc, #72]	; (8007f98 <xTaskResumeAll+0x114>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f52:	4b10      	ldr	r3, [pc, #64]	; (8007f94 <xTaskResumeAll+0x110>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d009      	beq.n	8007f6e <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f5e:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <xTaskResumeAll+0x118>)
 8007f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f6e:	f000 ffd5 	bl	8008f1c <vPortExitCritical>

	return xAlreadyYielded;
 8007f72:	68bb      	ldr	r3, [r7, #8]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	20000bf0 	.word	0x20000bf0
 8007f80:	20000bc8 	.word	0x20000bc8
 8007f84:	20000b88 	.word	0x20000b88
 8007f88:	20000bd0 	.word	0x20000bd0
 8007f8c:	200006f8 	.word	0x200006f8
 8007f90:	200006f4 	.word	0x200006f4
 8007f94:	20000bdc 	.word	0x20000bdc
 8007f98:	20000bd8 	.word	0x20000bd8
 8007f9c:	e000ed04 	.word	0xe000ed04

08007fa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007fa6:	4b04      	ldr	r3, [pc, #16]	; (8007fb8 <xTaskGetTickCount+0x18>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007fac:	687b      	ldr	r3, [r7, #4]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bc80      	pop	{r7}
 8007fb6:	4770      	bx	lr
 8007fb8:	20000bcc 	.word	0x20000bcc

08007fbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fc6:	4b49      	ldr	r3, [pc, #292]	; (80080ec <xTaskIncrementTick+0x130>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d17d      	bne.n	80080ca <xTaskIncrementTick+0x10e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fce:	4b48      	ldr	r3, [pc, #288]	; (80080f0 <xTaskIncrementTick+0x134>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007fd6:	4a46      	ldr	r2, [pc, #280]	; (80080f0 <xTaskIncrementTick+0x134>)
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d110      	bne.n	8008004 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fe2:	4b44      	ldr	r3, [pc, #272]	; (80080f4 <xTaskIncrementTick+0x138>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	4b43      	ldr	r3, [pc, #268]	; (80080f8 <xTaskIncrementTick+0x13c>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a41      	ldr	r2, [pc, #260]	; (80080f4 <xTaskIncrementTick+0x138>)
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	4a41      	ldr	r2, [pc, #260]	; (80080f8 <xTaskIncrementTick+0x13c>)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6013      	str	r3, [r2, #0]
 8007ff6:	4b41      	ldr	r3, [pc, #260]	; (80080fc <xTaskIncrementTick+0x140>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	4a3f      	ldr	r2, [pc, #252]	; (80080fc <xTaskIncrementTick+0x140>)
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	f000 fa6e 	bl	80084e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008004:	4b3e      	ldr	r3, [pc, #248]	; (8008100 <xTaskIncrementTick+0x144>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	429a      	cmp	r2, r3
 800800c:	d34e      	bcc.n	80080ac <xTaskIncrementTick+0xf0>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800800e:	4b39      	ldr	r3, [pc, #228]	; (80080f4 <xTaskIncrementTick+0x138>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <xTaskIncrementTick+0x60>
 8008018:	2301      	movs	r3, #1
 800801a:	e000      	b.n	800801e <xTaskIncrementTick+0x62>
 800801c:	2300      	movs	r3, #0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d004      	beq.n	800802c <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008022:	4b37      	ldr	r3, [pc, #220]	; (8008100 <xTaskIncrementTick+0x144>)
 8008024:	f04f 32ff 	mov.w	r2, #4294967295
 8008028:	601a      	str	r2, [r3, #0]
					break;
 800802a:	e03f      	b.n	80080ac <xTaskIncrementTick+0xf0>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800802c:	4b31      	ldr	r3, [pc, #196]	; (80080f4 <xTaskIncrementTick+0x138>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	429a      	cmp	r2, r3
 8008042:	d203      	bcs.n	800804c <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008044:	4a2e      	ldr	r2, [pc, #184]	; (8008100 <xTaskIncrementTick+0x144>)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6013      	str	r3, [r2, #0]
						break;
 800804a:	e02f      	b.n	80080ac <xTaskIncrementTick+0xf0>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	3304      	adds	r3, #4
 8008050:	4618      	mov	r0, r3
 8008052:	f7fe ff3b 	bl	8006ecc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805a:	2b00      	cmp	r3, #0
 800805c:	d004      	beq.n	8008068 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	3318      	adds	r3, #24
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe ff32 	bl	8006ecc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806c:	4b25      	ldr	r3, [pc, #148]	; (8008104 <xTaskIncrementTick+0x148>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	429a      	cmp	r2, r3
 8008072:	d903      	bls.n	800807c <xTaskIncrementTick+0xc0>
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	4a22      	ldr	r2, [pc, #136]	; (8008104 <xTaskIncrementTick+0x148>)
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008080:	4613      	mov	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4a1f      	ldr	r2, [pc, #124]	; (8008108 <xTaskIncrementTick+0x14c>)
 800808a:	441a      	add	r2, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	3304      	adds	r3, #4
 8008090:	4619      	mov	r1, r3
 8008092:	4610      	mov	r0, r2
 8008094:	f7fe febf 	bl	8006e16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800809c:	4b1b      	ldr	r3, [pc, #108]	; (800810c <xTaskIncrementTick+0x150>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d3b3      	bcc.n	800800e <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80080a6:	2301      	movs	r3, #1
 80080a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080aa:	e7b0      	b.n	800800e <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080ac:	4b17      	ldr	r3, [pc, #92]	; (800810c <xTaskIncrementTick+0x150>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b2:	4915      	ldr	r1, [pc, #84]	; (8008108 <xTaskIncrementTick+0x14c>)
 80080b4:	4613      	mov	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	440b      	add	r3, r1
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d907      	bls.n	80080d4 <xTaskIncrementTick+0x118>
			{
				xSwitchRequired = pdTRUE;
 80080c4:	2301      	movs	r3, #1
 80080c6:	617b      	str	r3, [r7, #20]
 80080c8:	e004      	b.n	80080d4 <xTaskIncrementTick+0x118>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80080ca:	4b11      	ldr	r3, [pc, #68]	; (8008110 <xTaskIncrementTick+0x154>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3301      	adds	r3, #1
 80080d0:	4a0f      	ldr	r2, [pc, #60]	; (8008110 <xTaskIncrementTick+0x154>)
 80080d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80080d4:	4b0f      	ldr	r3, [pc, #60]	; (8008114 <xTaskIncrementTick+0x158>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <xTaskIncrementTick+0x124>
		{
			xSwitchRequired = pdTRUE;
 80080dc:	2301      	movs	r3, #1
 80080de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80080e0:	697b      	ldr	r3, [r7, #20]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	20000bf0 	.word	0x20000bf0
 80080f0:	20000bcc 	.word	0x20000bcc
 80080f4:	20000b80 	.word	0x20000b80
 80080f8:	20000b84 	.word	0x20000b84
 80080fc:	20000be0 	.word	0x20000be0
 8008100:	20000be8 	.word	0x20000be8
 8008104:	20000bd0 	.word	0x20000bd0
 8008108:	200006f8 	.word	0x200006f8
 800810c:	200006f4 	.word	0x200006f4
 8008110:	20000bd8 	.word	0x20000bd8
 8008114:	20000bdc 	.word	0x20000bdc

08008118 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800811e:	4b20      	ldr	r3, [pc, #128]	; (80081a0 <vTaskSwitchContext+0x88>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008126:	4b1f      	ldr	r3, [pc, #124]	; (80081a4 <vTaskSwitchContext+0x8c>)
 8008128:	2201      	movs	r2, #1
 800812a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800812c:	e033      	b.n	8008196 <vTaskSwitchContext+0x7e>
		xYieldPending = pdFALSE;
 800812e:	4b1d      	ldr	r3, [pc, #116]	; (80081a4 <vTaskSwitchContext+0x8c>)
 8008130:	2200      	movs	r2, #0
 8008132:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008134:	4b1c      	ldr	r3, [pc, #112]	; (80081a8 <vTaskSwitchContext+0x90>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	607b      	str	r3, [r7, #4]
 800813a:	e002      	b.n	8008142 <vTaskSwitchContext+0x2a>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3b01      	subs	r3, #1
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	491a      	ldr	r1, [pc, #104]	; (80081ac <vTaskSwitchContext+0x94>)
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	440b      	add	r3, r1
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f2      	beq.n	800813c <vTaskSwitchContext+0x24>
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4a12      	ldr	r2, [pc, #72]	; (80081ac <vTaskSwitchContext+0x94>)
 8008162:	4413      	add	r3, r2
 8008164:	603b      	str	r3, [r7, #0]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	605a      	str	r2, [r3, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	3308      	adds	r3, #8
 8008178:	429a      	cmp	r2, r3
 800817a:	d104      	bne.n	8008186 <vTaskSwitchContext+0x6e>
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	605a      	str	r2, [r3, #4]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	4a08      	ldr	r2, [pc, #32]	; (80081b0 <vTaskSwitchContext+0x98>)
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	4a05      	ldr	r2, [pc, #20]	; (80081a8 <vTaskSwitchContext+0x90>)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6013      	str	r3, [r2, #0]
}
 8008196:	bf00      	nop
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	bc80      	pop	{r7}
 800819e:	4770      	bx	lr
 80081a0:	20000bf0 	.word	0x20000bf0
 80081a4:	20000bdc 	.word	0x20000bdc
 80081a8:	20000bd0 	.word	0x20000bd0
 80081ac:	200006f8 	.word	0x200006f8
 80081b0:	200006f4 	.word	0x200006f4

080081b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081be:	4b07      	ldr	r3, [pc, #28]	; (80081dc <vTaskPlaceOnEventList+0x28>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3318      	adds	r3, #24
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7fe fe48 	bl	8006e5c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081cc:	2101      	movs	r1, #1
 80081ce:	6838      	ldr	r0, [r7, #0]
 80081d0:	f000 fafc 	bl	80087cc <prvAddCurrentTaskToDelayedList>
}
 80081d4:	bf00      	nop
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	200006f4 	.word	0x200006f4

080081e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081ec:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <vTaskPlaceOnEventListRestricted+0x38>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3318      	adds	r3, #24
 80081f2:	4619      	mov	r1, r3
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7fe fe0e 	bl	8006e16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8008200:	f04f 33ff 	mov.w	r3, #4294967295
 8008204:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008206:	6879      	ldr	r1, [r7, #4]
 8008208:	68b8      	ldr	r0, [r7, #8]
 800820a:	f000 fadf 	bl	80087cc <prvAddCurrentTaskToDelayedList>
	}
 800820e:	bf00      	nop
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	200006f4 	.word	0x200006f4

0800821c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	3318      	adds	r3, #24
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe fe4b 	bl	8006ecc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008236:	4b1e      	ldr	r3, [pc, #120]	; (80082b0 <xTaskRemoveFromEventList+0x94>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d11d      	bne.n	800827a <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	3304      	adds	r3, #4
 8008242:	4618      	mov	r0, r3
 8008244:	f7fe fe42 	bl	8006ecc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824c:	4b19      	ldr	r3, [pc, #100]	; (80082b4 <xTaskRemoveFromEventList+0x98>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d903      	bls.n	800825c <xTaskRemoveFromEventList+0x40>
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	4a16      	ldr	r2, [pc, #88]	; (80082b4 <xTaskRemoveFromEventList+0x98>)
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4a13      	ldr	r2, [pc, #76]	; (80082b8 <xTaskRemoveFromEventList+0x9c>)
 800826a:	441a      	add	r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	3304      	adds	r3, #4
 8008270:	4619      	mov	r1, r3
 8008272:	4610      	mov	r0, r2
 8008274:	f7fe fdcf 	bl	8006e16 <vListInsertEnd>
 8008278:	e005      	b.n	8008286 <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	3318      	adds	r3, #24
 800827e:	4619      	mov	r1, r3
 8008280:	480e      	ldr	r0, [pc, #56]	; (80082bc <xTaskRemoveFromEventList+0xa0>)
 8008282:	f7fe fdc8 	bl	8006e16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828a:	4b0d      	ldr	r3, [pc, #52]	; (80082c0 <xTaskRemoveFromEventList+0xa4>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008290:	429a      	cmp	r2, r3
 8008292:	d905      	bls.n	80082a0 <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008294:	2301      	movs	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008298:	4b0a      	ldr	r3, [pc, #40]	; (80082c4 <xTaskRemoveFromEventList+0xa8>)
 800829a:	2201      	movs	r2, #1
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	e001      	b.n	80082a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 80082a0:	2300      	movs	r3, #0
 80082a2:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80082a4:	68fb      	ldr	r3, [r7, #12]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	20000bf0 	.word	0x20000bf0
 80082b4:	20000bd0 	.word	0x20000bd0
 80082b8:	200006f8 	.word	0x200006f8
 80082bc:	20000b88 	.word	0x20000b88
 80082c0:	200006f4 	.word	0x200006f4
 80082c4:	20000bdc 	.word	0x20000bdc

080082c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <vTaskInternalSetTimeOutState+0x24>)
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082d8:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <vTaskInternalSetTimeOutState+0x28>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	605a      	str	r2, [r3, #4]
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bc80      	pop	{r7}
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	20000be0 	.word	0x20000be0
 80082f0:	20000bcc 	.word	0x20000bcc

080082f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 80082fe:	f000 fdf3 	bl	8008ee8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008302:	4b1d      	ldr	r3, [pc, #116]	; (8008378 <xTaskCheckForTimeOut+0x84>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831a:	d102      	bne.n	8008322 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e023      	b.n	800836a <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	4b15      	ldr	r3, [pc, #84]	; (800837c <xTaskCheckForTimeOut+0x88>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d007      	beq.n	800833e <xTaskCheckForTimeOut+0x4a>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	429a      	cmp	r2, r3
 8008336:	d302      	bcc.n	800833e <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008338:	2301      	movs	r3, #1
 800833a:	617b      	str	r3, [r7, #20]
 800833c:	e015      	b.n	800836a <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	429a      	cmp	r2, r3
 8008346:	d20b      	bcs.n	8008360 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	1ad2      	subs	r2, r2, r3
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff ffb7 	bl	80082c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800835a:	2300      	movs	r3, #0
 800835c:	617b      	str	r3, [r7, #20]
 800835e:	e004      	b.n	800836a <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008366:	2301      	movs	r3, #1
 8008368:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800836a:	f000 fdd7 	bl	8008f1c <vPortExitCritical>

	return xReturn;
 800836e:	697b      	ldr	r3, [r7, #20]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3718      	adds	r7, #24
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	20000bcc 	.word	0x20000bcc
 800837c:	20000be0 	.word	0x20000be0

08008380 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008384:	4b03      	ldr	r3, [pc, #12]	; (8008394 <vTaskMissedYield+0x14>)
 8008386:	2201      	movs	r2, #1
 8008388:	601a      	str	r2, [r3, #0]
}
 800838a:	bf00      	nop
 800838c:	46bd      	mov	sp, r7
 800838e:	bc80      	pop	{r7}
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	20000bdc 	.word	0x20000bdc

08008398 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083a0:	f000 f852 	bl	8008448 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083a4:	4b06      	ldr	r3, [pc, #24]	; (80083c0 <prvIdleTask+0x28>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d9f9      	bls.n	80083a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083ac:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <prvIdleTask+0x2c>)
 80083ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083bc:	e7f0      	b.n	80083a0 <prvIdleTask+0x8>
 80083be:	bf00      	nop
 80083c0:	200006f8 	.word	0x200006f8
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083ce:	2300      	movs	r3, #0
 80083d0:	607b      	str	r3, [r7, #4]
 80083d2:	e00c      	b.n	80083ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4a12      	ldr	r2, [pc, #72]	; (8008428 <prvInitialiseTaskLists+0x60>)
 80083e0:	4413      	add	r3, r2
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe fcec 	bl	8006dc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3301      	adds	r3, #1
 80083ec:	607b      	str	r3, [r7, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b37      	cmp	r3, #55	; 0x37
 80083f2:	d9ef      	bls.n	80083d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083f4:	480d      	ldr	r0, [pc, #52]	; (800842c <prvInitialiseTaskLists+0x64>)
 80083f6:	f7fe fce3 	bl	8006dc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083fa:	480d      	ldr	r0, [pc, #52]	; (8008430 <prvInitialiseTaskLists+0x68>)
 80083fc:	f7fe fce0 	bl	8006dc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008400:	480c      	ldr	r0, [pc, #48]	; (8008434 <prvInitialiseTaskLists+0x6c>)
 8008402:	f7fe fcdd 	bl	8006dc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008406:	480c      	ldr	r0, [pc, #48]	; (8008438 <prvInitialiseTaskLists+0x70>)
 8008408:	f7fe fcda 	bl	8006dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800840c:	480b      	ldr	r0, [pc, #44]	; (800843c <prvInitialiseTaskLists+0x74>)
 800840e:	f7fe fcd7 	bl	8006dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008412:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <prvInitialiseTaskLists+0x78>)
 8008414:	4a05      	ldr	r2, [pc, #20]	; (800842c <prvInitialiseTaskLists+0x64>)
 8008416:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008418:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <prvInitialiseTaskLists+0x7c>)
 800841a:	4a05      	ldr	r2, [pc, #20]	; (8008430 <prvInitialiseTaskLists+0x68>)
 800841c:	601a      	str	r2, [r3, #0]
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	200006f8 	.word	0x200006f8
 800842c:	20000b58 	.word	0x20000b58
 8008430:	20000b6c 	.word	0x20000b6c
 8008434:	20000b88 	.word	0x20000b88
 8008438:	20000b9c 	.word	0x20000b9c
 800843c:	20000bb4 	.word	0x20000bb4
 8008440:	20000b80 	.word	0x20000b80
 8008444:	20000b84 	.word	0x20000b84

08008448 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800844e:	e019      	b.n	8008484 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008450:	f000 fd4a 	bl	8008ee8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008454:	4b10      	ldr	r3, [pc, #64]	; (8008498 <prvCheckTasksWaitingTermination+0x50>)
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3304      	adds	r3, #4
 8008460:	4618      	mov	r0, r3
 8008462:	f7fe fd33 	bl	8006ecc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008466:	4b0d      	ldr	r3, [pc, #52]	; (800849c <prvCheckTasksWaitingTermination+0x54>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3b01      	subs	r3, #1
 800846c:	4a0b      	ldr	r2, [pc, #44]	; (800849c <prvCheckTasksWaitingTermination+0x54>)
 800846e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008470:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <prvCheckTasksWaitingTermination+0x58>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3b01      	subs	r3, #1
 8008476:	4a0a      	ldr	r2, [pc, #40]	; (80084a0 <prvCheckTasksWaitingTermination+0x58>)
 8008478:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800847a:	f000 fd4f 	bl	8008f1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f810 	bl	80084a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008484:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <prvCheckTasksWaitingTermination+0x58>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e1      	bne.n	8008450 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20000b9c 	.word	0x20000b9c
 800849c:	20000bc8 	.word	0x20000bc8
 80084a0:	20000bb0 	.word	0x20000bb0

080084a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d108      	bne.n	80084c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fe44 	bl	8009148 <vPortFree>
				vPortFree( pxTCB );
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fe41 	bl	8009148 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084c6:	e007      	b.n	80084d8 <prvDeleteTCB+0x34>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d102      	bne.n	80084d8 <prvDeleteTCB+0x34>
				vPortFree( pxTCB );
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fe38 	bl	8009148 <vPortFree>
	}
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084e6:	4b0e      	ldr	r3, [pc, #56]	; (8008520 <prvResetNextTaskUnblockTime+0x40>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <prvResetNextTaskUnblockTime+0x14>
 80084f0:	2301      	movs	r3, #1
 80084f2:	e000      	b.n	80084f6 <prvResetNextTaskUnblockTime+0x16>
 80084f4:	2300      	movs	r3, #0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d004      	beq.n	8008504 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084fa:	4b0a      	ldr	r3, [pc, #40]	; (8008524 <prvResetNextTaskUnblockTime+0x44>)
 80084fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008500:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008502:	e008      	b.n	8008516 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008504:	4b06      	ldr	r3, [pc, #24]	; (8008520 <prvResetNextTaskUnblockTime+0x40>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	4a04      	ldr	r2, [pc, #16]	; (8008524 <prvResetNextTaskUnblockTime+0x44>)
 8008514:	6013      	str	r3, [r2, #0]
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr
 8008520:	20000b80 	.word	0x20000b80
 8008524:	20000be8 	.word	0x20000be8

08008528 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800852e:	4b0b      	ldr	r3, [pc, #44]	; (800855c <xTaskGetSchedulerState+0x34>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d102      	bne.n	800853c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008536:	2301      	movs	r3, #1
 8008538:	607b      	str	r3, [r7, #4]
 800853a:	e008      	b.n	800854e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800853c:	4b08      	ldr	r3, [pc, #32]	; (8008560 <xTaskGetSchedulerState+0x38>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d102      	bne.n	800854a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008544:	2302      	movs	r3, #2
 8008546:	607b      	str	r3, [r7, #4]
 8008548:	e001      	b.n	800854e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800854a:	2300      	movs	r3, #0
 800854c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800854e:	687b      	ldr	r3, [r7, #4]
	}
 8008550:	4618      	mov	r0, r3
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	bc80      	pop	{r7}
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20000bd4 	.word	0x20000bd4
 8008560:	20000bf0 	.word	0x20000bf0

08008564 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d056      	beq.n	8008628 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800857e:	4b2d      	ldr	r3, [pc, #180]	; (8008634 <xTaskPriorityInherit+0xd0>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	429a      	cmp	r2, r3
 8008586:	d246      	bcs.n	8008616 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	2b00      	cmp	r3, #0
 800858e:	db06      	blt.n	800859e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008590:	4b28      	ldr	r3, [pc, #160]	; (8008634 <xTaskPriorityInherit+0xd0>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	6959      	ldr	r1, [r3, #20]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a6:	4613      	mov	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4a22      	ldr	r2, [pc, #136]	; (8008638 <xTaskPriorityInherit+0xd4>)
 80085b0:	4413      	add	r3, r2
 80085b2:	4299      	cmp	r1, r3
 80085b4:	d101      	bne.n	80085ba <xTaskPriorityInherit+0x56>
 80085b6:	2301      	movs	r3, #1
 80085b8:	e000      	b.n	80085bc <xTaskPriorityInherit+0x58>
 80085ba:	2300      	movs	r3, #0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d022      	beq.n	8008606 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	3304      	adds	r3, #4
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fe fc81 	bl	8006ecc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085ca:	4b1a      	ldr	r3, [pc, #104]	; (8008634 <xTaskPriorityInherit+0xd0>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d8:	4b18      	ldr	r3, [pc, #96]	; (800863c <xTaskPriorityInherit+0xd8>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d903      	bls.n	80085e8 <xTaskPriorityInherit+0x84>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	4a15      	ldr	r2, [pc, #84]	; (800863c <xTaskPriorityInherit+0xd8>)
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ec:	4613      	mov	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4a10      	ldr	r2, [pc, #64]	; (8008638 <xTaskPriorityInherit+0xd4>)
 80085f6:	441a      	add	r2, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	3304      	adds	r3, #4
 80085fc:	4619      	mov	r1, r3
 80085fe:	4610      	mov	r0, r2
 8008600:	f7fe fc09 	bl	8006e16 <vListInsertEnd>
 8008604:	e004      	b.n	8008610 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008606:	4b0b      	ldr	r3, [pc, #44]	; (8008634 <xTaskPriorityInherit+0xd0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008610:	2301      	movs	r3, #1
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	e008      	b.n	8008628 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800861a:	4b06      	ldr	r3, [pc, #24]	; (8008634 <xTaskPriorityInherit+0xd0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	429a      	cmp	r2, r3
 8008622:	d201      	bcs.n	8008628 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008624:	2301      	movs	r3, #1
 8008626:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008628:	68fb      	ldr	r3, [r7, #12]
	}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	200006f4 	.word	0x200006f4
 8008638:	200006f8 	.word	0x200006f8
 800863c:	20000bd0 	.word	0x20000bd0

08008640 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800864c:	2300      	movs	r3, #0
 800864e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d037      	beq.n	80086c6 <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800865a:	1e5a      	subs	r2, r3, #1
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008668:	429a      	cmp	r2, r3
 800866a:	d02c      	beq.n	80086c6 <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008670:	2b00      	cmp	r3, #0
 8008672:	d128      	bne.n	80086c6 <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	3304      	adds	r3, #4
 8008678:	4618      	mov	r0, r3
 800867a:	f7fe fc27 	bl	8006ecc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008696:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <xTaskPriorityDisinherit+0x90>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	429a      	cmp	r2, r3
 800869c:	d903      	bls.n	80086a6 <xTaskPriorityDisinherit+0x66>
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a2:	4a0b      	ldr	r2, [pc, #44]	; (80086d0 <xTaskPriorityDisinherit+0x90>)
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086aa:	4613      	mov	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4a08      	ldr	r2, [pc, #32]	; (80086d4 <xTaskPriorityDisinherit+0x94>)
 80086b4:	441a      	add	r2, r3
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	3304      	adds	r3, #4
 80086ba:	4619      	mov	r1, r3
 80086bc:	4610      	mov	r0, r2
 80086be:	f7fe fbaa 	bl	8006e16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086c2:	2301      	movs	r3, #1
 80086c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086c6:	68fb      	ldr	r3, [r7, #12]
	}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	20000bd0 	.word	0x20000bd0
 80086d4:	200006f8 	.word	0x200006f8

080086d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80086e6:	2301      	movs	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d050      	beq.n	8008792 <vTaskPriorityDisinheritAfterTimeout+0xba>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d902      	bls.n	8008700 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	617b      	str	r3, [r7, #20]
 80086fe:	e002      	b.n	8008706 <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008704:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	429a      	cmp	r2, r3
 800870e:	d040      	beq.n	8008792 <vTaskPriorityDisinheritAfterTimeout+0xba>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	429a      	cmp	r2, r3
 8008718:	d13b      	bne.n	8008792 <vTaskPriorityDisinheritAfterTimeout+0xba>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	2b00      	cmp	r3, #0
 800872c:	db04      	blt.n	8008738 <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	6959      	ldr	r1, [r3, #20]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	4613      	mov	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4a15      	ldr	r2, [pc, #84]	; (800879c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8008748:	4413      	add	r3, r2
 800874a:	4299      	cmp	r1, r3
 800874c:	d101      	bne.n	8008752 <vTaskPriorityDisinheritAfterTimeout+0x7a>
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8008752:	2300      	movs	r3, #0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01c      	beq.n	8008792 <vTaskPriorityDisinheritAfterTimeout+0xba>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	3304      	adds	r3, #4
 800875c:	4618      	mov	r0, r3
 800875e:	f7fe fbb5 	bl	8006ecc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008766:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	429a      	cmp	r2, r3
 800876c:	d903      	bls.n	8008776 <vTaskPriorityDisinheritAfterTimeout+0x9e>
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	4a0b      	ldr	r2, [pc, #44]	; (80087a0 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877a:	4613      	mov	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4a06      	ldr	r2, [pc, #24]	; (800879c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8008784:	441a      	add	r2, r3
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	3304      	adds	r3, #4
 800878a:	4619      	mov	r1, r3
 800878c:	4610      	mov	r0, r2
 800878e:	f7fe fb42 	bl	8006e16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008792:	bf00      	nop
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	200006f8 	.word	0x200006f8
 80087a0:	20000bd0 	.word	0x20000bd0

080087a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80087a4:	b480      	push	{r7}
 80087a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80087a8:	4b07      	ldr	r3, [pc, #28]	; (80087c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d004      	beq.n	80087ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80087b0:	4b05      	ldr	r3, [pc, #20]	; (80087c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087b6:	3201      	adds	r2, #1
 80087b8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80087ba:	4b03      	ldr	r3, [pc, #12]	; (80087c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80087bc:	681b      	ldr	r3, [r3, #0]
	}
 80087be:	4618      	mov	r0, r3
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc80      	pop	{r7}
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	200006f4 	.word	0x200006f4

080087cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087d6:	4b21      	ldr	r3, [pc, #132]	; (800885c <prvAddCurrentTaskToDelayedList+0x90>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087dc:	4b20      	ldr	r3, [pc, #128]	; (8008860 <prvAddCurrentTaskToDelayedList+0x94>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3304      	adds	r3, #4
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe fb72 	bl	8006ecc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ee:	d10a      	bne.n	8008806 <prvAddCurrentTaskToDelayedList+0x3a>
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d007      	beq.n	8008806 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087f6:	4b1a      	ldr	r3, [pc, #104]	; (8008860 <prvAddCurrentTaskToDelayedList+0x94>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3304      	adds	r3, #4
 80087fc:	4619      	mov	r1, r3
 80087fe:	4819      	ldr	r0, [pc, #100]	; (8008864 <prvAddCurrentTaskToDelayedList+0x98>)
 8008800:	f7fe fb09 	bl	8006e16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008804:	e026      	b.n	8008854 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4413      	add	r3, r2
 800880c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800880e:	4b14      	ldr	r3, [pc, #80]	; (8008860 <prvAddCurrentTaskToDelayedList+0x94>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	429a      	cmp	r2, r3
 800881c:	d209      	bcs.n	8008832 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800881e:	4b12      	ldr	r3, [pc, #72]	; (8008868 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	4b0f      	ldr	r3, [pc, #60]	; (8008860 <prvAddCurrentTaskToDelayedList+0x94>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3304      	adds	r3, #4
 8008828:	4619      	mov	r1, r3
 800882a:	4610      	mov	r0, r2
 800882c:	f7fe fb16 	bl	8006e5c <vListInsert>
}
 8008830:	e010      	b.n	8008854 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008832:	4b0e      	ldr	r3, [pc, #56]	; (800886c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	4b0a      	ldr	r3, [pc, #40]	; (8008860 <prvAddCurrentTaskToDelayedList+0x94>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3304      	adds	r3, #4
 800883c:	4619      	mov	r1, r3
 800883e:	4610      	mov	r0, r2
 8008840:	f7fe fb0c 	bl	8006e5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008844:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	429a      	cmp	r2, r3
 800884c:	d202      	bcs.n	8008854 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800884e:	4a08      	ldr	r2, [pc, #32]	; (8008870 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	6013      	str	r3, [r2, #0]
}
 8008854:	bf00      	nop
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20000bcc 	.word	0x20000bcc
 8008860:	200006f4 	.word	0x200006f4
 8008864:	20000bb4 	.word	0x20000bb4
 8008868:	20000b84 	.word	0x20000b84
 800886c:	20000b80 	.word	0x20000b80
 8008870:	20000be8 	.word	0x20000be8

08008874 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b088      	sub	sp, #32
 8008878:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800887e:	f000 fa69 	bl	8008d54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008882:	4b15      	ldr	r3, [pc, #84]	; (80088d8 <xTimerCreateTimerTask+0x64>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d020      	beq.n	80088cc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800888a:	2300      	movs	r3, #0
 800888c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800888e:	2300      	movs	r3, #0
 8008890:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008892:	463a      	mov	r2, r7
 8008894:	1d39      	adds	r1, r7, #4
 8008896:	f107 0308 	add.w	r3, r7, #8
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fa76 	bl	8006d8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	9202      	str	r2, [sp, #8]
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	2302      	movs	r3, #2
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	2300      	movs	r3, #0
 80088b0:	460a      	mov	r2, r1
 80088b2:	490a      	ldr	r1, [pc, #40]	; (80088dc <xTimerCreateTimerTask+0x68>)
 80088b4:	480a      	ldr	r0, [pc, #40]	; (80088e0 <xTimerCreateTimerTask+0x6c>)
 80088b6:	f7ff f8ff 	bl	8007ab8 <xTaskCreateStatic>
 80088ba:	4603      	mov	r3, r0
 80088bc:	4a09      	ldr	r2, [pc, #36]	; (80088e4 <xTimerCreateTimerTask+0x70>)
 80088be:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80088c0:	4b08      	ldr	r3, [pc, #32]	; (80088e4 <xTimerCreateTimerTask+0x70>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80088c8:	2301      	movs	r3, #1
 80088ca:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 80088cc:	68fb      	ldr	r3, [r7, #12]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20000c24 	.word	0x20000c24
 80088dc:	08009448 	.word	0x08009448
 80088e0:	080089cd 	.word	0x080089cd
 80088e4:	20000c28 	.word	0x20000c28

080088e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08a      	sub	sp, #40	; 0x28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
 80088f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80088fa:	4b1a      	ldr	r3, [pc, #104]	; (8008964 <xTimerGenericCommand+0x7c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d02a      	beq.n	8008958 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b05      	cmp	r3, #5
 8008912:	dc18      	bgt.n	8008946 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008914:	f7ff fe08 	bl	8008528 <xTaskGetSchedulerState>
 8008918:	4603      	mov	r3, r0
 800891a:	2b02      	cmp	r3, #2
 800891c:	d109      	bne.n	8008932 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800891e:	4b11      	ldr	r3, [pc, #68]	; (8008964 <xTimerGenericCommand+0x7c>)
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	f107 0114 	add.w	r1, r7, #20
 8008926:	2300      	movs	r3, #0
 8008928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800892a:	f7fe fbdb 	bl	80070e4 <xQueueGenericSend>
 800892e:	6278      	str	r0, [r7, #36]	; 0x24
 8008930:	e012      	b.n	8008958 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008932:	4b0c      	ldr	r3, [pc, #48]	; (8008964 <xTimerGenericCommand+0x7c>)
 8008934:	6818      	ldr	r0, [r3, #0]
 8008936:	f107 0114 	add.w	r1, r7, #20
 800893a:	2300      	movs	r3, #0
 800893c:	2200      	movs	r2, #0
 800893e:	f7fe fbd1 	bl	80070e4 <xQueueGenericSend>
 8008942:	6278      	str	r0, [r7, #36]	; 0x24
 8008944:	e008      	b.n	8008958 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008946:	4b07      	ldr	r3, [pc, #28]	; (8008964 <xTimerGenericCommand+0x7c>)
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	f107 0114 	add.w	r1, r7, #20
 800894e:	2300      	movs	r3, #0
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	f7fe fc71 	bl	8007238 <xQueueGenericSendFromISR>
 8008956:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800895a:	4618      	mov	r0, r3
 800895c:	3728      	adds	r7, #40	; 0x28
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20000c24 	.word	0x20000c24

08008968 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af02      	add	r7, sp, #8
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008972:	4b15      	ldr	r3, [pc, #84]	; (80089c8 <prvProcessExpiredTimer+0x60>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	3304      	adds	r3, #4
 8008980:	4618      	mov	r0, r3
 8008982:	f7fe faa3 	bl	8006ecc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d114      	bne.n	80089b8 <prvProcessExpiredTimer+0x50>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	699a      	ldr	r2, [r3, #24]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	18d1      	adds	r1, r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 f8ba 	bl	8008b14 <prvInsertTimerInActiveList>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d008      	beq.n	80089b8 <prvProcessExpiredTimer+0x50>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089a6:	2300      	movs	r3, #0
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	2300      	movs	r3, #0
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	2100      	movs	r1, #0
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f7ff ff99 	bl	80088e8 <xTimerGenericCommand>
 80089b6:	60b8      	str	r0, [r7, #8]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	4798      	blx	r3
}
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	20000c1c 	.word	0x20000c1c

080089cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089d4:	f107 0308 	add.w	r3, r7, #8
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 f857 	bl	8008a8c <prvGetNextExpireTime>
 80089de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	4619      	mov	r1, r3
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 f803 	bl	80089f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80089ea:	f000 f8d5 	bl	8008b98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089ee:	e7f1      	b.n	80089d4 <prvTimerTask+0x8>

080089f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80089fa:	f7ff fa35 	bl	8007e68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089fe:	f107 0308 	add.w	r3, r7, #8
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 f866 	bl	8008ad4 <prvSampleTimeNow>
 8008a08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d130      	bne.n	8008a72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10a      	bne.n	8008a2c <prvProcessTimerOrBlockTask+0x3c>
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d806      	bhi.n	8008a2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a1e:	f7ff fa31 	bl	8007e84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a22:	68f9      	ldr	r1, [r7, #12]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7ff ff9f 	bl	8008968 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a2a:	e024      	b.n	8008a76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d008      	beq.n	8008a44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a32:	4b13      	ldr	r3, [pc, #76]	; (8008a80 <prvProcessTimerOrBlockTask+0x90>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	bf0c      	ite	eq
 8008a3c:	2301      	moveq	r3, #1
 8008a3e:	2300      	movne	r3, #0
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a44:	4b0f      	ldr	r3, [pc, #60]	; (8008a84 <prvProcessTimerOrBlockTask+0x94>)
 8008a46:	6818      	ldr	r0, [r3, #0]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	4619      	mov	r1, r3
 8008a52:	f7fe fffd 	bl	8007a50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a56:	f7ff fa15 	bl	8007e84 <xTaskResumeAll>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10a      	bne.n	8008a76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a60:	4b09      	ldr	r3, [pc, #36]	; (8008a88 <prvProcessTimerOrBlockTask+0x98>)
 8008a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a66:	601a      	str	r2, [r3, #0]
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	f3bf 8f6f 	isb	sy
}
 8008a70:	e001      	b.n	8008a76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a72:	f7ff fa07 	bl	8007e84 <xTaskResumeAll>
}
 8008a76:	bf00      	nop
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20000c20 	.word	0x20000c20
 8008a84:	20000c24 	.word	0x20000c24
 8008a88:	e000ed04 	.word	0xe000ed04

08008a8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a94:	4b0e      	ldr	r3, [pc, #56]	; (8008ad0 <prvGetNextExpireTime+0x44>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	bf0c      	ite	eq
 8008a9e:	2301      	moveq	r3, #1
 8008aa0:	2300      	movne	r3, #0
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d105      	bne.n	8008abe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ab2:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <prvGetNextExpireTime+0x44>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	e001      	b.n	8008ac2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bc80      	pop	{r7}
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	20000c1c 	.word	0x20000c1c

08008ad4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008adc:	f7ff fa60 	bl	8007fa0 <xTaskGetTickCount>
 8008ae0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ae2:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <prvSampleTimeNow+0x3c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d205      	bcs.n	8008af8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008aec:	f000 f8de 	bl	8008cac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	601a      	str	r2, [r3, #0]
 8008af6:	e002      	b.n	8008afe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008afe:	4a04      	ldr	r2, [pc, #16]	; (8008b10 <prvSampleTimeNow+0x3c>)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008b04:	68fb      	ldr	r3, [r7, #12]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20000c2c 	.word	0x20000c2c

08008b14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d812      	bhi.n	8008b60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	1ad2      	subs	r2, r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d302      	bcc.n	8008b4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	617b      	str	r3, [r7, #20]
 8008b4c:	e01b      	b.n	8008b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b4e:	4b10      	ldr	r3, [pc, #64]	; (8008b90 <prvInsertTimerInActiveList+0x7c>)
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	3304      	adds	r3, #4
 8008b56:	4619      	mov	r1, r3
 8008b58:	4610      	mov	r0, r2
 8008b5a:	f7fe f97f 	bl	8006e5c <vListInsert>
 8008b5e:	e012      	b.n	8008b86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d206      	bcs.n	8008b76 <prvInsertTimerInActiveList+0x62>
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d302      	bcc.n	8008b76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b70:	2301      	movs	r3, #1
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	e007      	b.n	8008b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b76:	4b07      	ldr	r3, [pc, #28]	; (8008b94 <prvInsertTimerInActiveList+0x80>)
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4610      	mov	r0, r2
 8008b82:	f7fe f96b 	bl	8006e5c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b86:	697b      	ldr	r3, [r7, #20]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20000c20 	.word	0x20000c20
 8008b94:	20000c1c 	.word	0x20000c1c

08008b98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08c      	sub	sp, #48	; 0x30
 8008b9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b9e:	e073      	b.n	8008c88 <prvProcessReceivedCommands+0xf0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	da0b      	bge.n	8008bbe <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ba6:	f107 0308 	add.w	r3, r7, #8
 8008baa:	3304      	adds	r3, #4
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb4:	6850      	ldr	r0, [r2, #4]
 8008bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb8:	6892      	ldr	r2, [r2, #8]
 8008bba:	4611      	mov	r1, r2
 8008bbc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	db60      	blt.n	8008c86 <prvProcessReceivedCommands+0xee>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008bc8:	6a3b      	ldr	r3, [r7, #32]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <prvProcessReceivedCommands+0x42>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bd0:	6a3b      	ldr	r3, [r7, #32]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fe f979 	bl	8006ecc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bda:	1d3b      	adds	r3, r7, #4
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7ff ff79 	bl	8008ad4 <prvSampleTimeNow>
 8008be2:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2b09      	cmp	r3, #9
 8008be8:	d84e      	bhi.n	8008c88 <prvProcessReceivedCommands+0xf0>
 8008bea:	a201      	add	r2, pc, #4	; (adr r2, 8008bf0 <prvProcessReceivedCommands+0x58>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c19 	.word	0x08008c19
 8008bf4:	08008c19 	.word	0x08008c19
 8008bf8:	08008c19 	.word	0x08008c19
 8008bfc:	08008c89 	.word	0x08008c89
 8008c00:	08008c5b 	.word	0x08008c5b
 8008c04:	08008c75 	.word	0x08008c75
 8008c08:	08008c19 	.word	0x08008c19
 8008c0c:	08008c19 	.word	0x08008c19
 8008c10:	08008c89 	.word	0x08008c89
 8008c14:	08008c5b 	.word	0x08008c5b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	18d1      	adds	r1, r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	69fa      	ldr	r2, [r7, #28]
 8008c24:	6a38      	ldr	r0, [r7, #32]
 8008c26:	f7ff ff75 	bl	8008b14 <prvInsertTimerInActiveList>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d02b      	beq.n	8008c88 <prvProcessReceivedCommands+0xf0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c34:	6a38      	ldr	r0, [r7, #32]
 8008c36:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d123      	bne.n	8008c88 <prvProcessReceivedCommands+0xf0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	441a      	add	r2, r3
 8008c48:	2300      	movs	r3, #0
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	2100      	movs	r1, #0
 8008c50:	6a38      	ldr	r0, [r7, #32]
 8008c52:	f7ff fe49 	bl	80088e8 <xTimerGenericCommand>
 8008c56:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8008c58:	e016      	b.n	8008c88 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	699a      	ldr	r2, [r3, #24]
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	18d1      	adds	r1, r2, r3
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	69fa      	ldr	r2, [r7, #28]
 8008c6c:	6a38      	ldr	r0, [r7, #32]
 8008c6e:	f7ff ff51 	bl	8008b14 <prvInsertTimerInActiveList>
					break;
 8008c72:	e009      	b.n	8008c88 <prvProcessReceivedCommands+0xf0>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d104      	bne.n	8008c88 <prvProcessReceivedCommands+0xf0>
						{
							vPortFree( pxTimer );
 8008c7e:	6a38      	ldr	r0, [r7, #32]
 8008c80:	f000 fa62 	bl	8009148 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c84:	e000      	b.n	8008c88 <prvProcessReceivedCommands+0xf0>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c86:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c88:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <prvProcessReceivedCommands+0x110>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f107 0108 	add.w	r1, r7, #8
 8008c90:	2200      	movs	r2, #0
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fb7e 	bl	8007394 <xQueueReceive>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d180      	bne.n	8008ba0 <prvProcessReceivedCommands+0x8>
	}
}
 8008c9e:	bf00      	nop
 8008ca0:	bf00      	nop
 8008ca2:	3728      	adds	r7, #40	; 0x28
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	20000c24 	.word	0x20000c24

08008cac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cb2:	e037      	b.n	8008d24 <prvSwitchTimerLists+0x78>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cb4:	4b25      	ldr	r3, [pc, #148]	; (8008d4c <prvSwitchTimerLists+0xa0>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cbe:	4b23      	ldr	r3, [pc, #140]	; (8008d4c <prvSwitchTimerLists+0xa0>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	3304      	adds	r3, #4
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fe f8fd 	bl	8006ecc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d120      	bne.n	8008d24 <prvSwitchTimerLists+0x78>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4413      	add	r3, r2
 8008cea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d90e      	bls.n	8008d12 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d00:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <prvSwitchTimerLists+0xa0>)
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3304      	adds	r3, #4
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4610      	mov	r0, r2
 8008d0c:	f7fe f8a6 	bl	8006e5c <vListInsert>
 8008d10:	e008      	b.n	8008d24 <prvSwitchTimerLists+0x78>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d12:	2300      	movs	r3, #0
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	2300      	movs	r3, #0
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f7ff fde3 	bl	80088e8 <xTimerGenericCommand>
 8008d22:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d24:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <prvSwitchTimerLists+0xa0>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1c2      	bne.n	8008cb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d2e:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <prvSwitchTimerLists+0xa0>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d34:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <prvSwitchTimerLists+0xa4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a04      	ldr	r2, [pc, #16]	; (8008d4c <prvSwitchTimerLists+0xa0>)
 8008d3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d3c:	4a04      	ldr	r2, [pc, #16]	; (8008d50 <prvSwitchTimerLists+0xa4>)
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	6013      	str	r3, [r2, #0]
}
 8008d42:	bf00      	nop
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000c1c 	.word	0x20000c1c
 8008d50:	20000c20 	.word	0x20000c20

08008d54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d5a:	f000 f8c5 	bl	8008ee8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d5e:	4b15      	ldr	r3, [pc, #84]	; (8008db4 <prvCheckForValidListAndQueue+0x60>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d120      	bne.n	8008da8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d66:	4814      	ldr	r0, [pc, #80]	; (8008db8 <prvCheckForValidListAndQueue+0x64>)
 8008d68:	f7fe f82a 	bl	8006dc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d6c:	4813      	ldr	r0, [pc, #76]	; (8008dbc <prvCheckForValidListAndQueue+0x68>)
 8008d6e:	f7fe f827 	bl	8006dc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d72:	4b13      	ldr	r3, [pc, #76]	; (8008dc0 <prvCheckForValidListAndQueue+0x6c>)
 8008d74:	4a10      	ldr	r2, [pc, #64]	; (8008db8 <prvCheckForValidListAndQueue+0x64>)
 8008d76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d78:	4b12      	ldr	r3, [pc, #72]	; (8008dc4 <prvCheckForValidListAndQueue+0x70>)
 8008d7a:	4a10      	ldr	r2, [pc, #64]	; (8008dbc <prvCheckForValidListAndQueue+0x68>)
 8008d7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d7e:	2300      	movs	r3, #0
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <prvCheckForValidListAndQueue+0x74>)
 8008d84:	4a11      	ldr	r2, [pc, #68]	; (8008dcc <prvCheckForValidListAndQueue+0x78>)
 8008d86:	2110      	movs	r1, #16
 8008d88:	200a      	movs	r0, #10
 8008d8a:	f7fe f923 	bl	8006fd4 <xQueueGenericCreateStatic>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	4a08      	ldr	r2, [pc, #32]	; (8008db4 <prvCheckForValidListAndQueue+0x60>)
 8008d92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d94:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <prvCheckForValidListAndQueue+0x60>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d005      	beq.n	8008da8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d9c:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <prvCheckForValidListAndQueue+0x60>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	490b      	ldr	r1, [pc, #44]	; (8008dd0 <prvCheckForValidListAndQueue+0x7c>)
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fe fe2c 	bl	8007a00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008da8:	f000 f8b8 	bl	8008f1c <vPortExitCritical>
}
 8008dac:	bf00      	nop
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	20000c24 	.word	0x20000c24
 8008db8:	20000bf4 	.word	0x20000bf4
 8008dbc:	20000c08 	.word	0x20000c08
 8008dc0:	20000c1c 	.word	0x20000c1c
 8008dc4:	20000c20 	.word	0x20000c20
 8008dc8:	20000cd0 	.word	0x20000cd0
 8008dcc:	20000c30 	.word	0x20000c30
 8008dd0:	08009450 	.word	0x08009450

08008dd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3b04      	subs	r3, #4
 8008de4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3b04      	subs	r3, #4
 8008df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f023 0201 	bic.w	r2, r3, #1
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3b04      	subs	r3, #4
 8008e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e04:	4a08      	ldr	r2, [pc, #32]	; (8008e28 <pxPortInitialiseStack+0x54>)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3b14      	subs	r3, #20
 8008e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3b20      	subs	r3, #32
 8008e1a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bc80      	pop	{r7}
 8008e26:	4770      	bx	lr
 8008e28:	08008e2d 	.word	0x08008e2d

08008e2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008e32:	2300      	movs	r3, #0
 8008e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3a:	f383 8811 	msr	BASEPRI, r3
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f3bf 8f4f 	dsb	sy
 8008e46:	607b      	str	r3, [r7, #4]
}
 8008e48:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e4a:	bf00      	nop
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0fc      	beq.n	8008e4c <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e52:	bf00      	nop
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bc80      	pop	{r7}
 8008e5c:	4770      	bx	lr
	...

08008e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e60:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <pxCurrentTCBConst2>)
 8008e62:	6819      	ldr	r1, [r3, #0]
 8008e64:	6808      	ldr	r0, [r1, #0]
 8008e66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e6a:	f380 8809 	msr	PSP, r0
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f04f 0000 	mov.w	r0, #0
 8008e76:	f380 8811 	msr	BASEPRI, r0
 8008e7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008e7e:	4770      	bx	lr

08008e80 <pxCurrentTCBConst2>:
 8008e80:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop

08008e88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008e88:	4806      	ldr	r0, [pc, #24]	; (8008ea4 <prvPortStartFirstTask+0x1c>)
 8008e8a:	6800      	ldr	r0, [r0, #0]
 8008e8c:	6800      	ldr	r0, [r0, #0]
 8008e8e:	f380 8808 	msr	MSP, r0
 8008e92:	b662      	cpsie	i
 8008e94:	b661      	cpsie	f
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	df00      	svc	0
 8008ea0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008ea2:	bf00      	nop
 8008ea4:	e000ed08 	.word	0xe000ed08

08008ea8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008eac:	4b0c      	ldr	r3, [pc, #48]	; (8008ee0 <xPortStartScheduler+0x38>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a0b      	ldr	r2, [pc, #44]	; (8008ee0 <xPortStartScheduler+0x38>)
 8008eb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008eb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008eb8:	4b09      	ldr	r3, [pc, #36]	; (8008ee0 <xPortStartScheduler+0x38>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a08      	ldr	r2, [pc, #32]	; (8008ee0 <xPortStartScheduler+0x38>)
 8008ebe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ec2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ec4:	f000 f88a 	bl	8008fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ec8:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <xPortStartScheduler+0x3c>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ece:	f7ff ffdb 	bl	8008e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ed2:	f7ff f921 	bl	8008118 <vTaskSwitchContext>
	prvTaskExitError();
 8008ed6:	f7ff ffa9 	bl	8008e2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	e000ed20 	.word	0xe000ed20
 8008ee4:	2000000c 	.word	0x2000000c

08008ee8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	607b      	str	r3, [r7, #4]
}
 8008f00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f02:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <vPortEnterCritical+0x30>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3301      	adds	r3, #1
 8008f08:	4a03      	ldr	r2, [pc, #12]	; (8008f18 <vPortEnterCritical+0x30>)
 8008f0a:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bc80      	pop	{r7}
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	2000000c 	.word	0x2000000c

08008f1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8008f22:	4b0a      	ldr	r3, [pc, #40]	; (8008f4c <vPortExitCritical+0x30>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	4a08      	ldr	r2, [pc, #32]	; (8008f4c <vPortExitCritical+0x30>)
 8008f2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f2c:	4b07      	ldr	r3, [pc, #28]	; (8008f4c <vPortExitCritical+0x30>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d105      	bne.n	8008f40 <vPortExitCritical+0x24>
 8008f34:	2300      	movs	r3, #0
 8008f36:	607b      	str	r3, [r7, #4]
	__asm volatile
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f383 8811 	msr	BASEPRI, r3
}
 8008f3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bc80      	pop	{r7}
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	2000000c 	.word	0x2000000c

08008f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f50:	f3ef 8009 	mrs	r0, PSP
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	4b0d      	ldr	r3, [pc, #52]	; (8008f90 <pxCurrentTCBConst>)
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008f60:	6010      	str	r0, [r2, #0]
 8008f62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008f66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f6a:	f380 8811 	msr	BASEPRI, r0
 8008f6e:	f7ff f8d3 	bl	8008118 <vTaskSwitchContext>
 8008f72:	f04f 0000 	mov.w	r0, #0
 8008f76:	f380 8811 	msr	BASEPRI, r0
 8008f7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f7e:	6819      	ldr	r1, [r3, #0]
 8008f80:	6808      	ldr	r0, [r1, #0]
 8008f82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008f86:	f380 8809 	msr	PSP, r0
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	4770      	bx	lr

08008f90 <pxCurrentTCBConst>:
 8008f90:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop

08008f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	607b      	str	r3, [r7, #4]
}
 8008fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008fb2:	f7ff f803 	bl	8007fbc <xTaskIncrementTick>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d003      	beq.n	8008fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008fbc:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <xPortSysTickHandler+0x40>)
 8008fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	f383 8811 	msr	BASEPRI, r3
}
 8008fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	e000ed04 	.word	0xe000ed04

08008fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fe0:	4b0a      	ldr	r3, [pc, #40]	; (800900c <vPortSetupTimerInterrupt+0x30>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fe6:	4b0a      	ldr	r3, [pc, #40]	; (8009010 <vPortSetupTimerInterrupt+0x34>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fec:	4b09      	ldr	r3, [pc, #36]	; (8009014 <vPortSetupTimerInterrupt+0x38>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a09      	ldr	r2, [pc, #36]	; (8009018 <vPortSetupTimerInterrupt+0x3c>)
 8008ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff6:	099b      	lsrs	r3, r3, #6
 8008ff8:	4a08      	ldr	r2, [pc, #32]	; (800901c <vPortSetupTimerInterrupt+0x40>)
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ffe:	4b03      	ldr	r3, [pc, #12]	; (800900c <vPortSetupTimerInterrupt+0x30>)
 8009000:	2207      	movs	r2, #7
 8009002:	601a      	str	r2, [r3, #0]
}
 8009004:	bf00      	nop
 8009006:	46bd      	mov	sp, r7
 8009008:	bc80      	pop	{r7}
 800900a:	4770      	bx	lr
 800900c:	e000e010 	.word	0xe000e010
 8009010:	e000e018 	.word	0xe000e018
 8009014:	20000000 	.word	0x20000000
 8009018:	10624dd3 	.word	0x10624dd3
 800901c:	e000e014 	.word	0xe000e014

08009020 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009028:	2300      	movs	r3, #0
 800902a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800902c:	f7fe ff1c 	bl	8007e68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009030:	4b40      	ldr	r3, [pc, #256]	; (8009134 <pvPortMalloc+0x114>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d101      	bne.n	800903c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009038:	f000 f8c0 	bl	80091bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800903c:	4b3e      	ldr	r3, [pc, #248]	; (8009138 <pvPortMalloc+0x118>)
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4013      	ands	r3, r2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d16d      	bne.n	8009124 <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00d      	beq.n	800906a <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 800904e:	2208      	movs	r2, #8
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4413      	add	r3, r2
 8009054:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	2b00      	cmp	r3, #0
 800905e:	d004      	beq.n	800906a <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f023 0307 	bic.w	r3, r3, #7
 8009066:	3308      	adds	r3, #8
 8009068:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d059      	beq.n	8009124 <pvPortMalloc+0x104>
 8009070:	4b32      	ldr	r3, [pc, #200]	; (800913c <pvPortMalloc+0x11c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	429a      	cmp	r2, r3
 8009078:	d854      	bhi.n	8009124 <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800907a:	4b31      	ldr	r3, [pc, #196]	; (8009140 <pvPortMalloc+0x120>)
 800907c:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800907e:	4b30      	ldr	r3, [pc, #192]	; (8009140 <pvPortMalloc+0x120>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009084:	e004      	b.n	8009090 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	429a      	cmp	r2, r3
 8009098:	d903      	bls.n	80090a2 <pvPortMalloc+0x82>
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1f1      	bne.n	8009086 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090a2:	4b24      	ldr	r3, [pc, #144]	; (8009134 <pvPortMalloc+0x114>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d03b      	beq.n	8009124 <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2208      	movs	r2, #8
 80090b2:	4413      	add	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	1ad2      	subs	r2, r2, r3
 80090c6:	2308      	movs	r3, #8
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d90f      	bls.n	80090ee <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4413      	add	r3, r2
 80090d4:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	1ad2      	subs	r2, r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090e8:	68b8      	ldr	r0, [r7, #8]
 80090ea:	f000 f8c9 	bl	8009280 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090ee:	4b13      	ldr	r3, [pc, #76]	; (800913c <pvPortMalloc+0x11c>)
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	4a10      	ldr	r2, [pc, #64]	; (800913c <pvPortMalloc+0x11c>)
 80090fa:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090fc:	4b0f      	ldr	r3, [pc, #60]	; (800913c <pvPortMalloc+0x11c>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	4b10      	ldr	r3, [pc, #64]	; (8009144 <pvPortMalloc+0x124>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	d203      	bcs.n	8009110 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009108:	4b0c      	ldr	r3, [pc, #48]	; (800913c <pvPortMalloc+0x11c>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a0d      	ldr	r2, [pc, #52]	; (8009144 <pvPortMalloc+0x124>)
 800910e:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	685a      	ldr	r2, [r3, #4]
 8009114:	4b08      	ldr	r3, [pc, #32]	; (8009138 <pvPortMalloc+0x118>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	431a      	orrs	r2, r3
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009124:	f7fe feae 	bl	8007e84 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8009128:	68fb      	ldr	r3, [r7, #12]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20003528 	.word	0x20003528
 8009138:	20003534 	.word	0x20003534
 800913c:	2000352c 	.word	0x2000352c
 8009140:	20003520 	.word	0x20003520
 8009144:	20003530 	.word	0x20003530

08009148 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d027      	beq.n	80091aa <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800915a:	2308      	movs	r3, #8
 800915c:	425b      	negs	r3, r3
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	4413      	add	r3, r2
 8009162:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <vPortFree+0x6c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4013      	ands	r3, r2
 8009172:	2b00      	cmp	r3, #0
 8009174:	d019      	beq.n	80091aa <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d115      	bne.n	80091aa <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	4b0c      	ldr	r3, [pc, #48]	; (80091b4 <vPortFree+0x6c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	43db      	mvns	r3, r3
 8009188:	401a      	ands	r2, r3
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800918e:	f7fe fe6b 	bl	8007e68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	4b08      	ldr	r3, [pc, #32]	; (80091b8 <vPortFree+0x70>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4413      	add	r3, r2
 800919c:	4a06      	ldr	r2, [pc, #24]	; (80091b8 <vPortFree+0x70>)
 800919e:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091a0:	68b8      	ldr	r0, [r7, #8]
 80091a2:	f000 f86d 	bl	8009280 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80091a6:	f7fe fe6d 	bl	8007e84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091aa:	bf00      	nop
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20003534 	.word	0x20003534
 80091b8:	2000352c 	.word	0x2000352c

080091bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80091c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091c8:	4b27      	ldr	r3, [pc, #156]	; (8009268 <prvHeapInit+0xac>)
 80091ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f003 0307 	and.w	r3, r3, #7
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00c      	beq.n	80091f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3307      	adds	r3, #7
 80091da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f023 0307 	bic.w	r3, r3, #7
 80091e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	4a1f      	ldr	r2, [pc, #124]	; (8009268 <prvHeapInit+0xac>)
 80091ec:	4413      	add	r3, r2
 80091ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091f4:	4a1d      	ldr	r2, [pc, #116]	; (800926c <prvHeapInit+0xb0>)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091fa:	4b1c      	ldr	r3, [pc, #112]	; (800926c <prvHeapInit+0xb0>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	4413      	add	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009208:	2208      	movs	r2, #8
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	1a9b      	subs	r3, r3, r2
 800920e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f023 0307 	bic.w	r3, r3, #7
 8009216:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	4a15      	ldr	r2, [pc, #84]	; (8009270 <prvHeapInit+0xb4>)
 800921c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800921e:	4b14      	ldr	r3, [pc, #80]	; (8009270 <prvHeapInit+0xb4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2200      	movs	r2, #0
 8009224:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009226:	4b12      	ldr	r3, [pc, #72]	; (8009270 <prvHeapInit+0xb4>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	1ad2      	subs	r2, r2, r3
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800923c:	4b0c      	ldr	r3, [pc, #48]	; (8009270 <prvHeapInit+0xb4>)
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <prvHeapInit+0xb8>)
 800924a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	4a09      	ldr	r2, [pc, #36]	; (8009278 <prvHeapInit+0xbc>)
 8009252:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009254:	4b09      	ldr	r3, [pc, #36]	; (800927c <prvHeapInit+0xc0>)
 8009256:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800925a:	601a      	str	r2, [r3, #0]
}
 800925c:	bf00      	nop
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	bc80      	pop	{r7}
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	20000d20 	.word	0x20000d20
 800926c:	20003520 	.word	0x20003520
 8009270:	20003528 	.word	0x20003528
 8009274:	20003530 	.word	0x20003530
 8009278:	2000352c 	.word	0x2000352c
 800927c:	20003534 	.word	0x20003534

08009280 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009288:	4b27      	ldr	r3, [pc, #156]	; (8009328 <prvInsertBlockIntoFreeList+0xa8>)
 800928a:	60fb      	str	r3, [r7, #12]
 800928c:	e002      	b.n	8009294 <prvInsertBlockIntoFreeList+0x14>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	429a      	cmp	r2, r3
 800929c:	d8f7      	bhi.n	800928e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	4413      	add	r3, r2
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d108      	bne.n	80092c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	441a      	add	r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	441a      	add	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d118      	bne.n	8009308 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	4b14      	ldr	r3, [pc, #80]	; (800932c <prvInsertBlockIntoFreeList+0xac>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d00d      	beq.n	80092fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	441a      	add	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	e008      	b.n	8009310 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092fe:	4b0b      	ldr	r3, [pc, #44]	; (800932c <prvInsertBlockIntoFreeList+0xac>)
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	601a      	str	r2, [r3, #0]
 8009306:	e003      	b.n	8009310 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	429a      	cmp	r2, r3
 8009316:	d002      	beq.n	800931e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800931e:	bf00      	nop
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	bc80      	pop	{r7}
 8009326:	4770      	bx	lr
 8009328:	20003520 	.word	0x20003520
 800932c:	20003528 	.word	0x20003528

08009330 <__libc_init_array>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	2600      	movs	r6, #0
 8009334:	4d0c      	ldr	r5, [pc, #48]	; (8009368 <__libc_init_array+0x38>)
 8009336:	4c0d      	ldr	r4, [pc, #52]	; (800936c <__libc_init_array+0x3c>)
 8009338:	1b64      	subs	r4, r4, r5
 800933a:	10a4      	asrs	r4, r4, #2
 800933c:	42a6      	cmp	r6, r4
 800933e:	d109      	bne.n	8009354 <__libc_init_array+0x24>
 8009340:	f000 f830 	bl	80093a4 <_init>
 8009344:	2600      	movs	r6, #0
 8009346:	4d0a      	ldr	r5, [pc, #40]	; (8009370 <__libc_init_array+0x40>)
 8009348:	4c0a      	ldr	r4, [pc, #40]	; (8009374 <__libc_init_array+0x44>)
 800934a:	1b64      	subs	r4, r4, r5
 800934c:	10a4      	asrs	r4, r4, #2
 800934e:	42a6      	cmp	r6, r4
 8009350:	d105      	bne.n	800935e <__libc_init_array+0x2e>
 8009352:	bd70      	pop	{r4, r5, r6, pc}
 8009354:	f855 3b04 	ldr.w	r3, [r5], #4
 8009358:	4798      	blx	r3
 800935a:	3601      	adds	r6, #1
 800935c:	e7ee      	b.n	800933c <__libc_init_array+0xc>
 800935e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009362:	4798      	blx	r3
 8009364:	3601      	adds	r6, #1
 8009366:	e7f2      	b.n	800934e <__libc_init_array+0x1e>
 8009368:	080094a4 	.word	0x080094a4
 800936c:	080094a4 	.word	0x080094a4
 8009370:	080094a4 	.word	0x080094a4
 8009374:	080094a8 	.word	0x080094a8

08009378 <memcpy>:
 8009378:	440a      	add	r2, r1
 800937a:	4291      	cmp	r1, r2
 800937c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009380:	d100      	bne.n	8009384 <memcpy+0xc>
 8009382:	4770      	bx	lr
 8009384:	b510      	push	{r4, lr}
 8009386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800938a:	4291      	cmp	r1, r2
 800938c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009390:	d1f9      	bne.n	8009386 <memcpy+0xe>
 8009392:	bd10      	pop	{r4, pc}

08009394 <memset>:
 8009394:	4603      	mov	r3, r0
 8009396:	4402      	add	r2, r0
 8009398:	4293      	cmp	r3, r2
 800939a:	d100      	bne.n	800939e <memset+0xa>
 800939c:	4770      	bx	lr
 800939e:	f803 1b01 	strb.w	r1, [r3], #1
 80093a2:	e7f9      	b.n	8009398 <memset+0x4>

080093a4 <_init>:
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	bf00      	nop
 80093a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093aa:	bc08      	pop	{r3}
 80093ac:	469e      	mov	lr, r3
 80093ae:	4770      	bx	lr

080093b0 <_fini>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	bf00      	nop
 80093b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b6:	bc08      	pop	{r3}
 80093b8:	469e      	mov	lr, r3
 80093ba:	4770      	bx	lr
